{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 12, "text": "package main\n\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/cmd\"\n)\n\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "n_tokens": 44, "primary_symbol": "main", "primary_kind": "function", "primary_span": [7, 12], "def_symbols": ["main"], "symbols": ["main", "package", "import", "impalastudios", "com", "aviation", "liveflights", "cmd", "func", "err", "RunRootCmd", "nil", "panic"], "doc_head": "package main\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/cmd\"\n)\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 14, "text": "package cmd\n\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/cmd/data_processor\"\n\t\"strings\"\n\t\"time\"\n\n\t\"go.impalastudios.com/aviation/liveflights/cmd/scraper\"\n\t\"go.impalastudios.com/aviation/liveflights/cmd/serve\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n", "n_tokens": 82, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 14], "def_symbols": [], "symbols": ["package", "cmd", "import", "impalastudios", "com", "aviation", "liveflights", "data_processor", "strings", "time", "scraper", "serve", "github", "spf13", "cobra", "viper"], "doc_head": "package cmd\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/cmd/data_processor\"\n\t\"strings\"\n\t\"time\"\n\t\"go.impalastudios.com/aviation/liveflights/cmd/scraper\"\n\t\"go.impalastudios.com/aviation/liveflights/cmd/serve\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 15, "end_line": 59, "text": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"liveflights\",\n\t\tShort:   \"[Aviation] Live Flights Service\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\tcmd.AddCommand(scraper.New())\n\tcmd.AddCommand(data_processor.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Aviation] Live Flights\", \"The application name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"Whether to use path style URLs when calling S3 APIs.\")\n\n\tcmd.PersistentFlags().String(\"mongodb.name\", \"live_flights\", \"DB name for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.host\", \"localhost\", \"Host name for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.user\", \"root\", \"User for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.password\", \"example\", \"Password for the database\")\n\tcmd.PersistentFlags().Int(\"mongodb.port\", 27019, \"Port for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.replica-set\", \"rs0\", \"Replica set name for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.uri\", \"\", \"URI for the database\")\n\n\tcmd.PersistentFlags().String(\"cache.host\", \"localhost\", \"The cache host.\")\n\tcmd.PersistentFlags().Int(\"cache.port\", 6379, \"The cache port.\")\n\tcmd.PersistentFlags().String(\"cache.user\", \"default\", \"The cache user.\")\n\tcmd.PersistentFlags().String(\"cache.password\", \"\", \"The cache password.\")\n\tcmd.PersistentFlags().Duration(\"cache.ttl.default\", 7*(24*time.Hour), \"The default ttl for cache items.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}\n", "n_tokens": 527, "primary_symbol": "RunRootCmd", "primary_kind": "function", "primary_span": [16, 59], "def_symbols": ["RunRootCmd"], "symbols": ["RunRootCmd", "entrypoint", "the", "root", "command", "func", "error", "viper", "AutomaticEnv", "SetEnvKeyReplacer", "strings", "NewReplacer", "cmd", "cobra", "Command", "Use", "liveflights", "Short", "Aviation", "Live", "Flights", "Service", "Version", "AddCommand", "serve", "New", "scraper", "data_processor", "PersistentFlags", "Bool", "logging", "debug", "false", "Whether", "emit", "level", "logs", "not", "String", "encoding", "json", "The", "log", "strategy", "StringP", "app", "name", "application", "aws", "access", "key", "AWS", "secret", "session", "token", "endpoint", "url", "region", "use", "path", "style", "URLs", "when", "calling", "APIs", "mongodb", "live_flights", "for", "database", "host", "localhost", "Host", "user", "User", "password", "example", "Password", "Int", "port", "Port", "replica", "set", "rs0", "Replica", "uri", "URI", "cache", "default", "Duration", "ttl", "time", "Hour", "items", "BindPFlags", "return", "Execute"], "doc_head": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\tcmd := &cobra.Command{\n\t\tUse:     \"liveflights\",\n\t\tShort:   \"[Aviation] Live Flights Service\",\n\t\tVersion: \"1.0.0\",\n\t}\n\tcmd.AddCommand(serve.New())\n\tcmd.AddCommand(scraper.New())\n\tcmd.AddCommand(data_processor.New())\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Aviation] Live Flights\", \"The application name.\")\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"Whether to use path style URLs when calling S3 APIs.\")\n\tcmd.PersistentFlags().String(\""}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package scraper\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "scraper"], "doc_head": "package scraper"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 23, "text": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\tradarboxtcp \"go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)\n", "n_tokens": 199, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 23], "def_symbols": [], "symbols": ["import", "context", "github", "com", "cockroachdb", "errors", "spf13", "cobra", "viper", "mongoadapter", "impalastudios", "aviation", "liveflights", "internal", "adapters", "mongodb", "radarboxtcp", "radarbox_tcp", "core", "pkg", "xmongodb", "grpc", "dnssrvresolver", "log", "xotel", "otel", "opentelemetry", "propagation", "uber", "org", "zap", "google", "golang", "resolver", "signal", "time"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\tradarboxtcp \"go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 24, "end_line": 45, "text": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"scrape\",\n\t\tShort: \"Scrape radarbox data and persist\",\n\t\tLong:  \"Scrapes radarbox data through TCP client and persists the data in a database\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runScrape,\n\t}\n\n\tcmd.PersistentFlags().String(\"radarbox.host\", \"\", \"Radarbox TCP host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.host\", \"\", \"Radarbox SSH host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.private-key\", \"\", \"Radarbox SSH private key\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.user\", \"impala\", \"Radarbox SSH user\")\n\n\tcmd.PersistentFlags().Duration(\"services.scraper.batch_store_interval\", 5*time.Minute, \"The duration between each flush of scraped batches of data.\")\n\n\treturn cmd\n}\n", "n_tokens": 225, "primary_symbol": "New", "primary_kind": "function", "primary_span": [25, 45], "def_symbols": ["New"], "symbols": ["New", "creates", "new", "scrape", "command", "func", "cobra", "Command", "cmd", "Use", "Short", "Scrape", "radarbox", "data", "and", "persist", "Long", "Scrapes", "through", "TCP", "client", "persists", "the", "database", "PreRunE", "args", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runScrape", "PersistentFlags", "String", "host", "Radarbox", "ssh", "SSH", "private", "key", "user", "impala", "Duration", "services", "scraper", "batch_store_interval", "time", "Minute", "The", "duration", "between", "each", "flush", "scraped", "batches"], "doc_head": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"scrape\",\n\t\tShort: \"Scrape radarbox data and persist\",\n\t\tLong:  \"Scrapes radarbox data through TCP client and persists the data in a database\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runScrape,\n\t}\n\tcmd.PersistentFlags().String(\"radarbox.host\", \"\", \"Radarbox TCP host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.host\", \"\", \"Radarbox SSH host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.private-key\", \"\", \"Radarbox SSH private key\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.user\", \"impala\", \"Radarbox SSH user\")\n\tcmd.PersistentFlags().Duration(\"services.scraper.batch_store_interval\", 5*time.Minute, \"The duration between each flush of scraped batches of data.\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 46, "end_line": 63, "text": "type scrapeConfig struct {\n\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`\n\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tRadarBox radarboxtcp.Config `mapstructure:\"radarbox\"`\n\tMongo    xmongodb.Config    `mapstructure:\"mongodb\"`\n\tServices struct {\n\t\tScraper struct {\n\t\t\tBatchStoreInterval time.Duration `mapstructure:\"batch_store_interval\"`\n\t\t} `mapstructure:\"scraper\"`\n\t} `mapstructure:\"services\"`\n}\n", "n_tokens": 140, "primary_symbol": "", "primary_kind": "", "primary_span": [46, 63], "def_symbols": [], "symbols": ["type", "scrapeConfig", "struct", "App", "Name", "string", "mapstructure", "name", "Key", "key", "app", "Logging", "Debug", "bool", "debug", "Encoding", "encoding", "logging", "RadarBox", "radarboxtcp", "Config", "radarbox", "Mongo", "xmongodb", "mongodb", "Services", "Scraper", "BatchStoreInterval", "time", "Duration", "batch_store_interval", "scraper", "services"], "doc_head": "type scrapeConfig struct {\n\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`\n\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tRadarBox radarboxtcp.Config `mapstructure:\"radarbox\"`\n\tMongo    xmongodb.Config    `mapstructure:\"mongodb\"`\n\tServices struct {\n\t\tScraper struct {\n\t\t\tBatchStoreInterval time.Duration `mapstructure:\"batch_store_interval\"`\n\t\t} `mapstructure:\"scraper\"`\n\t} `mapstructure:\"services\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 64, "end_line": 159, "text": "func runScrape(cmd *cobra.Command, _ []string) error {\n\tvar cfg scrapeConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\tctx := cmd.Context()\n\n\t// Make connections\n\tresolver.Register(dnssrvresolver.New())\n\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(\"go.impalastudios.com/otel\"))\n\n\t// Database\n\tdb, err := xmongodb.Connect(ctx, cfg.Mongo)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to mongodb\")\n\t}\n\n\tif err := xmongodb.Migrate(ctx, cfg.Mongo.DB, db.Client); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate mongodb\")\n\t}\n\n\tdatabase := db.Database(cfg.Mongo.DB)\n\tflightsUpdateRepo := mongoadapter.NewFlightsUpdateRepository(database)\n\n\t// External provider\n\tclient := radarboxtcp.New(cfg.RadarBox)\n\tif err := client.Connect(ctx); err != nil {\n\t\treturn err\n\t}\n\tdefer func() { _ = client.Close() }()\n\n\t// Service\n\tsvc := core.NewFlightsIngestService(\n\t\tflightsUpdateRepo,\n\t\tclient,\n\t\tcfg.Services.Scraper.BatchStoreInterval,\n\t)\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tlog.Info(ctx, \"Starting to consume flight updates\")\n\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\n\tgo func() {\n\t\tif err := svc.ConsumeFlightUpdates(ctx); err != nil {\n\t\t\tlog.Error(ctx, \"Failed to consume flight updates\", zap.Error(err))\n\t\t\tcancel()\n\t\t}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(ctx, \"Context done, terminating the realtime live flights service\")\n\tcase <-quit:\n\t\tlog.Info(ctx, \"Received interrupt signal, terminating the realtime live flights service\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 645, "primary_symbol": "runScrape", "primary_kind": "function", "primary_span": [64, 159], "def_symbols": ["runScrape"], "symbols": ["runScrape", "func", "cmd", "cobra", "Command", "string", "error", "var", "cfg", "scrapeConfig", "err", "viper", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "logger", "log", "New", "WithService", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "SetLogger", "ctx", "Context", "Make", "connections", "resolver", "Register", "dnssrvresolver", "Tracing", "xotel", "NewTracerProvider", "TracerProviderConfig", "ServiceName", "App", "Name", "Endpoint", "otel", "tracer", "endpoint", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "impalastudios", "com", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "Database", "xmongodb", "Connect", "Mongo", "connect", "mongodb", "Migrate", "Client", "migrate", "database", "flightsUpdateRepo", "mongoadapter", "NewFlightsUpdateRepository", "External", "client", "radarboxtcp", "RadarBox", "defer", "Close", "Service", "svc", "core", "NewFlightsIngestService", "Services", "Scraper", "BatchStoreInterval", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "Info", "Starting", "consume", "flight", "updates", "cancel", "context", "WithCancel", "ConsumeFlightUpdates", "Error", "Failed", "zap", "select", "case", "Done", "done", "terminating", "the", "realtime", "live", "flights", "service", "Received", "interrupt"], "doc_head": "func runScrape(cmd *cobra.Command, _ []string) error {\n\tvar cfg scrapeConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\tctx := cmd.Context()\n\t// Make connections\n\tresolver.Register(dnssrvresolver.New())\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn erro"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package data_processor\n", "n_tokens": 4, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "data_processor"], "doc_head": "package data_processor"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 31, "text": "import (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tadapters \"go.impalastudios.com/aviation/liveflights/internal/adapters\"\n\tadapterscache \"go.impalastudios.com/aviation/liveflights/internal/adapters/cache\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/cache\"\n\tairlinesv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\tairportsv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xgrpc\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)\n", "n_tokens": 348, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 31], "def_symbols": [], "symbols": ["import", "context", "github", "com", "aws", "sdk", "service", "cockroachdb", "errors", "spf13", "cobra", "viper", "adapters", "impalastudios", "aviation", "liveflights", "internal", "adapterscache", "cache", "filesystem", "mongoadapter", "mongodb", "core", "pkg", "airlinesv0", "grpc", "airlines", "airportsv0", "airports", "xaws", "xgrpc", "xmongodb", "dnssrvresolver", "log", "xotel", "otel", "opentelemetry", "propagation", "uber", "org", "zap", "google", "golang", "resolver", "signal", "time"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tadapters \"go.impalastudios.com/aviation/liveflights/internal/adapters\"\n\tadapterscache \"go.impalastudios.com/aviation/liveflights/internal/adapters/cache\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/cache\"\n\tairlinesv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\tairportsv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xgrpc\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 32, "end_line": 52, "text": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"data-processor\",\n\t\tShort: \"Enrich, archive and clean live flights data\",\n\t\tLong:  \"Retrieves new live flights from database, to enrich the data. And archives and removes old data from the database.\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runDataProcessor,\n\t}\n\n\tcmd.PersistentFlags().String(\"services.airlines.endpoint\", \"\", \"airlines service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airlines.cache.ttl\", 5*time.Minute, \"The cache TTL for airlines\")\n\tcmd.PersistentFlags().String(\"services.airports.endpoint\", \"\", \"airports service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airports.cache.ttl\", 5*time.Minute, \"The cache TTL for airports\")\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\n\treturn cmd\n}\n", "n_tokens": 229, "primary_symbol": "New", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["New"], "symbols": ["New", "creates", "new", "scrape", "command", "func", "cobra", "Command", "cmd", "Use", "data", "processor", "Short", "Enrich", "archive", "and", "clean", "live", "flights", "Long", "Retrieves", "from", "database", "enrich", "the", "And", "archives", "removes", "old", "PreRunE", "args", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runDataProcessor", "PersistentFlags", "String", "services", "airlines", "endpoint", "service", "Duration", "cache", "ttl", "time", "Minute", "The", "TTL", "for", "airports", "stores", "bucket", "name", "where", "are", "archived"], "doc_head": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"data-processor\",\n\t\tShort: \"Enrich, archive and clean live flights data\",\n\t\tLong:  \"Retrieves new live flights from database, to enrich the data. And archives and removes old data from the database.\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runDataProcessor,\n\t}\n\tcmd.PersistentFlags().String(\"services.airlines.endpoint\", \"\", \"airlines service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airlines.cache.ttl\", 5*time.Minute, \"The cache TTL for airlines\")\n\tcmd.PersistentFlags().String(\"services.airports.endpoint\", \"\", \"airports service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airports.cache.ttl\", 5*time.Minute, \"The cache TTL for airports\")\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 53, "end_line": 76, "text": "type dataProcessorConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`\n\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`\n\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`\n\tCache  cache.Config    `mapstructure:\"cache\"`\n\tStores struct {\n\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`\n\tServices struct {\n\t\tAirlines struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`\n\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airlines\"`", "n_tokens": 197, "primary_symbol": "", "primary_kind": "", "primary_span": [53, 76], "def_symbols": [], "symbols": ["type", "dataProcessorConfig", "struct", "AWS", "xaws", "Config", "mapstructure", "aws", "App", "Name", "string", "name", "Key", "key", "app", "Logging", "Debug", "bool", "debug", "Encoding", "encoding", "logging", "Mongo", "xmongodb", "mongodb", "Cache", "cache", "Stores", "Archive", "BucketName", "bucket", "archive", "stores", "Services", "Airlines", "Endpoint", "endpoint", "TTL", "time", "Duration", "ttl", "airlines"], "doc_head": "type dataProcessorConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`\n\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`\n\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`\n\tCache  cache.Config    `mapstructure:\"cache\"`\n\tStores struct {\n\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`\n\tServices struct {\n\t\tAirlines struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`\n\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airlines\"`"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 77, "end_line": 85, "text": "\t\tAirports struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`\n\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airports\"`\n\t} `mapstructure:\"services\"`\n}\n", "n_tokens": 61, "primary_symbol": "", "primary_kind": "", "primary_span": [77, 85], "def_symbols": [], "symbols": ["Airports", "struct", "Endpoint", "string", "mapstructure", "endpoint", "Cache", "TTL", "time", "Duration", "ttl", "cache", "airports", "services"], "doc_head": "\t\tAirports struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`\n\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airports\"`\n\t} `mapstructure:\"services\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 86, "end_line": 260, "text": "func runDataProcessor(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\n\t// Config\n\tvar cfg dataProcessorConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(\"go.impalastudios.com/otel\"))\n\n\t// Database\n\tdb, err := xmongodb.Connect(ctx, cfg.Mongo)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to mongodb\")\n\t}\n\n\tif err := xmongodb.Migrate(ctx, cfg.Mongo.DB, db.Client); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate mongodb\")\n\t}\n\n\tdatabase := db.Database(cfg.Mongo.DB)\n\n\t// Cache\n\tcacheClient := cache.Connect(cmd.Context(), cfg.Cache)\n\n\tairlinesCache := adapterscache.NewAirlinesCache(cacheClient, cfg.Services.Airlines.Cache.TTL)\n\tairportsCache := adapterscache.NewAirportsCache(cacheClient, cfg.Services.Airports.Cache.TTL)\n\n\t// Services\n\ts3Client := xaws.NewS3ClientFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\n\tarchiveFilesystem := filesystem.NewS3Filesystem(cfg.Stores.Archive.BucketName, s3Client)\n\n\tflightsArchiveRepo := mongoadapter.NewFlightsArchiveRepository(database)\n\n\tarchiveSvc := core.NewFlightArchiveService(\n\t\tflightsArchiveRepo,\n\t\tarchiveFilesystem,\n\t\t1000,\n\t\t10,\n\t)\n\n\tflightsEnrichRepo := mongoadapter.NewFlightsEnrichRepository(database)\n\n\tairlines := adapters.NewAirlinesGrpcClient(\n\t\tairlinesv0.NewAirlinesServiceClient(\n\t\t\txgrpc.MustConnect(cfg.Services.Airlines.Endpoint),\n\t\t),\n\t\tairlinesCache,\n\t)\n\n\tairports := adapters.NewAirportsGrpcClient(\n\t\tairportsv0.NewAirportsServiceClient(\n\t\t\txgrpc.MustConnect(cfg.Services.Airports.Endpoint),\n\t\t),\n\t\tairportsCache,\n\t\t25,\n\t)\n\n\tenrichSvc := core.NewFlightsEnrichService(\n\t\tflightsEnrichRepo,\n\t\tairlines,\n\t\tairports,\n\t\t1000,\n\t\t10,\n\t)\n\n\tlog.Info(ctx, \"Starting to process data\")\n\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\n\tmaxStepDuration := viper.GetDuration(\"max_duration\")\n\tif maxStepDuration == 0 {\n\t\tmaxStepDuration = 150 * time.Second\n\t}\n\tsleepDuration := viper.GetDuration(\"sleep_duration\")\n\tif sleepDuration == 0 {\n\t\tsleepDuration = time.Minute\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Context done, exiting processor loop\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\n\t\tstartArchive := time.Now()\n\t\terr := archiveSvc.Archive(ctx)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to archive flights\", zap.Error(err))\n\t\t}\n\n\t\tarchiveDur := time.Since(startArchive)\n\t\tif archiveDur > maxStepDuration {\n\t\t\tlog.Warn(ctx, \"Clean/archive step took longer than expected\",\n\t\t\t\tzap.Duration(\"duration\", archiveDur),\n\t\t\t\tzap.Duration(\"max_duration\", maxStepDuration),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\n\t\tstartEnrich := time.Now()\n\t\terr = enrichSvc.Enrich(ctx)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to enrich live flights data\", zap.Error(err))\n\t\t}\n\n\t\tenrichDur := time.Since(startEnrich)\n\t\tif enrichDur > maxStepDuration {\n\t\t\tlog.Warn(ctx, \"Enrich step took longer than expected\",\n\t\t\t\tzap.Duration(\"duration\", enrichDur),\n\t\t\t\tzap.Duration(\"max_duration\", maxStepDuration),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Context done, exiting processor loop\")\n\t\t\treturn nil\n\t\tcase <-time.After(sleepDuration):\n\t\t}\n\t}\n}\n", "n_tokens": 1182, "primary_symbol": "runDataProcessor", "primary_kind": "function", "primary_span": [86, 260], "def_symbols": ["runDataProcessor"], "symbols": ["runDataProcessor", "func", "cmd", "cobra", "Command", "string", "error", "ctx", "Context", "Config", "var", "cfg", "dataProcessorConfig", "err", "viper", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "awsCfg", "xaws", "LoadAWSConfig", "AWS", "log", "Error", "Failed", "load", "zap", "quit", "make", "chan", "Signal", "defer", "close", "signal", "Notify", "Interrupt", "Logging", "logger", "New", "WithService", "App", "Name", "WithEncoding", "Encoding", "WithDebugEnabled", "Debug", "SetLogger", "DNS", "resolver", "Register", "dnssrvresolver", "Tracing", "xotel", "NewTracerProvider", "TracerProviderConfig", "ServiceName", "Endpoint", "GetString", "otel", "tracer", "endpoint", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "impalastudios", "com", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "Database", "xmongodb", "Connect", "Mongo", "connect", "mongodb", "Migrate", "Client", "migrate", "database", "Cache", "cacheClient", "cache", "airlinesCache", "adapterscache", "NewAirlinesCache", "Services", "Airlines", "TTL", "airportsCache", "NewAirportsCache", "Airports", "s3Client", "NewS3ClientFromConfig", "Options", "UsePathStyle", "archiveFilesystem", "filesystem", "NewS3Filesystem", "Stores", "Archive", "BucketName", "flightsArchiveRepo", "mongoadapter", "NewFlightsArchiveRepository", "archiveSvc", "core", "NewFlightArchiveService", "flightsEnrichRepo", "NewFlightsEnrichRepository", "airlines", "adapters", "NewAirlinesGrpcClient", "airlinesv0", "NewAirlinesServiceClient", "xgrpc", "MustConnect", "airports", "NewAirportsGrpcClient", "airportsv0", "NewAirportsServiceClient", "enrichSvc", "NewFlightsEnrichService", "Info", "Starting", "process", "data", "cancel", "context", "WithCancel", "maxStepDuration", "max_duration", "time", "Second", "sleepDuration", "sleep_duration", "Minute", "for", "select", "case", "Done", "done", "exiting", "processor", "loop", "default", "startArchive", "Now", "archive", "flights", "archiveDur", "Since", "Warn", "Clean", "step", "took", "longer", "than", "expected", "Duration", "duration", "startEnrich", "Enrich", "enrich", "live", "enrichDur", "After"], "doc_head": "func runDataProcessor(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\t// Config\n\tvar cfg dataProcessorConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tsignal.Notify(quit, os.Interrupt)\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\tmp, err := xotel.NewMeterProvider(cmd.Cont"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 45, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"slices\"\n\t\"time\"\n\n\t\"github.com/go-playground/validator/v10\"\n\thttphandlers \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\n\t\"github.com/cockroachdb/errors\"\n\tginzap \"github.com/gin-contrib/zap\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\totelginmetric \"go.impalastudios.com/otel/gingonic\"\n\trequestid \"go.impalastudios.com/requestid/gin\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.uber.org/zap/zapcore\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.uber.org/zap\"\n\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/validation/customrules\"\n\n\t\"google.golang.org/grpc/resolver\"\n)\n", "n_tokens": 412, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 45], "def_symbols": [], "symbols": ["import", "context", "fmt", "github", "com", "aws", "sdk", "service", "impalastudios", "aviation", "liveflights", "internal", "adapters", "filesystem", "pkg", "xaws", "net", "http", "signal", "slices", "time", "playground", "validator", "v10", "httphandlers", "handlers", "mongodb", "core", "opentelemetry", "otel", "propagation", "cockroachdb", "errors", "ginzap", "gin", "contrib", "zap", "gonic", "binding", "i18n", "xmongodb", "log", "xotel", "otelginmetric", "gingonic", "requestid", "instrumentation", "otelgin", "uber", "org", "zapcore", "spf13", "cobra", "viper", "grpc", "dnssrvresolver", "validation", "customrules", "google", "golang", "resolver"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"slices\"\n\t\"time\"\n\t\"github.com/go-playground/validator/v10\"\n\thttphandlers \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"github.com/cockroachdb/errors\"\n\tginzap \"github.com/gin-contrib/zap\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\totelginmetric \"go.impalastudios.com/otel/gingonic\"\n\trequestid \"go.impalastudios.com/requestid/gin\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"github.com/spf13/cobra"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 46, "end_line": 69, "text": "// Serve is a function that starts the http server\nfunc newServeHttpCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"http\",\n\t\tShort: \"Start HTTP REST server\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeHttp,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.http.port\", 8080, \"HTTP service port\")\n\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\n\treturn cmd\n}\n\ntype serveHttpConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`\n\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`", "n_tokens": 183, "primary_symbol": "newServeHttpCommand", "primary_kind": "function", "primary_span": [47, 69], "def_symbols": ["newServeHttpCommand"], "symbols": ["newServeHttpCommand", "Serve", "function", "that", "starts", "the", "http", "server", "func", "cobra", "Command", "cmd", "Use", "Short", "Start", "HTTP", "REST", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runServeHttp", "Args", "ExactArgs", "PersistentFlags", "Int", "app", "port", "service", "String", "stores", "archive", "bucket", "name", "The", "where", "live", "flights", "are", "archived", "type", "serveHttpConfig", "struct", "AWS", "xaws", "Config", "mapstructure", "aws", "App", "Name", "Key", "key"], "doc_head": "// Serve is a function that starts the http server\nfunc newServeHttpCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"http\",\n\t\tShort: \"Start HTTP REST server\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeHttp,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().Int(\"app.http.port\", 8080, \"HTTP service port\")\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\treturn cmd\n}\ntype serveHttpConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`\n\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 70, "end_line": 85, "text": "\t\tHTTP struct {\n\t\t\tPort int `mapstructure:\"port\"`\n\t\t} `mapstructure:\"http\"`\n\t} `mapstructure:\"app\"`\n\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`\n\tStores struct {\n\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`\n}\n", "n_tokens": 115, "primary_symbol": "", "primary_kind": "", "primary_span": [70, 85], "def_symbols": [], "symbols": ["HTTP", "struct", "Port", "int", "mapstructure", "port", "http", "app", "Logging", "Debug", "bool", "debug", "Encoding", "string", "encoding", "logging", "Mongo", "xmongodb", "Config", "mongodb", "Stores", "Archive", "BucketName", "bucket", "name", "archive", "stores"], "doc_head": "\t\tHTTP struct {\n\t\t\tPort int `mapstructure:\"port\"`\n\t\t} `mapstructure:\"http\"`\n\t} `mapstructure:\"app\"`\n\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`\n\tStores struct {\n\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 86, "end_line": 240, "text": "func runServeHttp(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\n\t// Config\n\tvar cfg serveHttpConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal db config\")\n\t}\n\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\n\t// i18n\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\ti18n.Register(v)\n\t\tcustomrules.Register(v)\n\t}\n\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(\"go.impalastudios.com/otel\"))\n\n\t// Database\n\tdb, err := xmongodb.Connect(ctx, cfg.Mongo)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to mongodb\")\n\t}\n\n\tdatabase := db.Database(cfg.Mongo.DB)\n\n\t// Services\n\tflightsUpdateRepo := mongodb.NewFlightsUpdateRepository(database)\n\n\ts3Client := xaws.NewS3ClientFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\n\tsvc := core.NewService(flightsUpdateRepo, filesystem.NewS3Filesystem(cfg.Stores.Archive.BucketName, s3Client))\n\n\t// Routing\n\trouter := gin.New()\n\trouter.Use(otelginmetric.Middleware(\n\t\totelginmetric.WithRecordFilter(func(route string, _ *http.Request) bool {\n\t\t\treturn route != \"/__gw/health\"\n\t\t}),\n\t))\n\trouter.Use(requestid.New()...)\n\trouter.Use(\n\t\tginzap.GinzapWithConfig(logger, &ginzap.Config{\n\t\t\tTimeFormat: time.RFC3339,\n\t\t\tUTC:        true,\n\t\t\tSkipPaths:  []string{\"/__gw/health\"},\n\t\t\tContext: func(c *gin.Context) []zapcore.Field {\n\t\t\t\treturn []zapcore.Field{log.RequestIDExtractor(c), zap.String(\"type\", \"access_log\")}\n\t\t\t},\n\t\t}),\n\t\tginzap.RecoveryWithZap(logger, true),\n\t)\n\trouter.Use(otelgin.Middleware(\n\t\tcfg.App.Name,\n\t\totelgin.WithTracerProvider(tp),\n\t\totelgin.WithFilter(func(req *http.Request) bool {\n\t\t\treturn slices.Contains([]string{\"/__gw/health\"}, req.URL.Path)\n\t\t}),\n\t))\n\n\tgw := router.Group(\"/__gw\")\n\n\thandlersV0 := v0.New(svc)\n\thandlersV0.Register(gw)\n\n\thealthHandler := httphandlers.NewHealthHandler()\n\thealthHandler.Register(gw)\n\n\tsrv := http.Server{\n\t\tAddr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.http.port\")),\n\t\tHandler: router,\n\t}\n\n\tgo func() {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Error(context.TODO(), \"Error occurred while listening.\", zap.Error(err))\n\t\t}\n\t}()\n\n\t// Shutting down\n\t<-quit\n\n\tlog.Info(context.TODO(), \"Shutting down the REST server...\")\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Error(cmd.Context(), \"Error occurred while shutting down.\", zap.Error(err))\n\t}\n\n\tif err := tp.Shutdown(ctx); err != nil {\n\t\tlog.Error(cmd.Context(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tif err := mp.Shutdown(ctx); err != nil {\n\t\tlog.Error(cmd.Context(), \"Error occurred while shutting down the meter.\", zap.Error(err))\n\t}\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(context.TODO(), \"REST server shutdown timed out.\")\n\tdefault:\n\t\tlog.Info(context.TODO(), \"REST server shutdown gracefully.\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 1118, "primary_symbol": "runServeHttp", "primary_kind": "function", "primary_span": [86, 240], "def_symbols": ["runServeHttp"], "symbols": ["runServeHttp", "func", "cmd", "cobra", "Command", "string", "error", "ctx", "Context", "Config", "var", "cfg", "serveHttpConfig", "err", "viper", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "awsCfg", "xaws", "LoadAWSConfig", "AWS", "log", "Error", "Failed", "load", "zap", "quit", "make", "chan", "Signal", "defer", "close", "signal", "Notify", "Interrupt", "Logging", "logger", "New", "WithService", "App", "Name", "WithEncoding", "Encoding", "WithDebugEnabled", "Debug", "SetLogger", "DNS", "resolver", "Register", "dnssrvresolver", "i18n", "binding", "Validator", "Engine", "validator", "Validate", "customrules", "Tracing", "xotel", "NewTracerProvider", "TracerProviderConfig", "ServiceName", "Endpoint", "GetString", "otel", "tracer", "endpoint", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "impalastudios", "com", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "Database", "xmongodb", "Connect", "Mongo", "connect", "mongodb", "database", "Services", "flightsUpdateRepo", "NewFlightsUpdateRepository", "s3Client", "NewS3ClientFromConfig", "Options", "UsePathStyle", "svc", "core", "NewService", "filesystem", "NewS3Filesystem", "Stores", "Archive", "BucketName", "Routing", "router", "gin", "Use", "otelginmetric", "Middleware", "WithRecordFilter", "route", "http", "Request", "bool", "__gw", "health", "requestid", "ginzap", "GinzapWithConfig", "TimeFormat", "time", "RFC3339", "UTC", "true", "SkipPaths", "zapcore", "Field", "RequestIDExtractor", "String", "type", "access_log", "RecoveryWithZap", "otelgin", "WithTracerProvider", "WithFilter", "req", "slices", "Contains", "URL", "Path", "Group", "handlersV0", "healthHandler", "httphandlers", "NewHealthHandler", "srv", "Server", "Addr", "fmt", "Sprintf", "GetInt", "app", "port", "Handler", "Info", "started", "Ready", "accept", "incoming", "requests", "ListenAndServe", "ErrServerClosed", "context", "TODO", "occurred", "while", "listening", "Shutting", "down", "the", "REST", "server", "cancel", "WithTimeout", "Background", "Second", "Shutdown", "shutting", "select", "case", "Done", "shutdown", "timed", "out", "default", "gracefully"], "doc_head": "func runServeHttp(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\t// Config\n\tvar cfg serveHttpConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal db config\")\n\t}\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tsignal.Notify(quit, os.Interrupt)\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\t// i18n\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\ti18n.Register(v)\n\t\tcustomrules.Register(v)\n\t}\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagatio"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\n\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeHttpCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}\n", "n_tokens": 138, "primary_symbol": "New", "primary_kind": "function", "primary_span": [8, 22], "def_symbols": ["New"], "symbols": ["New", "package", "serve", "import", "github", "com", "spf13", "cobra", "time", "func", "Command", "cmd", "Use", "Short", "Serve", "AddCommand", "newServeHttpCommand", "PersistentFlags", "String", "otel", "tracer", "endpoint", "localhost", "The", "URL", "the", "tracing", "collector", "meter", "Duration", "interval", "Second", "which", "metrics", "will", "reported", "return"], "doc_head": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\tcmd.AddCommand(newServeHttpCommand())\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 40, "text": "package core\n\nimport (\n\t\"time\"\n)\n\n// ClassificationComparator is a comparator for airlines and airports classification\ntype ClassificationComparator int8\n\nconst (\n\t// ClassificationGreaterComparator is a comparator for greater than\n\tClassificationGreaterComparator ClassificationComparator = iota + 1\n\t// ClassificationEqualComparator is a comparator for equal\n\tClassificationEqualComparator\n\t// ClassificationLesserComparator is a comparator for lesser than\n\tClassificationLesserComparator\n)\n\ntype (\n\tClassification struct {\n\t\tC          int8\n\t\tComparator ClassificationComparator\n\t}\n\n\tAirline struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}\n\n\tAirport struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}\n", "n_tokens": 189, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 40], "def_symbols": [], "symbols": ["package", "core", "import", "time", "ClassificationComparator", "comparator", "for", "airlines", "and", "airports", "classification", "type", "int8", "const", "ClassificationGreaterComparator", "greater", "than", "iota", "ClassificationEqualComparator", "equal", "ClassificationLesserComparator", "lesser", "Classification", "struct", "Comparator", "Airline", "string", "Designator", "IATA", "ICAO", "int64", "Airport"], "doc_head": "package core\nimport (\n\t\"time\"\n)\n// ClassificationComparator is a comparator for airlines and airports classification\ntype ClassificationComparator int8\nconst (\n\t// ClassificationGreaterComparator is a comparator for greater than\n\tClassificationGreaterComparator ClassificationComparator = iota + 1\n\t// ClassificationEqualComparator is a comparator for equal\n\tClassificationEqualComparator\n\t// ClassificationLesserComparator is a comparator for lesser than\n\tClassificationLesserComparator\n)\ntype (\n\tClassification struct {\n\t\tC          int8\n\t\tComparator ClassificationComparator\n\t}\n\tAirline struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}\n\tAirport struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 41, "end_line": 67, "text": "\tLiveFlight struct {\n\t\tID                    string\n\t\tFlightID              *string\n\t\tFlightNumber          string\n\t\tAirlineDesignator     string\n\t\tAirlineClassification int\n\t\tDepartureTime         time.Time\n\t\tDepartureAirportIATA  string\n\t\tDepartureAirportICAO  string\n\t\tArrivalAirportIATA    string\n\t\tArrivalAirportICAO    string\n\t\tPosition              Coordinate\n\t\tAltitude              float64\n\t\tHeadingDirection      float64\n\t\tGroundSpeed           float64\n\t\tVerticalSpeed         float64\n\t\tSquawk                int\n\t\tTracks                []TrackPoint\n\t\tCreatedAt             time.Time\n\t\tUpdatedAt             time.Time\n\t}\n\n\tCoordinate struct {\n\t\tLat float64\n\t\tLon float64\n\t}\n", "n_tokens": 178, "primary_symbol": "", "primary_kind": "", "primary_span": [41, 67], "def_symbols": [], "symbols": ["LiveFlight", "struct", "string", "FlightID", "FlightNumber", "AirlineDesignator", "AirlineClassification", "int", "DepartureTime", "time", "Time", "DepartureAirportIATA", "DepartureAirportICAO", "ArrivalAirportIATA", "ArrivalAirportICAO", "Position", "Coordinate", "Altitude", "float64", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "Tracks", "TrackPoint", "CreatedAt", "UpdatedAt", "Lat", "Lon"], "doc_head": "\tLiveFlight struct {\n\t\tID                    string\n\t\tFlightID              *string\n\t\tFlightNumber          string\n\t\tAirlineDesignator     string\n\t\tAirlineClassification int\n\t\tDepartureTime         time.Time\n\t\tDepartureAirportIATA  string\n\t\tDepartureAirportICAO  string\n\t\tArrivalAirportIATA    string\n\t\tArrivalAirportICAO    string\n\t\tPosition              Coordinate\n\t\tAltitude              float64\n\t\tHeadingDirection      float64\n\t\tGroundSpeed           float64\n\t\tVerticalSpeed         float64\n\t\tSquawk                int\n\t\tTracks                []TrackPoint\n\t\tCreatedAt             time.Time\n\t\tUpdatedAt             time.Time\n\t}\n\tCoordinate struct {\n\t\tLat float64\n\t\tLon float64\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 68, "end_line": 103, "text": "\tTrackPoint struct {\n\t\tLiveFlightID     string\n\t\tPosition         Coordinate\n\t\tAltitude         float64\n\t\tHeadingDirection float64\n\t\tGroundSpeed      float64\n\t\tVerticalSpeed    float64\n\t\tSquawk           int\n\t\tCreatedAt        time.Time\n\t}\n\n\tLiveFlightUpdate struct {\n\t\tID                   string\n\t\tFlightNumber         string\n\t\tAirlineDesignator    string\n\t\tDepartureTime        time.Time\n\t\tDepartureAirportIATA string\n\t\tDepartureAirportICAO string\n\t\tArrivalAirportIATA   string\n\t\tArrivalAirportICAO   string\n\t\tPosition             Coordinate\n\t\tAltitude             float64\n\t\tHeadingDirection     float64\n\t\tGroundSpeed          float64\n\t\tVerticalSpeed        float64\n\t\tSquawk               int\n\t\tCreatedAt            time.Time\n\t}\n\n\tBoundingBox struct {\n\t\tTopLeft     *Coordinate\n\t\tBottomRight *Coordinate\n\t}\n)\n\ntype (", "n_tokens": 218, "primary_symbol": "", "primary_kind": "", "primary_span": [68, 103], "def_symbols": [], "symbols": ["TrackPoint", "struct", "LiveFlightID", "string", "Position", "Coordinate", "Altitude", "float64", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "int", "CreatedAt", "time", "Time", "LiveFlightUpdate", "FlightNumber", "AirlineDesignator", "DepartureTime", "DepartureAirportIATA", "DepartureAirportICAO", "ArrivalAirportIATA", "ArrivalAirportICAO", "BoundingBox", "TopLeft", "BottomRight", "type"], "doc_head": "\tTrackPoint struct {\n\t\tLiveFlightID     string\n\t\tPosition         Coordinate\n\t\tAltitude         float64\n\t\tHeadingDirection float64\n\t\tGroundSpeed      float64\n\t\tVerticalSpeed    float64\n\t\tSquawk           int\n\t\tCreatedAt        time.Time\n\t}\n\tLiveFlightUpdate struct {\n\t\tID                   string\n\t\tFlightNumber         string\n\t\tAirlineDesignator    string\n\t\tDepartureTime        time.Time\n\t\tDepartureAirportIATA string\n\t\tDepartureAirportICAO string\n\t\tArrivalAirportIATA   string\n\t\tArrivalAirportICAO   string\n\t\tPosition             Coordinate\n\t\tAltitude             float64\n\t\tHeadingDirection     float64\n\t\tGroundSpeed          float64\n\t\tVerticalSpeed        float64\n\t\tSquawk               int\n\t\tCreatedAt            time.Time\n\t}\n\tBoundingBox struct {\n\t\tTopLeft     *Coordinate\n\t\tBottomRight *Coordinate\n\t}\n)\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 104, "end_line": 118, "text": "\tEnrichedFlightData struct {\n\t\tLiveFlightID   string\n\t\tFlightID       *string\n\t\tClassification int64\n\t}\n)\n\ntype (\n\tFlightsWithin struct {\n\t\tBoundingBox           *BoundingBox\n\t\tMaxAge                time.Duration\n\t\tAirlineClassification *Classification\n\t}\n)\n", "n_tokens": 67, "primary_symbol": "", "primary_kind": "", "primary_span": [104, 118], "def_symbols": [], "symbols": ["EnrichedFlightData", "struct", "LiveFlightID", "string", "FlightID", "Classification", "int64", "type", "FlightsWithin", "BoundingBox", "MaxAge", "time", "Duration", "AirlineClassification"], "doc_head": "\tEnrichedFlightData struct {\n\t\tLiveFlightID   string\n\t\tFlightID       *string\n\t\tClassification int64\n\t}\n)\ntype (\n\tFlightsWithin struct {\n\t\tBoundingBox           *BoundingBox\n\t\tMaxAge                time.Duration\n\t\tAirlineClassification *Classification\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "package core\n\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n)\n\n//go:generate mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype liveFlightsRepository interface {\n\tFilter(context.Context, *FlightsWithin) ([]*LiveFlight, error)\n\tGetFlightDetailsByLiveFlightID(context.Context, string) (*LiveFlight, error)\n\tGetFlightDetailsByFlightID(context.Context, string) (*LiveFlight, error)\n}\n\ntype filesystemLiveFlightsRepository interface {\n\tGetLiveFlight(context.Context, string) (*LiveFlight, error)\n\tSaveLiveFlight(context.Context, string, *LiveFlight) error\n}\n\ntype Service struct {\n\trepo liveFlightsRepository\n\tfs   filesystemLiveFlightsRepository\n}\n\nfunc NewService(repo liveFlightsRepository, fs filesystemLiveFlightsRepository) *Service {\n\treturn &Service{\n\t\trepo: repo,\n\t\tfs:   fs,\n\t}\n}\n", "n_tokens": 200, "primary_symbol": "NewService", "primary_kind": "function", "primary_span": [25, 31], "def_symbols": ["NewService"], "symbols": ["NewService", "package", "core", "import", "context", "github", "com", "cockroachdb", "errors", "generate", "mockgen", "source", "service", "destination", "mocks", "service_mocks", "type", "liveFlightsRepository", "interface", "Filter", "Context", "FlightsWithin", "LiveFlight", "error", "GetFlightDetailsByLiveFlightID", "string", "GetFlightDetailsByFlightID", "filesystemLiveFlightsRepository", "GetLiveFlight", "SaveLiveFlight", "Service", "struct", "repo", "func", "return"], "doc_head": "package core\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n)\n//go:generate mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype liveFlightsRepository interface {\n\tFilter(context.Context, *FlightsWithin) ([]*LiveFlight, error)\n\tGetFlightDetailsByLiveFlightID(context.Context, string) (*LiveFlight, error)\n\tGetFlightDetailsByFlightID(context.Context, string) (*LiveFlight, error)\n}\ntype filesystemLiveFlightsRepository interface {\n\tGetLiveFlight(context.Context, string) (*LiveFlight, error)\n\tSaveLiveFlight(context.Context, string, *LiveFlight) error\n}\ntype Service struct {\n\trepo liveFlightsRepository\n\tfs   filesystemLiveFlightsRepository\n}\nfunc NewService(repo liveFlightsRepository, fs filesystemLiveFlightsRepository) *Service {\n\treturn &Service{\n\t\trepo: repo,\n\t\tfs:   fs,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "func (s *Service) FilterLiveFlights(ctx context.Context, f *FlightsWithin) ([]*LiveFlight, error) {\n\treturn s.repo.Filter(ctx, f)\n}\n\nfunc (s *Service) GetLiveFlightDetailsByLiveFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\treturn s.repo.GetFlightDetailsByLiveFlightID(ctx, id)\n}\n\nfunc (s *Service) GetLiveFlightDetailsByFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\tf, err := s.fs.GetLiveFlight(ctx, id)\n\tif err != nil && !errors.Is(err, ErrFlightNotFound) {\n\t\treturn nil, errors.Wrap(err, \"failed to get flight tracks from filesystem\")\n\t}\n\n\tif f != nil {\n\t\treturn f, nil\n\t}\n\n\treturn s.repo.GetFlightDetailsByFlightID(ctx, id)\n}\n", "n_tokens": 181, "primary_symbol": "FilterLiveFlights", "primary_kind": "function", "primary_span": [32, 52], "def_symbols": ["FilterLiveFlights", "GetLiveFlightDetailsByLiveFlightID", "GetLiveFlightDetailsByFlightID"], "symbols": ["FilterLiveFlights", "GetLiveFlightDetailsByLiveFlightID", "GetLiveFlightDetailsByFlightID", "func", "Service", "ctx", "context", "Context", "FlightsWithin", "LiveFlight", "error", "return", "repo", "Filter", "string", "GetFlightDetailsByLiveFlightID", "err", "GetLiveFlight", "nil", "errors", "ErrFlightNotFound", "Wrap", "failed", "get", "flight", "tracks", "from", "filesystem", "GetFlightDetailsByFlightID"], "doc_head": "func (s *Service) FilterLiveFlights(ctx context.Context, f *FlightsWithin) ([]*LiveFlight, error) {\n\treturn s.repo.Filter(ctx, f)\n}\nfunc (s *Service) GetLiveFlightDetailsByLiveFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\treturn s.repo.GetFlightDetailsByLiveFlightID(ctx, id)\n}\nfunc (s *Service) GetLiveFlightDetailsByFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\tf, err := s.fs.GetLiveFlight(ctx, id)\n\tif err != nil && !errors.Is(err, ErrFlightNotFound) {\n\t\treturn nil, errors.Wrap(err, \"failed to get flight tracks from filesystem\")\n\t}\n\tif f != nil {\n\t\treturn f, nil\n\t}\n\treturn s.repo.GetFlightDetailsByFlightID(ctx, id)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 34, "text": "package core\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n\n//go:generate mockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\ntype (\n\tflightArchivesRepository interface {\n\t\tGetArchivableFlights(context.Context, int) ([]*LiveFlight, error)\n\t\tDeleteFlights(context.Context, []*LiveFlight) error\n\t}\n)\n\ntype FlightArchiveService struct {\n\tarchives         flightArchivesRepository\n\tfilesystem       filesystemLiveFlightsRepository\n\tarchivePageSize  int\n\tmaxArchiveCycles int\n\tmetrics          archiveMetrics\n}\n\ntype archiveMetrics struct {\n\ttotalCalls    int\n\ttotalArchived int\n\ttotalSkipped  int\n\ttotalFailed   int\n\ttotalDeleted  int\n\tlastReport    time.Time\n}\n", "n_tokens": 184, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 34], "def_symbols": [], "symbols": ["package", "core", "import", "context", "impalastudios", "com", "log", "uber", "org", "zap", "time", "generate", "mockgen", "source", "flights_archive_service", "destination", "mocks", "flights_archive_service_mocks", "type", "flightArchivesRepository", "interface", "GetArchivableFlights", "Context", "int", "LiveFlight", "error", "DeleteFlights", "FlightArchiveService", "struct", "archives", "filesystem", "filesystemLiveFlightsRepository", "archivePageSize", "maxArchiveCycles", "metrics", "archiveMetrics", "totalCalls", "totalArchived", "totalSkipped", "totalFailed", "totalDeleted", "lastReport", "Time"], "doc_head": "package core\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n//go:generate mockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\ntype (\n\tflightArchivesRepository interface {\n\t\tGetArchivableFlights(context.Context, int) ([]*LiveFlight, error)\n\t\tDeleteFlights(context.Context, []*LiveFlight) error\n\t}\n)\ntype FlightArchiveService struct {\n\tarchives         flightArchivesRepository\n\tfilesystem       filesystemLiveFlightsRepository\n\tarchivePageSize  int\n\tmaxArchiveCycles int\n\tmetrics          archiveMetrics\n}\ntype archiveMetrics struct {\n\ttotalCalls    int\n\ttotalArchived int\n\ttotalSkipped  int\n\ttotalFailed   int\n\ttotalDeleted  int\n\tlastReport    time.Time\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 35, "end_line": 57, "text": "func NewFlightArchiveService(\n\tarchives flightArchivesRepository,\n\tfilesystem filesystemLiveFlightsRepository,\n\tarchivePageSize int,\n\tmaxArchiveCycles int,\n) *FlightArchiveService {\n\tif archivePageSize <= 0 {\n\t\tarchivePageSize = 100\n\t}\n\tif maxArchiveCycles <= 0 {\n\t\tmaxArchiveCycles = 1\n\t}\n\treturn &FlightArchiveService{\n\t\tarchives:         archives,\n\t\tfilesystem:       filesystem,\n\t\tarchivePageSize:  archivePageSize,\n\t\tmaxArchiveCycles: maxArchiveCycles,\n\t\tmetrics: archiveMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}\n", "n_tokens": 142, "primary_symbol": "NewFlightArchiveService", "primary_kind": "function", "primary_span": [35, 57], "def_symbols": ["NewFlightArchiveService"], "symbols": ["NewFlightArchiveService", "func", "archives", "flightArchivesRepository", "filesystem", "filesystemLiveFlightsRepository", "archivePageSize", "int", "maxArchiveCycles", "FlightArchiveService", "return", "metrics", "archiveMetrics", "lastReport", "time", "Now", "Add", "Minute"], "doc_head": "func NewFlightArchiveService(\n\tarchives flightArchivesRepository,\n\tfilesystem filesystemLiveFlightsRepository,\n\tarchivePageSize int,\n\tmaxArchiveCycles int,\n) *FlightArchiveService {\n\tif archivePageSize <= 0 {\n\t\tarchivePageSize = 100\n\t}\n\tif maxArchiveCycles <= 0 {\n\t\tmaxArchiveCycles = 1\n\t}\n\treturn &FlightArchiveService{\n\t\tarchives:         archives,\n\t\tfilesystem:       filesystem,\n\t\tarchivePageSize:  archivePageSize,\n\t\tmaxArchiveCycles: maxArchiveCycles,\n\t\tmetrics: archiveMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 58, "end_line": 106, "text": "func (s *FlightArchiveService) Archive(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\n\tvar totalArchived int\n\n\tfor i := 0; i < s.maxArchiveCycles; i++ {\n\t\tflights, err := s.archives.GetArchivableFlights(ctx, s.archivePageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to fetch archivable flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\n\t\tvar archived, skipped, failed int\n\n\t\tfor _, flight := range flights {\n\t\t\tif flight.FlightID == nil {\n\t\t\t\tskipped++\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif err := s.filesystem.SaveLiveFlight(ctx, *flight.FlightID, flight); err != nil {\n\t\t\t\tfailed++\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tarchived++\n\t\t}\n\n\t\tif err := s.archives.DeleteFlights(ctx, flights); err != nil {\n\t\t\tlog.Error(ctx, \"Failed to delete archived flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\n\t\ts.metrics.totalArchived += archived\n\t\ts.metrics.totalSkipped += skipped\n\t\ts.metrics.totalFailed += failed\n\t\ts.metrics.totalDeleted += len(flights)\n\n\t\ttotalArchived += archived\n\n\t\tif archived == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}\n", "n_tokens": 281, "primary_symbol": "Archive", "primary_kind": "function", "primary_span": [58, 106], "def_symbols": ["Archive"], "symbols": ["Archive", "func", "FlightArchiveService", "ctx", "context", "Context", "error", "metrics", "totalCalls", "var", "totalArchived", "int", "for", "maxArchiveCycles", "flights", "err", "archives", "GetArchivableFlights", "archivePageSize", "nil", "log", "Error", "Failed", "fetch", "archivable", "zap", "return", "archived", "skipped", "failed", "flight", "range", "FlightID", "continue", "filesystem", "SaveLiveFlight", "DeleteFlights", "delete", "totalSkipped", "totalFailed", "totalDeleted", "len", "break", "logMetricsIfNeeded"], "doc_head": "func (s *FlightArchiveService) Archive(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\tvar totalArchived int\n\tfor i := 0; i < s.maxArchiveCycles; i++ {\n\t\tflights, err := s.archives.GetArchivableFlights(ctx, s.archivePageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to fetch archivable flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t\tvar archived, skipped, failed int\n\t\tfor _, flight := range flights {\n\t\t\tif flight.FlightID == nil {\n\t\t\t\tskipped++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err := s.filesystem.SaveLiveFlight(ctx, *flight.FlightID, flight); err != nil {\n\t\t\t\tfailed++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tarchived++\n\t\t}\n\t\tif err := s.archives.DeleteFlights(ctx, flights); err != nil {\n\t\t\tlog.Error(ctx, \"Failed to delete archived flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t\ts.metrics.totalArchived += archived\n\t\ts.metrics.totalSkipped += skipped\n\t\ts.metrics.totalFailed += failed\n\t\ts.metrics.totalDeleted += len(flights)\n\t\ttotalArchived += archived\n\t\tif archived == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 107, "end_line": 125, "text": "func (s *FlightArchiveService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\n\tlog.Debug(ctx, \"Flight archiver metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"archived\", s.metrics.totalArchived),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"deleted\", s.metrics.totalDeleted),\n\t)\n\n\ts.metrics = archiveMetrics{\n\t\tlastReport: now,\n\t}\n}\n", "n_tokens": 136, "primary_symbol": "logMetricsIfNeeded", "primary_kind": "function", "primary_span": [107, 125], "def_symbols": ["logMetricsIfNeeded"], "symbols": ["logMetricsIfNeeded", "func", "FlightArchiveService", "ctx", "context", "Context", "now", "time", "Now", "Sub", "metrics", "lastReport", "Minute", "return", "log", "Debug", "Flight", "archiver", "last", "min", "zap", "Int", "calls", "totalCalls", "archived", "totalArchived", "skipped", "totalSkipped", "failed", "totalFailed", "deleted", "totalDeleted", "archiveMetrics"], "doc_head": "func (s *FlightArchiveService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\tlog.Debug(ctx, \"Flight archiver metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"archived\", s.metrics.totalArchived),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"deleted\", s.metrics.totalDeleted),\n\t)\n\ts.metrics = archiveMetrics{\n\t\tlastReport: now,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 37, "text": "package core\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n//go:generate mockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\ntype (\n\tflightUpdatesRepository interface {\n\t\tUpsertMany(context.Context, []*LiveFlightUpdate) error\n\t}\n\n\trealtimeFlightUpdatesClient interface {\n\t\tRead(context.Context, chan<- LiveFlightUpdate) error\n\t}\n)\n\ntype ingestMetrics struct {\n\ttotalBatches  int\n\ttotalUpdates  int\n\ttotalDuration time.Duration\n\tlastReport    time.Time\n}\n\ntype FlightsIngestService struct {\n\tflightUpdatesRepo           flightUpdatesRepository\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient\n\n\tbatchStoreInterval time.Duration\n\n\tmetrics ingestMetrics\n}\n", "n_tokens": 179, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 37], "def_symbols": [], "symbols": ["package", "core", "import", "context", "time", "impalastudios", "com", "log", "uber", "org", "zap", "generate", "mockgen", "source", "flights_ingest_service", "destination", "mocks", "flights_ingest_service_mocks", "type", "flightUpdatesRepository", "interface", "UpsertMany", "Context", "LiveFlightUpdate", "error", "realtimeFlightUpdatesClient", "Read", "chan", "ingestMetrics", "struct", "totalBatches", "int", "totalUpdates", "totalDuration", "Duration", "lastReport", "Time", "FlightsIngestService", "flightUpdatesRepo", "batchStoreInterval", "metrics"], "doc_head": "package core\nimport (\n\t\"context\"\n\t\"time\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n//go:generate mockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\ntype (\n\tflightUpdatesRepository interface {\n\t\tUpsertMany(context.Context, []*LiveFlightUpdate) error\n\t}\n\trealtimeFlightUpdatesClient interface {\n\t\tRead(context.Context, chan<- LiveFlightUpdate) error\n\t}\n)\ntype ingestMetrics struct {\n\ttotalBatches  int\n\ttotalUpdates  int\n\ttotalDuration time.Duration\n\tlastReport    time.Time\n}\ntype FlightsIngestService struct {\n\tflightUpdatesRepo           flightUpdatesRepository\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient\n\tbatchStoreInterval time.Duration\n\tmetrics ingestMetrics\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 38, "end_line": 52, "text": "func NewFlightsIngestService(\n\tflightUpdatesRepository flightUpdatesRepository,\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient,\n\tbatchStoreInterval time.Duration,\n) *FlightsIngestService {\n\treturn &FlightsIngestService{\n\t\tflightUpdatesRepo:           flightUpdatesRepository,\n\t\trealtimeFlightUpdatesClient: realtimeFlightUpdatesClient,\n\t\tbatchStoreInterval:          batchStoreInterval,\n\t\tmetrics: ingestMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}\n", "n_tokens": 110, "primary_symbol": "NewFlightsIngestService", "primary_kind": "function", "primary_span": [38, 52], "def_symbols": ["NewFlightsIngestService"], "symbols": ["NewFlightsIngestService", "func", "flightUpdatesRepository", "realtimeFlightUpdatesClient", "batchStoreInterval", "time", "Duration", "FlightsIngestService", "return", "flightUpdatesRepo", "metrics", "ingestMetrics", "lastReport", "Now", "Add", "Minute"], "doc_head": "func NewFlightsIngestService(\n\tflightUpdatesRepository flightUpdatesRepository,\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient,\n\tbatchStoreInterval time.Duration,\n) *FlightsIngestService {\n\treturn &FlightsIngestService{\n\t\tflightUpdatesRepo:           flightUpdatesRepository,\n\t\trealtimeFlightUpdatesClient: realtimeFlightUpdatesClient,\n\t\tbatchStoreInterval:          batchStoreInterval,\n\t\tmetrics: ingestMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 84, "text": "// ConsumeFlightUpdates consumes flight updates from the realtime flight updates client\nfunc (s *FlightsIngestService) ConsumeFlightUpdates(ctx context.Context) error {\n\tsubscriber := make(chan LiveFlightUpdate)\n\n\trealtimeFlightDataStreamErr := make(chan error)\n\n\tgo func() {\n\t\tif err := s.realtimeFlightUpdatesClient.Read(ctx, subscriber); err != nil {\n\t\t\trealtimeFlightDataStreamErr <- err\n\t\t}\n\t}()\n\n\tuniqueFlightUpdates := make(map[string]LiveFlightUpdate)\n\tticker := time.NewTicker(s.batchStoreInterval)\n\n\tfor {\n\t\tselect {\n\t\tcase flightupdate := <-subscriber:\n\t\t\tuniqueFlightUpdates[flightupdate.ID] = flightupdate\n\t\tcase <-ticker.C:\n\t\t\ts.insertBatchFlightUpdates(ctx, uniqueFlightUpdates)\n\t\t\tclear(uniqueFlightUpdates)\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Shutting down the flight updates service...\")\n\t\t\treturn nil\n\t\tcase err := <-realtimeFlightDataStreamErr:\n\t\t\tlog.Error(ctx, \"Realtime data stream raised an error unexpectedly\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t}\n}\n", "n_tokens": 230, "primary_symbol": "ConsumeFlightUpdates", "primary_kind": "function", "primary_span": [54, 84], "def_symbols": ["ConsumeFlightUpdates"], "symbols": ["ConsumeFlightUpdates", "consumes", "flight", "updates", "from", "the", "realtime", "client", "func", "FlightsIngestService", "ctx", "context", "Context", "error", "subscriber", "make", "chan", "LiveFlightUpdate", "realtimeFlightDataStreamErr", "err", "realtimeFlightUpdatesClient", "Read", "nil", "uniqueFlightUpdates", "map", "string", "ticker", "time", "NewTicker", "batchStoreInterval", "for", "select", "case", "flightupdate", "insertBatchFlightUpdates", "clear", "Done", "log", "Info", "Shutting", "down", "service", "return", "Error", "Realtime", "data", "stream", "raised", "unexpectedly", "zap"], "doc_head": "// ConsumeFlightUpdates consumes flight updates from the realtime flight updates client\nfunc (s *FlightsIngestService) ConsumeFlightUpdates(ctx context.Context) error {\n\tsubscriber := make(chan LiveFlightUpdate)\n\trealtimeFlightDataStreamErr := make(chan error)\n\tgo func() {\n\t\tif err := s.realtimeFlightUpdatesClient.Read(ctx, subscriber); err != nil {\n\t\t\trealtimeFlightDataStreamErr <- err\n\t\t}\n\t}()\n\tuniqueFlightUpdates := make(map[string]LiveFlightUpdate)\n\tticker := time.NewTicker(s.batchStoreInterval)\n\tfor {\n\t\tselect {\n\t\tcase flightupdate := <-subscriber:\n\t\t\tuniqueFlightUpdates[flightupdate.ID] = flightupdate\n\t\tcase <-ticker.C:\n\t\t\ts.insertBatchFlightUpdates(ctx, uniqueFlightUpdates)\n\t\t\tclear(uniqueFlightUpdates)\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Shutting down the flight updates service...\")\n\t\t\treturn nil\n\t\tcase err := <-realtimeFlightDataStreamErr:\n\t\t\tlog.Error(ctx, \"Realtime data stream raised an error unexpectedly\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 85, "end_line": 116, "text": "func (s *FlightsIngestService) insertBatchFlightUpdates(ctx context.Context, uniqueUpdates map[string]LiveFlightUpdate) {\n\tif len(uniqueUpdates) == 0 {\n\t\tlog.Debug(ctx, \"There are no flight updates to store\")\n\t\treturn\n\t}\n\n\tflightUpdatesBatch := make([]*LiveFlightUpdate, 0, len(uniqueUpdates))\n\n\tfor _, update := range uniqueUpdates {\n\t\tflightUpdatesBatch = append(flightUpdatesBatch, &update)\n\t}\n\n\tstart := time.Now()\n\terr := s.flightUpdatesRepo.UpsertMany(ctx, flightUpdatesBatch)\n\tdur := time.Since(start)\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to insert batch records of realtime flight updates\",\n\t\t\tzap.Error(err),\n\t\t\tzap.Int(\"count\", len(flightUpdatesBatch)),\n\t\t)\n\n\t\treturn\n\t}\n\n\ts.metrics.totalBatches++\n\ts.metrics.totalUpdates += len(flightUpdatesBatch)\n\ts.metrics.totalDuration += dur\n\n\ts.logMetricsIfNeeded(ctx)\n}\n", "n_tokens": 207, "primary_symbol": "insertBatchFlightUpdates", "primary_kind": "function", "primary_span": [85, 116], "def_symbols": ["insertBatchFlightUpdates"], "symbols": ["insertBatchFlightUpdates", "func", "FlightsIngestService", "ctx", "context", "Context", "uniqueUpdates", "map", "string", "LiveFlightUpdate", "len", "log", "Debug", "There", "are", "flight", "updates", "store", "return", "flightUpdatesBatch", "make", "for", "update", "range", "append", "start", "time", "Now", "err", "flightUpdatesRepo", "UpsertMany", "dur", "Since", "nil", "Error", "Failed", "insert", "batch", "records", "realtime", "zap", "Int", "count", "metrics", "totalBatches", "totalUpdates", "totalDuration", "logMetricsIfNeeded"], "doc_head": "func (s *FlightsIngestService) insertBatchFlightUpdates(ctx context.Context, uniqueUpdates map[string]LiveFlightUpdate) {\n\tif len(uniqueUpdates) == 0 {\n\t\tlog.Debug(ctx, \"There are no flight updates to store\")\n\t\treturn\n\t}\n\tflightUpdatesBatch := make([]*LiveFlightUpdate, 0, len(uniqueUpdates))\n\tfor _, update := range uniqueUpdates {\n\t\tflightUpdatesBatch = append(flightUpdatesBatch, &update)\n\t}\n\tstart := time.Now()\n\terr := s.flightUpdatesRepo.UpsertMany(ctx, flightUpdatesBatch)\n\tdur := time.Since(start)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to insert batch records of realtime flight updates\",\n\t\t\tzap.Error(err),\n\t\t\tzap.Int(\"count\", len(flightUpdatesBatch)),\n\t\t)\n\t\treturn\n\t}\n\ts.metrics.totalBatches++\n\ts.metrics.totalUpdates += len(flightUpdatesBatch)\n\ts.metrics.totalDuration += dur\n\ts.logMetricsIfNeeded(ctx)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 117, "end_line": 140, "text": "func (s *FlightsIngestService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\n\tvar avgBatchDur time.Duration\n\tvar avgUpdatesPerBatch float64\n\n\tif s.metrics.totalBatches > 0 {\n\t\tavgBatchDur = s.metrics.totalDuration / time.Duration(s.metrics.totalBatches)\n\t\tavgUpdatesPerBatch = float64(s.metrics.totalUpdates) / float64(s.metrics.totalBatches)\n\t}\n\n\tlog.Debug(ctx, \"Ingest metrics report\",\n\t\tzap.Int(\"batches\", s.metrics.totalBatches),\n\t\tzap.Int(\"total_updates\", s.metrics.totalUpdates),\n\t\tzap.Duration(\"avg_batch_duration\", avgBatchDur),\n\t\tzap.Float64(\"avg_updates_per_batch\", avgUpdatesPerBatch),\n\t)\n\n\ts.metrics = ingestMetrics{lastReport: now}\n}\n", "n_tokens": 191, "primary_symbol": "logMetricsIfNeeded", "primary_kind": "function", "primary_span": [117, 140], "def_symbols": ["logMetricsIfNeeded"], "symbols": ["logMetricsIfNeeded", "func", "FlightsIngestService", "ctx", "context", "Context", "now", "time", "Now", "Sub", "metrics", "lastReport", "Minute", "return", "var", "avgBatchDur", "Duration", "avgUpdatesPerBatch", "float64", "totalBatches", "totalDuration", "totalUpdates", "log", "Debug", "Ingest", "report", "zap", "Int", "batches", "total_updates", "avg_batch_duration", "Float64", "avg_updates_per_batch", "ingestMetrics"], "doc_head": "func (s *FlightsIngestService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\tvar avgBatchDur time.Duration\n\tvar avgUpdatesPerBatch float64\n\tif s.metrics.totalBatches > 0 {\n\t\tavgBatchDur = s.metrics.totalDuration / time.Duration(s.metrics.totalBatches)\n\t\tavgUpdatesPerBatch = float64(s.metrics.totalUpdates) / float64(s.metrics.totalBatches)\n\t}\n\tlog.Debug(ctx, \"Ingest metrics report\",\n\t\tzap.Int(\"batches\", s.metrics.totalBatches),\n\t\tzap.Int(\"total_updates\", s.metrics.totalUpdates),\n\t\tzap.Duration(\"avg_batch_duration\", avgBatchDur),\n\t\tzap.Float64(\"avg_updates_per_batch\", avgUpdatesPerBatch),\n\t)\n\ts.metrics = ingestMetrics{lastReport: now}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package core\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"sort\"\n\t\"time\"\n)\n\n//go:generate mockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\ntype (\n\tairlinesRepository interface {\n\t\tGetByDesignator(context.Context, string) (*Airline, error)\n\t}\n\n\tairportsRepository interface {\n\t\tGetByICAOOrIATA(context.Context, *string, *string) (*Airport, error)\n\t}\n\n\tflightsEnrichRepository interface {\n\t\tGetUnenrichedFlights(ctx context.Context, limit int) ([]*LiveFlight, error)\n\t\tEnrichFlights(ctx context.Context, enriched []*EnrichedFlightData) error\n\t}\n)\n", "n_tokens": 178, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 27], "def_symbols": [], "symbols": ["package", "core", "import", "context", "fmt", "impalastudios", "com", "log", "uber", "org", "zap", "sort", "time", "generate", "mockgen", "source", "flights_enrich_service", "destination", "mocks", "flights_enrich_service_mocks", "type", "airlinesRepository", "interface", "GetByDesignator", "Context", "string", "Airline", "error", "airportsRepository", "GetByICAOOrIATA", "Airport", "flightsEnrichRepository", "GetUnenrichedFlights", "ctx", "limit", "int", "LiveFlight", "EnrichFlights", "enriched", "EnrichedFlightData"], "doc_head": "package core\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"sort\"\n\t\"time\"\n)\n//go:generate mockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\ntype (\n\tairlinesRepository interface {\n\t\tGetByDesignator(context.Context, string) (*Airline, error)\n\t}\n\tairportsRepository interface {\n\t\tGetByICAOOrIATA(context.Context, *string, *string) (*Airport, error)\n\t}\n\tflightsEnrichRepository interface {\n\t\tGetUnenrichedFlights(ctx context.Context, limit int) ([]*LiveFlight, error)\n\t\tEnrichFlights(ctx context.Context, enriched []*EnrichedFlightData) error\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 51, "text": "type FlightsEnrichService struct {\n\tenrichRepo flightsEnrichRepository\n\tairlines   airlinesRepository\n\tairports   airportsRepository\n\n\tenrichPageSize  int\n\tmaxEnrichCycles int\n\tmetrics         enrichMetrics\n}\n\ntype enrichMetrics struct {\n\ttotalCalls      int\n\ttotalEnriched   int\n\ttotalFailed     int\n\ttotalSkipped    int\n\tmissingFlightID int\n\n\tairlineNotFound          map[string]int\n\tdepartureAirportNotFound map[string]int\n\tarrivalAirportNotFound   map[string]int\n\n\tlastReport time.Time\n}\n", "n_tokens": 116, "primary_symbol": "", "primary_kind": "", "primary_span": [28, 51], "def_symbols": [], "symbols": ["type", "FlightsEnrichService", "struct", "enrichRepo", "flightsEnrichRepository", "airlines", "airlinesRepository", "airports", "airportsRepository", "enrichPageSize", "int", "maxEnrichCycles", "metrics", "enrichMetrics", "totalCalls", "totalEnriched", "totalFailed", "totalSkipped", "missingFlightID", "airlineNotFound", "map", "string", "departureAirportNotFound", "arrivalAirportNotFound", "lastReport", "time", "Time"], "doc_head": "type FlightsEnrichService struct {\n\tenrichRepo flightsEnrichRepository\n\tairlines   airlinesRepository\n\tairports   airportsRepository\n\tenrichPageSize  int\n\tmaxEnrichCycles int\n\tmetrics         enrichMetrics\n}\ntype enrichMetrics struct {\n\ttotalCalls      int\n\ttotalEnriched   int\n\ttotalFailed     int\n\ttotalSkipped    int\n\tmissingFlightID int\n\tairlineNotFound          map[string]int\n\tdepartureAirportNotFound map[string]int\n\tarrivalAirportNotFound   map[string]int\n\tlastReport time.Time\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 52, "end_line": 80, "text": "func NewFlightsEnrichService(\n\tenrichRepo flightsEnrichRepository,\n\tairlines airlinesRepository,\n\tairports airportsRepository,\n\tenrichPageSize int,\n\tmaxEnrichCycles int,\n) *FlightsEnrichService {\n\tif enrichPageSize <= 0 {\n\t\tenrichPageSize = 100\n\t}\n\tif maxEnrichCycles <= 0 {\n\t\tmaxEnrichCycles = 1\n\t}\n\n\treturn &FlightsEnrichService{\n\t\tenrichRepo:      enrichRepo,\n\t\tairlines:        airlines,\n\t\tairports:        airports,\n\t\tenrichPageSize:  enrichPageSize,\n\t\tmaxEnrichCycles: maxEnrichCycles,\n\t\tmetrics: enrichMetrics{\n\t\t\tairlineNotFound:          make(map[string]int),\n\t\t\tdepartureAirportNotFound: make(map[string]int),\n\t\t\tarrivalAirportNotFound:   make(map[string]int),\n\t\t\tlastReport:               time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}\n", "n_tokens": 205, "primary_symbol": "NewFlightsEnrichService", "primary_kind": "function", "primary_span": [52, 80], "def_symbols": ["NewFlightsEnrichService"], "symbols": ["NewFlightsEnrichService", "func", "enrichRepo", "flightsEnrichRepository", "airlines", "airlinesRepository", "airports", "airportsRepository", "enrichPageSize", "int", "maxEnrichCycles", "FlightsEnrichService", "return", "metrics", "enrichMetrics", "airlineNotFound", "make", "map", "string", "departureAirportNotFound", "arrivalAirportNotFound", "lastReport", "time", "Now", "Add", "Minute"], "doc_head": "func NewFlightsEnrichService(\n\tenrichRepo flightsEnrichRepository,\n\tairlines airlinesRepository,\n\tairports airportsRepository,\n\tenrichPageSize int,\n\tmaxEnrichCycles int,\n) *FlightsEnrichService {\n\tif enrichPageSize <= 0 {\n\t\tenrichPageSize = 100\n\t}\n\tif maxEnrichCycles <= 0 {\n\t\tmaxEnrichCycles = 1\n\t}\n\treturn &FlightsEnrichService{\n\t\tenrichRepo:      enrichRepo,\n\t\tairlines:        airlines,\n\t\tairports:        airports,\n\t\tenrichPageSize:  enrichPageSize,\n\t\tmaxEnrichCycles: maxEnrichCycles,\n\t\tmetrics: enrichMetrics{\n\t\t\tairlineNotFound:          make(map[string]int),\n\t\t\tdepartureAirportNotFound: make(map[string]int),\n\t\t\tarrivalAirportNotFound:   make(map[string]int),\n\t\t\tlastReport:               time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 81, "end_line": 124, "text": "func (s *FlightsEnrichService) Enrich(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\n\tfor i := 0; i < s.maxEnrichCycles; i++ {\n\t\tflights, err := s.enrichRepo.GetUnenrichedFlights(ctx, s.enrichPageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to retrieve unenriched flights\", zap.Error(err))\n\t\t\ts.metrics.totalFailed++\n\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\treturn err\n\t\t}\n\t\tif len(flights) == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\tvar enriched []*EnrichedFlightData\n\t\tfor _, flight := range flights {\n\t\t\tdata := s.buildEnrichedFlightData(ctx, flight)\n\t\t\tif data != nil {\n\t\t\t\tenriched = append(enriched, data)\n\t\t\t\ts.metrics.totalEnriched++\n\n\t\t\t\tif data.FlightID == nil {\n\t\t\t\t\ts.metrics.missingFlightID++\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ts.metrics.totalSkipped++\n\t\t\t}\n\t\t}\n\n\t\tif len(enriched) > 0 {\n\t\t\tif err := s.enrichRepo.EnrichFlights(ctx, enriched); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to bulk enrich flights\", zap.Error(err))\n\t\t\t\ts.metrics.totalFailed++\n\t\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}\n", "n_tokens": 304, "primary_symbol": "Enrich", "primary_kind": "function", "primary_span": [81, 124], "def_symbols": ["Enrich"], "symbols": ["Enrich", "func", "FlightsEnrichService", "ctx", "context", "Context", "error", "metrics", "totalCalls", "for", "maxEnrichCycles", "flights", "err", "enrichRepo", "GetUnenrichedFlights", "enrichPageSize", "nil", "log", "Error", "Failed", "retrieve", "unenriched", "zap", "totalFailed", "logMetricsIfNeeded", "return", "len", "break", "var", "enriched", "EnrichedFlightData", "flight", "range", "data", "buildEnrichedFlightData", "append", "totalEnriched", "FlightID", "missingFlightID", "else", "totalSkipped", "EnrichFlights", "bulk", "enrich"], "doc_head": "func (s *FlightsEnrichService) Enrich(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\tfor i := 0; i < s.maxEnrichCycles; i++ {\n\t\tflights, err := s.enrichRepo.GetUnenrichedFlights(ctx, s.enrichPageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to retrieve unenriched flights\", zap.Error(err))\n\t\t\ts.metrics.totalFailed++\n\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\treturn err\n\t\t}\n\t\tif len(flights) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tvar enriched []*EnrichedFlightData\n\t\tfor _, flight := range flights {\n\t\t\tdata := s.buildEnrichedFlightData(ctx, flight)\n\t\t\tif data != nil {\n\t\t\t\tenriched = append(enriched, data)\n\t\t\t\ts.metrics.totalEnriched++\n\t\t\t\tif data.FlightID == nil {\n\t\t\t\t\ts.metrics.missingFlightID++\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ts.metrics.totalSkipped++\n\t\t\t}\n\t\t}\n\t\tif len(enriched) > 0 {\n\t\t\tif err := s.enrichRepo.EnrichFlights(ctx, enriched); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to bulk enrich flights\", zap.Error(err))\n\t\t\t\ts.metrics.totalFailed++\n\t\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 125, "end_line": 190, "text": "func (s *FlightsEnrichService) buildEnrichedFlightData(ctx context.Context, flight *LiveFlight) *EnrichedFlightData {\n\tconst defaultClassification = 5\n\n\tdata := &EnrichedFlightData{\n\t\tLiveFlightID:   flight.ID,\n\t\tClassification: defaultClassification,\n\t}\n\n\tif flight.AirlineDesignator != \"\" {\n\t\tairline, err := s.airlines.GetByDesignator(ctx, flight.AirlineDesignator)\n\t\tif err != nil {\n\t\t\ts.metrics.airlineNotFound[flight.AirlineDesignator]++\n\t\t} else if airline != nil {\n\t\t\tdata.Classification = int64(airline.Classification)\n\t\t}\n\t}\n\n\tvar departureCode string\n\tif flight.DepartureAirportICAO != \"\" || flight.DepartureAirportIATA != \"\" {\n\t\tdeparture, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.DepartureAirportICAO),\n\t\t\toptionalString(flight.DepartureAirportIATA),\n\t\t)\n\t\tif err != nil {\n\t\t\tkey := flight.DepartureAirportICAO + \"/\" + flight.DepartureAirportIATA\n\t\t\ts.metrics.departureAirportNotFound[key]++\n\t\t} else if departure != nil {\n\t\t\tdepartureCode = departure.Designator\n\t\t}\n\t}\n\n\tvar arrivalCode string\n\tif flight.ArrivalAirportICAO != \"\" || flight.ArrivalAirportIATA != \"\" {\n\t\tarrival, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.ArrivalAirportICAO),\n\t\t\toptionalString(flight.ArrivalAirportIATA),\n\t\t)\n\n\t\tif err != nil {\n\t\t\tkey := flight.ArrivalAirportICAO + \"/\" + flight.ArrivalAirportIATA\n\t\t\ts.metrics.arrivalAirportNotFound[key]++\n\t\t} else if arrival != nil {\n\t\t\tarrivalCode = arrival.Designator\n\t\t}\n\t}\n\n\tif !flight.DepartureTime.IsZero() && flight.FlightNumber != \"\" &&\n\t\tflight.AirlineDesignator != \"\" && departureCode != \"\" && arrivalCode != \"\" {\n\n\t\t//TODO: FlightID logic\n\t\tflightID := fmt.Sprintf(\n\t\t\t\"%s_%s_%s_%s_%s\",\n\t\t\tflight.DepartureTime.Format(\"20060102\"),\n\t\t\tflight.AirlineDesignator,\n\t\t\tflight.FlightNumber,\n\t\t\tdepartureCode,\n\t\t\tarrivalCode,\n\t\t)\n\t\tdata.FlightID = &flightID\n\t}\n\n\treturn data\n}\n", "n_tokens": 545, "primary_symbol": "buildEnrichedFlightData", "primary_kind": "function", "primary_span": [125, 190], "def_symbols": ["buildEnrichedFlightData"], "symbols": ["buildEnrichedFlightData", "func", "FlightsEnrichService", "ctx", "context", "Context", "flight", "LiveFlight", "EnrichedFlightData", "const", "defaultClassification", "data", "LiveFlightID", "Classification", "AirlineDesignator", "airline", "err", "airlines", "GetByDesignator", "nil", "metrics", "airlineNotFound", "else", "int64", "var", "departureCode", "string", "DepartureAirportICAO", "DepartureAirportIATA", "departure", "airports", "GetByICAOOrIATA", "optionalString", "key", "departureAirportNotFound", "Designator", "arrivalCode", "ArrivalAirportICAO", "ArrivalAirportIATA", "arrival", "arrivalAirportNotFound", "DepartureTime", "IsZero", "FlightNumber", "TODO", "FlightID", "logic", "flightID", "fmt", "Sprintf", "Format", "return"], "doc_head": "func (s *FlightsEnrichService) buildEnrichedFlightData(ctx context.Context, flight *LiveFlight) *EnrichedFlightData {\n\tconst defaultClassification = 5\n\tdata := &EnrichedFlightData{\n\t\tLiveFlightID:   flight.ID,\n\t\tClassification: defaultClassification,\n\t}\n\tif flight.AirlineDesignator != \"\" {\n\t\tairline, err := s.airlines.GetByDesignator(ctx, flight.AirlineDesignator)\n\t\tif err != nil {\n\t\t\ts.metrics.airlineNotFound[flight.AirlineDesignator]++\n\t\t} else if airline != nil {\n\t\t\tdata.Classification = int64(airline.Classification)\n\t\t}\n\t}\n\tvar departureCode string\n\tif flight.DepartureAirportICAO != \"\" || flight.DepartureAirportIATA != \"\" {\n\t\tdeparture, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.DepartureAirportICAO),\n\t\t\toptionalString(flight.DepartureAirportIATA),\n\t\t)\n\t\tif err != nil {\n\t\t\tkey := flight.DepartureAirportICAO + \"/\" + flight.DepartureAirportIATA\n\t\t\ts.metrics.departureAirportNotFound[key]++\n\t\t} else if departure != nil {\n\t\t\tdepartureCode = departure.Designator\n\t\t}\n\t}\n\tvar arrivalCode string\n\tif flight.ArrivalAirportICAO != \"\" || flight.ArrivalAirportIATA != \"\" {\n\t\tarrival, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.ArrivalAirportICA"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 191, "end_line": 211, "text": "func optionalString(s string) *string {\n\tif s == \"\" {\n\t\treturn nil\n\t}\n\treturn &s\n}\n\nfunc (s *FlightsEnrichService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\n\tlog.Debug(ctx, \"Flights enrich metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"enriched\", s.metrics.totalEnriched),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"missing_flight_id\", s.metrics.missingFlightID),\n\t)\n", "n_tokens": 154, "primary_symbol": "optionalString", "primary_kind": "function", "primary_span": [191, 211], "def_symbols": ["optionalString", "logMetricsIfNeeded"], "symbols": ["optionalString", "logMetricsIfNeeded", "func", "string", "return", "nil", "FlightsEnrichService", "ctx", "context", "Context", "now", "time", "Now", "Sub", "metrics", "lastReport", "Minute", "log", "Debug", "Flights", "enrich", "last", "min", "zap", "Int", "calls", "totalCalls", "enriched", "totalEnriched", "failed", "totalFailed", "skipped", "totalSkipped", "missing_flight_id", "missingFlightID"], "doc_head": "func optionalString(s string) *string {\n\tif s == \"\" {\n\t\treturn nil\n\t}\n\treturn &s\n}\nfunc (s *FlightsEnrichService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\tlog.Debug(ctx, \"Flights enrich metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"enriched\", s.metrics.totalEnriched),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"missing_flight_id\", s.metrics.missingFlightID),\n\t)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 212, "end_line": 270, "text": "\ttype pair struct {\n\t\tkey   string\n\t\tcount int\n\t}\n\texplain := func(data map[string]int) (distinct int, top10 []string) {\n\t\tdistinct = len(data)\n\n\t\tpairs := make([]pair, 0, distinct)\n\t\tfor k, v := range data {\n\t\t\tpairs = append(pairs, pair{k, v})\n\t\t}\n\n\t\tsort.Slice(pairs, func(i, j int) bool {\n\t\t\treturn pairs[i].count > pairs[j].count\n\t\t})\n\n\t\tn := 10\n\t\tif len(pairs) < n {\n\t\t\tn = len(pairs)\n\t\t}\n\t\ttop10 = make([]string, 0, n)\n\t\tfor i := 0; i < n; i++ {\n\t\t\ttop10 = append(top10, fmt.Sprintf(\"%s(%d)\", pairs[i].key, pairs[i].count))\n\t\t}\n\t\treturn\n\t}\n\n\taDistinct, aTop := explain(s.metrics.airlineNotFound)\n\tif aDistinct > 0 {\n\t\tlog.Debug(ctx, \"Airlines not found summary\",\n\t\t\tzap.Int(\"distinct_airlines_not_found_count\", aDistinct),\n\t\t\tzap.Strings(\"top_airlines_not_found\", aTop),\n\t\t)\n\t}\n\n\tdDistinct, dTop := explain(s.metrics.departureAirportNotFound)\n\tif dDistinct > 0 {\n\t\tlog.Debug(ctx, \"Departure airports not found summary\",\n\t\t\tzap.Int(\"distinct_departures_not_found_count\", dDistinct),\n\t\t\tzap.Strings(\"top_departures_not_found\", dTop),\n\t\t)\n\t}\n\n\trDistinct, rTop := explain(s.metrics.arrivalAirportNotFound)\n\tif rDistinct > 0 {\n\t\tlog.Debug(ctx, \"Arrival airports not found summary\",\n\t\t\tzap.Int(\"distinct_arrivals_not_found_count\", rDistinct),\n\t\t\tzap.Strings(\"top_arrivals_not_found\", rTop),\n\t\t)\n\t}\n\n\ts.metrics = enrichMetrics{\n\t\tairlineNotFound:          make(map[string]int),\n\t\tdepartureAirportNotFound: make(map[string]int),\n\t\tarrivalAirportNotFound:   make(map[string]int),\n\t\tlastReport:               now,\n\t}\n}\n", "n_tokens": 446, "primary_symbol": "", "primary_kind": "", "primary_span": [212, 270], "def_symbols": [], "symbols": ["type", "pair", "struct", "key", "string", "count", "int", "explain", "func", "data", "map", "distinct", "top10", "len", "pairs", "make", "for", "range", "append", "sort", "Slice", "bool", "return", "fmt", "Sprintf", "aDistinct", "aTop", "metrics", "airlineNotFound", "log", "Debug", "ctx", "Airlines", "not", "found", "summary", "zap", "Int", "distinct_airlines_not_found_count", "Strings", "top_airlines_not_found", "dDistinct", "dTop", "departureAirportNotFound", "Departure", "airports", "distinct_departures_not_found_count", "top_departures_not_found", "rDistinct", "rTop", "arrivalAirportNotFound", "Arrival", "distinct_arrivals_not_found_count", "top_arrivals_not_found", "enrichMetrics", "lastReport", "now"], "doc_head": "\ttype pair struct {\n\t\tkey   string\n\t\tcount int\n\t}\n\texplain := func(data map[string]int) (distinct int, top10 []string) {\n\t\tdistinct = len(data)\n\t\tpairs := make([]pair, 0, distinct)\n\t\tfor k, v := range data {\n\t\t\tpairs = append(pairs, pair{k, v})\n\t\t}\n\t\tsort.Slice(pairs, func(i, j int) bool {\n\t\t\treturn pairs[i].count > pairs[j].count\n\t\t})\n\t\tn := 10\n\t\tif len(pairs) < n {\n\t\t\tn = len(pairs)\n\t\t}\n\t\ttop10 = make([]string, 0, n)\n\t\tfor i := 0; i < n; i++ {\n\t\t\ttop10 = append(top10, fmt.Sprintf(\"%s(%d)\", pairs[i].key, pairs[i].count))\n\t\t}\n\t\treturn\n\t}\n\taDistinct, aTop := explain(s.metrics.airlineNotFound)\n\tif aDistinct > 0 {\n\t\tlog.Debug(ctx, \"Airlines not found summary\",\n\t\t\tzap.Int(\"distinct_airlines_not_found_count\", aDistinct),\n\t\t\tzap.Strings(\"top_airlines_not_found\", aTop),\n\t\t)\n\t}\n\tdDistinct, dTop := explain(s.metrics.departureAirportNotFound)\n\tif dDistinct > 0 {\n\t\tlog.Debug(ctx, \"Departure airports not found summary\",\n\t\t\tzap.Int(\"distinct_departures_not_found_count\", dDistinct),\n\t\t\tzap.Strings(\"top_departures_not_found\", dTop),\n\t\t)\n\t}\n\trDistinct, rTop := explain(s.metrics.arrivalAirportNotFound)\n\tif rDistinct > 0 {\n\t\tlog.Debug(ctx, \"Arrival airports not found summary\",\n\t\t\tzap.Int(\"distinct_a"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go", "rel_path": "internal/core/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package core\n\nimport \"github.com/cockroachdb/errors\"\n\nvar (\n\tErrFlightNotFound = errors.New(\"flight not found\")\n\tErrCacheMiss      = errors.New(\"cache miss\")\n)\n", "n_tokens": 40, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "core", "import", "github", "com", "cockroachdb", "errors", "var", "ErrFlightNotFound", "New", "flight", "not", "found", "ErrCacheMiss", "cache", "miss"], "doc_head": "package core\nimport \"github.com/cockroachdb/errors\"\nvar (\n\tErrFlightNotFound = errors.New(\"flight not found\")\n\tErrCacheMiss      = errors.New(\"cache miss\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockliveFlightsRepository is a mock of liveFlightsRepository interface.\ntype MockliveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockliveFlightsRepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockliveFlightsRepositoryMockRecorder is the mock recorder for MockliveFlightsRepository.\ntype MockliveFlightsRepositoryMockRecorder struct {\n\tmock *MockliveFlightsRepository\n}\n", "n_tokens": 190, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "MockliveFlightsRepository", "liveFlightsRepository", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockliveFlightsRepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockliveFlightsRepository is a mock of liveFlightsRepository interface.\ntype MockliveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockliveFlightsRepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockliveFlightsRepositoryMockRecorder is the mock recorder for MockliveFlightsRepository.\ntype MockliveFlightsRepositoryMockRecorder struct {\n\tmock *MockliveFlightsRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "// NewMockliveFlightsRepository creates a new mock instance.\nfunc NewMockliveFlightsRepository(ctrl *gomock.Controller) *MockliveFlightsRepository {\n\tmock := &MockliveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockliveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockliveFlightsRepository) EXPECT() *MockliveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// Filter mocks base method.\nfunc (m *MockliveFlightsRepository) Filter(arg0 context.Context, arg1 *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Filter\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 200, "primary_symbol": "NewMockliveFlightsRepository", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["NewMockliveFlightsRepository", "EXPECT", "Filter"], "symbols": ["NewMockliveFlightsRepository", "EXPECT", "Filter", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockliveFlightsRepository", "recorder", "MockliveFlightsRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "core", "FlightsWithin", "LiveFlight", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockliveFlightsRepository creates a new mock instance.\nfunc NewMockliveFlightsRepository(ctrl *gomock.Controller) *MockliveFlightsRepository {\n\tmock := &MockliveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockliveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockliveFlightsRepository) EXPECT() *MockliveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}\n// Filter mocks base method.\nfunc (m *MockliveFlightsRepository) Filter(arg0 context.Context, arg1 *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Filter\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 67, "text": "// Filter indicates an expected call of Filter.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) Filter(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Filter\", reflect.TypeOf((*MockliveFlightsRepository)(nil).Filter), arg0, arg1)\n}\n\n// GetFlightDetailsByFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 181, "primary_symbol": "Filter", "primary_kind": "function", "primary_span": [54, 67], "def_symbols": ["Filter", "GetFlightDetailsByFlightID"], "symbols": ["Filter", "GetFlightDetailsByFlightID", "indicates", "expected", "call", "func", "MockliveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockliveFlightsRepository", "nil", "mocks", "base", "method", "context", "Context", "string", "core", "LiveFlight", "error", "ret", "ret0", "ret1"], "doc_head": "// Filter indicates an expected call of Filter.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) Filter(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Filter\", reflect.TypeOf((*MockliveFlightsRepository)(nil).Filter), arg0, arg1)\n}\n// GetFlightDetailsByFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 68, "end_line": 73, "text": "// GetFlightDetailsByFlightID indicates an expected call of GetFlightDetailsByFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByFlightID), arg0, arg1)\n}\n", "n_tokens": 102, "primary_symbol": "GetFlightDetailsByFlightID", "primary_kind": "function", "primary_span": [69, 73], "def_symbols": ["GetFlightDetailsByFlightID"], "symbols": ["GetFlightDetailsByFlightID", "indicates", "expected", "call", "func", "MockliveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockliveFlightsRepository", "nil"], "doc_head": "// GetFlightDetailsByFlightID indicates an expected call of GetFlightDetailsByFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByFlightID), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 74, "end_line": 82, "text": "// GetFlightDetailsByLiveFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByLiveFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByLiveFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 107, "primary_symbol": "GetFlightDetailsByLiveFlightID", "primary_kind": "function", "primary_span": [75, 82], "def_symbols": ["GetFlightDetailsByLiveFlightID"], "symbols": ["GetFlightDetailsByLiveFlightID", "mocks", "base", "method", "func", "MockliveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetFlightDetailsByLiveFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByLiveFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByLiveFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 83, "end_line": 100, "text": "// GetFlightDetailsByLiveFlightID indicates an expected call of GetFlightDetailsByLiveFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByLiveFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByLiveFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByLiveFlightID), arg0, arg1)\n}\n\n// MockfilesystemLiveFlightsRepository is a mock of filesystemLiveFlightsRepository interface.\ntype MockfilesystemLiveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockfilesystemLiveFlightsRepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockfilesystemLiveFlightsRepositoryMockRecorder is the mock recorder for MockfilesystemLiveFlightsRepository.\ntype MockfilesystemLiveFlightsRepositoryMockRecorder struct {\n\tmock *MockfilesystemLiveFlightsRepository\n}\n", "n_tokens": 201, "primary_symbol": "GetFlightDetailsByLiveFlightID", "primary_kind": "function", "primary_span": [84, 100], "def_symbols": ["GetFlightDetailsByLiveFlightID"], "symbols": ["GetFlightDetailsByLiveFlightID", "indicates", "expected", "call", "func", "MockliveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockliveFlightsRepository", "nil", "MockfilesystemLiveFlightsRepository", "filesystemLiveFlightsRepository", "interface", "type", "struct", "Controller", "recorder", "MockfilesystemLiveFlightsRepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// GetFlightDetailsByLiveFlightID indicates an expected call of GetFlightDetailsByLiveFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByLiveFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByLiveFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByLiveFlightID), arg0, arg1)\n}\n// MockfilesystemLiveFlightsRepository is a mock of filesystemLiveFlightsRepository interface.\ntype MockfilesystemLiveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockfilesystemLiveFlightsRepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockfilesystemLiveFlightsRepositoryMockRecorder is the mock recorder for MockfilesystemLiveFlightsRepository.\ntype MockfilesystemLiveFlightsRepositoryMockRecorder struct {\n\tmock *MockfilesystemLiveFlightsRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 101, "end_line": 112, "text": "// NewMockfilesystemLiveFlightsRepository creates a new mock instance.\nfunc NewMockfilesystemLiveFlightsRepository(ctrl *gomock.Controller) *MockfilesystemLiveFlightsRepository {\n\tmock := &MockfilesystemLiveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockfilesystemLiveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockfilesystemLiveFlightsRepository) EXPECT() *MockfilesystemLiveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 113, "primary_symbol": "NewMockfilesystemLiveFlightsRepository", "primary_kind": "function", "primary_span": [102, 112], "def_symbols": ["NewMockfilesystemLiveFlightsRepository", "EXPECT"], "symbols": ["NewMockfilesystemLiveFlightsRepository", "EXPECT", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockfilesystemLiveFlightsRepository", "recorder", "MockfilesystemLiveFlightsRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use"], "doc_head": "// NewMockfilesystemLiveFlightsRepository creates a new mock instance.\nfunc NewMockfilesystemLiveFlightsRepository(ctrl *gomock.Controller) *MockfilesystemLiveFlightsRepository {\n\tmock := &MockfilesystemLiveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockfilesystemLiveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockfilesystemLiveFlightsRepository) EXPECT() *MockfilesystemLiveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 113, "end_line": 127, "text": "// GetLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) GetLiveFlight(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetLiveFlight indicates an expected call of GetLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) GetLiveFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).GetLiveFlight), arg0, arg1)\n}\n", "n_tokens": 185, "primary_symbol": "GetLiveFlight", "primary_kind": "function", "primary_span": [114, 127], "def_symbols": ["GetLiveFlight"], "symbols": ["GetLiveFlight", "mocks", "base", "method", "func", "MockfilesystemLiveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockfilesystemLiveFlightsRepositoryMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// GetLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) GetLiveFlight(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetLiveFlight indicates an expected call of GetLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) GetLiveFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).GetLiveFlight), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 128, "end_line": 141, "text": "// SaveLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) SaveLiveFlight(arg0 context.Context, arg1 string, arg2 *core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"SaveLiveFlight\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// SaveLiveFlight indicates an expected call of SaveLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) SaveLiveFlight(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"SaveLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).SaveLiveFlight), arg0, arg1, arg2)\n}\n", "n_tokens": 178, "primary_symbol": "SaveLiveFlight", "primary_kind": "function", "primary_span": [129, 141], "def_symbols": ["SaveLiveFlight"], "symbols": ["SaveLiveFlight", "mocks", "base", "method", "func", "MockfilesystemLiveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "arg2", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return", "indicates", "expected", "call", "MockfilesystemLiveFlightsRepositoryMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// SaveLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) SaveLiveFlight(arg0 context.Context, arg1 string, arg2 *core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"SaveLiveFlight\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n// SaveLiveFlight indicates an expected call of SaveLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) SaveLiveFlight(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"SaveLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).SaveLiveFlight), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_ingest_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockflightUpdatesRepository is a mock of flightUpdatesRepository interface.\ntype MockflightUpdatesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightUpdatesRepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockflightUpdatesRepositoryMockRecorder is the mock recorder for MockflightUpdatesRepository.\ntype MockflightUpdatesRepositoryMockRecorder struct {\n\tmock *MockflightUpdatesRepository\n}\n", "n_tokens": 193, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "flights_ingest_service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "flights_ingest_service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "MockflightUpdatesRepository", "flightUpdatesRepository", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockflightUpdatesRepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_ingest_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockflightUpdatesRepository is a mock of flightUpdatesRepository interface.\ntype MockflightUpdatesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightUpdatesRepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockflightUpdatesRepositoryMockRecorder is the mock recorder for MockflightUpdatesRepository.\ntype MockflightUpdatesRepositoryMockRecorder struct {\n\tmock *MockflightUpdatesRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 51, "text": "// NewMockflightUpdatesRepository creates a new mock instance.\nfunc NewMockflightUpdatesRepository(ctrl *gomock.Controller) *MockflightUpdatesRepository {\n\tmock := &MockflightUpdatesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightUpdatesRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightUpdatesRepository) EXPECT() *MockflightUpdatesRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// UpsertMany mocks base method.\nfunc (m *MockflightUpdatesRepository) UpsertMany(arg0 context.Context, arg1 []*core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"UpsertMany\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 174, "primary_symbol": "NewMockflightUpdatesRepository", "primary_kind": "function", "primary_span": [33, 51], "def_symbols": ["NewMockflightUpdatesRepository", "EXPECT", "UpsertMany"], "symbols": ["NewMockflightUpdatesRepository", "EXPECT", "UpsertMany", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockflightUpdatesRepository", "recorder", "MockflightUpdatesRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "core", "LiveFlightUpdate", "error", "Helper", "ret", "Call", "ret0"], "doc_head": "// NewMockflightUpdatesRepository creates a new mock instance.\nfunc NewMockflightUpdatesRepository(ctrl *gomock.Controller) *MockflightUpdatesRepository {\n\tmock := &MockflightUpdatesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightUpdatesRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightUpdatesRepository) EXPECT() *MockflightUpdatesRepositoryMockRecorder {\n\treturn m.recorder\n}\n// UpsertMany mocks base method.\nfunc (m *MockflightUpdatesRepository) UpsertMany(arg0 context.Context, arg1 []*core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"UpsertMany\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 52, "end_line": 69, "text": "// UpsertMany indicates an expected call of UpsertMany.\nfunc (mr *MockflightUpdatesRepositoryMockRecorder) UpsertMany(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"UpsertMany\", reflect.TypeOf((*MockflightUpdatesRepository)(nil).UpsertMany), arg0, arg1)\n}\n\n// MockrealtimeFlightUpdatesClient is a mock of realtimeFlightUpdatesClient interface.\ntype MockrealtimeFlightUpdatesClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrealtimeFlightUpdatesClientMockRecorder\n\tisgomock struct{}\n}\n\n// MockrealtimeFlightUpdatesClientMockRecorder is the mock recorder for MockrealtimeFlightUpdatesClient.\ntype MockrealtimeFlightUpdatesClientMockRecorder struct {\n\tmock *MockrealtimeFlightUpdatesClient\n}\n", "n_tokens": 178, "primary_symbol": "UpsertMany", "primary_kind": "function", "primary_span": [53, 69], "def_symbols": ["UpsertMany"], "symbols": ["UpsertMany", "indicates", "expected", "call", "func", "MockflightUpdatesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightUpdatesRepository", "nil", "MockrealtimeFlightUpdatesClient", "realtimeFlightUpdatesClient", "interface", "type", "struct", "Controller", "recorder", "MockrealtimeFlightUpdatesClientMockRecorder", "isgomock", "the", "for"], "doc_head": "// UpsertMany indicates an expected call of UpsertMany.\nfunc (mr *MockflightUpdatesRepositoryMockRecorder) UpsertMany(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"UpsertMany\", reflect.TypeOf((*MockflightUpdatesRepository)(nil).UpsertMany), arg0, arg1)\n}\n// MockrealtimeFlightUpdatesClient is a mock of realtimeFlightUpdatesClient interface.\ntype MockrealtimeFlightUpdatesClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrealtimeFlightUpdatesClientMockRecorder\n\tisgomock struct{}\n}\n// MockrealtimeFlightUpdatesClientMockRecorder is the mock recorder for MockrealtimeFlightUpdatesClient.\ntype MockrealtimeFlightUpdatesClientMockRecorder struct {\n\tmock *MockrealtimeFlightUpdatesClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 70, "end_line": 89, "text": "// NewMockrealtimeFlightUpdatesClient creates a new mock instance.\nfunc NewMockrealtimeFlightUpdatesClient(ctrl *gomock.Controller) *MockrealtimeFlightUpdatesClient {\n\tmock := &MockrealtimeFlightUpdatesClient{ctrl: ctrl}\n\tmock.recorder = &MockrealtimeFlightUpdatesClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrealtimeFlightUpdatesClient) EXPECT() *MockrealtimeFlightUpdatesClientMockRecorder {\n\treturn m.recorder\n}\n\n// Read mocks base method.\nfunc (m *MockrealtimeFlightUpdatesClient) Read(arg0 context.Context, arg1 chan<- core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Read\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 185, "primary_symbol": "NewMockrealtimeFlightUpdatesClient", "primary_kind": "function", "primary_span": [71, 89], "def_symbols": ["NewMockrealtimeFlightUpdatesClient", "EXPECT", "Read"], "symbols": ["NewMockrealtimeFlightUpdatesClient", "EXPECT", "Read", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockrealtimeFlightUpdatesClient", "recorder", "MockrealtimeFlightUpdatesClientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "chan", "core", "LiveFlightUpdate", "error", "Helper", "ret", "Call", "ret0"], "doc_head": "// NewMockrealtimeFlightUpdatesClient creates a new mock instance.\nfunc NewMockrealtimeFlightUpdatesClient(ctrl *gomock.Controller) *MockrealtimeFlightUpdatesClient {\n\tmock := &MockrealtimeFlightUpdatesClient{ctrl: ctrl}\n\tmock.recorder = &MockrealtimeFlightUpdatesClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrealtimeFlightUpdatesClient) EXPECT() *MockrealtimeFlightUpdatesClientMockRecorder {\n\treturn m.recorder\n}\n// Read mocks base method.\nfunc (m *MockrealtimeFlightUpdatesClient) Read(arg0 context.Context, arg1 chan<- core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Read\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 90, "end_line": 95, "text": "// Read indicates an expected call of Read.\nfunc (mr *MockrealtimeFlightUpdatesClientMockRecorder) Read(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Read\", reflect.TypeOf((*MockrealtimeFlightUpdatesClient)(nil).Read), arg0, arg1)\n}\n", "n_tokens": 79, "primary_symbol": "Read", "primary_kind": "function", "primary_span": [91, 95], "def_symbols": ["Read"], "symbols": ["Read", "indicates", "expected", "call", "func", "MockrealtimeFlightUpdatesClientMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockrealtimeFlightUpdatesClient", "nil"], "doc_head": "// Read indicates an expected call of Read.\nfunc (mr *MockrealtimeFlightUpdatesClientMockRecorder) Read(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Read\", reflect.TypeOf((*MockrealtimeFlightUpdatesClient)(nil).Read), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_enrich_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockairlinesRepository is a mock of airlinesRepository interface.\ntype MockairlinesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairlinesRepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockairlinesRepositoryMockRecorder is the mock recorder for MockairlinesRepository.\ntype MockairlinesRepositoryMockRecorder struct {\n\tmock *MockairlinesRepository\n}\n", "n_tokens": 192, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "flights_enrich_service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "flights_enrich_service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "MockairlinesRepository", "airlinesRepository", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockairlinesRepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_enrich_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockairlinesRepository is a mock of airlinesRepository interface.\ntype MockairlinesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairlinesRepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockairlinesRepositoryMockRecorder is the mock recorder for MockairlinesRepository.\ntype MockairlinesRepositoryMockRecorder struct {\n\tmock *MockairlinesRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "// NewMockairlinesRepository creates a new mock instance.\nfunc NewMockairlinesRepository(ctrl *gomock.Controller) *MockairlinesRepository {\n\tmock := &MockairlinesRepository{ctrl: ctrl}\n\tmock.recorder = &MockairlinesRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairlinesRepository) EXPECT() *MockairlinesRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// GetByDesignator mocks base method.\nfunc (m *MockairlinesRepository) GetByDesignator(arg0 context.Context, arg1 string) (*core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 198, "primary_symbol": "NewMockairlinesRepository", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["NewMockairlinesRepository", "EXPECT", "GetByDesignator"], "symbols": ["NewMockairlinesRepository", "EXPECT", "GetByDesignator", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockairlinesRepository", "recorder", "MockairlinesRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "string", "core", "Airline", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockairlinesRepository creates a new mock instance.\nfunc NewMockairlinesRepository(ctrl *gomock.Controller) *MockairlinesRepository {\n\tmock := &MockairlinesRepository{ctrl: ctrl}\n\tmock.recorder = &MockairlinesRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairlinesRepository) EXPECT() *MockairlinesRepositoryMockRecorder {\n\treturn m.recorder\n}\n// GetByDesignator mocks base method.\nfunc (m *MockairlinesRepository) GetByDesignator(arg0 context.Context, arg1 string) (*core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 70, "text": "// GetByDesignator indicates an expected call of GetByDesignator.\nfunc (mr *MockairlinesRepositoryMockRecorder) GetByDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByDesignator\", reflect.TypeOf((*MockairlinesRepository)(nil).GetByDesignator), arg0, arg1)\n}\n\n// MockairportsRepository is a mock of airportsRepository interface.\ntype MockairportsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairportsRepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockairportsRepositoryMockRecorder is the mock recorder for MockairportsRepository.\ntype MockairportsRepositoryMockRecorder struct {\n\tmock *MockairportsRepository\n}\n", "n_tokens": 167, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [54, 70], "def_symbols": ["GetByDesignator"], "symbols": ["GetByDesignator", "indicates", "expected", "call", "func", "MockairlinesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockairlinesRepository", "nil", "MockairportsRepository", "airportsRepository", "interface", "type", "struct", "Controller", "recorder", "MockairportsRepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// GetByDesignator indicates an expected call of GetByDesignator.\nfunc (mr *MockairlinesRepositoryMockRecorder) GetByDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByDesignator\", reflect.TypeOf((*MockairlinesRepository)(nil).GetByDesignator), arg0, arg1)\n}\n// MockairportsRepository is a mock of airportsRepository interface.\ntype MockairportsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairportsRepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockairportsRepositoryMockRecorder is the mock recorder for MockairportsRepository.\ntype MockairportsRepositoryMockRecorder struct {\n\tmock *MockairportsRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 71, "end_line": 82, "text": "// NewMockairportsRepository creates a new mock instance.\nfunc NewMockairportsRepository(ctrl *gomock.Controller) *MockairportsRepository {\n\tmock := &MockairportsRepository{ctrl: ctrl}\n\tmock.recorder = &MockairportsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairportsRepository) EXPECT() *MockairportsRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 99, "primary_symbol": "NewMockairportsRepository", "primary_kind": "function", "primary_span": [72, 82], "def_symbols": ["NewMockairportsRepository", "EXPECT"], "symbols": ["NewMockairportsRepository", "EXPECT", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockairportsRepository", "recorder", "MockairportsRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use"], "doc_head": "// NewMockairportsRepository creates a new mock instance.\nfunc NewMockairportsRepository(ctrl *gomock.Controller) *MockairportsRepository {\n\tmock := &MockairportsRepository{ctrl: ctrl}\n\tmock.recorder = &MockairportsRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairportsRepository) EXPECT() *MockairportsRepositoryMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 83, "end_line": 91, "text": "// GetByICAOOrIATA mocks base method.\nfunc (m *MockairportsRepository) GetByICAOOrIATA(arg0 context.Context, arg1, arg2 *string) (*core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByICAOOrIATA\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 115, "primary_symbol": "GetByICAOOrIATA", "primary_kind": "function", "primary_span": [84, 91], "def_symbols": ["GetByICAOOrIATA"], "symbols": ["GetByICAOOrIATA", "mocks", "base", "method", "func", "MockairportsRepository", "arg0", "context", "Context", "arg1", "arg2", "string", "core", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetByICAOOrIATA mocks base method.\nfunc (m *MockairportsRepository) GetByICAOOrIATA(arg0 context.Context, arg1, arg2 *string) (*core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByICAOOrIATA\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 92, "end_line": 104, "text": "// GetByICAOOrIATA indicates an expected call of GetByICAOOrIATA.\nfunc (mr *MockairportsRepositoryMockRecorder) GetByICAOOrIATA(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByICAOOrIATA\", reflect.TypeOf((*MockairportsRepository)(nil).GetByICAOOrIATA), arg0, arg1, arg2)\n}\n\n// MockflightsEnrichRepository is a mock of flightsEnrichRepository interface.\ntype MockflightsEnrichRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightsEnrichRepositoryMockRecorder\n\tisgomock struct{}\n}\n", "n_tokens": 162, "primary_symbol": "GetByICAOOrIATA", "primary_kind": "function", "primary_span": [93, 104], "def_symbols": ["GetByICAOOrIATA"], "symbols": ["GetByICAOOrIATA", "indicates", "expected", "call", "func", "MockairportsRepositoryMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockairportsRepository", "nil", "MockflightsEnrichRepository", "flightsEnrichRepository", "interface", "type", "struct", "Controller", "recorder", "MockflightsEnrichRepositoryMockRecorder", "isgomock"], "doc_head": "// GetByICAOOrIATA indicates an expected call of GetByICAOOrIATA.\nfunc (mr *MockairportsRepositoryMockRecorder) GetByICAOOrIATA(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByICAOOrIATA\", reflect.TypeOf((*MockairportsRepository)(nil).GetByICAOOrIATA), arg0, arg1, arg2)\n}\n// MockflightsEnrichRepository is a mock of flightsEnrichRepository interface.\ntype MockflightsEnrichRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightsEnrichRepositoryMockRecorder\n\tisgomock struct{}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 105, "end_line": 121, "text": "// MockflightsEnrichRepositoryMockRecorder is the mock recorder for MockflightsEnrichRepository.\ntype MockflightsEnrichRepositoryMockRecorder struct {\n\tmock *MockflightsEnrichRepository\n}\n\n// NewMockflightsEnrichRepository creates a new mock instance.\nfunc NewMockflightsEnrichRepository(ctrl *gomock.Controller) *MockflightsEnrichRepository {\n\tmock := &MockflightsEnrichRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightsEnrichRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightsEnrichRepository) EXPECT() *MockflightsEnrichRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 155, "primary_symbol": "NewMockflightsEnrichRepository", "primary_kind": "function", "primary_span": [111, 121], "def_symbols": ["NewMockflightsEnrichRepository", "EXPECT"], "symbols": ["NewMockflightsEnrichRepository", "EXPECT", "MockflightsEnrichRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockflightsEnrichRepository", "type", "struct", "creates", "new", "instance", "func", "ctrl", "gomock", "Controller", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// MockflightsEnrichRepositoryMockRecorder is the mock recorder for MockflightsEnrichRepository.\ntype MockflightsEnrichRepositoryMockRecorder struct {\n\tmock *MockflightsEnrichRepository\n}\n// NewMockflightsEnrichRepository creates a new mock instance.\nfunc NewMockflightsEnrichRepository(ctrl *gomock.Controller) *MockflightsEnrichRepository {\n\tmock := &MockflightsEnrichRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightsEnrichRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightsEnrichRepository) EXPECT() *MockflightsEnrichRepositoryMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 122, "end_line": 135, "text": "// EnrichFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) EnrichFlights(ctx context.Context, enriched []*core.EnrichedFlightData) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"EnrichFlights\", ctx, enriched)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// EnrichFlights indicates an expected call of EnrichFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) EnrichFlights(ctx, enriched any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"EnrichFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).EnrichFlights), ctx, enriched)\n}\n", "n_tokens": 168, "primary_symbol": "EnrichFlights", "primary_kind": "function", "primary_span": [123, 135], "def_symbols": ["EnrichFlights"], "symbols": ["EnrichFlights", "mocks", "base", "method", "func", "MockflightsEnrichRepository", "ctx", "context", "Context", "enriched", "core", "EnrichedFlightData", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return", "indicates", "expected", "call", "MockflightsEnrichRepositoryMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// EnrichFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) EnrichFlights(ctx context.Context, enriched []*core.EnrichedFlightData) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"EnrichFlights\", ctx, enriched)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n// EnrichFlights indicates an expected call of EnrichFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) EnrichFlights(ctx, enriched any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"EnrichFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).EnrichFlights), ctx, enriched)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 136, "end_line": 144, "text": "// GetUnenrichedFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) GetUnenrichedFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetUnenrichedFlights\", ctx, limit)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 105, "primary_symbol": "GetUnenrichedFlights", "primary_kind": "function", "primary_span": [137, 144], "def_symbols": ["GetUnenrichedFlights"], "symbols": ["GetUnenrichedFlights", "mocks", "base", "method", "func", "MockflightsEnrichRepository", "ctx", "context", "Context", "limit", "int", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetUnenrichedFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) GetUnenrichedFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetUnenrichedFlights\", ctx, limit)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 145, "end_line": 150, "text": "// GetUnenrichedFlights indicates an expected call of GetUnenrichedFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) GetUnenrichedFlights(ctx, limit any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetUnenrichedFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).GetUnenrichedFlights), ctx, limit)\n}\n", "n_tokens": 105, "primary_symbol": "GetUnenrichedFlights", "primary_kind": "function", "primary_span": [146, 150], "def_symbols": ["GetUnenrichedFlights"], "symbols": ["GetUnenrichedFlights", "indicates", "expected", "call", "func", "MockflightsEnrichRepositoryMockRecorder", "ctx", "limit", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightsEnrichRepository", "nil"], "doc_head": "// GetUnenrichedFlights indicates an expected call of GetUnenrichedFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) GetUnenrichedFlights(ctx, limit any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetUnenrichedFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).GetUnenrichedFlights), ctx, limit)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_archive_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockflightArchivesRepository is a mock of flightArchivesRepository interface.\ntype MockflightArchivesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightArchivesRepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockflightArchivesRepositoryMockRecorder is the mock recorder for MockflightArchivesRepository.\ntype MockflightArchivesRepositoryMockRecorder struct {\n\tmock *MockflightArchivesRepository\n}\n", "n_tokens": 198, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "flights_archive_service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "flights_archive_service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "MockflightArchivesRepository", "flightArchivesRepository", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockflightArchivesRepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_archive_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockflightArchivesRepository is a mock of flightArchivesRepository interface.\ntype MockflightArchivesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightArchivesRepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockflightArchivesRepositoryMockRecorder is the mock recorder for MockflightArchivesRepository.\ntype MockflightArchivesRepositoryMockRecorder struct {\n\tmock *MockflightArchivesRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 51, "text": "// NewMockflightArchivesRepository creates a new mock instance.\nfunc NewMockflightArchivesRepository(ctrl *gomock.Controller) *MockflightArchivesRepository {\n\tmock := &MockflightArchivesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightArchivesRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightArchivesRepository) EXPECT() *MockflightArchivesRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// DeleteFlights mocks base method.\nfunc (m *MockflightArchivesRepository) DeleteFlights(arg0 context.Context, arg1 []*core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"DeleteFlights\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 181, "primary_symbol": "NewMockflightArchivesRepository", "primary_kind": "function", "primary_span": [33, 51], "def_symbols": ["NewMockflightArchivesRepository", "EXPECT", "DeleteFlights"], "symbols": ["NewMockflightArchivesRepository", "EXPECT", "DeleteFlights", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockflightArchivesRepository", "recorder", "MockflightArchivesRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "core", "LiveFlight", "error", "Helper", "ret", "Call", "ret0"], "doc_head": "// NewMockflightArchivesRepository creates a new mock instance.\nfunc NewMockflightArchivesRepository(ctrl *gomock.Controller) *MockflightArchivesRepository {\n\tmock := &MockflightArchivesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightArchivesRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightArchivesRepository) EXPECT() *MockflightArchivesRepositoryMockRecorder {\n\treturn m.recorder\n}\n// DeleteFlights mocks base method.\nfunc (m *MockflightArchivesRepository) DeleteFlights(arg0 context.Context, arg1 []*core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"DeleteFlights\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 52, "end_line": 66, "text": "// DeleteFlights indicates an expected call of DeleteFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) DeleteFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).DeleteFlights), arg0, arg1)\n}\n\n// GetArchivableFlights mocks base method.\nfunc (m *MockflightArchivesRepository) GetArchivableFlights(arg0 context.Context, arg1 int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetArchivableFlights\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 189, "primary_symbol": "DeleteFlights", "primary_kind": "function", "primary_span": [53, 66], "def_symbols": ["DeleteFlights", "GetArchivableFlights"], "symbols": ["DeleteFlights", "GetArchivableFlights", "indicates", "expected", "call", "func", "MockflightArchivesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightArchivesRepository", "nil", "mocks", "base", "method", "context", "Context", "int", "core", "LiveFlight", "error", "ret", "ret0", "ret1"], "doc_head": "// DeleteFlights indicates an expected call of DeleteFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) DeleteFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).DeleteFlights), arg0, arg1)\n}\n// GetArchivableFlights mocks base method.\nfunc (m *MockflightArchivesRepository) GetArchivableFlights(arg0 context.Context, arg1 int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetArchivableFlights\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 72, "text": "// GetArchivableFlights indicates an expected call of GetArchivableFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) GetArchivableFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetArchivableFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).GetArchivableFlights), arg0, arg1)\n}\n", "n_tokens": 97, "primary_symbol": "GetArchivableFlights", "primary_kind": "function", "primary_span": [68, 72], "def_symbols": ["GetArchivableFlights"], "symbols": ["GetArchivableFlights", "indicates", "expected", "call", "func", "MockflightArchivesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightArchivesRepository", "nil"], "doc_head": "// GetArchivableFlights indicates an expected call of GetArchivableFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) GetArchivableFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetArchivableFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).GetArchivableFlights), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "package adapter\n\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n//go:generate mockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\ntype AirlinesCache interface {\n\tGet(ctx context.Context, designator string) (core.Airline, error)\n\tSet(ctx context.Context, designator string, airline core.Airline) error\n}\n", "n_tokens": 197, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["package", "adapter", "import", "context", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "pkg", "grpc", "airlines", "log", "uber", "org", "zap", "strings", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "generate", "mockgen", "source", "airlines_grpc_client", "destination", "mocks", "airlines_grpc_client_mocks", "type", "AirlinesCache", "interface", "Get", "ctx", "Context", "designator", "string", "Airline", "error", "Set", "airline"], "doc_head": "package adapter\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n//go:generate mockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\ntype AirlinesCache interface {\n\tGet(ctx context.Context, designator string) (core.Airline, error)\n\tSet(ctx context.Context, designator string, airline core.Airline) error\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 37, "text": "// AirlineGrpcClient is a wrapper around the grpc client for the airline service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AirlinesGrpcClient struct {\n\tclient v0.AirlinesServiceClient\n\tcache  AirlinesCache\n}\n\nfunc NewAirlinesGrpcClient(client v0.AirlinesServiceClient, cache AirlinesCache) *AirlinesGrpcClient {\n\treturn &AirlinesGrpcClient{\n\t\tclient: client,\n\t\tcache:  cache,\n\t}\n}\n", "n_tokens": 100, "primary_symbol": "NewAirlinesGrpcClient", "primary_kind": "function", "primary_span": [31, 37], "def_symbols": ["NewAirlinesGrpcClient"], "symbols": ["NewAirlinesGrpcClient", "AirlineGrpcClient", "wrapper", "around", "the", "grpc", "client", "for", "airline", "service", "contains", "cache", "avoid", "unnecessary", "calls", "type", "AirlinesGrpcClient", "struct", "AirlinesServiceClient", "AirlinesCache", "func", "return"], "doc_head": "// AirlineGrpcClient is a wrapper around the grpc client for the airline service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AirlinesGrpcClient struct {\n\tclient v0.AirlinesServiceClient\n\tcache  AirlinesCache\n}\nfunc NewAirlinesGrpcClient(client v0.AirlinesServiceClient, cache AirlinesCache) *AirlinesGrpcClient {\n\treturn &AirlinesGrpcClient{\n\t\tclient: client,\n\t\tcache:  cache,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 38, "end_line": 92, "text": "func (c *AirlinesGrpcClient) GetByDesignator(ctx context.Context, designator string) (*core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesGrpcClient:GetByDesignator\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t)\n\n\tkey := strings.ToUpper(strings.TrimSpace(designator))\n\n\tif c.cache != nil {\n\t\tairline, err := c.cache.Get(ctx, key)\n\t\tif err == nil {\n\t\t\treturn &airline, nil\n\t\t}\n\t\tif !errors.Is(err, core.ErrCacheMiss) {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t\t}\n\t}\n\n\treq := &v0.GetByDesignatorRequest{Designator: designator}\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"failed to request airline\")\n\t}\n\tif resp.Airline == nil {\n\t\treturn nil, nil\n\t}\n\n\tcacheDesignator := key\n\tif resp.Airline.Designator != nil {\n\t\tcacheDesignator = strings.ToUpper(strings.TrimSpace(*resp.Airline.Designator))\n\t}\n\n\tairline := &core.Airline{\n\t\tID:             resp.Airline.Id,\n\t\tDesignator:     cacheDesignator,\n\t\tIATA:           resp.Airline.Iata,\n\t\tICAO:           resp.Airline.Icao,\n\t\tClassification: resp.Airline.Classification,\n\t}\n\n\tif c.cache != nil {\n\t\t_ = c.cache.Set(ctx, cacheDesignator, *airline)\n\t}\n\n\treturn airline, nil\n}\n", "n_tokens": 402, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [38, 92], "def_symbols": ["GetByDesignator"], "symbols": ["GetByDesignator", "func", "AirlinesGrpcClient", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "key", "strings", "ToUpper", "TrimSpace", "cache", "nil", "airline", "err", "Get", "return", "errors", "ErrCacheMiss", "RecordError", "SetStatus", "codes", "Error", "log", "Warn", "Cache", "failure", "zap", "req", "GetByDesignatorRequest", "Designator", "resp", "client", "Wrap", "failed", "request", "cacheDesignator", "IATA", "Iata", "ICAO", "Icao", "Classification", "Set"], "doc_head": "func (c *AirlinesGrpcClient) GetByDesignator(ctx context.Context, designator string) (*core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesGrpcClient:GetByDesignator\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t)\n\tkey := strings.ToUpper(strings.TrimSpace(designator))\n\tif c.cache != nil {\n\t\tairline, err := c.cache.Get(ctx, key)\n\t\tif err == nil {\n\t\t\treturn &airline, nil\n\t\t}\n\t\tif !errors.Is(err, core.ErrCacheMiss) {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t\t}\n\t}\n\treq := &v0.GetByDesignatorRequest{Designator: designator}\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"failed to request airline\")\n\t}\n\tif resp.Airline == nil {\n\t\treturn nil, nil\n\t}\n\tcacheDesignator := key\n\tif resp.Airline.Designator != nil {\n\t\tcacheDesignator = strings.ToUpper(strings.TrimSpace(*resp.Airline.Designator))\n\t}\n\tairline := &core.Airline{\n\t\tID:             resp.Airline.Id,\n\t\tDesignator:     cacheDesignator,\n\t\tIATA:   "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package adapter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n//go:generate mockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\ntype AirportsCache interface {\n\tGet(ctx context.Context, key string) (core.Airport, error)\n\tSet(ctx context.Context, key string, airport core.Airport) error\n}\n", "n_tokens": 202, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 25], "def_symbols": [], "symbols": ["package", "adapter", "import", "context", "fmt", "impalastudios", "com", "log", "uber", "org", "zap", "strings", "github", "cockroachdb", "errors", "aviation", "liveflights", "internal", "core", "pkg", "grpc", "airports", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "generate", "mockgen", "source", "airports_grpc_client", "destination", "mocks", "airports_grpc_client_grpc_client_mocks", "type", "AirportsCache", "interface", "Get", "ctx", "Context", "key", "string", "Airport", "error", "Set", "airport"], "doc_head": "package adapter\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n//go:generate mockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\ntype AirportsCache interface {\n\tGet(ctx context.Context, key string) (core.Airport, error)\n\tSet(ctx context.Context, key string, airport core.Airport) error\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 35, "text": "type AirportsGrpcClient struct {\n\tclient      v0.AirportsServiceClient\n\tcache       AirportsCache\n\tsearchLimit int\n}\n\nfunc NewAirportsGrpcClient(client v0.AirportsServiceClient, cache AirportsCache, searchLimit int) *AirportsGrpcClient {\n\treturn &AirportsGrpcClient{client: client, cache: cache, searchLimit: searchLimit}\n}\n", "n_tokens": 84, "primary_symbol": "NewAirportsGrpcClient", "primary_kind": "function", "primary_span": [32, 35], "def_symbols": ["NewAirportsGrpcClient"], "symbols": ["NewAirportsGrpcClient", "type", "AirportsGrpcClient", "struct", "client", "AirportsServiceClient", "cache", "AirportsCache", "searchLimit", "int", "func", "return"], "doc_head": "type AirportsGrpcClient struct {\n\tclient      v0.AirportsServiceClient\n\tcache       AirportsCache\n\tsearchLimit int\n}\nfunc NewAirportsGrpcClient(client v0.AirportsServiceClient, cache AirportsCache, searchLimit int) *AirportsGrpcClient {\n\treturn &AirportsGrpcClient{client: client, cache: cache, searchLimit: searchLimit}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 36, "end_line": 85, "text": "func (c *AirportsGrpcClient) GetByICAOOrIATA(ctx context.Context, icao, iata *string) (*core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsGrpcClient:GetByICAOOrIATA\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"icao\", str(icao)),\n\t\tattribute.String(\"iata\", str(iata)),\n\t)\n\n\tvar icaoCode, iataCode string\n\tif icao != nil {\n\t\ticaoCode = strings.ToUpper(strings.TrimSpace(*icao))\n\t}\n\tif iata != nil {\n\t\tiataCode = strings.ToUpper(strings.TrimSpace(*iata))\n\t}\n\tcompositeKey := fmt.Sprintf(\"%s:%s\", icaoCode, iataCode)\n\n\tif a, err := c.cache.Get(ctx, compositeKey); err == nil {\n\t\treturn &a, nil\n\t} else if !errors.Is(err, core.ErrCacheMiss) {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t}\n\n\tvar airportsList []*v0.Airport\n\tif icaoCode != \"\" {\n\t\tresp, err := c.client.Search(ctx, &v0.SearchAirportsRequest{Q: icaoCode, Limit: uint32(c.searchLimit)})\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\tlog.Debug(ctx, \"ICAO search failed\", zap.Error(err))\n\t\t}\n\t\tairportsList = append(airportsList, resp.Result...)\n\t}\n\tif iataCode != \"\" {\n\t\tresp, err := c.client.Search(ctx, &v0.SearchAirportsRequest{Q: iataCode, Limit: uint32(c.searchLimit)})\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\tlog.Debug(ctx, \"ICAO search failed\", zap.Error(err))\n\t\t}\n\t\tairportsList = append(airportsList, resp.Result...)\n\t}\n\n\tvar bestBoth, bestIATA, bestICAO *core.Airport", "n_tokens": 473, "primary_symbol": "GetByICAOOrIATA", "primary_kind": "function", "primary_span": [36, 85], "def_symbols": ["GetByICAOOrIATA"], "symbols": ["GetByICAOOrIATA", "func", "AirportsGrpcClient", "ctx", "context", "Context", "icao", "iata", "string", "core", "Airport", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "str", "var", "icaoCode", "iataCode", "nil", "strings", "ToUpper", "TrimSpace", "compositeKey", "fmt", "Sprintf", "err", "cache", "Get", "return", "else", "errors", "ErrCacheMiss", "RecordError", "SetStatus", "codes", "Error", "log", "Warn", "Cache", "failure", "zap", "airportsList", "resp", "client", "Search", "SearchAirportsRequest", "Limit", "uint32", "searchLimit", "Debug", "ICAO", "search", "failed", "append", "Result", "bestBoth", "bestIATA", "bestICAO"], "doc_head": "func (c *AirportsGrpcClient) GetByICAOOrIATA(ctx context.Context, icao, iata *string) (*core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsGrpcClient:GetByICAOOrIATA\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"icao\", str(icao)),\n\t\tattribute.String(\"iata\", str(iata)),\n\t)\n\tvar icaoCode, iataCode string\n\tif icao != nil {\n\t\ticaoCode = strings.ToUpper(strings.TrimSpace(*icao))\n\t}\n\tif iata != nil {\n\t\tiataCode = strings.ToUpper(strings.TrimSpace(*iata))\n\t}\n\tcompositeKey := fmt.Sprintf(\"%s:%s\", icaoCode, iataCode)\n\tif a, err := c.cache.Get(ctx, compositeKey); err == nil {\n\t\treturn &a, nil\n\t} else if !errors.Is(err, core.ErrCacheMiss) {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t}\n\tvar airportsList []*v0.Airport\n\tif icaoCode != \"\" {\n\t\tresp, err := c.client.Search(ctx, &v0.SearchAirportsRequest{Q: icaoCode, Limit: uint32(c.searchLimit)})\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\tlog.Debug(ctx, \"ICAO search failed\", zap.Error(err))\n\t\t}\n\t\tairportsList = append(airportsList, resp.Result...)\n\t}\n\tif "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 86, "end_line": 109, "text": "\tseen := make(map[string]struct{})\n\n\tfor _, airportResult := range airportsList {\n\t\tif airportResult.Designator == nil {\n\t\t\tcontinue\n\t\t}\n\t\ta := &core.Airport{\n\t\t\tID:             airportResult.Id,\n\t\t\tDesignator:     *airportResult.Designator,\n\t\t\tIATA:           airportResult.Iata,\n\t\t\tICAO:           airportResult.Icao,\n\t\t\tClassification: airportResult.Classification,\n\t\t}\n\t\tvar dbICAO, dbIATA string\n\t\tif a.ICAO != nil {\n\t\t\tdbICAO = strings.ToUpper(strings.TrimSpace(*a.ICAO))\n\t\t}\n\t\tif a.IATA != nil {\n\t\t\tdbIATA = strings.ToUpper(strings.TrimSpace(*a.IATA))\n\t\t}\n\t\tkey := fmt.Sprintf(\"%s:%s\", dbICAO, dbIATA)\n\t\tif _, exists := seen[key]; exists {\n\t\t\tcontinue\n\t\t}", "n_tokens": 191, "primary_symbol": "", "primary_kind": "", "primary_span": [86, 109], "def_symbols": [], "symbols": ["seen", "make", "map", "string", "struct", "for", "airportResult", "range", "airportsList", "Designator", "nil", "continue", "core", "Airport", "IATA", "Iata", "ICAO", "Icao", "Classification", "var", "dbICAO", "dbIATA", "strings", "ToUpper", "TrimSpace", "key", "fmt", "Sprintf", "exists"], "doc_head": "\tseen := make(map[string]struct{})\n\tfor _, airportResult := range airportsList {\n\t\tif airportResult.Designator == nil {\n\t\t\tcontinue\n\t\t}\n\t\ta := &core.Airport{\n\t\t\tID:             airportResult.Id,\n\t\t\tDesignator:     *airportResult.Designator,\n\t\t\tIATA:           airportResult.Iata,\n\t\t\tICAO:           airportResult.Icao,\n\t\t\tClassification: airportResult.Classification,\n\t\t}\n\t\tvar dbICAO, dbIATA string\n\t\tif a.ICAO != nil {\n\t\t\tdbICAO = strings.ToUpper(strings.TrimSpace(*a.ICAO))\n\t\t}\n\t\tif a.IATA != nil {\n\t\t\tdbIATA = strings.ToUpper(strings.TrimSpace(*a.IATA))\n\t\t}\n\t\tkey := fmt.Sprintf(\"%s:%s\", dbICAO, dbIATA)\n\t\tif _, exists := seen[key]; exists {\n\t\t\tcontinue\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 110, "end_line": 140, "text": "\t\tseen[key] = struct{}{}\n\t\t_ = c.cache.Set(ctx, key, *a)\n\n\t\tbothMatch := icaoCode != \"\" && iataCode != \"\" && dbICAO == icaoCode && dbIATA == iataCode\n\t\tiataMatch := iataCode != \"\" && dbIATA == iataCode\n\t\ticaoMatch := icaoCode != \"\" && dbICAO == icaoCode\n\n\t\tif bothMatch {\n\t\t\tbestBoth = a\n\t\t\tbreak\n\t\t}\n\t\tif bestIATA == nil && iataMatch {\n\t\t\tbestIATA = a\n\t\t}\n\t\tif bestICAO == nil && icaoMatch {\n\t\t\tbestICAO = a\n\t\t}\n\t}\n\n\tif bestBoth != nil {\n\t\treturn bestBoth, nil\n\t}\n\tif bestIATA != nil {\n\t\treturn bestIATA, nil\n\t}\n\tif bestICAO != nil {\n\t\treturn bestICAO, nil\n\t}\n\treturn nil, nil\n}\n", "n_tokens": 212, "primary_symbol": "", "primary_kind": "", "primary_span": [110, 140], "def_symbols": [], "symbols": ["seen", "key", "struct", "cache", "Set", "ctx", "bothMatch", "icaoCode", "iataCode", "dbICAO", "dbIATA", "iataMatch", "icaoMatch", "bestBoth", "break", "bestIATA", "nil", "bestICAO", "return"], "doc_head": "\t\tseen[key] = struct{}{}\n\t\t_ = c.cache.Set(ctx, key, *a)\n\t\tbothMatch := icaoCode != \"\" && iataCode != \"\" && dbICAO == icaoCode && dbIATA == iataCode\n\t\tiataMatch := iataCode != \"\" && dbIATA == iataCode\n\t\ticaoMatch := icaoCode != \"\" && dbICAO == icaoCode\n\t\tif bothMatch {\n\t\t\tbestBoth = a\n\t\t\tbreak\n\t\t}\n\t\tif bestIATA == nil && iataMatch {\n\t\t\tbestIATA = a\n\t\t}\n\t\tif bestICAO == nil && icaoMatch {\n\t\t\tbestICAO = a\n\t\t}\n\t}\n\tif bestBoth != nil {\n\t\treturn bestBoth, nil\n\t}\n\tif bestIATA != nil {\n\t\treturn bestIATA, nil\n\t}\n\tif bestICAO != nil {\n\t\treturn bestICAO, nil\n\t}\n\treturn nil, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 141, "end_line": 147, "text": "func str(s *string) string {\n\tif s != nil {\n\t\treturn *s\n\t}\n\treturn \"\"\n}\n", "n_tokens": 23, "primary_symbol": "str", "primary_kind": "function", "primary_span": [141, 147], "def_symbols": ["str"], "symbols": ["str", "func", "string", "nil", "return"], "doc_head": "func str(s *string) string {\n\tif s != nil {\n\t\treturn *s\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airlines_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockAirlinesCache is a mock of AirlinesCache interface.\ntype MockAirlinesCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirlinesCacheMockRecorder\n\tisgomock struct{}\n}\n\n// MockAirlinesCacheMockRecorder is the mock recorder for MockAirlinesCache.\ntype MockAirlinesCacheMockRecorder struct {\n\tmock *MockAirlinesCache\n}\n", "n_tokens": 193, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "airlines_grpc_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "airlines_grpc_client_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "MockAirlinesCache", "AirlinesCache", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockAirlinesCacheMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airlines_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockAirlinesCache is a mock of AirlinesCache interface.\ntype MockAirlinesCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirlinesCacheMockRecorder\n\tisgomock struct{}\n}\n// MockAirlinesCacheMockRecorder is the mock recorder for MockAirlinesCache.\ntype MockAirlinesCacheMockRecorder struct {\n\tmock *MockAirlinesCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "// NewMockAirlinesCache creates a new mock instance.\nfunc NewMockAirlinesCache(ctrl *gomock.Controller) *MockAirlinesCache {\n\tmock := &MockAirlinesCache{ctrl: ctrl}\n\tmock.recorder = &MockAirlinesCacheMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirlinesCache) EXPECT() *MockAirlinesCacheMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockAirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, designator)\n\tret0, _ := ret[0].(core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 187, "primary_symbol": "NewMockAirlinesCache", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["NewMockAirlinesCache", "EXPECT", "Get"], "symbols": ["NewMockAirlinesCache", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockAirlinesCache", "recorder", "MockAirlinesCacheMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockAirlinesCache creates a new mock instance.\nfunc NewMockAirlinesCache(ctrl *gomock.Controller) *MockAirlinesCache {\n\tmock := &MockAirlinesCache{ctrl: ctrl}\n\tmock.recorder = &MockAirlinesCacheMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirlinesCache) EXPECT() *MockAirlinesCacheMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockAirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, designator)\n\tret0, _ := ret[0].(core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 66, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockAirlinesCacheMockRecorder) Get(ctx, designator any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirlinesCache)(nil).Get), ctx, designator)\n}\n\n// Set mocks base method.\nfunc (m *MockAirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, designator, airline)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 144, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [54, 66], "def_symbols": ["Get", "Set"], "symbols": ["Get", "Set", "indicates", "expected", "call", "func", "MockAirlinesCacheMockRecorder", "ctx", "designator", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirlinesCache", "nil", "mocks", "base", "method", "context", "Context", "string", "airline", "core", "Airline", "error", "ret", "ret0"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockAirlinesCacheMockRecorder) Get(ctx, designator any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirlinesCache)(nil).Get), ctx, designator)\n}\n// Set mocks base method.\nfunc (m *MockAirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, designator, airline)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 72, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockAirlinesCacheMockRecorder) Set(ctx, designator, airline any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirlinesCache)(nil).Set), ctx, designator, airline)\n}\n", "n_tokens": 77, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [68, 72], "def_symbols": ["Set"], "symbols": ["Set", "indicates", "expected", "call", "func", "MockAirlinesCacheMockRecorder", "ctx", "designator", "airline", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirlinesCache", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockAirlinesCacheMockRecorder) Set(ctx, designator, airline any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirlinesCache)(nil).Set), ctx, designator, airline)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airports_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockAirportsCache is a mock of AirportsCache interface.\ntype MockAirportsCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirportsCacheMockRecorder\n\tisgomock struct{}\n}\n\n// MockAirportsCacheMockRecorder is the mock recorder for MockAirportsCache.\ntype MockAirportsCacheMockRecorder struct {\n\tmock *MockAirportsCache\n}\n", "n_tokens": 197, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "airports_grpc_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "airports_grpc_client_grpc_client_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "MockAirportsCache", "AirportsCache", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockAirportsCacheMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airports_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockAirportsCache is a mock of AirportsCache interface.\ntype MockAirportsCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirportsCacheMockRecorder\n\tisgomock struct{}\n}\n// MockAirportsCacheMockRecorder is the mock recorder for MockAirportsCache.\ntype MockAirportsCacheMockRecorder struct {\n\tmock *MockAirportsCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "// NewMockAirportsCache creates a new mock instance.\nfunc NewMockAirportsCache(ctrl *gomock.Controller) *MockAirportsCache {\n\tmock := &MockAirportsCache{ctrl: ctrl}\n\tmock.recorder = &MockAirportsCacheMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirportsCache) EXPECT() *MockAirportsCacheMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockAirportsCache) Get(ctx context.Context, key string) (core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, key)\n\tret0, _ := ret[0].(core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 185, "primary_symbol": "NewMockAirportsCache", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["NewMockAirportsCache", "EXPECT", "Get"], "symbols": ["NewMockAirportsCache", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockAirportsCache", "recorder", "MockAirportsCacheMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "ctx", "context", "Context", "key", "string", "core", "Airport", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockAirportsCache creates a new mock instance.\nfunc NewMockAirportsCache(ctrl *gomock.Controller) *MockAirportsCache {\n\tmock := &MockAirportsCache{ctrl: ctrl}\n\tmock.recorder = &MockAirportsCacheMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirportsCache) EXPECT() *MockAirportsCacheMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockAirportsCache) Get(ctx context.Context, key string) (core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, key)\n\tret0, _ := ret[0].(core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 66, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockAirportsCacheMockRecorder) Get(ctx, key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirportsCache)(nil).Get), ctx, key)\n}\n\n// Set mocks base method.\nfunc (m *MockAirportsCache) Set(ctx context.Context, key string, airport core.Airport) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, key, airport)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 140, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [54, 66], "def_symbols": ["Get", "Set"], "symbols": ["Get", "Set", "indicates", "expected", "call", "func", "MockAirportsCacheMockRecorder", "ctx", "key", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirportsCache", "nil", "mocks", "base", "method", "context", "Context", "string", "airport", "core", "Airport", "error", "ret", "ret0"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockAirportsCacheMockRecorder) Get(ctx, key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirportsCache)(nil).Get), ctx, key)\n}\n// Set mocks base method.\nfunc (m *MockAirportsCache) Set(ctx context.Context, key string, airport core.Airport) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, key, airport)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 72, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockAirportsCacheMockRecorder) Set(ctx, key, airport any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirportsCache)(nil).Set), ctx, key, airport)\n}\n", "n_tokens": 75, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [68, 72], "def_symbols": ["Set"], "symbols": ["Set", "indicates", "expected", "call", "func", "MockAirportsCacheMockRecorder", "ctx", "key", "airport", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirportsCache", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockAirportsCacheMockRecorder) Set(ctx, key, airport any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirportsCache)(nil).Set), ctx, key, airport)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package cache\n\nimport \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\ntype airline struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}\n\ntype airport struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}\n", "n_tokens": 140, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 20], "def_symbols": [], "symbols": ["package", "cache", "import", "impalastudios", "com", "aviation", "liveflights", "internal", "core", "type", "airline", "struct", "string", "json", "Designator", "designator", "ICAO", "icao", "omitempty", "IATA", "iata", "Classification", "int64", "classification", "airport"], "doc_head": "package cache\nimport \"go.impalastudios.com/aviation/liveflights/internal/core\"\ntype airline struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}\ntype airport struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 21, "end_line": 50, "text": "func airlineFromDomain(a core.Airline) airline {\n\treturn airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n\nfunc (a airline) toDomain() core.Airline {\n\treturn core.Airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n\nfunc airportFromDomain(a core.Airport) airport {\n\treturn airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n", "n_tokens": 190, "primary_symbol": "airlineFromDomain", "primary_kind": "function", "primary_span": [21, 50], "def_symbols": ["airlineFromDomain", "toDomain", "airportFromDomain"], "symbols": ["airlineFromDomain", "toDomain", "airportFromDomain", "func", "core", "Airline", "airline", "return", "Designator", "ICAO", "IATA", "Classification", "Airport", "airport"], "doc_head": "func airlineFromDomain(a core.Airline) airline {\n\treturn airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\nfunc (a airline) toDomain() core.Airline {\n\treturn core.Airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\nfunc airportFromDomain(a core.Airport) airport {\n\treturn airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 51, "end_line": 60, "text": "func (a airport) toDomain() core.Airport {\n\treturn core.Airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n", "n_tokens": 66, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [51, 60], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "airport", "core", "Airport", "return", "Designator", "ICAO", "IATA", "Classification"], "doc_head": "func (a airport) toDomain() core.Airport {\n\treturn core.Airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package cache\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)\n\ntype AirlinesCache struct {\n\tclient client\n\tttl    time.Duration\n}\n\nfunc NewAirlinesCache(client client, ttl time.Duration) *AirlinesCache {\n\treturn &AirlinesCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}\n", "n_tokens": 145, "primary_symbol": "NewAirlinesCache", "primary_kind": "function", "primary_span": [21, 27], "def_symbols": ["NewAirlinesCache"], "symbols": ["NewAirlinesCache", "package", "cache", "import", "context", "fmt", "github", "com", "redis", "pkg", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "time", "type", "AirlinesCache", "struct", "client", "ttl", "Duration", "func", "return"], "doc_head": "package cache\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)\ntype AirlinesCache struct {\n\tclient client\n\tttl    time.Duration\n}\nfunc NewAirlinesCache(client client, ttl time.Duration) *AirlinesCache {\n\treturn &AirlinesCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 50, "text": "func (c *AirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\n\tvar item airline\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airline{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airline{}, errors.Wrap(err, \"failed to get airline from cache\")\n\t}\n\n\treturn item.toDomain(), nil\n}\n", "n_tokens": 178, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [28, 50], "def_symbols": ["Get"], "symbols": ["Get", "func", "AirlinesCache", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "key", "fmt", "Sprintf", "airlines", "var", "item", "airline", "err", "client", "nil", "RecordError", "SetStatus", "codes", "Error", "errors", "cache", "ErrCacheMiss", "return", "Wrap", "failed", "get", "from", "toDomain"], "doc_head": "func (c *AirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\tvar item airline\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airline{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airline{}, errors.Wrap(err, \"failed to get airline from cache\")\n\t}\n\treturn item.toDomain(), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 51, "end_line": 69, "text": "func (c *AirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t\tattribute.String(\"cache_ttl\", c.ttl.String()),\n\t)\n\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airlineFromDomain(airline),\n\t\tTTL:   c.ttl,\n\t})\n}\n", "n_tokens": 142, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [51, 69], "def_symbols": ["Set"], "symbols": ["Set", "func", "AirlinesCache", "ctx", "context", "Context", "designator", "string", "airline", "core", "Airline", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "cache_ttl", "ttl", "key", "fmt", "Sprintf", "airlines", "return", "client", "cache", "Item", "Ctx", "Key", "Value", "airlineFromDomain", "TTL"], "doc_head": "func (c *AirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t\tattribute.String(\"cache_ttl\", c.ttl.String()),\n\t)\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airlineFromDomain(airline),\n\t\tTTL:   c.ttl,\n\t})\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package cache\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)\n\ntype AirportsCache struct {\n\tclient client\n\tttl    time.Duration\n}\n\nfunc NewAirportsCache(client client, ttl time.Duration) *AirportsCache {\n\treturn &AirportsCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}\n", "n_tokens": 146, "primary_symbol": "NewAirportsCache", "primary_kind": "function", "primary_span": [21, 27], "def_symbols": ["NewAirportsCache"], "symbols": ["NewAirportsCache", "package", "cache", "import", "context", "fmt", "github", "com", "redis", "pkg", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "time", "type", "AirportsCache", "struct", "client", "ttl", "Duration", "func", "return"], "doc_head": "package cache\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)\ntype AirportsCache struct {\n\tclient client\n\tttl    time.Duration\n}\nfunc NewAirportsCache(client client, ttl time.Duration) *AirportsCache {\n\treturn &AirportsCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 50, "text": "func (c *AirportsCache) Get(ctx context.Context, designator string) (core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\n\tvar item airport\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airport{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airport{}, errors.Wrap(err, \"failed to get airport from cache\")\n\t}\n\n\treturn item.toDomain(), nil\n}\n", "n_tokens": 178, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [28, 50], "def_symbols": ["Get"], "symbols": ["Get", "func", "AirportsCache", "ctx", "context", "Context", "designator", "string", "core", "Airport", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "key", "fmt", "Sprintf", "airports", "var", "item", "airport", "err", "client", "nil", "RecordError", "SetStatus", "codes", "Error", "errors", "cache", "ErrCacheMiss", "return", "Wrap", "failed", "get", "from", "toDomain"], "doc_head": "func (c *AirportsCache) Get(ctx context.Context, designator string) (core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\tvar item airport\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airport{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airport{}, errors.Wrap(err, \"failed to get airport from cache\")\n\t}\n\treturn item.toDomain(), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 51, "end_line": 67, "text": "func (c *AirportsCache) Set(ctx context.Context, designator string, airport core.Airport) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tspan.SetAttributes(attribute.String(\"cache_ttl\", c.ttl.String()))\n\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airportFromDomain(airport),\n\t\tTTL:   c.ttl,\n\t})\n}\n", "n_tokens": 138, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [51, 67], "def_symbols": ["Set"], "symbols": ["Set", "func", "AirportsCache", "ctx", "context", "Context", "designator", "string", "airport", "core", "Airport", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "cache_ttl", "ttl", "key", "fmt", "Sprintf", "airports", "return", "client", "cache", "Item", "Ctx", "Key", "Value", "airportFromDomain", "TTL"], "doc_head": "func (c *AirportsCache) Set(ctx context.Context, designator string, airport core.Airport) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tspan.SetAttributes(attribute.String(\"cache_ttl\", c.ttl.String()))\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airportFromDomain(airport),\n\t\tTTL:   c.ttl,\n\t})\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go", "rel_path": "internal/adapters/cache/redis_cache.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package cache\n\nimport (\n\t\"context\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/redis/go-redis/v9\"\n)\n\n//go:generate mockgen -source=redis_cache.go -destination=mocks/redis_cache_mocks.go -package=mocks\ntype client interface {\n\tSet(*cache.Item) error\n\tGet(context.Context, string, interface{}) error\n\tDelete(context.Context, string) error\n\tKeys(context.Context, string) *redis.StringSliceCmd\n\tPipelined(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)\n\tExists(context.Context, string) bool\n}\n", "n_tokens": 133, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 18], "def_symbols": [], "symbols": ["package", "cache", "import", "context", "github", "com", "redis", "generate", "mockgen", "source", "redis_cache", "destination", "mocks", "redis_cache_mocks", "type", "client", "interface", "Set", "Item", "error", "Get", "Context", "string", "Delete", "Keys", "StringSliceCmd", "Pipelined", "func", "Pipeliner", "Cmder", "Exists", "bool"], "doc_head": "package cache\nimport (\n\t\"context\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/redis/go-redis/v9\"\n)\n//go:generate mockgen -source=redis_cache.go -destination=mocks/redis_cache_mocks.go -package=mocks\ntype client interface {\n\tSet(*cache.Item) error\n\tGet(context.Context, string, interface{}) error\n\tDelete(context.Context, string) error\n\tKeys(context.Context, string) *redis.StringSliceCmd\n\tPipelined(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)\n\tExists(context.Context, string) bool\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: redis_cache.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=redis_cache.go -destination=mocks/redis_cache_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcache \"github.com/go-redis/cache/v9\"\n\tredis \"github.com/redis/go-redis/v9\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mockclient is a mock of client interface.\ntype Mockclient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockclientMockRecorder\n\tisgomock struct{}\n}\n\n// MockclientMockRecorder is the mock recorder for Mockclient.\ntype MockclientMockRecorder struct {\n\tmock *Mockclient\n}\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "redis_cache", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "redis_cache_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "cache", "github", "com", "redis", "gomock", "uber", "org", "mock", "Mockclient", "client", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockclientMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: redis_cache.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=redis_cache.go -destination=mocks/redis_cache_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcache \"github.com/go-redis/cache/v9\"\n\tredis \"github.com/redis/go-redis/v9\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mockclient is a mock of client interface.\ntype Mockclient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockclientMockRecorder\n\tisgomock struct{}\n}\n// MockclientMockRecorder is the mock recorder for Mockclient.\ntype MockclientMockRecorder struct {\n\tmock *Mockclient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 52, "text": "// NewMockclient creates a new mock instance.\nfunc NewMockclient(ctrl *gomock.Controller) *Mockclient {\n\tmock := &Mockclient{ctrl: ctrl}\n\tmock.recorder = &MockclientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockclient) EXPECT() *MockclientMockRecorder {\n\treturn m.recorder\n}\n\n// Delete mocks base method.\nfunc (m *Mockclient) Delete(arg0 context.Context, arg1 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 148, "primary_symbol": "NewMockclient", "primary_kind": "function", "primary_span": [34, 52], "def_symbols": ["NewMockclient", "EXPECT", "Delete"], "symbols": ["NewMockclient", "EXPECT", "Delete", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mockclient", "recorder", "MockclientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "string", "error", "Helper", "ret", "Call", "ret0"], "doc_head": "// NewMockclient creates a new mock instance.\nfunc NewMockclient(ctrl *gomock.Controller) *Mockclient {\n\tmock := &Mockclient{ctrl: ctrl}\n\tmock.recorder = &MockclientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockclient) EXPECT() *MockclientMockRecorder {\n\treturn m.recorder\n}\n// Delete mocks base method.\nfunc (m *Mockclient) Delete(arg0 context.Context, arg1 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 66, "text": "// Delete indicates an expected call of Delete.\nfunc (mr *MockclientMockRecorder) Delete(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockclient)(nil).Delete), arg0, arg1)\n}\n\n// Exists mocks base method.\nfunc (m *Mockclient) Exists(arg0 context.Context, arg1 string) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Exists\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}\n", "n_tokens": 134, "primary_symbol": "Delete", "primary_kind": "function", "primary_span": [54, 66], "def_symbols": ["Delete", "Exists"], "symbols": ["Delete", "Exists", "indicates", "expected", "call", "func", "MockclientMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockclient", "nil", "mocks", "base", "method", "context", "Context", "string", "bool", "ret", "ret0"], "doc_head": "// Delete indicates an expected call of Delete.\nfunc (mr *MockclientMockRecorder) Delete(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockclient)(nil).Delete), arg0, arg1)\n}\n// Exists mocks base method.\nfunc (m *Mockclient) Exists(arg0 context.Context, arg1 string) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Exists\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 80, "text": "// Exists indicates an expected call of Exists.\nfunc (mr *MockclientMockRecorder) Exists(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Exists\", reflect.TypeOf((*Mockclient)(nil).Exists), arg0, arg1)\n}\n\n// Get mocks base method.\nfunc (m *Mockclient) Get(arg0 context.Context, arg1 string, arg2 any) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 141, "primary_symbol": "Exists", "primary_kind": "function", "primary_span": [68, 80], "def_symbols": ["Exists", "Get"], "symbols": ["Exists", "Get", "indicates", "expected", "call", "func", "MockclientMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockclient", "nil", "mocks", "base", "method", "context", "Context", "string", "arg2", "error", "ret", "ret0"], "doc_head": "// Exists indicates an expected call of Exists.\nfunc (mr *MockclientMockRecorder) Exists(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Exists\", reflect.TypeOf((*Mockclient)(nil).Exists), arg0, arg1)\n}\n// Get mocks base method.\nfunc (m *Mockclient) Get(arg0 context.Context, arg1 string, arg2 any) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 81, "end_line": 94, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockclientMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockclient)(nil).Get), arg0, arg1, arg2)\n}\n\n// Keys mocks base method.\nfunc (m *Mockclient) Keys(arg0 context.Context, arg1 string) *redis.StringSliceCmd {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Keys\", arg0, arg1)\n\tret0, _ := ret[0].(*redis.StringSliceCmd)\n\treturn ret0\n}\n", "n_tokens": 147, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [82, 94], "def_symbols": ["Get", "Keys"], "symbols": ["Get", "Keys", "indicates", "expected", "call", "func", "MockclientMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockclient", "nil", "mocks", "base", "method", "context", "Context", "string", "redis", "StringSliceCmd", "ret", "ret0"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockclientMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockclient)(nil).Get), arg0, arg1, arg2)\n}\n// Keys mocks base method.\nfunc (m *Mockclient) Keys(arg0 context.Context, arg1 string) *redis.StringSliceCmd {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Keys\", arg0, arg1)\n\tret0, _ := ret[0].(*redis.StringSliceCmd)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 95, "end_line": 109, "text": "// Keys indicates an expected call of Keys.\nfunc (mr *MockclientMockRecorder) Keys(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Keys\", reflect.TypeOf((*Mockclient)(nil).Keys), arg0, arg1)\n}\n\n// Pipelined mocks base method.\nfunc (m *Mockclient) Pipelined(arg0 context.Context, arg1 func(redis.Pipeliner) error) ([]redis.Cmder, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Pipelined\", arg0, arg1)\n\tret0, _ := ret[0].([]redis.Cmder)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 171, "primary_symbol": "Keys", "primary_kind": "function", "primary_span": [96, 109], "def_symbols": ["Keys", "Pipelined"], "symbols": ["Keys", "Pipelined", "indicates", "expected", "call", "func", "MockclientMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockclient", "nil", "mocks", "base", "method", "context", "Context", "redis", "Pipeliner", "error", "Cmder", "ret", "ret0", "ret1"], "doc_head": "// Keys indicates an expected call of Keys.\nfunc (mr *MockclientMockRecorder) Keys(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Keys\", reflect.TypeOf((*Mockclient)(nil).Keys), arg0, arg1)\n}\n// Pipelined mocks base method.\nfunc (m *Mockclient) Pipelined(arg0 context.Context, arg1 func(redis.Pipeliner) error) ([]redis.Cmder, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Pipelined\", arg0, arg1)\n\tret0, _ := ret[0].([]redis.Cmder)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 110, "end_line": 123, "text": "// Pipelined indicates an expected call of Pipelined.\nfunc (mr *MockclientMockRecorder) Pipelined(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Pipelined\", reflect.TypeOf((*Mockclient)(nil).Pipelined), arg0, arg1)\n}\n\n// Set mocks base method.\nfunc (m *Mockclient) Set(arg0 *cache.Item) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 138, "primary_symbol": "Pipelined", "primary_kind": "function", "primary_span": [111, 123], "def_symbols": ["Pipelined", "Set"], "symbols": ["Pipelined", "Set", "indicates", "expected", "call", "func", "MockclientMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockclient", "nil", "mocks", "base", "method", "cache", "Item", "error", "ret", "ret0"], "doc_head": "// Pipelined indicates an expected call of Pipelined.\nfunc (mr *MockclientMockRecorder) Pipelined(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Pipelined\", reflect.TypeOf((*Mockclient)(nil).Pipelined), arg0, arg1)\n}\n// Set mocks base method.\nfunc (m *Mockclient) Set(arg0 *cache.Item) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/mocks/redis_cache_mocks.go", "rel_path": "internal/adapters/cache/mocks/redis_cache_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 124, "end_line": 129, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockclientMockRecorder) Set(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockclient)(nil).Set), arg0)\n}\n", "n_tokens": 65, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [125, 129], "def_symbols": ["Set"], "symbols": ["Set", "indicates", "expected", "call", "func", "MockclientMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockclient", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockclientMockRecorder) Set(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockclient)(nil).Set), arg0)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go", "rel_path": "internal/adapters/filesystem/s3.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package filesystem\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"regexp\"\n\t\"strings\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n", "n_tokens": 128, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 21], "def_symbols": [], "symbols": ["package", "filesystem", "import", "bytes", "context", "encoding", "json", "fmt", "github", "com", "aws", "sdk", "service", "impalastudios", "aviation", "liveflights", "internal", "core", "log", "uber", "org", "zap", "regexp", "strings", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace"], "doc_head": "package filesystem\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"regexp\"\n\t\"strings\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go", "rel_path": "internal/adapters/filesystem/s3.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 36, "text": "//go:generate mockgen -source=s3.go -destination=mocks/s3_mocks.go -package=mocks\ntype s3Client interface {\n\tPutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)\n\tGetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)\n}\n\ntype S3Filesystem struct {\n\tbucket string\n\tclient s3Client\n}\n\nfunc NewS3Filesystem(bucket string, client s3Client) *S3Filesystem {\n\treturn &S3Filesystem{bucket: bucket, client: client}\n}\n", "n_tokens": 152, "primary_symbol": "NewS3Filesystem", "primary_kind": "function", "primary_span": [33, 36], "def_symbols": ["NewS3Filesystem"], "symbols": ["NewS3Filesystem", "generate", "mockgen", "source", "destination", "mocks", "s3_mocks", "package", "type", "s3Client", "interface", "PutObject", "ctx", "context", "Context", "params", "PutObjectInput", "optFns", "func", "Options", "PutObjectOutput", "error", "GetObject", "GetObjectInput", "GetObjectOutput", "S3Filesystem", "struct", "bucket", "string", "client", "return"], "doc_head": "//go:generate mockgen -source=s3.go -destination=mocks/s3_mocks.go -package=mocks\ntype s3Client interface {\n\tPutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)\n\tGetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)\n}\ntype S3Filesystem struct {\n\tbucket string\n\tclient s3Client\n}\nfunc NewS3Filesystem(bucket string, client s3Client) *S3Filesystem {\n\treturn &S3Filesystem{bucket: bucket, client: client}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go", "rel_path": "internal/adapters/filesystem/s3.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 37, "end_line": 86, "text": "func (fs *S3Filesystem) GetLiveFlight(ctx context.Context, flightID string) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"S3Filesystem:GetLiveFlight\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"flight_id\", flightID),\n\t)\n\n\tkey := fs.buildS3Key(flightID)\n\tresp, err := fs.client.GetObject(ctx, &s3.GetObjectInput{\n\t\tBucket: aws.String(fs.bucket),\n\t\tKey:    aws.String(key),\n\t})\n\tif err != nil {\n\t\tif isNotFoundErr(err) {\n\t\t\tlog.Debug(ctx, \"LiveFlight object not found in S3\",\n\t\t\t\tzap.String(\"flight_id\", flightID),\n\t\t\t\tzap.String(\"bucket\", fs.bucket),\n\t\t\t\tzap.String(\"key\", key),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\n\t\t\treturn nil, core.ErrFlightNotFound\n\t\t}\n\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tlog.Error(ctx, \"Failed to get LiveFlight object from S3\",\n\t\t\tzap.String(\"flight_id\", flightID),\n\t\t\tzap.String(\"bucket\", fs.bucket),\n\t\t\tzap.String(\"key\", key),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, err\n\t}\n\tdefer func() {\n\t\t_ = resp.Body.Close()\n\t}()\n\n\tvar f core.LiveFlight\n\tif err := json.NewDecoder(resp.Body).Decode(&f); err != nil {\n\t\tlog.Error(ctx, \"Failed to decode LiveFlight JSON\", zap.Error(err))\n\t\treturn nil, err\n\t}\n\treturn &f, nil\n}\n\nvar safeIDChars = regexp.MustCompile(`[^a-zA-Z0-9]+`)\n", "n_tokens": 371, "primary_symbol": "GetLiveFlight", "primary_kind": "function", "primary_span": [37, 86], "def_symbols": ["GetLiveFlight"], "symbols": ["GetLiveFlight", "func", "S3Filesystem", "ctx", "context", "Context", "flightID", "string", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "flight_id", "key", "buildS3Key", "resp", "err", "client", "GetObject", "GetObjectInput", "Bucket", "aws", "bucket", "Key", "nil", "isNotFoundErr", "log", "Debug", "object", "not", "found", "zap", "Error", "return", "ErrFlightNotFound", "RecordError", "SetStatus", "codes", "Failed", "get", "from", "Body", "Close", "var", "json", "NewDecoder", "Decode", "decode", "JSON", "safeIDChars", "regexp", "MustCompile"], "doc_head": "func (fs *S3Filesystem) GetLiveFlight(ctx context.Context, flightID string) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"S3Filesystem:GetLiveFlight\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"flight_id\", flightID),\n\t)\n\tkey := fs.buildS3Key(flightID)\n\tresp, err := fs.client.GetObject(ctx, &s3.GetObjectInput{\n\t\tBucket: aws.String(fs.bucket),\n\t\tKey:    aws.String(key),\n\t})\n\tif err != nil {\n\t\tif isNotFoundErr(err) {\n\t\t\tlog.Debug(ctx, \"LiveFlight object not found in S3\",\n\t\t\t\tzap.String(\"flight_id\", flightID),\n\t\t\t\tzap.String(\"bucket\", fs.bucket),\n\t\t\t\tzap.String(\"key\", key),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t\treturn nil, core.ErrFlightNotFound\n\t\t}\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tlog.Error(ctx, \"Failed to get LiveFlight object from S3\",\n\t\t\tzap.String(\"flight_id\", flightID),\n\t\t\tzap.String(\"bucket\", fs.bucket),\n\t\t\tzap.String(\"key\", key),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, err\n\t}\n\tdefer func() {\n\t\t_ = resp.Body.Close()\n\t}()\n\tvar f core.LiveFlight\n\tif err := json.NewDecoder(resp.Body).Decode(&f); err != nil {\n\t\tlog.Error(ctx, \"Failed to decode LiveFlight JSON\", zap.Error(err))\n\t\tret"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go", "rel_path": "internal/adapters/filesystem/s3.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 87, "end_line": 100, "text": "func (fs *S3Filesystem) buildS3Key(flightID string) string {\n\tsafeID := safeIDChars.ReplaceAllString(flightID, \"\")\n\n\tprefix := \"xxx\"\n\tif len(safeID) >= 3 {\n\t\tprefix = safeID[len(safeID)-3:]\n\t}\n\treturn fmt.Sprintf(\"live-flights/%s/%s.json\", prefix, flightID)\n}\n\nfunc isNotFoundErr(err error) bool {\n\treturn strings.Contains(err.Error(), \"NoSuchKey\")\n}\n", "n_tokens": 105, "primary_symbol": "buildS3Key", "primary_kind": "function", "primary_span": [87, 100], "def_symbols": ["buildS3Key", "isNotFoundErr"], "symbols": ["buildS3Key", "isNotFoundErr", "func", "S3Filesystem", "flightID", "string", "safeID", "safeIDChars", "ReplaceAllString", "prefix", "xxx", "len", "return", "fmt", "Sprintf", "live", "flights", "json", "err", "error", "bool", "strings", "Contains", "Error", "NoSuchKey"], "doc_head": "func (fs *S3Filesystem) buildS3Key(flightID string) string {\n\tsafeID := safeIDChars.ReplaceAllString(flightID, \"\")\n\tprefix := \"xxx\"\n\tif len(safeID) >= 3 {\n\t\tprefix = safeID[len(safeID)-3:]\n\t}\n\treturn fmt.Sprintf(\"live-flights/%s/%s.json\", prefix, flightID)\n}\nfunc isNotFoundErr(err error) bool {\n\treturn strings.Contains(err.Error(), \"NoSuchKey\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/s3.go", "rel_path": "internal/adapters/filesystem/s3.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 101, "end_line": 133, "text": "func (fs *S3Filesystem) SaveLiveFlight(ctx context.Context, flightID string, flight *core.LiveFlight) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"S3Filesystem:SaveLiveFlight\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"flight_id\", flightID),\n\t)\n\n\tkey := fs.buildS3Key(flightID)\n\tdata, err := json.Marshal(flight)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to marshal LiveFlight for S3\", zap.Error(err))\n\t\treturn err\n\t}\n\n\tinput := &s3.PutObjectInput{\n\t\tBucket:      aws.String(fs.bucket),\n\t\tKey:         aws.String(key),\n\t\tBody:        bytes.NewReader(data),\n\t\tContentType: aws.String(\"application/json\"),\n\t}\n\n\t_, err = fs.client.PutObject(ctx, input)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tlog.Error(ctx, \"Failed to upload LiveFlight data to S3\", zap.Error(err))\n\t\treturn err\n\t}\n\treturn nil\n}\n", "n_tokens": 244, "primary_symbol": "SaveLiveFlight", "primary_kind": "function", "primary_span": [101, 133], "def_symbols": ["SaveLiveFlight"], "symbols": ["SaveLiveFlight", "func", "S3Filesystem", "ctx", "context", "Context", "flightID", "string", "flight", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "flight_id", "key", "buildS3Key", "data", "err", "json", "Marshal", "nil", "log", "Error", "Failed", "marshal", "for", "zap", "return", "input", "PutObjectInput", "Bucket", "aws", "bucket", "Key", "Body", "bytes", "NewReader", "ContentType", "application", "client", "PutObject", "RecordError", "SetStatus", "codes", "upload"], "doc_head": "func (fs *S3Filesystem) SaveLiveFlight(ctx context.Context, flightID string, flight *core.LiveFlight) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"S3Filesystem:SaveLiveFlight\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"flight_id\", flightID),\n\t)\n\tkey := fs.buildS3Key(flightID)\n\tdata, err := json.Marshal(flight)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to marshal LiveFlight for S3\", zap.Error(err))\n\t\treturn err\n\t}\n\tinput := &s3.PutObjectInput{\n\t\tBucket:      aws.String(fs.bucket),\n\t\tKey:         aws.String(key),\n\t\tBody:        bytes.NewReader(data),\n\t\tContentType: aws.String(\"application/json\"),\n\t}\n\t_, err = fs.client.PutObject(ctx, input)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tlog.Error(ctx, \"Failed to upload LiveFlight data to S3\", zap.Error(err))\n\t\treturn err\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go", "rel_path": "internal/adapters/filesystem/mocks/s3_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: s3.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=s3.go -destination=mocks/s3_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\ts3 \"github.com/aws/aws-sdk-go-v2/service/s3\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mocks3Client is a mock of s3Client interface.\ntype Mocks3Client struct {\n\tctrl     *gomock.Controller\n\trecorder *Mocks3ClientMockRecorder\n\tisgomock struct{}\n}\n\n// Mocks3ClientMockRecorder is the mock recorder for Mocks3Client.\ntype Mocks3ClientMockRecorder struct {\n\tmock *Mocks3Client\n}\n", "n_tokens": 180, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "s3_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "github", "com", "aws", "sdk", "service", "gomock", "uber", "org", "mock", "Mocks3Client", "s3Client", "interface", "type", "struct", "ctrl", "Controller", "recorder", "Mocks3ClientMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: s3.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=s3.go -destination=mocks/s3_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ts3 \"github.com/aws/aws-sdk-go-v2/service/s3\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mocks3Client is a mock of s3Client interface.\ntype Mocks3Client struct {\n\tctrl     *gomock.Controller\n\trecorder *Mocks3ClientMockRecorder\n\tisgomock struct{}\n}\n// Mocks3ClientMockRecorder is the mock recorder for Mocks3Client.\ntype Mocks3ClientMockRecorder struct {\n\tmock *Mocks3Client\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go", "rel_path": "internal/adapters/filesystem/mocks/s3_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 43, "text": "// NewMocks3Client creates a new mock instance.\nfunc NewMocks3Client(ctrl *gomock.Controller) *Mocks3Client {\n\tmock := &Mocks3Client{ctrl: ctrl}\n\tmock.recorder = &Mocks3ClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocks3Client) EXPECT() *Mocks3ClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 92, "primary_symbol": "NewMocks3Client", "primary_kind": "function", "primary_span": [33, 43], "def_symbols": ["NewMocks3Client", "EXPECT"], "symbols": ["NewMocks3Client", "EXPECT", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mocks3Client", "recorder", "Mocks3ClientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use"], "doc_head": "// NewMocks3Client creates a new mock instance.\nfunc NewMocks3Client(ctrl *gomock.Controller) *Mocks3Client {\n\tmock := &Mocks3Client{ctrl: ctrl}\n\tmock.recorder = &Mocks3ClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocks3Client) EXPECT() *Mocks3ClientMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go", "rel_path": "internal/adapters/filesystem/mocks/s3_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 44, "end_line": 56, "text": "// GetObject mocks base method.\nfunc (m *Mocks3Client) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetObject\", varargs...)\n\tret0, _ := ret[0].(*s3.GetObjectOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 131, "primary_symbol": "GetObject", "primary_kind": "function", "primary_span": [45, 56], "def_symbols": ["GetObject"], "symbols": ["GetObject", "mocks", "base", "method", "func", "Mocks3Client", "ctx", "context", "Context", "params", "GetObjectInput", "optFns", "Options", "GetObjectOutput", "error", "ctrl", "Helper", "varargs", "any", "for", "range", "append", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetObject mocks base method.\nfunc (m *Mocks3Client) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetObject\", varargs...)\n\tret0, _ := ret[0].(*s3.GetObjectOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go", "rel_path": "internal/adapters/filesystem/mocks/s3_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 57, "end_line": 63, "text": "// GetObject indicates an expected call of GetObject.\nfunc (mr *Mocks3ClientMockRecorder) GetObject(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetObject\", reflect.TypeOf((*Mocks3Client)(nil).GetObject), varargs...)\n}\n", "n_tokens": 92, "primary_symbol": "GetObject", "primary_kind": "function", "primary_span": [58, 63], "def_symbols": ["GetObject"], "symbols": ["GetObject", "indicates", "expected", "call", "func", "Mocks3ClientMockRecorder", "ctx", "params", "any", "optFns", "gomock", "Call", "mock", "ctrl", "Helper", "varargs", "append", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocks3Client", "nil"], "doc_head": "// GetObject indicates an expected call of GetObject.\nfunc (mr *Mocks3ClientMockRecorder) GetObject(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetObject\", reflect.TypeOf((*Mocks3Client)(nil).GetObject), varargs...)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go", "rel_path": "internal/adapters/filesystem/mocks/s3_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 64, "end_line": 76, "text": "// PutObject mocks base method.\nfunc (m *Mocks3Client) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"PutObject\", varargs...)\n\tret0, _ := ret[0].(*s3.PutObjectOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 135, "primary_symbol": "PutObject", "primary_kind": "function", "primary_span": [65, 76], "def_symbols": ["PutObject"], "symbols": ["PutObject", "mocks", "base", "method", "func", "Mocks3Client", "ctx", "context", "Context", "params", "PutObjectInput", "optFns", "Options", "PutObjectOutput", "error", "ctrl", "Helper", "varargs", "any", "for", "range", "append", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// PutObject mocks base method.\nfunc (m *Mocks3Client) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"PutObject\", varargs...)\n\tret0, _ := ret[0].(*s3.PutObjectOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/filesystem/mocks/s3_mocks.go", "rel_path": "internal/adapters/filesystem/mocks/s3_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 77, "end_line": 83, "text": "// PutObject indicates an expected call of PutObject.\nfunc (mr *Mocks3ClientMockRecorder) PutObject(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"PutObject\", reflect.TypeOf((*Mocks3Client)(nil).PutObject), varargs...)\n}\n", "n_tokens": 94, "primary_symbol": "PutObject", "primary_kind": "function", "primary_span": [78, 83], "def_symbols": ["PutObject"], "symbols": ["PutObject", "indicates", "expected", "call", "func", "Mocks3ClientMockRecorder", "ctx", "params", "any", "optFns", "gomock", "Call", "mock", "ctrl", "Helper", "varargs", "append", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocks3Client", "nil"], "doc_head": "// PutObject indicates an expected call of PutObject.\nfunc (mr *Mocks3ClientMockRecorder) PutObject(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"PutObject\", reflect.TypeOf((*Mocks3Client)(nil).PutObject), varargs...)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package mongodb\n\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"time\"\n)\n\n// geoJSON is a struct that represents a geoJSON object\ntype (\n\tgeoJSON struct {\n\t\tType        string `json:\"type\"`\n\t\tCoordinates []any  `json:\"coordinates\"`\n\t}\n", "n_tokens": 78, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "mongodb", "import", "impalastudios", "com", "aviation", "liveflights", "internal", "core", "org", "mongo", "driver", "bson", "time", "geoJSON", "struct", "that", "represents", "object", "type", "Type", "string", "json", "Coordinates", "any", "coordinates"], "doc_head": "package mongodb\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"time\"\n)\n// geoJSON is a struct that represents a geoJSON object\ntype (\n\tgeoJSON struct {\n\t\tType        string `json:\"type\"`\n\t\tCoordinates []any  `json:\"coordinates\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 16, "end_line": 36, "text": "\tliveFlight struct {\n\t\tID                    string    `bson:\"live_flight_id\"`\n\t\tFlightID              *string   `bson:\"flight_id,omitempty\"`\n\t\tFlightNumber          string    `bson:\"flight_number\"`\n\t\tAirlineDesignator     string    `bson:\"airline_designator\"`\n\t\tAirlineClassification int       `bson:\"airline_classification\"`\n\t\tDepartureTime         time.Time `bson:\"departure_time\"`\n\t\tDepartureAirportICAO  string    `bson:\"departure_airport_icao\"`\n\t\tDepartureAirportIATA  string    `bson:\"departure_airport_iata\"`\n\t\tArrivalAirportICAO    string    `bson:\"arrival_airport_icao\"`\n\t\tArrivalAirportIATA    string    `bson:\"arrival_airport_iata\"`\n\t\tPosition              geoJSON   `bson:\"position\"`\n\t\tAltitude              float64   `bson:\"altitude\"`\n\t\tHeadingDirection      float64   `bson:\"heading_direction\"`\n\t\tGroundSpeed           float64   `bson:\"ground_speed\"`\n\t\tVerticalSpeed         float64   `bson:\"vertical_speed\"`\n\t\tSquawk                int       `bson:\"squawk\"`\n\t\tCreatedAt             time.Time `bson:\"created_at\"`\n\t\tUpdatedAt             time.Time `bson:\"updated_at\"`\n\t}\n", "n_tokens": 272, "primary_symbol": "", "primary_kind": "", "primary_span": [16, 36], "def_symbols": [], "symbols": ["liveFlight", "struct", "string", "bson", "live_flight_id", "FlightID", "flight_id", "omitempty", "FlightNumber", "flight_number", "AirlineDesignator", "airline_designator", "AirlineClassification", "int", "airline_classification", "DepartureTime", "time", "Time", "departure_time", "DepartureAirportICAO", "departure_airport_icao", "DepartureAirportIATA", "departure_airport_iata", "ArrivalAirportICAO", "arrival_airport_icao", "ArrivalAirportIATA", "arrival_airport_iata", "Position", "geoJSON", "position", "Altitude", "float64", "altitude", "HeadingDirection", "heading_direction", "GroundSpeed", "ground_speed", "VerticalSpeed", "vertical_speed", "Squawk", "squawk", "CreatedAt", "created_at", "UpdatedAt", "updated_at"], "doc_head": "\tliveFlight struct {\n\t\tID                    string    `bson:\"live_flight_id\"`\n\t\tFlightID              *string   `bson:\"flight_id,omitempty\"`\n\t\tFlightNumber          string    `bson:\"flight_number\"`\n\t\tAirlineDesignator     string    `bson:\"airline_designator\"`\n\t\tAirlineClassification int       `bson:\"airline_classification\"`\n\t\tDepartureTime         time.Time `bson:\"departure_time\"`\n\t\tDepartureAirportICAO  string    `bson:\"departure_airport_icao\"`\n\t\tDepartureAirportIATA  string    `bson:\"departure_airport_iata\"`\n\t\tArrivalAirportICAO    string    `bson:\"arrival_airport_icao\"`\n\t\tArrivalAirportIATA    string    `bson:\"arrival_airport_iata\"`\n\t\tPosition              geoJSON   `bson:\"position\"`\n\t\tAltitude              float64   `bson:\"altitude\"`\n\t\tHeadingDirection      float64   `bson:\"heading_direction\"`\n\t\tGroundSpeed           float64   `bson:\"ground_speed\"`\n\t\tVerticalSpeed         float64   `bson:\"vertical_speed\"`\n\t\tSquawk                int       `bson:\"squawk\"`\n\t\tCreatedAt             time.Time `bson:\"created_at\"`\n\t\tUpdatedAt             time.Time `bson:\"updated_at\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 37, "end_line": 56, "text": "\ttrackPoint struct {\n\t\tLiveFlightID     string    `bson:\"live_flight_id\"`\n\t\tPosition         geoJSON   `bson:\"position\"`\n\t\tAltitude         float64   `bson:\"altitude\"`\n\t\tHeadingDirection float64   `bson:\"heading_direction\"`\n\t\tGroundSpeed      float64   `bson:\"ground_speed\"`\n\t\tVerticalSpeed    float64   `bson:\"vertical_speed\"`\n\t\tSquawk           int       `bson:\"squawk\"`\n\t\tCreatedAt        time.Time `bson:\"created_at\"`\n\t}\n)\n\n// newPoint creates a new geoJSON point Object\nfunc newPoint(lon, lat float64) *geoJSON {\n\treturn &geoJSON{\n\t\tType:        \"Point\",\n\t\tCoordinates: []any{lon, lat},\n\t}\n}\n", "n_tokens": 165, "primary_symbol": "newPoint", "primary_kind": "function", "primary_span": [50, 56], "def_symbols": ["newPoint"], "symbols": ["newPoint", "trackPoint", "struct", "LiveFlightID", "string", "bson", "live_flight_id", "Position", "geoJSON", "position", "Altitude", "float64", "altitude", "HeadingDirection", "heading_direction", "GroundSpeed", "ground_speed", "VerticalSpeed", "vertical_speed", "Squawk", "int", "squawk", "CreatedAt", "time", "Time", "created_at", "creates", "new", "point", "Object", "func", "lon", "lat", "return", "Type", "Point", "Coordinates", "any"], "doc_head": "\ttrackPoint struct {\n\t\tLiveFlightID     string    `bson:\"live_flight_id\"`\n\t\tPosition         geoJSON   `bson:\"position\"`\n\t\tAltitude         float64   `bson:\"altitude\"`\n\t\tHeadingDirection float64   `bson:\"heading_direction\"`\n\t\tGroundSpeed      float64   `bson:\"ground_speed\"`\n\t\tVerticalSpeed    float64   `bson:\"vertical_speed\"`\n\t\tSquawk           int       `bson:\"squawk\"`\n\t\tCreatedAt        time.Time `bson:\"created_at\"`\n\t}\n)\n// newPoint creates a new geoJSON point Object\nfunc newPoint(lon, lat float64) *geoJSON {\n\treturn &geoJSON{\n\t\tType:        \"Point\",\n\t\tCoordinates: []any{lon, lat},\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 57, "end_line": 79, "text": "// coordinateFromPoint returns the coordinates of a geoJSON point object\nfunc coordinateFromPoint(p *geoJSON) core.Coordinate {\n\tif p.Type != \"Point\" {\n\t\treturn core.Coordinate{}\n\t}\n\tcoords := p.Coordinates\n\tif len(coords) != 2 {\n\t\treturn core.Coordinate{}\n\t}\n\tlon, ok := coords[0].(float64)\n\tif !ok {\n\t\treturn core.Coordinate{}\n\t}\n\tlat, ok := coords[1].(float64)\n\tif !ok {\n\t\treturn core.Coordinate{}\n\t}\n\treturn core.Coordinate{\n\t\tLon: lon,\n\t\tLat: lat,\n\t}\n}\n", "n_tokens": 136, "primary_symbol": "coordinateFromPoint", "primary_kind": "function", "primary_span": [58, 79], "def_symbols": ["coordinateFromPoint"], "symbols": ["coordinateFromPoint", "returns", "the", "coordinates", "geoJSON", "point", "object", "func", "core", "Coordinate", "Type", "Point", "return", "coords", "Coordinates", "len", "lon", "float64", "lat", "Lon", "Lat"], "doc_head": "// coordinateFromPoint returns the coordinates of a geoJSON point object\nfunc coordinateFromPoint(p *geoJSON) core.Coordinate {\n\tif p.Type != \"Point\" {\n\t\treturn core.Coordinate{}\n\t}\n\tcoords := p.Coordinates\n\tif len(coords) != 2 {\n\t\treturn core.Coordinate{}\n\t}\n\tlon, ok := coords[0].(float64)\n\tif !ok {\n\t\treturn core.Coordinate{}\n\t}\n\tlat, ok := coords[1].(float64)\n\tif !ok {\n\t\treturn core.Coordinate{}\n\t}\n\treturn core.Coordinate{\n\t\tLon: lon,\n\t\tLat: lat,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 80, "end_line": 96, "text": "func toInsertLiveFlight(u *core.LiveFlightUpdate) bson.M {\n\treturn bson.M{\n\t\t\"live_flight_id\":         u.ID,\n\t\t\"flight_id\":              nil,\n\t\t\"flight_number\":          u.FlightNumber,\n\t\t\"airline_designator\":     u.AirlineDesignator,\n\t\t\"departure_time\":         u.DepartureTime,\n\t\t\"departure_airport_icao\": u.DepartureAirportICAO,\n\t\t\"departure_airport_iata\": u.DepartureAirportIATA,\n\t\t\"arrival_airport_icao\":   u.ArrivalAirportICAO,\n\t\t\"arrival_airport_iata\":   u.ArrivalAirportIATA,\n\t\t\"airline_classification\": 5,\n\t\t\"enriched\":               false,\n\t\t\"created_at\":             u.CreatedAt,\n\t}\n}\n", "n_tokens": 184, "primary_symbol": "toInsertLiveFlight", "primary_kind": "function", "primary_span": [80, 96], "def_symbols": ["toInsertLiveFlight"], "symbols": ["toInsertLiveFlight", "func", "core", "LiveFlightUpdate", "bson", "return", "live_flight_id", "flight_id", "nil", "flight_number", "FlightNumber", "airline_designator", "AirlineDesignator", "departure_time", "DepartureTime", "departure_airport_icao", "DepartureAirportICAO", "departure_airport_iata", "DepartureAirportIATA", "arrival_airport_icao", "ArrivalAirportICAO", "arrival_airport_iata", "ArrivalAirportIATA", "airline_classification", "enriched", "false", "created_at", "CreatedAt"], "doc_head": "func toInsertLiveFlight(u *core.LiveFlightUpdate) bson.M {\n\treturn bson.M{\n\t\t\"live_flight_id\":         u.ID,\n\t\t\"flight_id\":              nil,\n\t\t\"flight_number\":          u.FlightNumber,\n\t\t\"airline_designator\":     u.AirlineDesignator,\n\t\t\"departure_time\":         u.DepartureTime,\n\t\t\"departure_airport_icao\": u.DepartureAirportICAO,\n\t\t\"departure_airport_iata\": u.DepartureAirportIATA,\n\t\t\"arrival_airport_icao\":   u.ArrivalAirportICAO,\n\t\t\"arrival_airport_iata\":   u.ArrivalAirportIATA,\n\t\t\"airline_classification\": 5,\n\t\t\"enriched\":               false,\n\t\t\"created_at\":             u.CreatedAt,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 97, "end_line": 108, "text": "func toUpdateLiveFlight(u *core.LiveFlightUpdate) bson.M {\n\treturn bson.M{\n\t\t\"position\":          newPoint(u.Position.Lon, u.Position.Lat),\n\t\t\"altitude\":          u.Altitude,\n\t\t\"heading_direction\": u.HeadingDirection,\n\t\t\"ground_speed\":      u.GroundSpeed,\n\t\t\"vertical_speed\":    u.VerticalSpeed,\n\t\t\"squawk\":            u.Squawk,\n\t\t\"updated_at\":        u.CreatedAt,\n\t}\n}\n", "n_tokens": 108, "primary_symbol": "toUpdateLiveFlight", "primary_kind": "function", "primary_span": [97, 108], "def_symbols": ["toUpdateLiveFlight"], "symbols": ["toUpdateLiveFlight", "func", "core", "LiveFlightUpdate", "bson", "return", "position", "newPoint", "Position", "Lon", "Lat", "altitude", "Altitude", "heading_direction", "HeadingDirection", "ground_speed", "GroundSpeed", "vertical_speed", "VerticalSpeed", "squawk", "Squawk", "updated_at", "CreatedAt"], "doc_head": "func toUpdateLiveFlight(u *core.LiveFlightUpdate) bson.M {\n\treturn bson.M{\n\t\t\"position\":          newPoint(u.Position.Lon, u.Position.Lat),\n\t\t\"altitude\":          u.Altitude,\n\t\t\"heading_direction\": u.HeadingDirection,\n\t\t\"ground_speed\":      u.GroundSpeed,\n\t\t\"vertical_speed\":    u.VerticalSpeed,\n\t\t\"squawk\":            u.Squawk,\n\t\t\"updated_at\":        u.CreatedAt,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 109, "end_line": 121, "text": "func toTrackPointInsert(u *core.LiveFlightUpdate) bson.M {\n\treturn bson.M{\n\t\t\"live_flight_id\":    u.ID,\n\t\t\"position\":          newPoint(u.Position.Lon, u.Position.Lat),\n\t\t\"altitude\":          u.Altitude,\n\t\t\"heading_direction\": u.HeadingDirection,\n\t\t\"ground_speed\":      u.GroundSpeed,\n\t\t\"vertical_speed\":    u.VerticalSpeed,\n\t\t\"squawk\":            u.Squawk,\n\t\t\"created_at\":        u.CreatedAt,\n\t}\n}\n", "n_tokens": 119, "primary_symbol": "toTrackPointInsert", "primary_kind": "function", "primary_span": [109, 121], "def_symbols": ["toTrackPointInsert"], "symbols": ["toTrackPointInsert", "func", "core", "LiveFlightUpdate", "bson", "return", "live_flight_id", "position", "newPoint", "Position", "Lon", "Lat", "altitude", "Altitude", "heading_direction", "HeadingDirection", "ground_speed", "GroundSpeed", "vertical_speed", "VerticalSpeed", "squawk", "Squawk", "created_at", "CreatedAt"], "doc_head": "func toTrackPointInsert(u *core.LiveFlightUpdate) bson.M {\n\treturn bson.M{\n\t\t\"live_flight_id\":    u.ID,\n\t\t\"position\":          newPoint(u.Position.Lon, u.Position.Lat),\n\t\t\"altitude\":          u.Altitude,\n\t\t\"heading_direction\": u.HeadingDirection,\n\t\t\"ground_speed\":      u.GroundSpeed,\n\t\t\"vertical_speed\":    u.VerticalSpeed,\n\t\t\"squawk\":            u.Squawk,\n\t\t\"created_at\":        u.CreatedAt,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 122, "end_line": 141, "text": "func (u *liveFlight) toDomain() *core.LiveFlight {\n\tcoord := coordinateFromPoint(&u.Position)\n\n\treturn &core.LiveFlight{\n\t\tID:                    u.ID,\n\t\tFlightID:              u.FlightID,\n\t\tFlightNumber:          u.FlightNumber,\n\t\tAirlineDesignator:     u.AirlineDesignator,\n\t\tAirlineClassification: u.AirlineClassification,\n\t\tDepartureTime:         u.DepartureTime,\n\t\tDepartureAirportICAO:  u.DepartureAirportICAO,\n\t\tDepartureAirportIATA:  u.DepartureAirportIATA,\n\t\tArrivalAirportICAO:    u.ArrivalAirportICAO,\n\t\tArrivalAirportIATA:    u.ArrivalAirportIATA,\n\t\tPosition:              coord,\n\t\tCreatedAt:             u.CreatedAt,\n\t\tUpdatedAt:             u.UpdatedAt,\n\t}\n}\n", "n_tokens": 196, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [122, 141], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "liveFlight", "core", "LiveFlight", "coord", "coordinateFromPoint", "Position", "return", "FlightID", "FlightNumber", "AirlineDesignator", "AirlineClassification", "DepartureTime", "DepartureAirportICAO", "DepartureAirportIATA", "ArrivalAirportICAO", "ArrivalAirportIATA", "CreatedAt", "UpdatedAt"], "doc_head": "func (u *liveFlight) toDomain() *core.LiveFlight {\n\tcoord := coordinateFromPoint(&u.Position)\n\treturn &core.LiveFlight{\n\t\tID:                    u.ID,\n\t\tFlightID:              u.FlightID,\n\t\tFlightNumber:          u.FlightNumber,\n\t\tAirlineDesignator:     u.AirlineDesignator,\n\t\tAirlineClassification: u.AirlineClassification,\n\t\tDepartureTime:         u.DepartureTime,\n\t\tDepartureAirportICAO:  u.DepartureAirportICAO,\n\t\tDepartureAirportIATA:  u.DepartureAirportIATA,\n\t\tArrivalAirportICAO:    u.ArrivalAirportICAO,\n\t\tArrivalAirportIATA:    u.ArrivalAirportIATA,\n\t\tPosition:              coord,\n\t\tCreatedAt:             u.CreatedAt,\n\t\tUpdatedAt:             u.UpdatedAt,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/models.go", "rel_path": "internal/adapters/mongodb/models.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 142, "end_line": 154, "text": "func (tp *trackPoint) toDomain() core.TrackPoint {\n\treturn core.TrackPoint{\n\t\tLiveFlightID:     tp.LiveFlightID,\n\t\tPosition:         coordinateFromPoint(&tp.Position),\n\t\tAltitude:         tp.Altitude,\n\t\tHeadingDirection: tp.HeadingDirection,\n\t\tGroundSpeed:      tp.GroundSpeed,\n\t\tVerticalSpeed:    tp.VerticalSpeed,\n\t\tSquawk:           tp.Squawk,\n\t\tCreatedAt:        tp.CreatedAt,\n\t}\n}\n", "n_tokens": 108, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [142, 154], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "trackPoint", "core", "TrackPoint", "return", "LiveFlightID", "Position", "coordinateFromPoint", "Altitude", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "CreatedAt"], "doc_head": "func (tp *trackPoint) toDomain() core.TrackPoint {\n\treturn core.TrackPoint{\n\t\tLiveFlightID:     tp.LiveFlightID,\n\t\tPosition:         coordinateFromPoint(&tp.Position),\n\t\tAltitude:         tp.Altitude,\n\t\tHeadingDirection: tp.HeadingDirection,\n\t\tGroundSpeed:      tp.GroundSpeed,\n\t\tVerticalSpeed:    tp.VerticalSpeed,\n\t\tSquawk:           tp.Squawk,\n\t\tCreatedAt:        tp.CreatedAt,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go", "rel_path": "internal/adapters/mongodb/flights_enrich_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "package mongodb\n\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/readconcern\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\nconst enrichSatchSize = 10000\n\ntype FlightsEnrichRepository struct {\n\tcoll *mongo.Collection\n}\n", "n_tokens": 148, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["package", "mongodb", "import", "context", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "org", "mongo", "driver", "bson", "options", "readconcern", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "const", "enrichSatchSize", "type", "FlightsEnrichRepository", "struct", "coll", "Collection"], "doc_head": "package mongodb\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/readconcern\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\nconst enrichSatchSize = 10000\ntype FlightsEnrichRepository struct {\n\tcoll *mongo.Collection\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go", "rel_path": "internal/adapters/mongodb/flights_enrich_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 32, "text": "func NewFlightsEnrichRepository(db *mongo.Database) *FlightsEnrichRepository {\n\treturn &FlightsEnrichRepository{\n\t\tcoll: db.Collection(\n\t\t\t\"flight_updates\",\n\t\t\toptions.Collection().SetReadConcern(readconcern.Local()),\n\t\t),\n\t}\n}\n", "n_tokens": 58, "primary_symbol": "NewFlightsEnrichRepository", "primary_kind": "function", "primary_span": [24, 32], "def_symbols": ["NewFlightsEnrichRepository"], "symbols": ["NewFlightsEnrichRepository", "func", "mongo", "Database", "FlightsEnrichRepository", "return", "coll", "Collection", "flight_updates", "options", "SetReadConcern", "readconcern", "Local"], "doc_head": "func NewFlightsEnrichRepository(db *mongo.Database) *FlightsEnrichRepository {\n\treturn &FlightsEnrichRepository{\n\t\tcoll: db.Collection(\n\t\t\t\"flight_updates\",\n\t\t\toptions.Collection().SetReadConcern(readconcern.Local()),\n\t\t),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go", "rel_path": "internal/adapters/mongodb/flights_enrich_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 33, "end_line": 68, "text": "func (r *FlightsEnrichRepository) GetUnenrichedFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsEnrichRepository:GetUnenrichedFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.Int(\"limit\", limit),\n\t)\n\n\tfilter := bson.M{\"enriched\": false}\n\tfindOpts := options.Find().SetLimit(int64(limit))\n\n\tcursor, err := r.coll.Find(ctx, filter, findOpts)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find unenriched flights\")\n\t}\n\tdefer func() { _ = cursor.Close(ctx) }()\n\n\tvar raw []liveFlight\n\tif err := cursor.All(ctx, &raw); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode unenriched flights\")\n\t}\n\n\tflights := make([]*core.LiveFlight, 0, len(raw))\n\tfor i := range raw {\n\t\tflights = append(flights, raw[i].toDomain())\n\t}\n\n\treturn flights, nil\n}\n", "n_tokens": 286, "primary_symbol": "GetUnenrichedFlights", "primary_kind": "function", "primary_span": [33, 68], "def_symbols": ["GetUnenrichedFlights"], "symbols": ["GetUnenrichedFlights", "func", "FlightsEnrichRepository", "ctx", "context", "Context", "limit", "int", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "filter", "bson", "enriched", "false", "findOpts", "options", "Find", "SetLimit", "int64", "cursor", "err", "coll", "nil", "RecordError", "SetStatus", "codes", "Error", "return", "errors", "Wrap", "mongo", "failed", "find", "unenriched", "flights", "Close", "var", "raw", "liveFlight", "All", "decode", "make", "len", "for", "range", "append", "toDomain"], "doc_head": "func (r *FlightsEnrichRepository) GetUnenrichedFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsEnrichRepository:GetUnenrichedFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.Int(\"limit\", limit),\n\t)\n\tfilter := bson.M{\"enriched\": false}\n\tfindOpts := options.Find().SetLimit(int64(limit))\n\tcursor, err := r.coll.Find(ctx, filter, findOpts)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find unenriched flights\")\n\t}\n\tdefer func() { _ = cursor.Close(ctx) }()\n\tvar raw []liveFlight\n\tif err := cursor.All(ctx, &raw); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode unenriched flights\")\n\t}\n\tflights := make([]*core.LiveFlight, 0, len(raw))\n\tfor i := range raw {\n\t\tflights = append(flights, raw[i].toDomain())\n\t}\n\treturn flights, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_enrich_repository.go", "rel_path": "internal/adapters/mongodb/flights_enrich_repository.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 69, "end_line": 109, "text": "func (r *FlightsEnrichRepository) EnrichFlights(ctx context.Context, enriched []*core.EnrichedFlightData) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsEnrichRepository:EnrichFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.Int(\"enriched_flights_count\", len(enriched)),\n\t)\n\n\twritemodels := make([]mongo.WriteModel, 0, enrichSatchSize)\n\n\tfor i := 0; i < len(enriched); i++ {\n\t\te := enriched[i]\n\n\t\tset := bson.M{\n\t\t\t\"enriched\":               true,\n\t\t\t\"airline_classification\": e.Classification,\n\t\t}\n\t\tif e.FlightID != nil {\n\t\t\tset[\"flight_id\"] = *e.FlightID\n\t\t}\n\n\t\twritemodels = append(writemodels, &mongo.UpdateOneModel{\n\t\t\tFilter: bson.M{\"live_flight_id\": e.LiveFlightID},\n\t\t\tUpdate: bson.M{\"$set\": set},\n\t\t})\n\n\t\tif len(writemodels) == enrichSatchSize || i == len(enriched)-1 {\n\t\t\t_, err := r.coll.BulkWrite(ctx, writemodels, options.BulkWrite().SetOrdered(false))\n\t\t\tif err != nil && !errors.Is(err, mongo.ErrUnacknowledgedWrite) {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\t\treturn errors.Wrap(err, \"mongo: failed to enrich flights in bulk\")\n\t\t\t}\n\t\t\twritemodels = writemodels[:0]\n\t\t}\n\t}\n\n\treturn nil\n}\n", "n_tokens": 360, "primary_symbol": "EnrichFlights", "primary_kind": "function", "primary_span": [69, 109], "def_symbols": ["EnrichFlights"], "symbols": ["EnrichFlights", "func", "FlightsEnrichRepository", "ctx", "context", "Context", "enriched", "core", "EnrichedFlightData", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "enriched_flights_count", "len", "writemodels", "make", "mongo", "WriteModel", "enrichSatchSize", "for", "set", "bson", "true", "airline_classification", "Classification", "FlightID", "nil", "flight_id", "append", "UpdateOneModel", "Filter", "live_flight_id", "LiveFlightID", "Update", "err", "coll", "BulkWrite", "options", "SetOrdered", "false", "errors", "ErrUnacknowledgedWrite", "RecordError", "SetStatus", "codes", "Error", "return", "Wrap", "failed", "enrich", "flights", "bulk"], "doc_head": "func (r *FlightsEnrichRepository) EnrichFlights(ctx context.Context, enriched []*core.EnrichedFlightData) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsEnrichRepository:EnrichFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.Int(\"enriched_flights_count\", len(enriched)),\n\t)\n\twritemodels := make([]mongo.WriteModel, 0, enrichSatchSize)\n\tfor i := 0; i < len(enriched); i++ {\n\t\te := enriched[i]\n\t\tset := bson.M{\n\t\t\t\"enriched\":               true,\n\t\t\t\"airline_classification\": e.Classification,\n\t\t}\n\t\tif e.FlightID != nil {\n\t\t\tset[\"flight_id\"] = *e.FlightID\n\t\t}\n\t\twritemodels = append(writemodels, &mongo.UpdateOneModel{\n\t\t\tFilter: bson.M{\"live_flight_id\": e.LiveFlightID},\n\t\t\tUpdate: bson.M{\"$set\": set},\n\t\t})\n\t\tif len(writemodels) == enrichSatchSize || i == len(enriched)-1 {\n\t\t\t_, err := r.coll.BulkWrite(ctx, writemodels, options.BulkWrite().SetOrdered(false))\n\t\t\tif err != nil && !errors.Is(err, mongo.ErrUnacknowledgedWrite) {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t\treturn errors.Wrap(err, \"mongo: failed to enrich flights in bulk\")\n\t\t\t}\n\t\t\twritemodels = writemodels[:0]\n\t\t}\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go", "rel_path": "internal/adapters/mongodb/flights_archive_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package mongodb\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/readconcern\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n// FlightsArchiveRepository handles archiving live flights and their tracks.\ntype FlightsArchiveRepository struct {\n\tflightsColl *mongo.Collection\n\ttracksColl  *mongo.Collection\n}\n\nconst ttl = 24 * time.Hour\n", "n_tokens": 172, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 27], "def_symbols": [], "symbols": ["package", "mongodb", "import", "context", "time", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "org", "mongo", "driver", "bson", "options", "readconcern", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "FlightsArchiveRepository", "handles", "archiving", "live", "flights", "and", "their", "tracks", "type", "struct", "flightsColl", "Collection", "tracksColl", "const", "ttl", "Hour"], "doc_head": "package mongodb\nimport (\n\t\"context\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/readconcern\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n// FlightsArchiveRepository handles archiving live flights and their tracks.\ntype FlightsArchiveRepository struct {\n\tflightsColl *mongo.Collection\n\ttracksColl  *mongo.Collection\n}\nconst ttl = 24 * time.Hour"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go", "rel_path": "internal/adapters/mongodb/flights_archive_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 40, "text": "// NewFlightsArchiveRepository creates a repository for flight_updates and flight_tracks\nfunc NewFlightsArchiveRepository(db *mongo.Database) *FlightsArchiveRepository {\n\treturn &FlightsArchiveRepository{\n\t\tflightsColl: db.Collection(\n\t\t\t\"flight_updates\",\n\t\t\toptions.Collection().SetReadConcern(&readconcern.ReadConcern{Level: readconcern.Local().Level}),\n\t\t),\n\t\ttracksColl: db.Collection(\n\t\t\t\"flight_tracks\",\n\t\t),\n\t}\n}\n", "n_tokens": 100, "primary_symbol": "NewFlightsArchiveRepository", "primary_kind": "function", "primary_span": [29, 40], "def_symbols": ["NewFlightsArchiveRepository"], "symbols": ["NewFlightsArchiveRepository", "creates", "repository", "for", "flight_updates", "and", "flight_tracks", "func", "mongo", "Database", "FlightsArchiveRepository", "return", "flightsColl", "Collection", "options", "SetReadConcern", "readconcern", "ReadConcern", "Level", "Local", "tracksColl"], "doc_head": "// NewFlightsArchiveRepository creates a repository for flight_updates and flight_tracks\nfunc NewFlightsArchiveRepository(db *mongo.Database) *FlightsArchiveRepository {\n\treturn &FlightsArchiveRepository{\n\t\tflightsColl: db.Collection(\n\t\t\t\"flight_updates\",\n\t\t\toptions.Collection().SetReadConcern(&readconcern.ReadConcern{Level: readconcern.Local().Level}),\n\t\t),\n\t\ttracksColl: db.Collection(\n\t\t\t\"flight_tracks\",\n\t\t),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go", "rel_path": "internal/adapters/mongodb/flights_archive_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 41, "end_line": 112, "text": "// GetArchivableFlights retrieves flights whose TTL has expired, including their tracks\nfunc (r *FlightsArchiveRepository) GetArchivableFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsArchiveRepository:GetArchivableFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.Int(\"limit\", limit),\n\t)\n\n\tcutoff := time.Now().UTC().Add(-ttl)\n\tfilter := bson.M{\"created_at\": bson.M{\"$lte\": cutoff}}\n\t\n\tfindOpts := options.Find().SetLimit(int64(limit))\n\tcursor, err := r.flightsColl.Find(ctx, filter, findOpts)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find live flights\")\n\t}\n\tdefer func() {\n\t\t_ = cursor.Close(ctx)\n\t}()\n\n\tvar docs []liveFlight\n\tif err := cursor.All(ctx, &docs); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode live flights\")\n\t}\n\n\tflights := make([]*core.LiveFlight, len(docs))\n\tids := make([]string, len(docs))\n\tfor i, d := range docs {\n\t\tflights[i] = d.toDomain()\n\t\tids[i] = d.ID\n\t}\n\n\ttrackCursor, err := r.tracksColl.Find(ctx, bson.M{\"live_flight_id\": bson.M{\"$in\": ids}})\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find flight tracks\")\n\t}\n\tdefer func() {\n\t\t_ = trackCursor.Close(ctx)\n\t}()\n\n\tvar tps []trackPoint\n\tif err := trackCursor.All(ctx, &tps); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode flight tracks\")\n\t}\n\n\ttracksMap := make(map[string][]core.TrackPoint, len(docs))\n\tfor _, tp := range tps {\n\t\ttracksMap[tp.LiveFlightID] = append(tracksMap[tp.LiveFlightID], tp.toDomain())\n\t}\n\n\tfor _, f := range flights {\n\t\tif pts, ok := tracksMap[f.ID]; ok {\n\t\t\tf.Tracks = pts\n\t\t}\n\t}\n\n\treturn flights, nil\n}\n", "n_tokens": 554, "primary_symbol": "GetArchivableFlights", "primary_kind": "function", "primary_span": [42, 112], "def_symbols": ["GetArchivableFlights"], "symbols": ["GetArchivableFlights", "retrieves", "flights", "whose", "TTL", "has", "expired", "including", "their", "tracks", "func", "FlightsArchiveRepository", "ctx", "context", "Context", "limit", "int", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "cutoff", "time", "Now", "UTC", "Add", "ttl", "filter", "bson", "created_at", "lte", "findOpts", "options", "Find", "SetLimit", "int64", "cursor", "err", "flightsColl", "nil", "RecordError", "SetStatus", "codes", "Error", "return", "errors", "Wrap", "mongo", "failed", "find", "live", "Close", "var", "docs", "liveFlight", "All", "decode", "make", "len", "ids", "string", "for", "range", "toDomain", "trackCursor", "tracksColl", "live_flight_id", "flight", "tps", "trackPoint", "tracksMap", "map", "TrackPoint", "LiveFlightID", "append", "pts", "Tracks"], "doc_head": "// GetArchivableFlights retrieves flights whose TTL has expired, including their tracks\nfunc (r *FlightsArchiveRepository) GetArchivableFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsArchiveRepository:GetArchivableFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.Int(\"limit\", limit),\n\t)\n\tcutoff := time.Now().UTC().Add(-ttl)\n\tfilter := bson.M{\"created_at\": bson.M{\"$lte\": cutoff}}\n\tfindOpts := options.Find().SetLimit(int64(limit))\n\tcursor, err := r.flightsColl.Find(ctx, filter, findOpts)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find live flights\")\n\t}\n\tdefer func() {\n\t\t_ = cursor.Close(ctx)\n\t}()\n\tvar docs []liveFlight\n\tif err := cursor.All(ctx, &docs); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode live flights\")\n\t}\n\tflights := make([]*core.LiveFlight, len(docs))\n\tids := make([]string, len(docs))\n\tfor i, d := range docs {\n\t\tflights[i] = d.toDomain()\n\t\tids[i] = d.ID\n\t}\n\ttrackCursor, err :"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go", "rel_path": "internal/adapters/mongodb/flights_archive_repository.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 113, "end_line": 142, "text": "// DeleteFlights removes flights and their associated tracks in a single operation\nfunc (r *FlightsArchiveRepository) DeleteFlights(ctx context.Context, flights []*core.LiveFlight) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsArchiveRepository:DeleteFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tids := flightIDs(flights)\n\n\tspan.SetAttributes(\n\t\tattribute.StringSlice(\"ids\", ids),\n\t)\n\n\tfilter := bson.M{\"live_flight_id\": bson.M{\"$in\": ids}}\n\n\tif _, err := r.flightsColl.DeleteMany(ctx, filter); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn errors.Wrap(err, \"mongo: failed to delete flight updates\")\n\t}\n\n\tif _, err := r.tracksColl.DeleteMany(ctx, filter); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn errors.Wrap(err, \"mongo: failed to delete flight tracks\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 226, "primary_symbol": "DeleteFlights", "primary_kind": "function", "primary_span": [114, 142], "def_symbols": ["DeleteFlights"], "symbols": ["DeleteFlights", "removes", "flights", "and", "their", "associated", "tracks", "single", "operation", "func", "FlightsArchiveRepository", "ctx", "context", "Context", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "ids", "flightIDs", "SetAttributes", "attribute", "StringSlice", "filter", "bson", "live_flight_id", "err", "flightsColl", "DeleteMany", "nil", "RecordError", "SetStatus", "codes", "Error", "return", "errors", "Wrap", "mongo", "failed", "delete", "flight", "updates", "tracksColl"], "doc_head": "// DeleteFlights removes flights and their associated tracks in a single operation\nfunc (r *FlightsArchiveRepository) DeleteFlights(ctx context.Context, flights []*core.LiveFlight) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsArchiveRepository:DeleteFlights\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tids := flightIDs(flights)\n\tspan.SetAttributes(\n\t\tattribute.StringSlice(\"ids\", ids),\n\t)\n\tfilter := bson.M{\"live_flight_id\": bson.M{\"$in\": ids}}\n\tif _, err := r.flightsColl.DeleteMany(ctx, filter); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn errors.Wrap(err, \"mongo: failed to delete flight updates\")\n\t}\n\tif _, err := r.tracksColl.DeleteMany(ctx, filter); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn errors.Wrap(err, \"mongo: failed to delete flight tracks\")\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_archive_repository.go", "rel_path": "internal/adapters/mongodb/flights_archive_repository.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 143, "end_line": 151, "text": "// flightIDs extracts live_flight_id values\nfunc flightIDs(flights []*core.LiveFlight) []string {\n\tids := make([]string, len(flights))\n\tfor i, f := range flights {\n\t\tids[i] = f.ID\n\t}\n\treturn ids\n}\n", "n_tokens": 56, "primary_symbol": "flightIDs", "primary_kind": "function", "primary_span": [144, 151], "def_symbols": ["flightIDs"], "symbols": ["flightIDs", "extracts", "live_flight_id", "values", "func", "flights", "core", "LiveFlight", "string", "ids", "make", "len", "for", "range", "return"], "doc_head": "// flightIDs extracts live_flight_id values\nfunc flightIDs(flights []*core.LiveFlight) []string {\n\tids := make([]string, len(flights))\n\tfor i, f := range flights {\n\t\tids[i] = f.ID\n\t}\n\treturn ids\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 29, "text": "package mongodb\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/writeconcern\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n//const (\n//\tflightBatchSize = 10000\n//\ttrackBatchSize  = 10000\n//)\n", "n_tokens": 187, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 29], "def_symbols": [], "symbols": ["package", "mongodb", "import", "context", "impalastudios", "com", "log", "uber", "org", "zap", "strings", "sync", "time", "github", "cockroachdb", "errors", "aviation", "liveflights", "internal", "core", "mongo", "driver", "bson", "primitive", "options", "writeconcern", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "const", "flightBatchSize", "trackBatchSize"], "doc_head": "package mongodb\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/writeconcern\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n//const (\n//\tflightBatchSize = 10000\n//\ttrackBatchSize  = 10000\n//)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 30, "end_line": 34, "text": "type FlightsUpdateRepository struct {\n\tflightsColl *mongo.Collection\n\ttracksColl  *mongo.Collection\n}\n", "n_tokens": 23, "primary_symbol": "", "primary_kind": "", "primary_span": [30, 34], "def_symbols": [], "symbols": ["type", "FlightsUpdateRepository", "struct", "flightsColl", "mongo", "Collection", "tracksColl"], "doc_head": "type FlightsUpdateRepository struct {\n\tflightsColl *mongo.Collection\n\ttracksColl  *mongo.Collection\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 35, "end_line": 105, "text": "func NewFlightsUpdateRepository(db *mongo.Database) *FlightsUpdateRepository {\n\treturn &FlightsUpdateRepository{\n\t\tflightsColl: db.Collection(\n\t\t\t\"flight_updates\",\n\t\t\toptions.Collection().SetWriteConcern(&writeconcern.WriteConcern{W: 0}),\n\t\t),\n\t\ttracksColl: db.Collection(\n\t\t\t\"flight_tracks\",\n\t\t\toptions.Collection().SetWriteConcern(&writeconcern.WriteConcern{W: 0}),\n\t\t),\n\t}\n}\n\n//// UpsertMany upserts live flight updates in the collection\n//// The location will be added to the path when the flight is already in the collection\n//func (r *FlightsUpdateRepository) UpsertMany(ctx context.Context, updates []*core.LiveFlightUpdate) error {\n//\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:UpsertMany\", trace.WithSpanKind(trace.SpanKindClient))\n//\tdefer span.End()\n//\n//\tspan.SetAttributes(\n//\t\tattribute.Int(\"updates\", len(updates)),\n//\t)\n//\n//\tvar flightModels []mongo.WriteModel\n//\tvar trackModels []mongo.WriteModel\n//\n//\tfor i, u := range updates {\n//\t\t// Flight upsert model\n//\t\tflightModels = append(flightModels, &mongo.UpdateOneModel{\n//\t\t\tUpsert: ptr(true),\n//\t\t\tFilter: bson.M{\"live_flight_id\": u.ID},\n//\t\t\tUpdate: bson.M{\n//\t\t\t\t\"$setOnInsert\": toInsertLiveFlight(u),\n//\t\t\t\t\"$set\":         toUpdateLiveFlight(u),\n//\t\t\t},\n//\t\t})\n//\n//\t\t// Track insert model\n//\t\ttrackDoc := toTrackPointInsert(u)\n//\t\ttrackModels = append(trackModels, &mongo.InsertOneModel{Document: trackDoc})\n//\n//\t\t// Flush in batches\n//\t\tif len(flightModels) >= flightBatchSize || i == len(updates)-1 {\n//\t\t\tif _, err := r.flightsColl.BulkWrite(ctx, flightModels, options.BulkWrite().SetOrdered(false)); err != nil && !errors.Is(err, mongo.ErrUnacknowledgedWrite) {\n//\t\t\t\tspan.RecordError(err)\n//\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n//\n//\t\t\t\tlog.Error(ctx, \"Failed to upsert live flights\", zap.Error(err))\n//\t\t\t\treturn errors.Wrap(err, \"mongo: failed to upsert live flights\")\n//\t\t\t}\n//\t\t\tflightModels = flightModels[:0]\n//\t\t}\n//\n//\t\tif len(trackModels) >= trackBatchSize || i == len(updates)-1 {\n//\t\t\tif _, err := r.tracksColl.BulkWrite(ctx, trackModels, options.BulkWrite().SetOrdered(false)); err != nil && !errors.Is(err, mongo.ErrUnacknowledgedWrite) {\n//\t\t\t\tspan.RecordError(err)\n//\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n//\n//\t\t\t\tlog.Error(ctx, \"Failed to insert flight tracks\", zap.Error(err))\n//\t\t\t\treturn errors.Wrap(err, \"mongo: failed to insert flight tracks\")\n//\t\t\t}\n//\t\t\ttrackModels = trackModels[:0]\n//\t\t}\n//\t}\n//\n//\treturn nil\n//}\n\n// ADD THIS IMPORT:\n// import \"sync\"\n", "n_tokens": 687, "primary_symbol": "NewFlightsUpdateRepository", "primary_kind": "function", "primary_span": [35, 105], "def_symbols": ["NewFlightsUpdateRepository"], "symbols": ["NewFlightsUpdateRepository", "func", "mongo", "Database", "FlightsUpdateRepository", "return", "flightsColl", "Collection", "flight_updates", "options", "SetWriteConcern", "writeconcern", "WriteConcern", "tracksColl", "flight_tracks", "UpsertMany", "upserts", "live", "flight", "updates", "the", "collection", "The", "location", "will", "added", "path", "when", "already", "ctx", "context", "Context", "core", "LiveFlightUpdate", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "len", "var", "flightModels", "WriteModel", "trackModels", "for", "range", "Flight", "upsert", "model", "append", "UpdateOneModel", "Upsert", "ptr", "true", "Filter", "bson", "live_flight_id", "Update", "setOnInsert", "toInsertLiveFlight", "set", "toUpdateLiveFlight", "Track", "insert", "trackDoc", "toTrackPointInsert", "InsertOneModel", "Document", "Flush", "batches", "flightBatchSize", "err", "BulkWrite", "SetOrdered", "false", "nil", "errors", "ErrUnacknowledgedWrite", "RecordError", "SetStatus", "codes", "Error", "log", "Failed", "flights", "zap", "Wrap", "failed", "trackBatchSize", "tracks", "ADD", "THIS", "IMPORT", "import", "sync"], "doc_head": "func NewFlightsUpdateRepository(db *mongo.Database) *FlightsUpdateRepository {\n\treturn &FlightsUpdateRepository{\n\t\tflightsColl: db.Collection(\n\t\t\t\"flight_updates\",\n\t\t\toptions.Collection().SetWriteConcern(&writeconcern.WriteConcern{W: 0}),\n\t\t),\n\t\ttracksColl: db.Collection(\n\t\t\t\"flight_tracks\",\n\t\t\toptions.Collection().SetWriteConcern(&writeconcern.WriteConcern{W: 0}),\n\t\t),\n\t}\n}\n//// UpsertMany upserts live flight updates in the collection\n//// The location will be added to the path when the flight is already in the collection\n//func (r *FlightsUpdateRepository) UpsertMany(ctx context.Context, updates []*core.LiveFlightUpdate) error {\n//\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:UpsertMany\", trace.WithSpanKind(trace.SpanKindClient))\n//\tdefer span.End()\n//\n//\tspan.SetAttributes(\n//\t\tattribute.Int(\"updates\", len(updates)),\n//\t)\n//\n//\tvar flightModels []mongo.WriteModel\n//\tvar trackModels []mongo.WriteModel\n//\n//\tfor i, u := range updates {\n//\t\t// Flight upsert model\n//\t\tflightModels = append(flightModels, &mongo.UpdateOneModel{\n//\t\t\tUpsert: ptr(true),\n//\t\t\tFilter: bson.M{\"live_flight_id\": u.ID},\n//\t\t\tUpdate: bson.M{\n//\t\t\t\t\"$setOnInsert\": toInsertLiveFlight(u),\n//\t\t\t\t\""}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 106, "end_line": 121, "text": "func (r *FlightsUpdateRepository) UpsertMany(ctx context.Context, updates []*core.LiveFlightUpdate) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:UpsertMany\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"updates\", len(updates)))\n\n\tif len(updates) == 0 {\n\t\treturn nil\n\t}\n\n\tconst (\n\t\tchunk        = 1250\n\t\tworkers      = 4\n\t\tbulkTimeout  = 15 * time.Second\n\t\tretryBackoff = 250 * time.Millisecond\n\t)\n", "n_tokens": 132, "primary_symbol": "UpsertMany", "primary_kind": "function", "primary_span": [106, 121], "def_symbols": ["UpsertMany"], "symbols": ["UpsertMany", "func", "FlightsUpdateRepository", "ctx", "context", "Context", "updates", "core", "LiveFlightUpdate", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "len", "return", "nil", "const", "chunk", "workers", "bulkTimeout", "time", "Second", "retryBackoff", "Millisecond"], "doc_head": "func (r *FlightsUpdateRepository) UpsertMany(ctx context.Context, updates []*core.LiveFlightUpdate) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:UpsertMany\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"updates\", len(updates)))\n\tif len(updates) == 0 {\n\t\treturn nil\n\t}\n\tconst (\n\t\tchunk        = 1250\n\t\tworkers      = 4\n\t\tbulkTimeout  = 15 * time.Second\n\t\tretryBackoff = 250 * time.Millisecond\n\t)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 122, "end_line": 232, "text": "\ttype job struct{ start, end int }\n\tjobs := make(chan job, (len(updates)+chunk-1)/chunk)\n\n\tbwo := options.BulkWrite().\n\t\tSetOrdered(false).\n\t\tSetBypassDocumentValidation(true)\n\n\tvar wg sync.WaitGroup\n\tvar mu sync.Mutex\n\tvar firstErr error\n\n\tsetFirstErr := func(err error) {\n\t\tif err == nil {\n\t\t\treturn\n\t\t}\n\t\tmu.Lock()\n\t\tif firstErr == nil {\n\t\t\tfirstErr = err\n\t\t}\n\t\tmu.Unlock()\n\t}\n\n\tisTransientWrite := func(err error) bool {\n\t\tif err == nil {\n\t\t\treturn false\n\t\t}\n\t\tmsg := err.Error()\n\t\treturn strings.Contains(msg, \"i/o timeout\") ||\n\t\t\tstrings.Contains(msg, \"context deadline exceeded\") ||\n\t\t\tstrings.Contains(msg, \"unable to write wire message\")\n\t}\n\n\tdoBulk := func(parent context.Context, coll *mongo.Collection, models []mongo.WriteModel) error {\n\t\tattempt := func() error {\n\t\t\tbctx, cancel := context.WithTimeout(parent, bulkTimeout)\n\t\t\t_, err := coll.BulkWrite(bctx, models, bwo)\n\t\t\tcancel()\n\t\t\tif errors.Is(err, mongo.ErrUnacknowledgedWrite) {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif err := attempt(); err != nil {\n\t\t\tif isTransientWrite(err) {\n\t\t\t\ttime.Sleep(retryBackoff)\n\t\t\t\treturn attempt()\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\n\tworker := func() {\n\t\tdefer wg.Done()\n\t\tfor j := range jobs {\n\t\t\tu := updates[j.start:j.end]\n\n\t\t\tflights := make([]mongo.WriteModel, 0, len(u))\n\t\t\ttracks := make([]mongo.WriteModel, 0, len(u))\n\n\t\t\tfor _, x := range u {\n\t\t\t\tflights = append(flights, mongo.NewUpdateOneModel().\n\t\t\t\t\tSetUpsert(true).\n\t\t\t\t\tSetFilter(bson.M{\"live_flight_id\": x.ID}).\n\t\t\t\t\tSetUpdate(bson.M{\n\t\t\t\t\t\t\"$setOnInsert\": toInsertLiveFlight(x),\n\t\t\t\t\t\t\"$set\":         toUpdateLiveFlight(x),\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\ttracks = append(tracks, mongo.NewInsertOneModel().\n\t\t\t\t\tSetDocument(toTrackPointInsert(x)))\n\t\t\t}\n\n\t\t\t// SEQUENTIAL per chunk to cut socket pressure\n\t\t\tif err := doBulk(ctx, r.flightsColl, flights); err != nil {\n\t\t\t\tsetFirstErr(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := doBulk(ctx, r.tracksColl, tracks); err != nil {\n\t\t\t\tsetFirstErr(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\tfor i := 0; i < workers; i++ {\n\t\twg.Add(1)\n\t\tgo worker()\n\t}\n\n\tfor i := 0; i < len(updates); i += chunk {\n\t\tend := i + chunk\n\t\tif end > len(updates) {\n\t\t\tend = len(updates)\n\t\t}\n\t\tjobs <- job{start: i, end: end}\n\t}\n\tclose(jobs)\n\twg.Wait()\n\n\tif firstErr != nil {\n\t\tspan.RecordError(firstErr)\n\t\tspan.SetStatus(codes.Error, firstErr.Error())\n\t\tlog.Error(ctx, \"Failed bulk upsert for live flights/tracks\", zap.Error(firstErr))\n\t\treturn firstErr\n\t}\n\n\treturn nil\n}\n", "n_tokens": 713, "primary_symbol": "", "primary_kind": "", "primary_span": [122, 232], "def_symbols": [], "symbols": ["type", "job", "struct", "start", "end", "int", "jobs", "make", "chan", "len", "updates", "chunk", "bwo", "options", "BulkWrite", "SetOrdered", "false", "SetBypassDocumentValidation", "true", "var", "sync", "WaitGroup", "Mutex", "firstErr", "error", "setFirstErr", "func", "err", "nil", "return", "Lock", "Unlock", "isTransientWrite", "bool", "msg", "Error", "strings", "Contains", "timeout", "context", "deadline", "exceeded", "unable", "write", "wire", "message", "doBulk", "parent", "Context", "coll", "mongo", "Collection", "models", "WriteModel", "attempt", "bctx", "cancel", "WithTimeout", "bulkTimeout", "errors", "ErrUnacknowledgedWrite", "time", "Sleep", "retryBackoff", "worker", "defer", "Done", "for", "range", "flights", "tracks", "append", "NewUpdateOneModel", "SetUpsert", "SetFilter", "bson", "live_flight_id", "SetUpdate", "setOnInsert", "toInsertLiveFlight", "set", "toUpdateLiveFlight", "NewInsertOneModel", "SetDocument", "toTrackPointInsert", "SEQUENTIAL", "per", "cut", "socket", "pressure", "ctx", "flightsColl", "tracksColl", "workers", "Add", "close", "Wait", "span", "RecordError", "SetStatus", "codes", "log", "Failed", "bulk", "upsert", "live", "zap"], "doc_head": "\ttype job struct{ start, end int }\n\tjobs := make(chan job, (len(updates)+chunk-1)/chunk)\n\tbwo := options.BulkWrite().\n\t\tSetOrdered(false).\n\t\tSetBypassDocumentValidation(true)\n\tvar wg sync.WaitGroup\n\tvar mu sync.Mutex\n\tvar firstErr error\n\tsetFirstErr := func(err error) {\n\t\tif err == nil {\n\t\t\treturn\n\t\t}\n\t\tmu.Lock()\n\t\tif firstErr == nil {\n\t\t\tfirstErr = err\n\t\t}\n\t\tmu.Unlock()\n\t}\n\tisTransientWrite := func(err error) bool {\n\t\tif err == nil {\n\t\t\treturn false\n\t\t}\n\t\tmsg := err.Error()\n\t\treturn strings.Contains(msg, \"i/o timeout\") ||\n\t\t\tstrings.Contains(msg, \"context deadline exceeded\") ||\n\t\t\tstrings.Contains(msg, \"unable to write wire message\")\n\t}\n\tdoBulk := func(parent context.Context, coll *mongo.Collection, models []mongo.WriteModel) error {\n\t\tattempt := func() error {\n\t\t\tbctx, cancel := context.WithTimeout(parent, bulkTimeout)\n\t\t\t_, err := coll.BulkWrite(bctx, models, bwo)\n\t\t\tcancel()\n\t\t\tif errors.Is(err, mongo.ErrUnacknowledgedWrite) {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tif err := attempt(); err != nil {\n\t\t\tif isTransientWrite(err) {\n\t\t\t\ttime.Sleep(retryBackoff)\n\t\t\t\treturn attempt()\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\tworker := func() {\n\t\tdefer wg.Done()\n\t\tfor j := range jobs {\n"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 233, "end_line": 245, "text": "func firstNonNil(errs ...error) error {\n\tfor _, e := range errs {\n\t\tif e != nil {\n\t\t\treturn e\n\t\t}\n\t}\n\treturn nil\n}\n\n//func ptr[T any](t T) *T {\n//\treturn &t\n//}\n", "n_tokens": 55, "primary_symbol": "firstNonNil", "primary_kind": "function", "primary_span": [233, 245], "def_symbols": ["firstNonNil"], "symbols": ["firstNonNil", "func", "errs", "error", "for", "range", "nil", "return", "ptr", "any"], "doc_head": "func firstNonNil(errs ...error) error {\n\tfor _, e := range errs {\n\t\tif e != nil {\n\t\t\treturn e\n\t\t}\n\t}\n\treturn nil\n}\n//func ptr[T any](t T) *T {\n//\treturn &t\n//}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 246, "end_line": 327, "text": "// Filter returns a page of live flights within the bounding BoundingBox\nfunc (r *FlightsUpdateRepository) Filter(ctx context.Context, f *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:Filter\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.Float64(\"bounding_box_top_left_lat\", f.BoundingBox.TopLeft.Lat),\n\t\tattribute.Float64(\"bounding_box_top_left_lon\", f.BoundingBox.TopLeft.Lon),\n\t\tattribute.Float64(\"bounding_box_bottom_right_lat\", f.BoundingBox.BottomRight.Lat),\n\t\tattribute.Float64(\"bounding_box_bottom_right_lon\", f.BoundingBox.BottomRight.Lon),\n\t\tattribute.String(\"max_age\", f.MaxAge.String()),\n\t)\n\n\tif f.AirlineClassification != nil {\n\t\tspan.SetAttributes(\n\t\t\tattribute.Int(\"airline_classification_c\", int(f.AirlineClassification.C)),\n\t\t\tattribute.Int(\"airline_classification_comparator\", int(f.AirlineClassification.Comparator)),\n\t\t)\n\t}\n\n\tfilter := bson.M{\n\t\t\"position\": bson.M{\n\t\t\t\"$geoWithin\": bson.M{\n\t\t\t\t\"$geometry\": polygonFromBoundingBox(f.BoundingBox),\n\t\t\t},\n\t\t},\n\t}\n\n\tif f.MaxAge > 0 {\n\t\tcutoff := time.Now().UTC().Add(-f.MaxAge)\n\t\tfilter[\"updated_at\"] = bson.M{\"$gte\": cutoff}\n\t}\n\n\tif f.AirlineClassification != nil && f.AirlineClassification.C > 0 {\n\t\top := r.claimOperationFromClassificationComparator(f.AirlineClassification.Comparator)\n\t\tfilter[\"airline_classification\"] = bson.M{op: f.AirlineClassification.C}\n\t}\n\n\tfindOpts := options.Find().\n\t\tSetProjection(bson.M{\n\t\t\t\"live_flight_id\":    1,\n\t\t\t\"flight_id\":         1,\n\t\t\t\"position\":          1,\n\t\t\t\"altitude\":          1,\n\t\t\t\"heading_direction\": 1,\n\t\t})\n\n\tcursor, err := r.flightsColl.Find(ctx, filter, findOpts)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find live flights\")\n\t}\n\tdefer func() {\n\t\t_ = cursor.Close(ctx)\n\t}()\n\n\tvar fs []liveFlight\n\tif err := cursor.All(ctx, &fs); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode live flights\")\n\t}\n\n\tfsd := make([]*core.LiveFlight, len(fs))\n\tfor i, f := range fs {\n\t\tcoord := coordinateFromPoint(&f.Position)\n\n\t\tfsd[i] = &core.LiveFlight{\n\t\t\tID:               f.ID,\n\t\t\tFlightID:         f.FlightID,\n\t\t\tPosition:         coord,\n\t\t\tAltitude:         f.Altitude,\n\t\t\tHeadingDirection: f.HeadingDirection,\n\t\t}\n\t}\n\n\treturn fsd, nil\n}\n", "n_tokens": 668, "primary_symbol": "Filter", "primary_kind": "function", "primary_span": [247, 327], "def_symbols": ["Filter"], "symbols": ["Filter", "returns", "page", "live", "flights", "within", "the", "bounding", "BoundingBox", "func", "FlightsUpdateRepository", "ctx", "context", "Context", "core", "FlightsWithin", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Float64", "bounding_box_top_left_lat", "TopLeft", "Lat", "bounding_box_top_left_lon", "Lon", "bounding_box_bottom_right_lat", "BottomRight", "bounding_box_bottom_right_lon", "String", "max_age", "MaxAge", "AirlineClassification", "nil", "Int", "airline_classification_c", "int", "airline_classification_comparator", "Comparator", "filter", "bson", "position", "geoWithin", "geometry", "polygonFromBoundingBox", "cutoff", "time", "Now", "UTC", "Add", "updated_at", "gte", "claimOperationFromClassificationComparator", "airline_classification", "findOpts", "options", "Find", "SetProjection", "live_flight_id", "flight_id", "altitude", "heading_direction", "cursor", "err", "flightsColl", "RecordError", "SetStatus", "codes", "Error", "return", "errors", "Wrap", "mongo", "failed", "find", "Close", "var", "liveFlight", "All", "decode", "fsd", "make", "len", "for", "range", "coord", "coordinateFromPoint", "Position", "FlightID", "Altitude", "HeadingDirection"], "doc_head": "// Filter returns a page of live flights within the bounding BoundingBox\nfunc (r *FlightsUpdateRepository) Filter(ctx context.Context, f *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:Filter\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.Float64(\"bounding_box_top_left_lat\", f.BoundingBox.TopLeft.Lat),\n\t\tattribute.Float64(\"bounding_box_top_left_lon\", f.BoundingBox.TopLeft.Lon),\n\t\tattribute.Float64(\"bounding_box_bottom_right_lat\", f.BoundingBox.BottomRight.Lat),\n\t\tattribute.Float64(\"bounding_box_bottom_right_lon\", f.BoundingBox.BottomRight.Lon),\n\t\tattribute.String(\"max_age\", f.MaxAge.String()),\n\t)\n\tif f.AirlineClassification != nil {\n\t\tspan.SetAttributes(\n\t\t\tattribute.Int(\"airline_classification_c\", int(f.AirlineClassification.C)),\n\t\t\tattribute.Int(\"airline_classification_comparator\", int(f.AirlineClassification.Comparator)),\n\t\t)\n\t}\n\tfilter := bson.M{\n\t\t\"position\": bson.M{\n\t\t\t\"$geoWithin\": bson.M{\n\t\t\t\t\"$geometry\": polygonFromBoundingBox(f.BoundingBox),\n\t\t\t},\n\t\t},\n\t}\n\tif f.MaxAge > 0 {\n\t\tcutoff := time.Now().UTC().Add(-f.MaxAge)\n\t\tfilter[\"updated_at\"] = bson.M{\"$gte\": cut"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 328, "end_line": 342, "text": "func polygonFromBoundingBox(bb *core.BoundingBox) primitive.M {\n\treturn primitive.M{\n\t\t\"type\": \"Polygon\",\n\t\t\"coordinates\": []any{\n\t\t\t[][]float64{\n\t\t\t\t{bb.TopLeft.Lon, bb.BottomRight.Lat},     // bottom-left (min_lon, min_lat)\n\t\t\t\t{bb.BottomRight.Lon, bb.BottomRight.Lat}, // bottom-right (max_lon, min_lat)\n\t\t\t\t{bb.BottomRight.Lon, bb.TopLeft.Lat},     // top-right (max_long, max_lat)\n\t\t\t\t{bb.TopLeft.Lon, bb.TopLeft.Lat},         // top-left (min_lon, max_lat)\n\t\t\t\t{bb.TopLeft.Lon, bb.BottomRight.Lat},     // Closing the polygon\n\t\t\t},\n\t\t},\n\t}\n}\n", "n_tokens": 171, "primary_symbol": "polygonFromBoundingBox", "primary_kind": "function", "primary_span": [328, 342], "def_symbols": ["polygonFromBoundingBox"], "symbols": ["polygonFromBoundingBox", "func", "core", "BoundingBox", "primitive", "return", "type", "Polygon", "coordinates", "any", "float64", "TopLeft", "Lon", "BottomRight", "Lat", "bottom", "left", "min_lon", "min_lat", "right", "max_lon", "top", "max_long", "max_lat", "Closing", "the", "polygon"], "doc_head": "func polygonFromBoundingBox(bb *core.BoundingBox) primitive.M {\n\treturn primitive.M{\n\t\t\"type\": \"Polygon\",\n\t\t\"coordinates\": []any{\n\t\t\t[][]float64{\n\t\t\t\t{bb.TopLeft.Lon, bb.BottomRight.Lat},     // bottom-left (min_lon, min_lat)\n\t\t\t\t{bb.BottomRight.Lon, bb.BottomRight.Lat}, // bottom-right (max_lon, min_lat)\n\t\t\t\t{bb.BottomRight.Lon, bb.TopLeft.Lat},     // top-right (max_long, max_lat)\n\t\t\t\t{bb.TopLeft.Lon, bb.TopLeft.Lat},         // top-left (min_lon, max_lat)\n\t\t\t\t{bb.TopLeft.Lon, bb.BottomRight.Lat},     // Closing the polygon\n\t\t\t},\n\t\t},\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 343, "end_line": 364, "text": "func (r *FlightsUpdateRepository) claimOperationFromClassificationComparator(comparator core.ClassificationComparator) string {\n\tswitch comparator {\n\tcase core.ClassificationGreaterComparator:\n\t\treturn \"$lte\"\n\tcase core.ClassificationLesserComparator:\n\t\treturn \"$gte\"\n\tdefault:\n\t\treturn \"$eq\"\n\t}\n}\n\nfunc (r *FlightsUpdateRepository) GetFlightDetailsByLiveFlightID(ctx context.Context, id string) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:GetFlightDetailsByLiveFlightID\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"id\", id),\n\t)\n\n\treturn r.getFlightByFilter(ctx, bson.M{\"live_flight_id\": id})\n}\n", "n_tokens": 163, "primary_symbol": "claimOperationFromClassificationComparator", "primary_kind": "function", "primary_span": [343, 364], "def_symbols": ["claimOperationFromClassificationComparator", "GetFlightDetailsByLiveFlightID"], "symbols": ["claimOperationFromClassificationComparator", "GetFlightDetailsByLiveFlightID", "func", "FlightsUpdateRepository", "comparator", "core", "ClassificationComparator", "string", "switch", "case", "ClassificationGreaterComparator", "return", "lte", "ClassificationLesserComparator", "gte", "default", "ctx", "context", "Context", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "getFlightByFilter", "bson", "live_flight_id"], "doc_head": "func (r *FlightsUpdateRepository) claimOperationFromClassificationComparator(comparator core.ClassificationComparator) string {\n\tswitch comparator {\n\tcase core.ClassificationGreaterComparator:\n\t\treturn \"$lte\"\n\tcase core.ClassificationLesserComparator:\n\t\treturn \"$gte\"\n\tdefault:\n\t\treturn \"$eq\"\n\t}\n}\nfunc (r *FlightsUpdateRepository) GetFlightDetailsByLiveFlightID(ctx context.Context, id string) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:GetFlightDetailsByLiveFlightID\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"id\", id),\n\t)\n\treturn r.getFlightByFilter(ctx, bson.M{\"live_flight_id\": id})\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 365, "end_line": 375, "text": "func (r *FlightsUpdateRepository) GetFlightDetailsByFlightID(ctx context.Context, id string) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:GetFlightDetailsByFlightID\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"id\", id),\n\t)\n\n\treturn r.getFlightByFilter(ctx, bson.M{\"flight_id\": id})\n}\n", "n_tokens": 99, "primary_symbol": "GetFlightDetailsByFlightID", "primary_kind": "function", "primary_span": [365, 375], "def_symbols": ["GetFlightDetailsByFlightID"], "symbols": ["GetFlightDetailsByFlightID", "func", "FlightsUpdateRepository", "ctx", "context", "Context", "string", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "return", "getFlightByFilter", "bson", "flight_id"], "doc_head": "func (r *FlightsUpdateRepository) GetFlightDetailsByFlightID(ctx context.Context, id string) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:GetFlightDetailsByFlightID\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"id\", id),\n\t)\n\treturn r.getFlightByFilter(ctx, bson.M{\"flight_id\": id})\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mongodb/flights_updates_repository.go", "rel_path": "internal/adapters/mongodb/flights_updates_repository.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 376, "end_line": 419, "text": "func (r *FlightsUpdateRepository) getFlightByFilter(ctx context.Context, filter bson.M) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:getFlightByFilter\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tvar lf liveFlight\n\tif err := r.flightsColl.FindOne(ctx, filter).Decode(&lf); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tif errors.Is(err, mongo.ErrNoDocuments) {\n\t\t\treturn nil, core.ErrFlightNotFound\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find flight\")\n\t}\n\tlfd := lf.toDomain()\n\n\tcursor, err := r.tracksColl.Find(ctx, bson.M{\"live_flight_id\": lfd.ID})\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find flight tracks\")\n\t}\n\tdefer func() {\n\t\t_ = cursor.Close(ctx)\n\t}()\n\n\tvar rawTracks []trackPoint\n\tif err := cursor.All(ctx, &rawTracks); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode flight tracks\")\n\t}\n\n\t// Convert and attach tracks\n\tlfd.Tracks = make([]core.TrackPoint, len(rawTracks))\n\tfor i, tp := range rawTracks {\n\t\tlfd.Tracks[i] = tp.toDomain()\n\t}\n\n\treturn lfd, nil\n}\n", "n_tokens": 347, "primary_symbol": "getFlightByFilter", "primary_kind": "function", "primary_span": [376, 419], "def_symbols": ["getFlightByFilter"], "symbols": ["getFlightByFilter", "func", "FlightsUpdateRepository", "ctx", "context", "Context", "filter", "bson", "core", "LiveFlight", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "var", "liveFlight", "err", "flightsColl", "FindOne", "Decode", "nil", "RecordError", "SetStatus", "codes", "Error", "errors", "mongo", "ErrNoDocuments", "return", "ErrFlightNotFound", "Wrap", "failed", "find", "flight", "lfd", "toDomain", "cursor", "tracksColl", "Find", "live_flight_id", "tracks", "Close", "rawTracks", "trackPoint", "All", "decode", "Convert", "and", "attach", "Tracks", "make", "TrackPoint", "len", "for", "range"], "doc_head": "func (r *FlightsUpdateRepository) getFlightByFilter(ctx context.Context, filter bson.M) (*core.LiveFlight, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"FlightsUpdateRepository:getFlightByFilter\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tvar lf liveFlight\n\tif err := r.flightsColl.FindOne(ctx, filter).Decode(&lf); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tif errors.Is(err, mongo.ErrNoDocuments) {\n\t\t\treturn nil, core.ErrFlightNotFound\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find flight\")\n\t}\n\tlfd := lf.toDomain()\n\tcursor, err := r.tracksColl.Find(ctx, bson.M{\"live_flight_id\": lfd.ID})\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to find flight tracks\")\n\t}\n\tdefer func() {\n\t\t_ = cursor.Close(ctx)\n\t}()\n\tvar rawTracks []trackPoint\n\tif err := cursor.All(ctx, &rawTracks); err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"mongo: failed to decode flight tracks\")\n\t}\n\t// Convert and attach tracks\n\tlfd.Tracks = make([]core.TrackPoint, len(rawTracks))\n\tfor i, tp := range rawTrac"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go", "rel_path": "internal/adapters/radarbox_tcp/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 12, "text": "package radarboxtcp\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 50, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 12], "def_symbols": [], "symbols": ["package", "radarboxtcp", "import", "context", "fmt", "time", "impalastudios", "com", "aviation", "liveflights", "internal", "core", "log", "uber", "org", "zap"], "doc_head": "package radarboxtcp\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go", "rel_path": "internal/adapters/radarbox_tcp/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 13, "end_line": 134, "text": "type RealtimeFlightData struct {\n\tID        int64  `json:\"id\"`\n\tTimestamp string `json:\"t\"`\n\tEpoch     int64  `json:\"epoch\"`\n\n\tAircraftModeSCode       string `json:\"ms\"`\n\tAircraftRegistration    string `json:\"acr\"`\n\tAircraftTypeCode        string `json:\"act\"`\n\tAircraftTypeDescription string `json:\"acd\"`\n\tAircraftPhotoUrl1       string `json:\"acphoto1\"`\n\tAircraftPhotoUrl2       string `json:\"acphoto2\"`\n\tAircraftSerialNumber    string `json:\"acsn\"`\n\tAircraftFirstFlightDate string `json:\"acff\"`\n\tCallSign                string `json:\"cs\"`\n\n\tFlightNumber                       string  `json:\"fnia\"`\n\tAirlineIcaoCode                    string  `json:\"alic\"`\n\tAirlineIataCode                    string  `json:\"alia\"`\n\tAirlineName                        string  `json:\"alna\"`\n\tLat                                float64 `json:\"la\"`\n\tLon                                float64 `json:\"lo\"`\n\tAltitude                           float64 `json:\"alt\"`\n\tHeadingDirection                   float64 `json:\"hd\"`\n\tGroundSpeed                        float64 `json:\"gs\"`\n\tVerticalSpeed                      float64 `json:\"vs\"`\n\tSquawk                             int     `json:\"sq\"`\n\tSource                             string  `json:\"so\"`\n\tEstimatedReportingStationLatitude  float64 `json:\"stcenla\"`\n\tEstimatedReportingStationLongitude float64 `json:\"stcenlo\"`\n\n\tOriginAirportLatitude             float64 `json:\"aporgla\"`\n\tOriginAirportLongitude            float64 `json:\"aporglo\"`\n\tOriginAirportIcaoCode             string  `json:\"aporgic\"`\n\tOriginAirportIataCode             string  `json:\"aporgia\"`\n\tOriginAirportName                 string  `json:\"aporgna\"`\n\tOriginAirportCity                 string  `json:\"aporgci\"`\n\tOriginAirportProvince             string  `json:\"aporgst\"`\n\tOriginAirportCountry              string  `json:\"aporgco\"`\n\tOriginAirportTimezoneUtcOffset    float64 `json:\"aporgtz\"`\n\tOriginAirportTimezoneAbbreviation string  `json:\"aporgtzns\"`\n\tOriginAirportTimezoneName         string  `json:\"aporgtznl\"`\n\n\tDestinationAirportLatitude             float64 `json:\"apdstla\"`\n\tDestinationAirportLongitude            float64 `json:\"apdstlo\"`\n\tDestinationAirportIcaoCode             string  `json:\"apdstic\"`\n\tDestinationAirportIataCode             string  `json:\"apdstia\"`\n\tDestinationAirportName                 string  `json:\"apdstna\"`\n\tDestinationAirportCity                 string  `json:\"apdstci\"`\n\tDestinationAirportProvince             string  `json:\"apdstst\"`\n\tDestinationAirportCountry              string  `json:\"apdstco\"`\n\tDestinationAirportTimezoneUtcOffset    float64 `json:\"apdsttz\"`\n\tDestinationAirportTimezoneAbbreviation string  `json:\"apdsttzns\"`\n\tDestinationAirportTimezoneName         string  `json:\"apdsttznl\"`\n\n\tTakeoffUtcTime                     string  `json:\"tkot\"`\n\tTakeoffRunway                      string  `json:\"tkorw\"`\n\tTakeoffAirportLatitude             float64 `json:\"aptkola\"`\n\tTakeoffAirportLongitude            float64 `json:\"aptkolo\"`\n\tTakeoffAirportIcaoCode             string  `json:\"aptkoic\"`\n\tTakeoffAirportIataCode             string  `json:\"aptkoia\"`\n\tTakeoffAirportName                 string  `json:\"aptkona\"`\n\tTakeoffAirportCity                 string  `json:\"aptkoci\"`\n\tTakeoffAirportProvince             string  `json:\"aptkost\"`\n\tTakeoffAirportCountry              string  `json:\"aptkoco\"`\n\tTakeoffAirportTimezoneUtcOffset    float64 `json:\"aptkotz\"`\n\tTakeoffAirportTimezoneAbbreviation string  `json:\"aptkotzns\"`\n\tTakeoffAirportTimezoneName         string  `json:\"aptkotznl\"`\n\tTakeoffLocalTime                   string  `json:\"tkotcomm\"`\n\n\tLandingUtcTime                     string  `json:\"lngt\"`\n\tLandingRunway                      string  `json:\"lngrw\"`\n\tLandingAirportLatitude             float64 `json:\"aplngla\"`\n\tLandingAirportLongitude            float64 `json:\"aplnglo\"`\n\tLandingAirportIcaoCode             string  `json:\"aplngic\"`\n\tLandingAirportIataCode             string  `json:\"aplngia\"`\n\tLandingAirportName                 string  `json:\"aplngna\"`\n\tLandingAirportCity                 string  `json:\"aplngci\"`\n\tLandingAirportProvince             string  `json:\"aplngst\"`\n\tLandingAirportCountry              string  `json:\"aplngco\"`\n\tLandingAirportTimezoneUtcOffset    float64 `json:\"aplngtz\"`\n\tLandingAirportTimezoneAbbreviation string  `json:\"aplngtzns\"`\n\tLandingAirportTimezoneName         string  `json:\"aplngtznl\"`\n\tLandingLocalTime                   string  `json:\"lngtcomm\"`\n\n\tPlannedFlightWaypoints string `json:\"wp\"`\n\tPlannedFlightRoute     string `json:\"route\"`\n\n\tDepartureScheduledLocalTime string `json:\"deps\"`\n\tDepartureEstimatedLocalTime string `json:\"depe\"`\n\tDepartureActualLocalTime    string `json:\"depa\"`\n\tDepartureTerminal           string `json:\"depterm\"`\n\tDepartureGate               string `json:\"depgate\"`\n\tDepartureCheckInDesk        string `json:\"depchec\"`\n\tDepartureDelayStatusCode    string `json:\"depdels\"`\n\tDepartureDelayDetailCode    string `json:\"depdeld\"`\n\tDepartureDelayReasonCode    string `json:\"depdelr\"`\n\n\tArrivalScheduledLocalTime string `json:\"arrs\"`\n\tArrivalEstimatedLocalTime string `json:\"arre\"`\n\tArrivalActualLocalTime    string `json:\"arra\"`\n\tArrivalTerminal           string `json:\"arrterm\"`\n\tArrivalGate               string `json:\"arrgate\"`\n\tArrivalBaggageClaim       string `json:\"arrbagg\"`\n\tArrivalDelayStatusCode    string `json:\"arrdels\"`\n\tArrivalDelayDetailCode    string `json:\"arrdeld\"`\n\tArrivalDelayReasonCode    string `json:\"arrdelr\"`\n\n\tDiversionAirportLatitude             float64 `json:\"apdivla\"`\n\tDiversionAirportLongitude            float64 `json:\"apdivlo\"`\n\tDiversionAirportIcaoCode             string  `json:\"apdivic\"`\n\tDiversionAirportIataCode             string  `json:\"apdivia\"`\n\tDiversionAirportName                 string  `json:\"apdivna\"`\n\tDiversionAirportCity                 string  `json:\"apdivci\"`\n\tDiversionAirportProvince             string  `json:\"apdivst\"`\n\tDiversionAirportCountry              string  `json:\"apdivco\"`\n\tDiversionAirportTimezoneUtcOffset    float64 `json:\"apdivtz\"`\n\tDiversionAirportTimezoneAbbreviation string  `json:\"apdivtzns\"`\n\tDiversionAirportTimezoneName         string  `json:\"apdivtznl\"`\n\n\tCodeshares string `json:\"codeshares\"`\n}\n", "n_tokens": 1539, "primary_symbol": "", "primary_kind": "", "primary_span": [13, 134], "def_symbols": [], "symbols": ["type", "RealtimeFlightData", "struct", "int64", "json", "Timestamp", "string", "Epoch", "epoch", "AircraftModeSCode", "AircraftRegistration", "acr", "AircraftTypeCode", "act", "AircraftTypeDescription", "acd", "AircraftPhotoUrl1", "acphoto1", "AircraftPhotoUrl2", "acphoto2", "AircraftSerialNumber", "acsn", "AircraftFirstFlightDate", "acff", "CallSign", "FlightNumber", "fnia", "AirlineIcaoCode", "alic", "AirlineIataCode", "alia", "AirlineName", "alna", "Lat", "float64", "Lon", "Altitude", "alt", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "int", "Source", "EstimatedReportingStationLatitude", "stcenla", "EstimatedReportingStationLongitude", "stcenlo", "OriginAirportLatitude", "aporgla", "OriginAirportLongitude", "aporglo", "OriginAirportIcaoCode", "aporgic", "OriginAirportIataCode", "aporgia", "OriginAirportName", "aporgna", "OriginAirportCity", "aporgci", "OriginAirportProvince", "aporgst", "OriginAirportCountry", "aporgco", "OriginAirportTimezoneUtcOffset", "aporgtz", "OriginAirportTimezoneAbbreviation", "aporgtzns", "OriginAirportTimezoneName", "aporgtznl", "DestinationAirportLatitude", "apdstla", "DestinationAirportLongitude", "apdstlo", "DestinationAirportIcaoCode", "apdstic", "DestinationAirportIataCode", "apdstia", "DestinationAirportName", "apdstna", "DestinationAirportCity", "apdstci", "DestinationAirportProvince", "apdstst", "DestinationAirportCountry", "apdstco", "DestinationAirportTimezoneUtcOffset", "apdsttz", "DestinationAirportTimezoneAbbreviation", "apdsttzns", "DestinationAirportTimezoneName", "apdsttznl", "TakeoffUtcTime", "tkot", "TakeoffRunway", "tkorw", "TakeoffAirportLatitude", "aptkola", "TakeoffAirportLongitude", "aptkolo", "TakeoffAirportIcaoCode", "aptkoic", "TakeoffAirportIataCode", "aptkoia", "TakeoffAirportName", "aptkona", "TakeoffAirportCity", "aptkoci", "TakeoffAirportProvince", "aptkost", "TakeoffAirportCountry", "aptkoco", "TakeoffAirportTimezoneUtcOffset", "aptkotz", "TakeoffAirportTimezoneAbbreviation", "aptkotzns", "TakeoffAirportTimezoneName", "aptkotznl", "TakeoffLocalTime", "tkotcomm", "LandingUtcTime", "lngt", "LandingRunway", "lngrw", "LandingAirportLatitude", "aplngla", "LandingAirportLongitude", "aplnglo", "LandingAirportIcaoCode", "aplngic", "LandingAirportIataCode", "aplngia", "LandingAirportName", "aplngna", "LandingAirportCity", "aplngci", "LandingAirportProvince", "aplngst", "LandingAirportCountry", "aplngco", "LandingAirportTimezoneUtcOffset", "aplngtz", "LandingAirportTimezoneAbbreviation", "aplngtzns", "LandingAirportTimezoneName", "aplngtznl", "LandingLocalTime", "lngtcomm", "PlannedFlightWaypoints", "PlannedFlightRoute", "route", "DepartureScheduledLocalTime", "deps", "DepartureEstimatedLocalTime", "depe", "DepartureActualLocalTime", "depa", "DepartureTerminal", "depterm", "DepartureGate", "depgate", "DepartureCheckInDesk", "depchec", "DepartureDelayStatusCode", "depdels", "DepartureDelayDetailCode", "depdeld", "DepartureDelayReasonCode", "depdelr", "ArrivalScheduledLocalTime", "arrs", "ArrivalEstimatedLocalTime", "arre", "ArrivalActualLocalTime", "arra", "ArrivalTerminal", "arrterm", "ArrivalGate", "arrgate", "ArrivalBaggageClaim", "arrbagg", "ArrivalDelayStatusCode", "arrdels", "ArrivalDelayDetailCode", "arrdeld", "ArrivalDelayReasonCode", "arrdelr", "DiversionAirportLatitude", "apdivla", "DiversionAirportLongitude", "apdivlo", "DiversionAirportIcaoCode", "apdivic", "DiversionAirportIataCode", "apdivia", "DiversionAirportName", "apdivna", "DiversionAirportCity", "apdivci", "DiversionAirportProvince", "apdivst", "DiversionAirportCountry", "apdivco", "DiversionAirportTimezoneUtcOffset", "apdivtz", "DiversionAirportTimezoneAbbreviation", "apdivtzns", "DiversionAirportTimezoneName", "apdivtznl", "Codeshares", "codeshares"], "doc_head": "type RealtimeFlightData struct {\n\tID        int64  `json:\"id\"`\n\tTimestamp string `json:\"t\"`\n\tEpoch     int64  `json:\"epoch\"`\n\tAircraftModeSCode       string `json:\"ms\"`\n\tAircraftRegistration    string `json:\"acr\"`\n\tAircraftTypeCode        string `json:\"act\"`\n\tAircraftTypeDescription string `json:\"acd\"`\n\tAircraftPhotoUrl1       string `json:\"acphoto1\"`\n\tAircraftPhotoUrl2       string `json:\"acphoto2\"`\n\tAircraftSerialNumber    string `json:\"acsn\"`\n\tAircraftFirstFlightDate string `json:\"acff\"`\n\tCallSign                string `json:\"cs\"`\n\tFlightNumber                       string  `json:\"fnia\"`\n\tAirlineIcaoCode                    string  `json:\"alic\"`\n\tAirlineIataCode                    string  `json:\"alia\"`\n\tAirlineName                        string  `json:\"alna\"`\n\tLat                                float64 `json:\"la\"`\n\tLon                                float64 `json:\"lo\"`\n\tAltitude                           float64 `json:\"alt\"`\n\tHeadingDirection                   float64 `json:\"hd\"`\n\tGroundSpeed                        float64 `json:\"gs\"`\n\tVerticalSpeed                      float64 `json:\"vs\"`\n\tSquawk                             int     `json:\"sq\"`\n\tSource                            "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go", "rel_path": "internal/adapters/radarbox_tcp/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 135, "end_line": 138, "text": "func (r *RealtimeFlightData) HasLiveFlightID() bool {\n\treturn r.AirlineIataCode != \"\" && r.FlightNumber != \"\" && r.OriginAirportIataCode != \"\" && r.DestinationAirportIataCode != \"\" && r.DepartureScheduledLocalTime != \"\"\n}\n", "n_tokens": 64, "primary_symbol": "HasLiveFlightID", "primary_kind": "function", "primary_span": [135, 138], "def_symbols": ["HasLiveFlightID"], "symbols": ["HasLiveFlightID", "func", "RealtimeFlightData", "bool", "return", "AirlineIataCode", "FlightNumber", "OriginAirportIataCode", "DestinationAirportIataCode", "DepartureScheduledLocalTime"], "doc_head": "func (r *RealtimeFlightData) HasLiveFlightID() bool {\n\treturn r.AirlineIataCode != \"\" && r.FlightNumber != \"\" && r.OriginAirportIataCode != \"\" && r.DestinationAirportIataCode != \"\" && r.DepartureScheduledLocalTime != \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go", "rel_path": "internal/adapters/radarbox_tcp/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 139, "end_line": 161, "text": "func (r *RealtimeFlightData) getLiveFlightID() string {\n\tdepartureTime, err := time.Parse(localTimeLayout, r.DepartureScheduledLocalTime)\n\tif err != nil {\n\t\tlog.Error(context.TODO(), \"Failed to parse departure time\", zap.Error(err))\n\t}\n\n\tairlineDesignator := r.FlightNumber[:2]\n\tflightNumber := r.FlightNumber[2:]\n\n\treturn fmt.Sprintf(\n\t\t\"%s_%s_%s_%s_%s\",\n\t\tdepartureTime.Format(\"20060102\"),\n\t\tairlineDesignator,\n\t\tflightNumber,\n\t\tr.OriginAirportIataCode,\n\t\tr.DestinationAirportIataCode,\n\t)\n}\n\nfunc (r *RealtimeFlightData) getAirlineDesignator() string {\n\treturn r.FlightNumber[:2]\n}\n", "n_tokens": 170, "primary_symbol": "getLiveFlightID", "primary_kind": "function", "primary_span": [139, 161], "def_symbols": ["getLiveFlightID", "getAirlineDesignator"], "symbols": ["getLiveFlightID", "getAirlineDesignator", "func", "RealtimeFlightData", "string", "departureTime", "err", "time", "Parse", "localTimeLayout", "DepartureScheduledLocalTime", "nil", "log", "Error", "context", "TODO", "Failed", "parse", "departure", "zap", "airlineDesignator", "FlightNumber", "flightNumber", "return", "fmt", "Sprintf", "Format", "OriginAirportIataCode", "DestinationAirportIataCode"], "doc_head": "func (r *RealtimeFlightData) getLiveFlightID() string {\n\tdepartureTime, err := time.Parse(localTimeLayout, r.DepartureScheduledLocalTime)\n\tif err != nil {\n\t\tlog.Error(context.TODO(), \"Failed to parse departure time\", zap.Error(err))\n\t}\n\tairlineDesignator := r.FlightNumber[:2]\n\tflightNumber := r.FlightNumber[2:]\n\treturn fmt.Sprintf(\n\t\t\"%s_%s_%s_%s_%s\",\n\t\tdepartureTime.Format(\"20060102\"),\n\t\tairlineDesignator,\n\t\tflightNumber,\n\t\tr.OriginAirportIataCode,\n\t\tr.DestinationAirportIataCode,\n\t)\n}\nfunc (r *RealtimeFlightData) getAirlineDesignator() string {\n\treturn r.FlightNumber[:2]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go", "rel_path": "internal/adapters/radarbox_tcp/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 162, "end_line": 167, "text": "func (r *RealtimeFlightData) getFlightNumber() string {\n\treturn r.FlightNumber[2:]\n}\n\nconst localTimeLayout = \"2006-01-02 15:04:05\"\n", "n_tokens": 43, "primary_symbol": "getFlightNumber", "primary_kind": "function", "primary_span": [162, 167], "def_symbols": ["getFlightNumber"], "symbols": ["getFlightNumber", "func", "RealtimeFlightData", "string", "return", "FlightNumber", "const", "localTimeLayout"], "doc_head": "func (r *RealtimeFlightData) getFlightNumber() string {\n\treturn r.FlightNumber[2:]\n}\nconst localTimeLayout = \"2006-01-02 15:04:05\""}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/models.go", "rel_path": "internal/adapters/radarbox_tcp/models.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 168, "end_line": 200, "text": "func (r *RealtimeFlightData) toDomain() core.LiveFlightUpdate {\n\tat, err := time.Parse(localTimeLayout, r.Timestamp)\n\tif err != nil {\n\t\tlog.Error(context.TODO(), \"Failed to parse timestamp\", zap.Error(err))\n\t}\n\n\tdepartureTime, err := time.Parse(localTimeLayout, r.DepartureScheduledLocalTime)\n\tif err != nil {\n\t\tlog.Error(context.TODO(), \"Failed to parse departue timestamp\", zap.Error(err))\n\t}\n\n\treturn core.LiveFlightUpdate{\n\t\tID:                   r.getLiveFlightID(),\n\t\tFlightNumber:         r.getFlightNumber(),\n\t\tAirlineDesignator:    r.getAirlineDesignator(),\n\t\tDepartureTime:        departureTime,\n\t\tDepartureAirportICAO: r.OriginAirportIcaoCode,\n\t\tDepartureAirportIATA: r.OriginAirportIataCode,\n\t\tArrivalAirportICAO:   r.DestinationAirportIcaoCode,\n\t\tArrivalAirportIATA:   r.DestinationAirportIataCode,\n\t\tPosition: core.Coordinate{\n\t\t\tLat: r.Lat,\n\t\t\tLon: r.Lon,\n\t\t},\n\t\tAltitude:         r.Altitude,\n\t\tHeadingDirection: r.HeadingDirection,\n\t\tGroundSpeed:      r.GroundSpeed,\n\t\tVerticalSpeed:    r.VerticalSpeed,\n\t\tSquawk:           r.Squawk,\n\t\tCreatedAt:        at,\n\t}\n}\n", "n_tokens": 306, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [168, 200], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "RealtimeFlightData", "core", "LiveFlightUpdate", "err", "time", "Parse", "localTimeLayout", "Timestamp", "nil", "log", "Error", "context", "TODO", "Failed", "parse", "timestamp", "zap", "departureTime", "DepartureScheduledLocalTime", "departue", "return", "getLiveFlightID", "FlightNumber", "getFlightNumber", "AirlineDesignator", "getAirlineDesignator", "DepartureTime", "DepartureAirportICAO", "OriginAirportIcaoCode", "DepartureAirportIATA", "OriginAirportIataCode", "ArrivalAirportICAO", "DestinationAirportIcaoCode", "ArrivalAirportIATA", "DestinationAirportIataCode", "Position", "Coordinate", "Lat", "Lon", "Altitude", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "CreatedAt"], "doc_head": "func (r *RealtimeFlightData) toDomain() core.LiveFlightUpdate {\n\tat, err := time.Parse(localTimeLayout, r.Timestamp)\n\tif err != nil {\n\t\tlog.Error(context.TODO(), \"Failed to parse timestamp\", zap.Error(err))\n\t}\n\tdepartureTime, err := time.Parse(localTimeLayout, r.DepartureScheduledLocalTime)\n\tif err != nil {\n\t\tlog.Error(context.TODO(), \"Failed to parse departue timestamp\", zap.Error(err))\n\t}\n\treturn core.LiveFlightUpdate{\n\t\tID:                   r.getLiveFlightID(),\n\t\tFlightNumber:         r.getFlightNumber(),\n\t\tAirlineDesignator:    r.getAirlineDesignator(),\n\t\tDepartureTime:        departureTime,\n\t\tDepartureAirportICAO: r.OriginAirportIcaoCode,\n\t\tDepartureAirportIATA: r.OriginAirportIataCode,\n\t\tArrivalAirportICAO:   r.DestinationAirportIcaoCode,\n\t\tArrivalAirportIATA:   r.DestinationAirportIataCode,\n\t\tPosition: core.Coordinate{\n\t\t\tLat: r.Lat,\n\t\t\tLon: r.Lon,\n\t\t},\n\t\tAltitude:         r.Altitude,\n\t\tHeadingDirection: r.HeadingDirection,\n\t\tGroundSpeed:      r.GroundSpeed,\n\t\tVerticalSpeed:    r.VerticalSpeed,\n\t\tSquawk:           r.Squawk,\n\t\tCreatedAt:        at,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 30, "text": "package radarboxtcp\n\nimport (\n\t\"bufio\"\n\t\"compress/zlib\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"net\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/ssh\"\n)\n\ntype Config struct {\n\tHost string `mapstructure:\"host\"`\n\tSSH  SSH    `mapstructure:\"ssh\"`\n}\n\ntype SSH struct {\n\tHost       string `mapstructure:\"host\"`\n\tPrivateKey string `mapstructure:\"private-key\"`\n\tUser       string `mapstructure:\"user\"`\n}\n", "n_tokens": 148, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 30], "def_symbols": [], "symbols": ["package", "radarboxtcp", "import", "bufio", "compress", "zlib", "context", "encoding", "json", "net", "regexp", "strings", "time", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "log", "uber", "org", "zap", "golang", "crypto", "ssh", "type", "Config", "struct", "Host", "string", "mapstructure", "host", "SSH", "PrivateKey", "private", "key", "User", "user"], "doc_head": "package radarboxtcp\nimport (\n\t\"bufio\"\n\t\"compress/zlib\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"net\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/ssh\"\n)\ntype Config struct {\n\tHost string `mapstructure:\"host\"`\n\tSSH  SSH    `mapstructure:\"ssh\"`\n}\ntype SSH struct {\n\tHost       string `mapstructure:\"host\"`\n\tPrivateKey string `mapstructure:\"private-key\"`\n\tUser       string `mapstructure:\"user\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 31, "end_line": 53, "text": "type Client struct {\n\tcfg           Config\n\tsshc          *ssh.Client\n\tconn          net.Conn\n\tmetrics       *metrics\n\tnumberOfReads int\n}\n\nconst (\n\tbufSize         = 64 * 1024\n\tinitialBackoff  = 1 * time.Second\n\tmaxBackoffDelay = 5 * time.Minute\n\tmetricsInterval = 5 * time.Minute\n\trotateAfterMsgs = 50000\n)\n\nfunc New(cfg Config) *Client {\n\treturn &Client{\n\t\tcfg:     cfg,\n\t\tmetrics: newMetrics(metricsInterval),\n\t}\n}\n", "n_tokens": 120, "primary_symbol": "New", "primary_kind": "function", "primary_span": [47, 53], "def_symbols": ["New"], "symbols": ["New", "type", "Client", "struct", "cfg", "Config", "sshc", "ssh", "conn", "net", "Conn", "metrics", "numberOfReads", "int", "const", "bufSize", "initialBackoff", "time", "Second", "maxBackoffDelay", "Minute", "metricsInterval", "rotateAfterMsgs", "func", "return", "newMetrics"], "doc_head": "type Client struct {\n\tcfg           Config\n\tsshc          *ssh.Client\n\tconn          net.Conn\n\tmetrics       *metrics\n\tnumberOfReads int\n}\nconst (\n\tbufSize         = 64 * 1024\n\tinitialBackoff  = 1 * time.Second\n\tmaxBackoffDelay = 5 * time.Minute\n\tmetricsInterval = 5 * time.Minute\n\trotateAfterMsgs = 50000\n)\nfunc New(cfg Config) *Client {\n\treturn &Client{\n\t\tcfg:     cfg,\n\t\tmetrics: newMetrics(metricsInterval),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 54, "end_line": 85, "text": "// Connect ensures SSH exists and (re)opens the inner TCP channel.\nfunc (c *Client) Connect(ctx context.Context) error {\n\tif c.sshc == nil {\n\t\tsigner, err := ssh.ParsePrivateKey([]byte(c.cfg.SSH.PrivateKey))\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to parse private key\")\n\t\t}\n\t\tsshclient, err := ssh.Dial(\"tcp\", c.cfg.SSH.Host, &ssh.ClientConfig{\n\t\t\tUser:              c.cfg.SSH.User,\n\t\t\tAuth:              []ssh.AuthMethod{ssh.PublicKeys(signer)},\n\t\t\tHostKeyCallback:   ssh.InsecureIgnoreHostKey(),\n\t\t\tHostKeyAlgorithms: []string{signer.PublicKey().Type()},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to dial through ssh\")\n\t\t}\n\t\tc.sshc = sshclient\n\t}\n\n\tconn, err := c.sshc.Dial(\"tcp\", c.cfg.Host)\n\tif err != nil {\n\t\tc.metrics.incrementSSHReset()\n\t\t_ = c.sshc.Close()\n\t\tc.sshc = nil\n\t\treturn errors.Wrap(err, \"failed to dial tcp over ssh\")\n\t}\n\n\tc.conn = conn\n\tc.numberOfReads = 0\n\treturn nil\n}\n", "n_tokens": 271, "primary_symbol": "Connect", "primary_kind": "function", "primary_span": [55, 85], "def_symbols": ["Connect"], "symbols": ["Connect", "ensures", "SSH", "exists", "and", "opens", "the", "inner", "TCP", "channel", "func", "Client", "ctx", "context", "Context", "error", "sshc", "nil", "signer", "err", "ssh", "ParsePrivateKey", "byte", "cfg", "PrivateKey", "return", "errors", "Wrap", "failed", "parse", "private", "key", "sshclient", "Dial", "tcp", "Host", "ClientConfig", "User", "Auth", "AuthMethod", "PublicKeys", "HostKeyCallback", "InsecureIgnoreHostKey", "HostKeyAlgorithms", "string", "PublicKey", "Type", "dial", "through", "conn", "metrics", "incrementSSHReset", "Close", "over", "numberOfReads"], "doc_head": "// Connect ensures SSH exists and (re)opens the inner TCP channel.\nfunc (c *Client) Connect(ctx context.Context) error {\n\tif c.sshc == nil {\n\t\tsigner, err := ssh.ParsePrivateKey([]byte(c.cfg.SSH.PrivateKey))\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to parse private key\")\n\t\t}\n\t\tsshclient, err := ssh.Dial(\"tcp\", c.cfg.SSH.Host, &ssh.ClientConfig{\n\t\t\tUser:              c.cfg.SSH.User,\n\t\t\tAuth:              []ssh.AuthMethod{ssh.PublicKeys(signer)},\n\t\t\tHostKeyCallback:   ssh.InsecureIgnoreHostKey(),\n\t\t\tHostKeyAlgorithms: []string{signer.PublicKey().Type()},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to dial through ssh\")\n\t\t}\n\t\tc.sshc = sshclient\n\t}\n\tconn, err := c.sshc.Dial(\"tcp\", c.cfg.Host)\n\tif err != nil {\n\t\tc.metrics.incrementSSHReset()\n\t\t_ = c.sshc.Close()\n\t\tc.sshc = nil\n\t\treturn errors.Wrap(err, \"failed to dial tcp over ssh\")\n\t}\n\tc.conn = conn\n\tc.numberOfReads = 0\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 86, "end_line": 165, "text": "// Read keeps the stream alive, with capped exponential backoff and SSH-reset metrics.\n// Rules:\n//   - Create ONE zlib reader per TCP connection; reuse it for many lines.\n//   - After each successful line read, increment numberOfReads; if >= rotateAfterMsgs, rotate the connection.\n//   - Any read/zlib error (including EOF) closes and reconnects.\nfunc (c *Client) Read(ctx context.Context, subscriber chan<- core.LiveFlightUpdate) error {\n\tdefer func() {\n\t\tif c.conn != nil {\n\t\t\t_ = c.conn.Close()\n\t\t}\n\t\tif c.sshc != nil {\n\t\t\t_ = c.sshc.Close()\n\t\t}\n\t}()\n\n\tbackoff := initialBackoff\n\tattempt := 1\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Context done, terminating radarbox tcp reader\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\n\t\tc.metrics.logIfNeeded(ctx)\n\n\t\t// Connect (or reconnect) if needed\n\t\tif c.conn == nil {\n\t\t\tif err := c.Connect(ctx); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to reconnect to radarbox tcp server\",\n\t\t\t\t\tzap.Int(\"attempt\", attempt), zap.Error(err),\n\t\t\t\t)\n\t\t\t\tattempt++\n\t\t\t\ttime.Sleep(backoff)\n\t\t\t\tbackoff *= 2\n\t\t\t\tif backoff > maxBackoffDelay {\n\t\t\t\t\tbackoff = maxBackoffDelay\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tc.metrics.recordSuccessfulConnect()\n\t\t\tbackoff = initialBackoff\n\t\t\tattempt = 1\n\t\t}\n\n\t\t// Create ONE zlib reader for this TCP connection\n\t\tzr, err := zlib.NewReader(c.conn)\n\t\tif err != nil {\n\t\t\t_ = c.conn.Close()\n\t\t\tc.conn = nil\n\t\t\tcontinue\n\t\t}\n\n\t\treader := bufio.NewReaderSize(zr, bufSize)\n\n\t\tfor {\n\t\t\terr = c.readLiveFlightUpdate(ctx, reader, subscriber)\n\t\t\tif err != nil {\n\t\t\t\t_ = zr.Close()\n\t\t\t\t_ = c.conn.Close()\n\t\t\t\tc.conn = nil\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tc.numberOfReads++\n\t\t\tif c.numberOfReads >= rotateAfterMsgs {\n\t\t\t\tc.numberOfReads = 0\n\t\t\t\t_ = zr.Close()\n\t\t\t\t_ = c.conn.Close()\n\t\t\t\tc.conn = nil\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 506, "primary_symbol": "Read", "primary_kind": "function", "primary_span": [91, 165], "def_symbols": ["Read"], "symbols": ["Read", "keeps", "the", "stream", "alive", "with", "capped", "exponential", "backoff", "and", "SSH", "reset", "metrics", "Rules", "Create", "ONE", "zlib", "reader", "per", "TCP", "connection", "reuse", "for", "many", "lines", "After", "each", "successful", "line", "read", "increment", "numberOfReads", "rotateAfterMsgs", "rotate", "Any", "error", "including", "EOF", "closes", "reconnects", "func", "Client", "ctx", "context", "Context", "subscriber", "chan", "core", "LiveFlightUpdate", "defer", "conn", "nil", "Close", "sshc", "initialBackoff", "attempt", "select", "case", "Done", "log", "Info", "done", "terminating", "radarbox", "tcp", "return", "default", "logIfNeeded", "Connect", "reconnect", "needed", "err", "Error", "Failed", "server", "zap", "Int", "time", "Sleep", "maxBackoffDelay", "continue", "recordSuccessfulConnect", "this", "NewReader", "bufio", "NewReaderSize", "bufSize", "readLiveFlightUpdate", "break"], "doc_head": "// Read keeps the stream alive, with capped exponential backoff and SSH-reset metrics.\n// Rules:\n//   - Create ONE zlib reader per TCP connection; reuse it for many lines.\n//   - After each successful line read, increment numberOfReads; if >= rotateAfterMsgs, rotate the connection.\n//   - Any read/zlib error (including EOF) closes and reconnects.\nfunc (c *Client) Read(ctx context.Context, subscriber chan<- core.LiveFlightUpdate) error {\n\tdefer func() {\n\t\tif c.conn != nil {\n\t\t\t_ = c.conn.Close()\n\t\t}\n\t\tif c.sshc != nil {\n\t\t\t_ = c.sshc.Close()\n\t\t}\n\t}()\n\tbackoff := initialBackoff\n\tattempt := 1\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Context done, terminating radarbox tcp reader\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\t\tc.metrics.logIfNeeded(ctx)\n\t\t// Connect (or reconnect) if needed\n\t\tif c.conn == nil {\n\t\t\tif err := c.Connect(ctx); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to reconnect to radarbox tcp server\",\n\t\t\t\t\tzap.Int(\"attempt\", attempt), zap.Error(err),\n\t\t\t\t)\n\t\t\t\tattempt++\n\t\t\t\ttime.Sleep(backoff)\n\t\t\t\tbackoff *= 2\n\t\t\t\tif backoff > maxBackoffDelay {\n\t\t\t\t\tbackoff = maxBackoffDelay\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tc.metrics.recordSuccessfulConnect()\n\t\t\tbackoff = initialBackoff\n\t\t\tatt"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 166, "end_line": 202, "text": "// readLiveFlightUpdate reads ONE line, dispatches if applicable, then returns.\n// Returns nil on success; a wrapped error (incl. io.EOF) ends the current connection.\nfunc (c *Client) readLiveFlightUpdate(ctx context.Context, reader *bufio.Reader, sub chan<- core.LiveFlightUpdate) error {\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(ctx, \"Context done, terminating read loop\")\n\t\treturn ctx.Err()\n\tdefault:\n\t}\n\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read string from reader\")\n\t}\n\n\ts := strings.Trim(line, \"\\n\\t\")\n\ts = strings.ReplaceAll(s, \"\\t\", \"\")\n\n\tvar msg RealtimeFlightData\n\tif err := json.Unmarshal([]byte(s), &msg); err != nil {\n\t\tlog.Debug(ctx, \"Initial unmarshal failed, sanitizing\", zap.Error(err), zap.String(\"message\", s))\n\t\tsafe := fixInvalidEscapes(s)\n\t\tif err2 := json.Unmarshal([]byte(safe), &msg); err2 != nil {\n\t\t\tlog.Warn(ctx, \"Failed to unmarshal even after sanitizing\", zap.Error(err2), zap.String(\"message\", safe))\n\t\t\treturn nil // skip bad line; keep connection\n\t\t}\n\t}\n\n\tif msg.HasLiveFlightID() {\n\t\tsub <- msg.toDomain()\n\t}\n\n\treturn nil\n}\n\nvar invalidEscape = regexp.MustCompile(`\\\\[^\"\\\\/bfnrtu]`)\n", "n_tokens": 305, "primary_symbol": "readLiveFlightUpdate", "primary_kind": "function", "primary_span": [168, 202], "def_symbols": ["readLiveFlightUpdate"], "symbols": ["readLiveFlightUpdate", "reads", "ONE", "line", "dispatches", "applicable", "then", "returns", "Returns", "nil", "success", "wrapped", "error", "incl", "EOF", "ends", "the", "current", "connection", "func", "Client", "ctx", "context", "Context", "reader", "bufio", "Reader", "sub", "chan", "core", "LiveFlightUpdate", "select", "case", "Done", "log", "Info", "done", "terminating", "read", "loop", "return", "Err", "default", "err", "ReadString", "errors", "Wrap", "failed", "string", "from", "strings", "Trim", "ReplaceAll", "var", "msg", "RealtimeFlightData", "json", "Unmarshal", "byte", "Debug", "Initial", "unmarshal", "sanitizing", "zap", "Error", "String", "message", "safe", "fixInvalidEscapes", "err2", "Warn", "Failed", "even", "after", "skip", "bad", "keep", "HasLiveFlightID", "toDomain", "invalidEscape", "regexp", "MustCompile", "bfnrtu"], "doc_head": "// readLiveFlightUpdate reads ONE line, dispatches if applicable, then returns.\n// Returns nil on success; a wrapped error (incl. io.EOF) ends the current connection.\nfunc (c *Client) readLiveFlightUpdate(ctx context.Context, reader *bufio.Reader, sub chan<- core.LiveFlightUpdate) error {\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(ctx, \"Context done, terminating read loop\")\n\t\treturn ctx.Err()\n\tdefault:\n\t}\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read string from reader\")\n\t}\n\ts := strings.Trim(line, \"\\n\\t\")\n\ts = strings.ReplaceAll(s, \"\\t\", \"\")\n\tvar msg RealtimeFlightData\n\tif err := json.Unmarshal([]byte(s), &msg); err != nil {\n\t\tlog.Debug(ctx, \"Initial unmarshal failed, sanitizing\", zap.Error(err), zap.String(\"message\", s))\n\t\tsafe := fixInvalidEscapes(s)\n\t\tif err2 := json.Unmarshal([]byte(safe), &msg); err2 != nil {\n\t\t\tlog.Warn(ctx, \"Failed to unmarshal even after sanitizing\", zap.Error(err2), zap.String(\"message\", safe))\n\t\t\treturn nil // skip bad line; keep connection\n\t\t}\n\t}\n\tif msg.HasLiveFlightID() {\n\t\tsub <- msg.toDomain()\n\t}\n\treturn nil\n}\nvar invalidEscape = regexp.MustCompile(`\\\\[^\"\\\\/bfnrtu]`)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 203, "end_line": 232, "text": "func fixInvalidEscapes(s string) string {\n\treturn invalidEscape.ReplaceAllStringFunc(s, func(m string) string { return m[1:] })\n}\n\nfunc (c *Client) Close() error {\n\tif c.conn != nil {\n\t\t_ = c.conn.Close()\n\t\tc.conn = nil\n\t}\n\tif c.sshc != nil {\n\t\t_ = c.sshc.Close()\n\t\tc.sshc = nil\n\t}\n\treturn nil\n}\n\ntype metrics struct {\n\tsshResets      int\n\tlastSSHReset   time.Time\n\tlastSuccessful time.Time\n\tlastLog        time.Time\n\tinterval       time.Duration\n}\n\nfunc newMetrics(interval time.Duration) *metrics {\n\treturn &metrics{lastLog: time.Now(), interval: interval}\n}\n\nfunc (m *metrics) incrementSSHReset()       { m.sshResets++; m.lastSSHReset = time.Now() }\nfunc (m *metrics) recordSuccessfulConnect() { m.lastSuccessful = time.Now() }", "n_tokens": 203, "primary_symbol": "fixInvalidEscapes", "primary_kind": "function", "primary_span": [203, 232], "def_symbols": ["fixInvalidEscapes", "Close", "newMetrics", "incrementSSHReset", "recordSuccessfulConnect"], "symbols": ["fixInvalidEscapes", "Close", "newMetrics", "incrementSSHReset", "recordSuccessfulConnect", "func", "string", "return", "invalidEscape", "ReplaceAllStringFunc", "Client", "error", "conn", "nil", "sshc", "type", "metrics", "struct", "sshResets", "int", "lastSSHReset", "time", "Time", "lastSuccessful", "lastLog", "interval", "Duration", "Now"], "doc_head": "func fixInvalidEscapes(s string) string {\n\treturn invalidEscape.ReplaceAllStringFunc(s, func(m string) string { return m[1:] })\n}\nfunc (c *Client) Close() error {\n\tif c.conn != nil {\n\t\t_ = c.conn.Close()\n\t\tc.conn = nil\n\t}\n\tif c.sshc != nil {\n\t\t_ = c.sshc.Close()\n\t\tc.sshc = nil\n\t}\n\treturn nil\n}\ntype metrics struct {\n\tsshResets      int\n\tlastSSHReset   time.Time\n\tlastSuccessful time.Time\n\tlastLog        time.Time\n\tinterval       time.Duration\n}\nfunc newMetrics(interval time.Duration) *metrics {\n\treturn &metrics{lastLog: time.Now(), interval: interval}\n}\nfunc (m *metrics) incrementSSHReset()       { m.sshResets++; m.lastSSHReset = time.Now() }\nfunc (m *metrics) recordSuccessfulConnect() { m.lastSuccessful = time.Now() }"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 233, "end_line": 234, "text": "func (m *metrics) reset()                   { m.sshResets = 0; m.lastLog = time.Now() }\n", "n_tokens": 27, "primary_symbol": "reset", "primary_kind": "function", "primary_span": [233, 234], "def_symbols": ["reset"], "symbols": ["reset", "func", "metrics", "sshResets", "lastLog", "time", "Now"], "doc_head": "func (m *metrics) reset()                   { m.sshResets = 0; m.lastLog = time.Now() }"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/radarbox_tcp/tcp.go", "rel_path": "internal/adapters/radarbox_tcp/tcp.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 235, "end_line": 253, "text": "func (m *metrics) logIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(m.lastLog) < m.interval || m.sshResets == 0 {\n\t\treturn\n\t}\n\tdur := now.Sub(m.lastLog)\n\tavg := float64(m.sshResets) / dur.Minutes()\n\n\tlog.Debug(ctx, \"RadarBox SSH reset stats\",\n\t\tzap.String(\"last_log\", m.lastLog.UTC().Format(time.RFC3339)),\n\t\tzap.String(\"last_successful_connect\", m.lastSuccessful.UTC().Format(time.RFC3339)),\n\t\tzap.String(\"last_ssh_reset\", m.lastSSHReset.UTC().Format(time.RFC3339)),\n\t\tzap.Int(\"ssh_resets\", m.sshResets),\n\t\tzap.Float64(\"avg_ssh_resets_per_min\", avg),\n\t)\n\n\tm.reset()\n}\n", "n_tokens": 179, "primary_symbol": "logIfNeeded", "primary_kind": "function", "primary_span": [235, 253], "def_symbols": ["logIfNeeded"], "symbols": ["logIfNeeded", "func", "metrics", "ctx", "context", "Context", "now", "time", "Now", "Sub", "lastLog", "interval", "sshResets", "return", "dur", "avg", "float64", "Minutes", "log", "Debug", "RadarBox", "SSH", "reset", "stats", "zap", "String", "last_log", "UTC", "Format", "RFC3339", "last_successful_connect", "lastSuccessful", "last_ssh_reset", "lastSSHReset", "Int", "ssh_resets", "Float64", "avg_ssh_resets_per_min"], "doc_head": "func (m *metrics) logIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(m.lastLog) < m.interval || m.sshResets == 0 {\n\t\treturn\n\t}\n\tdur := now.Sub(m.lastLog)\n\tavg := float64(m.sshResets) / dur.Minutes()\n\tlog.Debug(ctx, \"RadarBox SSH reset stats\",\n\t\tzap.String(\"last_log\", m.lastLog.UTC().Format(time.RFC3339)),\n\t\tzap.String(\"last_successful_connect\", m.lastSuccessful.UTC().Format(time.RFC3339)),\n\t\tzap.String(\"last_ssh_reset\", m.lastSSHReset.UTC().Format(time.RFC3339)),\n\t\tzap.Int(\"ssh_resets\", m.sshResets),\n\t\tzap.Float64(\"avg_ssh_resets_per_min\", avg),\n\t)\n\tm.reset()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/health.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/health.go", "rel_path": "internal/adapters/handlers/http/health.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package http\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype HealthHandler struct {\n}\n\nfunc NewHealthHandler() *HealthHandler {\n\treturn &HealthHandler{}\n}\n\nfunc (h *HealthHandler) Register(g *gin.RouterGroup) {\n\tg.GET(\"/health\", h.health)\n}\n\nfunc (h *HealthHandler) health(c *gin.Context) {\n\tnow := time.Now().UTC().Format(time.RFC3339)\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse[string](now, \"ok\", \"I'm healthy.\"),\n\t)\n}\n", "n_tokens": 140, "primary_symbol": "NewHealthHandler", "primary_kind": "function", "primary_span": [13, 28], "def_symbols": ["NewHealthHandler", "Register", "health"], "symbols": ["NewHealthHandler", "Register", "health", "package", "http", "import", "github", "com", "gin", "gonic", "impalastudios", "aviation", "liveflights", "pkg", "xhttp", "net", "time", "type", "HealthHandler", "struct", "func", "return", "RouterGroup", "GET", "Context", "now", "Now", "UTC", "Format", "RFC3339", "PureJSON", "StatusOK", "NewResponse", "string", "healthy"], "doc_head": "package http\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"net/http\"\n\t\"time\"\n)\ntype HealthHandler struct {\n}\nfunc NewHealthHandler() *HealthHandler {\n\treturn &HealthHandler{}\n}\nfunc (h *HealthHandler) Register(g *gin.RouterGroup) {\n\tg.GET(\"/health\", h.health)\n}\nfunc (h *HealthHandler) health(c *gin.Context) {\n\tnow := time.Now().UTC().Format(time.RFC3339)\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse[string](now, \"ok\", \"I'm healthy.\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/models.go", "rel_path": "internal/adapters/handlers/http/v0/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package v0\n\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n\ntype (\n\tliveFlightWithin struct {\n\t\tID               string     `json:\"live_flight_id\"`\n\t\tFlightID         *string    `json:\"flight_id,omitempty\"`\n\t\tPosition         coordinate `json:\"position\"`\n\t\tAltitude         float64    `json:\"altitude\"`\n\t\tHeadingDirection float64    `json:\"heading_direction\"`\n\t}\n\n\tcoordinate struct {\n\t\tLat float64 `json:\"lat\"`\n\t\tLon float64 `json:\"lon\"`\n\t}\n", "n_tokens": 122, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 20], "def_symbols": [], "symbols": ["package", "import", "impalastudios", "com", "aviation", "liveflights", "internal", "core", "type", "liveFlightWithin", "struct", "string", "json", "live_flight_id", "FlightID", "flight_id", "omitempty", "Position", "coordinate", "position", "Altitude", "float64", "altitude", "HeadingDirection", "heading_direction", "Lat", "lat", "Lon", "lon"], "doc_head": "package v0\nimport (\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\ntype (\n\tliveFlightWithin struct {\n\t\tID               string     `json:\"live_flight_id\"`\n\t\tFlightID         *string    `json:\"flight_id,omitempty\"`\n\t\tPosition         coordinate `json:\"position\"`\n\t\tAltitude         float64    `json:\"altitude\"`\n\t\tHeadingDirection float64    `json:\"heading_direction\"`\n\t}\n\tcoordinate struct {\n\t\tLat float64 `json:\"lat\"`\n\t\tLon float64 `json:\"lon\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/models.go", "rel_path": "internal/adapters/handlers/http/v0/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 21, "end_line": 44, "text": "\ttrackPoint struct {\n\t\tPosition         coordinate `json:\"position\"`\n\t\tAltitude         float64    `json:\"altitude\"`\n\t\tHeadingDirection float64    `json:\"heading_direction\"`\n\t\tHorizontalSpeed  float64    `json:\"horizontal_speed\"`\n\t\tVerticalSpeed    float64    `json:\"vertical_speed\"`\n\t\tSquawk           int        `json:\"squawk\"`\n\t\tCreatedAt        string     `json:\"created_at\"`\n\t}\n)\n\nfunc liveFlightWithinFromDomain(update *core.LiveFlight) *liveFlightWithin {\n\treturn &liveFlightWithin{\n\t\tID:       update.ID,\n\t\tFlightID: update.FlightID,\n\t\tPosition: coordinate{\n\t\t\tLat: update.Position.Lat,\n\t\t\tLon: update.Position.Lon,\n\t\t},\n\t\tAltitude:         update.Altitude,\n\t\tHeadingDirection: update.HeadingDirection,\n\t}\n}\n", "n_tokens": 188, "primary_symbol": "liveFlightWithinFromDomain", "primary_kind": "function", "primary_span": [32, 44], "def_symbols": ["liveFlightWithinFromDomain"], "symbols": ["liveFlightWithinFromDomain", "trackPoint", "struct", "Position", "coordinate", "json", "position", "Altitude", "float64", "altitude", "HeadingDirection", "heading_direction", "HorizontalSpeed", "horizontal_speed", "VerticalSpeed", "vertical_speed", "Squawk", "int", "squawk", "CreatedAt", "string", "created_at", "func", "update", "core", "LiveFlight", "liveFlightWithin", "return", "FlightID", "Lat", "Lon"], "doc_head": "\ttrackPoint struct {\n\t\tPosition         coordinate `json:\"position\"`\n\t\tAltitude         float64    `json:\"altitude\"`\n\t\tHeadingDirection float64    `json:\"heading_direction\"`\n\t\tHorizontalSpeed  float64    `json:\"horizontal_speed\"`\n\t\tVerticalSpeed    float64    `json:\"vertical_speed\"`\n\t\tSquawk           int        `json:\"squawk\"`\n\t\tCreatedAt        string     `json:\"created_at\"`\n\t}\n)\nfunc liveFlightWithinFromDomain(update *core.LiveFlight) *liveFlightWithin {\n\treturn &liveFlightWithin{\n\t\tID:       update.ID,\n\t\tFlightID: update.FlightID,\n\t\tPosition: coordinate{\n\t\t\tLat: update.Position.Lat,\n\t\t\tLon: update.Position.Lon,\n\t\t},\n\t\tAltitude:         update.Altitude,\n\t\tHeadingDirection: update.HeadingDirection,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/models.go", "rel_path": "internal/adapters/handlers/http/v0/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 45, "end_line": 59, "text": "func trackPointFromDomain(update *core.TrackPoint) *trackPoint {\n\treturn &trackPoint{\n\t\tPosition: coordinate{\n\t\t\tLat: update.Position.Lat,\n\t\t\tLon: update.Position.Lon,\n\t\t},\n\t\tAltitude:         update.Altitude,\n\t\tHeadingDirection: update.HeadingDirection,\n\t\tHorizontalSpeed:  update.GroundSpeed,\n\t\tVerticalSpeed:    update.VerticalSpeed,\n\t\tSquawk:           update.Squawk,\n\t\tCreatedAt:        update.CreatedAt.UTC().Format(\"2006-01-02T15:04:05Z\"),\n\t}\n}\n", "n_tokens": 129, "primary_symbol": "trackPointFromDomain", "primary_kind": "function", "primary_span": [45, 59], "def_symbols": ["trackPointFromDomain"], "symbols": ["trackPointFromDomain", "func", "update", "core", "TrackPoint", "trackPoint", "return", "Position", "coordinate", "Lat", "Lon", "Altitude", "HeadingDirection", "HorizontalSpeed", "GroundSpeed", "VerticalSpeed", "Squawk", "CreatedAt", "UTC", "Format"], "doc_head": "func trackPointFromDomain(update *core.TrackPoint) *trackPoint {\n\treturn &trackPoint{\n\t\tPosition: coordinate{\n\t\t\tLat: update.Position.Lat,\n\t\t\tLon: update.Position.Lon,\n\t\t},\n\t\tAltitude:         update.Altitude,\n\t\tHeadingDirection: update.HeadingDirection,\n\t\tHorizontalSpeed:  update.GroundSpeed,\n\t\tVerticalSpeed:    update.VerticalSpeed,\n\t\tSquawk:           update.Squawk,\n\t\tCreatedAt:        update.CreatedAt.UTC().Format(\"2006-01-02T15:04:05Z\"),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/tracks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/tracks.go", "rel_path": "internal/adapters/handlers/http/v0/tracks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 19, "text": "package v0\n\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"sort\"\n)\n\ntype (\n\tgetFlightTracksURI struct {\n\t\tFlightID string `uri:\"id\" binding:\"required\"`\n\t}\n)\n", "n_tokens": 107, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 19], "def_symbols": [], "symbols": ["package", "import", "github", "com", "cockroachdb", "errors", "gin", "gonic", "impalastudios", "aviation", "liveflights", "internal", "core", "pkg", "xhttp", "log", "uber", "org", "zap", "net", "http", "sort", "type", "getFlightTracksURI", "struct", "FlightID", "string", "uri", "binding", "required"], "doc_head": "package v0\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"sort\"\n)\ntype (\n\tgetFlightTracksURI struct {\n\t\tFlightID string `uri:\"id\" binding:\"required\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/tracks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/tracks.go", "rel_path": "internal/adapters/handlers/http/v0/tracks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 20, "end_line": 59, "text": "func (h *Handler) tracks(c *gin.Context) {\n\tvar uri getFlightTracksURI\n\tif err := c.ShouldBindUri(&uri); err != nil {\n\t\tlog.Error(c, \"failed to bind request query\", zap.Error(err))\n\t\t_ = c.Error(errRequestBindingFailed)\n\t\treturn\n\t}\n\n\tdetails, err := h.svc.GetLiveFlightDetailsByFlightID(c, uri.FlightID)\n\tif err != nil {\n\t\tif errors.Is(err, core.ErrFlightNotFound) {\n\t\t\tc.JSON(http.StatusNotFound, xhttp.NewErrorResponse(\"not_found\", \"Flight not found.\"))\n\t\t\treturn\n\t\t}\n\n\t\tlog.Warn(c, \"Failed to retrieve Live Flight\",\n\t\t\tzap.String(\"id\", uri.FlightID),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\tc.JSON(http.StatusInternalServerError, xhttp.NewErrorResponse(\"internal_error\", \"We cannot serve you at the moment. Please try again later.\"))\n\t\treturn\n\t}\n\n\tsort.Slice(details.Tracks, func(i, j int) bool {\n\t\treturn details.Tracks[i].CreatedAt.Before(details.Tracks[j].CreatedAt)\n\t})\n\n\tpoints := make([]*trackPoint, len(details.Tracks))\n\tfor i := range details.Tracks {\n\t\tpoints[i] = trackPointFromDomain(&details.Tracks[i])\n\t}\n\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse(\n\t\tpoints,\n\t\t\"ok\",\n\t\t\"Here are the flight tracks.\",\n\t))\n}\n", "n_tokens": 297, "primary_symbol": "tracks", "primary_kind": "function", "primary_span": [20, 59], "def_symbols": ["tracks"], "symbols": ["tracks", "func", "Handler", "gin", "Context", "var", "uri", "getFlightTracksURI", "err", "ShouldBindUri", "nil", "log", "Error", "failed", "bind", "request", "query", "zap", "errRequestBindingFailed", "return", "details", "svc", "GetLiveFlightDetailsByFlightID", "FlightID", "errors", "core", "ErrFlightNotFound", "JSON", "http", "StatusNotFound", "xhttp", "NewErrorResponse", "not_found", "Flight", "not", "found", "Warn", "Failed", "retrieve", "Live", "String", "StatusInternalServerError", "internal_error", "cannot", "serve", "you", "the", "moment", "Please", "try", "again", "later", "sort", "Slice", "Tracks", "int", "bool", "CreatedAt", "Before", "points", "make", "trackPoint", "len", "for", "range", "trackPointFromDomain", "PureJSON", "StatusOK", "NewResponse", "Here", "are", "flight"], "doc_head": "func (h *Handler) tracks(c *gin.Context) {\n\tvar uri getFlightTracksURI\n\tif err := c.ShouldBindUri(&uri); err != nil {\n\t\tlog.Error(c, \"failed to bind request query\", zap.Error(err))\n\t\t_ = c.Error(errRequestBindingFailed)\n\t\treturn\n\t}\n\tdetails, err := h.svc.GetLiveFlightDetailsByFlightID(c, uri.FlightID)\n\tif err != nil {\n\t\tif errors.Is(err, core.ErrFlightNotFound) {\n\t\t\tc.JSON(http.StatusNotFound, xhttp.NewErrorResponse(\"not_found\", \"Flight not found.\"))\n\t\t\treturn\n\t\t}\n\t\tlog.Warn(c, \"Failed to retrieve Live Flight\",\n\t\t\tzap.String(\"id\", uri.FlightID),\n\t\t\tzap.Error(err),\n\t\t)\n\t\tc.JSON(http.StatusInternalServerError, xhttp.NewErrorResponse(\"internal_error\", \"We cannot serve you at the moment. Please try again later.\"))\n\t\treturn\n\t}\n\tsort.Slice(details.Tracks, func(i, j int) bool {\n\t\treturn details.Tracks[i].CreatedAt.Before(details.Tracks[j].CreatedAt)\n\t})\n\tpoints := make([]*trackPoint, len(details.Tracks))\n\tfor i := range details.Tracks {\n\t\tpoints[i] = trackPointFromDomain(&details.Tracks[i])\n\t}\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse(\n\t\tpoints,\n\t\t\"ok\",\n\t\t\"Here are the flight tracks.\",\n\t))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/handler.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/handler.go", "rel_path": "internal/adapters/handlers/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 29, "text": "package v0\n\nimport (\n\t\"context\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n\n//go:generate mockgen -source=handler.go -destination=mocks/handler.go -package=mocks\ntype (\n\tsvc interface {\n\t\tFilterLiveFlights(context.Context, *core.FlightsWithin) ([]*core.LiveFlight, error)\n\t\tGetLiveFlightDetailsByLiveFlightID(context.Context, string) (*core.LiveFlight, error)\n\t\tGetLiveFlightDetailsByFlightID(context.Context, string) (*core.LiveFlight, error)\n\t}\n)\n\ntype Handler struct {\n\tsvc svc\n}\n\n// New creates a new httpresponses handler\nfunc New(svc svc) *Handler {\n\treturn &Handler{\n\t\tsvc: svc,\n\t}\n}\n", "n_tokens": 172, "primary_symbol": "New", "primary_kind": "function", "primary_span": [24, 29], "def_symbols": ["New"], "symbols": ["New", "package", "import", "context", "github", "com", "gin", "gonic", "impalastudios", "aviation", "liveflights", "internal", "core", "generate", "mockgen", "source", "handler", "destination", "mocks", "type", "svc", "interface", "FilterLiveFlights", "Context", "FlightsWithin", "LiveFlight", "error", "GetLiveFlightDetailsByLiveFlightID", "string", "GetLiveFlightDetailsByFlightID", "Handler", "struct", "creates", "new", "httpresponses", "func", "return"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n//go:generate mockgen -source=handler.go -destination=mocks/handler.go -package=mocks\ntype (\n\tsvc interface {\n\t\tFilterLiveFlights(context.Context, *core.FlightsWithin) ([]*core.LiveFlight, error)\n\t\tGetLiveFlightDetailsByLiveFlightID(context.Context, string) (*core.LiveFlight, error)\n\t\tGetLiveFlightDetailsByFlightID(context.Context, string) (*core.LiveFlight, error)\n\t}\n)\ntype Handler struct {\n\tsvc svc\n}\n// New creates a new httpresponses handler\nfunc New(svc svc) *Handler {\n\treturn &Handler{\n\t\tsvc: svc,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/handler.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/handler.go", "rel_path": "internal/adapters/handlers/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 30, "end_line": 36, "text": "// Register gin routes\nfunc (h *Handler) Register(g *gin.RouterGroup) {\n\tg.GET(\"/v0/live-flights/within\", h.within, h.handleErrors)\n\tg.GET(\"/v0/live-flights/flights/:id/tracks\", h.liveTracks, h.handleErrors)\n\tg.GET(\"/v0/flights/:id/tracks\", h.tracks, h.handleErrors)\n}\n", "n_tokens": 81, "primary_symbol": "Register", "primary_kind": "function", "primary_span": [31, 36], "def_symbols": ["Register"], "symbols": ["Register", "gin", "routes", "func", "Handler", "RouterGroup", "GET", "live", "flights", "within", "handleErrors", "tracks", "liveTracks"], "doc_head": "// Register gin routes\nfunc (h *Handler) Register(g *gin.RouterGroup) {\n\tg.GET(\"/v0/live-flights/within\", h.within, h.handleErrors)\n\tg.GET(\"/v0/live-flights/flights/:id/tracks\", h.liveTracks, h.handleErrors)\n\tg.GET(\"/v0/flights/:id/tracks\", h.tracks, h.handleErrors)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/live_tracks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/live_tracks.go", "rel_path": "internal/adapters/handlers/http/v0/live_tracks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 19, "text": "package v0\n\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"sort\"\n)\n\ntype (\n\tgetLiveFlightTracksURI struct {\n\t\tLiveFlightID string `uri:\"id\" binding:\"required\"`\n\t}\n)\n", "n_tokens": 109, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 19], "def_symbols": [], "symbols": ["package", "import", "github", "com", "cockroachdb", "errors", "gin", "gonic", "impalastudios", "aviation", "liveflights", "internal", "core", "pkg", "xhttp", "log", "uber", "org", "zap", "net", "http", "sort", "type", "getLiveFlightTracksURI", "struct", "LiveFlightID", "string", "uri", "binding", "required"], "doc_head": "package v0\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"sort\"\n)\ntype (\n\tgetLiveFlightTracksURI struct {\n\t\tLiveFlightID string `uri:\"id\" binding:\"required\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/live_tracks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/live_tracks.go", "rel_path": "internal/adapters/handlers/http/v0/live_tracks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 20, "end_line": 59, "text": "func (h *Handler) liveTracks(c *gin.Context) {\n\tvar uri getLiveFlightTracksURI\n\tif err := c.ShouldBindUri(&uri); err != nil {\n\t\tlog.Error(c, \"failed to bind request query\", zap.Error(err))\n\t\t_ = c.Error(errRequestBindingFailed)\n\t\treturn\n\t}\n\n\tdetails, err := h.svc.GetLiveFlightDetailsByLiveFlightID(c, uri.LiveFlightID)\n\tif err != nil {\n\t\tif errors.Is(err, core.ErrFlightNotFound) {\n\t\t\tc.JSON(http.StatusNotFound, xhttp.NewErrorResponse(\"not_found\", \"Live Flight not found.\"))\n\t\t\treturn\n\t\t}\n\n\t\tlog.Warn(c, \"Failed to retrieve Live Flight\",\n\t\t\tzap.String(\"id\", uri.LiveFlightID),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\tc.JSON(http.StatusInternalServerError, xhttp.NewErrorResponse(\"internal_error\", \"We cannot serve you at the moment. Please try again later.\"))\n\t\treturn\n\t}\n\n\tsort.Slice(details.Tracks, func(i, j int) bool {\n\t\treturn details.Tracks[i].CreatedAt.Before(details.Tracks[j].CreatedAt)\n\t})\n\n\tpoints := make([]*trackPoint, len(details.Tracks))\n\tfor i := range details.Tracks {\n\t\tpoints[i] = trackPointFromDomain(&details.Tracks[i])\n\t}\n\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse(\n\t\tpoints,\n\t\t\"ok\",\n\t\t\"Here are the flight tracks.\",\n\t))\n}\n", "n_tokens": 301, "primary_symbol": "liveTracks", "primary_kind": "function", "primary_span": [20, 59], "def_symbols": ["liveTracks"], "symbols": ["liveTracks", "func", "Handler", "gin", "Context", "var", "uri", "getLiveFlightTracksURI", "err", "ShouldBindUri", "nil", "log", "Error", "failed", "bind", "request", "query", "zap", "errRequestBindingFailed", "return", "details", "svc", "GetLiveFlightDetailsByLiveFlightID", "LiveFlightID", "errors", "core", "ErrFlightNotFound", "JSON", "http", "StatusNotFound", "xhttp", "NewErrorResponse", "not_found", "Live", "Flight", "not", "found", "Warn", "Failed", "retrieve", "String", "StatusInternalServerError", "internal_error", "cannot", "serve", "you", "the", "moment", "Please", "try", "again", "later", "sort", "Slice", "Tracks", "int", "bool", "CreatedAt", "Before", "points", "make", "trackPoint", "len", "for", "range", "trackPointFromDomain", "PureJSON", "StatusOK", "NewResponse", "Here", "are", "flight", "tracks"], "doc_head": "func (h *Handler) liveTracks(c *gin.Context) {\n\tvar uri getLiveFlightTracksURI\n\tif err := c.ShouldBindUri(&uri); err != nil {\n\t\tlog.Error(c, \"failed to bind request query\", zap.Error(err))\n\t\t_ = c.Error(errRequestBindingFailed)\n\t\treturn\n\t}\n\tdetails, err := h.svc.GetLiveFlightDetailsByLiveFlightID(c, uri.LiveFlightID)\n\tif err != nil {\n\t\tif errors.Is(err, core.ErrFlightNotFound) {\n\t\t\tc.JSON(http.StatusNotFound, xhttp.NewErrorResponse(\"not_found\", \"Live Flight not found.\"))\n\t\t\treturn\n\t\t}\n\t\tlog.Warn(c, \"Failed to retrieve Live Flight\",\n\t\t\tzap.String(\"id\", uri.LiveFlightID),\n\t\t\tzap.Error(err),\n\t\t)\n\t\tc.JSON(http.StatusInternalServerError, xhttp.NewErrorResponse(\"internal_error\", \"We cannot serve you at the moment. Please try again later.\"))\n\t\treturn\n\t}\n\tsort.Slice(details.Tracks, func(i, j int) bool {\n\t\treturn details.Tracks[i].CreatedAt.Before(details.Tracks[j].CreatedAt)\n\t})\n\tpoints := make([]*trackPoint, len(details.Tracks))\n\tfor i := range details.Tracks {\n\t\tpoints[i] = trackPointFromDomain(&details.Tracks[i])\n\t}\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse(\n\t\tpoints,\n\t\t\"ok\",\n\t\t\"Here are the flight tracks.\",\n\t))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go", "rel_path": "internal/adapters/handlers/http/v0/within.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package v0\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype coordinateText string\n", "n_tokens": 93, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 18], "def_symbols": [], "symbols": ["package", "import", "github", "com", "gin", "gonic", "pkg", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "xhttp", "log", "uber", "org", "zap", "net", "http", "regexp", "strconv", "strings", "time", "type", "coordinateText", "string"], "doc_head": "package v0\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\ntype coordinateText string"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go", "rel_path": "internal/adapters/handlers/http/v0/within.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 19, "end_line": 40, "text": "func (c coordinateText) Parse() (*core.Coordinate, error) {\n\tpieces := strings.Split(string(c), \",\")\n\tif len(pieces) != 2 {\n\t\treturn nil, errors.New(\"invalid value\")\n\t}\n\n\tlat, err := strconv.ParseFloat(pieces[0], 64)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"invalid latitude value\")\n\t}\n\n\tlon, err := strconv.ParseFloat(pieces[1], 64)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"invalid longitude value\")\n\t}\n\n\treturn &core.Coordinate{\n\t\tLat: lat,\n\t\tLon: lon,\n\t}, nil\n}\n", "n_tokens": 142, "primary_symbol": "Parse", "primary_kind": "function", "primary_span": [19, 40], "def_symbols": ["Parse"], "symbols": ["Parse", "func", "coordinateText", "core", "Coordinate", "error", "pieces", "strings", "Split", "string", "len", "return", "nil", "errors", "New", "invalid", "value", "lat", "err", "strconv", "ParseFloat", "Wrap", "latitude", "lon", "longitude", "Lat", "Lon"], "doc_head": "func (c coordinateText) Parse() (*core.Coordinate, error) {\n\tpieces := strings.Split(string(c), \",\")\n\tif len(pieces) != 2 {\n\t\treturn nil, errors.New(\"invalid value\")\n\t}\n\tlat, err := strconv.ParseFloat(pieces[0], 64)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"invalid latitude value\")\n\t}\n\tlon, err := strconv.ParseFloat(pieces[1], 64)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"invalid longitude value\")\n\t}\n\treturn &core.Coordinate{\n\t\tLat: lat,\n\t\tLon: lon,\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go", "rel_path": "internal/adapters/handlers/http/v0/within.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 41, "end_line": 50, "text": "type withinRequest struct {\n\tTopLeft     coordinateText `form:\"filter[bb][top_left]\" binding:\"required,omitempty,coord\"`\n\tBottomRight coordinateText `form:\"filter[bb][bottom_right]\" binding:\"required,omitempty,coord\"`\n\n\t// Classification integer value of airline classification, 1-5\n\t// If + is provided, it will return all airline with classification greater than or equal to, e.g. 2+\n\t// if - is provided, it will return all airline with classification less than or equal to. e.g. 3-\n\tAirlineClassification string `form:\"filter[airline_classification]\" binding:\"omitempty,classification\"`\n}\n", "n_tokens": 137, "primary_symbol": "", "primary_kind": "", "primary_span": [41, 50], "def_symbols": [], "symbols": ["type", "withinRequest", "struct", "TopLeft", "coordinateText", "form", "filter", "top_left", "binding", "required", "omitempty", "coord", "BottomRight", "bottom_right", "Classification", "integer", "value", "airline", "classification", "provided", "will", "return", "all", "with", "greater", "than", "equal", "less", "AirlineClassification", "string", "airline_classification"], "doc_head": "type withinRequest struct {\n\tTopLeft     coordinateText `form:\"filter[bb][top_left]\" binding:\"required,omitempty,coord\"`\n\tBottomRight coordinateText `form:\"filter[bb][bottom_right]\" binding:\"required,omitempty,coord\"`\n\t// Classification integer value of airline classification, 1-5\n\t// If + is provided, it will return all airline with classification greater than or equal to, e.g. 2+\n\t// if - is provided, it will return all airline with classification less than or equal to. e.g. 3-\n\tAirlineClassification string `form:\"filter[airline_classification]\" binding:\"omitempty,classification\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go", "rel_path": "internal/adapters/handlers/http/v0/within.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 51, "end_line": 99, "text": "func (h *Handler) within(c *gin.Context) {\n\tvar req withinRequest\n\tif err := c.ShouldBindQuery(&req); err != nil {\n\t\tlog.Error(c, \"failed to bind request query\", zap.Error(err))\n\t\t_ = c.Error(errRequestBindingFailed)\n\t\treturn\n\t}\n\n\tbb, err := req.GetWithinBoundingBox()\n\tif err != nil {\n\t\tlog.Error(c, \"failed to extract bounding box\", zap.Error(err))\n\t\t_ = c.Error(errInvalidWithinBoundingBox)\n\t\treturn\n\t}\n\n\tcl, err := parseClassifiction(req.AirlineClassification)\n\tif err != nil {\n\t\tlog.Error(c, \"failed to parse classification\",\n\t\t\tzap.String(\"classification\", req.AirlineClassification),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\t_ = c.Error(errInvalidClassification)\n\t\treturn\n\t}\n\n\tflights, err := h.svc.FilterLiveFlights(c, &core.FlightsWithin{\n\t\tBoundingBox:           bb,\n\t\tMaxAge:                15 * time.Minute,\n\t\tAirlineClassification: cl,\n\t})\n\tif err != nil {\n\t\tlog.Error(c, \"failed to find flights within bounding box\", zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tres := make([]*liveFlightWithin, 0, len(flights))\n\tfor _, ap := range flights {\n\t\tres = append(res, liveFlightWithinFromDomain(ap))\n\t}\n\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse(\n\t\tres,\n\t\t\"ok\",\n\t\t\"Here are the flights within the bounding box.\",\n\t))\n}\n", "n_tokens": 334, "primary_symbol": "within", "primary_kind": "function", "primary_span": [51, 99], "def_symbols": ["within"], "symbols": ["within", "func", "Handler", "gin", "Context", "var", "req", "withinRequest", "err", "ShouldBindQuery", "nil", "log", "Error", "failed", "bind", "request", "query", "zap", "errRequestBindingFailed", "return", "GetWithinBoundingBox", "extract", "bounding", "box", "errInvalidWithinBoundingBox", "parseClassifiction", "AirlineClassification", "parse", "classification", "String", "errInvalidClassification", "flights", "svc", "FilterLiveFlights", "core", "FlightsWithin", "BoundingBox", "MaxAge", "time", "Minute", "find", "res", "make", "liveFlightWithin", "len", "for", "range", "append", "liveFlightWithinFromDomain", "PureJSON", "http", "StatusOK", "xhttp", "NewResponse", "Here", "are", "the"], "doc_head": "func (h *Handler) within(c *gin.Context) {\n\tvar req withinRequest\n\tif err := c.ShouldBindQuery(&req); err != nil {\n\t\tlog.Error(c, \"failed to bind request query\", zap.Error(err))\n\t\t_ = c.Error(errRequestBindingFailed)\n\t\treturn\n\t}\n\tbb, err := req.GetWithinBoundingBox()\n\tif err != nil {\n\t\tlog.Error(c, \"failed to extract bounding box\", zap.Error(err))\n\t\t_ = c.Error(errInvalidWithinBoundingBox)\n\t\treturn\n\t}\n\tcl, err := parseClassifiction(req.AirlineClassification)\n\tif err != nil {\n\t\tlog.Error(c, \"failed to parse classification\",\n\t\t\tzap.String(\"classification\", req.AirlineClassification),\n\t\t\tzap.Error(err),\n\t\t)\n\t\t_ = c.Error(errInvalidClassification)\n\t\treturn\n\t}\n\tflights, err := h.svc.FilterLiveFlights(c, &core.FlightsWithin{\n\t\tBoundingBox:           bb,\n\t\tMaxAge:                15 * time.Minute,\n\t\tAirlineClassification: cl,\n\t})\n\tif err != nil {\n\t\tlog.Error(c, \"failed to find flights within bounding box\", zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tres := make([]*liveFlightWithin, 0, len(flights))\n\tfor _, ap := range flights {\n\t\tres = append(res, liveFlightWithinFromDomain(ap))\n\t}\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse(\n\t\tres,\n\t\t\"ok\",\n\t\t\"Here are the flights within the bounding "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go", "rel_path": "internal/adapters/handlers/http/v0/within.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 100, "end_line": 122, "text": "func (r withinRequest) GetWithinBoundingBox() (*core.BoundingBox, error) {\n\tif string(r.BottomRight) == \"\" || string(r.TopLeft) == \"\" {\n\t\treturn nil, nil\n\t}\n\n\ttl, err := r.TopLeft.Parse()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tbr, err := r.BottomRight.Parse()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &core.BoundingBox{\n\t\tTopLeft:     tl,\n\t\tBottomRight: br,\n\t}, nil\n}\n\nvar classificationRe = regexp.MustCompile(`^([1-5])([+-])?$`)\n", "n_tokens": 132, "primary_symbol": "GetWithinBoundingBox", "primary_kind": "function", "primary_span": [100, 122], "def_symbols": ["GetWithinBoundingBox"], "symbols": ["GetWithinBoundingBox", "func", "withinRequest", "core", "BoundingBox", "error", "string", "BottomRight", "TopLeft", "return", "nil", "err", "Parse", "var", "classificationRe", "regexp", "MustCompile"], "doc_head": "func (r withinRequest) GetWithinBoundingBox() (*core.BoundingBox, error) {\n\tif string(r.BottomRight) == \"\" || string(r.TopLeft) == \"\" {\n\t\treturn nil, nil\n\t}\n\ttl, err := r.TopLeft.Parse()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbr, err := r.BottomRight.Parse()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &core.BoundingBox{\n\t\tTopLeft:     tl,\n\t\tBottomRight: br,\n\t}, nil\n}\nvar classificationRe = regexp.MustCompile(`^([1-5])([+-])?$`)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/within.go", "rel_path": "internal/adapters/handlers/http/v0/within.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 123, "end_line": 153, "text": "func parseClassifiction(c string) (*core.Classification, error) {\n\tc = strings.TrimSpace(c)\n\n\tif string(c) == \"\" {\n\t\treturn nil, nil\n\t}\n\n\tmatches := classificationRe.FindStringSubmatch(c)\n\n\tif len(matches) != 3 {\n\t\treturn nil, errors.New(\"wrong classification format\")\n\t}\n\n\tvar comparator core.ClassificationComparator\n\tswitch matches[2] {\n\tcase \"+\":\n\t\tcomparator = core.ClassificationGreaterComparator\n\tcase \"-\":\n\t\tcomparator = core.ClassificationLesserComparator\n\tdefault:\n\t\tcomparator = core.ClassificationEqualComparator\n\t}\n\n\tvalue, _ := strconv.Atoi(matches[1])\n\n\treturn &core.Classification{\n\t\tC:          int8(value),\n\t\tComparator: comparator,\n\t}, nil\n}\n", "n_tokens": 158, "primary_symbol": "parseClassifiction", "primary_kind": "function", "primary_span": [123, 153], "def_symbols": ["parseClassifiction"], "symbols": ["parseClassifiction", "func", "string", "core", "Classification", "error", "strings", "TrimSpace", "return", "nil", "matches", "classificationRe", "FindStringSubmatch", "len", "errors", "New", "wrong", "classification", "format", "var", "comparator", "ClassificationComparator", "switch", "case", "ClassificationGreaterComparator", "ClassificationLesserComparator", "default", "ClassificationEqualComparator", "value", "strconv", "Atoi", "int8", "Comparator"], "doc_head": "func parseClassifiction(c string) (*core.Classification, error) {\n\tc = strings.TrimSpace(c)\n\tif string(c) == \"\" {\n\t\treturn nil, nil\n\t}\n\tmatches := classificationRe.FindStringSubmatch(c)\n\tif len(matches) != 3 {\n\t\treturn nil, errors.New(\"wrong classification format\")\n\t}\n\tvar comparator core.ClassificationComparator\n\tswitch matches[2] {\n\tcase \"+\":\n\t\tcomparator = core.ClassificationGreaterComparator\n\tcase \"-\":\n\t\tcomparator = core.ClassificationLesserComparator\n\tdefault:\n\t\tcomparator = core.ClassificationEqualComparator\n\t}\n\tvalue, _ := strconv.Atoi(matches[1])\n\treturn &core.Classification{\n\t\tC:          int8(value),\n\t\tComparator: comparator,\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/errors.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/errors.go", "rel_path": "internal/adapters/handlers/http/v0/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package v0\n\nimport (\n\t\"errors\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\nvar (\n\terrRequestBindingFailed     = errors.New(\"request binding failed\")\n\terrInvalidCoordinate        = errors.New(\"invalid coordinate\")\n\terrInvalidWithinBoundingBox = errors.New(\"invalid within bounding box\")\n\terrInvalidClassification    = errors.New(\"invalid classification\")\n\terrFlightNotFound           = errors.New(\"flight not found\")\n)\n", "n_tokens": 119, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 20], "def_symbols": [], "symbols": ["package", "import", "errors", "net", "http", "github", "com", "gin", "gonic", "impalastudios", "aviation", "liveflights", "pkg", "xhttp", "log", "uber", "org", "zap", "var", "errRequestBindingFailed", "New", "request", "binding", "failed", "errInvalidCoordinate", "invalid", "coordinate", "errInvalidWithinBoundingBox", "within", "bounding", "box", "errInvalidClassification", "classification", "errFlightNotFound", "flight", "not", "found"], "doc_head": "package v0\nimport (\n\t\"errors\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\nvar (\n\terrRequestBindingFailed     = errors.New(\"request binding failed\")\n\terrInvalidCoordinate        = errors.New(\"invalid coordinate\")\n\terrInvalidWithinBoundingBox = errors.New(\"invalid within bounding box\")\n\terrInvalidClassification    = errors.New(\"invalid classification\")\n\terrFlightNotFound           = errors.New(\"flight not found\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/errors.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/errors.go", "rel_path": "internal/adapters/handlers/http/v0/errors.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 21, "end_line": 64, "text": "func (h *Handler) handleErrors(c *gin.Context) {\n\tc.Next()\n\n\tif len(c.Errors) == 0 {\n\t\treturn\n\t}\n\n\terr := c.Errors[0]\n\n\tif errors.Is(err, errInvalidCoordinate) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t`Coordinate must be provided as <latitude>,<longitude>.`),\n\t\t)\n\t} else if errors.Is(err, errInvalidWithinBoundingBox) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The bounding box is invalid. A valid bounding box is made by top-left and bottom-right corners.\"),\n\t\t)\n\t} else if errors.Is(err, errInvalidClassification) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t`Classification value should match regex \"[1-5][+-]?\".`),\n\t\t)\n\t} else if errors.Is(err, errFlightNotFound) {\n\t\tc.JSON(http.StatusNotFound, xhttp.NewErrorResponse(\n\t\t\t\"not_found\",\n\t\t\t\"The requested flight was not found.\"),\n\t\t)\n\t} else if errors.Is(err, errRequestBindingFailed) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The provided parameters are invalid.\"),\n\t\t)\n\t} else {\n\t\tc.PureJSON(http.StatusInternalServerError, xhttp.NewErrorResponse(\n\t\t\t\"internal_error\",\n\t\t\t\"Something went wrong, please try again later.\"),\n\t\t)\n\t}\n\n\tlog.Error(c, \"http request failed with an error\", zap.Error(err), zap.String(\"path\", c.FullPath()))\n}\n", "n_tokens": 342, "primary_symbol": "handleErrors", "primary_kind": "function", "primary_span": [21, 64], "def_symbols": ["handleErrors"], "symbols": ["handleErrors", "func", "Handler", "gin", "Context", "Next", "len", "Errors", "return", "err", "errors", "errInvalidCoordinate", "PureJSON", "http", "StatusBadRequest", "xhttp", "NewErrorResponse", "invalid_parameters", "Coordinate", "must", "provided", "latitude", "longitude", "else", "errInvalidWithinBoundingBox", "The", "bounding", "box", "invalid", "valid", "made", "top", "left", "and", "bottom", "right", "corners", "errInvalidClassification", "Classification", "value", "should", "match", "regex", "errFlightNotFound", "JSON", "StatusNotFound", "not_found", "requested", "flight", "was", "not", "found", "errRequestBindingFailed", "parameters", "are", "StatusInternalServerError", "internal_error", "Something", "went", "wrong", "please", "try", "again", "later", "log", "Error", "request", "failed", "with", "error", "zap", "String", "path", "FullPath"], "doc_head": "func (h *Handler) handleErrors(c *gin.Context) {\n\tc.Next()\n\tif len(c.Errors) == 0 {\n\t\treturn\n\t}\n\terr := c.Errors[0]\n\tif errors.Is(err, errInvalidCoordinate) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t`Coordinate must be provided as <latitude>,<longitude>.`),\n\t\t)\n\t} else if errors.Is(err, errInvalidWithinBoundingBox) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The bounding box is invalid. A valid bounding box is made by top-left and bottom-right corners.\"),\n\t\t)\n\t} else if errors.Is(err, errInvalidClassification) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t`Classification value should match regex \"[1-5][+-]?\".`),\n\t\t)\n\t} else if errors.Is(err, errFlightNotFound) {\n\t\tc.JSON(http.StatusNotFound, xhttp.NewErrorResponse(\n\t\t\t\"not_found\",\n\t\t\t\"The requested flight was not found.\"),\n\t\t)\n\t} else if errors.Is(err, errRequestBindingFailed) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse(\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The provided parameters are invalid.\"),\n\t\t)\n\t} else {\n\t\tc.PureJSON(http.StatusInternalServerError, xhttp.NewErrorResponse(\n\t\t\t\"inte"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go", "rel_path": "internal/adapters/handlers/http/v0/mocks/handler.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: handler.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=handler.go -destination=mocks/handler.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mocksvc is a mock of svc interface.\ntype Mocksvc struct {\n\tctrl     *gomock.Controller\n\trecorder *MocksvcMockRecorder\n\tisgomock struct{}\n}\n\n// MocksvcMockRecorder is the mock recorder for Mocksvc.\ntype MocksvcMockRecorder struct {\n\tmock *Mocksvc\n}\n", "n_tokens": 165, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "handler", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "package", "Package", "GoMock", "import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock", "Mocksvc", "svc", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MocksvcMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: handler.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=handler.go -destination=mocks/handler.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mocksvc is a mock of svc interface.\ntype Mocksvc struct {\n\tctrl     *gomock.Controller\n\trecorder *MocksvcMockRecorder\n\tisgomock struct{}\n}\n// MocksvcMockRecorder is the mock recorder for Mocksvc.\ntype MocksvcMockRecorder struct {\n\tmock *Mocksvc\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go", "rel_path": "internal/adapters/handlers/http/v0/mocks/handler.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "// NewMocksvc creates a new mock instance.\nfunc NewMocksvc(ctrl *gomock.Controller) *Mocksvc {\n\tmock := &Mocksvc{ctrl: ctrl}\n\tmock.recorder = &MocksvcMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocksvc) EXPECT() *MocksvcMockRecorder {\n\treturn m.recorder\n}\n\n// FilterLiveFlights mocks base method.\nfunc (m *Mocksvc) FilterLiveFlights(arg0 context.Context, arg1 *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"FilterLiveFlights\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 185, "primary_symbol": "NewMocksvc", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["NewMocksvc", "EXPECT", "FilterLiveFlights"], "symbols": ["NewMocksvc", "EXPECT", "FilterLiveFlights", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mocksvc", "recorder", "MocksvcMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "core", "FlightsWithin", "LiveFlight", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMocksvc creates a new mock instance.\nfunc NewMocksvc(ctrl *gomock.Controller) *Mocksvc {\n\tmock := &Mocksvc{ctrl: ctrl}\n\tmock.recorder = &MocksvcMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocksvc) EXPECT() *MocksvcMockRecorder {\n\treturn m.recorder\n}\n// FilterLiveFlights mocks base method.\nfunc (m *Mocksvc) FilterLiveFlights(arg0 context.Context, arg1 *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"FilterLiveFlights\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go", "rel_path": "internal/adapters/handlers/http/v0/mocks/handler.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 67, "text": "// FilterLiveFlights indicates an expected call of FilterLiveFlights.\nfunc (mr *MocksvcMockRecorder) FilterLiveFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"FilterLiveFlights\", reflect.TypeOf((*Mocksvc)(nil).FilterLiveFlights), arg0, arg1)\n}\n\n// GetLiveFlightDetailsByFlightID mocks base method.\nfunc (m *Mocksvc) GetLiveFlightDetailsByFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlightDetailsByFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 190, "primary_symbol": "FilterLiveFlights", "primary_kind": "function", "primary_span": [54, 67], "def_symbols": ["FilterLiveFlights", "GetLiveFlightDetailsByFlightID"], "symbols": ["FilterLiveFlights", "GetLiveFlightDetailsByFlightID", "indicates", "expected", "call", "func", "MocksvcMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocksvc", "nil", "mocks", "base", "method", "context", "Context", "string", "core", "LiveFlight", "error", "ret", "ret0", "ret1"], "doc_head": "// FilterLiveFlights indicates an expected call of FilterLiveFlights.\nfunc (mr *MocksvcMockRecorder) FilterLiveFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"FilterLiveFlights\", reflect.TypeOf((*Mocksvc)(nil).FilterLiveFlights), arg0, arg1)\n}\n// GetLiveFlightDetailsByFlightID mocks base method.\nfunc (m *Mocksvc) GetLiveFlightDetailsByFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlightDetailsByFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go", "rel_path": "internal/adapters/handlers/http/v0/mocks/handler.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 68, "end_line": 73, "text": "// GetLiveFlightDetailsByFlightID indicates an expected call of GetLiveFlightDetailsByFlightID.\nfunc (mr *MocksvcMockRecorder) GetLiveFlightDetailsByFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlightDetailsByFlightID\", reflect.TypeOf((*Mocksvc)(nil).GetLiveFlightDetailsByFlightID), arg0, arg1)\n}\n", "n_tokens": 101, "primary_symbol": "GetLiveFlightDetailsByFlightID", "primary_kind": "function", "primary_span": [69, 73], "def_symbols": ["GetLiveFlightDetailsByFlightID"], "symbols": ["GetLiveFlightDetailsByFlightID", "indicates", "expected", "call", "func", "MocksvcMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocksvc", "nil"], "doc_head": "// GetLiveFlightDetailsByFlightID indicates an expected call of GetLiveFlightDetailsByFlightID.\nfunc (mr *MocksvcMockRecorder) GetLiveFlightDetailsByFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlightDetailsByFlightID\", reflect.TypeOf((*Mocksvc)(nil).GetLiveFlightDetailsByFlightID), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go", "rel_path": "internal/adapters/handlers/http/v0/mocks/handler.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 74, "end_line": 82, "text": "// GetLiveFlightDetailsByLiveFlightID mocks base method.\nfunc (m *Mocksvc) GetLiveFlightDetailsByLiveFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlightDetailsByLiveFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 107, "primary_symbol": "GetLiveFlightDetailsByLiveFlightID", "primary_kind": "function", "primary_span": [75, 82], "def_symbols": ["GetLiveFlightDetailsByLiveFlightID"], "symbols": ["GetLiveFlightDetailsByLiveFlightID", "mocks", "base", "method", "func", "Mocksvc", "arg0", "context", "Context", "arg1", "string", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetLiveFlightDetailsByLiveFlightID mocks base method.\nfunc (m *Mocksvc) GetLiveFlightDetailsByLiveFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlightDetailsByLiveFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/handlers/http/v0/mocks/handler.go", "rel_path": "internal/adapters/handlers/http/v0/mocks/handler.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 83, "end_line": 88, "text": "// GetLiveFlightDetailsByLiveFlightID indicates an expected call of GetLiveFlightDetailsByLiveFlightID.\nfunc (mr *MocksvcMockRecorder) GetLiveFlightDetailsByLiveFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlightDetailsByLiveFlightID\", reflect.TypeOf((*Mocksvc)(nil).GetLiveFlightDetailsByLiveFlightID), arg0, arg1)\n}\n", "n_tokens": 106, "primary_symbol": "GetLiveFlightDetailsByLiveFlightID", "primary_kind": "function", "primary_span": [84, 88], "def_symbols": ["GetLiveFlightDetailsByLiveFlightID"], "symbols": ["GetLiveFlightDetailsByLiveFlightID", "indicates", "expected", "call", "func", "MocksvcMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocksvc", "nil"], "doc_head": "// GetLiveFlightDetailsByLiveFlightID indicates an expected call of GetLiveFlightDetailsByLiveFlightID.\nfunc (mr *MocksvcMockRecorder) GetLiveFlightDetailsByLiveFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlightDetailsByLiveFlightID\", reflect.TypeOf((*Mocksvc)(nil).GetLiveFlightDetailsByLiveFlightID), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/db.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/db.go", "rel_path": "pkg/xmongodb/db.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 30, "text": "package xmongodb\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\ntype DB struct {\n\tcfg Config\n\n\t*mongo.Client\n}\n\n// Connect connects to the MongoDB database. It returns a new DB instance.\nfunc Connect(ctx context.Context, cfg Config) (*DB, error) {\n\tclient, err := mongo.Connect(ctx, options.Client().ApplyURI(cfg.dns()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &DB{\n\t\tcfg:    cfg,\n\t\tClient: client,\n\t}, nil\n}\n", "n_tokens": 130, "primary_symbol": "Connect", "primary_kind": "function", "primary_span": [19, 30], "def_symbols": ["Connect"], "symbols": ["Connect", "package", "xmongodb", "import", "context", "fmt", "strings", "mongodb", "org", "mongo", "driver", "options", "type", "struct", "cfg", "Config", "Client", "connects", "the", "MongoDB", "database", "returns", "new", "instance", "func", "ctx", "Context", "error", "client", "err", "ApplyURI", "dns", "nil", "return"], "doc_head": "package xmongodb\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype DB struct {\n\tcfg Config\n\t*mongo.Client\n}\n// Connect connects to the MongoDB database. It returns a new DB instance.\nfunc Connect(ctx context.Context, cfg Config) (*DB, error) {\n\tclient, err := mongo.Connect(ctx, options.Client().ApplyURI(cfg.dns()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &DB{\n\t\tcfg:    cfg,\n\t\tClient: client,\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/db.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/db.go", "rel_path": "pkg/xmongodb/db.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 31, "end_line": 40, "text": "type Config struct {\n\tUser       string `mapstructure:\"user\"`\n\tPassword   string `mapstructure:\"password\"`\n\tHost       string `mapstructure:\"host\"`\n\tPort       int    `mapstructure:\"port\"`\n\tDB         string `mapstructure:\"name\"`\n\tReplicaSet string `mapstructure:\"replica-set\"`\n\tURI        string `mapstructure:\"uri\"`\n}\n", "n_tokens": 76, "primary_symbol": "", "primary_kind": "", "primary_span": [31, 40], "def_symbols": [], "symbols": ["type", "Config", "struct", "User", "string", "mapstructure", "user", "Password", "password", "Host", "host", "Port", "int", "port", "name", "ReplicaSet", "replica", "set", "URI", "uri"], "doc_head": "type Config struct {\n\tUser       string `mapstructure:\"user\"`\n\tPassword   string `mapstructure:\"password\"`\n\tHost       string `mapstructure:\"host\"`\n\tPort       int    `mapstructure:\"port\"`\n\tDB         string `mapstructure:\"name\"`\n\tReplicaSet string `mapstructure:\"replica-set\"`\n\tURI        string `mapstructure:\"uri\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/db.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/db.go", "rel_path": "pkg/xmongodb/db.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 41, "end_line": 72, "text": "func (c *Config) dns() string {\n\tif c.URI != \"\" {\n\t\treturn c.URI\n\t}\n\n\tvar credentials string\n\n\tif c.User != \"\" && c.Password != \"\" {\n\t\tcredentials = fmt.Sprintf(\"%s:%s@\", c.User, c.Password)\n\t}\n\n\tquery := []string{\n\t\t\"authSource=admin\",\n\t}\n\tif c.ReplicaSet != \"\" {\n\t\tquery = append(query,\n\t\t\t\"replicaSet=\"+c.ReplicaSet,\n\t\t\t\"readPreference=secondaryPreferred\",\n\t\t\t\"retryWrites=false\",\n\t\t)\n\t}\n\n\treturn fmt.Sprintf(\n\t\t\"mongodb://%s%s:%d/%s?%s\",\n\t\tcredentials,\n\t\tc.Host,\n\t\tc.Port,\n\t\tc.DB,\n\t\tstrings.Join(query, \"&\"),\n\t)\n}\n", "n_tokens": 166, "primary_symbol": "dns", "primary_kind": "function", "primary_span": [41, 72], "def_symbols": ["dns"], "symbols": ["dns", "func", "Config", "string", "URI", "return", "var", "credentials", "User", "Password", "fmt", "Sprintf", "query", "authSource", "admin", "ReplicaSet", "append", "replicaSet", "readPreference", "secondaryPreferred", "retryWrites", "false", "mongodb", "Host", "Port", "strings", "Join"], "doc_head": "func (c *Config) dns() string {\n\tif c.URI != \"\" {\n\t\treturn c.URI\n\t}\n\tvar credentials string\n\tif c.User != \"\" && c.Password != \"\" {\n\t\tcredentials = fmt.Sprintf(\"%s:%s@\", c.User, c.Password)\n\t}\n\tquery := []string{\n\t\t\"authSource=admin\",\n\t}\n\tif c.ReplicaSet != \"\" {\n\t\tquery = append(query,\n\t\t\t\"replicaSet=\"+c.ReplicaSet,\n\t\t\t\"readPreference=secondaryPreferred\",\n\t\t\t\"retryWrites=false\",\n\t\t)\n\t}\n\treturn fmt.Sprintf(\n\t\t\"mongodb://%s%s:%d/%s?%s\",\n\t\tcredentials,\n\t\tc.Host,\n\t\tc.Port,\n\t\tc.DB,\n\t\tstrings.Join(query, \"&\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/migration.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/migration.go", "rel_path": "pkg/xmongodb/migration.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package xmongodb\n\nimport (\n\t\"context\"\n\t\"embed\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/golang-migrate/migrate/v4\"\n\t\"github.com/golang-migrate/migrate/v4/database/mongodb\"\n\t\"github.com/golang-migrate/migrate/v4/source/iofs\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n)\n\n//go:embed migrations/*.json\nvar migrationsfs embed.FS\n", "n_tokens": 90, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 16], "def_symbols": [], "symbols": ["package", "xmongodb", "import", "context", "embed", "github", "com", "cockroachdb", "errors", "golang", "migrate", "database", "mongodb", "source", "iofs", "org", "mongo", "driver", "migrations", "json", "var", "migrationsfs"], "doc_head": "package xmongodb\nimport (\n\t\"context\"\n\t\"embed\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/golang-migrate/migrate/v4\"\n\t\"github.com/golang-migrate/migrate/v4/database/mongodb\"\n\t\"github.com/golang-migrate/migrate/v4/source/iofs\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n)\n//go:embed migrations/*.json\nvar migrationsfs embed.FS"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/migration.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xmongodb/migration.go", "rel_path": "pkg/xmongodb/migration.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 17, "end_line": 42, "text": "// Migrate runs the database migrations.\nfunc Migrate(ctx context.Context, dbName string, client *mongo.Client) error {\n\tsourceDriver, err := iofs.New(migrationsfs, \"migrations\")\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create migrations source driver\")\n\t}\n\n\tdbDriver, err := mongodb.WithInstance(client, &mongodb.Config{\n\t\tDatabaseName: dbName,\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create database driver\")\n\t}\n\n\tmigrator, err := migrate.NewWithInstance(\"iofs\", sourceDriver, dbName, dbDriver)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create migrator\")\n\t}\n\n\tif err = migrator.Up(); err != nil && !errors.Is(err, migrate.ErrNoChange) {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "Migrate", "primary_kind": "function", "primary_span": [18, 42], "def_symbols": ["Migrate"], "symbols": ["Migrate", "runs", "the", "database", "migrations", "func", "ctx", "context", "Context", "dbName", "string", "client", "mongo", "Client", "error", "sourceDriver", "err", "iofs", "New", "migrationsfs", "nil", "return", "errors", "Wrap", "failed", "create", "source", "driver", "dbDriver", "mongodb", "WithInstance", "Config", "DatabaseName", "migrator", "migrate", "NewWithInstance", "ErrNoChange"], "doc_head": "// Migrate runs the database migrations.\nfunc Migrate(ctx context.Context, dbName string, client *mongo.Client) error {\n\tsourceDriver, err := iofs.New(migrationsfs, \"migrations\")\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create migrations source driver\")\n\t}\n\tdbDriver, err := mongodb.WithInstance(client, &mongodb.Config{\n\t\tDatabaseName: dbName,\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create database driver\")\n\t}\n\tmigrator, err := migrate.NewWithInstance(\"iofs\", sourceDriver, dbName, dbDriver)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create migrator\")\n\t}\n\tif err = migrator.Up(); err != nil && !errors.Is(err, migrate.ErrNoChange) {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/cache/redis.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/cache/redis.go", "rel_path": "pkg/cache/redis.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package cache\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/redis/go-redis/v9\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n\ntype Client struct {\n\t*cache.Cache\n\t*redis.Client\n}\n\ntype Config struct {\n\tHost     string `mapstructure:\"host\"`\n\tPort     int    `mapstructure:\"port\"`\n\tUser     string `mapstructure:\"user\"`\n\tPassword string `mapstructure:\"password\"`\n\tDatabase int    `mapstructure:\"database\"`\n\tTTL      struct {\n\t\tDefault time.Duration `mapstructure:\"default\"`\n\t} `mapstructure:\"ttl\"`\n}\n", "n_tokens": 144, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 28], "def_symbols": [], "symbols": ["package", "cache", "import", "context", "fmt", "github", "com", "redis", "impalastudios", "log", "uber", "org", "zap", "time", "type", "Client", "struct", "Cache", "Config", "Host", "string", "mapstructure", "host", "Port", "int", "port", "User", "user", "Password", "password", "Database", "database", "TTL", "Default", "Duration", "default", "ttl"], "doc_head": "package cache\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/redis/go-redis/v9\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\ntype Client struct {\n\t*cache.Cache\n\t*redis.Client\n}\ntype Config struct {\n\tHost     string `mapstructure:\"host\"`\n\tPort     int    `mapstructure:\"port\"`\n\tUser     string `mapstructure:\"user\"`\n\tPassword string `mapstructure:\"password\"`\n\tDatabase int    `mapstructure:\"database\"`\n\tTTL      struct {\n\t\tDefault time.Duration `mapstructure:\"default\"`\n\t} `mapstructure:\"ttl\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/cache/redis.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/cache/redis.go", "rel_path": "pkg/cache/redis.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 29, "end_line": 44, "text": "func Connect(ctx context.Context, cfg Config) *Client {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr:     fmt.Sprintf(\"%s:%d\", cfg.Host, cfg.Port),\n\t\tUsername: cfg.User,\n\t\tPassword: cfg.Password,\n\t\tDB:       cfg.Database,\n\t})\n\n\tlog.Info(ctx, \"Connecting to redis\", zap.Error(client.Ping(ctx).Err()))\n\n\treturn &Client{\n\t\tcache.New(&cache.Options{Redis: client}),\n\t\tclient,\n\t}\n}\n", "n_tokens": 101, "primary_symbol": "Connect", "primary_kind": "function", "primary_span": [29, 44], "def_symbols": ["Connect"], "symbols": ["Connect", "func", "ctx", "context", "Context", "cfg", "Config", "Client", "client", "redis", "NewClient", "Options", "Addr", "fmt", "Sprintf", "Host", "Port", "Username", "User", "Password", "Database", "log", "Info", "Connecting", "zap", "Error", "Ping", "Err", "return", "cache", "New", "Redis"], "doc_head": "func Connect(ctx context.Context, cfg Config) *Client {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr:     fmt.Sprintf(\"%s:%d\", cfg.Host, cfg.Port),\n\t\tUsername: cfg.User,\n\t\tPassword: cfg.Password,\n\t\tDB:       cfg.Database,\n\t})\n\tlog.Info(ctx, \"Connecting to redis\", zap.Error(client.Ping(ctx).Err()))\n\treturn &Client{\n\t\tcache.New(&cache.Options{Redis: client}),\n\t\tclient,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/pb.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/pb.go", "rel_path": "pkg/grpc/airlines/v0/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package v0\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairlines.proto=.;v0 airlines.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairlines.proto=.;v0 airlines.proto\n", "n_tokens": 75, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "Mairlines", "proto", "airlines", "grpc_out", "grpc_opt"], "doc_head": "package v0\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairlines.proto=.;v0 airlines.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairlines.proto=.;v0 airlines.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 24, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.36.6\n// \tprotoc        v3.21.12\n// source: airlines.proto\n\npackage v0\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n\tunsafe \"unsafe\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 183, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 24], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "airlines", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "timestamppb", "types", "known", "sync", "unsafe", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.36.6\n// \tprotoc        v3.21.12\n// source: airlines.proto\npackage v0\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n\tunsafe \"unsafe\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 25, "end_line": 46, "text": "type SearchAirlinesRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchAirlinesRequest) Reset() {\n\t*x = SearchAirlinesRequest{}\n\tmi := &file_airlines_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchAirlinesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirlinesRequest) ProtoMessage() {}\n", "n_tokens": 198, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [34, 46], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchAirlinesRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchAirlinesRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchAirlinesRequest) Reset() {\n\t*x = SearchAirlinesRequest{}\n\tmi := &file_airlines_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchAirlinesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirlinesRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 47, "end_line": 77, "text": "func (x *SearchAirlinesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchAirlinesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *SearchAirlinesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirlinesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 191, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [47, 77], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchAirlinesRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchAirlinesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchAirlinesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *SearchAirlinesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirlinesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 78, "end_line": 94, "text": "func (x *SearchAirlinesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchAirlinesResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*SlimAirline         `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,4,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 178, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [78, 94], "def_symbols": ["GetCursor"], "symbols": ["GetCursor", "func", "SearchAirlinesRequest", "string", "nil", "Cursor", "return", "type", "SearchAirlinesResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Result", "SlimAirline", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "opt", "next", "oneof", "Previous", "previous", "TotalCount", "uint32", "varint", "totalCount", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (x *SearchAirlinesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchAirlinesResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*SlimAirline         `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,4,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 95, "end_line": 119, "text": "func (x *SearchAirlinesResponse) Reset() {\n\t*x = SearchAirlinesResponse{}\n\tmi := &file_airlines_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchAirlinesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirlinesResponse) ProtoMessage() {}\n\nfunc (x *SearchAirlinesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [95, 119], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchAirlinesResponse", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchAirlinesResponse) Reset() {\n\t*x = SearchAirlinesResponse{}\n\tmi := &file_airlines_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchAirlinesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirlinesResponse) ProtoMessage() {}\nfunc (x *SearchAirlinesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 120, "end_line": 152, "text": "// Deprecated: Use SearchAirlinesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *SearchAirlinesResponse) GetResult() []*SlimAirline {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n\nfunc (x *SearchAirlinesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirlinesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirlinesResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [121, 152], "def_symbols": ["Descriptor", "GetResult", "GetNext", "GetPrevious", "GetTotalCount"], "symbols": ["Descriptor", "GetResult", "GetNext", "GetPrevious", "GetTotalCount", "Deprecated", "Use", "SearchAirlinesResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "SlimAirline", "nil", "Result", "string", "Next", "Previous", "uint32", "TotalCount"], "doc_head": "// Deprecated: Use SearchAirlinesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *SearchAirlinesResponse) GetResult() []*SlimAirline {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\nfunc (x *SearchAirlinesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirlinesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirlinesResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 153, "end_line": 172, "text": "type DeleteAirlineRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *DeleteAirlineRequest) Reset() {\n\t*x = DeleteAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *DeleteAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*DeleteAirlineRequest) ProtoMessage() {}\n", "n_tokens": 146, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [160, 172], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "DeleteAirlineRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type DeleteAirlineRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *DeleteAirlineRequest) Reset() {\n\t*x = DeleteAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *DeleteAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*DeleteAirlineRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 173, "end_line": 196, "text": "func (x *DeleteAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DeleteAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *DeleteAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [173, 196], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "DeleteAirlineRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string"], "doc_head": "func (x *DeleteAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use DeleteAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{2}\n}\nfunc (x *DeleteAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 197, "end_line": 216, "text": "type DeleteAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *DeleteAirlineResponse) Reset() {\n\t*x = DeleteAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *DeleteAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*DeleteAirlineResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [204, 216], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "DeleteAirlineResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type DeleteAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *DeleteAirlineResponse) Reset() {\n\t*x = DeleteAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *DeleteAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*DeleteAirlineResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 217, "end_line": 240, "text": "func (x *DeleteAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DeleteAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *DeleteAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 164, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [217, 240], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "func", "DeleteAirlineResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *DeleteAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use DeleteAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{3}\n}\nfunc (x *DeleteAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 241, "end_line": 258, "text": "type UpdateAirlineRequest struct {\n\tstate                      protoimpl.MessageState `protogen:\"open.v1\"`\n\tId                         string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,7,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string      `protobuf:\"bytes,8,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl                *string                `protobuf:\"bytes,9,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string                `protobuf:\"bytes,10,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string                `protobuf:\"bytes,11,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tHubAirport                 *string                `protobuf:\"bytes,12,opt,name=hubAirport,proto3,oneof\" json:\"hubAirport,omitempty\"`\n\tunknownFields              protoimpl.UnknownFields\n\tsizeCache                  protoimpl.SizeCache\n}\n", "n_tokens": 408, "primary_symbol": "", "primary_kind": "", "primary_span": [241, 258], "def_symbols": [], "symbols": ["type", "UpdateAirlineRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "HubAirport", "hubAirport", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type UpdateAirlineRequest struct {\n\tstate                      protoimpl.MessageState `protogen:\"open.v1\"`\n\tId                         string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,7,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string      `protobuf:\"bytes,8,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,o"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 259, "end_line": 283, "text": "func (x *UpdateAirlineRequest) Reset() {\n\t*x = UpdateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirlineRequest) ProtoMessage() {}\n\nfunc (x *UpdateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [259, 283], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAirlineRequest", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAirlineRequest) Reset() {\n\t*x = UpdateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirlineRequest) ProtoMessage() {}\nfunc (x *UpdateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 284, "end_line": 316, "text": "// Deprecated: Use UpdateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *UpdateAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n", "n_tokens": 185, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [285, 316], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "Deprecated", "Use", "UpdateAirlineRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification"], "doc_head": "// Deprecated: Use UpdateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{4}\n}\nfunc (x *UpdateAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 317, "end_line": 351, "text": "func (x *UpdateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 176, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [317, 351], "def_symbols": ["GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl"], "symbols": ["GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "func", "UpdateAirlineRequest", "string", "nil", "return", "Name", "map", "Description", "WebsiteUrl", "WikipediaUrl", "FacebookUrl"], "doc_head": "func (x *UpdateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 352, "end_line": 379, "text": "func (x *UpdateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetHubAirport() string {\n\tif x != nil && x.HubAirport != nil {\n\t\treturn *x.HubAirport\n\t}\n\treturn \"\"\n}\n\ntype UpdateAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 189, "primary_symbol": "GetTwitterUrl", "primary_kind": "function", "primary_span": [352, 379], "def_symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetHubAirport"], "symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetHubAirport", "func", "UpdateAirlineRequest", "string", "nil", "TwitterUrl", "return", "ReservationTelephoneNumber", "HubAirport", "type", "UpdateAirlineResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (x *UpdateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetHubAirport() string {\n\tif x != nil && x.HubAirport != nil {\n\t\treturn *x.HubAirport\n\t}\n\treturn \"\"\n}\ntype UpdateAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 380, "end_line": 404, "text": "func (x *UpdateAirlineResponse) Reset() {\n\t*x = UpdateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirlineResponse) ProtoMessage() {}\n\nfunc (x *UpdateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [380, 404], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAirlineResponse", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAirlineResponse) Reset() {\n\t*x = UpdateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirlineResponse) ProtoMessage() {}\nfunc (x *UpdateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 405, "end_line": 416, "text": "// Deprecated: Use UpdateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *UpdateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 82, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [406, 416], "def_symbols": ["Descriptor", "GetAirline"], "symbols": ["Descriptor", "GetAirline", "Deprecated", "Use", "UpdateAirlineResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "Airline", "nil"], "doc_head": "// Deprecated: Use UpdateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{5}\n}\nfunc (x *UpdateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#18", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 417, "end_line": 433, "text": "type CreateAirlineRequest struct {\n\tstate                      protoimpl.MessageState `protogen:\"open.v1\"`\n\tIata                       *string                `protobuf:\"bytes,1,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,2,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,3,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,4,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,5,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,6,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string      `protobuf:\"bytes,7,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl                *string                `protobuf:\"bytes,8,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string                `protobuf:\"bytes,9,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string                `protobuf:\"bytes,10,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tHubAirport                 string                 `protobuf:\"bytes,11,opt,name=hubAirport,proto3\" json:\"hubAirport,omitempty\"`\n\tunknownFields              protoimpl.UnknownFields\n\tsizeCache                  protoimpl.SizeCache\n}\n", "n_tokens": 383, "primary_symbol": "", "primary_kind": "", "primary_span": [417, 433], "def_symbols": [], "symbols": ["type", "CreateAirlineRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Iata", "string", "protobuf", "bytes", "opt", "name", "iata", "proto3", "oneof", "json", "omitempty", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "HubAirport", "hubAirport", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type CreateAirlineRequest struct {\n\tstate                      protoimpl.MessageState `protogen:\"open.v1\"`\n\tIata                       *string                `protobuf:\"bytes,1,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,2,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,3,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,4,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,5,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,6,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string      `protobuf:\"bytes,7,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl                *string                `protobu"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#19", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 434, "end_line": 458, "text": "func (x *CreateAirlineRequest) Reset() {\n\t*x = CreateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirlineRequest) ProtoMessage() {}\n\nfunc (x *CreateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [434, 458], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateAirlineRequest", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateAirlineRequest) Reset() {\n\t*x = CreateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirlineRequest) ProtoMessage() {}\nfunc (x *CreateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#20", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 459, "end_line": 491, "text": "// Deprecated: Use CreateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{6}\n}\n\nfunc (x *CreateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n", "n_tokens": 184, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [460, 491], "def_symbols": ["Descriptor", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "CreateAirlineRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "Name"], "doc_head": "// Deprecated: Use CreateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{6}\n}\nfunc (x *CreateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *CreateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#21", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 492, "end_line": 526, "text": "func (x *CreateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 188, "primary_symbol": "GetDescription", "primary_kind": "function", "primary_span": [492, 526], "def_symbols": ["GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl"], "symbols": ["GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "func", "CreateAirlineRequest", "map", "string", "nil", "return", "Description", "WebsiteUrl", "WikipediaUrl", "FacebookUrl", "TwitterUrl"], "doc_head": "func (x *CreateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *CreateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *CreateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#22", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 527, "end_line": 554, "text": "func (x *CreateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetHubAirport() string {\n\tif x != nil {\n\t\treturn x.HubAirport\n\t}\n\treturn \"\"\n}\n\ntype CreateAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateAirlineResponse) Reset() {\n\t*x = CreateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 194, "primary_symbol": "GetReservationTelephoneNumber", "primary_kind": "function", "primary_span": [527, 554], "def_symbols": ["GetReservationTelephoneNumber", "GetHubAirport", "Reset"], "symbols": ["GetReservationTelephoneNumber", "GetHubAirport", "Reset", "func", "CreateAirlineRequest", "string", "nil", "ReservationTelephoneNumber", "return", "HubAirport", "type", "CreateAirlineResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *CreateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetHubAirport() string {\n\tif x != nil {\n\t\treturn x.HubAirport\n\t}\n\treturn \"\"\n}\ntype CreateAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateAirlineResponse) Reset() {\n\t*x = CreateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#23", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 555, "end_line": 584, "text": "func (x *CreateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirlineResponse) ProtoMessage() {}\n\nfunc (x *CreateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{7}\n}\n\nfunc (x *CreateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 198, "primary_symbol": "String", "primary_kind": "function", "primary_span": [555, 584], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirline", "func", "CreateAirlineResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *CreateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirlineResponse) ProtoMessage() {}\nfunc (x *CreateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{7}\n}\nfunc (x *CreateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#24", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 585, "end_line": 604, "text": "type AirlineDetailsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *AirlineDetailsRequest) Reset() {\n\t*x = AirlineDetailsRequest{}\n\tmi := &file_airlines_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirlineDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirlineDetailsRequest) ProtoMessage() {}\n", "n_tokens": 146, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [592, 604], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirlineDetailsRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type AirlineDetailsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *AirlineDetailsRequest) Reset() {\n\t*x = AirlineDetailsRequest{}\n\tmi := &file_airlines_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirlineDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirlineDetailsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#25", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 605, "end_line": 628, "text": "func (x *AirlineDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirlineDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *AirlineDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [605, 628], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "AirlineDetailsRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string"], "doc_head": "func (x *AirlineDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirlineDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{8}\n}\nfunc (x *AirlineDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#26", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 629, "end_line": 648, "text": "type AirlineDetailsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *AirlineDetailsResponse) Reset() {\n\t*x = AirlineDetailsResponse{}\n\tmi := &file_airlines_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirlineDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirlineDetailsResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [636, 648], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirlineDetailsResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AirlineDetailsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *AirlineDetailsResponse) Reset() {\n\t*x = AirlineDetailsResponse{}\n\tmi := &file_airlines_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirlineDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirlineDetailsResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#27", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 649, "end_line": 672, "text": "func (x *AirlineDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirlineDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{9}\n}\n\nfunc (x *AirlineDetailsResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 164, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [649, 672], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "func", "AirlineDetailsResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *AirlineDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirlineDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{9}\n}\nfunc (x *AirlineDetailsResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#28", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 673, "end_line": 692, "text": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tIds           []string               `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airlines_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetRequest) ProtoMessage() {}\n", "n_tokens": 145, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [680, 692], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Ids", "string", "protobuf", "bytes", "rep", "name", "ids", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tIds           []string               `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airlines_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#29", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 693, "end_line": 716, "text": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{10}\n}\n\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\n", "n_tokens": 157, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [693, 716], "def_symbols": ["ProtoReflect", "Descriptor", "GetIds"], "symbols": ["ProtoReflect", "Descriptor", "GetIds", "func", "BatchGetRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Ids"], "doc_head": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{10}\n}\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#30", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 717, "end_line": 736, "text": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirlines      []*Airline             `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airlines_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetResponse) ProtoMessage() {}\n", "n_tokens": 148, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [724, 736], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airlines", "Airline", "protobuf", "bytes", "rep", "name", "airlines", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirlines      []*Airline             `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airlines_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#31", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 737, "end_line": 760, "text": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{11}\n}\n\nfunc (x *BatchGetResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}\n", "n_tokens": 159, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [737, 760], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirlines"], "symbols": ["ProtoReflect", "Descriptor", "GetAirlines", "func", "BatchGetResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline", "Airlines"], "doc_head": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{11}\n}\nfunc (x *BatchGetResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#32", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 761, "end_line": 781, "text": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignators   []string               `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}\n", "n_tokens": 193, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [769, 781], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designators", "string", "protobuf", "bytes", "rep", "name", "designators", "proto3", "json", "omitempty", "ForDate", "opt", "forDate", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignators   []string               `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#33", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 782, "end_line": 805, "text": "func (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{12}\n}\n\nfunc (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\n", "n_tokens": 170, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [782, 805], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignators"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignators", "func", "BatchGetByDesignatorRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Designators"], "doc_head": "func (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{12}\n}\nfunc (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#34", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 806, "end_line": 832, "text": "func (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirlines      []*Airline             `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 203, "primary_symbol": "GetForDate", "primary_kind": "function", "primary_span": [806, 832], "def_symbols": ["GetForDate", "Reset", "String", "ProtoMessage"], "symbols": ["GetForDate", "Reset", "String", "ProtoMessage", "func", "BatchGetByDesignatorRequest", "string", "nil", "ForDate", "return", "type", "BatchGetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airlines", "Airline", "protobuf", "bytes", "rep", "name", "airlines", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirlines      []*Airline             `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#35", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 833, "end_line": 856, "text": "func (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{13}\n}\n\nfunc (x *BatchGetByDesignatorResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}\n", "n_tokens": 171, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [833, 856], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirlines"], "symbols": ["ProtoReflect", "Descriptor", "GetAirlines", "func", "BatchGetByDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline", "Airlines"], "doc_head": "func (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{13}\n}\nfunc (x *BatchGetByDesignatorResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#36", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 857, "end_line": 877, "text": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    string                 `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetByDesignatorRequest) ProtoMessage() {}\n", "n_tokens": 186, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [865, 877], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "ForDate", "forDate", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    string                 `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetByDesignatorRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#37", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 878, "end_line": 908, "text": "func (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{14}\n}\n\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n", "n_tokens": 203, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [878, 908], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "GetForDate"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "GetForDate", "func", "GetByDesignatorRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Designator", "ForDate"], "doc_head": "func (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{14}\n}\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#38", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 909, "end_line": 928, "text": "type GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetByDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 158, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [916, 928], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirline       *Airline               `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetByDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#39", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 929, "end_line": 952, "text": "func (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{15}\n}\n\nfunc (x *GetByDesignatorResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 168, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [929, 952], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "func", "GetByDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{15}\n}\nfunc (x *GetByDesignatorResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#40", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 953, "end_line": 972, "text": "type GetDesignatorsForAirlineRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetDesignatorsForAirlineRequest) Reset() {\n\t*x = GetDesignatorsForAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorsForAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorsForAirlineRequest) ProtoMessage() {}\n", "n_tokens": 161, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [960, 972], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetDesignatorsForAirlineRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type GetDesignatorsForAirlineRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetDesignatorsForAirlineRequest) Reset() {\n\t*x = GetDesignatorsForAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorsForAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorsForAirlineRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#41", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 973, "end_line": 996, "text": "func (x *GetDesignatorsForAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDesignatorsForAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorsForAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{16}\n}\n\nfunc (x *GetDesignatorsForAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 170, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [973, 996], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "GetDesignatorsForAirlineRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string"], "doc_head": "func (x *GetDesignatorsForAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetDesignatorsForAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorsForAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{16}\n}\nfunc (x *GetDesignatorsForAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#42", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 997, "end_line": 1016, "text": "type GetDesignatorsForAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignators   []*Designator          `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetDesignatorsForAirlineResponse) Reset() {\n\t*x = GetDesignatorsForAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorsForAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorsForAirlineResponse) ProtoMessage() {}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1004, 1016], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetDesignatorsForAirlineResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designators", "Designator", "protobuf", "bytes", "rep", "name", "designators", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetDesignatorsForAirlineResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignators   []*Designator          `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetDesignatorsForAirlineResponse) Reset() {\n\t*x = GetDesignatorsForAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorsForAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorsForAirlineResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#43", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1017, "end_line": 1040, "text": "func (x *GetDesignatorsForAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDesignatorsForAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorsForAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{17}\n}\n\nfunc (x *GetDesignatorsForAirlineResponse) GetDesignators() []*Designator {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\n", "n_tokens": 175, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1017, 1040], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignators"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignators", "func", "GetDesignatorsForAirlineResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Designator", "Designators"], "doc_head": "func (x *GetDesignatorsForAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetDesignatorsForAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorsForAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{17}\n}\nfunc (x *GetDesignatorsForAirlineResponse) GetDesignators() []*Designator {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#44", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1041, "end_line": 1053, "text": "type Designator struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    string                 `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tAirlineId     string                 `protobuf:\"bytes,2,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tValidFrom     *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo       *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tAirlineName   string                 `protobuf:\"bytes,5,opt,name=airlineName,proto3\" json:\"airlineName,omitempty\"`\n\tCreatedAt     *timestamppb.Timestamp `protobuf:\"bytes,14,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt     *timestamppb.Timestamp `protobuf:\"bytes,15,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 234, "primary_symbol": "", "primary_kind": "", "primary_span": [1041, 1053], "def_symbols": [], "symbols": ["type", "Designator", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "AirlineId", "airlineId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "AirlineName", "airlineName", "CreatedAt", "createdAt", "UpdatedAt", "updatedAt", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Designator struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    string                 `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tAirlineId     string                 `protobuf:\"bytes,2,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tValidFrom     *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo       *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tAirlineName   string                 `protobuf:\"bytes,5,opt,name=airlineName,proto3\" json:\"airlineName,omitempty\"`\n\tCreatedAt     *timestamppb.Timestamp `protobuf:\"bytes,14,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt     *timestamppb.Timestamp `protobuf:\"bytes,15,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#45", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1054, "end_line": 1078, "text": "func (x *Designator) Reset() {\n\t*x = Designator{}\n\tmi := &file_airlines_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Designator) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Designator) ProtoMessage() {}\n\nfunc (x *Designator) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1054, 1078], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Designator", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Designator) Reset() {\n\t*x = Designator{}\n\tmi := &file_airlines_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Designator) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Designator) ProtoMessage() {}\nfunc (x *Designator) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#46", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 1079, "end_line": 1118, "text": "// Deprecated: Use Designator.ProtoReflect.Descriptor instead.\nfunc (*Designator) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{18}\n}\n\nfunc (x *Designator) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Designator) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Designator) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetAirlineName() string {\n\tif x != nil {\n\t\treturn x.AirlineName\n\t}\n\treturn \"\"\n}\n", "n_tokens": 206, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1080, 1118], "def_symbols": ["Descriptor", "GetDesignator", "GetAirlineId", "GetValidFrom", "GetValidTo", "GetAirlineName"], "symbols": ["Descriptor", "GetDesignator", "GetAirlineId", "GetValidFrom", "GetValidTo", "GetAirlineName", "Deprecated", "Use", "Designator", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "AirlineId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo", "AirlineName"], "doc_head": "// Deprecated: Use Designator.ProtoReflect.Descriptor instead.\nfunc (*Designator) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{18}\n}\nfunc (x *Designator) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Designator) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\nfunc (x *Designator) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetAirlineName() string {\n\tif x != nil {\n\t\treturn x.AirlineName\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#47", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 1119, "end_line": 1132, "text": "func (x *Designator) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n", "n_tokens": 68, "primary_symbol": "GetCreatedAt", "primary_kind": "function", "primary_span": [1119, 1132], "def_symbols": ["GetCreatedAt", "GetUpdatedAt"], "symbols": ["GetCreatedAt", "GetUpdatedAt", "func", "Designator", "timestamppb", "Timestamp", "nil", "return", "CreatedAt", "UpdatedAt"], "doc_head": "func (x *Designator) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#48", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 1133, "end_line": 1148, "text": "type SlimAirline struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tId             string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata           *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao           *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName           string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tAssets         *Assets                `protobuf:\"bytes,6,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tCreatedAt      *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt      *timestamppb.Timestamp `protobuf:\"bytes,8,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator     *string                `protobuf:\"bytes,9,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine       bool                   `protobuf:\"varint,10,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n", "n_tokens": 294, "primary_symbol": "", "primary_kind": "", "primary_span": [1133, 1148], "def_symbols": [], "symbols": ["type", "SlimAirline", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Assets", "assets", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "Designator", "designator", "Pristine", "bool", "pristine", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type SlimAirline struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tId             string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata           *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao           *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName           string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tAssets         *Assets                `protobuf:\"bytes,6,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tCreatedAt      *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt      *timestamppb.Timestamp `protobuf:\"bytes,8,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator     *string                `protobuf:\"bytes,9,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine       bool                   `protobuf:\"varint,10,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n\tun"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#49", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 1149, "end_line": 1173, "text": "func (x *SlimAirline) Reset() {\n\t*x = SlimAirline{}\n\tmi := &file_airlines_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SlimAirline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SlimAirline) ProtoMessage() {}\n\nfunc (x *SlimAirline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1149, 1173], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SlimAirline", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SlimAirline) Reset() {\n\t*x = SlimAirline{}\n\tmi := &file_airlines_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SlimAirline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SlimAirline) ProtoMessage() {}\nfunc (x *SlimAirline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#50", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 1174, "end_line": 1213, "text": "// Deprecated: Use SlimAirline.ProtoReflect.Descriptor instead.\nfunc (*SlimAirline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{19}\n}\n\nfunc (x *SlimAirline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *SlimAirline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n", "n_tokens": 206, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1175, 1213], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "SlimAirline", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "Name"], "doc_head": "// Deprecated: Use SlimAirline.ProtoReflect.Descriptor instead.\nfunc (*SlimAirline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{19}\n}\nfunc (x *SlimAirline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *SlimAirline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#51", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 1214, "end_line": 1248, "text": "func (x *SlimAirline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\n\nfunc (x *SlimAirline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *SlimAirline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *SlimAirline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\n", "n_tokens": 171, "primary_symbol": "GetAssets", "primary_kind": "function", "primary_span": [1214, 1248], "def_symbols": ["GetAssets", "GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine"], "symbols": ["GetAssets", "GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine", "func", "SlimAirline", "Assets", "nil", "return", "timestamppb", "Timestamp", "CreatedAt", "UpdatedAt", "string", "Designator", "bool", "Pristine", "false"], "doc_head": "func (x *SlimAirline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\nfunc (x *SlimAirline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *SlimAirline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *SlimAirline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#52", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 1249, "end_line": 1271, "text": "type Airline struct {\n\tstate                      protoimpl.MessageState `protogen:\"open.v1\"`\n\tId                         string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tAssets                     *Assets                `protobuf:\"bytes,7,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,8,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string      `protobuf:\"bytes,9,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl                *string                `protobuf:\"bytes,10,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string                `protobuf:\"bytes,11,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string                `protobuf:\"bytes,12,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tHubAirport                 *Airline_Airport       `protobuf:\"bytes,13,opt,name=hubAirport,proto3,oneof\" json:\"hubAirport,omitempty\"`\n\tCreatedAt                  *timestamppb.Timestamp `protobuf:\"bytes,14,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt                  *timestamppb.Timestamp `protobuf:\"bytes,15,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator                 *string                `protobuf:\"bytes,16,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine                   bool                   `protobuf:\"varint,17,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n\tunknownFields              protoimpl.UnknownFields\n\tsizeCache                  protoimpl.SizeCache\n}\n", "n_tokens": 545, "primary_symbol": "", "primary_kind": "", "primary_span": [1249, 1271], "def_symbols": [], "symbols": ["type", "Airline", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "Assets", "assets", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "HubAirport", "Airline_Airport", "hubAirport", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "Designator", "designator", "Pristine", "bool", "pristine", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Airline struct {\n\tstate                      protoimpl.MessageState `protogen:\"open.v1\"`\n\tId                         string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tAssets                     *Assets                `protobuf:\"bytes,7,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,8,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string  "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#53", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 1272, "end_line": 1296, "text": "func (x *Airline) Reset() {\n\t*x = Airline{}\n\tmi := &file_airlines_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline) ProtoMessage() {}\n\nfunc (x *Airline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1272, 1296], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline) Reset() {\n\t*x = Airline{}\n\tmi := &file_airlines_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline) ProtoMessage() {}\nfunc (x *Airline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#54", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 1297, "end_line": 1336, "text": "// Deprecated: Use Airline.ProtoReflect.Descriptor instead.\nfunc (*Airline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20}\n}\n\nfunc (x *Airline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *Airline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n", "n_tokens": 199, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1298, 1336], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "Airline", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "Name"], "doc_head": "// Deprecated: Use Airline.ProtoReflect.Descriptor instead.\nfunc (*Airline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20}\n}\nfunc (x *Airline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *Airline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#55", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 55, "start_line": 1337, "end_line": 1378, "text": "func (x *Airline) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 208, "primary_symbol": "GetDescription", "primary_kind": "function", "primary_span": [1337, 1378], "def_symbols": ["GetDescription", "GetAssets", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl"], "symbols": ["GetDescription", "GetAssets", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "func", "Airline", "map", "string", "nil", "return", "Description", "Assets", "WebsiteUrl", "WikipediaUrl", "FacebookUrl", "TwitterUrl"], "doc_head": "func (x *Airline) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#56", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 56, "start_line": 1379, "end_line": 1413, "text": "func (x *Airline) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetHubAirport() *Airline_Airport {\n\tif x != nil {\n\t\treturn x.HubAirport\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n", "n_tokens": 181, "primary_symbol": "GetReservationTelephoneNumber", "primary_kind": "function", "primary_span": [1379, 1413], "def_symbols": ["GetReservationTelephoneNumber", "GetHubAirport", "GetCreatedAt", "GetUpdatedAt", "GetDesignator"], "symbols": ["GetReservationTelephoneNumber", "GetHubAirport", "GetCreatedAt", "GetUpdatedAt", "GetDesignator", "func", "Airline", "string", "nil", "ReservationTelephoneNumber", "return", "Airline_Airport", "HubAirport", "timestamppb", "Timestamp", "CreatedAt", "UpdatedAt", "Designator"], "doc_head": "func (x *Airline) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetHubAirport() *Airline_Airport {\n\tif x != nil {\n\t\treturn x.HubAirport\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#57", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 57, "start_line": 1414, "end_line": 1436, "text": "func (x *Airline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\n\ntype Assets struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tRect          *string                `protobuf:\"bytes,1,opt,name=rect,proto3,oneof\" json:\"rect,omitempty\"`\n\tSquare        *string                `protobuf:\"bytes,2,opt,name=square,proto3,oneof\" json:\"square,omitempty\"`\n\tTail          *string                `protobuf:\"bytes,3,opt,name=tail,proto3,oneof\" json:\"tail,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *Assets) Reset() {\n\t*x = Assets{}\n\tmi := &file_airlines_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 194, "primary_symbol": "GetPristine", "primary_kind": "function", "primary_span": [1414, 1436], "def_symbols": ["GetPristine", "Reset"], "symbols": ["GetPristine", "Reset", "func", "Airline", "bool", "nil", "return", "Pristine", "false", "type", "Assets", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Rect", "string", "protobuf", "bytes", "opt", "name", "rect", "proto3", "oneof", "json", "omitempty", "Square", "square", "Tail", "tail", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *Airline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\ntype Assets struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tRect          *string                `protobuf:\"bytes,1,opt,name=rect,proto3,oneof\" json:\"rect,omitempty\"`\n\tSquare        *string                `protobuf:\"bytes,2,opt,name=square,proto3,oneof\" json:\"square,omitempty\"`\n\tTail          *string                `protobuf:\"bytes,3,opt,name=tail,proto3,oneof\" json:\"tail,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *Assets) Reset() {\n\t*x = Assets{}\n\tmi := &file_airlines_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#58", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 58, "start_line": 1437, "end_line": 1466, "text": "func (x *Assets) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Assets) ProtoMessage() {}\n\nfunc (x *Assets) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Assets.ProtoReflect.Descriptor instead.\nfunc (*Assets) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21}\n}\n\nfunc (x *Assets) GetRect() string {\n\tif x != nil && x.Rect != nil {\n\t\treturn *x.Rect\n\t}\n\treturn \"\"\n}\n", "n_tokens": 180, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1437, 1466], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetRect"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetRect", "func", "Assets", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Rect"], "doc_head": "func (x *Assets) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Assets) ProtoMessage() {}\nfunc (x *Assets) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Assets.ProtoReflect.Descriptor instead.\nfunc (*Assets) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21}\n}\nfunc (x *Assets) GetRect() string {\n\tif x != nil && x.Rect != nil {\n\t\treturn *x.Rect\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#59", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 59, "start_line": 1467, "end_line": 1495, "text": "func (x *Assets) GetSquare() string {\n\tif x != nil && x.Square != nil {\n\t\treturn *x.Square\n\t}\n\treturn \"\"\n}\n\nfunc (x *Assets) GetTail() string {\n\tif x != nil && x.Tail != nil {\n\t\treturn *x.Tail\n\t}\n\treturn \"\"\n}\n\ntype Error struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCode          string                 `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tMessage       string                 `protobuf:\"bytes,2,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *Error) Reset() {\n\t*x = Error{}\n\tmi := &file_airlines_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 193, "primary_symbol": "GetSquare", "primary_kind": "function", "primary_span": [1467, 1495], "def_symbols": ["GetSquare", "GetTail", "Reset"], "symbols": ["GetSquare", "GetTail", "Reset", "func", "Assets", "string", "nil", "Square", "return", "Tail", "type", "Error", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Code", "protobuf", "bytes", "opt", "name", "code", "proto3", "json", "omitempty", "Message", "message", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *Assets) GetSquare() string {\n\tif x != nil && x.Square != nil {\n\t\treturn *x.Square\n\t}\n\treturn \"\"\n}\nfunc (x *Assets) GetTail() string {\n\tif x != nil && x.Tail != nil {\n\t\treturn *x.Tail\n\t}\n\treturn \"\"\n}\ntype Error struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCode          string                 `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tMessage       string                 `protobuf:\"bytes,2,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *Error) Reset() {\n\t*x = Error{}\n\tmi := &file_airlines_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#60", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 60, "start_line": 1496, "end_line": 1532, "text": "func (x *Error) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Error) ProtoMessage() {}\n\nfunc (x *Error) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Error.ProtoReflect.Descriptor instead.\nfunc (*Error) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{22}\n}\n\nfunc (x *Error) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\n\nfunc (x *Error) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}\n", "n_tokens": 199, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1496, 1532], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCode", "GetMessage"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCode", "GetMessage", "func", "Error", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Code"], "doc_head": "func (x *Error) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Error) ProtoMessage() {}\nfunc (x *Error) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Error.ProtoReflect.Descriptor instead.\nfunc (*Error) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{22}\n}\nfunc (x *Error) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\nfunc (x *Error) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#61", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 61, "start_line": 1533, "end_line": 1542, "text": "type CreateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirlineId      string                 `protobuf:\"bytes,2,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n", "n_tokens": 156, "primary_symbol": "", "primary_kind": "", "primary_span": [1533, 1542], "def_symbols": [], "symbols": ["type", "CreateDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirlineId", "airlineId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type CreateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirlineId      string                 `protobuf:\"bytes,2,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#62", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 62, "start_line": 1543, "end_line": 1567, "text": "func (x *CreateDesignatorRequest) Reset() {\n\t*x = CreateDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[23]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateDesignatorRequest) ProtoMessage() {}\n\nfunc (x *CreateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[23]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1543, 1567], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateDesignatorRequest", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateDesignatorRequest) Reset() {\n\t*x = CreateDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[23]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateDesignatorRequest) ProtoMessage() {}\nfunc (x *CreateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[23]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#63", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 63, "start_line": 1568, "end_line": 1600, "text": "// Deprecated: Use CreateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{23}\n}\n\nfunc (x *CreateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateDesignatorRequest) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *CreateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1569, 1600], "def_symbols": ["Descriptor", "GetDesignatorCode", "GetAirlineId", "GetValidFrom", "GetValidTo"], "symbols": ["Descriptor", "GetDesignatorCode", "GetAirlineId", "GetValidFrom", "GetValidTo", "Deprecated", "Use", "CreateDesignatorRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "DesignatorCode", "AirlineId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo"], "doc_head": "// Deprecated: Use CreateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{23}\n}\nfunc (x *CreateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\nfunc (x *CreateDesignatorRequest) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\nfunc (x *CreateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *CreateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#64", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 64, "start_line": 1601, "end_line": 1620, "text": "type CreateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateDesignatorResponse) Reset() {\n\t*x = CreateDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[24]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1608, 1620], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateDesignatorResponse) Reset() {\n\t*x = CreateDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[24]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#65", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 65, "start_line": 1621, "end_line": 1644, "text": "func (x *CreateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[24]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{24}\n}\n\nfunc (x *CreateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1621, 1644], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "CreateDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *CreateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[24]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{24}\n}\nfunc (x *CreateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#66", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 66, "start_line": 1645, "end_line": 1654, "text": "type UpdateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,2,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirlineId      string                 `protobuf:\"bytes,3,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n", "n_tokens": 156, "primary_symbol": "", "primary_kind": "", "primary_span": [1645, 1654], "def_symbols": [], "symbols": ["type", "UpdateDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirlineId", "airlineId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type UpdateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,2,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirlineId      string                 `protobuf:\"bytes,3,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#67", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 67, "start_line": 1655, "end_line": 1679, "text": "func (x *UpdateDesignatorRequest) Reset() {\n\t*x = UpdateDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[25]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDesignatorRequest) ProtoMessage() {}\n\nfunc (x *UpdateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[25]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1655, 1679], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateDesignatorRequest", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateDesignatorRequest) Reset() {\n\t*x = UpdateDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[25]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateDesignatorRequest) ProtoMessage() {}\nfunc (x *UpdateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[25]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#68", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 68, "start_line": 1680, "end_line": 1712, "text": "// Deprecated: Use UpdateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{25}\n}\n\nfunc (x *UpdateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateDesignatorRequest) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1681, 1712], "def_symbols": ["Descriptor", "GetDesignatorCode", "GetAirlineId", "GetValidFrom", "GetValidTo"], "symbols": ["Descriptor", "GetDesignatorCode", "GetAirlineId", "GetValidFrom", "GetValidTo", "Deprecated", "Use", "UpdateDesignatorRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "DesignatorCode", "AirlineId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo"], "doc_head": "// Deprecated: Use UpdateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{25}\n}\nfunc (x *UpdateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateDesignatorRequest) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *UpdateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#69", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 69, "start_line": 1713, "end_line": 1732, "text": "type UpdateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UpdateDesignatorResponse) Reset() {\n\t*x = UpdateDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[26]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1720, 1732], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UpdateDesignatorResponse) Reset() {\n\t*x = UpdateDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[26]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#70", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 70, "start_line": 1733, "end_line": 1756, "text": "func (x *UpdateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[26]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{26}\n}\n\nfunc (x *UpdateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1733, 1756], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "UpdateDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *UpdateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[26]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{26}\n}\nfunc (x *UpdateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#71", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 71, "start_line": 1757, "end_line": 1777, "text": "type GetDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirlineId      string                 `protobuf:\"bytes,2,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n\nfunc (x *GetDesignatorRequest) Reset() {\n\t*x = GetDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorRequest) ProtoMessage() {}\n", "n_tokens": 183, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1765, 1777], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirlineId", "airlineId", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type GetDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirlineId      string                 `protobuf:\"bytes,2,opt,name=airlineId,proto3\" json:\"airlineId,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\nfunc (x *GetDesignatorRequest) Reset() {\n\t*x = GetDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#72", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 72, "start_line": 1778, "end_line": 1808, "text": "func (x *GetDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{27}\n}\n\nfunc (x *GetDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetDesignatorRequest) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 196, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1778, 1808], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignatorCode", "GetAirlineId"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignatorCode", "GetAirlineId", "func", "GetDesignatorRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "DesignatorCode", "AirlineId"], "doc_head": "func (x *GetDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{27}\n}\nfunc (x *GetDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\nfunc (x *GetDesignatorRequest) GetAirlineId() string {\n\tif x != nil {\n\t\treturn x.AirlineId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#73", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 73, "start_line": 1809, "end_line": 1828, "text": "type GetDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetDesignatorResponse) Reset() {\n\t*x = GetDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1816, 1828], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetDesignatorResponse) Reset() {\n\t*x = GetDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#74", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 74, "start_line": 1829, "end_line": 1852, "text": "func (x *GetDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{28}\n}\n\nfunc (x *GetDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1829, 1852], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "GetDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *GetDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{28}\n}\nfunc (x *GetDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#75", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 75, "start_line": 1853, "end_line": 1874, "text": "type SearchDesignatorsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchDesignatorsRequest) Reset() {\n\t*x = SearchDesignatorsRequest{}\n\tmi := &file_airlines_proto_msgTypes[29]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchDesignatorsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchDesignatorsRequest) ProtoMessage() {}\n", "n_tokens": 198, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1862, 1874], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchDesignatorsRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchDesignatorsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchDesignatorsRequest) Reset() {\n\t*x = SearchDesignatorsRequest{}\n\tmi := &file_airlines_proto_msgTypes[29]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchDesignatorsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchDesignatorsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#76", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 76, "start_line": 1875, "end_line": 1905, "text": "func (x *SearchDesignatorsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[29]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchDesignatorsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{29}\n}\n\nfunc (x *SearchDesignatorsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchDesignatorsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 191, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1875, 1905], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchDesignatorsRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchDesignatorsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[29]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchDesignatorsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{29}\n}\nfunc (x *SearchDesignatorsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchDesignatorsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#77", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 77, "start_line": 1906, "end_line": 1922, "text": "func (x *SearchDesignatorsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchDesignatorsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Designator          `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,2,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,3,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,4,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 177, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [1906, 1922], "def_symbols": ["GetCursor"], "symbols": ["GetCursor", "func", "SearchDesignatorsRequest", "string", "nil", "Cursor", "return", "type", "SearchDesignatorsResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Result", "Designator", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "TotalCount", "uint32", "varint", "opt", "totalCount", "Next", "next", "oneof", "Previous", "previous", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (x *SearchDesignatorsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchDesignatorsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Designator          `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,2,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,3,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,4,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#78", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 78, "start_line": 1923, "end_line": 1947, "text": "func (x *SearchDesignatorsResponse) Reset() {\n\t*x = SearchDesignatorsResponse{}\n\tmi := &file_airlines_proto_msgTypes[30]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchDesignatorsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchDesignatorsResponse) ProtoMessage() {}\n\nfunc (x *SearchDesignatorsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[30]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1923, 1947], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchDesignatorsResponse", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchDesignatorsResponse) Reset() {\n\t*x = SearchDesignatorsResponse{}\n\tmi := &file_airlines_proto_msgTypes[30]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchDesignatorsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchDesignatorsResponse) ProtoMessage() {}\nfunc (x *SearchDesignatorsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[30]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#79", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 79, "start_line": 1948, "end_line": 1980, "text": "// Deprecated: Use SearchDesignatorsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{30}\n}\n\nfunc (x *SearchDesignatorsResponse) GetResult() []*Designator {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n\nfunc (x *SearchDesignatorsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\n\nfunc (x *SearchDesignatorsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchDesignatorsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n", "n_tokens": 185, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1949, 1980], "def_symbols": ["Descriptor", "GetResult", "GetTotalCount", "GetNext", "GetPrevious"], "symbols": ["Descriptor", "GetResult", "GetTotalCount", "GetNext", "GetPrevious", "Deprecated", "Use", "SearchDesignatorsResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "Designator", "nil", "Result", "uint32", "TotalCount", "string", "Next", "Previous"], "doc_head": "// Deprecated: Use SearchDesignatorsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{30}\n}\nfunc (x *SearchDesignatorsResponse) GetResult() []*Designator {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\nfunc (x *SearchDesignatorsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\nfunc (x *SearchDesignatorsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchDesignatorsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#80", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 80, "start_line": 1981, "end_line": 1990, "text": "type Airline_Airport struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tDesignator    *string                `protobuf:\"bytes,2,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,3,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCity          *Airline_Airport_City  `protobuf:\"bytes,4,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 164, "primary_symbol": "", "primary_kind": "", "primary_span": [1981, 1990], "def_symbols": [], "symbols": ["type", "Airline_Airport", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Designator", "designator", "oneof", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "City", "Airline_Airport_City", "city", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Airline_Airport struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tDesignator    *string                `protobuf:\"bytes,2,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,3,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCity          *Airline_Airport_City  `protobuf:\"bytes,4,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#81", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 81, "start_line": 1991, "end_line": 2015, "text": "func (x *Airline_Airport) Reset() {\n\t*x = Airline_Airport{}\n\tmi := &file_airlines_proto_msgTypes[35]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline_Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline_Airport) ProtoMessage() {}\n\nfunc (x *Airline_Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[35]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 174, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1991, 2015], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline_Airport", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline_Airport) Reset() {\n\t*x = Airline_Airport{}\n\tmi := &file_airlines_proto_msgTypes[35]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline_Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline_Airport) ProtoMessage() {}\nfunc (x *Airline_Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[35]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#82", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 82, "start_line": 2016, "end_line": 2048, "text": "// Deprecated: Use Airline_Airport.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20, 0}\n}\n\nfunc (x *Airline_Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline_Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline_Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airline_Airport) GetCity() *Airline_Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 191, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2017, 2048], "def_symbols": ["Descriptor", "GetId", "GetDesignator", "GetName", "GetCity"], "symbols": ["Descriptor", "GetId", "GetDesignator", "GetName", "GetCity", "Deprecated", "Use", "Airline_Airport", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Designator", "map", "Name", "Airline_Airport_City", "City"], "doc_head": "// Deprecated: Use Airline_Airport.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20, 0}\n}\nfunc (x *Airline_Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airline_Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Airline_Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airline_Airport) GetCity() *Airline_Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#83", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 83, "start_line": 2049, "end_line": 2059, "text": "type Airline_Airport_City struct {\n\tstate         protoimpl.MessageState        `protogen:\"open.v1\"`\n\tId            int64                         `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string             `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tTimezone      string                        `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tState         *string                       `protobuf:\"bytes,4,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tCountry       *Airline_Airport_City_Country `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 189, "primary_symbol": "", "primary_kind": "", "primary_span": [2049, 2059], "def_symbols": [], "symbols": ["type", "Airline_Airport_City", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "Timezone", "timezone", "State", "oneof", "Country", "Airline_Airport_City_Country", "country", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Airline_Airport_City struct {\n\tstate         protoimpl.MessageState        `protogen:\"open.v1\"`\n\tId            int64                         `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string             `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tTimezone      string                        `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tState         *string                       `protobuf:\"bytes,4,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tCountry       *Airline_Airport_City_Country `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#84", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 84, "start_line": 2060, "end_line": 2084, "text": "func (x *Airline_Airport_City) Reset() {\n\t*x = Airline_Airport_City{}\n\tmi := &file_airlines_proto_msgTypes[39]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline_Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline_Airport_City) ProtoMessage() {}\n\nfunc (x *Airline_Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[39]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 184, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2060, 2084], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline_Airport_City", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline_Airport_City) Reset() {\n\t*x = Airline_Airport_City{}\n\tmi := &file_airlines_proto_msgTypes[39]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline_Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline_Airport_City) ProtoMessage() {}\nfunc (x *Airline_Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[39]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#85", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 85, "start_line": 2085, "end_line": 2117, "text": "// Deprecated: Use Airline_Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20, 0, 1}\n}\n\nfunc (x *Airline_Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *Airline_Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airline_Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline_Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n", "n_tokens": 200, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2086, 2117], "def_symbols": ["Descriptor", "GetId", "GetName", "GetTimezone", "GetState"], "symbols": ["Descriptor", "GetId", "GetName", "GetTimezone", "GetState", "Deprecated", "Use", "Airline_Airport_City", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "Timezone", "State"], "doc_head": "// Deprecated: Use Airline_Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20, 0, 1}\n}\nfunc (x *Airline_Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *Airline_Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airline_Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *Airline_Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#86", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 86, "start_line": 2118, "end_line": 2132, "text": "func (x *Airline_Airport_City) GetCountry() *Airline_Airport_City_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n\ntype Airline_Airport_City_Country struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 150, "primary_symbol": "GetCountry", "primary_kind": "function", "primary_span": [2118, 2132], "def_symbols": ["GetCountry"], "symbols": ["GetCountry", "func", "Airline_Airport_City", "Airline_Airport_City_Country", "nil", "return", "Country", "type", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (x *Airline_Airport_City) GetCountry() *Airline_Airport_City_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\ntype Airline_Airport_City_Country struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#87", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 87, "start_line": 2133, "end_line": 2157, "text": "func (x *Airline_Airport_City_Country) Reset() {\n\t*x = Airline_Airport_City_Country{}\n\tmi := &file_airlines_proto_msgTypes[41]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline_Airport_City_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline_Airport_City_Country) ProtoMessage() {}\n\nfunc (x *Airline_Airport_City_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[41]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2133, 2157], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline_Airport_City_Country", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline_Airport_City_Country) Reset() {\n\t*x = Airline_Airport_City_Country{}\n\tmi := &file_airlines_proto_msgTypes[41]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline_Airport_City_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline_Airport_City_Country) ProtoMessage() {}\nfunc (x *Airline_Airport_City_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[41]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#88", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 88, "start_line": 2158, "end_line": 2169, "text": "// Deprecated: Use Airline_Airport_City_Country.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City_Country) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20, 0, 1, 1}\n}\n\nfunc (x *Airline_Airport_City_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 100, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2159, 2169], "def_symbols": ["Descriptor", "GetId"], "symbols": ["Descriptor", "GetId", "Deprecated", "Use", "Airline_Airport_City_Country", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil"], "doc_head": "// Deprecated: Use Airline_Airport_City_Country.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City_Country) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20, 0, 1, 1}\n}\nfunc (x *Airline_Airport_City_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#89", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 89, "start_line": 2170, "end_line": 2461, "text": "func (x *Airline_Airport_City_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nvar File_airlines_proto protoreflect.FileDescriptor\n\nconst file_airlines_proto_rawDesc = \"\" +\n\t\"\\n\" +\n\t\"\\x0eairlines.proto\\x12\\x14aviation.airlines.v0\\x1a\\x1fgoogle/protobuf/timestamp.proto\\\"c\\n\" +\n\t\"\\x15SearchAirlinesRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01B\\t\\n\" +\n\t\"\\a_cursor\\\"\\xc3\\x01\\n\" +\n\t\"\\x16SearchAirlinesResponse\\x129\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2!.aviation.airlines.v0.SlimAirlineR\\x06result\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x02 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x03 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"totalCount\\x18\\x04 \\x01(\\rR\\n\" +\n\t\"totalCountB\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous\\\"&\\n\" +\n\t\"\\x14DeleteAirlineRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\\"P\\n\" +\n\t\"\\x15DeleteAirlineResponse\\x127\\n\" +\n\t\"\\aairline\\x18\\x01 \\x01(\\v2\\x1d.aviation.airlines.v0.AirlineR\\aairline\\\"\\x9f\\x06\\n\" +\n\t\"\\x14UpdateAirlineRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x02 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x03 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x04 \\x01(\\x03R\\x0eclassification\\x12\\x12\\n\" +\n\t\"\\x04name\\x18\\x05 \\x01(\\tR\\x04name\\x12]\\n\" +\n\t\"\\vdescription\\x18\\x06 \\x03(\\v2;.aviation.airlines.v0.UpdateAirlineRequest.DescriptionEntryR\\vdescription\\x12#\\n\" +\n\t\"\\n\" +\n\t\"websiteUrl\\x18\\a \\x01(\\tH\\x02R\\n\" +\n\t\"websiteUrl\\x88\\x01\\x01\\x12`\\n\" +\n\t\"\\fwikipediaUrl\\x18\\b \\x03(\\v2<.aviation.airlines.v0.UpdateAirlineRequest.WikipediaUrlEntryR\\fwikipediaUrl\\x12%\\n\" +\n\t\"\\vfacebookUrl\\x18\\t \\x01(\\tH\\x03R\\vfacebookUrl\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"twitterUrl\\x18\\n\" +\n\t\" \\x01(\\tH\\x04R\\n\" +\n\t\"twitterUrl\\x88\\x01\\x01\\x12C\\n\" +\n\t\"\\x1areservationTelephoneNumber\\x18\\v \\x01(\\tH\\x05R\\x1areservationTelephoneNumber\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"hubAirport\\x18\\f \\x01(\\tH\\x06R\\n\" +\n\t\"hubAirport\\x88\\x01\\x01\\x1a>\\n\" +\n\t\"\\x10DescriptionEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a?\\n\" +\n\t\"\\x11WikipediaUrlEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_websiteUrlB\\x0e\\n\" +\n\t\"\\f_facebookUrlB\\r\\n\" +\n\t\"\\v_twitterUrlB\\x1d\\n\" +\n\t\"\\x1b_reservationTelephoneNumberB\\r\\n\" +\n\t\"\\v_hubAirport\\\"P\\n\" +\n\t\"\\x15UpdateAirlineResponse\\x127\\n\" +\n\t\"\\aairline\\x18\\x01 \\x01(\\v2\\x1d.aviation.airlines.v0.AirlineR\\aairline\\\"\\xfb\\x05\\n\" +\n\t\"\\x14CreateAirlineRequest\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x01 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x02 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x03 \\x01(\\x03R\\x0eclassification\\x12\\x12\\n\" +\n\t\"\\x04name\\x18\\x04 \\x01(\\tR\\x04name\\x12]\\n\" +\n\t\"\\vdescription\\x18\\x05 \\x03(\\v2;.aviation.airlines.v0.CreateAirlineRequest.DescriptionEntryR\\vdescription\\x12#\\n\" +\n\t\"\\n\" +\n\t\"websiteUrl\\x18\\x06 \\x01(\\tH\\x02R\\n\" +\n\t\"websiteUrl\\x88\\x01\\x01\\x12`\\n\" +\n\t\"\\fwikipediaUrl\\x18\\a \\x03(\\v2<.aviation.airlines.v0.CreateAirlineRequest.WikipediaUrlEntryR\\fwikipediaUrl\\x12%\\n\" +\n\t\"\\vfacebookUrl\\x18\\b \\x01(\\tH\\x03R\\vfacebookUrl\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"twitterUrl\\x18\\t \\x01(\\tH\\x04R\\n\" +\n\t\"twitterUrl\\x88\\x01\\x01\\x12C\\n\" +\n\t\"\\x1areservationTelephoneNumber\\x18\\n\" +\n\t\" \\x01(\\tH\\x05R\\x1areservationTelephoneNumber\\x88\\x01\\x01\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"hubAirport\\x18\\v \\x01(\\tR\\n\" +\n\t\"hubAirport\\x1a>\\n\" +\n\t\"\\x10DescriptionEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a?\\n\" +\n\t\"\\x11WikipediaUrlEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_websiteUrlB\\x0e\\n\" +\n\t\"\\f_facebookUrlB\\r\\n\" +\n\t\"\\v_twitterUrlB\\x1d\\n\" +\n\t\"\\x1b_reservationTelephoneNumber\\\"P\\n\" +\n\t\"\\x15CreateAirlineResponse\\x127\\n\" +\n\t\"\\aairline\\x18\\x01 \\x01(\\v2\\x1d.aviation.airlines.v0.AirlineR\\aairline\\\"'\\n\" +\n\t\"\\x15AirlineDetailsRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\\"Q\\n\" +\n\t\"\\x16AirlineDetailsResponse\\x127\\n\" +\n\t\"\\aairline\\x18\\x01 \\x01(\\v2\\x1d.aviation.airlines.v0.AirlineR\\aairline\\\"#\\n\" +\n\t\"\\x0fBatchGetRequest\\x12\\x10\\n\" +\n\t\"\\x03ids\\x18\\x01 \\x03(\\tR\\x03ids\\\"M\\n\" +\n\t\"\\x10BatchGetResponse\\x129\\n\" +\n\t\"\\bairlines\\x18\\x01 \\x03(\\v2\\x1d.aviation.airlines.v0.AirlineR\\bairlines\\\"j\\n\" +\n\t\"\\x1bBatchGetByDesignatorRequest\\x12 \\n\" +\n\t\"\\vdesignators\\x18\\x01 \\x03(\\tR\\vdesignators\\x12\\x1d\\n\" +\n\t\"\\aforDate\\x18\\x02 \\x01(\\tH\\x00R\\aforDate\\x88\\x01\\x01B\\n\" +\n\t\"\\n\" +\n\t\"\\b_forDate\\\"Y\\n\" +\n\t\"\\x1cBatchGetByDesignatorResponse\\x129\\n\" +\n\t\"\\bairlines\\x18\\x01 \\x03(\\v2\\x1d.aviation.airlines.v0.AirlineR\\bairlines\\\"c\\n\" +\n\t\"\\x16GetByDesignatorRequest\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\tR\\n\" +\n\t\"designator\\x12\\x1d\\n\" +\n\t\"\\aforDate\\x18\\x02 \\x01(\\tH\\x00R\\aforDate\\x88\\x01\\x01B\\n\" +\n\t\"\\n\" +\n\t\"\\b_forDate\\\"R\\n\" +\n\t\"\\x17GetByDesignatorResponse\\x127\\n\" +\n\t\"\\aairline\\x18\\x01 \\x01(\\v2\\x1d.aviation.airlines.v0.AirlineR\\aairline\\\"1\\n\" +\n\t\"\\x1fGetDesignatorsForAirlineRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\\"f\\n\" +\n\t\" GetDesignatorsForAirlineResponse\\x12B\\n\" +\n\t\"\\vdesignators\\x18\\x01 \\x03(\\v2 .aviation.airlines.v0.DesignatorR\\vdesignators\\\"\\xd0\\x02\\n\" +\n\t\"\\n\" +\n\t\"Designator\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\tR\\n\" +\n\t\"designator\\x12\\x1c\\n\" +\n\t\"\\tairlineId\\x18\\x02 \\x01(\\tR\\tairlineId\\x128\\n\" +\n\t\"\\tvalidFrom\\x18\\x03 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tvalidFrom\\x124\\n\" +\n\t\"\\avalidTo\\x18\\x04 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\avalidTo\\x12 \\n\" +\n\t\"\\vairlineName\\x18\\x05 \\x01(\\tR\\vairlineName\\x128\\n\" +\n\t\"\\tcreatedAt\\x18\\x0e \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tcreatedAt\\x128\\n\" +\n\t\"\\tupdatedAt\\x18\\x0f \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tupdatedAt\\\"\\x97\\x03\\n\" +\n\t\"\\vSlimAirline\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x02 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x03 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x04 \\x01(\\x03R\\x0eclassification\\x12\\x12\\n\" +\n\t\"\\x04name\\x18\\x05 \\x01(\\tR\\x04name\\x124\\n\" +\n\t\"\\x06assets\\x18\\x06 \\x01(\\v2\\x1c.aviation.airlines.v0.AssetsR\\x06assets\\x128\\n\" +\n\t\"\\tcreatedAt\\x18\\a \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tcreatedAt\\x128\\n\" +\n\t\"\\tupdatedAt\\x18\\b \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tupdatedAt\\x12#\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\t \\x01(\\tH\\x02R\\n\" +\n\t\"designator\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\bpristine\\x18\\n\" +\n\t\" \\x01(\\bR\\bpristineB\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_designator\\\"\\xf9\\r\\n\" +\n\t\"\\aAirline\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x02 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x03 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x04 \\x01(\\x03R\\x0eclassification\\x12\\x12\\n\" +\n\t\"\\x04name\\x18\\x05 \\x01(\\tR\\x04name\\x12P\\n\" +\n\t\"\\vdescription\\x18\\x06 \\x03(\\v2..aviation.airlines.v0.Airline.DescriptionEntryR\\vdescription\\x124\\n\" +\n\t\"\\x06assets\\x18\\a \\x01(\\v2\\x1c.aviation.airlines.v0.AssetsR\\x06assets\\x12#\\n\" +\n\t\"\\n\" +\n\t\"websiteUrl\\x18\\b \\x01(\\tH\\x02R\\n\" +\n\t\"websiteUrl\\x88\\x01\\x01\\x12S\\n\" +\n\t\"\\fwikipediaUrl\\x18\\t \\x03(\\v2/.aviation.airlines.v0.Airline.WikipediaUrlEntryR\\fwikipediaUrl\\x12%\\n\" +\n\t\"\\vfacebookUrl\\x18\\n\" +\n\t\" \\x01(\\tH\\x03R\\vfacebookUrl\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"twitterUrl\\x18\\v \\x01(\\tH\\x04R\\n\" +\n\t\"twitterUrl\\x88\\x01\\x01\\x12C\\n\" +\n\t\"\\x1areservationTelephoneNumber\\x18\\f \\x01(\\tH\\x05R\\x1areservationTelephoneNumber\\x88\\x01\\x01\\x12J\\n\" +\n\t\"\\n\" +\n\t\"hubAirport\\x18\\r \\x01(\\v2%.aviation.airlines.v0.Airline.AirportH\\x06R\\n\" +\n\t\"hubAirport\\x88\\x01\\x01\\x128\\n\" +\n\t\"\\tcreatedAt\\x18\\x0e \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tcreatedAt\\x128\\n\" +\n\t\"\\tupdatedAt\\x18\\x0f \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tupdatedAt\\x12#\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x10 \\x01(\\tH\\aR\\n\" +\n\t\"designator\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\bpristine\\x18\\x11 \\x01(\\bR\\bpristine\\x1a\\xdd\\x05\\n\" +\n\t\"\\aAirport\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12#\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x02 \\x01(\\tH\\x00R\\n\" +\n\t\"designator\\x88\\x01\\x01\\x12C\\n\" +\n\t\"\\x04name\\x18\\x03 \\x03(\\v2/.aviation.airlines.v0.Airline.Airport.NameEntryR\\x04name\\x12>\\n\" +\n\t\"\\x04city\\x18\\x04 \\x01(\\v2*.aviation.airlines.v0.Airline.Airport.CityR\\x04city\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a\\xcf\\x03\\n\" +\n\t\"\\x04City\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\x12H\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v24.aviation.airlines.v0.Airline.Airport.City.NameEntryR\\x04name\\x12\\x1a\\n\" +\n\t\"\\btimezone\\x18\\x03 \\x01(\\tR\\btimezone\\x12\\x19\\n\" +\n\t\"\\x05state\\x18\\x04 \\x01(\\tH\\x00R\\x05state\\x88\\x01\\x01\\x12L\\n\" +\n\t\"\\acountry\\x18\\x05 \\x01(\\v22.aviation.airlines.v0.Airline.Airport.City.CountryR\\acountry\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a\\xa4\\x01\\n\" +\n\t\"\\aCountry\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12P\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v2<.aviation.airlines.v0.Airline.Airport.City.Country.NameEntryR\\x04name\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\b\\n\" +\n\t\"\\x06_stateB\\r\\n\" +\n\t\"\\v_designator\\x1a>\\n\" +\n\t\"\\x10DescriptionEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a?\\n\" +\n\t\"\\x11WikipediaUrlEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_websiteUrlB\\x0e\\n\" +\n\t\"\\f_facebookUrlB\\r\\n\" +\n\t\"\\v_twitterUrlB\\x1d\\n\" +\n\t\"\\x1b_reservationTelephoneNumberB\\r\\n\" +\n\t\"\\v_hubAirportB\\r\\n\" +\n\t\"\\v_designator\\\"t\\n\" +\n\t\"\\x06Assets\\x12\\x17\\n\" +\n\t\"\\x04rect\\x18\\x01 \\x01(\\tH\\x00R\\x04rect\\x88\\x01\\x01\\x12\\x1b\\n\" +\n\t\"\\x06square\\x18\\x02 \\x01(\\tH\\x01R\\x06square\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04tail\\x18\\x03 \\x01(\\tH\\x02R\\x04tail\\x88\\x01\\x01B\\a\\n\" +\n\t\"\\x05_rectB\\t\\n\" +\n\t\"\\a_squareB\\a\\n\" +\n\t\"\\x05_tail\\\"5\\n\" +\n\t\"\\x05Error\\x12\\x12\\n\" +\n\t\"\\x04code\\x18\\x01 \\x01(\\tR\\x04code\\x12\\x18\\n\" +\n\t\"\\amessage\\x18\\x02 \\x01(\\tR\\amessage\\\"\\xcf\\x01\\n\" +\n\t\"\\x17CreateDesignatorRequest\\x12&\\n\" +\n\t\"\\x0edesignatorCode\\x18\\x01 \\x01(\\tR\\x0edesignatorCode\\x12\\x1c\\n\" +\n\t\"\\tairlineId\\x18\\x02 \\x01(\\tR\\tairlineId\\x128\\n\" +\n\t\"\\tvalidFrom\\x18\\x03 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tvalidFrom\\x124\\n\" +\n\t\"\\avalidTo\\x18\\x04 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\avalidTo\\\"\\\\\\n\" +\n\t\"\\x18CreateDesignatorResponse\\x12@\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\v2 .aviation.airlines.v0.DesignatorR\\n\" +\n\t\"designator\\\"\\xcf\\x01\\n\" +\n\t\"\\x17UpdateDesignatorRequest\\x12&\\n\" +\n\t\"\\x0edesignatorCode\\x18\\x02 \\x01(\\tR\\x0edesignatorCode\\x12\\x1c\\n\" +\n\t\"\\tairlineId\\x18\\x03 \\x01(\\tR\\tairlineId\\x128\\n\" +\n\t\"\\tvalidFrom\\x18\\x04 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tvalidFrom\\x124\\n\" +\n\t\"\\avalidTo\\x18\\x05 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\avalidTo\\\"\\\\\\n\" +\n\t\"\\x18UpdateDesignatorResponse\\x12@\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\v2 .aviation.airlines.v0.DesignatorR\\n\" +\n\t\"designator\\\"\\\\\\n\" +\n\t\"\\x14GetDesignatorRequest\\x12&\\n\" +\n\t\"\\x0edesignatorCode\\x18\\x01 \\x01(\\tR\\x0edesignatorCode\\x12\\x1c\\n\" +\n\t\"\\tairlineId\\x18\\x02 \\x01(\\tR\\tairlineId\\\"Y\\n\" +\n\t\"\\x15GetDesignatorResponse\\x12@\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\v2 .aviation.airlines.v0.DesignatorR\\n\" +\n\t\"designator\\\"f\\n\" +\n\t\"\\x18SearchDesignatorsRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01B\\t\\n\" +\n\t\"\\a_cursor\\\"\\xc5\\x01\\n\" +\n\t\"\\x19SearchDesignatorsResponse\\x128\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2 .aviation.airlines.v0.DesignatorR\\x06result\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"totalCount\\x18\\x02 \\x01(\\rR\\n\" +\n\t\"totalCount\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x03 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x04 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01B\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous2\\xe9\\a\\n\" +\n\t\"\\x0fAirlinesService\\x12b\\n\" +\n\t\"\\x03Get\\x12+.aviation.airlines.v0.AirlineDetailsRequest\\x1a,.aviation.airlines.v0.AirlineDetailsResponse\\\"\\x00\\x12[\\n\" +\n\t\"\\bBatchGet\\x12%.aviation.airlines.v0.BatchGetRequest\\x1a&.aviation.airlines.v0.BatchGetResponse\\\"\\x00\\x12e\\n\" +\n\t\"\\x06Search\\x12+.aviation.airlines.v0.SearchAirlinesRequest\\x1a,.aviation.airlines.v0.SearchAirlinesResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Create\\x12*.aviation.airlines.v0.CreateAirlineRequest\\x1a+.aviation.airlines.v0.CreateAirlineResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Update\\x12*.aviation.airlines.v0.UpdateAirlineRequest\\x1a+.aviation.airlines.v0.UpdateAirlineResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Delete\\x12*.aviation.airlines.v0.DeleteAirlineRequest\\x1a+.aviation.airlines.v0.DeleteAirlineResponse\\\"\\x00\\x12\\x7f\\n\" +\n\t\"\\x14BatchGetByDesignator\\x121.aviation.airlines.v0.BatchGetByDesignatorRequest\\x1a2.aviation.airlines.v0.BatchGetByDesignatorResponse\\\"\\x00\\x12p\\n\" +\n\t\"\\x0fGetByDesignator\\x12,.aviation.airlines.v0.GetByDesignatorRequest\\x1a-.aviation.airlines.v0.GetByDesignatorResponse\\\"\\x00\\x12\\x8b\\x01\\n\" +\n\t\"\\x18GetDesignatorsForAirline\\x125.aviation.airlines.v0.GetDesignatorsForAirlineRequest\\x1a6.aviation.airlines.v0.GetDesignatorsForAirlineResponse\\\"\\x002\\xb9\\x03\\n\" +\n\t\"\\x12DesignatorsService\\x12i\\n\" +\n\t\"\\x06Create\\x12-.aviation.airlines.v0.CreateDesignatorRequest\\x1a..aviation.airlines.v0.CreateDesignatorResponse\\\"\\x00\\x12`\\n\" +\n\t\"\\x03Get\\x12*.aviation.airlines.v0.GetDesignatorRequest\\x1a+.aviation.airlines.v0.GetDesignatorResponse\\\"\\x00\\x12i\\n\" +\n\t\"\\x06Update\\x12-.aviation.airlines.v0.UpdateDesignatorRequest\\x1a..aviation.airlines.v0.UpdateDesignatorResponse\\\"\\x00\\x12k\\n\" +\n\t\"\\x06Search\\x12..aviation.airlines.v0.SearchDesignatorsRequest\\x1a/.aviation.airlines.v0.SearchDesignatorsResponse\\\"\\x00b\\x06proto3\"\n\nvar (\n\tfile_airlines_proto_rawDescOnce sync.Once\n\tfile_airlines_proto_rawDescData []byte\n)\n", "n_tokens": 6028, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [2170, 2461], "def_symbols": ["GetName"], "symbols": ["GetName", "func", "Airline_Airport_City_Country", "map", "string", "nil", "return", "Name", "var", "File_airlines_proto", "protoreflect", "FileDescriptor", "const", "file_airlines_proto_rawDesc", "x0eairlines", "proto", "x12", "x14aviation", "airlines", "x1a", "x1fgoogle", "protobuf", "timestamp", "x15SearchAirlinesRequest", "x01q", "x18", "x01", "x14", "x05limit", "x02", "x1b", "x06cursor", "x03", "x00R", "x88", "x01B", "a_cursor", "xc3", "x16SearchAirlinesResponse", "x129", "x06result", "aviation", "SlimAirlineR", "x17", "x04next", "x1f", "bprevious", "x01R", "x1e", "totalCount", "x04", "totalCountB", "x05_nextB", "t_previous", "x14DeleteAirlineRequest", "x0e", "x02id", "x15DeleteAirlineResponse", "x127", "aairline", "x1d", "AirlineR", "x9f", "x06", "x14UpdateAirlineRequest", "x04iata", "x04icao", "x0eclassification", "x03R", "x04name", "x05", "vdescription", "UpdateAirlineRequest", "DescriptionEntryR", "websiteUrl", "x02R", "fwikipediaUrl", "WikipediaUrlEntryR", "vfacebookUrl", "twitterUrl", "x04R", "x12C", "x1areservationTelephoneNumber", "x05R", "hubAirport", "x06R", "x10DescriptionEntry", "x10", "x03key", "x05value", "x028", "x11WikipediaUrlEntry", "x05_iataB", "x05_icaoB", "v_websiteUrlB", "f_facebookUrlB", "v_twitterUrlB", "x1b_reservationTelephoneNumberB", "v_hubAirport", "x15UpdateAirlineResponse", "xfb", "x14CreateAirlineRequest", "CreateAirlineRequest", "x1b_reservationTelephoneNumber", "x15CreateAirlineResponse", "x15AirlineDetailsRequest", "x16AirlineDetailsResponse", "x0fBatchGetRequest", "x03ids", "x10BatchGetResponse", "bairlines", "x1bBatchGetByDesignatorRequest", "vdesignators", "aforDate", "b_forDate", "x1cBatchGetByDesignatorResponse", "x16GetByDesignatorRequest", "designator", "x17GetByDesignatorResponse", "x1fGetDesignatorsForAirlineRequest", "GetDesignatorsForAirlineResponse", "x12B", "DesignatorR", "xd0", "Designator", "x1c", "tairlineId", "x128", "tvalidFrom", "google", "TimestampR", "x124", "avalidTo", "vairlineName", "tcreatedAt", "tupdatedAt", "x0f", "x97", "vSlimAirline", "x06assets", "AssetsR", "bpristine", "bpristineB", "v_designator", "xf9", "aAirline", "x12P", "Airline", "x12S", "x12J", "AirportH", "x11", "xdd", "aAirport", "Airport", "NameEntryR", "x04city", "CityR", "x1a7", "tNameEntry", "xcf", "x04City", "x12H", "v24", "City", "btimezone", "x19", "x05state", "x12L", "acountry", "v22", "CountryR", "xa4", "aCountry", "Country", "x06_stateB", "v_hubAirportB", "x06Assets", "x04rect", "x06square", "x04tail", "x05_rectB", "a_squareB", "x05_tail", "x05Error", "x04code", "amessage", "x17CreateDesignatorRequest", "x0edesignatorCode", "x18CreateDesignatorResponse", "x17UpdateDesignatorRequest", "x18UpdateDesignatorResponse", "x14GetDesignatorRequest", "x15GetDesignatorResponse", "x18SearchDesignatorsRequest", "xc5", "x19SearchDesignatorsResponse", "t_previous2", "xe9", "x0fAirlinesService", "x12b", "x03Get", "AirlineDetailsRequest", "AirlineDetailsResponse", "x00", "bBatchGet", "BatchGetRequest", "BatchGetResponse", "x12e", "x06Search", "SearchAirlinesRequest", "SearchAirlinesResponse", "x12c", "x06Create", "CreateAirlineResponse", "x06Update", "UpdateAirlineResponse", "x06Delete", "DeleteAirlineRequest", "DeleteAirlineResponse", "x7f", "x14BatchGetByDesignator", "x121", "BatchGetByDesignatorRequest", "x1a2", "BatchGetByDesignatorResponse", "x12p", "x0fGetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse", "x8b", "x18GetDesignatorsForAirline", "x125", "GetDesignatorsForAirlineRequest", "x1a6", "x002", "xb9", "x12DesignatorsService", "x12i", "CreateDesignatorRequest", "CreateDesignatorResponse", "GetDesignatorRequest", "GetDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "x12k", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "x00b", "x06proto3", "file_airlines_proto_rawDescOnce", "sync", "Once", "file_airlines_proto_rawDescData", "byte"], "doc_head": "func (x *Airline_Airport_City_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nvar File_airlines_proto protoreflect.FileDescriptor\nconst file_airlines_proto_rawDesc = \"\" +\n\t\"\\n\" +\n\t\"\\x0eairlines.proto\\x12\\x14aviation.airlines.v0\\x1a\\x1fgoogle/protobuf/timestamp.proto\\\"c\\n\" +\n\t\"\\x15SearchAirlinesRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01B\\t\\n\" +\n\t\"\\a_cursor\\\"\\xc3\\x01\\n\" +\n\t\"\\x16SearchAirlinesResponse\\x129\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2!.aviation.airlines.v0.SlimAirlineR\\x06result\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x02 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x03 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"totalCount\\x18\\x04 \\x01(\\rR\\n\" +\n\t\"totalCountB\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous\\\"&\\n\" +\n\t\"\\x14DeleteAirlineRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\\"P\\n\" +\n\t\"\\x15DeleteAirlineResponse\\x127\\n\" +\n\t\"\\aairline\\x18\\x01 \\x01(\\v2\\x1d.aviation.airlines.v0.AirlineR\\aairline\\\"\\x9f\\x06\\n\" +\n\t\"\\x14UpdateAirlineRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\""}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#90", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 90, "start_line": 2462, "end_line": 2588, "text": "func file_airlines_proto_rawDescGZIP() []byte {\n\tfile_airlines_proto_rawDescOnce.Do(func() {\n\t\tfile_airlines_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_airlines_proto_rawDesc), len(file_airlines_proto_rawDesc)))\n\t})\n\treturn file_airlines_proto_rawDescData\n}\n\nvar file_airlines_proto_msgTypes = make([]protoimpl.MessageInfo, 43)\nvar file_airlines_proto_goTypes = []any{\n\t(*SearchAirlinesRequest)(nil),            // 0: aviation.airlines.v0.SearchAirlinesRequest\n\t(*SearchAirlinesResponse)(nil),           // 1: aviation.airlines.v0.SearchAirlinesResponse\n\t(*DeleteAirlineRequest)(nil),             // 2: aviation.airlines.v0.DeleteAirlineRequest\n\t(*DeleteAirlineResponse)(nil),            // 3: aviation.airlines.v0.DeleteAirlineResponse\n\t(*UpdateAirlineRequest)(nil),             // 4: aviation.airlines.v0.UpdateAirlineRequest\n\t(*UpdateAirlineResponse)(nil),            // 5: aviation.airlines.v0.UpdateAirlineResponse\n\t(*CreateAirlineRequest)(nil),             // 6: aviation.airlines.v0.CreateAirlineRequest\n\t(*CreateAirlineResponse)(nil),            // 7: aviation.airlines.v0.CreateAirlineResponse\n\t(*AirlineDetailsRequest)(nil),            // 8: aviation.airlines.v0.AirlineDetailsRequest\n\t(*AirlineDetailsResponse)(nil),           // 9: aviation.airlines.v0.AirlineDetailsResponse\n\t(*BatchGetRequest)(nil),                  // 10: aviation.airlines.v0.BatchGetRequest\n\t(*BatchGetResponse)(nil),                 // 11: aviation.airlines.v0.BatchGetResponse\n\t(*BatchGetByDesignatorRequest)(nil),      // 12: aviation.airlines.v0.BatchGetByDesignatorRequest\n\t(*BatchGetByDesignatorResponse)(nil),     // 13: aviation.airlines.v0.BatchGetByDesignatorResponse\n\t(*GetByDesignatorRequest)(nil),           // 14: aviation.airlines.v0.GetByDesignatorRequest\n\t(*GetByDesignatorResponse)(nil),          // 15: aviation.airlines.v0.GetByDesignatorResponse\n\t(*GetDesignatorsForAirlineRequest)(nil),  // 16: aviation.airlines.v0.GetDesignatorsForAirlineRequest\n\t(*GetDesignatorsForAirlineResponse)(nil), // 17: aviation.airlines.v0.GetDesignatorsForAirlineResponse\n\t(*Designator)(nil),                       // 18: aviation.airlines.v0.Designator\n\t(*SlimAirline)(nil),                      // 19: aviation.airlines.v0.SlimAirline\n\t(*Airline)(nil),                          // 20: aviation.airlines.v0.Airline\n\t(*Assets)(nil),                           // 21: aviation.airlines.v0.Assets\n\t(*Error)(nil),                            // 22: aviation.airlines.v0.Error\n\t(*CreateDesignatorRequest)(nil),          // 23: aviation.airlines.v0.CreateDesignatorRequest\n\t(*CreateDesignatorResponse)(nil),         // 24: aviation.airlines.v0.CreateDesignatorResponse\n\t(*UpdateDesignatorRequest)(nil),          // 25: aviation.airlines.v0.UpdateDesignatorRequest\n\t(*UpdateDesignatorResponse)(nil),         // 26: aviation.airlines.v0.UpdateDesignatorResponse\n\t(*GetDesignatorRequest)(nil),             // 27: aviation.airlines.v0.GetDesignatorRequest\n\t(*GetDesignatorResponse)(nil),            // 28: aviation.airlines.v0.GetDesignatorResponse\n\t(*SearchDesignatorsRequest)(nil),         // 29: aviation.airlines.v0.SearchDesignatorsRequest\n\t(*SearchDesignatorsResponse)(nil),        // 30: aviation.airlines.v0.SearchDesignatorsResponse\n\tnil,                                      // 31: aviation.airlines.v0.UpdateAirlineRequest.DescriptionEntry\n\tnil,                                      // 32: aviation.airlines.v0.UpdateAirlineRequest.WikipediaUrlEntry\n\tnil,                                      // 33: aviation.airlines.v0.CreateAirlineRequest.DescriptionEntry\n\tnil,                                      // 34: aviation.airlines.v0.CreateAirlineRequest.WikipediaUrlEntry\n\t(*Airline_Airport)(nil),                  // 35: aviation.airlines.v0.Airline.Airport\n\tnil,                                      // 36: aviation.airlines.v0.Airline.DescriptionEntry\n\tnil,                                      // 37: aviation.airlines.v0.Airline.WikipediaUrlEntry\n\tnil,                                      // 38: aviation.airlines.v0.Airline.Airport.NameEntry\n\t(*Airline_Airport_City)(nil),             // 39: aviation.airlines.v0.Airline.Airport.City\n\tnil,                                      // 40: aviation.airlines.v0.Airline.Airport.City.NameEntry\n\t(*Airline_Airport_City_Country)(nil),     // 41: aviation.airlines.v0.Airline.Airport.City.Country\n\tnil,                                      // 42: aviation.airlines.v0.Airline.Airport.City.Country.NameEntry\n\t(*timestamppb.Timestamp)(nil),            // 43: google.protobuf.Timestamp\n}\nvar file_airlines_proto_depIdxs = []int32{\n\t19, // 0: aviation.airlines.v0.SearchAirlinesResponse.result:type_name -> aviation.airlines.v0.SlimAirline\n\t20, // 1: aviation.airlines.v0.DeleteAirlineResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t31, // 2: aviation.airlines.v0.UpdateAirlineRequest.description:type_name -> aviation.airlines.v0.UpdateAirlineRequest.DescriptionEntry\n\t32, // 3: aviation.airlines.v0.UpdateAirlineRequest.wikipediaUrl:type_name -> aviation.airlines.v0.UpdateAirlineRequest.WikipediaUrlEntry\n\t20, // 4: aviation.airlines.v0.UpdateAirlineResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t33, // 5: aviation.airlines.v0.CreateAirlineRequest.description:type_name -> aviation.airlines.v0.CreateAirlineRequest.DescriptionEntry\n\t34, // 6: aviation.airlines.v0.CreateAirlineRequest.wikipediaUrl:type_name -> aviation.airlines.v0.CreateAirlineRequest.WikipediaUrlEntry\n\t20, // 7: aviation.airlines.v0.CreateAirlineResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t20, // 8: aviation.airlines.v0.AirlineDetailsResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t20, // 9: aviation.airlines.v0.BatchGetResponse.airlines:type_name -> aviation.airlines.v0.Airline\n\t20, // 10: aviation.airlines.v0.BatchGetByDesignatorResponse.airlines:type_name -> aviation.airlines.v0.Airline\n\t20, // 11: aviation.airlines.v0.GetByDesignatorResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t18, // 12: aviation.airlines.v0.GetDesignatorsForAirlineResponse.designators:type_name -> aviation.airlines.v0.Designator\n\t43, // 13: aviation.airlines.v0.Designator.validFrom:type_name -> google.protobuf.Timestamp\n\t43, // 14: aviation.airlines.v0.Designator.validTo:type_name -> google.protobuf.Timestamp\n\t43, // 15: aviation.airlines.v0.Designator.createdAt:type_name -> google.protobuf.Timestamp\n\t43, // 16: aviation.airlines.v0.Designator.updatedAt:type_name -> google.protobuf.Timestamp\n\t21, // 17: aviation.airlines.v0.SlimAirline.assets:type_name -> aviation.airlines.v0.Assets\n\t43, // 18: aviation.airlines.v0.SlimAirline.createdAt:type_name -> google.protobuf.Timestamp\n\t43, // 19: aviation.airlines.v0.SlimAirline.updatedAt:type_name -> google.protobuf.Timestamp\n\t36, // 20: aviation.airlines.v0.Airline.description:type_name -> aviation.airlines.v0.Airline.DescriptionEntry\n\t21, // 21: aviation.airlines.v0.Airline.assets:type_name -> aviation.airlines.v0.Assets\n\t37, // 22: aviation.airlines.v0.Airline.wikipediaUrl:type_name -> aviation.airlines.v0.Airline.WikipediaUrlEntry\n\t35, // 23: aviation.airlines.v0.Airline.hubAirport:type_name -> aviation.airlines.v0.Airline.Airport\n\t43, // 24: aviation.airlines.v0.Airline.createdAt:type_name -> google.protobuf.Timestamp\n\t43, // 25: aviation.airlines.v0.Airline.updatedAt:type_name -> google.protobuf.Timestamp\n\t43, // 26: aviation.airlines.v0.CreateDesignatorRequest.validFrom:type_name -> google.protobuf.Timestamp\n\t43, // 27: aviation.airlines.v0.CreateDesignatorRequest.validTo:type_name -> google.protobuf.Timestamp\n\t18, // 28: aviation.airlines.v0.CreateDesignatorResponse.designator:type_name -> aviation.airlines.v0.Designator\n\t43, // 29: aviation.airlines.v0.UpdateDesignatorRequest.validFrom:type_name -> google.protobuf.Timestamp\n\t43, // 30: aviation.airlines.v0.UpdateDesignatorRequest.validTo:type_name -> google.protobuf.Timestamp\n\t18, // 31: aviation.airlines.v0.UpdateDesignatorResponse.designator:type_name -> aviation.airlines.v0.Designator\n\t18, // 32: aviation.airlines.v0.GetDesignatorResponse.designator:type_name -> aviation.airlines.v0.Designator\n\t18, // 33: aviation.airlines.v0.SearchDesignatorsResponse.result:type_name -> aviation.airlines.v0.Designator\n\t38, // 34: aviation.airlines.v0.Airline.Airport.name:type_name -> aviation.airlines.v0.Airline.Airport.NameEntry\n\t39, // 35: aviation.airlines.v0.Airline.Airport.city:type_name -> aviation.airlines.v0.Airline.Airport.City\n\t40, // 36: aviation.airlines.v0.Airline.Airport.City.name:type_name -> aviation.airlines.v0.Airline.Airport.City.NameEntry\n\t41, // 37: aviation.airlines.v0.Airline.Airport.City.country:type_name -> aviation.airlines.v0.Airline.Airport.City.Country\n\t42, // 38: aviation.airlines.v0.Airline.Airport.City.Country.name:type_name -> aviation.airlines.v0.Airline.Airport.City.Country.NameEntry\n\t8,  // 39: aviation.airlines.v0.AirlinesService.Get:input_type -> aviation.airlines.v0.AirlineDetailsRequest\n\t10, // 40: aviation.airlines.v0.AirlinesService.BatchGet:input_type -> aviation.airlines.v0.BatchGetRequest\n\t0,  // 41: aviation.airlines.v0.AirlinesService.Search:input_type -> aviation.airlines.v0.SearchAirlinesRequest\n\t6,  // 42: aviation.airlines.v0.AirlinesService.Create:input_type -> aviation.airlines.v0.CreateAirlineRequest\n\t4,  // 43: aviation.airlines.v0.AirlinesService.Update:input_type -> aviation.airlines.v0.UpdateAirlineRequest\n\t2,  // 44: aviation.airlines.v0.AirlinesService.Delete:input_type -> aviation.airlines.v0.DeleteAirlineRequest\n\t12, // 45: aviation.airlines.v0.AirlinesService.BatchGetByDesignator:input_type -> aviation.airlines.v0.BatchGetByDesignatorRequest\n\t14, // 46: aviation.airlines.v0.AirlinesService.GetByDesignator:input_type -> aviation.airlines.v0.GetByDesignatorRequest\n\t16, // 47: aviation.airlines.v0.AirlinesService.GetDesignatorsForAirline:input_type -> aviation.airlines.v0.GetDesignatorsForAirlineRequest\n\t23, // 48: aviation.airlines.v0.DesignatorsService.Create:input_type -> aviation.airlines.v0.CreateDesignatorRequest\n\t27, // 49: aviation.airlines.v0.DesignatorsService.Get:input_type -> aviation.airlines.v0.GetDesignatorRequest\n\t25, // 50: aviation.airlines.v0.DesignatorsService.Update:input_type -> aviation.airlines.v0.UpdateDesignatorRequest\n\t29, // 51: aviation.airlines.v0.DesignatorsService.Search:input_type -> aviation.airlines.v0.SearchDesignatorsRequest\n\t9,  // 52: aviation.airlines.v0.AirlinesService.Get:output_type -> aviation.airlines.v0.AirlineDetailsResponse\n\t11, // 53: aviation.airlines.v0.AirlinesService.BatchGet:output_type -> aviation.airlines.v0.BatchGetResponse\n\t1,  // 54: aviation.airlines.v0.AirlinesService.Search:output_type -> aviation.airlines.v0.SearchAirlinesResponse\n\t7,  // 55: aviation.airlines.v0.AirlinesService.Create:output_type -> aviation.airlines.v0.CreateAirlineResponse\n\t5,  // 56: aviation.airlines.v0.AirlinesService.Update:output_type -> aviation.airlines.v0.UpdateAirlineResponse\n\t3,  // 57: aviation.airlines.v0.AirlinesService.Delete:output_type -> aviation.airlines.v0.DeleteAirlineResponse\n\t13, // 58: aviation.airlines.v0.AirlinesService.BatchGetByDesignator:output_type -> aviation.airlines.v0.BatchGetByDesignatorResponse\n\t15, // 59: aviation.airlines.v0.AirlinesService.GetByDesignator:output_type -> aviation.airlines.v0.GetByDesignatorResponse\n\t17, // 60: aviation.airlines.v0.AirlinesService.GetDesignatorsForAirline:output_type -> aviation.airlines.v0.GetDesignatorsForAirlineResponse\n\t24, // 61: aviation.airlines.v0.DesignatorsService.Create:output_type -> aviation.airlines.v0.CreateDesignatorResponse\n\t28, // 62: aviation.airlines.v0.DesignatorsService.Get:output_type -> aviation.airlines.v0.GetDesignatorResponse\n\t26, // 63: aviation.airlines.v0.DesignatorsService.Update:output_type -> aviation.airlines.v0.UpdateDesignatorResponse\n\t30, // 64: aviation.airlines.v0.DesignatorsService.Search:output_type -> aviation.airlines.v0.SearchDesignatorsResponse\n\t52, // [52:65] is the sub-list for method output_type\n\t39, // [39:52] is the sub-list for method input_type\n\t39, // [39:39] is the sub-list for extension type_name\n\t39, // [39:39] is the sub-list for extension extendee\n\t0,  // [0:39] is the sub-list for field type_name\n}\n", "n_tokens": 3224, "primary_symbol": "file_airlines_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [2462, 2588], "def_symbols": ["file_airlines_proto_rawDescGZIP"], "symbols": ["file_airlines_proto_rawDescGZIP", "func", "byte", "file_airlines_proto_rawDescOnce", "file_airlines_proto_rawDescData", "protoimpl", "CompressGZIP", "unsafe", "Slice", "StringData", "file_airlines_proto_rawDesc", "len", "return", "var", "file_airlines_proto_msgTypes", "make", "MessageInfo", "file_airlines_proto_goTypes", "any", "SearchAirlinesRequest", "nil", "aviation", "airlines", "SearchAirlinesResponse", "DeleteAirlineRequest", "DeleteAirlineResponse", "UpdateAirlineRequest", "UpdateAirlineResponse", "CreateAirlineRequest", "CreateAirlineResponse", "AirlineDetailsRequest", "AirlineDetailsResponse", "BatchGetRequest", "BatchGetResponse", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignatorRequest", "GetByDesignatorResponse", "GetDesignatorsForAirlineRequest", "GetDesignatorsForAirlineResponse", "Designator", "SlimAirline", "Airline", "Assets", "Error", "CreateDesignatorRequest", "CreateDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "GetDesignatorRequest", "GetDesignatorResponse", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "DescriptionEntry", "WikipediaUrlEntry", "Airline_Airport", "Airport", "NameEntry", "Airline_Airport_City", "City", "Airline_Airport_City_Country", "Country", "timestamppb", "Timestamp", "google", "protobuf", "file_airlines_proto_depIdxs", "int32", "result", "type_name", "airline", "description", "wikipediaUrl", "designators", "validFrom", "validTo", "createdAt", "updatedAt", "assets", "hubAirport", "designator", "name", "city", "country", "AirlinesService", "Get", "input_type", "BatchGet", "Search", "Create", "Update", "Delete", "BatchGetByDesignator", "GetByDesignator", "GetDesignatorsForAirline", "DesignatorsService", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "func file_airlines_proto_rawDescGZIP() []byte {\n\tfile_airlines_proto_rawDescOnce.Do(func() {\n\t\tfile_airlines_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_airlines_proto_rawDesc), len(file_airlines_proto_rawDesc)))\n\t})\n\treturn file_airlines_proto_rawDescData\n}\nvar file_airlines_proto_msgTypes = make([]protoimpl.MessageInfo, 43)\nvar file_airlines_proto_goTypes = []any{\n\t(*SearchAirlinesRequest)(nil),            // 0: aviation.airlines.v0.SearchAirlinesRequest\n\t(*SearchAirlinesResponse)(nil),           // 1: aviation.airlines.v0.SearchAirlinesResponse\n\t(*DeleteAirlineRequest)(nil),             // 2: aviation.airlines.v0.DeleteAirlineRequest\n\t(*DeleteAirlineResponse)(nil),            // 3: aviation.airlines.v0.DeleteAirlineResponse\n\t(*UpdateAirlineRequest)(nil),             // 4: aviation.airlines.v0.UpdateAirlineRequest\n\t(*UpdateAirlineResponse)(nil),            // 5: aviation.airlines.v0.UpdateAirlineResponse\n\t(*CreateAirlineRequest)(nil),             // 6: aviation.airlines.v0.CreateAirlineRequest\n\t(*CreateAirlineResponse)(nil),            // 7: aviation.airlines.v0.CreateAirlineResponse\n\t(*AirlineDetailsRequest)(nil),            // 8: aviation.ai"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#91", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 91, "start_line": 2589, "end_line": 2589, "text": "func init() { file_airlines_proto_init() }", "n_tokens": 11, "primary_symbol": "init", "primary_kind": "function", "primary_span": [2589, 2589], "def_symbols": ["init"], "symbols": ["init", "func", "file_airlines_proto_init"], "doc_head": "func init() { file_airlines_proto_init() }"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#92", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 92, "start_line": 2590, "end_line": 2606, "text": "func file_airlines_proto_init() {\n\tif File_airlines_proto != nil {\n\t\treturn\n\t}\n\tfile_airlines_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[1].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[14].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[19].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[20].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[29].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[30].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[35].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[39].OneofWrappers = []any{}", "n_tokens": 242, "primary_symbol": "file_airlines_proto_init", "primary_kind": "function", "primary_span": [2590, 2606], "def_symbols": ["file_airlines_proto_init"], "symbols": ["file_airlines_proto_init", "func", "File_airlines_proto", "nil", "return", "file_airlines_proto_msgTypes", "OneofWrappers", "any"], "doc_head": "func file_airlines_proto_init() {\n\tif File_airlines_proto != nil {\n\t\treturn\n\t}\n\tfile_airlines_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[1].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[14].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[19].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[20].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[29].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[30].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[35].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[39].OneofWrappers = []any{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go#93", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 93, "start_line": 2607, "end_line": 2625, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: unsafe.Slice(unsafe.StringData(file_airlines_proto_rawDesc), len(file_airlines_proto_rawDesc)),\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   43,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   2,\n\t\t},\n\t\tGoTypes:           file_airlines_proto_goTypes,\n\t\tDependencyIndexes: file_airlines_proto_depIdxs,\n\t\tMessageInfos:      file_airlines_proto_msgTypes,\n\t}.Build()\n\tFile_airlines_proto = out.File\n\tfile_airlines_proto_goTypes = nil\n\tfile_airlines_proto_depIdxs = nil\n}\n", "n_tokens": 168, "primary_symbol": "", "primary_kind": "", "primary_span": [2607, 2625], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "unsafe", "Slice", "StringData", "file_airlines_proto_rawDesc", "len", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_airlines_proto_goTypes", "DependencyIndexes", "file_airlines_proto_depIdxs", "MessageInfos", "file_airlines_proto_msgTypes", "Build", "File_airlines_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: unsafe.Slice(unsafe.StringData(file_airlines_proto_rawDesc), len(file_airlines_proto_rawDesc)),\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   43,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   2,\n\t\t},\n\t\tGoTypes:           file_airlines_proto_goTypes,\n\t\tDependencyIndexes: file_airlines_proto_depIdxs,\n\t\tMessageInfos:      file_airlines_proto_msgTypes,\n\t}.Build()\n\tFile_airlines_proto = out.File\n\tfile_airlines_proto_goTypes = nil\n\tfile_airlines_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airlines.proto\n\npackage v0\n", "n_tokens": 55, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "airlines", "proto", "package"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airlines.proto\npackage v0"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 32, "text": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\n\nconst (\n\tAirlinesService_Get_FullMethodName                      = \"/aviation.airlines.v0.AirlinesService/Get\"\n\tAirlinesService_BatchGet_FullMethodName                 = \"/aviation.airlines.v0.AirlinesService/BatchGet\"\n\tAirlinesService_Search_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Search\"\n\tAirlinesService_Create_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Create\"\n\tAirlinesService_Update_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Update\"\n\tAirlinesService_Delete_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Delete\"\n\tAirlinesService_BatchGetByDesignator_FullMethodName     = \"/aviation.airlines.v0.AirlinesService/BatchGetByDesignator\"\n\tAirlinesService_GetByDesignator_FullMethodName          = \"/aviation.airlines.v0.AirlinesService/GetByDesignator\"\n\tAirlinesService_GetDesignatorsForAirline_FullMethodName = \"/aviation.airlines.v0.AirlinesService/GetDesignatorsForAirline\"\n)\n", "n_tokens": 313, "primary_symbol": "", "primary_kind": "", "primary_span": [9, 32], "def_symbols": [], "symbols": ["import", "context", "grpc", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "generated", "file", "compatible", "with", "the", "package", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion9", "AirlinesService_Get_FullMethodName", "aviation", "airlines", "AirlinesService", "Get", "AirlinesService_BatchGet_FullMethodName", "BatchGet", "AirlinesService_Search_FullMethodName", "Search", "AirlinesService_Create_FullMethodName", "Create", "AirlinesService_Update_FullMethodName", "Update", "AirlinesService_Delete_FullMethodName", "Delete", "AirlinesService_BatchGetByDesignator_FullMethodName", "BatchGetByDesignator", "AirlinesService_GetByDesignator_FullMethodName", "GetByDesignator", "AirlinesService_GetDesignatorsForAirline_FullMethodName", "GetDesignatorsForAirline"], "doc_head": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\nconst (\n\tAirlinesService_Get_FullMethodName                      = \"/aviation.airlines.v0.AirlinesService/Get\"\n\tAirlinesService_BatchGet_FullMethodName                 = \"/aviation.airlines.v0.AirlinesService/BatchGet\"\n\tAirlinesService_Search_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Search\"\n\tAirlinesService_Create_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Create\"\n\tAirlinesService_Update_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Update\"\n\tAirlinesService_Delete_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Delete\"\n\tAirlinesService_BatchGetByDesignator_FullMethodName     = \"/aviation.airlines.v0.AirlinesService/BatchGetByDesignator\"\n\tAirlinesService_GetByDesignator_FullMethodName          = \"/aviation.airlines.v"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 33, "end_line": 47, "text": "// AirlinesServiceClient is the client API for AirlinesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirlinesServiceClient interface {\n\tGet(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tSearch(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error)\n\tCreate(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error)\n\tDelete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error)\n\tGetDesignatorsForAirline(ctx context.Context, in *GetDesignatorsForAirlineRequest, opts ...grpc.CallOption) (*GetDesignatorsForAirlineResponse, error)\n}\n", "n_tokens": 318, "primary_symbol": "", "primary_kind": "", "primary_span": [33, 47], "def_symbols": [], "symbols": ["AirlinesServiceClient", "the", "client", "API", "for", "AirlinesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Get", "context", "Context", "AirlineDetailsRequest", "opts", "CallOption", "AirlineDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "Search", "SearchAirlinesRequest", "SearchAirlinesResponse", "Create", "CreateAirlineRequest", "CreateAirlineResponse", "Update", "UpdateAirlineRequest", "UpdateAirlineResponse", "Delete", "DeleteAirlineRequest", "DeleteAirlineResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse", "GetDesignatorsForAirline", "GetDesignatorsForAirlineRequest", "GetDesignatorsForAirlineResponse"], "doc_head": "// AirlinesServiceClient is the client API for AirlinesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirlinesServiceClient interface {\n\tGet(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tSearch(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error)\n\tCreate(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error)\n\tDelete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error)\n"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 48, "end_line": 65, "text": "type airlinesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewAirlinesServiceClient(cc grpc.ClientConnInterface) AirlinesServiceClient {\n\treturn &airlinesServiceClient{cc}\n}\n\nfunc (c *airlinesServiceClient) Get(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirlineDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 139, "primary_symbol": "NewAirlinesServiceClient", "primary_kind": "function", "primary_span": [52, 65], "def_symbols": ["NewAirlinesServiceClient", "Get"], "symbols": ["NewAirlinesServiceClient", "Get", "type", "airlinesServiceClient", "struct", "grpc", "ClientConnInterface", "func", "AirlinesServiceClient", "return", "ctx", "context", "Context", "AirlineDetailsRequest", "opts", "CallOption", "AirlineDetailsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_Get_FullMethodName", "nil"], "doc_head": "type airlinesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewAirlinesServiceClient(cc grpc.ClientConnInterface) AirlinesServiceClient {\n\treturn &airlinesServiceClient{cc}\n}\nfunc (c *airlinesServiceClient) Get(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirlineDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 66, "end_line": 85, "text": "func (c *airlinesServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airlinesServiceClient) Search(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirlinesResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 199, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [66, 85], "def_symbols": ["BatchGet", "Search"], "symbols": ["BatchGet", "Search", "func", "airlinesServiceClient", "ctx", "context", "Context", "BatchGetRequest", "opts", "grpc", "CallOption", "BatchGetResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_BatchGet_FullMethodName", "nil", "return", "SearchAirlinesRequest", "SearchAirlinesResponse", "AirlinesService_Search_FullMethodName"], "doc_head": "func (c *airlinesServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airlinesServiceClient) Search(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirlinesResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 86, "end_line": 105, "text": "func (c *airlinesServiceClient) Create(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airlinesServiceClient) Update(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 199, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [86, 105], "def_symbols": ["Create", "Update"], "symbols": ["Create", "Update", "func", "airlinesServiceClient", "ctx", "context", "Context", "CreateAirlineRequest", "opts", "grpc", "CallOption", "CreateAirlineResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_Create_FullMethodName", "nil", "return", "UpdateAirlineRequest", "UpdateAirlineResponse", "AirlinesService_Update_FullMethodName"], "doc_head": "func (c *airlinesServiceClient) Create(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airlinesServiceClient) Update(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 106, "end_line": 115, "text": "func (c *airlinesServiceClient) Delete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(DeleteAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Delete_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 100, "primary_symbol": "Delete", "primary_kind": "function", "primary_span": [106, 115], "def_symbols": ["Delete"], "symbols": ["Delete", "func", "airlinesServiceClient", "ctx", "context", "Context", "DeleteAirlineRequest", "opts", "grpc", "CallOption", "DeleteAirlineResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_Delete_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) Delete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(DeleteAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Delete_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 116, "end_line": 125, "text": "func (c *airlinesServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 115, "primary_symbol": "BatchGetByDesignator", "primary_kind": "function", "primary_span": [116, 125], "def_symbols": ["BatchGetByDesignator"], "symbols": ["BatchGetByDesignator", "func", "airlinesServiceClient", "ctx", "context", "Context", "BatchGetByDesignatorRequest", "opts", "grpc", "CallOption", "BatchGetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_BatchGetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 126, "end_line": 135, "text": "func (c *airlinesServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 108, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [126, 135], "def_symbols": ["GetByDesignator"], "symbols": ["GetByDesignator", "func", "airlinesServiceClient", "ctx", "context", "Context", "GetByDesignatorRequest", "opts", "grpc", "CallOption", "GetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_GetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 136, "end_line": 145, "text": "func (c *airlinesServiceClient) GetDesignatorsForAirline(ctx context.Context, in *GetDesignatorsForAirlineRequest, opts ...grpc.CallOption) (*GetDesignatorsForAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorsForAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_GetDesignatorsForAirline_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 118, "primary_symbol": "GetDesignatorsForAirline", "primary_kind": "function", "primary_span": [136, 145], "def_symbols": ["GetDesignatorsForAirline"], "symbols": ["GetDesignatorsForAirline", "func", "airlinesServiceClient", "ctx", "context", "Context", "GetDesignatorsForAirlineRequest", "opts", "grpc", "CallOption", "GetDesignatorsForAirlineResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_GetDesignatorsForAirline_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) GetDesignatorsForAirline(ctx context.Context, in *GetDesignatorsForAirlineRequest, opts ...grpc.CallOption) (*GetDesignatorsForAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorsForAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_GetDesignatorsForAirline_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 146, "end_line": 161, "text": "// AirlinesServiceServer is the server API for AirlinesService service.\n// All implementations must embed UnimplementedAirlinesServiceServer\n// for forward compatibility.\ntype AirlinesServiceServer interface {\n\tGet(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tSearch(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error)\n\tCreate(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error)\n\tUpdate(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error)\n\tDelete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tGetDesignatorsForAirline(context.Context, *GetDesignatorsForAirlineRequest) (*GetDesignatorsForAirlineResponse, error)\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}\n", "n_tokens": 235, "primary_symbol": "", "primary_kind": "", "primary_span": [146, 161], "def_symbols": [], "symbols": ["AirlinesServiceServer", "the", "server", "API", "for", "AirlinesService", "service", "All", "implementations", "must", "embed", "UnimplementedAirlinesServiceServer", "forward", "compatibility", "type", "interface", "Get", "context", "Context", "AirlineDetailsRequest", "AirlineDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "Search", "SearchAirlinesRequest", "SearchAirlinesResponse", "Create", "CreateAirlineRequest", "CreateAirlineResponse", "Update", "UpdateAirlineRequest", "UpdateAirlineResponse", "Delete", "DeleteAirlineRequest", "DeleteAirlineResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse", "GetDesignatorsForAirline", "GetDesignatorsForAirlineRequest", "GetDesignatorsForAirlineResponse", "mustEmbedUnimplementedAirlinesServiceServer"], "doc_head": "// AirlinesServiceServer is the server API for AirlinesService service.\n// All implementations must embed UnimplementedAirlinesServiceServer\n// for forward compatibility.\ntype AirlinesServiceServer interface {\n\tGet(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tSearch(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error)\n\tCreate(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error)\n\tUpdate(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error)\n\tDelete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tGetDesignatorsForAirline(context.Context, *GetDesignatorsForAirlineRequest) (*GetDesignatorsForAirlineResponse, error)\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 162, "end_line": 177, "text": "// UnimplementedAirlinesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirlinesServiceServer struct{}\n\nfunc (UnimplementedAirlinesServiceServer) Get(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Search(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}", "n_tokens": 189, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [169, 177], "def_symbols": ["Get", "BatchGet", "Search"], "symbols": ["Get", "BatchGet", "Search", "UnimplementedAirlinesServiceServer", "must", "embedded", "have", "forward", "compatible", "implementations", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "type", "struct", "func", "context", "Context", "AirlineDetailsRequest", "AirlineDetailsResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetRequest", "BatchGetResponse", "SearchAirlinesRequest", "SearchAirlinesResponse"], "doc_head": "// UnimplementedAirlinesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirlinesServiceServer struct{}\nfunc (UnimplementedAirlinesServiceServer) Get(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Search(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 178, "end_line": 189, "text": "func (UnimplementedAirlinesServiceServer) Create(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Update(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Delete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Delete not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}", "n_tokens": 192, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [178, 189], "def_symbols": ["Create", "Update", "Delete", "BatchGetByDesignator"], "symbols": ["Create", "Update", "Delete", "BatchGetByDesignator", "func", "UnimplementedAirlinesServiceServer", "context", "Context", "CreateAirlineRequest", "CreateAirlineResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "UpdateAirlineRequest", "UpdateAirlineResponse", "DeleteAirlineRequest", "DeleteAirlineResponse", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse"], "doc_head": "func (UnimplementedAirlinesServiceServer) Create(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Update(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Delete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Delete not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 190, "end_line": 198, "text": "func (UnimplementedAirlinesServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) GetDesignatorsForAirline(context.Context, *GetDesignatorsForAirlineRequest) (*GetDesignatorsForAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetDesignatorsForAirline not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) mustEmbedUnimplementedAirlinesServiceServer() {}\nfunc (UnimplementedAirlinesServiceServer) testEmbeddedByValue()                         {}\n", "n_tokens": 149, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [190, 198], "def_symbols": ["GetByDesignator", "GetDesignatorsForAirline", "mustEmbedUnimplementedAirlinesServiceServer", "testEmbeddedByValue"], "symbols": ["GetByDesignator", "GetDesignatorsForAirline", "mustEmbedUnimplementedAirlinesServiceServer", "testEmbeddedByValue", "func", "UnimplementedAirlinesServiceServer", "context", "Context", "GetByDesignatorRequest", "GetByDesignatorResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetDesignatorsForAirlineRequest", "GetDesignatorsForAirlineResponse"], "doc_head": "func (UnimplementedAirlinesServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) GetDesignatorsForAirline(context.Context, *GetDesignatorsForAirlineRequest) (*GetDesignatorsForAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetDesignatorsForAirline not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) mustEmbedUnimplementedAirlinesServiceServer() {}\nfunc (UnimplementedAirlinesServiceServer) testEmbeddedByValue()                         {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 199, "end_line": 216, "text": "// UnsafeAirlinesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirlinesServiceServer will\n// result in compilation errors.\ntype UnsafeAirlinesServiceServer interface {\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}\n\nfunc RegisterAirlinesServiceServer(s grpc.ServiceRegistrar, srv AirlinesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirlinesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirlinesService_ServiceDesc, srv)\n}\n", "n_tokens": 187, "primary_symbol": "RegisterAirlinesServiceServer", "primary_kind": "function", "primary_span": [206, 216], "def_symbols": ["RegisterAirlinesServiceServer"], "symbols": ["RegisterAirlinesServiceServer", "UnsafeAirlinesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "AirlinesServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedAirlinesServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedAirlinesServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "AirlinesService_ServiceDesc"], "doc_head": "// UnsafeAirlinesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirlinesServiceServer will\n// result in compilation errors.\ntype UnsafeAirlinesServiceServer interface {\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}\nfunc RegisterAirlinesServiceServer(s grpc.ServiceRegistrar, srv AirlinesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirlinesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirlinesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 217, "end_line": 234, "text": "func _AirlinesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirlineDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, req.(*AirlineDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirlinesService_Get_Handler", "primary_kind": "function", "primary_span": [217, 234], "def_symbols": ["_AirlinesService_Get_Handler"], "symbols": ["_AirlinesService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AirlineDetailsRequest", "err", "nil", "return", "AirlinesServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Get_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirlineDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, req.(*AirlineDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 235, "end_line": 252, "text": "func _AirlinesService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 163, "primary_symbol": "_AirlinesService_BatchGet_Handler", "primary_kind": "function", "primary_span": [235, 252], "def_symbols": ["_AirlinesService_BatchGet_Handler"], "symbols": ["_AirlinesService_BatchGet_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetRequest", "err", "nil", "return", "AirlinesServiceServer", "BatchGet", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_BatchGet_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#18", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 253, "end_line": 270, "text": "func _AirlinesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirlinesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, req.(*SearchAirlinesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AirlinesService_Search_Handler", "primary_kind": "function", "primary_span": [253, 270], "def_symbols": ["_AirlinesService_Search_Handler"], "symbols": ["_AirlinesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchAirlinesRequest", "err", "nil", "return", "AirlinesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirlinesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, req.(*SearchAirlinesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#19", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 271, "end_line": 288, "text": "func _AirlinesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, req.(*CreateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AirlinesService_Create_Handler", "primary_kind": "function", "primary_span": [271, 288], "def_symbols": ["_AirlinesService_Create_Handler"], "symbols": ["_AirlinesService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Create_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, req.(*CreateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#20", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 289, "end_line": 306, "text": "func _AirlinesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, req.(*UpdateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirlinesService_Update_Handler", "primary_kind": "function", "primary_span": [289, 306], "def_symbols": ["_AirlinesService_Update_Handler"], "symbols": ["_AirlinesService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Update_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, req.(*UpdateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#21", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 307, "end_line": 324, "text": "func _AirlinesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(DeleteAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Delete_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, req.(*DeleteAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirlinesService_Delete_Handler", "primary_kind": "function", "primary_span": [307, 324], "def_symbols": ["_AirlinesService_Delete_Handler"], "symbols": ["_AirlinesService_Delete_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "DeleteAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "Delete", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Delete_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(DeleteAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Delete_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, req.(*DeleteAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#22", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 325, "end_line": 342, "text": "func _AirlinesService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 181, "primary_symbol": "_AirlinesService_BatchGetByDesignator_Handler", "primary_kind": "function", "primary_span": [325, 342], "def_symbols": ["_AirlinesService_BatchGetByDesignator_Handler"], "symbols": ["_AirlinesService_BatchGetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetByDesignatorRequest", "err", "nil", "return", "AirlinesServiceServer", "BatchGetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_BatchGetByDesignator_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#23", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 343, "end_line": 360, "text": "func _AirlinesService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_GetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 172, "primary_symbol": "_AirlinesService_GetByDesignator_Handler", "primary_kind": "function", "primary_span": [343, 360], "def_symbols": ["_AirlinesService_GetByDesignator_Handler"], "symbols": ["_AirlinesService_GetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetByDesignatorRequest", "err", "nil", "return", "AirlinesServiceServer", "GetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_GetByDesignator_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_GetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#24", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 361, "end_line": 372, "text": "func _AirlinesService_GetDesignatorsForAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorsForAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).GetDesignatorsForAirline(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_GetDesignatorsForAirline_FullMethodName,\n\t}", "n_tokens": 128, "primary_symbol": "_AirlinesService_GetDesignatorsForAirline_Handler", "primary_kind": "function", "primary_span": [361, 372], "def_symbols": ["_AirlinesService_GetDesignatorsForAirline_Handler"], "symbols": ["_AirlinesService_GetDesignatorsForAirline_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetDesignatorsForAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "GetDesignatorsForAirline", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_GetDesignatorsForAirline_FullMethodName"], "doc_head": "func _AirlinesService_GetDesignatorsForAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorsForAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).GetDesignatorsForAirline(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_GetDesignatorsForAirline_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#25", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 373, "end_line": 433, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).GetDesignatorsForAirline(ctx, req.(*GetDesignatorsForAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// AirlinesService_ServiceDesc is the grpc.ServiceDesc for AirlinesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirlinesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airlines.v0.AirlinesService\",\n\tHandlerType: (*AirlinesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirlinesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirlinesService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirlinesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirlinesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirlinesService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Delete\",\n\t\t\tHandler:    _AirlinesService_Delete_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirlinesService_BatchGetByDesignator_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByDesignator\",\n\t\t\tHandler:    _AirlinesService_GetByDesignator_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetDesignatorsForAirline\",\n\t\t\tHandler:    _AirlinesService_GetDesignatorsForAirline_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airlines.proto\",\n}\n\nconst (\n\tDesignatorsService_Create_FullMethodName = \"/aviation.airlines.v0.DesignatorsService/Create\"\n\tDesignatorsService_Get_FullMethodName    = \"/aviation.airlines.v0.DesignatorsService/Get\"\n\tDesignatorsService_Update_FullMethodName = \"/aviation.airlines.v0.DesignatorsService/Update\"\n\tDesignatorsService_Search_FullMethodName = \"/aviation.airlines.v0.DesignatorsService/Search\"\n)\n", "n_tokens": 506, "primary_symbol": "", "primary_kind": "", "primary_span": [373, 433], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "AirlinesServiceServer", "GetDesignatorsForAirline", "GetDesignatorsForAirlineRequest", "interceptor", "info", "AirlinesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "AirlinesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airlines", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Get", "Handler", "_AirlinesService_Get_Handler", "BatchGet", "_AirlinesService_BatchGet_Handler", "Search", "_AirlinesService_Search_Handler", "Create", "_AirlinesService_Create_Handler", "Update", "_AirlinesService_Update_Handler", "Delete", "_AirlinesService_Delete_Handler", "BatchGetByDesignator", "_AirlinesService_BatchGetByDesignator_Handler", "GetByDesignator", "_AirlinesService_GetByDesignator_Handler", "_AirlinesService_GetDesignatorsForAirline_Handler", "Streams", "StreamDesc", "Metadata", "proto", "const", "DesignatorsService_Create_FullMethodName", "DesignatorsService", "DesignatorsService_Get_FullMethodName", "DesignatorsService_Update_FullMethodName", "DesignatorsService_Search_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).GetDesignatorsForAirline(ctx, req.(*GetDesignatorsForAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// AirlinesService_ServiceDesc is the grpc.ServiceDesc for AirlinesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirlinesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airlines.v0.AirlinesService\",\n\tHandlerType: (*AirlinesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirlinesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirlinesService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirlinesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirlinesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirlinesService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Delete\",\n\t\t\tHandler:    _AirlinesService_Delete_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirlinesService_BatchGetByDesi"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#26", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 434, "end_line": 447, "text": "// DesignatorsServiceClient is the client API for DesignatorsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype DesignatorsServiceClient interface {\n\tCreate(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error)\n\tGet(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error)\n\tUpdate(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error)\n\tSearch(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error)\n}\n\ntype designatorsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n", "n_tokens": 180, "primary_symbol": "", "primary_kind": "", "primary_span": [434, 447], "def_symbols": [], "symbols": ["DesignatorsServiceClient", "the", "client", "API", "for", "DesignatorsService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Create", "context", "Context", "CreateDesignatorRequest", "opts", "CallOption", "CreateDesignatorResponse", "error", "Get", "GetDesignatorRequest", "GetDesignatorResponse", "Update", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Search", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "designatorsServiceClient", "struct", "ClientConnInterface"], "doc_head": "// DesignatorsServiceClient is the client API for DesignatorsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype DesignatorsServiceClient interface {\n\tCreate(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error)\n\tGet(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error)\n\tUpdate(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error)\n\tSearch(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error)\n}\ntype designatorsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#27", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 448, "end_line": 461, "text": "func NewDesignatorsServiceClient(cc grpc.ClientConnInterface) DesignatorsServiceClient {\n\treturn &designatorsServiceClient{cc}\n}\n\nfunc (c *designatorsServiceClient) Create(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 127, "primary_symbol": "NewDesignatorsServiceClient", "primary_kind": "function", "primary_span": [448, 461], "def_symbols": ["NewDesignatorsServiceClient", "Create"], "symbols": ["NewDesignatorsServiceClient", "Create", "func", "grpc", "ClientConnInterface", "DesignatorsServiceClient", "return", "designatorsServiceClient", "ctx", "context", "Context", "CreateDesignatorRequest", "opts", "CallOption", "CreateDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Create_FullMethodName", "nil"], "doc_head": "func NewDesignatorsServiceClient(cc grpc.ClientConnInterface) DesignatorsServiceClient {\n\treturn &designatorsServiceClient{cc}\n}\nfunc (c *designatorsServiceClient) Create(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#28", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 462, "end_line": 481, "text": "func (c *designatorsServiceClient) Get(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *designatorsServiceClient) Update(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 201, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [462, 481], "def_symbols": ["Get", "Update"], "symbols": ["Get", "Update", "func", "designatorsServiceClient", "ctx", "context", "Context", "GetDesignatorRequest", "opts", "grpc", "CallOption", "GetDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Get_FullMethodName", "nil", "return", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "DesignatorsService_Update_FullMethodName"], "doc_head": "func (c *designatorsServiceClient) Get(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *designatorsServiceClient) Update(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#29", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 482, "end_line": 491, "text": "func (c *designatorsServiceClient) Search(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchDesignatorsResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 100, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [482, 491], "def_symbols": ["Search"], "symbols": ["Search", "func", "designatorsServiceClient", "ctx", "context", "Context", "SearchDesignatorsRequest", "opts", "grpc", "CallOption", "SearchDesignatorsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Search_FullMethodName", "nil", "return"], "doc_head": "func (c *designatorsServiceClient) Search(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchDesignatorsResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#30", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 492, "end_line": 509, "text": "// DesignatorsServiceServer is the server API for DesignatorsService service.\n// All implementations must embed UnimplementedDesignatorsServiceServer\n// for forward compatibility.\ntype DesignatorsServiceServer interface {\n\tCreate(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error)\n\tGet(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error)\n\tUpdate(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error)\n\tSearch(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error)\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n\n// UnimplementedDesignatorsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedDesignatorsServiceServer struct{}\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [492, 509], "def_symbols": [], "symbols": ["DesignatorsServiceServer", "the", "server", "API", "for", "DesignatorsService", "service", "All", "implementations", "must", "embed", "UnimplementedDesignatorsServiceServer", "forward", "compatibility", "type", "interface", "Create", "context", "Context", "CreateDesignatorRequest", "CreateDesignatorResponse", "error", "Get", "GetDesignatorRequest", "GetDesignatorResponse", "Update", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Search", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "mustEmbedUnimplementedDesignatorsServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// DesignatorsServiceServer is the server API for DesignatorsService service.\n// All implementations must embed UnimplementedDesignatorsServiceServer\n// for forward compatibility.\ntype DesignatorsServiceServer interface {\n\tCreate(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error)\n\tGet(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error)\n\tUpdate(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error)\n\tSearch(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error)\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n// UnimplementedDesignatorsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedDesignatorsServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#31", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 510, "end_line": 522, "text": "func (UnimplementedDesignatorsServiceServer) Create(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Get(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Update(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Search(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) mustEmbedUnimplementedDesignatorsServiceServer() {}", "n_tokens": 199, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [510, 522], "def_symbols": ["Create", "Get", "Update", "Search", "mustEmbedUnimplementedDesignatorsServiceServer"], "symbols": ["Create", "Get", "Update", "Search", "mustEmbedUnimplementedDesignatorsServiceServer", "func", "UnimplementedDesignatorsServiceServer", "context", "Context", "CreateDesignatorRequest", "CreateDesignatorResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetDesignatorRequest", "GetDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "SearchDesignatorsRequest", "SearchDesignatorsResponse"], "doc_head": "func (UnimplementedDesignatorsServiceServer) Create(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Get(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Update(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Search(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) mustEmbedUnimplementedDesignatorsServiceServer() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#32", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 523, "end_line": 532, "text": "func (UnimplementedDesignatorsServiceServer) testEmbeddedByValue()                            {}\n\n// UnsafeDesignatorsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DesignatorsServiceServer will\n// result in compilation errors.\ntype UnsafeDesignatorsServiceServer interface {\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n\nfunc RegisterDesignatorsServiceServer(s grpc.ServiceRegistrar, srv DesignatorsServiceServer) {", "n_tokens": 97, "primary_symbol": "testEmbeddedByValue", "primary_kind": "function", "primary_span": [523, 532], "def_symbols": ["testEmbeddedByValue", "RegisterDesignatorsServiceServer"], "symbols": ["testEmbeddedByValue", "RegisterDesignatorsServiceServer", "func", "UnimplementedDesignatorsServiceServer", "UnsafeDesignatorsServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "DesignatorsServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedDesignatorsServiceServer", "grpc", "ServiceRegistrar", "srv"], "doc_head": "func (UnimplementedDesignatorsServiceServer) testEmbeddedByValue()                            {}\n// UnsafeDesignatorsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DesignatorsServiceServer will\n// result in compilation errors.\ntype UnsafeDesignatorsServiceServer interface {\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\nfunc RegisterDesignatorsServiceServer(s grpc.ServiceRegistrar, srv DesignatorsServiceServer) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#33", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 533, "end_line": 542, "text": "\t// If the following call pancis, it indicates UnimplementedDesignatorsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&DesignatorsService_ServiceDesc, srv)\n}\n", "n_tokens": 108, "primary_symbol": "", "primary_kind": "", "primary_span": [533, 542], "def_symbols": [], "symbols": ["the", "following", "call", "pancis", "indicates", "UnimplementedDesignatorsServiceServer", "was", "embedded", "pointer", "and", "nil", "This", "will", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "this", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "srv", "interface", "testEmbeddedByValue", "RegisterService", "DesignatorsService_ServiceDesc"], "doc_head": "\t// If the following call pancis, it indicates UnimplementedDesignatorsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&DesignatorsService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#34", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 543, "end_line": 560, "text": "func _DesignatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, req.(*CreateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_DesignatorsService_Create_Handler", "primary_kind": "function", "primary_span": [543, 560], "def_symbols": ["_DesignatorsService_Create_Handler"], "symbols": ["_DesignatorsService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Create_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, req.(*CreateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#35", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 561, "end_line": 578, "text": "func _DesignatorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, req.(*GetDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_DesignatorsService_Get_Handler", "primary_kind": "function", "primary_span": [561, 578], "def_symbols": ["_DesignatorsService_Get_Handler"], "symbols": ["_DesignatorsService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Get_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, req.(*GetDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#36", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 579, "end_line": 596, "text": "func _DesignatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, req.(*UpdateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 160, "primary_symbol": "_DesignatorsService_Update_Handler", "primary_kind": "function", "primary_span": [579, 596], "def_symbols": ["_DesignatorsService_Update_Handler"], "symbols": ["_DesignatorsService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Update_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, req.(*UpdateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#37", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 597, "end_line": 608, "text": "func _DesignatorsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchDesignatorsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Search_FullMethodName,\n\t}", "n_tokens": 111, "primary_symbol": "_DesignatorsService_Search_Handler", "primary_kind": "function", "primary_span": [597, 608], "def_symbols": ["_DesignatorsService_Search_Handler"], "symbols": ["_DesignatorsService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchDesignatorsRequest", "err", "nil", "return", "DesignatorsServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Search_FullMethodName"], "doc_head": "func _DesignatorsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchDesignatorsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Search_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go#38", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airlines/v0/airlines_grpc.pb.go", "rel_path": "pkg/grpc/airlines/v0/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 609, "end_line": 642, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, req.(*SearchDesignatorsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// DesignatorsService_ServiceDesc is the grpc.ServiceDesc for DesignatorsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar DesignatorsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airlines.v0.DesignatorsService\",\n\tHandlerType: (*DesignatorsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _DesignatorsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _DesignatorsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _DesignatorsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _DesignatorsService_Search_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airlines.proto\",\n}\n", "n_tokens": 258, "primary_symbol": "", "primary_kind": "", "primary_span": [609, 642], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "DesignatorsServiceServer", "Search", "SearchDesignatorsRequest", "interceptor", "info", "DesignatorsService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "DesignatorsService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airlines", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Create", "Handler", "_DesignatorsService_Create_Handler", "Get", "_DesignatorsService_Get_Handler", "Update", "_DesignatorsService_Update_Handler", "_DesignatorsService_Search_Handler", "Streams", "StreamDesc", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, req.(*SearchDesignatorsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// DesignatorsService_ServiceDesc is the grpc.ServiceDesc for DesignatorsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar DesignatorsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airlines.v0.DesignatorsService\",\n\tHandlerType: (*DesignatorsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _DesignatorsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _DesignatorsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _DesignatorsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _DesignatorsService_Search_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airlines.proto\",\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/pb.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/pb.go", "rel_path": "pkg/grpc/airports/v0/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package v0\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairports.proto=.;v0 airports.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairports.proto=.;v0 airports.proto\n", "n_tokens": 75, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "Mairports", "proto", "airports", "grpc_out", "grpc_opt"], "doc_head": "package v0\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairports.proto=.;v0 airports.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairports.proto=.;v0 airports.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airports.proto\n\npackage v0\n", "n_tokens": 55, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "airports", "proto", "package"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airports.proto\npackage v0"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 32, "text": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\n\nconst (\n\tAirportsService_Get_FullMethodName                  = \"/aviation.airports.v0.AirportsService/Get\"\n\tAirportsService_BatchGet_FullMethodName             = \"/aviation.airports.v0.AirportsService/BatchGet\"\n\tAirportsService_GetByCity_FullMethodName            = \"/aviation.airports.v0.AirportsService/GetByCity\"\n\tAirportsService_UploadImage_FullMethodName          = \"/aviation.airports.v0.AirportsService/UploadImage\"\n\tAirportsService_Search_FullMethodName               = \"/aviation.airports.v0.AirportsService/Search\"\n\tAirportsService_Create_FullMethodName               = \"/aviation.airports.v0.AirportsService/Create\"\n\tAirportsService_Update_FullMethodName               = \"/aviation.airports.v0.AirportsService/Update\"\n\tAirportsService_BatchGetByDesignator_FullMethodName = \"/aviation.airports.v0.AirportsService/BatchGetByDesignator\"\n\tAirportsService_GetByDesignator_FullMethodName      = \"/aviation.airports.v0.AirportsService/GetByDesignator\"\n)\n", "n_tokens": 329, "primary_symbol": "", "primary_kind": "", "primary_span": [9, 32], "def_symbols": [], "symbols": ["import", "context", "grpc", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "generated", "file", "compatible", "with", "the", "package", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion9", "AirportsService_Get_FullMethodName", "aviation", "airports", "AirportsService", "Get", "AirportsService_BatchGet_FullMethodName", "BatchGet", "AirportsService_GetByCity_FullMethodName", "GetByCity", "AirportsService_UploadImage_FullMethodName", "UploadImage", "AirportsService_Search_FullMethodName", "Search", "AirportsService_Create_FullMethodName", "Create", "AirportsService_Update_FullMethodName", "Update", "AirportsService_BatchGetByDesignator_FullMethodName", "BatchGetByDesignator", "AirportsService_GetByDesignator_FullMethodName", "GetByDesignator"], "doc_head": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\nconst (\n\tAirportsService_Get_FullMethodName                  = \"/aviation.airports.v0.AirportsService/Get\"\n\tAirportsService_BatchGet_FullMethodName             = \"/aviation.airports.v0.AirportsService/BatchGet\"\n\tAirportsService_GetByCity_FullMethodName            = \"/aviation.airports.v0.AirportsService/GetByCity\"\n\tAirportsService_UploadImage_FullMethodName          = \"/aviation.airports.v0.AirportsService/UploadImage\"\n\tAirportsService_Search_FullMethodName               = \"/aviation.airports.v0.AirportsService/Search\"\n\tAirportsService_Create_FullMethodName               = \"/aviation.airports.v0.AirportsService/Create\"\n\tAirportsService_Update_FullMethodName               = \"/aviation.airports.v0.AirportsService/Update\"\n\tAirportsService_BatchGetByDesignator_FullMethodName = \"/aviation.airports.v0.AirportsService/BatchGetByDesignator"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 33, "end_line": 47, "text": "// AirportsServiceClient is the client API for AirportsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirportsServiceClient interface {\n\tGet(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tGetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tUploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)\n\tSearch(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error)\n\tCreate(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error)\n}\n", "n_tokens": 308, "primary_symbol": "", "primary_kind": "", "primary_span": [33, 47], "def_symbols": [], "symbols": ["AirportsServiceClient", "the", "client", "API", "for", "AirportsService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Get", "context", "Context", "AirportDetailsRequest", "opts", "CallOption", "AirportDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "GetByCity", "AirportByCityRequest", "UploadImage", "ClientStreamingClient", "UploadImageRequest", "UploadImageResponse", "Search", "SearchAirportsRequest", "SearchAirportsResponse", "Create", "CreateAirportRequest", "CreateAirportResponse", "Update", "UpdateAirportRequest", "UpdateAirportResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse"], "doc_head": "// AirportsServiceClient is the client API for AirportsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirportsServiceClient interface {\n\tGet(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tGetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tUploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)\n\tSearch(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error)\n\tCreate(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 48, "end_line": 65, "text": "type airportsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewAirportsServiceClient(cc grpc.ClientConnInterface) AirportsServiceClient {\n\treturn &airportsServiceClient{cc}\n}\n\nfunc (c *airportsServiceClient) Get(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirportDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 139, "primary_symbol": "NewAirportsServiceClient", "primary_kind": "function", "primary_span": [52, 65], "def_symbols": ["NewAirportsServiceClient", "Get"], "symbols": ["NewAirportsServiceClient", "Get", "type", "airportsServiceClient", "struct", "grpc", "ClientConnInterface", "func", "AirportsServiceClient", "return", "ctx", "context", "Context", "AirportDetailsRequest", "opts", "CallOption", "AirportDetailsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_Get_FullMethodName", "nil"], "doc_head": "type airportsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewAirportsServiceClient(cc grpc.ClientConnInterface) AirportsServiceClient {\n\treturn &airportsServiceClient{cc}\n}\nfunc (c *airportsServiceClient) Get(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirportDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 66, "end_line": 85, "text": "func (c *airportsServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airportsServiceClient) GetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByCity_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 204, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [66, 85], "def_symbols": ["BatchGet", "GetByCity"], "symbols": ["BatchGet", "GetByCity", "func", "airportsServiceClient", "ctx", "context", "Context", "BatchGetRequest", "opts", "grpc", "CallOption", "BatchGetResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_BatchGet_FullMethodName", "nil", "return", "AirportByCityRequest", "AirportsService_GetByCity_FullMethodName"], "doc_head": "func (c *airportsServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airportsServiceClient) GetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByCity_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 86, "end_line": 98, "text": "func (c *airportsServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AirportsService_ServiceDesc.Streams[0], AirportsService_UploadImage_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}\n\treturn x, nil\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]\n", "n_tokens": 172, "primary_symbol": "UploadImage", "primary_kind": "function", "primary_span": [86, 98], "def_symbols": ["UploadImage"], "symbols": ["UploadImage", "func", "airportsServiceClient", "ctx", "context", "Context", "opts", "grpc", "CallOption", "ClientStreamingClient", "UploadImageRequest", "UploadImageResponse", "error", "cOpts", "append", "StaticMethod", "stream", "err", "NewStream", "AirportsService_ServiceDesc", "Streams", "AirportsService_UploadImage_FullMethodName", "nil", "return", "GenericClientStream", "ClientStream", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AirportsService_UploadImageClient"], "doc_head": "func (c *airportsServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AirportsService_ServiceDesc.Streams[0], AirportsService_UploadImage_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}\n\treturn x, nil\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 99, "end_line": 118, "text": "func (c *airportsServiceClient) Search(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirportsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airportsServiceClient) Create(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 197, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [99, 118], "def_symbols": ["Search", "Create"], "symbols": ["Search", "Create", "func", "airportsServiceClient", "ctx", "context", "Context", "SearchAirportsRequest", "opts", "grpc", "CallOption", "SearchAirportsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_Search_FullMethodName", "nil", "return", "CreateAirportRequest", "CreateAirportResponse", "AirportsService_Create_FullMethodName"], "doc_head": "func (c *airportsServiceClient) Search(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirportsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airportsServiceClient) Create(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 119, "end_line": 128, "text": "func (c *airportsServiceClient) Update(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 98, "primary_symbol": "Update", "primary_kind": "function", "primary_span": [119, 128], "def_symbols": ["Update"], "symbols": ["Update", "func", "airportsServiceClient", "ctx", "context", "Context", "UpdateAirportRequest", "opts", "grpc", "CallOption", "UpdateAirportResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_Update_FullMethodName", "nil", "return"], "doc_head": "func (c *airportsServiceClient) Update(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 129, "end_line": 138, "text": "func (c *airportsServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 116, "primary_symbol": "BatchGetByDesignator", "primary_kind": "function", "primary_span": [129, 138], "def_symbols": ["BatchGetByDesignator"], "symbols": ["BatchGetByDesignator", "func", "airportsServiceClient", "ctx", "context", "Context", "BatchGetByDesignatorRequest", "opts", "grpc", "CallOption", "BatchGetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_BatchGetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airportsServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 139, "end_line": 148, "text": "func (c *airportsServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 109, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [139, 148], "def_symbols": ["GetByDesignator"], "symbols": ["GetByDesignator", "func", "airportsServiceClient", "ctx", "context", "Context", "GetByDesignatorRequest", "opts", "grpc", "CallOption", "GetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_GetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airportsServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 149, "end_line": 164, "text": "// AirportsServiceServer is the server API for AirportsService service.\n// All implementations must embed UnimplementedAirportsServiceServer\n// for forward compatibility.\ntype AirportsServiceServer interface {\n\tGet(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tGetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error)\n\tUploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error\n\tSearch(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error)\n\tCreate(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error)\n\tUpdate(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tmustEmbedUnimplementedAirportsServiceServer()\n}\n", "n_tokens": 223, "primary_symbol": "", "primary_kind": "", "primary_span": [149, 164], "def_symbols": [], "symbols": ["AirportsServiceServer", "the", "server", "API", "for", "AirportsService", "service", "All", "implementations", "must", "embed", "UnimplementedAirportsServiceServer", "forward", "compatibility", "type", "interface", "Get", "context", "Context", "AirportDetailsRequest", "AirportDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "GetByCity", "AirportByCityRequest", "UploadImage", "grpc", "ClientStreamingServer", "UploadImageRequest", "UploadImageResponse", "Search", "SearchAirportsRequest", "SearchAirportsResponse", "Create", "CreateAirportRequest", "CreateAirportResponse", "Update", "UpdateAirportRequest", "UpdateAirportResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse", "mustEmbedUnimplementedAirportsServiceServer"], "doc_head": "// AirportsServiceServer is the server API for AirportsService service.\n// All implementations must embed UnimplementedAirportsServiceServer\n// for forward compatibility.\ntype AirportsServiceServer interface {\n\tGet(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tGetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error)\n\tUploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error\n\tSearch(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error)\n\tCreate(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error)\n\tUpdate(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tmustEmbedUnimplementedAirportsServiceServer()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 165, "end_line": 180, "text": "// UnimplementedAirportsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirportsServiceServer struct{}\n\nfunc (UnimplementedAirportsServiceServer) Get(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByCity not implemented\")\n}", "n_tokens": 190, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [172, 180], "def_symbols": ["Get", "BatchGet", "GetByCity"], "symbols": ["Get", "BatchGet", "GetByCity", "UnimplementedAirportsServiceServer", "must", "embedded", "have", "forward", "compatible", "implementations", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "type", "struct", "func", "context", "Context", "AirportDetailsRequest", "AirportDetailsResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetRequest", "BatchGetResponse", "AirportByCityRequest"], "doc_head": "// UnimplementedAirportsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirportsServiceServer struct{}\nfunc (UnimplementedAirportsServiceServer) Get(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByCity not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 181, "end_line": 192, "text": "func (UnimplementedAirportsServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method UploadImage not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Search(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Create(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Update(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}", "n_tokens": 174, "primary_symbol": "UploadImage", "primary_kind": "function", "primary_span": [181, 192], "def_symbols": ["UploadImage", "Search", "Create", "Update"], "symbols": ["UploadImage", "Search", "Create", "Update", "func", "UnimplementedAirportsServiceServer", "grpc", "ClientStreamingServer", "UploadImageRequest", "UploadImageResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "context", "Context", "SearchAirportsRequest", "SearchAirportsResponse", "nil", "CreateAirportRequest", "CreateAirportResponse", "UpdateAirportRequest", "UpdateAirportResponse"], "doc_head": "func (UnimplementedAirportsServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method UploadImage not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Search(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Create(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Update(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 193, "end_line": 201, "text": "func (UnimplementedAirportsServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) mustEmbedUnimplementedAirportsServiceServer() {}\nfunc (UnimplementedAirportsServiceServer) testEmbeddedByValue()                         {}\n", "n_tokens": 145, "primary_symbol": "BatchGetByDesignator", "primary_kind": "function", "primary_span": [193, 201], "def_symbols": ["BatchGetByDesignator", "GetByDesignator", "mustEmbedUnimplementedAirportsServiceServer", "testEmbeddedByValue"], "symbols": ["BatchGetByDesignator", "GetByDesignator", "mustEmbedUnimplementedAirportsServiceServer", "testEmbeddedByValue", "func", "UnimplementedAirportsServiceServer", "context", "Context", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetByDesignatorRequest", "GetByDesignatorResponse"], "doc_head": "func (UnimplementedAirportsServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) mustEmbedUnimplementedAirportsServiceServer() {}\nfunc (UnimplementedAirportsServiceServer) testEmbeddedByValue()                         {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 202, "end_line": 219, "text": "// UnsafeAirportsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirportsServiceServer will\n// result in compilation errors.\ntype UnsafeAirportsServiceServer interface {\n\tmustEmbedUnimplementedAirportsServiceServer()\n}\n\nfunc RegisterAirportsServiceServer(s grpc.ServiceRegistrar, srv AirportsServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirportsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirportsService_ServiceDesc, srv)\n}\n", "n_tokens": 189, "primary_symbol": "RegisterAirportsServiceServer", "primary_kind": "function", "primary_span": [209, 219], "def_symbols": ["RegisterAirportsServiceServer"], "symbols": ["RegisterAirportsServiceServer", "UnsafeAirportsServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "AirportsServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedAirportsServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedAirportsServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "AirportsService_ServiceDesc"], "doc_head": "// UnsafeAirportsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirportsServiceServer will\n// result in compilation errors.\ntype UnsafeAirportsServiceServer interface {\n\tmustEmbedUnimplementedAirportsServiceServer()\n}\nfunc RegisterAirportsServiceServer(s grpc.ServiceRegistrar, srv AirportsServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirportsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirportsService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 220, "end_line": 237, "text": "func _AirportsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, req.(*AirportDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirportsService_Get_Handler", "primary_kind": "function", "primary_span": [220, 237], "def_symbols": ["_AirportsService_Get_Handler"], "symbols": ["_AirportsService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AirportDetailsRequest", "err", "nil", "return", "AirportsServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Get_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, req.(*AirportDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 238, "end_line": 255, "text": "func _AirportsService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 164, "primary_symbol": "_AirportsService_BatchGet_Handler", "primary_kind": "function", "primary_span": [238, 255], "def_symbols": ["_AirportsService_BatchGet_Handler"], "symbols": ["_AirportsService_BatchGet_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetRequest", "err", "nil", "return", "AirportsServiceServer", "BatchGet", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_BatchGet_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#18", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 256, "end_line": 273, "text": "func _AirportsService_GetByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportByCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByCity_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, req.(*AirportByCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 169, "primary_symbol": "_AirportsService_GetByCity_Handler", "primary_kind": "function", "primary_span": [256, 273], "def_symbols": ["_AirportsService_GetByCity_Handler"], "symbols": ["_AirportsService_GetByCity_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AirportByCityRequest", "err", "nil", "return", "AirportsServiceServer", "GetByCity", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_GetByCity_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_GetByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportByCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByCity_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, req.(*AirportByCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#19", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 274, "end_line": 280, "text": "func _AirportsService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {\n\treturn srv.(AirportsServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]\n", "n_tokens": 95, "primary_symbol": "_AirportsService_UploadImage_Handler", "primary_kind": "function", "primary_span": [274, 280], "def_symbols": ["_AirportsService_UploadImage_Handler"], "symbols": ["_AirportsService_UploadImage_Handler", "func", "srv", "interface", "stream", "grpc", "ServerStream", "error", "return", "AirportsServiceServer", "UploadImage", "GenericServerStream", "UploadImageRequest", "UploadImageResponse", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AirportsService_UploadImageServer", "ClientStreamingServer"], "doc_head": "func _AirportsService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {\n\treturn srv.(AirportsServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#20", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 281, "end_line": 298, "text": "func _AirportsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirportsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, req.(*SearchAirportsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirportsService_Search_Handler", "primary_kind": "function", "primary_span": [281, 298], "def_symbols": ["_AirportsService_Search_Handler"], "symbols": ["_AirportsService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchAirportsRequest", "err", "nil", "return", "AirportsServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Search_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirportsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, req.(*SearchAirportsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#21", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 299, "end_line": 316, "text": "func _AirportsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, req.(*CreateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 157, "primary_symbol": "_AirportsService_Create_Handler", "primary_kind": "function", "primary_span": [299, 316], "def_symbols": ["_AirportsService_Create_Handler"], "symbols": ["_AirportsService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateAirportRequest", "err", "nil", "return", "AirportsServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Create_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, req.(*CreateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#22", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 317, "end_line": 334, "text": "func _AirportsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, req.(*UpdateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AirportsService_Update_Handler", "primary_kind": "function", "primary_span": [317, 334], "def_symbols": ["_AirportsService_Update_Handler"], "symbols": ["_AirportsService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateAirportRequest", "err", "nil", "return", "AirportsServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Update_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, req.(*UpdateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#23", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 335, "end_line": 352, "text": "func _AirportsService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 182, "primary_symbol": "_AirportsService_BatchGetByDesignator_Handler", "primary_kind": "function", "primary_span": [335, 352], "def_symbols": ["_AirportsService_BatchGetByDesignator_Handler"], "symbols": ["_AirportsService_BatchGetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetByDesignatorRequest", "err", "nil", "return", "AirportsServiceServer", "BatchGetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_BatchGetByDesignator_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#24", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 353, "end_line": 364, "text": "func _AirportsService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByDesignator_FullMethodName,\n\t}", "n_tokens": 121, "primary_symbol": "_AirportsService_GetByDesignator_Handler", "primary_kind": "function", "primary_span": [353, 364], "def_symbols": ["_AirportsService_GetByDesignator_Handler"], "symbols": ["_AirportsService_GetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetByDesignatorRequest", "err", "nil", "return", "AirportsServiceServer", "GetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_GetByDesignator_FullMethodName"], "doc_head": "func _AirportsService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByDesignator_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#25", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 365, "end_line": 427, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// AirportsService_ServiceDesc is the grpc.ServiceDesc for AirportsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirportsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.AirportsService\",\n\tHandlerType: (*AirportsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirportsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirportsService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByCity\",\n\t\t\tHandler:    _AirportsService_GetByCity_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirportsService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirportsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirportsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirportsService_BatchGetByDesignator_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByDesignator\",\n\t\t\tHandler:    _AirportsService_GetByDesignator_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{\n\t\t{\n\t\t\tStreamName:    \"UploadImage\",\n\t\t\tHandler:       _AirportsService_UploadImage_Handler,\n\t\t\tClientStreams: true,\n\t\t},\n\t},\n\tMetadata: \"airports.proto\",\n}\n\nconst (\n\tCitiesService_Search_FullMethodName = \"/aviation.airports.v0.CitiesService/Search\"\n\tCitiesService_Get_FullMethodName    = \"/aviation.airports.v0.CitiesService/Get\"\n\tCitiesService_Create_FullMethodName = \"/aviation.airports.v0.CitiesService/Create\"\n\tCitiesService_Update_FullMethodName = \"/aviation.airports.v0.CitiesService/Update\"\n)\n", "n_tokens": 508, "primary_symbol": "", "primary_kind": "", "primary_span": [365, 427], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "AirportsServiceServer", "GetByDesignator", "GetByDesignatorRequest", "interceptor", "info", "AirportsService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "AirportsService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Get", "Handler", "_AirportsService_Get_Handler", "BatchGet", "_AirportsService_BatchGet_Handler", "GetByCity", "_AirportsService_GetByCity_Handler", "Search", "_AirportsService_Search_Handler", "Create", "_AirportsService_Create_Handler", "Update", "_AirportsService_Update_Handler", "BatchGetByDesignator", "_AirportsService_BatchGetByDesignator_Handler", "_AirportsService_GetByDesignator_Handler", "Streams", "StreamDesc", "StreamName", "UploadImage", "_AirportsService_UploadImage_Handler", "ClientStreams", "true", "Metadata", "proto", "const", "CitiesService_Search_FullMethodName", "CitiesService", "CitiesService_Get_FullMethodName", "CitiesService_Create_FullMethodName", "CitiesService_Update_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// AirportsService_ServiceDesc is the grpc.ServiceDesc for AirportsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirportsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.AirportsService\",\n\tHandlerType: (*AirportsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirportsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirportsService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByCity\",\n\t\t\tHandler:    _AirportsService_GetByCity_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirportsService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirportsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirportsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirportsService_BatchGetByDesignator_Handl"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#26", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 428, "end_line": 445, "text": "// CitiesServiceClient is the client API for CitiesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CitiesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error)\n\tGet(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error)\n\tCreate(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error)\n}\n\ntype citiesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewCitiesServiceClient(cc grpc.ClientConnInterface) CitiesServiceClient {\n\treturn &citiesServiceClient{cc}\n}\n", "n_tokens": 192, "primary_symbol": "NewCitiesServiceClient", "primary_kind": "function", "primary_span": [442, 445], "def_symbols": ["NewCitiesServiceClient"], "symbols": ["NewCitiesServiceClient", "CitiesServiceClient", "the", "client", "API", "for", "CitiesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Search", "context", "Context", "SearchCitiesRequest", "opts", "CallOption", "SearchCitiesResponse", "error", "Get", "GetCityRequest", "GetCityResponse", "Create", "CreateCityRequest", "CreateCityResponse", "Update", "UpdateCityRequest", "UpdateCityResponse", "citiesServiceClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// CitiesServiceClient is the client API for CitiesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CitiesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error)\n\tGet(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error)\n\tCreate(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error)\n}\ntype citiesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewCitiesServiceClient(cc grpc.ClientConnInterface) CitiesServiceClient {\n\treturn &citiesServiceClient{cc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#27", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 446, "end_line": 465, "text": "func (c *citiesServiceClient) Search(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCitiesResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *citiesServiceClient) Get(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 190, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [446, 465], "def_symbols": ["Search", "Get"], "symbols": ["Search", "Get", "func", "citiesServiceClient", "ctx", "context", "Context", "SearchCitiesRequest", "opts", "grpc", "CallOption", "SearchCitiesResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CitiesService_Search_FullMethodName", "nil", "return", "GetCityRequest", "GetCityResponse", "CitiesService_Get_FullMethodName"], "doc_head": "func (c *citiesServiceClient) Search(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCitiesResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *citiesServiceClient) Get(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#28", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 466, "end_line": 485, "text": "func (c *citiesServiceClient) Create(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *citiesServiceClient) Update(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 191, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [466, 485], "def_symbols": ["Create", "Update"], "symbols": ["Create", "Update", "func", "citiesServiceClient", "ctx", "context", "Context", "CreateCityRequest", "opts", "grpc", "CallOption", "CreateCityResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CitiesService_Create_FullMethodName", "nil", "return", "UpdateCityRequest", "UpdateCityResponse", "CitiesService_Update_FullMethodName"], "doc_head": "func (c *citiesServiceClient) Create(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *citiesServiceClient) Update(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#29", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 486, "end_line": 503, "text": "// CitiesServiceServer is the server API for CitiesService service.\n// All implementations must embed UnimplementedCitiesServiceServer\n// for forward compatibility.\ntype CitiesServiceServer interface {\n\tSearch(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error)\n\tGet(context.Context, *GetCityRequest) (*GetCityResponse, error)\n\tCreate(context.Context, *CreateCityRequest) (*CreateCityResponse, error)\n\tUpdate(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error)\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\n\n// UnimplementedCitiesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCitiesServiceServer struct{}\n", "n_tokens": 162, "primary_symbol": "", "primary_kind": "", "primary_span": [486, 503], "def_symbols": [], "symbols": ["CitiesServiceServer", "the", "server", "API", "for", "CitiesService", "service", "All", "implementations", "must", "embed", "UnimplementedCitiesServiceServer", "forward", "compatibility", "type", "interface", "Search", "context", "Context", "SearchCitiesRequest", "SearchCitiesResponse", "error", "Get", "GetCityRequest", "GetCityResponse", "Create", "CreateCityRequest", "CreateCityResponse", "Update", "UpdateCityRequest", "UpdateCityResponse", "mustEmbedUnimplementedCitiesServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// CitiesServiceServer is the server API for CitiesService service.\n// All implementations must embed UnimplementedCitiesServiceServer\n// for forward compatibility.\ntype CitiesServiceServer interface {\n\tSearch(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error)\n\tGet(context.Context, *GetCityRequest) (*GetCityResponse, error)\n\tCreate(context.Context, *CreateCityRequest) (*CreateCityResponse, error)\n\tUpdate(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error)\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\n// UnimplementedCitiesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCitiesServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#30", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 504, "end_line": 518, "text": "func (UnimplementedCitiesServiceServer) Search(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Get(context.Context, *GetCityRequest) (*GetCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Create(context.Context, *CreateCityRequest) (*CreateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Update(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) mustEmbedUnimplementedCitiesServiceServer() {}\nfunc (UnimplementedCitiesServiceServer) testEmbeddedByValue()                       {}\n", "n_tokens": 200, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [504, 518], "def_symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCitiesServiceServer", "testEmbeddedByValue"], "symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCitiesServiceServer", "testEmbeddedByValue", "func", "UnimplementedCitiesServiceServer", "context", "Context", "SearchCitiesRequest", "SearchCitiesResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetCityRequest", "GetCityResponse", "CreateCityRequest", "CreateCityResponse", "UpdateCityRequest", "UpdateCityResponse"], "doc_head": "func (UnimplementedCitiesServiceServer) Search(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Get(context.Context, *GetCityRequest) (*GetCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Create(context.Context, *CreateCityRequest) (*CreateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Update(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) mustEmbedUnimplementedCitiesServiceServer() {}\nfunc (UnimplementedCitiesServiceServer) testEmbeddedByValue()                       {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#31", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 519, "end_line": 536, "text": "// UnsafeCitiesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CitiesServiceServer will\n// result in compilation errors.\ntype UnsafeCitiesServiceServer interface {\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\n\nfunc RegisterCitiesServiceServer(s grpc.ServiceRegistrar, srv CitiesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCitiesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CitiesService_ServiceDesc, srv)\n}\n", "n_tokens": 181, "primary_symbol": "RegisterCitiesServiceServer", "primary_kind": "function", "primary_span": [526, 536], "def_symbols": ["RegisterCitiesServiceServer"], "symbols": ["RegisterCitiesServiceServer", "UnsafeCitiesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "CitiesServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedCitiesServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedCitiesServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "CitiesService_ServiceDesc"], "doc_head": "// UnsafeCitiesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CitiesServiceServer will\n// result in compilation errors.\ntype UnsafeCitiesServiceServer interface {\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\nfunc RegisterCitiesServiceServer(s grpc.ServiceRegistrar, srv CitiesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCitiesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CitiesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#32", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 537, "end_line": 554, "text": "func _CitiesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCitiesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, req.(*SearchCitiesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CitiesService_Search_Handler", "primary_kind": "function", "primary_span": [537, 554], "def_symbols": ["_CitiesService_Search_Handler"], "symbols": ["_CitiesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchCitiesRequest", "err", "nil", "return", "CitiesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _CitiesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCitiesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, req.(*SearchCitiesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#33", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 555, "end_line": 572, "text": "func _CitiesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, req.(*GetCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CitiesService_Get_Handler", "primary_kind": "function", "primary_span": [555, 572], "def_symbols": ["_CitiesService_Get_Handler"], "symbols": ["_CitiesService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetCityRequest", "err", "nil", "return", "CitiesServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Get_FullMethodName", "handler", "req"], "doc_head": "func _CitiesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, req.(*GetCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#34", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 573, "end_line": 590, "text": "func _CitiesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, req.(*CreateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CitiesService_Create_Handler", "primary_kind": "function", "primary_span": [573, 590], "def_symbols": ["_CitiesService_Create_Handler"], "symbols": ["_CitiesService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateCityRequest", "err", "nil", "return", "CitiesServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Create_FullMethodName", "handler", "req"], "doc_head": "func _CitiesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, req.(*CreateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#35", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 591, "end_line": 602, "text": "func _CitiesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Update_FullMethodName,\n\t}", "n_tokens": 108, "primary_symbol": "_CitiesService_Update_Handler", "primary_kind": "function", "primary_span": [591, 602], "def_symbols": ["_CitiesService_Update_Handler"], "symbols": ["_CitiesService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateCityRequest", "err", "nil", "return", "CitiesServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Update_FullMethodName"], "doc_head": "func _CitiesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Update_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#36", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 603, "end_line": 643, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, req.(*UpdateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// CitiesService_ServiceDesc is the grpc.ServiceDesc for CitiesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CitiesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CitiesService\",\n\tHandlerType: (*CitiesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CitiesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CitiesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CitiesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CitiesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\n\nconst (\n\tCountriesService_Search_FullMethodName = \"/aviation.airports.v0.CountriesService/Search\"\n\tCountriesService_Get_FullMethodName    = \"/aviation.airports.v0.CountriesService/Get\"\n\tCountriesService_Create_FullMethodName = \"/aviation.airports.v0.CountriesService/Create\"\n\tCountriesService_Update_FullMethodName = \"/aviation.airports.v0.CountriesService/Update\"\n)\n", "n_tokens": 334, "primary_symbol": "", "primary_kind": "", "primary_span": [603, 643], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "CitiesServiceServer", "Update", "UpdateCityRequest", "interceptor", "info", "CitiesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "CitiesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Search", "Handler", "_CitiesService_Search_Handler", "Get", "_CitiesService_Get_Handler", "Create", "_CitiesService_Create_Handler", "_CitiesService_Update_Handler", "Streams", "StreamDesc", "Metadata", "proto", "const", "CountriesService_Search_FullMethodName", "CountriesService", "CountriesService_Get_FullMethodName", "CountriesService_Create_FullMethodName", "CountriesService_Update_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, req.(*UpdateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// CitiesService_ServiceDesc is the grpc.ServiceDesc for CitiesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CitiesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CitiesService\",\n\tHandlerType: (*CitiesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CitiesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CitiesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CitiesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CitiesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\nconst (\n\tCountriesService_Search_FullMethodName = \"/aviation.airports.v0.CountriesService/Search\"\n\tCountriesService_Get_FullMethodName    = \"/aviation.airports.v0.CountriesService/Get\"\n\tCountriesService_Create_FullMethodName = \"/aviation.airp"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#37", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 644, "end_line": 661, "text": "// CountriesServiceClient is the client API for CountriesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CountriesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error)\n\tGet(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)\n\tCreate(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error)\n}\n\ntype countriesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewCountriesServiceClient(cc grpc.ClientConnInterface) CountriesServiceClient {\n\treturn &countriesServiceClient{cc}\n}\n", "n_tokens": 192, "primary_symbol": "NewCountriesServiceClient", "primary_kind": "function", "primary_span": [658, 661], "def_symbols": ["NewCountriesServiceClient"], "symbols": ["NewCountriesServiceClient", "CountriesServiceClient", "the", "client", "API", "for", "CountriesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Search", "context", "Context", "SearchCountriesRequest", "opts", "CallOption", "SearchCountriesResponse", "error", "Get", "GetCountryRequest", "GetCountryResponse", "Create", "CreateCountryRequest", "CreateCountryResponse", "Update", "UpdateCountryRequest", "UpdateCountryResponse", "countriesServiceClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// CountriesServiceClient is the client API for CountriesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CountriesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error)\n\tGet(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)\n\tCreate(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error)\n}\ntype countriesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewCountriesServiceClient(cc grpc.ClientConnInterface) CountriesServiceClient {\n\treturn &countriesServiceClient{cc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#38", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 662, "end_line": 681, "text": "func (c *countriesServiceClient) Search(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCountriesResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *countriesServiceClient) Get(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 190, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [662, 681], "def_symbols": ["Search", "Get"], "symbols": ["Search", "Get", "func", "countriesServiceClient", "ctx", "context", "Context", "SearchCountriesRequest", "opts", "grpc", "CallOption", "SearchCountriesResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CountriesService_Search_FullMethodName", "nil", "return", "GetCountryRequest", "GetCountryResponse", "CountriesService_Get_FullMethodName"], "doc_head": "func (c *countriesServiceClient) Search(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCountriesResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *countriesServiceClient) Get(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#39", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 682, "end_line": 701, "text": "func (c *countriesServiceClient) Create(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *countriesServiceClient) Update(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 191, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [682, 701], "def_symbols": ["Create", "Update"], "symbols": ["Create", "Update", "func", "countriesServiceClient", "ctx", "context", "Context", "CreateCountryRequest", "opts", "grpc", "CallOption", "CreateCountryResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CountriesService_Create_FullMethodName", "nil", "return", "UpdateCountryRequest", "UpdateCountryResponse", "CountriesService_Update_FullMethodName"], "doc_head": "func (c *countriesServiceClient) Create(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *countriesServiceClient) Update(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#40", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 702, "end_line": 719, "text": "// CountriesServiceServer is the server API for CountriesService service.\n// All implementations must embed UnimplementedCountriesServiceServer\n// for forward compatibility.\ntype CountriesServiceServer interface {\n\tSearch(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error)\n\tGet(context.Context, *GetCountryRequest) (*GetCountryResponse, error)\n\tCreate(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)\n\tUpdate(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error)\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\n\n// UnimplementedCountriesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCountriesServiceServer struct{}\n", "n_tokens": 162, "primary_symbol": "", "primary_kind": "", "primary_span": [702, 719], "def_symbols": [], "symbols": ["CountriesServiceServer", "the", "server", "API", "for", "CountriesService", "service", "All", "implementations", "must", "embed", "UnimplementedCountriesServiceServer", "forward", "compatibility", "type", "interface", "Search", "context", "Context", "SearchCountriesRequest", "SearchCountriesResponse", "error", "Get", "GetCountryRequest", "GetCountryResponse", "Create", "CreateCountryRequest", "CreateCountryResponse", "Update", "UpdateCountryRequest", "UpdateCountryResponse", "mustEmbedUnimplementedCountriesServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// CountriesServiceServer is the server API for CountriesService service.\n// All implementations must embed UnimplementedCountriesServiceServer\n// for forward compatibility.\ntype CountriesServiceServer interface {\n\tSearch(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error)\n\tGet(context.Context, *GetCountryRequest) (*GetCountryResponse, error)\n\tCreate(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)\n\tUpdate(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error)\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\n// UnimplementedCountriesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCountriesServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#41", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 720, "end_line": 734, "text": "func (UnimplementedCountriesServiceServer) Search(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Get(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Create(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Update(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) mustEmbedUnimplementedCountriesServiceServer() {}\nfunc (UnimplementedCountriesServiceServer) testEmbeddedByValue()                          {}\n", "n_tokens": 200, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [720, 734], "def_symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCountriesServiceServer", "testEmbeddedByValue"], "symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCountriesServiceServer", "testEmbeddedByValue", "func", "UnimplementedCountriesServiceServer", "context", "Context", "SearchCountriesRequest", "SearchCountriesResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetCountryRequest", "GetCountryResponse", "CreateCountryRequest", "CreateCountryResponse", "UpdateCountryRequest", "UpdateCountryResponse"], "doc_head": "func (UnimplementedCountriesServiceServer) Search(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Get(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Create(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Update(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) mustEmbedUnimplementedCountriesServiceServer() {}\nfunc (UnimplementedCountriesServiceServer) testEmbeddedByValue()                          {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#42", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 735, "end_line": 752, "text": "// UnsafeCountriesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CountriesServiceServer will\n// result in compilation errors.\ntype UnsafeCountriesServiceServer interface {\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\n\nfunc RegisterCountriesServiceServer(s grpc.ServiceRegistrar, srv CountriesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCountriesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CountriesService_ServiceDesc, srv)\n}\n", "n_tokens": 181, "primary_symbol": "RegisterCountriesServiceServer", "primary_kind": "function", "primary_span": [742, 752], "def_symbols": ["RegisterCountriesServiceServer"], "symbols": ["RegisterCountriesServiceServer", "UnsafeCountriesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "CountriesServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedCountriesServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedCountriesServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "CountriesService_ServiceDesc"], "doc_head": "// UnsafeCountriesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CountriesServiceServer will\n// result in compilation errors.\ntype UnsafeCountriesServiceServer interface {\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\nfunc RegisterCountriesServiceServer(s grpc.ServiceRegistrar, srv CountriesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCountriesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CountriesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#43", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 753, "end_line": 770, "text": "func _CountriesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCountriesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, req.(*SearchCountriesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CountriesService_Search_Handler", "primary_kind": "function", "primary_span": [753, 770], "def_symbols": ["_CountriesService_Search_Handler"], "symbols": ["_CountriesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchCountriesRequest", "err", "nil", "return", "CountriesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _CountriesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCountriesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, req.(*SearchCountriesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#44", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 771, "end_line": 788, "text": "func _CountriesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, req.(*GetCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CountriesService_Get_Handler", "primary_kind": "function", "primary_span": [771, 788], "def_symbols": ["_CountriesService_Get_Handler"], "symbols": ["_CountriesService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetCountryRequest", "err", "nil", "return", "CountriesServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Get_FullMethodName", "handler", "req"], "doc_head": "func _CountriesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, req.(*GetCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#45", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 789, "end_line": 806, "text": "func _CountriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, req.(*CreateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CountriesService_Create_Handler", "primary_kind": "function", "primary_span": [789, 806], "def_symbols": ["_CountriesService_Create_Handler"], "symbols": ["_CountriesService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateCountryRequest", "err", "nil", "return", "CountriesServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Create_FullMethodName", "handler", "req"], "doc_head": "func _CountriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, req.(*CreateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#46", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 807, "end_line": 818, "text": "func _CountriesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Update_FullMethodName,\n\t}", "n_tokens": 108, "primary_symbol": "_CountriesService_Update_Handler", "primary_kind": "function", "primary_span": [807, 818], "def_symbols": ["_CountriesService_Update_Handler"], "symbols": ["_CountriesService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateCountryRequest", "err", "nil", "return", "CountriesServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Update_FullMethodName"], "doc_head": "func _CountriesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Update_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#47", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 819, "end_line": 859, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, req.(*UpdateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// CountriesService_ServiceDesc is the grpc.ServiceDesc for CountriesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CountriesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CountriesService\",\n\tHandlerType: (*CountriesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CountriesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CountriesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CountriesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CountriesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\n\nconst (\n\tDesignatorsService_Create_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Create\"\n\tDesignatorsService_Get_FullMethodName    = \"/aviation.airports.v0.DesignatorsService/Get\"\n\tDesignatorsService_Update_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Update\"\n\tDesignatorsService_Search_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Search\"\n)\n", "n_tokens": 338, "primary_symbol": "", "primary_kind": "", "primary_span": [819, 859], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "CountriesServiceServer", "Update", "UpdateCountryRequest", "interceptor", "info", "CountriesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "CountriesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Search", "Handler", "_CountriesService_Search_Handler", "Get", "_CountriesService_Get_Handler", "Create", "_CountriesService_Create_Handler", "_CountriesService_Update_Handler", "Streams", "StreamDesc", "Metadata", "proto", "const", "DesignatorsService_Create_FullMethodName", "DesignatorsService", "DesignatorsService_Get_FullMethodName", "DesignatorsService_Update_FullMethodName", "DesignatorsService_Search_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, req.(*UpdateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// CountriesService_ServiceDesc is the grpc.ServiceDesc for CountriesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CountriesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CountriesService\",\n\tHandlerType: (*CountriesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CountriesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CountriesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CountriesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CountriesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\nconst (\n\tDesignatorsService_Create_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Create\"\n\tDesignatorsService_Get_FullMethodName    = \"/aviation.airports.v0.DesignatorsService/Get\"\n\tDesignatorsServ"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#48", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 860, "end_line": 873, "text": "// DesignatorsServiceClient is the client API for DesignatorsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype DesignatorsServiceClient interface {\n\tCreate(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error)\n\tGet(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error)\n\tUpdate(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error)\n\tSearch(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error)\n}\n\ntype designatorsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n", "n_tokens": 180, "primary_symbol": "", "primary_kind": "", "primary_span": [860, 873], "def_symbols": [], "symbols": ["DesignatorsServiceClient", "the", "client", "API", "for", "DesignatorsService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Create", "context", "Context", "CreateDesignatorRequest", "opts", "CallOption", "CreateDesignatorResponse", "error", "Get", "GetDesignatorRequest", "GetDesignatorResponse", "Update", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Search", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "designatorsServiceClient", "struct", "ClientConnInterface"], "doc_head": "// DesignatorsServiceClient is the client API for DesignatorsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype DesignatorsServiceClient interface {\n\tCreate(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error)\n\tGet(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error)\n\tUpdate(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error)\n\tSearch(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error)\n}\ntype designatorsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#49", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 874, "end_line": 887, "text": "func NewDesignatorsServiceClient(cc grpc.ClientConnInterface) DesignatorsServiceClient {\n\treturn &designatorsServiceClient{cc}\n}\n\nfunc (c *designatorsServiceClient) Create(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 127, "primary_symbol": "NewDesignatorsServiceClient", "primary_kind": "function", "primary_span": [874, 887], "def_symbols": ["NewDesignatorsServiceClient", "Create"], "symbols": ["NewDesignatorsServiceClient", "Create", "func", "grpc", "ClientConnInterface", "DesignatorsServiceClient", "return", "designatorsServiceClient", "ctx", "context", "Context", "CreateDesignatorRequest", "opts", "CallOption", "CreateDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Create_FullMethodName", "nil"], "doc_head": "func NewDesignatorsServiceClient(cc grpc.ClientConnInterface) DesignatorsServiceClient {\n\treturn &designatorsServiceClient{cc}\n}\nfunc (c *designatorsServiceClient) Create(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#50", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 888, "end_line": 907, "text": "func (c *designatorsServiceClient) Get(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *designatorsServiceClient) Update(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 201, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [888, 907], "def_symbols": ["Get", "Update"], "symbols": ["Get", "Update", "func", "designatorsServiceClient", "ctx", "context", "Context", "GetDesignatorRequest", "opts", "grpc", "CallOption", "GetDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Get_FullMethodName", "nil", "return", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "DesignatorsService_Update_FullMethodName"], "doc_head": "func (c *designatorsServiceClient) Get(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *designatorsServiceClient) Update(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#51", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 908, "end_line": 917, "text": "func (c *designatorsServiceClient) Search(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchDesignatorsResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 100, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [908, 917], "def_symbols": ["Search"], "symbols": ["Search", "func", "designatorsServiceClient", "ctx", "context", "Context", "SearchDesignatorsRequest", "opts", "grpc", "CallOption", "SearchDesignatorsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Search_FullMethodName", "nil", "return"], "doc_head": "func (c *designatorsServiceClient) Search(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchDesignatorsResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#52", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 918, "end_line": 935, "text": "// DesignatorsServiceServer is the server API for DesignatorsService service.\n// All implementations must embed UnimplementedDesignatorsServiceServer\n// for forward compatibility.\ntype DesignatorsServiceServer interface {\n\tCreate(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error)\n\tGet(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error)\n\tUpdate(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error)\n\tSearch(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error)\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n\n// UnimplementedDesignatorsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedDesignatorsServiceServer struct{}\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [918, 935], "def_symbols": [], "symbols": ["DesignatorsServiceServer", "the", "server", "API", "for", "DesignatorsService", "service", "All", "implementations", "must", "embed", "UnimplementedDesignatorsServiceServer", "forward", "compatibility", "type", "interface", "Create", "context", "Context", "CreateDesignatorRequest", "CreateDesignatorResponse", "error", "Get", "GetDesignatorRequest", "GetDesignatorResponse", "Update", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Search", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "mustEmbedUnimplementedDesignatorsServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// DesignatorsServiceServer is the server API for DesignatorsService service.\n// All implementations must embed UnimplementedDesignatorsServiceServer\n// for forward compatibility.\ntype DesignatorsServiceServer interface {\n\tCreate(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error)\n\tGet(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error)\n\tUpdate(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error)\n\tSearch(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error)\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n// UnimplementedDesignatorsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedDesignatorsServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#53", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 936, "end_line": 948, "text": "func (UnimplementedDesignatorsServiceServer) Create(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Get(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Update(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Search(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) mustEmbedUnimplementedDesignatorsServiceServer() {}", "n_tokens": 199, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [936, 948], "def_symbols": ["Create", "Get", "Update", "Search", "mustEmbedUnimplementedDesignatorsServiceServer"], "symbols": ["Create", "Get", "Update", "Search", "mustEmbedUnimplementedDesignatorsServiceServer", "func", "UnimplementedDesignatorsServiceServer", "context", "Context", "CreateDesignatorRequest", "CreateDesignatorResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetDesignatorRequest", "GetDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "SearchDesignatorsRequest", "SearchDesignatorsResponse"], "doc_head": "func (UnimplementedDesignatorsServiceServer) Create(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Get(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Update(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Search(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) mustEmbedUnimplementedDesignatorsServiceServer() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#54", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 949, "end_line": 958, "text": "func (UnimplementedDesignatorsServiceServer) testEmbeddedByValue()                            {}\n\n// UnsafeDesignatorsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DesignatorsServiceServer will\n// result in compilation errors.\ntype UnsafeDesignatorsServiceServer interface {\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n\nfunc RegisterDesignatorsServiceServer(s grpc.ServiceRegistrar, srv DesignatorsServiceServer) {", "n_tokens": 97, "primary_symbol": "testEmbeddedByValue", "primary_kind": "function", "primary_span": [949, 958], "def_symbols": ["testEmbeddedByValue", "RegisterDesignatorsServiceServer"], "symbols": ["testEmbeddedByValue", "RegisterDesignatorsServiceServer", "func", "UnimplementedDesignatorsServiceServer", "UnsafeDesignatorsServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "DesignatorsServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedDesignatorsServiceServer", "grpc", "ServiceRegistrar", "srv"], "doc_head": "func (UnimplementedDesignatorsServiceServer) testEmbeddedByValue()                            {}\n// UnsafeDesignatorsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DesignatorsServiceServer will\n// result in compilation errors.\ntype UnsafeDesignatorsServiceServer interface {\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\nfunc RegisterDesignatorsServiceServer(s grpc.ServiceRegistrar, srv DesignatorsServiceServer) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#55", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 55, "start_line": 959, "end_line": 968, "text": "\t// If the following call pancis, it indicates UnimplementedDesignatorsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&DesignatorsService_ServiceDesc, srv)\n}\n", "n_tokens": 108, "primary_symbol": "", "primary_kind": "", "primary_span": [959, 968], "def_symbols": [], "symbols": ["the", "following", "call", "pancis", "indicates", "UnimplementedDesignatorsServiceServer", "was", "embedded", "pointer", "and", "nil", "This", "will", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "this", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "srv", "interface", "testEmbeddedByValue", "RegisterService", "DesignatorsService_ServiceDesc"], "doc_head": "\t// If the following call pancis, it indicates UnimplementedDesignatorsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&DesignatorsService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#56", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 56, "start_line": 969, "end_line": 986, "text": "func _DesignatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, req.(*CreateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_DesignatorsService_Create_Handler", "primary_kind": "function", "primary_span": [969, 986], "def_symbols": ["_DesignatorsService_Create_Handler"], "symbols": ["_DesignatorsService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Create_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, req.(*CreateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#57", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 57, "start_line": 987, "end_line": 1004, "text": "func _DesignatorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, req.(*GetDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_DesignatorsService_Get_Handler", "primary_kind": "function", "primary_span": [987, 1004], "def_symbols": ["_DesignatorsService_Get_Handler"], "symbols": ["_DesignatorsService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Get_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, req.(*GetDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#58", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 58, "start_line": 1005, "end_line": 1022, "text": "func _DesignatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, req.(*UpdateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 160, "primary_symbol": "_DesignatorsService_Update_Handler", "primary_kind": "function", "primary_span": [1005, 1022], "def_symbols": ["_DesignatorsService_Update_Handler"], "symbols": ["_DesignatorsService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Update_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, req.(*UpdateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#59", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 59, "start_line": 1023, "end_line": 1034, "text": "func _DesignatorsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchDesignatorsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Search_FullMethodName,\n\t}", "n_tokens": 111, "primary_symbol": "_DesignatorsService_Search_Handler", "primary_kind": "function", "primary_span": [1023, 1034], "def_symbols": ["_DesignatorsService_Search_Handler"], "symbols": ["_DesignatorsService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchDesignatorsRequest", "err", "nil", "return", "DesignatorsServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Search_FullMethodName"], "doc_head": "func _DesignatorsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchDesignatorsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Search_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go#60", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports_grpc.pb.go", "rel_path": "pkg/grpc/airports/v0/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 60, "start_line": 1035, "end_line": 1068, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, req.(*SearchDesignatorsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// DesignatorsService_ServiceDesc is the grpc.ServiceDesc for DesignatorsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar DesignatorsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.DesignatorsService\",\n\tHandlerType: (*DesignatorsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _DesignatorsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _DesignatorsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _DesignatorsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _DesignatorsService_Search_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\n", "n_tokens": 258, "primary_symbol": "", "primary_kind": "", "primary_span": [1035, 1068], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "DesignatorsServiceServer", "Search", "SearchDesignatorsRequest", "interceptor", "info", "DesignatorsService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "DesignatorsService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Create", "Handler", "_DesignatorsService_Create_Handler", "Get", "_DesignatorsService_Get_Handler", "Update", "_DesignatorsService_Update_Handler", "_DesignatorsService_Search_Handler", "Streams", "StreamDesc", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, req.(*SearchDesignatorsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// DesignatorsService_ServiceDesc is the grpc.ServiceDesc for DesignatorsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar DesignatorsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.DesignatorsService\",\n\tHandlerType: (*DesignatorsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _DesignatorsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _DesignatorsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _DesignatorsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _DesignatorsService_Search_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 24, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.36.6\n// \tprotoc        v3.21.12\n// source: airports.proto\n\npackage v0\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n\tunsafe \"unsafe\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 183, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 24], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "airports", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "timestamppb", "types", "known", "sync", "unsafe", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.36.6\n// \tprotoc        v3.21.12\n// source: airports.proto\npackage v0\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n\tunsafe \"unsafe\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 25, "end_line": 61, "text": "type Include int32\n\nconst (\n\tInclude_UNKNOWN       Include = 0\n\tInclude_TERMINAL_MAPS Include = 1\n)\n\n// Enum value maps for Include.\nvar (\n\tInclude_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"TERMINAL_MAPS\",\n\t}\n\tInclude_value = map[string]int32{\n\t\t\"UNKNOWN\":       0,\n\t\t\"TERMINAL_MAPS\": 1,\n\t}\n)\n\nfunc (x Include) Enum() *Include {\n\tp := new(Include)\n\t*p = x\n\treturn p\n}\n\nfunc (x Include) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (Include) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[0].Descriptor()\n}\n\nfunc (Include) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[0]\n}\n", "n_tokens": 201, "primary_symbol": "Enum", "primary_kind": "function", "primary_span": [44, 61], "def_symbols": ["Enum", "String", "Descriptor", "Type"], "symbols": ["Enum", "String", "Descriptor", "Type", "type", "Include", "int32", "const", "Include_UNKNOWN", "Include_TERMINAL_MAPS", "value", "maps", "for", "var", "Include_name", "map", "string", "UNKNOWN", "TERMINAL_MAPS", "Include_value", "func", "new", "return", "protoimpl", "EnumStringOf", "protoreflect", "EnumNumber", "EnumDescriptor", "file_airports_proto_enumTypes", "EnumType"], "doc_head": "type Include int32\nconst (\n\tInclude_UNKNOWN       Include = 0\n\tInclude_TERMINAL_MAPS Include = 1\n)\n// Enum value maps for Include.\nvar (\n\tInclude_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"TERMINAL_MAPS\",\n\t}\n\tInclude_value = map[string]int32{\n\t\t\"UNKNOWN\":       0,\n\t\t\"TERMINAL_MAPS\": 1,\n\t}\n)\nfunc (x Include) Enum() *Include {\n\tp := new(Include)\n\t*p = x\n\treturn p\n}\nfunc (x Include) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\nfunc (Include) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[0].Descriptor()\n}\nfunc (Include) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[0]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 62, "end_line": 89, "text": "func (x Include) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use Include.Descriptor instead.\nfunc (Include) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\n\ntype UploadImageRequest_ImageType int32\n\nconst (\n\tUploadImageRequest_UNKNOWN  UploadImageRequest_ImageType = 0\n\tUploadImageRequest_OVERVIEW UploadImageRequest_ImageType = 1\n)\n\n// Enum value maps for UploadImageRequest_ImageType.\nvar (\n\tUploadImageRequest_ImageType_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"OVERVIEW\",\n\t}\n\tUploadImageRequest_ImageType_value = map[string]int32{\n\t\t\"UNKNOWN\":  0,\n\t\t\"OVERVIEW\": 1,\n\t}\n)\n", "n_tokens": 180, "primary_symbol": "Number", "primary_kind": "function", "primary_span": [62, 89], "def_symbols": ["Number", "EnumDescriptor"], "symbols": ["Number", "EnumDescriptor", "func", "Include", "protoreflect", "EnumNumber", "return", "Deprecated", "Use", "Descriptor", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "type", "UploadImageRequest_ImageType", "int32", "const", "UploadImageRequest_UNKNOWN", "UploadImageRequest_OVERVIEW", "Enum", "value", "maps", "for", "var", "UploadImageRequest_ImageType_name", "map", "string", "UNKNOWN", "OVERVIEW", "UploadImageRequest_ImageType_value"], "doc_head": "func (x Include) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n// Deprecated: Use Include.Descriptor instead.\nfunc (Include) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\ntype UploadImageRequest_ImageType int32\nconst (\n\tUploadImageRequest_UNKNOWN  UploadImageRequest_ImageType = 0\n\tUploadImageRequest_OVERVIEW UploadImageRequest_ImageType = 1\n)\n// Enum value maps for UploadImageRequest_ImageType.\nvar (\n\tUploadImageRequest_ImageType_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"OVERVIEW\",\n\t}\n\tUploadImageRequest_ImageType_value = map[string]int32{\n\t\t\"UNKNOWN\":  0,\n\t\t\"OVERVIEW\": 1,\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 90, "end_line": 116, "text": "func (x UploadImageRequest_ImageType) Enum() *UploadImageRequest_ImageType {\n\tp := new(UploadImageRequest_ImageType)\n\t*p = x\n\treturn p\n}\n\nfunc (x UploadImageRequest_ImageType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (UploadImageRequest_ImageType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[1].Descriptor()\n}\n\nfunc (UploadImageRequest_ImageType) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[1]\n}\n\nfunc (x UploadImageRequest_ImageType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use UploadImageRequest_ImageType.Descriptor instead.\nfunc (UploadImageRequest_ImageType) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}\n", "n_tokens": 202, "primary_symbol": "Enum", "primary_kind": "function", "primary_span": [90, 116], "def_symbols": ["Enum", "String", "Descriptor", "Type", "Number", "EnumDescriptor"], "symbols": ["Enum", "String", "Descriptor", "Type", "Number", "EnumDescriptor", "func", "UploadImageRequest_ImageType", "new", "return", "string", "protoimpl", "EnumStringOf", "protoreflect", "EnumNumber", "file_airports_proto_enumTypes", "EnumType", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x UploadImageRequest_ImageType) Enum() *UploadImageRequest_ImageType {\n\tp := new(UploadImageRequest_ImageType)\n\t*p = x\n\treturn p\n}\nfunc (x UploadImageRequest_ImageType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\nfunc (UploadImageRequest_ImageType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[1].Descriptor()\n}\nfunc (UploadImageRequest_ImageType) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[1]\n}\nfunc (x UploadImageRequest_ImageType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n// Deprecated: Use UploadImageRequest_ImageType.Descriptor instead.\nfunc (UploadImageRequest_ImageType) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 117, "end_line": 139, "text": "type UpdateAirportRequest struct {\n\tstate           protoimpl.MessageState `protogen:\"open.v1\"`\n\tId              string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tShortName       map[string]string      `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCityId          int64                  `protobuf:\"varint,7,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tLatitude        float32                `protobuf:\"fixed32,9,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude       float32                `protobuf:\"fixed32,10,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation       int32                  `protobuf:\"varint,11,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumberOfRunways int32                  `protobuf:\"varint,12,opt,name=numberOfRunways,proto3\" json:\"numberOfRunways,omitempty\"`\n\tWebsiteUrl      *string                `protobuf:\"bytes,13,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl    map[string]string      `protobuf:\"bytes,14,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl     *string                `protobuf:\"bytes,15,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl      *string                `protobuf:\"bytes,16,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tFaa             *string                `protobuf:\"bytes,17,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n\tunknownFields   protoimpl.UnknownFields\n\tsizeCache       protoimpl.SizeCache\n}\n", "n_tokens": 580, "primary_symbol": "", "primary_kind": "", "primary_span": [117, 139], "def_symbols": [], "symbols": ["type", "UpdateAirportRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "CityId", "cityId", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumberOfRunways", "numberOfRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Faa", "faa", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type UpdateAirportRequest struct {\n\tstate           protoimpl.MessageState `protogen:\"open.v1\"`\n\tId              string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tShortName       map[string]string      `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCityId          int64                  `protobuf:\"varint,7,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name="}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 140, "end_line": 164, "text": "func (x *UpdateAirportRequest) Reset() {\n\t*x = UpdateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirportRequest) ProtoMessage() {}\n\nfunc (x *UpdateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [140, 164], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAirportRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAirportRequest) Reset() {\n\t*x = UpdateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirportRequest) ProtoMessage() {}\nfunc (x *UpdateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 165, "end_line": 197, "text": "// Deprecated: Use UpdateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *UpdateAirportRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n", "n_tokens": 179, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [166, 197], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "Deprecated", "Use", "UpdateAirportRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification"], "doc_head": "// Deprecated: Use UpdateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *UpdateAirportRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 198, "end_line": 239, "text": "func (x *UpdateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n", "n_tokens": 191, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [198, 239], "def_symbols": ["GetName", "GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude"], "symbols": ["GetName", "GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude", "func", "UpdateAirportRequest", "map", "string", "nil", "return", "Name", "ShortName", "int64", "CityId", "Description", "float32", "Latitude", "Longitude"], "doc_head": "func (x *UpdateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 240, "end_line": 274, "text": "func (x *UpdateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 182, "primary_symbol": "GetElevation", "primary_kind": "function", "primary_span": [240, 274], "def_symbols": ["GetElevation", "GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl"], "symbols": ["GetElevation", "GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "func", "UpdateAirportRequest", "int32", "nil", "return", "Elevation", "NumberOfRunways", "string", "WebsiteUrl", "map", "WikipediaUrl", "FacebookUrl"], "doc_head": "func (x *UpdateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 275, "end_line": 302, "text": "func (x *UpdateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n\ntype UpdateAirportResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UpdateAirportResponse) Reset() {\n\t*x = UpdateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 189, "primary_symbol": "GetTwitterUrl", "primary_kind": "function", "primary_span": [275, 302], "def_symbols": ["GetTwitterUrl", "GetFaa", "Reset"], "symbols": ["GetTwitterUrl", "GetFaa", "Reset", "func", "UpdateAirportRequest", "string", "nil", "TwitterUrl", "return", "Faa", "type", "UpdateAirportResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *UpdateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\ntype UpdateAirportResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UpdateAirportResponse) Reset() {\n\t*x = UpdateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 303, "end_line": 332, "text": "func (x *UpdateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirportResponse) ProtoMessage() {}\n\nfunc (x *UpdateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *UpdateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 190, "primary_symbol": "String", "primary_kind": "function", "primary_span": [303, 332], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport", "func", "UpdateAirportResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (x *UpdateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirportResponse) ProtoMessage() {}\nfunc (x *UpdateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *UpdateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 333, "end_line": 354, "text": "type CreateAirportRequest struct {\n\tstate           protoimpl.MessageState `protogen:\"open.v1\"`\n\tIata            *string                `protobuf:\"bytes,1,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,2,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,3,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,4,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tShortName       map[string]string      `protobuf:\"bytes,5,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCityId          int64                  `protobuf:\"varint,6,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,7,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tLatitude        float32                `protobuf:\"fixed32,8,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude       float32                `protobuf:\"fixed32,9,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation       int32                  `protobuf:\"varint,10,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumberOfRunways int32                  `protobuf:\"varint,11,opt,name=numberOfRunways,proto3\" json:\"numberOfRunways,omitempty\"`\n\tWebsiteUrl      *string                `protobuf:\"bytes,12,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl    map[string]string      `protobuf:\"bytes,13,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl     *string                `protobuf:\"bytes,14,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl      *string                `protobuf:\"bytes,15,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tFaa             *string                `protobuf:\"bytes,16,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n\tunknownFields   protoimpl.UnknownFields\n\tsizeCache       protoimpl.SizeCache\n}\n", "n_tokens": 559, "primary_symbol": "", "primary_kind": "", "primary_span": [333, 354], "def_symbols": [], "symbols": ["type", "CreateAirportRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Iata", "string", "protobuf", "bytes", "opt", "name", "iata", "proto3", "oneof", "json", "omitempty", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "CityId", "cityId", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumberOfRunways", "numberOfRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Faa", "faa", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type CreateAirportRequest struct {\n\tstate           protoimpl.MessageState `protogen:\"open.v1\"`\n\tIata            *string                `protobuf:\"bytes,1,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,2,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,3,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,4,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tShortName       map[string]string      `protobuf:\"bytes,5,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCityId          int64                  `protobuf:\"varint,6,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,7,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tLatitude        float32                `protobuf:\"fixed32,8,opt,name=latitude,proto3\" json:"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 355, "end_line": 379, "text": "func (x *CreateAirportRequest) Reset() {\n\t*x = CreateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirportRequest) ProtoMessage() {}\n\nfunc (x *CreateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [355, 379], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateAirportRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateAirportRequest) Reset() {\n\t*x = CreateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirportRequest) ProtoMessage() {}\nfunc (x *CreateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 380, "end_line": 412, "text": "// Deprecated: Use CreateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *CreateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 181, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [381, 412], "def_symbols": ["Descriptor", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "CreateAirportRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "map", "Name"], "doc_head": "// Deprecated: Use CreateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{2}\n}\nfunc (x *CreateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 413, "end_line": 454, "text": "func (x *CreateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n", "n_tokens": 194, "primary_symbol": "GetShortName", "primary_kind": "function", "primary_span": [413, 454], "def_symbols": ["GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation"], "symbols": ["GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "func", "CreateAirportRequest", "map", "string", "nil", "return", "ShortName", "int64", "CityId", "Description", "float32", "Latitude", "Longitude", "int32", "Elevation"], "doc_head": "func (x *CreateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\nfunc (x *CreateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *CreateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 455, "end_line": 489, "text": "func (x *CreateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 188, "primary_symbol": "GetNumberOfRunways", "primary_kind": "function", "primary_span": [455, 489], "def_symbols": ["GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl"], "symbols": ["GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "func", "CreateAirportRequest", "int32", "nil", "return", "NumberOfRunways", "string", "WebsiteUrl", "map", "WikipediaUrl", "FacebookUrl", "TwitterUrl"], "doc_head": "func (x *CreateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *CreateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 490, "end_line": 516, "text": "func (x *CreateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n\ntype CreateAirportResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateAirportResponse) Reset() {\n\t*x = CreateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirportResponse) ProtoMessage() {}\n", "n_tokens": 182, "primary_symbol": "GetFaa", "primary_kind": "function", "primary_span": [490, 516], "def_symbols": ["GetFaa", "Reset", "String", "ProtoMessage"], "symbols": ["GetFaa", "Reset", "String", "ProtoMessage", "func", "CreateAirportRequest", "string", "nil", "Faa", "return", "type", "CreateAirportResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *CreateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\ntype CreateAirportResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateAirportResponse) Reset() {\n\t*x = CreateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirportResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#18", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 517, "end_line": 540, "text": "func (x *CreateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *CreateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [517, 540], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["ProtoReflect", "Descriptor", "GetAirport", "func", "CreateAirportResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (x *CreateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{3}\n}\nfunc (x *CreateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#19", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 541, "end_line": 561, "text": "type AirportDetailsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *AirportDetailsRequest) Reset() {\n\t*x = AirportDetailsRequest{}\n\tmi := &file_airports_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirportDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirportDetailsRequest) ProtoMessage() {}\n", "n_tokens": 179, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [549, 561], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirportDetailsRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Include", "varint", "rep", "packed", "include", "enum", "aviation", "airports", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type AirportDetailsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *AirportDetailsRequest) Reset() {\n\t*x = AirportDetailsRequest{}\n\tmi := &file_airports_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirportDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirportDetailsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#20", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 562, "end_line": 592, "text": "func (x *AirportDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirportDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *AirportDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *AirportDetailsRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [562, 592], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetInclude"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetInclude", "func", "AirportDetailsRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Include"], "doc_head": "func (x *AirportDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirportDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{4}\n}\nfunc (x *AirportDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *AirportDetailsRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#21", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 593, "end_line": 612, "text": "type AirportDetailsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *AirportDetailsResponse) Reset() {\n\t*x = AirportDetailsResponse{}\n\tmi := &file_airports_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirportDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirportDetailsResponse) ProtoMessage() {}\n", "n_tokens": 145, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [600, 612], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirportDetailsResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AirportDetailsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *AirportDetailsResponse) Reset() {\n\t*x = AirportDetailsResponse{}\n\tmi := &file_airports_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirportDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirportDetailsResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#22", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 613, "end_line": 636, "text": "func (x *AirportDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirportDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *AirportDetailsResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [613, 636], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["ProtoReflect", "Descriptor", "GetAirport", "func", "AirportDetailsResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (x *AirportDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirportDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{5}\n}\nfunc (x *AirportDetailsResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#23", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 637, "end_line": 657, "text": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tIds           []string               `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airports_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetRequest) ProtoMessage() {}\n", "n_tokens": 183, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [645, 657], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Ids", "string", "protobuf", "bytes", "rep", "name", "ids", "proto3", "json", "omitempty", "Include", "varint", "packed", "include", "enum", "aviation", "airports", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tIds           []string               `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airports_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#24", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 658, "end_line": 688, "text": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{6}\n}\n\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\n\nfunc (x *BatchGetRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [658, 688], "def_symbols": ["ProtoReflect", "Descriptor", "GetIds", "GetInclude"], "symbols": ["ProtoReflect", "Descriptor", "GetIds", "GetInclude", "func", "BatchGetRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Ids", "Include"], "doc_head": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{6}\n}\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\nfunc (x *BatchGetRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#25", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 689, "end_line": 708, "text": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirports      []*Airport             `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airports_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetResponse) ProtoMessage() {}\n", "n_tokens": 148, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [696, 708], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airports", "Airport", "protobuf", "bytes", "rep", "name", "airports", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirports      []*Airport             `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airports_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#26", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 709, "end_line": 732, "text": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{7}\n}\n\nfunc (x *BatchGetResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}\n", "n_tokens": 159, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [709, 732], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirports"], "symbols": ["ProtoReflect", "Descriptor", "GetAirports", "func", "BatchGetResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport", "Airports"], "doc_head": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{7}\n}\nfunc (x *BatchGetResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#27", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 733, "end_line": 752, "text": "type AirportByCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *AirportByCityRequest) Reset() {\n\t*x = AirportByCityRequest{}\n\tmi := &file_airports_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirportByCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirportByCityRequest) ProtoMessage() {}\n", "n_tokens": 148, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [740, 752], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirportByCityRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AirportByCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *AirportByCityRequest) Reset() {\n\t*x = AirportByCityRequest{}\n\tmi := &file_airports_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirportByCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirportByCityRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#28", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 753, "end_line": 776, "text": "func (x *AirportByCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirportByCityRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportByCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *AirportByCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n", "n_tokens": 161, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [753, 776], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "AirportByCityRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "int64"], "doc_head": "func (x *AirportByCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirportByCityRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportByCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{8}\n}\nfunc (x *AirportByCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#29", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 777, "end_line": 805, "text": "type Airport struct {\n\tstate           protoimpl.MessageState `protogen:\"open.v1\"`\n\tId              string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tShortName       map[string]string      `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCity            *Airport_City          `protobuf:\"bytes,7,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tLatitude        float32                `protobuf:\"fixed32,9,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude       float32                `protobuf:\"fixed32,10,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation       int32                  `protobuf:\"varint,11,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumberOfRunways int32                  `protobuf:\"varint,12,opt,name=numberOfRunways,proto3\" json:\"numberOfRunways,omitempty\"`\n\tWebsiteUrl      *string                `protobuf:\"bytes,13,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl    map[string]string      `protobuf:\"bytes,14,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tFacebookUrl     *string                `protobuf:\"bytes,15,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl      *string                `protobuf:\"bytes,16,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tImages          map[string]string      `protobuf:\"bytes,17,rep,name=images,proto3\" json:\"images,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tTerminalMaps    []*Airport_TerminalMap `protobuf:\"bytes,18,rep,name=terminalMaps,proto3\" json:\"terminalMaps,omitempty\"`\n\tCreatedAt       *timestamppb.Timestamp `protobuf:\"bytes,19,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt       *timestamppb.Timestamp `protobuf:\"bytes,20,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator      *string                `protobuf:\"bytes,21,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine        bool                   `protobuf:\"varint,22,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n\tFaa             *string                `protobuf:\"bytes,23,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n\tunknownFields   protoimpl.UnknownFields\n\tsizeCache       protoimpl.SizeCache\n}\n", "n_tokens": 765, "primary_symbol": "", "primary_kind": "", "primary_span": [777, 805], "def_symbols": [], "symbols": ["type", "Airport", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "City", "Airport_City", "city", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumberOfRunways", "numberOfRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Images", "images", "TerminalMaps", "Airport_TerminalMap", "terminalMaps", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "Designator", "designator", "Pristine", "bool", "pristine", "Faa", "faa", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Airport struct {\n\tstate           protoimpl.MessageState `protogen:\"open.v1\"`\n\tId              string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tShortName       map[string]string      `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tCity            *Airport_City          `protobuf:\"bytes,7,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tLatitude "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#30", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 806, "end_line": 835, "text": "func (x *Airport) Reset() {\n\t*x = Airport{}\n\tmi := &file_airports_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport) ProtoMessage() {}\n\nfunc (x *Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Airport.ProtoReflect.Descriptor instead.\nfunc (*Airport) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [806, 835], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Airport", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *Airport) Reset() {\n\t*x = Airport{}\n\tmi := &file_airports_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport) ProtoMessage() {}\nfunc (x *Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Airport.ProtoReflect.Descriptor instead.\nfunc (*Airport) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#31", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 836, "end_line": 877, "text": "func (x *Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n", "n_tokens": 185, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [836, 877], "def_symbols": ["GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "GetShortName"], "symbols": ["GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "GetShortName", "func", "Airport", "string", "nil", "return", "Iata", "Icao", "int64", "Classification", "map", "Name", "ShortName"], "doc_head": "func (x *Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#32", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 878, "end_line": 919, "text": "func (x *Airport) GetCity() *Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\n", "n_tokens": 184, "primary_symbol": "GetCity", "primary_kind": "function", "primary_span": [878, 919], "def_symbols": ["GetCity", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "GetNumberOfRunways"], "symbols": ["GetCity", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "GetNumberOfRunways", "func", "Airport", "Airport_City", "nil", "return", "City", "map", "string", "Description", "float32", "Latitude", "Longitude", "int32", "Elevation", "NumberOfRunways"], "doc_head": "func (x *Airport) GetCity() *Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#33", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 920, "end_line": 961, "text": "func (x *Airport) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetImages() map[string]string {\n\tif x != nil {\n\t\treturn x.Images\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetTerminalMaps() []*Airport_TerminalMap {\n\tif x != nil {\n\t\treturn x.TerminalMaps\n\t}\n\treturn nil\n}\n", "n_tokens": 208, "primary_symbol": "GetWebsiteUrl", "primary_kind": "function", "primary_span": [920, 961], "def_symbols": ["GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "GetImages", "GetTerminalMaps"], "symbols": ["GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "GetImages", "GetTerminalMaps", "func", "Airport", "string", "nil", "WebsiteUrl", "return", "map", "WikipediaUrl", "FacebookUrl", "TwitterUrl", "Images", "Airport_TerminalMap", "TerminalMaps"], "doc_head": "func (x *Airport) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetImages() map[string]string {\n\tif x != nil {\n\t\treturn x.Images\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetTerminalMaps() []*Airport_TerminalMap {\n\tif x != nil {\n\t\treturn x.TerminalMaps\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#34", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 962, "end_line": 996, "text": "func (x *Airport) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\n\nfunc (x *Airport) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n", "n_tokens": 167, "primary_symbol": "GetCreatedAt", "primary_kind": "function", "primary_span": [962, 996], "def_symbols": ["GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine", "GetFaa"], "symbols": ["GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine", "GetFaa", "func", "Airport", "timestamppb", "Timestamp", "nil", "return", "CreatedAt", "UpdatedAt", "string", "Designator", "bool", "Pristine", "false", "Faa"], "doc_head": "func (x *Airport) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\nfunc (x *Airport) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#35", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 997, "end_line": 1020, "text": "type UploadImageRequest struct {\n\tstate protoimpl.MessageState `protogen:\"open.v1\"`\n\t// Types that are valid to be assigned to Data:\n\t//\n\t//\t*UploadImageRequest_Metadata_\n\t//\t*UploadImageRequest_Chunk\n\tData          isUploadImageRequest_Data `protobuf_oneof:\"data\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UploadImageRequest) Reset() {\n\t*x = UploadImageRequest{}\n\tmi := &file_airports_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageRequest) ProtoMessage() {}\n", "n_tokens": 166, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1008, 1020], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UploadImageRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Types", "that", "are", "valid", "assigned", "Data", "UploadImageRequest_Metadata_", "UploadImageRequest_Chunk", "isUploadImageRequest_Data", "protobuf_oneof", "data", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UploadImageRequest struct {\n\tstate protoimpl.MessageState `protogen:\"open.v1\"`\n\t// Types that are valid to be assigned to Data:\n\t//\n\t//\t*UploadImageRequest_Metadata_\n\t//\t*UploadImageRequest_Chunk\n\tData          isUploadImageRequest_Data `protobuf_oneof:\"data\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UploadImageRequest) Reset() {\n\t*x = UploadImageRequest{}\n\tmi := &file_airports_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#36", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 1021, "end_line": 1044, "text": "func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10}\n}\n\nfunc (x *UploadImageRequest) GetData() isUploadImageRequest_Data {\n\tif x != nil {\n\t\treturn x.Data\n\t}\n\treturn nil\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1021, 1044], "def_symbols": ["ProtoReflect", "Descriptor", "GetData"], "symbols": ["ProtoReflect", "Descriptor", "GetData", "func", "UploadImageRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "isUploadImageRequest_Data", "Data"], "doc_head": "func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10}\n}\nfunc (x *UploadImageRequest) GetData() isUploadImageRequest_Data {\n\tif x != nil {\n\t\treturn x.Data\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#37", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 1045, "end_line": 1076, "text": "func (x *UploadImageRequest) GetMetadata() *UploadImageRequest_Metadata {\n\tif x != nil {\n\t\tif x, ok := x.Data.(*UploadImageRequest_Metadata_); ok {\n\t\t\treturn x.Metadata\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (x *UploadImageRequest) GetChunk() []byte {\n\tif x != nil {\n\t\tif x, ok := x.Data.(*UploadImageRequest_Chunk); ok {\n\t\t\treturn x.Chunk\n\t\t}\n\t}\n\treturn nil\n}\n\ntype isUploadImageRequest_Data interface {\n\tisUploadImageRequest_Data()\n}\n\ntype UploadImageRequest_Metadata_ struct {\n\tMetadata *UploadImageRequest_Metadata `protobuf:\"bytes,1,opt,name=metadata,proto3,oneof\"`\n}\n\ntype UploadImageRequest_Chunk struct {\n\tChunk []byte `protobuf:\"bytes,2,opt,name=chunk,proto3,oneof\"`\n}\n\nfunc (*UploadImageRequest_Metadata_) isUploadImageRequest_Data() {}\n", "n_tokens": 194, "primary_symbol": "GetMetadata", "primary_kind": "function", "primary_span": [1045, 1076], "def_symbols": ["GetMetadata", "GetChunk", "isUploadImageRequest_Data"], "symbols": ["GetMetadata", "GetChunk", "isUploadImageRequest_Data", "func", "UploadImageRequest", "UploadImageRequest_Metadata", "nil", "Data", "UploadImageRequest_Metadata_", "return", "Metadata", "byte", "UploadImageRequest_Chunk", "Chunk", "type", "interface", "struct", "protobuf", "bytes", "opt", "name", "metadata", "proto3", "oneof", "chunk"], "doc_head": "func (x *UploadImageRequest) GetMetadata() *UploadImageRequest_Metadata {\n\tif x != nil {\n\t\tif x, ok := x.Data.(*UploadImageRequest_Metadata_); ok {\n\t\t\treturn x.Metadata\n\t\t}\n\t}\n\treturn nil\n}\nfunc (x *UploadImageRequest) GetChunk() []byte {\n\tif x != nil {\n\t\tif x, ok := x.Data.(*UploadImageRequest_Chunk); ok {\n\t\t\treturn x.Chunk\n\t\t}\n\t}\n\treturn nil\n}\ntype isUploadImageRequest_Data interface {\n\tisUploadImageRequest_Data()\n}\ntype UploadImageRequest_Metadata_ struct {\n\tMetadata *UploadImageRequest_Metadata `protobuf:\"bytes,1,opt,name=metadata,proto3,oneof\"`\n}\ntype UploadImageRequest_Chunk struct {\n\tChunk []byte `protobuf:\"bytes,2,opt,name=chunk,proto3,oneof\"`\n}\nfunc (*UploadImageRequest_Metadata_) isUploadImageRequest_Data() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#38", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 1077, "end_line": 1088, "text": "func (*UploadImageRequest_Chunk) isUploadImageRequest_Data() {}\n\ntype SearchAirportsRequest struct {\n\tstate                    protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ                        string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit                    uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor                   *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tIncludeWithoutDesignator bool                   `protobuf:\"varint,4,opt,name=includeWithoutDesignator,proto3\" json:\"includeWithoutDesignator,omitempty\"`\n\tunknownFields            protoimpl.UnknownFields\n\tsizeCache                protoimpl.SizeCache\n}\n", "n_tokens": 159, "primary_symbol": "isUploadImageRequest_Data", "primary_kind": "function", "primary_span": [1077, 1088], "def_symbols": ["isUploadImageRequest_Data"], "symbols": ["isUploadImageRequest_Data", "func", "UploadImageRequest_Chunk", "type", "SearchAirportsRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "IncludeWithoutDesignator", "bool", "includeWithoutDesignator", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (*UploadImageRequest_Chunk) isUploadImageRequest_Data() {}\ntype SearchAirportsRequest struct {\n\tstate                    protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ                        string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit                    uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor                   *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tIncludeWithoutDesignator bool                   `protobuf:\"varint,4,opt,name=includeWithoutDesignator,proto3\" json:\"includeWithoutDesignator,omitempty\"`\n\tunknownFields            protoimpl.UnknownFields\n\tsizeCache                protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#39", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 1089, "end_line": 1113, "text": "func (x *SearchAirportsRequest) Reset() {\n\t*x = SearchAirportsRequest{}\n\tmi := &file_airports_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchAirportsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirportsRequest) ProtoMessage() {}\n\nfunc (x *SearchAirportsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1089, 1113], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchAirportsRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchAirportsRequest) Reset() {\n\t*x = SearchAirportsRequest{}\n\tmi := &file_airports_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchAirportsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirportsRequest) ProtoMessage() {}\nfunc (x *SearchAirportsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#40", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 1114, "end_line": 1146, "text": "// Deprecated: Use SearchAirportsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{11}\n}\n\nfunc (x *SearchAirportsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n\nfunc (x *SearchAirportsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsRequest) GetIncludeWithoutDesignator() bool {\n\tif x != nil {\n\t\treturn x.IncludeWithoutDesignator\n\t}\n\treturn false\n}\n", "n_tokens": 180, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1115, 1146], "def_symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor", "GetIncludeWithoutDesignator"], "symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor", "GetIncludeWithoutDesignator", "Deprecated", "Use", "SearchAirportsRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "uint32", "Limit", "Cursor", "bool", "IncludeWithoutDesignator", "false"], "doc_head": "// Deprecated: Use SearchAirportsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{11}\n}\nfunc (x *SearchAirportsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\nfunc (x *SearchAirportsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsRequest) GetIncludeWithoutDesignator() bool {\n\tif x != nil {\n\t\treturn x.IncludeWithoutDesignator\n\t}\n\treturn false\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#41", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 1147, "end_line": 1163, "text": "type SearchAirportsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Airport             `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,4,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchAirportsResponse) Reset() {\n\t*x = SearchAirportsResponse{}\n\tmi := &file_airports_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1157, 1163], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "SearchAirportsResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Result", "Airport", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "string", "opt", "next", "oneof", "Previous", "previous", "TotalCount", "uint32", "varint", "totalCount", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type SearchAirportsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Airport             `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,4,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchAirportsResponse) Reset() {\n\t*x = SearchAirportsResponse{}\n\tmi := &file_airports_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#42", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 1164, "end_line": 1193, "text": "func (x *SearchAirportsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirportsResponse) ProtoMessage() {}\n\nfunc (x *SearchAirportsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchAirportsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{12}\n}\n\nfunc (x *SearchAirportsResponse) GetResult() []*Airport {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 194, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1164, 1193], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchAirportsResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport", "Result"], "doc_head": "func (x *SearchAirportsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirportsResponse) ProtoMessage() {}\nfunc (x *SearchAirportsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchAirportsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{12}\n}\nfunc (x *SearchAirportsResponse) GetResult() []*Airport {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#43", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1194, "end_line": 1214, "text": "func (x *SearchAirportsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\n", "n_tokens": 106, "primary_symbol": "GetNext", "primary_kind": "function", "primary_span": [1194, 1214], "def_symbols": ["GetNext", "GetPrevious", "GetTotalCount"], "symbols": ["GetNext", "GetPrevious", "GetTotalCount", "func", "SearchAirportsResponse", "string", "nil", "Next", "return", "Previous", "uint32", "TotalCount"], "doc_head": "func (x *SearchAirportsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#44", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1215, "end_line": 1236, "text": "type SearchCitiesRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchCitiesRequest) Reset() {\n\t*x = SearchCitiesRequest{}\n\tmi := &file_airports_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchCitiesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCitiesRequest) ProtoMessage() {}\n", "n_tokens": 193, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1224, 1236], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchCitiesRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchCitiesRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchCitiesRequest) Reset() {\n\t*x = SearchCitiesRequest{}\n\tmi := &file_airports_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchCitiesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCitiesRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#45", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1237, "end_line": 1267, "text": "func (x *SearchCitiesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCitiesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{13}\n}\n\nfunc (x *SearchCitiesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCitiesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1237, 1267], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchCitiesRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchCitiesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCitiesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{13}\n}\nfunc (x *SearchCitiesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCitiesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#46", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 1268, "end_line": 1290, "text": "func (x *SearchCitiesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchCitiesResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*City                `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchCitiesResponse) Reset() {\n\t*x = SearchCitiesResponse{}\n\tmi := &file_airports_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 199, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [1268, 1290], "def_symbols": ["GetCursor", "Reset"], "symbols": ["GetCursor", "Reset", "func", "SearchCitiesRequest", "string", "nil", "Cursor", "return", "type", "SearchCitiesResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Result", "City", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "opt", "next", "oneof", "Previous", "previous", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *SearchCitiesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchCitiesResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*City                `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchCitiesResponse) Reset() {\n\t*x = SearchCitiesResponse{}\n\tmi := &file_airports_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#47", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 1291, "end_line": 1320, "text": "func (x *SearchCitiesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCitiesResponse) ProtoMessage() {}\n\nfunc (x *SearchCitiesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCitiesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{14}\n}\n\nfunc (x *SearchCitiesResponse) GetResult() []*City {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1291, 1320], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchCitiesResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City", "Result"], "doc_head": "func (x *SearchCitiesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCitiesResponse) ProtoMessage() {}\nfunc (x *SearchCitiesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCitiesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{14}\n}\nfunc (x *SearchCitiesResponse) GetResult() []*City {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#48", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 1321, "end_line": 1352, "text": "func (x *SearchCitiesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCitiesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\ntype GetCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetCityRequest) Reset() {\n\t*x = GetCityRequest{}\n\tmi := &file_airports_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 203, "primary_symbol": "GetNext", "primary_kind": "function", "primary_span": [1321, 1352], "def_symbols": ["GetNext", "GetPrevious", "Reset", "String"], "symbols": ["GetNext", "GetPrevious", "Reset", "String", "func", "SearchCitiesResponse", "string", "nil", "Next", "return", "Previous", "type", "GetCityRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *SearchCitiesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCitiesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\ntype GetCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetCityRequest) Reset() {\n\t*x = GetCityRequest{}\n\tmi := &file_airports_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#49", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 1353, "end_line": 1378, "text": "func (*GetCityRequest) ProtoMessage() {}\n\nfunc (x *GetCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCityRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{15}\n}\n\nfunc (x *GetCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n", "n_tokens": 167, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [1353, 1378], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetId", "func", "GetCityRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "int64"], "doc_head": "func (*GetCityRequest) ProtoMessage() {}\nfunc (x *GetCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCityRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{15}\n}\nfunc (x *GetCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#50", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 1379, "end_line": 1398, "text": "type GetCityResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCity          *City                  `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetCityResponse) Reset() {\n\t*x = GetCityResponse{}\n\tmi := &file_airports_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetCityResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1386, 1398], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetCityResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "City", "protobuf", "bytes", "opt", "name", "city", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetCityResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCity          *City                  `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetCityResponse) Reset() {\n\t*x = GetCityResponse{}\n\tmi := &file_airports_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetCityResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#51", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 1399, "end_line": 1422, "text": "func (x *GetCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCityResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{16}\n}\n\nfunc (x *GetCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1399, 1422], "def_symbols": ["ProtoReflect", "Descriptor", "GetCity"], "symbols": ["ProtoReflect", "Descriptor", "GetCity", "func", "GetCityResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City"], "doc_head": "func (x *GetCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCityResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{16}\n}\nfunc (x *GetCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#52", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 1423, "end_line": 1432, "text": "type CreateCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tName          map[string]string      `protobuf:\"bytes,1,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,2,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId     string                 `protobuf:\"bytes,4,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 156, "primary_symbol": "", "primary_kind": "", "primary_span": [1423, 1432], "def_symbols": [], "symbols": ["type", "CreateCityRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Name", "map", "string", "protobuf", "bytes", "rep", "name", "proto3", "json", "omitempty", "protobuf_key", "opt", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "CountryId", "countryId", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type CreateCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tName          map[string]string      `protobuf:\"bytes,1,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,2,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId     string                 `protobuf:\"bytes,4,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#53", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 1433, "end_line": 1457, "text": "func (x *CreateCityRequest) Reset() {\n\t*x = CreateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCityRequest) ProtoMessage() {}\n\nfunc (x *CreateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1433, 1457], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateCityRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateCityRequest) Reset() {\n\t*x = CreateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCityRequest) ProtoMessage() {}\nfunc (x *CreateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#54", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 1458, "end_line": 1490, "text": "// Deprecated: Use CreateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{17}\n}\n\nfunc (x *CreateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *CreateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 169, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1459, 1490], "def_symbols": ["Descriptor", "GetName", "GetState", "GetTimezone", "GetCountryId"], "symbols": ["Descriptor", "GetName", "GetState", "GetTimezone", "GetCountryId", "Deprecated", "Use", "CreateCityRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "map", "string", "nil", "Name", "State", "Timezone", "CountryId"], "doc_head": "// Deprecated: Use CreateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{17}\n}\nfunc (x *CreateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *CreateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *CreateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *CreateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#55", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 55, "start_line": 1491, "end_line": 1510, "text": "type CreateCityResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCity          *City                  `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateCityResponse) Reset() {\n\t*x = CreateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCityResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1498, 1510], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateCityResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "City", "protobuf", "bytes", "opt", "name", "city", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreateCityResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCity          *City                  `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateCityResponse) Reset() {\n\t*x = CreateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCityResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#56", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 56, "start_line": 1511, "end_line": 1534, "text": "func (x *CreateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{18}\n}\n\nfunc (x *CreateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1511, 1534], "def_symbols": ["ProtoReflect", "Descriptor", "GetCity"], "symbols": ["ProtoReflect", "Descriptor", "GetCity", "func", "CreateCityResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City"], "doc_head": "func (x *CreateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{18}\n}\nfunc (x *CreateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#57", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 57, "start_line": 1535, "end_line": 1545, "text": "type UpdateCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId     string                 `protobuf:\"bytes,5,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 179, "primary_symbol": "", "primary_kind": "", "primary_span": [1535, 1545], "def_symbols": [], "symbols": ["type", "UpdateCityRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "CountryId", "countryId", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type UpdateCityRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId     string                 `protobuf:\"bytes,5,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#58", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 58, "start_line": 1546, "end_line": 1570, "text": "func (x *UpdateCityRequest) Reset() {\n\t*x = UpdateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCityRequest) ProtoMessage() {}\n\nfunc (x *UpdateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1546, 1570], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateCityRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateCityRequest) Reset() {\n\t*x = UpdateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCityRequest) ProtoMessage() {}\nfunc (x *UpdateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#59", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 59, "start_line": 1571, "end_line": 1610, "text": "// Deprecated: Use UpdateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{19}\n}\n\nfunc (x *UpdateCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 200, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1572, 1610], "def_symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountryId"], "symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountryId", "Deprecated", "Use", "UpdateCityRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "State", "Timezone", "CountryId"], "doc_head": "// Deprecated: Use UpdateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{19}\n}\nfunc (x *UpdateCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *UpdateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *UpdateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#60", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 60, "start_line": 1611, "end_line": 1630, "text": "type UpdateCityResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCity          *City                  `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UpdateCityResponse) Reset() {\n\t*x = UpdateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCityResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1618, 1630], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateCityResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "City", "protobuf", "bytes", "opt", "name", "city", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateCityResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCity          *City                  `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UpdateCityResponse) Reset() {\n\t*x = UpdateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCityResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#61", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 61, "start_line": 1631, "end_line": 1654, "text": "func (x *UpdateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{20}\n}\n\nfunc (x *UpdateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1631, 1654], "def_symbols": ["ProtoReflect", "Descriptor", "GetCity"], "symbols": ["ProtoReflect", "Descriptor", "GetCity", "func", "UpdateCityResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City"], "doc_head": "func (x *UpdateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{20}\n}\nfunc (x *UpdateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#62", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 62, "start_line": 1655, "end_line": 1676, "text": "type SearchCountriesRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchCountriesRequest) Reset() {\n\t*x = SearchCountriesRequest{}\n\tmi := &file_airports_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchCountriesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCountriesRequest) ProtoMessage() {}\n", "n_tokens": 193, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1664, 1676], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchCountriesRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchCountriesRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchCountriesRequest) Reset() {\n\t*x = SearchCountriesRequest{}\n\tmi := &file_airports_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchCountriesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCountriesRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#63", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 63, "start_line": 1677, "end_line": 1707, "text": "func (x *SearchCountriesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCountriesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{21}\n}\n\nfunc (x *SearchCountriesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCountriesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1677, 1707], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchCountriesRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchCountriesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCountriesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{21}\n}\nfunc (x *SearchCountriesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCountriesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#64", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 64, "start_line": 1708, "end_line": 1730, "text": "func (x *SearchCountriesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchCountriesResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Country             `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchCountriesResponse) Reset() {\n\t*x = SearchCountriesResponse{}\n\tmi := &file_airports_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 199, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [1708, 1730], "def_symbols": ["GetCursor", "Reset"], "symbols": ["GetCursor", "Reset", "func", "SearchCountriesRequest", "string", "nil", "Cursor", "return", "type", "SearchCountriesResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Result", "Country", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "opt", "next", "oneof", "Previous", "previous", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *SearchCountriesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchCountriesResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Country             `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchCountriesResponse) Reset() {\n\t*x = SearchCountriesResponse{}\n\tmi := &file_airports_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#65", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 65, "start_line": 1731, "end_line": 1760, "text": "func (x *SearchCountriesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCountriesResponse) ProtoMessage() {}\n\nfunc (x *SearchCountriesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCountriesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{22}\n}\n\nfunc (x *SearchCountriesResponse) GetResult() []*Country {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1731, 1760], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchCountriesResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country", "Result"], "doc_head": "func (x *SearchCountriesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCountriesResponse) ProtoMessage() {}\nfunc (x *SearchCountriesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCountriesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{22}\n}\nfunc (x *SearchCountriesResponse) GetResult() []*Country {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#66", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 66, "start_line": 1761, "end_line": 1792, "text": "func (x *SearchCountriesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCountriesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\ntype GetCountryRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetCountryRequest) Reset() {\n\t*x = GetCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[23]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 201, "primary_symbol": "GetNext", "primary_kind": "function", "primary_span": [1761, 1792], "def_symbols": ["GetNext", "GetPrevious", "Reset", "String"], "symbols": ["GetNext", "GetPrevious", "Reset", "String", "func", "SearchCountriesResponse", "string", "nil", "Next", "return", "Previous", "type", "GetCountryRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *SearchCountriesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCountriesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\ntype GetCountryRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetCountryRequest) Reset() {\n\t*x = GetCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[23]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#67", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 67, "start_line": 1793, "end_line": 1818, "text": "func (*GetCountryRequest) ProtoMessage() {}\n\nfunc (x *GetCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[23]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{23}\n}\n\nfunc (x *GetCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 164, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [1793, 1818], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetId", "func", "GetCountryRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string"], "doc_head": "func (*GetCountryRequest) ProtoMessage() {}\nfunc (x *GetCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[23]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{23}\n}\nfunc (x *GetCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#68", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 68, "start_line": 1819, "end_line": 1838, "text": "type GetCountryResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCountry       *Country               `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetCountryResponse) Reset() {\n\t*x = GetCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[24]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetCountryResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1826, 1838], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetCountryResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Country", "protobuf", "bytes", "opt", "name", "country", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetCountryResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCountry       *Country               `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetCountryResponse) Reset() {\n\t*x = GetCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[24]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetCountryResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#69", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 69, "start_line": 1839, "end_line": 1862, "text": "func (x *GetCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[24]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{24}\n}\n\nfunc (x *GetCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1839, 1862], "def_symbols": ["ProtoReflect", "Descriptor", "GetCountry"], "symbols": ["ProtoReflect", "Descriptor", "GetCountry", "func", "GetCountryResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country"], "doc_head": "func (x *GetCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[24]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{24}\n}\nfunc (x *GetCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#70", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 70, "start_line": 1863, "end_line": 1883, "text": "type CreateCountryRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateCountryRequest) Reset() {\n\t*x = CreateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[25]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCountryRequest) ProtoMessage() {}\n", "n_tokens": 185, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1871, 1883], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateCountryRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type CreateCountryRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateCountryRequest) Reset() {\n\t*x = CreateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[25]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCountryRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#71", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 71, "start_line": 1884, "end_line": 1914, "text": "func (x *CreateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[25]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{25}\n}\n\nfunc (x *CreateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1884, 1914], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "CreateCountryRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *CreateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[25]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{25}\n}\nfunc (x *CreateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *CreateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#72", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 72, "start_line": 1915, "end_line": 1934, "text": "type CreateCountryResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCountry       *Country               `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateCountryResponse) Reset() {\n\t*x = CreateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[26]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCountryResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1922, 1934], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateCountryResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Country", "protobuf", "bytes", "opt", "name", "country", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreateCountryResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCountry       *Country               `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateCountryResponse) Reset() {\n\t*x = CreateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[26]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCountryResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#73", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 73, "start_line": 1935, "end_line": 1958, "text": "func (x *CreateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[26]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{26}\n}\n\nfunc (x *CreateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1935, 1958], "def_symbols": ["ProtoReflect", "Descriptor", "GetCountry"], "symbols": ["ProtoReflect", "Descriptor", "GetCountry", "func", "CreateCountryResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country"], "doc_head": "func (x *CreateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[26]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{26}\n}\nfunc (x *CreateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#74", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 74, "start_line": 1959, "end_line": 1979, "text": "type UpdateCountryRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UpdateCountryRequest) Reset() {\n\t*x = UpdateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCountryRequest) ProtoMessage() {}\n", "n_tokens": 185, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1967, 1979], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateCountryRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type UpdateCountryRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UpdateCountryRequest) Reset() {\n\t*x = UpdateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCountryRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#75", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 75, "start_line": 1980, "end_line": 2010, "text": "func (x *UpdateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{27}\n}\n\nfunc (x *UpdateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1980, 2010], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "UpdateCountryRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *UpdateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{27}\n}\nfunc (x *UpdateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#76", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 76, "start_line": 2011, "end_line": 2030, "text": "type UpdateCountryResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCountry       *Country               `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UpdateCountryResponse) Reset() {\n\t*x = UpdateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCountryResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2018, 2030], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateCountryResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Country", "protobuf", "bytes", "opt", "name", "country", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateCountryResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCountry       *Country               `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UpdateCountryResponse) Reset() {\n\t*x = UpdateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCountryResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#77", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 77, "start_line": 2031, "end_line": 2054, "text": "func (x *UpdateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{28}\n}\n\nfunc (x *UpdateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2031, 2054], "def_symbols": ["ProtoReflect", "Descriptor", "GetCountry"], "symbols": ["ProtoReflect", "Descriptor", "GetCountry", "func", "UpdateCountryResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country"], "doc_head": "func (x *UpdateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{28}\n}\nfunc (x *UpdateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#78", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 78, "start_line": 2055, "end_line": 2075, "text": "type UploadImageResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tImageUrl      string                 `protobuf:\"bytes,1,opt,name=imageUrl,proto3\" json:\"imageUrl,omitempty\"`\n\tSize          int64                  `protobuf:\"varint,2,opt,name=size,proto3\" json:\"size,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UploadImageResponse) Reset() {\n\t*x = UploadImageResponse{}\n\tmi := &file_airports_proto_msgTypes[29]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageResponse) ProtoMessage() {}\n", "n_tokens": 166, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2063, 2075], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UploadImageResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "ImageUrl", "string", "protobuf", "bytes", "opt", "name", "imageUrl", "proto3", "json", "omitempty", "Size", "int64", "varint", "size", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type UploadImageResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tImageUrl      string                 `protobuf:\"bytes,1,opt,name=imageUrl,proto3\" json:\"imageUrl,omitempty\"`\n\tSize          int64                  `protobuf:\"varint,2,opt,name=size,proto3\" json:\"size,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UploadImageResponse) Reset() {\n\t*x = UploadImageResponse{}\n\tmi := &file_airports_proto_msgTypes[29]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#79", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 79, "start_line": 2076, "end_line": 2106, "text": "func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[29]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.\nfunc (*UploadImageResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{29}\n}\n\nfunc (x *UploadImageResponse) GetImageUrl() string {\n\tif x != nil {\n\t\treturn x.ImageUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UploadImageResponse) GetSize() int64 {\n\tif x != nil {\n\t\treturn x.Size\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2076, 2106], "def_symbols": ["ProtoReflect", "Descriptor", "GetImageUrl", "GetSize"], "symbols": ["ProtoReflect", "Descriptor", "GetImageUrl", "GetSize", "func", "UploadImageResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "ImageUrl", "int64", "Size"], "doc_head": "func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[29]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.\nfunc (*UploadImageResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{29}\n}\nfunc (x *UploadImageResponse) GetImageUrl() string {\n\tif x != nil {\n\t\treturn x.ImageUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UploadImageResponse) GetSize() int64 {\n\tif x != nil {\n\t\treturn x.Size\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#80", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 80, "start_line": 2107, "end_line": 2122, "text": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignators   []string               `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[30]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 193, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2116, 2122], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "BatchGetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designators", "string", "protobuf", "bytes", "rep", "name", "designators", "proto3", "json", "omitempty", "ForDate", "opt", "forDate", "oneof", "Include", "varint", "packed", "include", "enum", "aviation", "airports", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignators   []string               `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[30]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#81", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 81, "start_line": 2123, "end_line": 2145, "text": "func (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}\n\nfunc (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[30]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{30}\n}\n", "n_tokens": 173, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2123, 2145], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "BatchGetByDesignatorRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}\nfunc (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[30]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{30}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#82", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 82, "start_line": 2146, "end_line": 2173, "text": "func (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\n\nfunc (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n\nfunc (x *BatchGetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirports      []*Airport             `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 176, "primary_symbol": "GetDesignators", "primary_kind": "function", "primary_span": [2146, 2173], "def_symbols": ["GetDesignators", "GetForDate", "GetInclude"], "symbols": ["GetDesignators", "GetForDate", "GetInclude", "func", "BatchGetByDesignatorRequest", "string", "nil", "return", "Designators", "ForDate", "Include", "type", "BatchGetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airports", "Airport", "protobuf", "bytes", "rep", "name", "airports", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\nfunc (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\nfunc (x *BatchGetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirports      []*Airport             `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#83", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 83, "start_line": 2174, "end_line": 2198, "text": "func (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[31]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}\n\nfunc (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[31]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 179, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2174, 2198], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "BatchGetByDesignatorResponse", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[31]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}\nfunc (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[31]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#84", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 84, "start_line": 2199, "end_line": 2210, "text": "// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{31}\n}\n\nfunc (x *BatchGetByDesignatorResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}\n", "n_tokens": 87, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2200, 2210], "def_symbols": ["Descriptor", "GetAirports"], "symbols": ["Descriptor", "GetAirports", "Deprecated", "Use", "BatchGetByDesignatorResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "Airport", "nil", "Airports"], "doc_head": "// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{31}\n}\nfunc (x *BatchGetByDesignatorResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#85", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 85, "start_line": 2211, "end_line": 2226, "text": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    string                 `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[32]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 188, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2220, 2226], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "GetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "ForDate", "forDate", "oneof", "Include", "varint", "rep", "packed", "include", "enum", "aviation", "airports", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    string                 `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate       *string                `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude       []Include              `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[32]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#86", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 86, "start_line": 2227, "end_line": 2256, "text": "func (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetByDesignatorRequest) ProtoMessage() {}\n\nfunc (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[32]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{32}\n}\n\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n", "n_tokens": 200, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2227, 2256], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignator", "func", "GetByDesignatorRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetByDesignatorRequest) ProtoMessage() {}\nfunc (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[32]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{32}\n}\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#87", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 87, "start_line": 2257, "end_line": 2284, "text": "func (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n\ntype GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[33]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 190, "primary_symbol": "GetForDate", "primary_kind": "function", "primary_span": [2257, 2284], "def_symbols": ["GetForDate", "GetInclude", "Reset"], "symbols": ["GetForDate", "GetInclude", "Reset", "func", "GetByDesignatorRequest", "string", "nil", "ForDate", "return", "Include", "type", "GetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\nfunc (x *GetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\ntype GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tAirport       *Airport               `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[33]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#88", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 88, "start_line": 2285, "end_line": 2314, "text": "func (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetByDesignatorResponse) ProtoMessage() {}\n\nfunc (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[33]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{33}\n}\n\nfunc (x *GetByDesignatorResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 202, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2285, 2314], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport", "func", "GetByDesignatorResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetByDesignatorResponse) ProtoMessage() {}\nfunc (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[33]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{33}\n}\nfunc (x *GetByDesignatorResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#89", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 89, "start_line": 2315, "end_line": 2335, "text": "type Country struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *Country) Reset() {\n\t*x = Country{}\n\tmi := &file_airports_proto_msgTypes[34]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Country) ProtoMessage() {}\n", "n_tokens": 175, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2323, 2335], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Country", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Country struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *Country) Reset() {\n\t*x = Country{}\n\tmi := &file_airports_proto_msgTypes[34]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Country) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#90", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 90, "start_line": 2336, "end_line": 2366, "text": "func (x *Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[34]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Country.ProtoReflect.Descriptor instead.\nfunc (*Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{34}\n}\n\nfunc (x *Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 174, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2336, 2366], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "Country", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[34]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Country.ProtoReflect.Descriptor instead.\nfunc (*Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{34}\n}\nfunc (x *Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#91", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 91, "start_line": 2367, "end_line": 2377, "text": "type City struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry       *Country               `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 175, "primary_symbol": "", "primary_kind": "", "primary_span": [2367, 2377], "def_symbols": [], "symbols": ["type", "City", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "Country", "country", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type City struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry       *Country               `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#92", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 92, "start_line": 2378, "end_line": 2407, "text": "func (x *City) Reset() {\n\t*x = City{}\n\tmi := &file_airports_proto_msgTypes[35]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*City) ProtoMessage() {}\n\nfunc (x *City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[35]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use City.ProtoReflect.Descriptor instead.\nfunc (*City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{35}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2378, 2407], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "City", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *City) Reset() {\n\t*x = City{}\n\tmi := &file_airports_proto_msgTypes[35]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*City) ProtoMessage() {}\nfunc (x *City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[35]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use City.ProtoReflect.Descriptor instead.\nfunc (*City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{35}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#93", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 93, "start_line": 2408, "end_line": 2442, "text": "func (x *City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *City) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 145, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [2408, 2442], "def_symbols": ["GetId", "GetName", "GetState", "GetTimezone", "GetCountry"], "symbols": ["GetId", "GetName", "GetState", "GetTimezone", "GetCountry", "func", "City", "int64", "nil", "return", "map", "string", "Name", "State", "Timezone", "Country"], "doc_head": "func (x *City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *City) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#94", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 94, "start_line": 2443, "end_line": 2463, "text": "type Error struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCode          string                 `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tMessage       string                 `protobuf:\"bytes,2,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *Error) Reset() {\n\t*x = Error{}\n\tmi := &file_airports_proto_msgTypes[36]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Error) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Error) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2451, 2463], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Error", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Code", "string", "protobuf", "bytes", "opt", "name", "code", "proto3", "json", "omitempty", "Message", "message", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Error struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tCode          string                 `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tMessage       string                 `protobuf:\"bytes,2,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *Error) Reset() {\n\t*x = Error{}\n\tmi := &file_airports_proto_msgTypes[36]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Error) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Error) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#95", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 95, "start_line": 2464, "end_line": 2494, "text": "func (x *Error) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[36]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Error.ProtoReflect.Descriptor instead.\nfunc (*Error) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{36}\n}\n\nfunc (x *Error) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\n\nfunc (x *Error) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}\n", "n_tokens": 171, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2464, 2494], "def_symbols": ["ProtoReflect", "Descriptor", "GetCode", "GetMessage"], "symbols": ["ProtoReflect", "Descriptor", "GetCode", "GetMessage", "func", "Error", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Code"], "doc_head": "func (x *Error) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[36]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Error.ProtoReflect.Descriptor instead.\nfunc (*Error) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{36}\n}\nfunc (x *Error) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\nfunc (x *Error) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#96", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 96, "start_line": 2495, "end_line": 2504, "text": "type CreateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n", "n_tokens": 154, "primary_symbol": "", "primary_kind": "", "primary_span": [2495, 2504], "def_symbols": [], "symbols": ["type", "CreateDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirportId", "airportId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type CreateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#97", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 97, "start_line": 2505, "end_line": 2529, "text": "func (x *CreateDesignatorRequest) Reset() {\n\t*x = CreateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[37]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateDesignatorRequest) ProtoMessage() {}\n\nfunc (x *CreateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[37]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2505, 2529], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateDesignatorRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateDesignatorRequest) Reset() {\n\t*x = CreateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[37]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateDesignatorRequest) ProtoMessage() {}\nfunc (x *CreateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[37]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#98", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 98, "start_line": 2530, "end_line": 2562, "text": "// Deprecated: Use CreateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{37}\n}\n\nfunc (x *CreateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *CreateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2531, 2562], "def_symbols": ["Descriptor", "GetDesignatorCode", "GetAirportId", "GetValidFrom", "GetValidTo"], "symbols": ["Descriptor", "GetDesignatorCode", "GetAirportId", "GetValidFrom", "GetValidTo", "Deprecated", "Use", "CreateDesignatorRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "DesignatorCode", "AirportId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo"], "doc_head": "// Deprecated: Use CreateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{37}\n}\nfunc (x *CreateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\nfunc (x *CreateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\nfunc (x *CreateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *CreateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#99", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 99, "start_line": 2563, "end_line": 2582, "text": "type CreateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *CreateDesignatorResponse) Reset() {\n\t*x = CreateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[38]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2570, 2582], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *CreateDesignatorResponse) Reset() {\n\t*x = CreateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[38]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#100", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 100, "start_line": 2583, "end_line": 2606, "text": "func (x *CreateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[38]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{38}\n}\n\nfunc (x *CreateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2583, 2606], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "CreateDesignatorResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *CreateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[38]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{38}\n}\nfunc (x *CreateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#101", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 101, "start_line": 2607, "end_line": 2616, "text": "type UpdateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,2,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,3,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n", "n_tokens": 154, "primary_symbol": "", "primary_kind": "", "primary_span": [2607, 2616], "def_symbols": [], "symbols": ["type", "UpdateDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirportId", "airportId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type UpdateDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,2,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,3,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#102", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 102, "start_line": 2617, "end_line": 2641, "text": "func (x *UpdateDesignatorRequest) Reset() {\n\t*x = UpdateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[39]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDesignatorRequest) ProtoMessage() {}\n\nfunc (x *UpdateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[39]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2617, 2641], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateDesignatorRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateDesignatorRequest) Reset() {\n\t*x = UpdateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[39]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateDesignatorRequest) ProtoMessage() {}\nfunc (x *UpdateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[39]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#103", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 103, "start_line": 2642, "end_line": 2674, "text": "// Deprecated: Use UpdateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{39}\n}\n\nfunc (x *UpdateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2643, 2674], "def_symbols": ["Descriptor", "GetDesignatorCode", "GetAirportId", "GetValidFrom", "GetValidTo"], "symbols": ["Descriptor", "GetDesignatorCode", "GetAirportId", "GetValidFrom", "GetValidTo", "Deprecated", "Use", "UpdateDesignatorRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "DesignatorCode", "AirportId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo"], "doc_head": "// Deprecated: Use UpdateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{39}\n}\nfunc (x *UpdateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *UpdateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#104", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 104, "start_line": 2675, "end_line": 2694, "text": "type UpdateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UpdateDesignatorResponse) Reset() {\n\t*x = UpdateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[40]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 153, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2682, 2694], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UpdateDesignatorResponse) Reset() {\n\t*x = UpdateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[40]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#105", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 105, "start_line": 2695, "end_line": 2718, "text": "func (x *UpdateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[40]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{40}\n}\n\nfunc (x *UpdateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2695, 2718], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "UpdateDesignatorResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *UpdateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[40]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{40}\n}\nfunc (x *UpdateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#106", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 106, "start_line": 2719, "end_line": 2731, "text": "type Designator struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tAirportId     string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom     *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo       *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tCreatedAt     *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt     *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tAirportName   string                 `protobuf:\"bytes,7,opt,name=airportName,proto3\" json:\"airportName,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 225, "primary_symbol": "", "primary_kind": "", "primary_span": [2719, 2731], "def_symbols": [], "symbols": ["type", "Designator", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "AirportId", "airportId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "CreatedAt", "createdAt", "UpdatedAt", "updatedAt", "AirportName", "airportName", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Designator struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tAirportId     string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom     *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo       *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tCreatedAt     *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt     *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tAirportName   string                 `protobuf:\"bytes,7,opt,name=airportName,proto3\" json:\"airportName,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#107", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 107, "start_line": 2732, "end_line": 2756, "text": "func (x *Designator) Reset() {\n\t*x = Designator{}\n\tmi := &file_airports_proto_msgTypes[41]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Designator) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Designator) ProtoMessage() {}\n\nfunc (x *Designator) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[41]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2732, 2756], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Designator", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Designator) Reset() {\n\t*x = Designator{}\n\tmi := &file_airports_proto_msgTypes[41]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Designator) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Designator) ProtoMessage() {}\nfunc (x *Designator) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[41]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#108", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 108, "start_line": 2757, "end_line": 2796, "text": "// Deprecated: Use Designator.ProtoReflect.Descriptor instead.\nfunc (*Designator) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{41}\n}\n\nfunc (x *Designator) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Designator) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Designator) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2758, 2796], "def_symbols": ["Descriptor", "GetId", "GetAirportId", "GetValidFrom", "GetValidTo", "GetCreatedAt"], "symbols": ["Descriptor", "GetId", "GetAirportId", "GetValidFrom", "GetValidTo", "GetCreatedAt", "Deprecated", "Use", "Designator", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "AirportId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo", "CreatedAt"], "doc_head": "// Deprecated: Use Designator.ProtoReflect.Descriptor instead.\nfunc (*Designator) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{41}\n}\nfunc (x *Designator) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Designator) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\nfunc (x *Designator) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#109", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 109, "start_line": 2797, "end_line": 2818, "text": "func (x *Designator) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetAirportName() string {\n\tif x != nil {\n\t\treturn x.AirportName\n\t}\n\treturn \"\"\n}\n\ntype GetDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}\n", "n_tokens": 159, "primary_symbol": "GetUpdatedAt", "primary_kind": "function", "primary_span": [2797, 2818], "def_symbols": ["GetUpdatedAt", "GetAirportName"], "symbols": ["GetUpdatedAt", "GetAirportName", "func", "Designator", "timestamppb", "Timestamp", "nil", "return", "UpdatedAt", "string", "AirportName", "type", "GetDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "DesignatorCode", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirportId", "airportId", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "func (x *Designator) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetAirportName() string {\n\tif x != nil {\n\t\treturn x.AirportName\n\t}\n\treturn \"\"\n}\ntype GetDesignatorRequest struct {\n\tstate          protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tunknownFields  protoimpl.UnknownFields\n\tsizeCache      protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#110", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 110, "start_line": 2819, "end_line": 2843, "text": "func (x *GetDesignatorRequest) Reset() {\n\t*x = GetDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[42]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorRequest) ProtoMessage() {}\n\nfunc (x *GetDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[42]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2819, 2843], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "GetDesignatorRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *GetDesignatorRequest) Reset() {\n\t*x = GetDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[42]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorRequest) ProtoMessage() {}\nfunc (x *GetDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[42]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#111", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 111, "start_line": 2844, "end_line": 2869, "text": "// Deprecated: Use GetDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{42}\n}\n\nfunc (x *GetDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\ntype GetDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 179, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2845, 2869], "def_symbols": ["Descriptor", "GetDesignatorCode", "GetAirportId"], "symbols": ["Descriptor", "GetDesignatorCode", "GetAirportId", "Deprecated", "Use", "GetDesignatorRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "DesignatorCode", "AirportId", "type", "GetDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "// Deprecated: Use GetDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{42}\n}\nfunc (x *GetDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\nfunc (x *GetDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\ntype GetDesignatorResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tDesignator    *Designator            `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#112", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 112, "start_line": 2870, "end_line": 2894, "text": "func (x *GetDesignatorResponse) Reset() {\n\t*x = GetDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[43]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorResponse) ProtoMessage() {}\n\nfunc (x *GetDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[43]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2870, 2894], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "GetDesignatorResponse", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *GetDesignatorResponse) Reset() {\n\t*x = GetDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[43]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorResponse) ProtoMessage() {}\nfunc (x *GetDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[43]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#113", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 113, "start_line": 2895, "end_line": 2915, "text": "// Deprecated: Use GetDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{43}\n}\n\nfunc (x *GetDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n\ntype SearchDesignatorsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 192, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2896, 2915], "def_symbols": ["Descriptor", "GetDesignator"], "symbols": ["Descriptor", "GetDesignator", "Deprecated", "Use", "GetDesignatorResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "Designator", "nil", "type", "SearchDesignatorsRequest", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "// Deprecated: Use GetDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{43}\n}\nfunc (x *GetDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\ntype SearchDesignatorsRequest struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tQ             string                 `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit         uint32                 `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor        *string                `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#114", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 114, "start_line": 2916, "end_line": 2940, "text": "func (x *SearchDesignatorsRequest) Reset() {\n\t*x = SearchDesignatorsRequest{}\n\tmi := &file_airports_proto_msgTypes[44]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchDesignatorsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchDesignatorsRequest) ProtoMessage() {}\n\nfunc (x *SearchDesignatorsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[44]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2916, 2940], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchDesignatorsRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchDesignatorsRequest) Reset() {\n\t*x = SearchDesignatorsRequest{}\n\tmi := &file_airports_proto_msgTypes[44]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchDesignatorsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchDesignatorsRequest) ProtoMessage() {}\nfunc (x *SearchDesignatorsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[44]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#115", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 115, "start_line": 2941, "end_line": 2966, "text": "// Deprecated: Use SearchDesignatorsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{44}\n}\n\nfunc (x *SearchDesignatorsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchDesignatorsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n\nfunc (x *SearchDesignatorsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n", "n_tokens": 144, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2942, 2966], "def_symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor"], "symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor", "Deprecated", "Use", "SearchDesignatorsRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "uint32", "Limit", "Cursor"], "doc_head": "// Deprecated: Use SearchDesignatorsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{44}\n}\nfunc (x *SearchDesignatorsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchDesignatorsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\nfunc (x *SearchDesignatorsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#116", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 116, "start_line": 2967, "end_line": 2983, "text": "type SearchDesignatorsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Designator          `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,2,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,3,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,4,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *SearchDesignatorsResponse) Reset() {\n\t*x = SearchDesignatorsResponse{}\n\tmi := &file_airports_proto_msgTypes[45]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2977, 2983], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "SearchDesignatorsResponse", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "Result", "Designator", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "TotalCount", "uint32", "varint", "opt", "totalCount", "Next", "string", "next", "oneof", "Previous", "previous", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type SearchDesignatorsResponse struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tResult        []*Designator          `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tTotalCount    uint32                 `protobuf:\"varint,2,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tNext          *string                `protobuf:\"bytes,3,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious      *string                `protobuf:\"bytes,4,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *SearchDesignatorsResponse) Reset() {\n\t*x = SearchDesignatorsResponse{}\n\tmi := &file_airports_proto_msgTypes[45]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#117", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 117, "start_line": 2984, "end_line": 3013, "text": "func (x *SearchDesignatorsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchDesignatorsResponse) ProtoMessage() {}\n\nfunc (x *SearchDesignatorsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[45]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchDesignatorsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{45}\n}\n\nfunc (x *SearchDesignatorsResponse) GetResult() []*Designator {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 195, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2984, 3013], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchDesignatorsResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Designator", "Result"], "doc_head": "func (x *SearchDesignatorsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchDesignatorsResponse) ProtoMessage() {}\nfunc (x *SearchDesignatorsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[45]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchDesignatorsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{45}\n}\nfunc (x *SearchDesignatorsResponse) GetResult() []*Designator {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#118", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 118, "start_line": 3014, "end_line": 3034, "text": "func (x *SearchDesignatorsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\n\nfunc (x *SearchDesignatorsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchDesignatorsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n", "n_tokens": 106, "primary_symbol": "GetTotalCount", "primary_kind": "function", "primary_span": [3014, 3034], "def_symbols": ["GetTotalCount", "GetNext", "GetPrevious"], "symbols": ["GetTotalCount", "GetNext", "GetPrevious", "func", "SearchDesignatorsResponse", "uint32", "nil", "return", "TotalCount", "string", "Next", "Previous"], "doc_head": "func (x *SearchDesignatorsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\nfunc (x *SearchDesignatorsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchDesignatorsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#119", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 119, "start_line": 3035, "end_line": 3055, "text": "type Airport_Country struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *Airport_Country) Reset() {\n\t*x = Airport_Country{}\n\tmi := &file_airports_proto_msgTypes[54]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport_Country) ProtoMessage() {}\n", "n_tokens": 185, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3043, 3055], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Airport_Country", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Airport_Country struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *Airport_Country) Reset() {\n\t*x = Airport_Country{}\n\tmi := &file_airports_proto_msgTypes[54]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport_Country) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#120", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 120, "start_line": 3056, "end_line": 3086, "text": "func (x *Airport_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[54]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Airport_Country.ProtoReflect.Descriptor instead.\nfunc (*Airport_Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 0}\n}\n\nfunc (x *Airport_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [3056, 3086], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "Airport_Country", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *Airport_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[54]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Airport_Country.ProtoReflect.Descriptor instead.\nfunc (*Airport_Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 0}\n}\nfunc (x *Airport_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#121", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 121, "start_line": 3087, "end_line": 3097, "text": "type Airport_City struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry       *Airport_Country       `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 179, "primary_symbol": "", "primary_kind": "", "primary_span": [3087, 3097], "def_symbols": [], "symbols": ["type", "Airport_City", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "Country", "Airport_Country", "country", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Airport_City struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tState         *string                `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone      string                 `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry       *Airport_Country       `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#122", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 122, "start_line": 3098, "end_line": 3122, "text": "func (x *Airport_City) Reset() {\n\t*x = Airport_City{}\n\tmi := &file_airports_proto_msgTypes[55]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport_City) ProtoMessage() {}\n\nfunc (x *Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[55]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3098, 3122], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airport_City", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airport_City) Reset() {\n\t*x = Airport_City{}\n\tmi := &file_airports_proto_msgTypes[55]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport_City) ProtoMessage() {}\nfunc (x *Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[55]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#123", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 123, "start_line": 3123, "end_line": 3162, "text": "// Deprecated: Use Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 1}\n}\n\nfunc (x *Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_City) GetCountry() *Airport_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [3124, 3162], "def_symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountry"], "symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountry", "Deprecated", "Use", "Airport_City", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "State", "Timezone", "Airport_Country", "Country"], "doc_head": "// Deprecated: Use Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 1}\n}\nfunc (x *Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_City) GetCountry() *Airport_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#124", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 124, "start_line": 3163, "end_line": 3175, "text": "type Airport_TerminalMap struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tUrl           string                 `protobuf:\"bytes,3,opt,name=url,proto3\" json:\"url,omitempty\"`\n\tThumbnail     string                 `protobuf:\"bytes,4,opt,name=thumbnail,proto3\" json:\"thumbnail,omitempty\"`\n\tContentType   *string                `protobuf:\"bytes,5,opt,name=contentType,proto3,oneof\" json:\"contentType,omitempty\"`\n\tCreatedAt     *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt     *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n", "n_tokens": 232, "primary_symbol": "", "primary_kind": "", "primary_span": [3163, 3175], "def_symbols": [], "symbols": ["type", "Airport_TerminalMap", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "Url", "url", "Thumbnail", "thumbnail", "ContentType", "contentType", "oneof", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "unknownFields", "UnknownFields", "sizeCache", "SizeCache"], "doc_head": "type Airport_TerminalMap struct {\n\tstate         protoimpl.MessageState `protogen:\"open.v1\"`\n\tId            int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName          map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key\" protobuf_val:\"bytes,2,opt,name=value\"`\n\tUrl           string                 `protobuf:\"bytes,3,opt,name=url,proto3\" json:\"url,omitempty\"`\n\tThumbnail     string                 `protobuf:\"bytes,4,opt,name=thumbnail,proto3\" json:\"thumbnail,omitempty\"`\n\tContentType   *string                `protobuf:\"bytes,5,opt,name=contentType,proto3,oneof\" json:\"contentType,omitempty\"`\n\tCreatedAt     *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt     *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#125", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 125, "start_line": 3176, "end_line": 3200, "text": "func (x *Airport_TerminalMap) Reset() {\n\t*x = Airport_TerminalMap{}\n\tmi := &file_airports_proto_msgTypes[56]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport_TerminalMap) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport_TerminalMap) ProtoMessage() {}\n\nfunc (x *Airport_TerminalMap) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[56]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 174, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3176, 3200], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airport_TerminalMap", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airport_TerminalMap) Reset() {\n\t*x = Airport_TerminalMap{}\n\tmi := &file_airports_proto_msgTypes[56]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport_TerminalMap) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport_TerminalMap) ProtoMessage() {}\nfunc (x *Airport_TerminalMap) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[56]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#126", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 126, "start_line": 3201, "end_line": 3233, "text": "// Deprecated: Use Airport_TerminalMap.ProtoReflect.Descriptor instead.\nfunc (*Airport_TerminalMap) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 2}\n}\n\nfunc (x *Airport_TerminalMap) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *Airport_TerminalMap) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport_TerminalMap) GetUrl() string {\n\tif x != nil {\n\t\treturn x.Url\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_TerminalMap) GetThumbnail() string {\n\tif x != nil {\n\t\treturn x.Thumbnail\n\t}\n\treturn \"\"\n}\n", "n_tokens": 178, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [3202, 3233], "def_symbols": ["Descriptor", "GetId", "GetName", "GetUrl", "GetThumbnail"], "symbols": ["Descriptor", "GetId", "GetName", "GetUrl", "GetThumbnail", "Deprecated", "Use", "Airport_TerminalMap", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "Url", "Thumbnail"], "doc_head": "// Deprecated: Use Airport_TerminalMap.ProtoReflect.Descriptor instead.\nfunc (*Airport_TerminalMap) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 2}\n}\nfunc (x *Airport_TerminalMap) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *Airport_TerminalMap) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport_TerminalMap) GetUrl() string {\n\tif x != nil {\n\t\treturn x.Url\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_TerminalMap) GetThumbnail() string {\n\tif x != nil {\n\t\treturn x.Thumbnail\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#127", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 127, "start_line": 3234, "end_line": 3254, "text": "func (x *Airport_TerminalMap) GetContentType() string {\n\tif x != nil && x.ContentType != nil {\n\t\treturn *x.ContentType\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_TerminalMap) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airport_TerminalMap) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n", "n_tokens": 110, "primary_symbol": "GetContentType", "primary_kind": "function", "primary_span": [3234, 3254], "def_symbols": ["GetContentType", "GetCreatedAt", "GetUpdatedAt"], "symbols": ["GetContentType", "GetCreatedAt", "GetUpdatedAt", "func", "Airport_TerminalMap", "string", "nil", "ContentType", "return", "timestamppb", "Timestamp", "CreatedAt", "UpdatedAt"], "doc_head": "func (x *Airport_TerminalMap) GetContentType() string {\n\tif x != nil && x.ContentType != nil {\n\t\treturn *x.ContentType\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_TerminalMap) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airport_TerminalMap) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#128", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 128, "start_line": 3255, "end_line": 3270, "text": "type UploadImageRequest_Metadata struct {\n\tstate         protoimpl.MessageState       `protogen:\"open.v1\"`\n\tAirportId     string                       `protobuf:\"bytes,1,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tType          UploadImageRequest_ImageType `protobuf:\"varint,2,opt,name=type,proto3,enum=aviation.airports.v0.UploadImageRequest_ImageType\" json:\"type,omitempty\"`\n\tName          string                       `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\n\nfunc (x *UploadImageRequest_Metadata) Reset() {\n\t*x = UploadImageRequest_Metadata{}\n\tmi := &file_airports_proto_msgTypes[65]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 180, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3264, 3270], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "UploadImageRequest_Metadata", "struct", "state", "protoimpl", "MessageState", "protogen", "open", "AirportId", "string", "protobuf", "bytes", "opt", "name", "airportId", "proto3", "json", "omitempty", "Type", "UploadImageRequest_ImageType", "varint", "enum", "aviation", "airports", "Name", "unknownFields", "UnknownFields", "sizeCache", "SizeCache", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type UploadImageRequest_Metadata struct {\n\tstate         protoimpl.MessageState       `protogen:\"open.v1\"`\n\tAirportId     string                       `protobuf:\"bytes,1,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tType          UploadImageRequest_ImageType `protobuf:\"varint,2,opt,name=type,proto3,enum=aviation.airports.v0.UploadImageRequest_ImageType\" json:\"type,omitempty\"`\n\tName          string                       `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tunknownFields protoimpl.UnknownFields\n\tsizeCache     protoimpl.SizeCache\n}\nfunc (x *UploadImageRequest_Metadata) Reset() {\n\t*x = UploadImageRequest_Metadata{}\n\tmi := &file_airports_proto_msgTypes[65]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#129", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 129, "start_line": 3271, "end_line": 3300, "text": "func (x *UploadImageRequest_Metadata) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageRequest_Metadata) ProtoMessage() {}\n\nfunc (x *UploadImageRequest_Metadata) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[65]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageRequest_Metadata.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest_Metadata) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}\n\nfunc (x *UploadImageRequest_Metadata) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 199, "primary_symbol": "String", "primary_kind": "function", "primary_span": [3271, 3300], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirportId"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAirportId", "func", "UploadImageRequest_Metadata", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "AirportId"], "doc_head": "func (x *UploadImageRequest_Metadata) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageRequest_Metadata) ProtoMessage() {}\nfunc (x *UploadImageRequest_Metadata) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[65]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageRequest_Metadata.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest_Metadata) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}\nfunc (x *UploadImageRequest_Metadata) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#130", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 130, "start_line": 3301, "end_line": 3307, "text": "func (x *UploadImageRequest_Metadata) GetType() UploadImageRequest_ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn UploadImageRequest_UNKNOWN\n}\n", "n_tokens": 36, "primary_symbol": "GetType", "primary_kind": "function", "primary_span": [3301, 3307], "def_symbols": ["GetType"], "symbols": ["GetType", "func", "UploadImageRequest_Metadata", "UploadImageRequest_ImageType", "nil", "return", "Type", "UploadImageRequest_UNKNOWN"], "doc_head": "func (x *UploadImageRequest_Metadata) GetType() UploadImageRequest_ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn UploadImageRequest_UNKNOWN\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#131", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 131, "start_line": 3308, "end_line": 3714, "text": "func (x *UploadImageRequest_Metadata) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nvar File_airports_proto protoreflect.FileDescriptor\n\nconst file_airports_proto_rawDesc = \"\" +\n\t\"\\n\" +\n\t\"\\x0eairports.proto\\x12\\x14aviation.airports.v0\\x1a\\x1fgoogle/protobuf/timestamp.proto\\\"\\xc6\\b\\n\" +\n\t\"\\x14UpdateAirportRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x02 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x03 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x04 \\x01(\\x03R\\x0eclassification\\x12H\\n\" +\n\t\"\\x04name\\x18\\x05 \\x03(\\v24.aviation.airports.v0.UpdateAirportRequest.NameEntryR\\x04name\\x12W\\n\" +\n\t\"\\tshortName\\x18\\x06 \\x03(\\v29.aviation.airports.v0.UpdateAirportRequest.ShortNameEntryR\\tshortName\\x12\\x16\\n\" +\n\t\"\\x06cityId\\x18\\a \\x01(\\x03R\\x06cityId\\x12]\\n\" +\n\t\"\\vdescription\\x18\\b \\x03(\\v2;.aviation.airports.v0.UpdateAirportRequest.DescriptionEntryR\\vdescription\\x12\\x1a\\n\" +\n\t\"\\blatitude\\x18\\t \\x01(\\x02R\\blatitude\\x12\\x1c\\n\" +\n\t\"\\tlongitude\\x18\\n\" +\n\t\" \\x01(\\x02R\\tlongitude\\x12\\x1c\\n\" +\n\t\"\\televation\\x18\\v \\x01(\\x05R\\televation\\x12(\\n\" +\n\t\"\\x0fnumberOfRunways\\x18\\f \\x01(\\x05R\\x0fnumberOfRunways\\x12#\\n\" +\n\t\"\\n\" +\n\t\"websiteUrl\\x18\\r \\x01(\\tH\\x02R\\n\" +\n\t\"websiteUrl\\x88\\x01\\x01\\x12`\\n\" +\n\t\"\\fwikipediaUrl\\x18\\x0e \\x03(\\v2<.aviation.airports.v0.UpdateAirportRequest.WikipediaUrlEntryR\\fwikipediaUrl\\x12%\\n\" +\n\t\"\\vfacebookUrl\\x18\\x0f \\x01(\\tH\\x03R\\vfacebookUrl\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"twitterUrl\\x18\\x10 \\x01(\\tH\\x04R\\n\" +\n\t\"twitterUrl\\x88\\x01\\x01\\x12\\x15\\n\" +\n\t\"\\x03faa\\x18\\x11 \\x01(\\tH\\x05R\\x03faa\\x88\\x01\\x01\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a<\\n\" +\n\t\"\\x0eShortNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a>\\n\" +\n\t\"\\x10DescriptionEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a?\\n\" +\n\t\"\\x11WikipediaUrlEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_websiteUrlB\\x0e\\n\" +\n\t\"\\f_facebookUrlB\\r\\n\" +\n\t\"\\v_twitterUrlB\\x06\\n\" +\n\t\"\\x04_faa\\\"P\\n\" +\n\t\"\\x15UpdateAirportResponse\\x127\\n\" +\n\t\"\\aairport\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.AirportR\\aairport\\\"\\xb6\\b\\n\" +\n\t\"\\x14CreateAirportRequest\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x01 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x02 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x03 \\x01(\\x03R\\x0eclassification\\x12H\\n\" +\n\t\"\\x04name\\x18\\x04 \\x03(\\v24.aviation.airports.v0.CreateAirportRequest.NameEntryR\\x04name\\x12W\\n\" +\n\t\"\\tshortName\\x18\\x05 \\x03(\\v29.aviation.airports.v0.CreateAirportRequest.ShortNameEntryR\\tshortName\\x12\\x16\\n\" +\n\t\"\\x06cityId\\x18\\x06 \\x01(\\x03R\\x06cityId\\x12]\\n\" +\n\t\"\\vdescription\\x18\\a \\x03(\\v2;.aviation.airports.v0.CreateAirportRequest.DescriptionEntryR\\vdescription\\x12\\x1a\\n\" +\n\t\"\\blatitude\\x18\\b \\x01(\\x02R\\blatitude\\x12\\x1c\\n\" +\n\t\"\\tlongitude\\x18\\t \\x01(\\x02R\\tlongitude\\x12\\x1c\\n\" +\n\t\"\\televation\\x18\\n\" +\n\t\" \\x01(\\x05R\\televation\\x12(\\n\" +\n\t\"\\x0fnumberOfRunways\\x18\\v \\x01(\\x05R\\x0fnumberOfRunways\\x12#\\n\" +\n\t\"\\n\" +\n\t\"websiteUrl\\x18\\f \\x01(\\tH\\x02R\\n\" +\n\t\"websiteUrl\\x88\\x01\\x01\\x12`\\n\" +\n\t\"\\fwikipediaUrl\\x18\\r \\x03(\\v2<.aviation.airports.v0.CreateAirportRequest.WikipediaUrlEntryR\\fwikipediaUrl\\x12%\\n\" +\n\t\"\\vfacebookUrl\\x18\\x0e \\x01(\\tH\\x03R\\vfacebookUrl\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"twitterUrl\\x18\\x0f \\x01(\\tH\\x04R\\n\" +\n\t\"twitterUrl\\x88\\x01\\x01\\x12\\x15\\n\" +\n\t\"\\x03faa\\x18\\x10 \\x01(\\tH\\x05R\\x03faa\\x88\\x01\\x01\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a<\\n\" +\n\t\"\\x0eShortNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a>\\n\" +\n\t\"\\x10DescriptionEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a?\\n\" +\n\t\"\\x11WikipediaUrlEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_websiteUrlB\\x0e\\n\" +\n\t\"\\f_facebookUrlB\\r\\n\" +\n\t\"\\v_twitterUrlB\\x06\\n\" +\n\t\"\\x04_faa\\\"P\\n\" +\n\t\"\\x15CreateAirportResponse\\x127\\n\" +\n\t\"\\aairport\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.AirportR\\aairport\\\"`\\n\" +\n\t\"\\x15AirportDetailsRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x127\\n\" +\n\t\"\\ainclude\\x18\\x02 \\x03(\\x0e2\\x1d.aviation.airports.v0.IncludeR\\ainclude\\\"Q\\n\" +\n\t\"\\x16AirportDetailsResponse\\x127\\n\" +\n\t\"\\aairport\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.AirportR\\aairport\\\"\\\\\\n\" +\n\t\"\\x0fBatchGetRequest\\x12\\x10\\n\" +\n\t\"\\x03ids\\x18\\x01 \\x03(\\tR\\x03ids\\x127\\n\" +\n\t\"\\ainclude\\x18\\x02 \\x03(\\x0e2\\x1d.aviation.airports.v0.IncludeR\\ainclude\\\"M\\n\" +\n\t\"\\x10BatchGetResponse\\x129\\n\" +\n\t\"\\bairports\\x18\\x01 \\x03(\\v2\\x1d.aviation.airports.v0.AirportR\\bairports\\\"&\\n\" +\n\t\"\\x14AirportByCityRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\\"\\xe3\\x11\\n\" +\n\t\"\\aAirport\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x02 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x03 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x04 \\x01(\\x03R\\x0eclassification\\x12;\\n\" +\n\t\"\\x04name\\x18\\x05 \\x03(\\v2'.aviation.airports.v0.Airport.NameEntryR\\x04name\\x12J\\n\" +\n\t\"\\tshortName\\x18\\x06 \\x03(\\v2,.aviation.airports.v0.Airport.ShortNameEntryR\\tshortName\\x126\\n\" +\n\t\"\\x04city\\x18\\a \\x01(\\v2\\\".aviation.airports.v0.Airport.CityR\\x04city\\x12P\\n\" +\n\t\"\\vdescription\\x18\\b \\x03(\\v2..aviation.airports.v0.Airport.DescriptionEntryR\\vdescription\\x12\\x1a\\n\" +\n\t\"\\blatitude\\x18\\t \\x01(\\x02R\\blatitude\\x12\\x1c\\n\" +\n\t\"\\tlongitude\\x18\\n\" +\n\t\" \\x01(\\x02R\\tlongitude\\x12\\x1c\\n\" +\n\t\"\\televation\\x18\\v \\x01(\\x05R\\televation\\x12(\\n\" +\n\t\"\\x0fnumberOfRunways\\x18\\f \\x01(\\x05R\\x0fnumberOfRunways\\x12#\\n\" +\n\t\"\\n\" +\n\t\"websiteUrl\\x18\\r \\x01(\\tH\\x02R\\n\" +\n\t\"websiteUrl\\x88\\x01\\x01\\x12S\\n\" +\n\t\"\\fwikipediaUrl\\x18\\x0e \\x03(\\v2/.aviation.airports.v0.Airport.WikipediaUrlEntryR\\fwikipediaUrl\\x12%\\n\" +\n\t\"\\vfacebookUrl\\x18\\x0f \\x01(\\tH\\x03R\\vfacebookUrl\\x88\\x01\\x01\\x12#\\n\" +\n\t\"\\n\" +\n\t\"twitterUrl\\x18\\x10 \\x01(\\tH\\x04R\\n\" +\n\t\"twitterUrl\\x88\\x01\\x01\\x12A\\n\" +\n\t\"\\x06images\\x18\\x11 \\x03(\\v2).aviation.airports.v0.Airport.ImagesEntryR\\x06images\\x12M\\n\" +\n\t\"\\fterminalMaps\\x18\\x12 \\x03(\\v2).aviation.airports.v0.Airport.TerminalMapR\\fterminalMaps\\x128\\n\" +\n\t\"\\tcreatedAt\\x18\\x13 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tcreatedAt\\x128\\n\" +\n\t\"\\tupdatedAt\\x18\\x14 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tupdatedAt\\x12#\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x15 \\x01(\\tH\\x05R\\n\" +\n\t\"designator\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\bpristine\\x18\\x16 \\x01(\\bR\\bpristine\\x12\\x15\\n\" +\n\t\"\\x03faa\\x18\\x17 \\x01(\\tH\\x06R\\x03faa\\x88\\x01\\x01\\x1a\\x97\\x01\\n\" +\n\t\"\\aCountry\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12C\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v2/.aviation.airports.v0.Airport.Country.NameEntryR\\x04name\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a\\x93\\x02\\n\" +\n\t\"\\x04City\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\x12@\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v2,.aviation.airports.v0.Airport.City.NameEntryR\\x04name\\x12\\x19\\n\" +\n\t\"\\x05state\\x18\\x03 \\x01(\\tH\\x00R\\x05state\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\btimezone\\x18\\x04 \\x01(\\tR\\btimezone\\x12?\\n\" +\n\t\"\\acountry\\x18\\x05 \\x01(\\v2%.aviation.airports.v0.Airport.CountryR\\acountry\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\b\\n\" +\n\t\"\\x06_state\\x1a\\xfa\\x02\\n\" +\n\t\"\\vTerminalMap\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\x12G\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v23.aviation.airports.v0.Airport.TerminalMap.NameEntryR\\x04name\\x12\\x10\\n\" +\n\t\"\\x03url\\x18\\x03 \\x01(\\tR\\x03url\\x12\\x1c\\n\" +\n\t\"\\tthumbnail\\x18\\x04 \\x01(\\tR\\tthumbnail\\x12%\\n\" +\n\t\"\\vcontentType\\x18\\x05 \\x01(\\tH\\x00R\\vcontentType\\x88\\x01\\x01\\x128\\n\" +\n\t\"\\tcreatedAt\\x18\\x06 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tcreatedAt\\x128\\n\" +\n\t\"\\tupdatedAt\\x18\\a \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tupdatedAt\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\x0e\\n\" +\n\t\"\\f_contentType\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a<\\n\" +\n\t\"\\x0eShortNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a>\\n\" +\n\t\"\\x10DescriptionEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a?\\n\" +\n\t\"\\x11WikipediaUrlEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\x1a9\\n\" +\n\t\"\\vImagesEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\a\\n\" +\n\t\"\\x05_iataB\\a\\n\" +\n\t\"\\x05_icaoB\\r\\n\" +\n\t\"\\v_websiteUrlB\\x0e\\n\" +\n\t\"\\f_facebookUrlB\\r\\n\" +\n\t\"\\v_twitterUrlB\\r\\n\" +\n\t\"\\v_designatorB\\x06\\n\" +\n\t\"\\x04_faa\\\"\\xb4\\x02\\n\" +\n\t\"\\x12UploadImageRequest\\x12O\\n\" +\n\t\"\\bmetadata\\x18\\x01 \\x01(\\v21.aviation.airports.v0.UploadImageRequest.MetadataH\\x00R\\bmetadata\\x12\\x16\\n\" +\n\t\"\\x05chunk\\x18\\x02 \\x01(\\fH\\x00R\\x05chunk\\x1a\\x84\\x01\\n\" +\n\t\"\\bMetadata\\x12\\x1c\\n\" +\n\t\"\\tairportId\\x18\\x01 \\x01(\\tR\\tairportId\\x12F\\n\" +\n\t\"\\x04type\\x18\\x02 \\x01(\\x0e22.aviation.airports.v0.UploadImageRequest.ImageTypeR\\x04type\\x12\\x12\\n\" +\n\t\"\\x04name\\x18\\x03 \\x01(\\tR\\x04name\\\"&\\n\" +\n\t\"\\tImageType\\x12\\v\\n\" +\n\t\"\\aUNKNOWN\\x10\\x00\\x12\\f\\n\" +\n\t\"\\bOVERVIEW\\x10\\x01B\\x06\\n\" +\n\t\"\\x04data\\\"\\x9f\\x01\\n\" +\n\t\"\\x15SearchAirportsRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01\\x12:\\n\" +\n\t\"\\x18includeWithoutDesignator\\x18\\x04 \\x01(\\bR\\x18includeWithoutDesignatorB\\t\\n\" +\n\t\"\\a_cursor\\\"\\xbf\\x01\\n\" +\n\t\"\\x16SearchAirportsResponse\\x125\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2\\x1d.aviation.airports.v0.AirportR\\x06result\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x02 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x03 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"totalCount\\x18\\x04 \\x01(\\rR\\n\" +\n\t\"totalCountB\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous\\\"a\\n\" +\n\t\"\\x13SearchCitiesRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01B\\t\\n\" +\n\t\"\\a_cursor\\\"\\x9a\\x01\\n\" +\n\t\"\\x14SearchCitiesResponse\\x122\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2\\x1a.aviation.airports.v0.CityR\\x06result\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x02 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x03 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01B\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous\\\" \\n\" +\n\t\"\\x0eGetCityRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\\"A\\n\" +\n\t\"\\x0fGetCityResponse\\x12.\\n\" +\n\t\"\\x04city\\x18\\x01 \\x01(\\v2\\x1a.aviation.airports.v0.CityR\\x04city\\\"\\xf2\\x01\\n\" +\n\t\"\\x11CreateCityRequest\\x12E\\n\" +\n\t\"\\x04name\\x18\\x01 \\x03(\\v21.aviation.airports.v0.CreateCityRequest.NameEntryR\\x04name\\x12\\x19\\n\" +\n\t\"\\x05state\\x18\\x02 \\x01(\\tH\\x00R\\x05state\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\btimezone\\x18\\x03 \\x01(\\tR\\btimezone\\x12\\x1c\\n\" +\n\t\"\\tcountryId\\x18\\x04 \\x01(\\tR\\tcountryId\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\b\\n\" +\n\t\"\\x06_state\\\"D\\n\" +\n\t\"\\x12CreateCityResponse\\x12.\\n\" +\n\t\"\\x04city\\x18\\x01 \\x01(\\v2\\x1a.aviation.airports.v0.CityR\\x04city\\\"\\x82\\x02\\n\" +\n\t\"\\x11UpdateCityRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\x12E\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v21.aviation.airports.v0.UpdateCityRequest.NameEntryR\\x04name\\x12\\x19\\n\" +\n\t\"\\x05state\\x18\\x03 \\x01(\\tH\\x00R\\x05state\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\btimezone\\x18\\x04 \\x01(\\tR\\btimezone\\x12\\x1c\\n\" +\n\t\"\\tcountryId\\x18\\x05 \\x01(\\tR\\tcountryId\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\b\\n\" +\n\t\"\\x06_state\\\"D\\n\" +\n\t\"\\x12UpdateCityResponse\\x12.\\n\" +\n\t\"\\x04city\\x18\\x01 \\x01(\\v2\\x1a.aviation.airports.v0.CityR\\x04city\\\"d\\n\" +\n\t\"\\x16SearchCountriesRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01B\\t\\n\" +\n\t\"\\a_cursor\\\"\\xa0\\x01\\n\" +\n\t\"\\x17SearchCountriesResponse\\x125\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2\\x1d.aviation.airports.v0.CountryR\\x06result\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x02 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x03 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01B\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous\\\"#\\n\" +\n\t\"\\x11GetCountryRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\\"M\\n\" +\n\t\"\\x12GetCountryResponse\\x127\\n\" +\n\t\"\\acountry\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.CountryR\\acountry\\\"\\xa9\\x01\\n\" +\n\t\"\\x14CreateCountryRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12H\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v24.aviation.airports.v0.CreateCountryRequest.NameEntryR\\x04name\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\\"P\\n\" +\n\t\"\\x15CreateCountryResponse\\x127\\n\" +\n\t\"\\acountry\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.CountryR\\acountry\\\"\\xa9\\x01\\n\" +\n\t\"\\x14UpdateCountryRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12H\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v24.aviation.airports.v0.UpdateCountryRequest.NameEntryR\\x04name\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\\"P\\n\" +\n\t\"\\x15UpdateCountryResponse\\x127\\n\" +\n\t\"\\acountry\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.CountryR\\acountry\\\"E\\n\" +\n\t\"\\x13UploadImageResponse\\x12\\x1a\\n\" +\n\t\"\\bimageUrl\\x18\\x01 \\x01(\\tR\\bimageUrl\\x12\\x12\\n\" +\n\t\"\\x04size\\x18\\x02 \\x01(\\x03R\\x04size\\\"\\xa3\\x01\\n\" +\n\t\"\\x1bBatchGetByDesignatorRequest\\x12 \\n\" +\n\t\"\\vdesignators\\x18\\x01 \\x03(\\tR\\vdesignators\\x12\\x1d\\n\" +\n\t\"\\aforDate\\x18\\x02 \\x01(\\tH\\x00R\\aforDate\\x88\\x01\\x01\\x127\\n\" +\n\t\"\\ainclude\\x18\\x03 \\x03(\\x0e2\\x1d.aviation.airports.v0.IncludeR\\aincludeB\\n\" +\n\t\"\\n\" +\n\t\"\\b_forDate\\\"Y\\n\" +\n\t\"\\x1cBatchGetByDesignatorResponse\\x129\\n\" +\n\t\"\\bairports\\x18\\x01 \\x03(\\v2\\x1d.aviation.airports.v0.AirportR\\bairports\\\"\\x9c\\x01\\n\" +\n\t\"\\x16GetByDesignatorRequest\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\tR\\n\" +\n\t\"designator\\x12\\x1d\\n\" +\n\t\"\\aforDate\\x18\\x02 \\x01(\\tH\\x00R\\aforDate\\x88\\x01\\x01\\x127\\n\" +\n\t\"\\ainclude\\x18\\x03 \\x03(\\x0e2\\x1d.aviation.airports.v0.IncludeR\\aincludeB\\n\" +\n\t\"\\n\" +\n\t\"\\b_forDate\\\"R\\n\" +\n\t\"\\x17GetByDesignatorResponse\\x127\\n\" +\n\t\"\\aairport\\x18\\x01 \\x01(\\v2\\x1d.aviation.airports.v0.AirportR\\aairport\\\"\\x8f\\x01\\n\" +\n\t\"\\aCountry\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12;\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v2'.aviation.airports.v0.Country.NameEntryR\\x04name\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01\\\"\\x83\\x02\\n\" +\n\t\"\\x04City\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\x03R\\x02id\\x128\\n\" +\n\t\"\\x04name\\x18\\x02 \\x03(\\v2$.aviation.airports.v0.City.NameEntryR\\x04name\\x12\\x19\\n\" +\n\t\"\\x05state\\x18\\x03 \\x01(\\tH\\x00R\\x05state\\x88\\x01\\x01\\x12\\x1a\\n\" +\n\t\"\\btimezone\\x18\\x04 \\x01(\\tR\\btimezone\\x127\\n\" +\n\t\"\\acountry\\x18\\x05 \\x01(\\v2\\x1d.aviation.airports.v0.CountryR\\acountry\\x1a7\\n\" +\n\t\"\\tNameEntry\\x12\\x10\\n\" +\n\t\"\\x03key\\x18\\x01 \\x01(\\tR\\x03key\\x12\\x14\\n\" +\n\t\"\\x05value\\x18\\x02 \\x01(\\tR\\x05value:\\x028\\x01B\\b\\n\" +\n\t\"\\x06_state\\\"5\\n\" +\n\t\"\\x05Error\\x12\\x12\\n\" +\n\t\"\\x04code\\x18\\x01 \\x01(\\tR\\x04code\\x12\\x18\\n\" +\n\t\"\\amessage\\x18\\x02 \\x01(\\tR\\amessage\\\"\\xcf\\x01\\n\" +\n\t\"\\x17CreateDesignatorRequest\\x12&\\n\" +\n\t\"\\x0edesignatorCode\\x18\\x01 \\x01(\\tR\\x0edesignatorCode\\x12\\x1c\\n\" +\n\t\"\\tairportId\\x18\\x02 \\x01(\\tR\\tairportId\\x128\\n\" +\n\t\"\\tvalidFrom\\x18\\x03 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tvalidFrom\\x124\\n\" +\n\t\"\\avalidTo\\x18\\x04 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\avalidTo\\\"\\\\\\n\" +\n\t\"\\x18CreateDesignatorResponse\\x12@\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\v2 .aviation.airports.v0.DesignatorR\\n\" +\n\t\"designator\\\"\\xcf\\x01\\n\" +\n\t\"\\x17UpdateDesignatorRequest\\x12&\\n\" +\n\t\"\\x0edesignatorCode\\x18\\x02 \\x01(\\tR\\x0edesignatorCode\\x12\\x1c\\n\" +\n\t\"\\tairportId\\x18\\x03 \\x01(\\tR\\tairportId\\x128\\n\" +\n\t\"\\tvalidFrom\\x18\\x04 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tvalidFrom\\x124\\n\" +\n\t\"\\avalidTo\\x18\\x05 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\avalidTo\\\"\\\\\\n\" +\n\t\"\\x18UpdateDesignatorResponse\\x12@\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\v2 .aviation.airports.v0.DesignatorR\\n\" +\n\t\"designator\\\"\\xc0\\x02\\n\" +\n\t\"\\n\" +\n\t\"Designator\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x1c\\n\" +\n\t\"\\tairportId\\x18\\x02 \\x01(\\tR\\tairportId\\x128\\n\" +\n\t\"\\tvalidFrom\\x18\\x03 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tvalidFrom\\x124\\n\" +\n\t\"\\avalidTo\\x18\\x04 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\avalidTo\\x128\\n\" +\n\t\"\\tcreatedAt\\x18\\x05 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tcreatedAt\\x128\\n\" +\n\t\"\\tupdatedAt\\x18\\x06 \\x01(\\v2\\x1a.google.protobuf.TimestampR\\tupdatedAt\\x12 \\n\" +\n\t\"\\vairportName\\x18\\a \\x01(\\tR\\vairportName\\\"\\\\\\n\" +\n\t\"\\x14GetDesignatorRequest\\x12&\\n\" +\n\t\"\\x0edesignatorCode\\x18\\x01 \\x01(\\tR\\x0edesignatorCode\\x12\\x1c\\n\" +\n\t\"\\tairportId\\x18\\x02 \\x01(\\tR\\tairportId\\\"Y\\n\" +\n\t\"\\x15GetDesignatorResponse\\x12@\\n\" +\n\t\"\\n\" +\n\t\"designator\\x18\\x01 \\x01(\\v2 .aviation.airports.v0.DesignatorR\\n\" +\n\t\"designator\\\"f\\n\" +\n\t\"\\x18SearchDesignatorsRequest\\x12\\f\\n\" +\n\t\"\\x01q\\x18\\x01 \\x01(\\tR\\x01q\\x12\\x14\\n\" +\n\t\"\\x05limit\\x18\\x02 \\x01(\\rR\\x05limit\\x12\\x1b\\n\" +\n\t\"\\x06cursor\\x18\\x03 \\x01(\\tH\\x00R\\x06cursor\\x88\\x01\\x01B\\t\\n\" +\n\t\"\\a_cursor\\\"\\xc5\\x01\\n\" +\n\t\"\\x19SearchDesignatorsResponse\\x128\\n\" +\n\t\"\\x06result\\x18\\x01 \\x03(\\v2 .aviation.airports.v0.DesignatorR\\x06result\\x12\\x1e\\n\" +\n\t\"\\n\" +\n\t\"totalCount\\x18\\x02 \\x01(\\rR\\n\" +\n\t\"totalCount\\x12\\x17\\n\" +\n\t\"\\x04next\\x18\\x03 \\x01(\\tH\\x00R\\x04next\\x88\\x01\\x01\\x12\\x1f\\n\" +\n\t\"\\bprevious\\x18\\x04 \\x01(\\tH\\x01R\\bprevious\\x88\\x01\\x01B\\a\\n\" +\n\t\"\\x05_nextB\\v\\n\" +\n\t\"\\t_previous*)\\n\" +\n\t\"\\aInclude\\x12\\v\\n\" +\n\t\"\\aUNKNOWN\\x10\\x00\\x12\\x11\\n\" +\n\t\"\\rTERMINAL_MAPS\\x10\\x012\\xc1\\a\\n\" +\n\t\"\\x0fAirportsService\\x12b\\n\" +\n\t\"\\x03Get\\x12+.aviation.airports.v0.AirportDetailsRequest\\x1a,.aviation.airports.v0.AirportDetailsResponse\\\"\\x00\\x12[\\n\" +\n\t\"\\bBatchGet\\x12%.aviation.airports.v0.BatchGetRequest\\x1a&.aviation.airports.v0.BatchGetResponse\\\"\\x00\\x12a\\n\" +\n\t\"\\tGetByCity\\x12*.aviation.airports.v0.AirportByCityRequest\\x1a&.aviation.airports.v0.BatchGetResponse\\\"\\x00\\x12f\\n\" +\n\t\"\\vUploadImage\\x12(.aviation.airports.v0.UploadImageRequest\\x1a).aviation.airports.v0.UploadImageResponse\\\"\\x00(\\x01\\x12e\\n\" +\n\t\"\\x06Search\\x12+.aviation.airports.v0.SearchAirportsRequest\\x1a,.aviation.airports.v0.SearchAirportsResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Create\\x12*.aviation.airports.v0.CreateAirportRequest\\x1a+.aviation.airports.v0.CreateAirportResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Update\\x12*.aviation.airports.v0.UpdateAirportRequest\\x1a+.aviation.airports.v0.UpdateAirportResponse\\\"\\x00\\x12\\x7f\\n\" +\n\t\"\\x14BatchGetByDesignator\\x121.aviation.airports.v0.BatchGetByDesignatorRequest\\x1a2.aviation.airports.v0.BatchGetByDesignatorResponse\\\"\\x00\\x12p\\n\" +\n\t\"\\x0fGetByDesignator\\x12,.aviation.airports.v0.GetByDesignatorRequest\\x1a-.aviation.airports.v0.GetByDesignatorResponse\\\"\\x002\\x86\\x03\\n\" +\n\t\"\\rCitiesService\\x12a\\n\" +\n\t\"\\x06Search\\x12).aviation.airports.v0.SearchCitiesRequest\\x1a*.aviation.airports.v0.SearchCitiesResponse\\\"\\x00\\x12T\\n\" +\n\t\"\\x03Get\\x12$.aviation.airports.v0.GetCityRequest\\x1a%.aviation.airports.v0.GetCityResponse\\\"\\x00\\x12]\\n\" +\n\t\"\\x06Create\\x12'.aviation.airports.v0.CreateCityRequest\\x1a(.aviation.airports.v0.CreateCityResponse\\\"\\x00\\x12]\\n\" +\n\t\"\\x06Update\\x12'.aviation.airports.v0.UpdateCityRequest\\x1a(.aviation.airports.v0.UpdateCityResponse\\\"\\x002\\xa1\\x03\\n\" +\n\t\"\\x10CountriesService\\x12g\\n\" +\n\t\"\\x06Search\\x12,.aviation.airports.v0.SearchCountriesRequest\\x1a-.aviation.airports.v0.SearchCountriesResponse\\\"\\x00\\x12Z\\n\" +\n\t\"\\x03Get\\x12'.aviation.airports.v0.GetCountryRequest\\x1a(.aviation.airports.v0.GetCountryResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Create\\x12*.aviation.airports.v0.CreateCountryRequest\\x1a+.aviation.airports.v0.CreateCountryResponse\\\"\\x00\\x12c\\n\" +\n\t\"\\x06Update\\x12*.aviation.airports.v0.UpdateCountryRequest\\x1a+.aviation.airports.v0.UpdateCountryResponse\\\"\\x002\\xb9\\x03\\n\" +\n\t\"\\x12DesignatorsService\\x12i\\n\" +\n\t\"\\x06Create\\x12-.aviation.airports.v0.CreateDesignatorRequest\\x1a..aviation.airports.v0.CreateDesignatorResponse\\\"\\x00\\x12`\\n\" +\n\t\"\\x03Get\\x12*.aviation.airports.v0.GetDesignatorRequest\\x1a+.aviation.airports.v0.GetDesignatorResponse\\\"\\x00\\x12i\\n\" +\n\t\"\\x06Update\\x12-.aviation.airports.v0.UpdateDesignatorRequest\\x1a..aviation.airports.v0.UpdateDesignatorResponse\\\"\\x00\\x12k\\n\" +\n\t\"\\x06Search\\x12..aviation.airports.v0.SearchDesignatorsRequest\\x1a/.aviation.airports.v0.SearchDesignatorsResponse\\\"\\x00b\\x06proto3\"\n\nvar (\n\tfile_airports_proto_rawDescOnce sync.Once\n\tfile_airports_proto_rawDescData []byte\n)\n", "n_tokens": 9109, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [3308, 3714], "def_symbols": ["GetName"], "symbols": ["GetName", "func", "UploadImageRequest_Metadata", "string", "nil", "return", "Name", "var", "File_airports_proto", "protoreflect", "FileDescriptor", "const", "file_airports_proto_rawDesc", "x0eairports", "proto", "x12", "x14aviation", "airports", "x1a", "x1fgoogle", "protobuf", "timestamp", "xc6", "x14UpdateAirportRequest", "x0e", "x02id", "x18", "x01", "x17", "x04iata", "x02", "x00R", "x88", "x04icao", "x03", "x01R", "x0eclassification", "x04", "x03R", "x12H", "x04name", "x05", "v24", "aviation", "UpdateAirportRequest", "NameEntryR", "x12W", "tshortName", "x06", "v29", "ShortNameEntryR", "x16", "x06cityId", "vdescription", "DescriptionEntryR", "blatitude", "x02R", "x1c", "tlongitude", "televation", "x05R", "x0fnumberOfRunways", "websiteUrl", "fwikipediaUrl", "WikipediaUrlEntryR", "vfacebookUrl", "x0f", "twitterUrl", "x10", "x04R", "x15", "x03faa", "x11", "x1a7", "tNameEntry", "x03key", "x14", "x05value", "x028", "x0eShortNameEntry", "x10DescriptionEntry", "x11WikipediaUrlEntry", "x01B", "x05_iataB", "x05_icaoB", "v_websiteUrlB", "f_facebookUrlB", "v_twitterUrlB", "x04_faa", "x15UpdateAirportResponse", "x127", "aairport", "x1d", "AirportR", "xb6", "x14CreateAirportRequest", "CreateAirportRequest", "x15CreateAirportResponse", "x15AirportDetailsRequest", "ainclude", "x0e2", "IncludeR", "x16AirportDetailsResponse", "x0fBatchGetRequest", "x03ids", "x10BatchGetResponse", "x129", "bairports", "x14AirportByCityRequest", "xe3", "aAirport", "Airport", "x12J", "x126", "x04city", "CityR", "x12P", "x12S", "x12A", "x06images", "ImagesEntryR", "x12M", "fterminalMaps", "TerminalMapR", "x128", "tcreatedAt", "x13", "google", "TimestampR", "tupdatedAt", "designator", "bpristine", "x06R", "x97", "aCountry", "x12C", "Country", "x93", "x04City", "City", "x19", "x05state", "btimezone", "acountry", "CountryR", "x06_state", "xfa", "vTerminalMap", "x12G", "v23", "TerminalMap", "x03url", "tthumbnail", "vcontentType", "f_contentType", "x1a9", "vImagesEntry", "v_designatorB", "xb4", "x12UploadImageRequest", "x12O", "bmetadata", "v21", "UploadImageRequest", "MetadataH", "x05chunk", "x84", "bMetadata", "tairportId", "x12F", "x04type", "x0e22", "ImageTypeR", "tImageType", "aUNKNOWN", "x00", "bOVERVIEW", "x04data", "x9f", "x15SearchAirportsRequest", "x01q", "x05limit", "x1b", "x06cursor", "x18includeWithoutDesignator", "x18includeWithoutDesignatorB", "a_cursor", "xbf", "x16SearchAirportsResponse", "x125", "x06result", "x04next", "x1f", "bprevious", "x1e", "totalCount", "totalCountB", "x05_nextB", "t_previous", "x13SearchCitiesRequest", "x9a", "x14SearchCitiesResponse", "x122", "x0eGetCityRequest", "x0fGetCityResponse", "xf2", "x11CreateCityRequest", "x12E", "CreateCityRequest", "tcountryId", "x12CreateCityResponse", "x82", "x11UpdateCityRequest", "UpdateCityRequest", "x12UpdateCityResponse", "x16SearchCountriesRequest", "xa0", "x17SearchCountriesResponse", "x11GetCountryRequest", "x12GetCountryResponse", "xa9", "x14CreateCountryRequest", "CreateCountryRequest", "x15CreateCountryResponse", "x14UpdateCountryRequest", "UpdateCountryRequest", "x15UpdateCountryResponse", "x13UploadImageResponse", "bimageUrl", "x04size", "xa3", "x1bBatchGetByDesignatorRequest", "vdesignators", "aforDate", "aincludeB", "b_forDate", "x1cBatchGetByDesignatorResponse", "x9c", "x16GetByDesignatorRequest", "x17GetByDesignatorResponse", "x8f", "x83", "x05Error", "x04code", "amessage", "xcf", "x17CreateDesignatorRequest", "x0edesignatorCode", "tvalidFrom", "x124", "avalidTo", "x18CreateDesignatorResponse", "DesignatorR", "x17UpdateDesignatorRequest", "x18UpdateDesignatorResponse", "xc0"], "doc_head": "func (x *UploadImageRequest_Metadata) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nvar File_airports_proto protoreflect.FileDescriptor\nconst file_airports_proto_rawDesc = \"\" +\n\t\"\\n\" +\n\t\"\\x0eairports.proto\\x12\\x14aviation.airports.v0\\x1a\\x1fgoogle/protobuf/timestamp.proto\\\"\\xc6\\b\\n\" +\n\t\"\\x14UpdateAirportRequest\\x12\\x0e\\n\" +\n\t\"\\x02id\\x18\\x01 \\x01(\\tR\\x02id\\x12\\x17\\n\" +\n\t\"\\x04iata\\x18\\x02 \\x01(\\tH\\x00R\\x04iata\\x88\\x01\\x01\\x12\\x17\\n\" +\n\t\"\\x04icao\\x18\\x03 \\x01(\\tH\\x01R\\x04icao\\x88\\x01\\x01\\x12&\\n\" +\n\t\"\\x0eclassification\\x18\\x04 \\x01(\\x03R\\x0eclassification\\x12H\\n\" +\n\t\"\\x04name\\x18\\x05 \\x03(\\v24.aviation.airports.v0.UpdateAirportRequest.NameEntryR\\x04name\\x12W\\n\" +\n\t\"\\tshortName\\x18\\x06 \\x03(\\v29.aviation.airports.v0.UpdateAirportRequest.ShortNameEntryR\\tshortName\\x12\\x16\\n\" +\n\t\"\\x06cityId\\x18\\a \\x01(\\x03R\\x06cityId\\x12]\\n\" +\n\t\"\\vdescription\\x18\\b \\x03(\\v2;.aviation.airports.v0.UpdateAirportRequest.DescriptionEntryR\\vdescription\\x12\\x1a\\n\" +\n\t\"\\blatitude\\x18\\t \\x01(\\x02R\\blatitude\\x12\\x1c\\n\" +\n\t\"\\tlongitude\\x18\\n\" +\n\t\" \\x01(\\x02R\\tlongitude\\x12\\x1c\\n\" +\n\t\"\\televation\\x18\\v \\x01(\\x05R\\televation\\x12(\\n\" +\n\t\"\\x0fnumberOfRunways\\x18\\f \\x01(\\x05R\\x0fnumberOfRunways\\x12#\\n"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#132", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 132, "start_line": 3715, "end_line": 3913, "text": "func file_airports_proto_rawDescGZIP() []byte {\n\tfile_airports_proto_rawDescOnce.Do(func() {\n\t\tfile_airports_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_airports_proto_rawDesc), len(file_airports_proto_rawDesc)))\n\t})\n\treturn file_airports_proto_rawDescData\n}\n\nvar file_airports_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_airports_proto_msgTypes = make([]protoimpl.MessageInfo, 72)\nvar file_airports_proto_goTypes = []any{\n\t(Include)(0),                         // 0: aviation.airports.v0.Include\n\t(UploadImageRequest_ImageType)(0),    // 1: aviation.airports.v0.UploadImageRequest.ImageType\n\t(*UpdateAirportRequest)(nil),         // 2: aviation.airports.v0.UpdateAirportRequest\n\t(*UpdateAirportResponse)(nil),        // 3: aviation.airports.v0.UpdateAirportResponse\n\t(*CreateAirportRequest)(nil),         // 4: aviation.airports.v0.CreateAirportRequest\n\t(*CreateAirportResponse)(nil),        // 5: aviation.airports.v0.CreateAirportResponse\n\t(*AirportDetailsRequest)(nil),        // 6: aviation.airports.v0.AirportDetailsRequest\n\t(*AirportDetailsResponse)(nil),       // 7: aviation.airports.v0.AirportDetailsResponse\n\t(*BatchGetRequest)(nil),              // 8: aviation.airports.v0.BatchGetRequest\n\t(*BatchGetResponse)(nil),             // 9: aviation.airports.v0.BatchGetResponse\n\t(*AirportByCityRequest)(nil),         // 10: aviation.airports.v0.AirportByCityRequest\n\t(*Airport)(nil),                      // 11: aviation.airports.v0.Airport\n\t(*UploadImageRequest)(nil),           // 12: aviation.airports.v0.UploadImageRequest\n\t(*SearchAirportsRequest)(nil),        // 13: aviation.airports.v0.SearchAirportsRequest\n\t(*SearchAirportsResponse)(nil),       // 14: aviation.airports.v0.SearchAirportsResponse\n\t(*SearchCitiesRequest)(nil),          // 15: aviation.airports.v0.SearchCitiesRequest\n\t(*SearchCitiesResponse)(nil),         // 16: aviation.airports.v0.SearchCitiesResponse\n\t(*GetCityRequest)(nil),               // 17: aviation.airports.v0.GetCityRequest\n\t(*GetCityResponse)(nil),              // 18: aviation.airports.v0.GetCityResponse\n\t(*CreateCityRequest)(nil),            // 19: aviation.airports.v0.CreateCityRequest\n\t(*CreateCityResponse)(nil),           // 20: aviation.airports.v0.CreateCityResponse\n\t(*UpdateCityRequest)(nil),            // 21: aviation.airports.v0.UpdateCityRequest\n\t(*UpdateCityResponse)(nil),           // 22: aviation.airports.v0.UpdateCityResponse\n\t(*SearchCountriesRequest)(nil),       // 23: aviation.airports.v0.SearchCountriesRequest\n\t(*SearchCountriesResponse)(nil),      // 24: aviation.airports.v0.SearchCountriesResponse\n\t(*GetCountryRequest)(nil),            // 25: aviation.airports.v0.GetCountryRequest\n\t(*GetCountryResponse)(nil),           // 26: aviation.airports.v0.GetCountryResponse\n\t(*CreateCountryRequest)(nil),         // 27: aviation.airports.v0.CreateCountryRequest\n\t(*CreateCountryResponse)(nil),        // 28: aviation.airports.v0.CreateCountryResponse\n\t(*UpdateCountryRequest)(nil),         // 29: aviation.airports.v0.UpdateCountryRequest\n\t(*UpdateCountryResponse)(nil),        // 30: aviation.airports.v0.UpdateCountryResponse\n\t(*UploadImageResponse)(nil),          // 31: aviation.airports.v0.UploadImageResponse\n\t(*BatchGetByDesignatorRequest)(nil),  // 32: aviation.airports.v0.BatchGetByDesignatorRequest\n\t(*BatchGetByDesignatorResponse)(nil), // 33: aviation.airports.v0.BatchGetByDesignatorResponse\n\t(*GetByDesignatorRequest)(nil),       // 34: aviation.airports.v0.GetByDesignatorRequest\n\t(*GetByDesignatorResponse)(nil),      // 35: aviation.airports.v0.GetByDesignatorResponse\n\t(*Country)(nil),                      // 36: aviation.airports.v0.Country\n\t(*City)(nil),                         // 37: aviation.airports.v0.City\n\t(*Error)(nil),                        // 38: aviation.airports.v0.Error\n\t(*CreateDesignatorRequest)(nil),      // 39: aviation.airports.v0.CreateDesignatorRequest\n\t(*CreateDesignatorResponse)(nil),     // 40: aviation.airports.v0.CreateDesignatorResponse\n\t(*UpdateDesignatorRequest)(nil),      // 41: aviation.airports.v0.UpdateDesignatorRequest\n\t(*UpdateDesignatorResponse)(nil),     // 42: aviation.airports.v0.UpdateDesignatorResponse\n\t(*Designator)(nil),                   // 43: aviation.airports.v0.Designator\n\t(*GetDesignatorRequest)(nil),         // 44: aviation.airports.v0.GetDesignatorRequest\n\t(*GetDesignatorResponse)(nil),        // 45: aviation.airports.v0.GetDesignatorResponse\n\t(*SearchDesignatorsRequest)(nil),     // 46: aviation.airports.v0.SearchDesignatorsRequest\n\t(*SearchDesignatorsResponse)(nil),    // 47: aviation.airports.v0.SearchDesignatorsResponse\n\tnil,                                  // 48: aviation.airports.v0.UpdateAirportRequest.NameEntry\n\tnil,                                  // 49: aviation.airports.v0.UpdateAirportRequest.ShortNameEntry\n\tnil,                                  // 50: aviation.airports.v0.UpdateAirportRequest.DescriptionEntry\n\tnil,                                  // 51: aviation.airports.v0.UpdateAirportRequest.WikipediaUrlEntry\n\tnil,                                  // 52: aviation.airports.v0.CreateAirportRequest.NameEntry\n\tnil,                                  // 53: aviation.airports.v0.CreateAirportRequest.ShortNameEntry\n\tnil,                                  // 54: aviation.airports.v0.CreateAirportRequest.DescriptionEntry\n\tnil,                                  // 55: aviation.airports.v0.CreateAirportRequest.WikipediaUrlEntry\n\t(*Airport_Country)(nil),              // 56: aviation.airports.v0.Airport.Country\n\t(*Airport_City)(nil),                 // 57: aviation.airports.v0.Airport.City\n\t(*Airport_TerminalMap)(nil),          // 58: aviation.airports.v0.Airport.TerminalMap\n\tnil,                                  // 59: aviation.airports.v0.Airport.NameEntry\n\tnil,                                  // 60: aviation.airports.v0.Airport.ShortNameEntry\n\tnil,                                  // 61: aviation.airports.v0.Airport.DescriptionEntry\n\tnil,                                  // 62: aviation.airports.v0.Airport.WikipediaUrlEntry\n\tnil,                                  // 63: aviation.airports.v0.Airport.ImagesEntry\n\tnil,                                  // 64: aviation.airports.v0.Airport.Country.NameEntry\n\tnil,                                  // 65: aviation.airports.v0.Airport.City.NameEntry\n\tnil,                                  // 66: aviation.airports.v0.Airport.TerminalMap.NameEntry\n\t(*UploadImageRequest_Metadata)(nil),  // 67: aviation.airports.v0.UploadImageRequest.Metadata\n\tnil,                                  // 68: aviation.airports.v0.CreateCityRequest.NameEntry\n\tnil,                                  // 69: aviation.airports.v0.UpdateCityRequest.NameEntry\n\tnil,                                  // 70: aviation.airports.v0.CreateCountryRequest.NameEntry\n\tnil,                                  // 71: aviation.airports.v0.UpdateCountryRequest.NameEntry\n\tnil,                                  // 72: aviation.airports.v0.Country.NameEntry\n\tnil,                                  // 73: aviation.airports.v0.City.NameEntry\n\t(*timestamppb.Timestamp)(nil),        // 74: google.protobuf.Timestamp\n}\nvar file_airports_proto_depIdxs = []int32{\n\t48, // 0: aviation.airports.v0.UpdateAirportRequest.name:type_name -> aviation.airports.v0.UpdateAirportRequest.NameEntry\n\t49, // 1: aviation.airports.v0.UpdateAirportRequest.shortName:type_name -> aviation.airports.v0.UpdateAirportRequest.ShortNameEntry\n\t50, // 2: aviation.airports.v0.UpdateAirportRequest.description:type_name -> aviation.airports.v0.UpdateAirportRequest.DescriptionEntry\n\t51, // 3: aviation.airports.v0.UpdateAirportRequest.wikipediaUrl:type_name -> aviation.airports.v0.UpdateAirportRequest.WikipediaUrlEntry\n\t11, // 4: aviation.airports.v0.UpdateAirportResponse.airport:type_name -> aviation.airports.v0.Airport\n\t52, // 5: aviation.airports.v0.CreateAirportRequest.name:type_name -> aviation.airports.v0.CreateAirportRequest.NameEntry\n\t53, // 6: aviation.airports.v0.CreateAirportRequest.shortName:type_name -> aviation.airports.v0.CreateAirportRequest.ShortNameEntry\n\t54, // 7: aviation.airports.v0.CreateAirportRequest.description:type_name -> aviation.airports.v0.CreateAirportRequest.DescriptionEntry\n\t55, // 8: aviation.airports.v0.CreateAirportRequest.wikipediaUrl:type_name -> aviation.airports.v0.CreateAirportRequest.WikipediaUrlEntry\n\t11, // 9: aviation.airports.v0.CreateAirportResponse.airport:type_name -> aviation.airports.v0.Airport\n\t0,  // 10: aviation.airports.v0.AirportDetailsRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 11: aviation.airports.v0.AirportDetailsResponse.airport:type_name -> aviation.airports.v0.Airport\n\t0,  // 12: aviation.airports.v0.BatchGetRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 13: aviation.airports.v0.BatchGetResponse.airports:type_name -> aviation.airports.v0.Airport\n\t59, // 14: aviation.airports.v0.Airport.name:type_name -> aviation.airports.v0.Airport.NameEntry\n\t60, // 15: aviation.airports.v0.Airport.shortName:type_name -> aviation.airports.v0.Airport.ShortNameEntry\n\t57, // 16: aviation.airports.v0.Airport.city:type_name -> aviation.airports.v0.Airport.City\n\t61, // 17: aviation.airports.v0.Airport.description:type_name -> aviation.airports.v0.Airport.DescriptionEntry\n\t62, // 18: aviation.airports.v0.Airport.wikipediaUrl:type_name -> aviation.airports.v0.Airport.WikipediaUrlEntry\n\t63, // 19: aviation.airports.v0.Airport.images:type_name -> aviation.airports.v0.Airport.ImagesEntry\n\t58, // 20: aviation.airports.v0.Airport.terminalMaps:type_name -> aviation.airports.v0.Airport.TerminalMap\n\t74, // 21: aviation.airports.v0.Airport.createdAt:type_name -> google.protobuf.Timestamp\n\t74, // 22: aviation.airports.v0.Airport.updatedAt:type_name -> google.protobuf.Timestamp\n\t67, // 23: aviation.airports.v0.UploadImageRequest.metadata:type_name -> aviation.airports.v0.UploadImageRequest.Metadata\n\t11, // 24: aviation.airports.v0.SearchAirportsResponse.result:type_name -> aviation.airports.v0.Airport\n\t37, // 25: aviation.airports.v0.SearchCitiesResponse.result:type_name -> aviation.airports.v0.City\n\t37, // 26: aviation.airports.v0.GetCityResponse.city:type_name -> aviation.airports.v0.City\n\t68, // 27: aviation.airports.v0.CreateCityRequest.name:type_name -> aviation.airports.v0.CreateCityRequest.NameEntry\n\t37, // 28: aviation.airports.v0.CreateCityResponse.city:type_name -> aviation.airports.v0.City\n\t69, // 29: aviation.airports.v0.UpdateCityRequest.name:type_name -> aviation.airports.v0.UpdateCityRequest.NameEntry\n\t37, // 30: aviation.airports.v0.UpdateCityResponse.city:type_name -> aviation.airports.v0.City\n\t36, // 31: aviation.airports.v0.SearchCountriesResponse.result:type_name -> aviation.airports.v0.Country\n\t36, // 32: aviation.airports.v0.GetCountryResponse.country:type_name -> aviation.airports.v0.Country\n\t70, // 33: aviation.airports.v0.CreateCountryRequest.name:type_name -> aviation.airports.v0.CreateCountryRequest.NameEntry\n\t36, // 34: aviation.airports.v0.CreateCountryResponse.country:type_name -> aviation.airports.v0.Country\n\t71, // 35: aviation.airports.v0.UpdateCountryRequest.name:type_name -> aviation.airports.v0.UpdateCountryRequest.NameEntry\n\t36, // 36: aviation.airports.v0.UpdateCountryResponse.country:type_name -> aviation.airports.v0.Country\n\t0,  // 37: aviation.airports.v0.BatchGetByDesignatorRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 38: aviation.airports.v0.BatchGetByDesignatorResponse.airports:type_name -> aviation.airports.v0.Airport\n\t0,  // 39: aviation.airports.v0.GetByDesignatorRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 40: aviation.airports.v0.GetByDesignatorResponse.airport:type_name -> aviation.airports.v0.Airport\n\t72, // 41: aviation.airports.v0.Country.name:type_name -> aviation.airports.v0.Country.NameEntry\n\t73, // 42: aviation.airports.v0.City.name:type_name -> aviation.airports.v0.City.NameEntry\n\t36, // 43: aviation.airports.v0.City.country:type_name -> aviation.airports.v0.Country\n\t74, // 44: aviation.airports.v0.CreateDesignatorRequest.validFrom:type_name -> google.protobuf.Timestamp\n\t74, // 45: aviation.airports.v0.CreateDesignatorRequest.validTo:type_name -> google.protobuf.Timestamp\n\t43, // 46: aviation.airports.v0.CreateDesignatorResponse.designator:type_name -> aviation.airports.v0.Designator\n\t74, // 47: aviation.airports.v0.UpdateDesignatorRequest.validFrom:type_name -> google.protobuf.Timestamp\n\t74, // 48: aviation.airports.v0.UpdateDesignatorRequest.validTo:type_name -> google.protobuf.Timestamp\n\t43, // 49: aviation.airports.v0.UpdateDesignatorResponse.designator:type_name -> aviation.airports.v0.Designator\n\t74, // 50: aviation.airports.v0.Designator.validFrom:type_name -> google.protobuf.Timestamp\n\t74, // 51: aviation.airports.v0.Designator.validTo:type_name -> google.protobuf.Timestamp\n\t74, // 52: aviation.airports.v0.Designator.createdAt:type_name -> google.protobuf.Timestamp\n\t74, // 53: aviation.airports.v0.Designator.updatedAt:type_name -> google.protobuf.Timestamp\n\t43, // 54: aviation.airports.v0.GetDesignatorResponse.designator:type_name -> aviation.airports.v0.Designator\n\t43, // 55: aviation.airports.v0.SearchDesignatorsResponse.result:type_name -> aviation.airports.v0.Designator\n\t64, // 56: aviation.airports.v0.Airport.Country.name:type_name -> aviation.airports.v0.Airport.Country.NameEntry\n\t65, // 57: aviation.airports.v0.Airport.City.name:type_name -> aviation.airports.v0.Airport.City.NameEntry\n\t56, // 58: aviation.airports.v0.Airport.City.country:type_name -> aviation.airports.v0.Airport.Country\n\t66, // 59: aviation.airports.v0.Airport.TerminalMap.name:type_name -> aviation.airports.v0.Airport.TerminalMap.NameEntry\n\t74, // 60: aviation.airports.v0.Airport.TerminalMap.createdAt:type_name -> google.protobuf.Timestamp\n\t74, // 61: aviation.airports.v0.Airport.TerminalMap.updatedAt:type_name -> google.protobuf.Timestamp\n\t1,  // 62: aviation.airports.v0.UploadImageRequest.Metadata.type:type_name -> aviation.airports.v0.UploadImageRequest.ImageType\n\t6,  // 63: aviation.airports.v0.AirportsService.Get:input_type -> aviation.airports.v0.AirportDetailsRequest\n\t8,  // 64: aviation.airports.v0.AirportsService.BatchGet:input_type -> aviation.airports.v0.BatchGetRequest\n\t10, // 65: aviation.airports.v0.AirportsService.GetByCity:input_type -> aviation.airports.v0.AirportByCityRequest\n\t12, // 66: aviation.airports.v0.AirportsService.UploadImage:input_type -> aviation.airports.v0.UploadImageRequest\n\t13, // 67: aviation.airports.v0.AirportsService.Search:input_type -> aviation.airports.v0.SearchAirportsRequest\n\t4,  // 68: aviation.airports.v0.AirportsService.Create:input_type -> aviation.airports.v0.CreateAirportRequest\n\t2,  // 69: aviation.airports.v0.AirportsService.Update:input_type -> aviation.airports.v0.UpdateAirportRequest\n\t32, // 70: aviation.airports.v0.AirportsService.BatchGetByDesignator:input_type -> aviation.airports.v0.BatchGetByDesignatorRequest\n\t34, // 71: aviation.airports.v0.AirportsService.GetByDesignator:input_type -> aviation.airports.v0.GetByDesignatorRequest\n\t15, // 72: aviation.airports.v0.CitiesService.Search:input_type -> aviation.airports.v0.SearchCitiesRequest\n\t17, // 73: aviation.airports.v0.CitiesService.Get:input_type -> aviation.airports.v0.GetCityRequest\n\t19, // 74: aviation.airports.v0.CitiesService.Create:input_type -> aviation.airports.v0.CreateCityRequest\n\t21, // 75: aviation.airports.v0.CitiesService.Update:input_type -> aviation.airports.v0.UpdateCityRequest\n\t23, // 76: aviation.airports.v0.CountriesService.Search:input_type -> aviation.airports.v0.SearchCountriesRequest\n\t25, // 77: aviation.airports.v0.CountriesService.Get:input_type -> aviation.airports.v0.GetCountryRequest\n\t27, // 78: aviation.airports.v0.CountriesService.Create:input_type -> aviation.airports.v0.CreateCountryRequest\n\t29, // 79: aviation.airports.v0.CountriesService.Update:input_type -> aviation.airports.v0.UpdateCountryRequest\n\t39, // 80: aviation.airports.v0.DesignatorsService.Create:input_type -> aviation.airports.v0.CreateDesignatorRequest\n\t44, // 81: aviation.airports.v0.DesignatorsService.Get:input_type -> aviation.airports.v0.GetDesignatorRequest\n\t41, // 82: aviation.airports.v0.DesignatorsService.Update:input_type -> aviation.airports.v0.UpdateDesignatorRequest\n\t46, // 83: aviation.airports.v0.DesignatorsService.Search:input_type -> aviation.airports.v0.SearchDesignatorsRequest\n\t7,  // 84: aviation.airports.v0.AirportsService.Get:output_type -> aviation.airports.v0.AirportDetailsResponse\n\t9,  // 85: aviation.airports.v0.AirportsService.BatchGet:output_type -> aviation.airports.v0.BatchGetResponse\n\t9,  // 86: aviation.airports.v0.AirportsService.GetByCity:output_type -> aviation.airports.v0.BatchGetResponse\n\t31, // 87: aviation.airports.v0.AirportsService.UploadImage:output_type -> aviation.airports.v0.UploadImageResponse\n\t14, // 88: aviation.airports.v0.AirportsService.Search:output_type -> aviation.airports.v0.SearchAirportsResponse\n\t5,  // 89: aviation.airports.v0.AirportsService.Create:output_type -> aviation.airports.v0.CreateAirportResponse\n\t3,  // 90: aviation.airports.v0.AirportsService.Update:output_type -> aviation.airports.v0.UpdateAirportResponse\n\t33, // 91: aviation.airports.v0.AirportsService.BatchGetByDesignator:output_type -> aviation.airports.v0.BatchGetByDesignatorResponse\n\t35, // 92: aviation.airports.v0.AirportsService.GetByDesignator:output_type -> aviation.airports.v0.GetByDesignatorResponse\n\t16, // 93: aviation.airports.v0.CitiesService.Search:output_type -> aviation.airports.v0.SearchCitiesResponse\n\t18, // 94: aviation.airports.v0.CitiesService.Get:output_type -> aviation.airports.v0.GetCityResponse\n\t20, // 95: aviation.airports.v0.CitiesService.Create:output_type -> aviation.airports.v0.CreateCityResponse\n\t22, // 96: aviation.airports.v0.CitiesService.Update:output_type -> aviation.airports.v0.UpdateCityResponse\n\t24, // 97: aviation.airports.v0.CountriesService.Search:output_type -> aviation.airports.v0.SearchCountriesResponse\n\t26, // 98: aviation.airports.v0.CountriesService.Get:output_type -> aviation.airports.v0.GetCountryResponse\n\t28, // 99: aviation.airports.v0.CountriesService.Create:output_type -> aviation.airports.v0.CreateCountryResponse\n\t30, // 100: aviation.airports.v0.CountriesService.Update:output_type -> aviation.airports.v0.UpdateCountryResponse\n\t40, // 101: aviation.airports.v0.DesignatorsService.Create:output_type -> aviation.airports.v0.CreateDesignatorResponse\n\t45, // 102: aviation.airports.v0.DesignatorsService.Get:output_type -> aviation.airports.v0.GetDesignatorResponse\n\t42, // 103: aviation.airports.v0.DesignatorsService.Update:output_type -> aviation.airports.v0.UpdateDesignatorResponse\n\t47, // 104: aviation.airports.v0.DesignatorsService.Search:output_type -> aviation.airports.v0.SearchDesignatorsResponse\n\t84, // [84:105] is the sub-list for method output_type\n\t63, // [63:84] is the sub-list for method input_type\n\t63, // [63:63] is the sub-list for extension type_name\n\t63, // [63:63] is the sub-list for extension extendee\n\t0,  // [0:63] is the sub-list for field type_name\n}\n", "n_tokens": 4923, "primary_symbol": "file_airports_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [3715, 3913], "def_symbols": ["file_airports_proto_rawDescGZIP"], "symbols": ["file_airports_proto_rawDescGZIP", "func", "byte", "file_airports_proto_rawDescOnce", "file_airports_proto_rawDescData", "protoimpl", "CompressGZIP", "unsafe", "Slice", "StringData", "file_airports_proto_rawDesc", "len", "return", "var", "file_airports_proto_enumTypes", "make", "EnumInfo", "file_airports_proto_msgTypes", "MessageInfo", "file_airports_proto_goTypes", "any", "Include", "aviation", "airports", "UploadImageRequest_ImageType", "UploadImageRequest", "ImageType", "UpdateAirportRequest", "nil", "UpdateAirportResponse", "CreateAirportRequest", "CreateAirportResponse", "AirportDetailsRequest", "AirportDetailsResponse", "BatchGetRequest", "BatchGetResponse", "AirportByCityRequest", "Airport", "SearchAirportsRequest", "SearchAirportsResponse", "SearchCitiesRequest", "SearchCitiesResponse", "GetCityRequest", "GetCityResponse", "CreateCityRequest", "CreateCityResponse", "UpdateCityRequest", "UpdateCityResponse", "SearchCountriesRequest", "SearchCountriesResponse", "GetCountryRequest", "GetCountryResponse", "CreateCountryRequest", "CreateCountryResponse", "UpdateCountryRequest", "UpdateCountryResponse", "UploadImageResponse", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignatorRequest", "GetByDesignatorResponse", "Country", "City", "Error", "CreateDesignatorRequest", "CreateDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Designator", "GetDesignatorRequest", "GetDesignatorResponse", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "NameEntry", "ShortNameEntry", "DescriptionEntry", "WikipediaUrlEntry", "Airport_Country", "Airport_City", "Airport_TerminalMap", "TerminalMap", "ImagesEntry", "UploadImageRequest_Metadata", "Metadata", "timestamppb", "Timestamp", "google", "protobuf", "file_airports_proto_depIdxs", "int32", "name", "type_name", "shortName", "description", "wikipediaUrl", "airport", "include", "city", "images", "terminalMaps", "createdAt", "updatedAt", "metadata", "result", "country", "validFrom", "validTo", "designator", "type", "AirportsService", "Get", "input_type", "BatchGet", "GetByCity", "UploadImage", "Search", "Create", "Update", "BatchGetByDesignator", "GetByDesignator", "CitiesService", "CountriesService", "DesignatorsService", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "func file_airports_proto_rawDescGZIP() []byte {\n\tfile_airports_proto_rawDescOnce.Do(func() {\n\t\tfile_airports_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_airports_proto_rawDesc), len(file_airports_proto_rawDesc)))\n\t})\n\treturn file_airports_proto_rawDescData\n}\nvar file_airports_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_airports_proto_msgTypes = make([]protoimpl.MessageInfo, 72)\nvar file_airports_proto_goTypes = []any{\n\t(Include)(0),                         // 0: aviation.airports.v0.Include\n\t(UploadImageRequest_ImageType)(0),    // 1: aviation.airports.v0.UploadImageRequest.ImageType\n\t(*UpdateAirportRequest)(nil),         // 2: aviation.airports.v0.UpdateAirportRequest\n\t(*UpdateAirportResponse)(nil),        // 3: aviation.airports.v0.UpdateAirportResponse\n\t(*CreateAirportRequest)(nil),         // 4: aviation.airports.v0.CreateAirportRequest\n\t(*CreateAirportResponse)(nil),        // 5: aviation.airports.v0.CreateAirportResponse\n\t(*AirportDetailsRequest)(nil),        // 6: aviation.airports.v0.AirportDetailsRequest\n\t(*AirportDetailsResponse)(nil),       // 7: aviation.airports.v0.AirportDetailsResponse\n\t(*BatchGetRequest)(nil),       "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#133", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 133, "start_line": 3914, "end_line": 3914, "text": "func init() { file_airports_proto_init() }", "n_tokens": 11, "primary_symbol": "init", "primary_kind": "function", "primary_span": [3914, 3914], "def_symbols": ["init"], "symbols": ["init", "func", "file_airports_proto_init"], "doc_head": "func init() { file_airports_proto_init() }"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#134", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 134, "start_line": 3915, "end_line": 3940, "text": "func file_airports_proto_init() {\n\tif File_airports_proto != nil {\n\t\treturn\n\t}\n\tfile_airports_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[2].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[9].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[10].OneofWrappers = []any{\n\t\t(*UploadImageRequest_Metadata_)(nil),\n\t\t(*UploadImageRequest_Chunk)(nil),\n\t}\n\tfile_airports_proto_msgTypes[11].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[13].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[14].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[17].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[19].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[22].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[30].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[32].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[35].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[44].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[45].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[55].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[56].OneofWrappers = []any{}", "n_tokens": 368, "primary_symbol": "file_airports_proto_init", "primary_kind": "function", "primary_span": [3915, 3940], "def_symbols": ["file_airports_proto_init"], "symbols": ["file_airports_proto_init", "func", "File_airports_proto", "nil", "return", "file_airports_proto_msgTypes", "OneofWrappers", "any", "UploadImageRequest_Metadata_", "UploadImageRequest_Chunk"], "doc_head": "func file_airports_proto_init() {\n\tif File_airports_proto != nil {\n\t\treturn\n\t}\n\tfile_airports_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[2].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[9].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[10].OneofWrappers = []any{\n\t\t(*UploadImageRequest_Metadata_)(nil),\n\t\t(*UploadImageRequest_Chunk)(nil),\n\t}\n\tfile_airports_proto_msgTypes[11].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[13].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[14].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[17].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[19].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[22].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[30].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[32].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[35].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[44].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[45].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[55].OneofWrappers = []any{}\n\tf"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go#135", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/grpc/airports/v0/airports.pb.go", "rel_path": "pkg/grpc/airports/v0/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 135, "start_line": 3941, "end_line": 3960, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: unsafe.Slice(unsafe.StringData(file_airports_proto_rawDesc), len(file_airports_proto_rawDesc)),\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   72,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   4,\n\t\t},\n\t\tGoTypes:           file_airports_proto_goTypes,\n\t\tDependencyIndexes: file_airports_proto_depIdxs,\n\t\tEnumInfos:         file_airports_proto_enumTypes,\n\t\tMessageInfos:      file_airports_proto_msgTypes,\n\t}.Build()\n\tFile_airports_proto = out.File\n\tfile_airports_proto_goTypes = nil\n\tfile_airports_proto_depIdxs = nil\n}\n", "n_tokens": 181, "primary_symbol": "", "primary_kind": "", "primary_span": [3941, 3960], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "unsafe", "Slice", "StringData", "file_airports_proto_rawDesc", "len", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_airports_proto_goTypes", "DependencyIndexes", "file_airports_proto_depIdxs", "EnumInfos", "file_airports_proto_enumTypes", "MessageInfos", "file_airports_proto_msgTypes", "Build", "File_airports_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: unsafe.Slice(unsafe.StringData(file_airports_proto_rawDesc), len(file_airports_proto_rawDesc)),\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   72,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   4,\n\t\t},\n\t\tGoTypes:           file_airports_proto_goTypes,\n\t\tDependencyIndexes: file_airports_proto_depIdxs,\n\t\tEnumInfos:         file_airports_proto_enumTypes,\n\t\tMessageInfos:      file_airports_proto_msgTypes,\n\t}.Build()\n\tFile_airports_proto = out.File\n\tfile_airports_proto_goTypes = nil\n\tfile_airports_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xgrpc/conn.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xgrpc/conn.go", "rel_path": "pkg/xgrpc/conn.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package xgrpc\n\nimport (\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc MustConnect(target string) *grpc.ClientConn {\n\tconn, err := grpc.NewClient(\n\t\ttarget,\n\t\tgrpc.WithDefaultServiceConfig(`{\"loadBalancingConfig\": [{\"round_robin\":{}}]}`),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn conn\n}\n", "n_tokens": 101, "primary_symbol": "MustConnect", "primary_kind": "function", "primary_span": [8, 20], "def_symbols": ["MustConnect"], "symbols": ["MustConnect", "package", "xgrpc", "import", "google", "golang", "org", "grpc", "credentials", "insecure", "func", "target", "string", "ClientConn", "conn", "err", "NewClient", "WithDefaultServiceConfig", "loadBalancingConfig", "round_robin", "WithTransportCredentials", "NewCredentials", "nil", "panic", "return"], "doc_head": "package xgrpc\nimport (\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\nfunc MustConnect(target string) *grpc.ClientConn {\n\tconn, err := grpc.NewClient(\n\t\ttarget,\n\t\tgrpc.WithDefaultServiceConfig(`{\"loadBalancingConfig\": [{\"round_robin\":{}}]}`),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn conn\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xhttp/response.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xhttp/response.go", "rel_path": "pkg/xhttp/response.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "package xhttp\n\n// Pagination represents the pagination metadata\ntype Pagination struct {\n\tLimit int     `json:\"limit\"`\n\tNext  *string `json:\"next\"`\n}\n\n// Metadata contains the information about the response\ntype Metadata struct {\n\tCode       string      `json:\"code\"`\n\tMessage    string      `json:\"message\"`\n\tPagination *Pagination `json:\"pagination,omitempty\"`\n}\n\n// Response is the http response format\ntype Response[T any] struct {\n\tMetadata Metadata `json:\"meta\"`\n\tData     T        `json:\"data\"`\n}\n\n// NewResponse creates a new response\nfunc NewResponse[T any](data T, code string, message string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: data,\n\t}\n}\n", "n_tokens": 171, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["package", "xhttp", "Pagination", "represents", "the", "pagination", "metadata", "type", "struct", "Limit", "int", "json", "limit", "Next", "string", "next", "Metadata", "contains", "information", "about", "response", "Code", "code", "Message", "message", "omitempty", "Response", "http", "format", "any", "meta", "Data", "data", "NewResponse", "creates", "new", "func", "return"], "doc_head": "package xhttp\n// Pagination represents the pagination metadata\ntype Pagination struct {\n\tLimit int     `json:\"limit\"`\n\tNext  *string `json:\"next\"`\n}\n// Metadata contains the information about the response\ntype Metadata struct {\n\tCode       string      `json:\"code\"`\n\tMessage    string      `json:\"message\"`\n\tPagination *Pagination `json:\"pagination,omitempty\"`\n}\n// Response is the http response format\ntype Response[T any] struct {\n\tMetadata Metadata `json:\"meta\"`\n\tData     T        `json:\"data\"`\n}\n// NewResponse creates a new response\nfunc NewResponse[T any](data T, code string, message string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: data,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xhttp/response.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xhttp/response.go", "rel_path": "pkg/xhttp/response.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 64, "text": "// NewPaginatedResponse creates a new paginated response\nfunc NewPaginatedResponse[T any](data T, code, message string, limit int, nextPageToken *string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t\tPagination: &Pagination{\n\t\t\t\tLimit: limit,\n\t\t\t\tNext:  nextPageToken,\n\t\t\t},\n\t\t},\n\t\tData: data,\n\t}\n}\n\ntype ErrResponse struct {\n\tMetadata   Metadata `json:\"meta\"`\n\tData       any      `json:\"data\"`\n\tHttpStatus int      `json:\"-\"`\n}\n\n// NewErrorResponse creates a new error response\nfunc NewErrorResponse(code string, message string) *ErrResponse {\n\treturn &ErrResponse{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: getZero[any](),\n\t}\n}\n", "n_tokens": 189, "primary_symbol": "NewErrorResponse", "primary_kind": "function", "primary_span": [55, 64], "def_symbols": ["NewErrorResponse"], "symbols": ["NewErrorResponse", "NewPaginatedResponse", "creates", "new", "paginated", "response", "func", "any", "data", "code", "message", "string", "limit", "int", "nextPageToken", "Response", "return", "Metadata", "Code", "Message", "Pagination", "Limit", "Next", "Data", "type", "ErrResponse", "struct", "json", "meta", "HttpStatus", "error", "getZero"], "doc_head": "// NewPaginatedResponse creates a new paginated response\nfunc NewPaginatedResponse[T any](data T, code, message string, limit int, nextPageToken *string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t\tPagination: &Pagination{\n\t\t\t\tLimit: limit,\n\t\t\t\tNext:  nextPageToken,\n\t\t\t},\n\t\t},\n\t\tData: data,\n\t}\n}\ntype ErrResponse struct {\n\tMetadata   Metadata `json:\"meta\"`\n\tData       any      `json:\"data\"`\n\tHttpStatus int      `json:\"-\"`\n}\n// NewErrorResponse creates a new error response\nfunc NewErrorResponse(code string, message string) *ErrResponse {\n\treturn &ErrResponse{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: getZero[any](),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xhttp/response.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xhttp/response.go", "rel_path": "pkg/xhttp/response.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 65, "end_line": 85, "text": "// NewErrorResponseWithHttpCode creates a new error response\nfunc NewErrorResponseWithHttpCode(code string, message string, httpStatus int) *ErrResponse {\n\treturn &ErrResponse{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData:       getZero[any](),\n\t\tHttpStatus: httpStatus,\n\t}\n}\n\nfunc (e *ErrResponse) Error() string {\n\treturn e.Metadata.Message\n}\n\nfunc getZero[T any]() T {\n\tvar z T\n\treturn z\n}\n", "n_tokens": 110, "primary_symbol": "NewErrorResponseWithHttpCode", "primary_kind": "function", "primary_span": [66, 85], "def_symbols": ["NewErrorResponseWithHttpCode", "Error"], "symbols": ["NewErrorResponseWithHttpCode", "Error", "creates", "new", "error", "response", "func", "code", "string", "message", "httpStatus", "int", "ErrResponse", "return", "Metadata", "Code", "Message", "Data", "getZero", "any", "HttpStatus", "var"], "doc_head": "// NewErrorResponseWithHttpCode creates a new error response\nfunc NewErrorResponseWithHttpCode(code string, message string, httpStatus int) *ErrResponse {\n\treturn &ErrResponse{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData:       getZero[any](),\n\t\tHttpStatus: httpStatus,\n\t}\n}\nfunc (e *ErrResponse) Error() string {\n\treturn e.Metadata.Message\n}\nfunc getZero[T any]() T {\n\tvar z T\n\treturn z\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/i18n/supported.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/i18n/supported.go", "rel_path": "pkg/i18n/supported.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 40, "text": "package i18n\n\nimport (\n\t\"golang.org/x/text/language\"\n\t\"golang.org/x/text/message\"\n)\n\nvar SupportedLanguages = language.NewMatcher([]language.Tag{\n\tlanguage.English,\n\tlanguage.Dutch,\n\tlanguage.French,\n\tlanguage.German,\n\tlanguage.Italian,\n\tlanguage.Japanese,\n\tlanguage.Korean,\n\tlanguage.Portuguese,\n\tlanguage.Russian,\n\tlanguage.Spanish,\n\tlanguage.Swedish,\n\tlanguage.Thai,\n\tlanguage.Vietnamese,\n\tlanguage.Malay,\n\tlanguage.Chinese,\n\tlanguage.Finnish,\n\tlanguage.Norwegian,\n\tlanguage.Danish,\n})\n\nfunc GetLocaleFromHeader(acceptHeader string) language.Tag {\n\ttags, _, _ := language.ParseAcceptLanguage(acceptHeader)\n\tlocale, _, _ := SupportedLanguages.Match(tags...)\n\treturn locale\n}\n\nfunc Localise(locale language.Tag, text string) string {\n\tp := message.NewPrinter(locale)\n\n\treturn p.Sprintf(text)\n}\n", "n_tokens": 200, "primary_symbol": "GetLocaleFromHeader", "primary_kind": "function", "primary_span": [29, 40], "def_symbols": ["GetLocaleFromHeader", "Localise"], "symbols": ["GetLocaleFromHeader", "Localise", "package", "i18n", "import", "golang", "org", "text", "language", "message", "var", "SupportedLanguages", "NewMatcher", "Tag", "English", "Dutch", "French", "German", "Italian", "Japanese", "Korean", "Portuguese", "Russian", "Spanish", "Swedish", "Thai", "Vietnamese", "Malay", "Chinese", "Finnish", "Norwegian", "Danish", "func", "acceptHeader", "string", "tags", "ParseAcceptLanguage", "locale", "Match", "return", "NewPrinter", "Sprintf"], "doc_head": "package i18n\nimport (\n\t\"golang.org/x/text/language\"\n\t\"golang.org/x/text/message\"\n)\nvar SupportedLanguages = language.NewMatcher([]language.Tag{\n\tlanguage.English,\n\tlanguage.Dutch,\n\tlanguage.French,\n\tlanguage.German,\n\tlanguage.Italian,\n\tlanguage.Japanese,\n\tlanguage.Korean,\n\tlanguage.Portuguese,\n\tlanguage.Russian,\n\tlanguage.Spanish,\n\tlanguage.Swedish,\n\tlanguage.Thai,\n\tlanguage.Vietnamese,\n\tlanguage.Malay,\n\tlanguage.Chinese,\n\tlanguage.Finnish,\n\tlanguage.Norwegian,\n\tlanguage.Danish,\n})\nfunc GetLocaleFromHeader(acceptHeader string) language.Tag {\n\ttags, _, _ := language.ParseAcceptLanguage(acceptHeader)\n\tlocale, _, _ := SupportedLanguages.Match(tags...)\n\treturn locale\n}\nfunc Localise(locale language.Tag, text string) string {\n\tp := message.NewPrinter(locale)\n\treturn p.Sprintf(text)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/i18n/validation.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/i18n/validation.go", "rel_path": "pkg/i18n/validation.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 33, "text": "package i18n\n\nimport (\n\t\"github.com/go-playground/locales/en\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\tenTranslations \"github.com/go-playground/validator/v10/translations/en\"\n)\n\nvar (\n\tTranslator ut.Translator\n)\n\nfunc Register(v *validator.Validate) {\n\tenLocale := en.New()\n\tuni := ut.New(enLocale, enLocale)\n\tTranslator, _ = uni.GetTranslator(\"en\")\n\t_ = enTranslations.RegisterDefaultTranslations(v, Translator)\n}\n\nfunc GetFirstValidationErrorMessage(err error) string {\n\tvar message string\n\tif validationErrors, ok := err.(validator.ValidationErrors); ok {\n\t\tif len(validationErrors) > 0 {\n\t\t\tmessage = validationErrors[0].Translate(Translator)\n\t\t} else {\n\t\t\tmessage = \"The input parameters are invalid.\"\n\t\t}\n\t}\n\n\treturn message\n}\n", "n_tokens": 190, "primary_symbol": "Register", "primary_kind": "function", "primary_span": [14, 33], "def_symbols": ["Register", "GetFirstValidationErrorMessage"], "symbols": ["Register", "GetFirstValidationErrorMessage", "package", "i18n", "import", "github", "com", "playground", "locales", "universal", "translator", "validator", "v10", "enTranslations", "translations", "var", "Translator", "func", "Validate", "enLocale", "New", "uni", "GetTranslator", "RegisterDefaultTranslations", "err", "error", "string", "message", "validationErrors", "ValidationErrors", "len", "Translate", "else", "The", "input", "parameters", "are", "invalid", "return"], "doc_head": "package i18n\nimport (\n\t\"github.com/go-playground/locales/en\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\tenTranslations \"github.com/go-playground/validator/v10/translations/en\"\n)\nvar (\n\tTranslator ut.Translator\n)\nfunc Register(v *validator.Validate) {\n\tenLocale := en.New()\n\tuni := ut.New(enLocale, enLocale)\n\tTranslator, _ = uni.GetTranslator(\"en\")\n\t_ = enTranslations.RegisterDefaultTranslations(v, Translator)\n}\nfunc GetFirstValidationErrorMessage(err error) string {\n\tvar message string\n\tif validationErrors, ok := err.(validator.ValidationErrors); ok {\n\t\tif len(validationErrors) > 0 {\n\t\t\tmessage = validationErrors[0].Translate(Translator)\n\t\t} else {\n\t\t\tmessage = \"The input parameters are invalid.\"\n\t\t}\n\t}\n\treturn message\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/config.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/config.go", "rel_path": "pkg/xaws/config.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package xaws\n\nimport (\n\t\"context\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\n\ntype (\n\tConfig struct {\n\t\tAccessKeyID     string   `mapstructure:\"access-key-id\"`\n\t\tSecretAccessKey string   `mapstructure:\"secret-access-key\"`\n\t\tSessionToken    string   `mapstructure:\"session-token\"`\n\t\tRegion          string   `mapstructure:\"region\"`\n\t\tEndpointURL     string   `mapstructure:\"endpoint-url\"`\n\t\tS3              S3Config `mapstructure:\"s3\"`\n\t}\n\n\tS3Config struct {\n\t\tUsePathStyle bool `mapstructure:\"use-path-style\"`\n\t}\n)\n", "n_tokens": 156, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 25], "def_symbols": [], "symbols": ["package", "xaws", "import", "context", "github", "com", "aws", "sdk", "config", "credentials", "type", "Config", "struct", "AccessKeyID", "string", "mapstructure", "access", "key", "SecretAccessKey", "secret", "SessionToken", "session", "token", "Region", "region", "EndpointURL", "endpoint", "url", "S3Config", "UsePathStyle", "bool", "use", "path", "style"], "doc_head": "package xaws\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\ntype (\n\tConfig struct {\n\t\tAccessKeyID     string   `mapstructure:\"access-key-id\"`\n\t\tSecretAccessKey string   `mapstructure:\"secret-access-key\"`\n\t\tSessionToken    string   `mapstructure:\"session-token\"`\n\t\tRegion          string   `mapstructure:\"region\"`\n\t\tEndpointURL     string   `mapstructure:\"endpoint-url\"`\n\t\tS3              S3Config `mapstructure:\"s3\"`\n\t}\n\tS3Config struct {\n\t\tUsePathStyle bool `mapstructure:\"use-path-style\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/config.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/config.go", "rel_path": "pkg/xaws/config.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 38, "text": "func NewConfig(accessKey, secretKey, sessionToken, region, endpointURL string, s3usePathStyle bool) *Config {\n\treturn &Config{\n\t\tAccessKeyID:     accessKey,\n\t\tSecretAccessKey: secretKey,\n\t\tSessionToken:    sessionToken,\n\t\tRegion:          region,\n\t\tEndpointURL:     endpointURL,\n\t\tS3: S3Config{\n\t\t\tUsePathStyle: s3usePathStyle,\n\t\t},\n\t}\n}\n", "n_tokens": 100, "primary_symbol": "NewConfig", "primary_kind": "function", "primary_span": [26, 38], "def_symbols": ["NewConfig"], "symbols": ["NewConfig", "func", "accessKey", "secretKey", "sessionToken", "region", "endpointURL", "string", "s3usePathStyle", "bool", "Config", "return", "AccessKeyID", "SecretAccessKey", "SessionToken", "Region", "EndpointURL", "S3Config", "UsePathStyle"], "doc_head": "func NewConfig(accessKey, secretKey, sessionToken, region, endpointURL string, s3usePathStyle bool) *Config {\n\treturn &Config{\n\t\tAccessKeyID:     accessKey,\n\t\tSecretAccessKey: secretKey,\n\t\tSessionToken:    sessionToken,\n\t\tRegion:          region,\n\t\tEndpointURL:     endpointURL,\n\t\tS3: S3Config{\n\t\t\tUsePathStyle: s3usePathStyle,\n\t\t},\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/config.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/config.go", "rel_path": "pkg/xaws/config.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 39, "end_line": 66, "text": "func LoadAWSConfig(ctx context.Context, cfg *Config) (aws.Config, error) {\n\tvar optFns []func(*config.LoadOptions) error\n\n\tif cfg.AccessKeyID != \"\" || cfg.SecretAccessKey != \"\" || cfg.SessionToken != \"\" {\n\t\toptFns = append(optFns, config.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\tcfg.AccessKeyID, cfg.SecretAccessKey, cfg.SessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tif cfg.Region != \"\" {\n\t\toptFns = append(optFns, config.WithRegion(cfg.Region))\n\t}\n\n\tif cfg.EndpointURL != \"\" {\n\t\toptFns = append(optFns, config.WithBaseEndpoint(cfg.EndpointURL))\n\t}\n\n\tawsCfg, err := config.LoadDefaultConfig(ctx, optFns...)\n\n\tif err != nil {\n\t\treturn aws.Config{}, err\n\t}\n\n\treturn awsCfg, nil\n}\n", "n_tokens": 187, "primary_symbol": "LoadAWSConfig", "primary_kind": "function", "primary_span": [39, 66], "def_symbols": ["LoadAWSConfig"], "symbols": ["LoadAWSConfig", "func", "ctx", "context", "Context", "cfg", "Config", "aws", "error", "var", "optFns", "config", "LoadOptions", "AccessKeyID", "SecretAccessKey", "SessionToken", "append", "WithCredentialsProvider", "credentials", "NewStaticCredentialsProvider", "Region", "WithRegion", "EndpointURL", "WithBaseEndpoint", "awsCfg", "err", "LoadDefaultConfig", "nil", "return"], "doc_head": "func LoadAWSConfig(ctx context.Context, cfg *Config) (aws.Config, error) {\n\tvar optFns []func(*config.LoadOptions) error\n\tif cfg.AccessKeyID != \"\" || cfg.SecretAccessKey != \"\" || cfg.SessionToken != \"\" {\n\t\toptFns = append(optFns, config.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\tcfg.AccessKeyID, cfg.SecretAccessKey, cfg.SessionToken,\n\t\t\t),\n\t\t))\n\t}\n\tif cfg.Region != \"\" {\n\t\toptFns = append(optFns, config.WithRegion(cfg.Region))\n\t}\n\tif cfg.EndpointURL != \"\" {\n\t\toptFns = append(optFns, config.WithBaseEndpoint(cfg.EndpointURL))\n\t}\n\tawsCfg, err := config.LoadDefaultConfig(ctx, optFns...)\n\tif err != nil {\n\t\treturn aws.Config{}, err\n\t}\n\treturn awsCfg, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/s3.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_live_flights_service-fe0676d3f5f0/pkg/xaws/s3.go", "rel_path": "pkg/xaws/s3.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 11, "text": "package xaws\n\nimport (\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\n\nfunc NewS3ClientFromConfig(cfg aws.Config, optFns ...func(options *s3.Options)) *s3.Client {\n\treturn s3.NewFromConfig(cfg, optFns...)\n}\n", "n_tokens": 71, "primary_symbol": "NewS3ClientFromConfig", "primary_kind": "function", "primary_span": [8, 11], "def_symbols": ["NewS3ClientFromConfig"], "symbols": ["NewS3ClientFromConfig", "package", "xaws", "import", "github", "com", "aws", "sdk", "service", "func", "cfg", "Config", "optFns", "options", "Options", "Client", "return", "NewFromConfig"], "doc_head": "package xaws\nimport (\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\nfunc NewS3ClientFromConfig(cfg aws.Config, optFns ...func(options *s3.Options)) *s3.Client {\n\treturn s3.NewFromConfig(cfg, optFns...)\n}"}
