{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/main.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/main.go", "rel_path": "main.go", "module": "main", "ext": "go", "chunk_number": 1, "symbols": ["main", "foreca", "proxy", "run", "root", "package", "impalastudios", "import", "weather", "panic", "func"], "ast_kind": "function_or_method", "text": "package main\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)\n\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "n_tokens": 43, "byte_len": 149, "file_sha1": "cdb7cd243d9d222054a2fb8520354b421e7cfa67", "start_line": 1, "end_line": 12}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go", "rel_path": "cmd/root.go", "module": "cmd.root", "ext": "go", "chunk_number": 1, "symbols": ["RunRootCmd", "temp", "foreca", "viper", "access", "weather", "time", "cobra", "whether", "emit", "debug", "run", "root", "memcached", "secret", "session", "rate", "already", "return", "entrypoint", "import", "error", "dynamodb", "persistent", "flags", "short", "automatic", "env", "string", "name", "expiration", "proxy", "version", "github", "provider", "stringp", "forecasts", "format", "mappings", "descriptions", "amount", "false", "duration", "forecast", "command", "table", "strategy", "address", "encoding", "requests"], "ast_kind": "function_or_method", "text": "package cmd\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n\n// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")\n\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times to request the forecasts about.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.temp-unit\", \"C\", \"The default temperature unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.wind-unit\", \"KMH\", \"The default wind speed unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.lang\", \"en\", \"The locale of the forecast's descriptions.\")\n\n\tcmd.PersistentFlags().String(\"mappings.dynamodb.table-name\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"memcached.address\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}\n", "n_tokens": 558, "byte_len": 2343, "file_sha1": "09b684dbbc03b786ea5900d22f4a22ce67c614d7", "start_line": 1, "end_line": 51}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "module": "cmd.serve.grpc", "ext": "go", "chunk_number": 1, "symbols": ["InterceptorLogger", "newServeGrpcCommand", "foreca", "opentelemetry", "recovery", "google", "viper", "weather", "time", "otelaws", "cobra", "logger", "pre", "run", "metadata", "hashicorp", "make", "return", "clients", "otelgrpcmetric", "contrib", "port", "bool", "import", "level", "warn", "error", "persistent", "flags", "short", "runServeGrpc", "new", "meter", "composite", "temp", "application", "tracer", "quit", "baggage", "memcached", "forecasts", "access", "found", "get", "duration", "tempunit", "down", "debug", "secret", "wrap"], "ast_kind": "function_or_method", "text": "package serve\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\trequestid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\totelgrpctrace \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\totelgrpcmetric \"go.impalastudios.com/otel/grpc\"\n\tgrpcv0 \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/handlers/grpc/v0\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\n\t\tlogger := l.With(f...)\n\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}\n\nfunc newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\n\treturn cmd\n}\n", "n_tokens": 821, "byte_len": 2790, "file_sha1": "62128ca5186bdbb67f5d7f6bc59cc1662a4e7c38", "start_line": 1, "end_line": 95}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "module": "cmd.serve.grpc", "ext": "go", "chunk_number": 2, "symbols": ["runServeGrpc", "new", "meter", "composite", "temp", "application", "foreca", "tracer", "baggage", "recovery", "quit", "viper", "memcached", "forecasts", "access", "otelaws", "time", "weather", "found", "get", "duration", "tempunit", "cobra", "down", "metadata", "debug", "secret", "make", "wrap", "session", "InterceptorLogger", "newServeGrpcCommand", "opentelemetry", "google", "logger", "pre", "run", "hashicorp", "fatal", "service", "name", "return", "clients", "otelgrpcmetric", "contrib", "port", "bool", "import", "set", "level"], "ast_kind": "function_or_method", "text": "func runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n\n\tawsCfg := aws.GetConfig(\n\t\tviper.GetString(\"aws.access-key-id\"),\n\t\tviper.GetString(\"aws.secret-access-key\"),\n\t\tviper.GetString(\"aws.session-token\"),\n\t\tviper.GetString(\"aws.region\"),\n\t\tviper.GetString(\"aws.endpoint-url\"),\n\t)\n\totelaws.AppendMiddlewares(&awsCfg.APIOptions)\n\n\tddb := aws.NewDynamoDbClientFromConfig(awsCfg)\n\n\tmappingsCache, err := lru.New[int, *foreca.Mapping](5_000)\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tmappingsRepository := adapters.NewMappingDynamoDBRepository(\n\t\tviper.GetString(\"mappings.dynamodb.table-name\"),\n\t\tddb,\n\t\tmappingsCache,\n\t)\n\n\tmemcachedRateLimiterConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tlimiter := ratelimit.NewSingleThreadLimiter(\n\t\tviper.GetInt64(\"foreca.requests-per-second\"),\n\t\ttime.Second,\n\t\tratelimit.NewMemcachedStorage(memcache.NewRawBinaryClient(0, memcachedRateLimiterConn), \"weather:proxies:\"),\n\t)\n\n\tlimiter.Start()\n\n\tforecaClient := clients.NewForecaClient(\n\t\t&http.Client{Timeout: 5 * time.Second},\n\t\tviper.GetString(\"foreca.endpoint-url\"),\n\t\tmap[string]string{\n\t\t\t\"format\":   viper.GetString(\"foreca.query.default.format\"),\n\t\t\t\"ftimes\":   viper.GetString(\"foreca.query.default.ftimes\"),\n\t\t\t\"tempunit\": viper.GetString(\"foreca.query.default.temp-unit\"),\n\t\t\t\"windunit\": viper.GetString(\"foreca.query.default.wind-unit\"),\n\t\t\t\"lang\":     viper.GetString(\"foreca.query.default.lang\"),\n\t\t},\n\t\tlimiter,\n\t\tclients.NewTransformer(),\n\t)\n\n\tmemcachedForecastsConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tforecastService := foreca.NewService(\n\t\tforecaClient,\n\t\tmappingsRepository,\n\t\tcache.NewMemcached(memcache.NewRawBinaryClient(1, memcachedForecastsConn)),\n\t\t\"weather:proxies:foreca:\",\n\t\tviper.GetDuration(\"foreca.expiration-duration\"),\n\t)\n\n\trecoveryOpts := []recovery.Option{\n\t\trecovery.WithRecoveryHandler(func(p any) error {\n\t\t\treturn status.Error(codes.Internal, \"We cannot serve your request right now. Please try again later.\")\n\t\t}),\n\t}\n\tloggingOpts := []logging.Option{\n\t\tlogging.WithLogOnEvents(logging.StartCall),\n\t\tlogging.WithFieldsFromContextAndCallMeta(func(ctx context.Context, c interceptors.CallMeta) logging.Fields {\n\t\t\tvar requestID string\n\t\t\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\t\t\tif m, found := md[requestid.MetadataKey]; found && len(m) > 0 {\n\t\t\t\t\trequestID = m[0]\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn logging.Fields{\"request_id\", requestID}\n\t\t}),\n\t}\n\tserver := grpc.NewServer(\n\t\tgrpc.StatsHandler(otelgrpctrace.NewServerHandler()),\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\totelgrpcmetric.UnaryServerInterceptor(),\n\t\t\trequestid.NewServerUnaryInterceptor(),\n\t\t\tlogging.UnaryServerInterceptor(InterceptorLogger(logger), loggingOpts...),\n\t\t\trecovery.UnaryServerInterceptor(recoveryOpts...),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\totelgrpcmetric.StreamServerInterceptor(),\n\t\t),\n\t)\n\tserverV0 := grpcv0.NewServer(forecastService)\n\tpbv0.RegisterForecaProxyServer(server, serverV0)\n\n\treflection.Register(server)\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", viper.GetInt(\"app.grpc.port\")))\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tgo func(s *grpc.Server, lis *net.Listener) {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := s.Serve(*lis); err != nil {\n\t\t\tlogger.Fatal(fmt.Sprintf(\"Failed to serve gRPC: %v\", err))\n\t\t}\n\t}(server, &listener)\n\n\ts := <-quit\n\tlogger.Info(fmt.Sprintf(\"Received signal %v\", s))\n\n\tserver.GracefulStop()\n\tlimiter.Stop()\n\tif err := tp.Shutdown(cmd.Context()); err != nil {\n\t\tlog.Error(context.TODO(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tclose(quit)\n\n\tlogger.Info(\"Application shutdown gracefully.\")\n\n\treturn nil\n}\n", "n_tokens": 1242, "byte_len": 4888, "file_sha1": "62128ca5186bdbb67f5d7f6bc59cc1662a4e7c38", "start_line": 96, "end_line": 250}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "module": "cmd.serve.root", "ext": "go", "chunk_number": 1, "symbols": ["New", "tracer", "duration", "package", "github", "otel", "time", "will", "cobra", "serve", "localhost", "spf", "spf13", "command", "return", "interval", "metrics", "import", "second", "add", "meter", "reported", "persistent", "flags", "short", "collector", "new", "endpoint", "which", "func", "tracing", "string"], "ast_kind": "function_or_method", "text": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\n\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeGrpcCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}\n", "n_tokens": 139, "byte_len": 565, "file_sha1": "17ce7738a340b88003b76db385afcda865a715f2", "start_line": 1, "end_line": 22}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "module": "internal.foreca.models", "ext": "go", "chunk_number": 1, "symbols": ["String", "IsFalling", "IsSteady", "IsRising", "Mapping", "Pressure", "WeatherCondition", "WindDirection", "Wind", "WindGust", "CurrentCondition", "DailyCondition", "HourlyCondition", "Forecast", "CachedForecast", "weather", "code", "foreca", "rising", "isrising", "temperature", "feels", "condition", "humidity", "percentage", "struct", "partlycloudy", "falling", "mbar", "direction", "snow", "day", "hourly", "conditions", "return", "wind", "epoch", "bool", "max", "night", "gust", "iota", "timezone", "chancesnow", "steady", "provider", "providerid", "mapping", "string", "isfalling"], "ast_kind": "class_or_type", "text": "package foreca\n\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\n\ntype PressureTrend int\n\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\n\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\n\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\n\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\n\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}\n\nfunc (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\n\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)\n\ntype WeatherCode string\n\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\n\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\n\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}\n\ntype WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}\n\ntype CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n\ntype DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}\n\ntype HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\n\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 1084, "byte_len": 4487, "file_sha1": "2f37456d61c998729caaf07ae4cc84b53c3605f1", "start_line": 1, "end_line": 140}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "module": "internal.foreca.service", "ext": "go", "chunk_number": 1, "symbols": ["NewService", "GetForecastForLocation", "getCacheKeyForLocation", "Service", "mocks", "foreca", "opentelemetry", "unix", "found", "weather", "time", "struct", "span", "kind", "wrap", "service", "unmarshal", "provider", "client", "true", "interface", "throttled", "return", "attribute", "load", "location", "import", "item", "unsupported", "error", "getSingleFlightKey", "expirableCacheItem", "locations", "marshal", "cache", "expiration", "group", "err", "request", "timezone", "mapping", "trace", "providerid", "start", "errors", "generate", "github", "byte", "info", "mappings"], "ast_kind": "class_or_type", "text": "package foreca\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}\n\n\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\n\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}\n\nfunc NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}\n\nfunc (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}\n\n\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}\n\nfunc (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\n", "n_tokens": 1191, "byte_len": 4729, "file_sha1": "a08967d5c2fe0bdd86cdd27f3deced15a2f904d5", "start_line": 1, "end_line": 164}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "module": "internal.foreca.service", "ext": "go", "chunk_number": 2, "symbols": ["getSingleFlightKey", "expirableCacheItem", "mapping", "expirable", "cache", "json", "return", "foreca", "sprintf", "forecast", "type", "expires", "unix", "struct", "locations", "get", "single", "service", "func", "int", "int64", "string", "provider", "providerid", "NewService", "GetForecastForLocation", "getCacheKeyForLocation", "Service", "mocks", "opentelemetry", "found", "weather", "time", "span", "kind", "wrap", "unmarshal", "client", "true", "interface", "throttled", "attribute", "load", "location", "import", "item", "unsupported", "error", "marshal", "expiration"], "ast_kind": "class_or_type", "text": "func (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\n\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}\n", "n_tokens": 62, "byte_len": 239, "file_sha1": "a08967d5c2fe0bdd86cdd27f3deced15a2f904d5", "start_line": 165, "end_line": 173}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "module": "internal.foreca.service_test", "ext": "go", "chunk_number": 1, "symbols": ["SetupSuite", "TestGetForecastForLocationMappingError", "TestGetForecastForLocationInvalidLocation", "TestGetForecastForLocationNonCacheForecastError", "TestGetForecastForLocationSettingCacheError", "mapping", "timezone", "mocks", "mock", "controller", "gomock", "miss", "errors", "foreca", "type", "new", "mockcache", "test", "cache", "client", "testify", "package", "github", "weather", "context", "time", "suite", "expect", "provider", "invalid", "TestGetForecastForLocationFromCache", "TestService", "unix", "struct", "make", "locations", "hourly", "conditions", "load", "location", "import", "item", "setup", "unsupported", "error", "uber", "internal", "return", "condition", "string"], "ast_kind": "class_or_type", "text": "package foreca_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n\nfunc (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n\nfunc (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}\n\nfunc (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}\n\nfunc (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 1039, "byte_len": 3937, "file_sha1": "bc932d2487b82b02dccb90154fe1da321723b3a3", "start_line": 1, "end_line": 140}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "module": "internal.foreca.service_test", "ext": "go", "chunk_number": 2, "symbols": ["TestGetForecastForLocationFromCache", "TestService", "mapping", "mocks", "mock", "controller", "gomock", "foreca", "cache", "client", "new", "mockcache", "test", "value", "unix", "weather", "time", "provider", "context", "expect", "times", "byte", "todo", "testing", "suite", "mappings", "locations", "daily", "conditions", "amsterdam", "SetupSuite", "TestGetForecastForLocationMappingError", "TestGetForecastForLocationInvalidLocation", "TestGetForecastForLocationNonCacheForecastError", "TestGetForecastForLocationSettingCacheError", "struct", "make", "hourly", "load", "location", "import", "item", "setup", "unsupported", "error", "uber", "internal", "timezone", "return", "condition"], "ast_kind": "function_or_method", "text": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n\nfunc TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}\n", "n_tokens": 387, "byte_len": 1368, "file_sha1": "bc932d2487b82b02dccb90154fe1da321723b3a3", "start_line": 141, "end_line": 184}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go", "rel_path": "internal/foreca/errors.go", "module": "internal.foreca.errors", "ext": "go", "chunk_number": 1, "symbols": ["request", "errors", "foreca", "location", "err", "package", "mapping", "import", "found", "throttled"], "ast_kind": "imports", "text": "package foreca\n\nimport \"errors\"\n\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)\n", "n_tokens": 50, "byte_len": 207, "file_sha1": "36158692dc11df6f4081aa70adfc608e052f9fbb", "start_line": 1, "end_line": 10}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "module": "internal.foreca.mocks.service_mocks", "ext": "go", "chunk_number": 1, "symbols": ["NewMockproviderClient", "EXPECT", "GetForecastForLocation", "NewMockmappingsRepository", "Get", "NewMockcacheClient", "Set", "MockproviderClient", "MockproviderClientMockRecorder", "MockmappingsRepository", "MockmappingsRepositoryMockRecorder", "MockcacheClient", "MockcacheClientMockRecorder", "mocks", "foreca", "mockmappings", "repository", "caller", "weather", "time", "instance", "expected", "controller", "expect", "recorder", "mockcache", "client", "struct", "service", "provider", "interface", "ret", "ret0", "generated", "return", "import", "item", "error", "record", "call", "internal", "returns", "mapping", "cache", "byte", "type", "typeof", "destination", "ret1", "edit"], "ast_kind": "class_or_type", "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}\n\n// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}\n\n// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}\n\n// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}\n\n// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}\n\n// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 1156, "byte_len": 4601, "file_sha1": "341cbc1f57b7a368d9db654b4f367667298afae7", "start_line": 1, "end_line": 143}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "module": "internal.foreca.mocks.service_mocks", "ext": "go", "chunk_number": 2, "symbols": ["Set", "type", "typeof", "gomock", "return", "call", "record", "mockcache", "client", "mock", "helper", "ctrl", "reflect", "expected", "func", "indicates", "value", "NewMockproviderClient", "EXPECT", "GetForecastForLocation", "NewMockmappingsRepository", "Get", "NewMockcacheClient", "MockproviderClient", "MockproviderClientMockRecorder", "MockmappingsRepository", "MockmappingsRepositoryMockRecorder", "MockcacheClient", "MockcacheClientMockRecorder", "mocks", "foreca", "mockmappings", "repository", "caller", "weather", "time", "instance", "controller", "expect", "recorder", "struct", "service", "provider", "interface", "ret", "ret0", "generated", "import", "item", "error"], "ast_kind": "function_or_method", "text": "// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}\n", "n_tokens": 69, "byte_len": 262, "file_sha1": "341cbc1f57b7a368d9db654b4f367667298afae7", "start_line": 144, "end_line": 149}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "module": "internal.foreca.adapters.mapping_dynamodb_repository_test", "ext": "go", "chunk_number": 1, "symbols": ["SetupSuite", "TestGetDynamoError", "TestGetNoMapping", "TestGetNoCacheMapping", "mocks", "foreca", "weather", "controller", "expect", "struct", "make", "table", "name", "client", "get", "item", "return", "attribute", "value", "import", "setup", "suite", "error", "dynamodb", "uber", "internal", "timezone", "mapping", "string", "provider", "TestGetCachedMapping", "TestMappingsRepository", "true", "providerid", "mock", "errors", "github", "mappings", "test", "testing", "false", "new", "proxy", "equal", "service", "mockcache", "mockmapping", "err", "values", "opt"], "ast_kind": "class_or_type", "text": "package adapters_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\n\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n", "n_tokens": 1057, "byte_len": 4001, "file_sha1": "4dbd08a7a3e54935ccd87e4d8ea07d159a8b7094", "start_line": 1, "end_line": 121}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "module": "internal.foreca.adapters.mapping_dynamodb_repository_test", "ext": "go", "chunk_number": 2, "symbols": ["TestGetCachedMapping", "TestMappingsRepository", "mapping", "mocks", "mock", "controller", "gomock", "foreca", "adapters", "test", "get", "cache", "context", "mappings", "expect", "times", "todo", "func", "testing", "suite", "item", "dynamo", "client", "amsterdam", "true", "europe", "equal", "assert", "new", "mockcache", "SetupSuite", "TestGetDynamoError", "TestGetNoMapping", "TestGetNoCacheMapping", "weather", "struct", "make", "table", "name", "return", "attribute", "value", "import", "setup", "error", "dynamodb", "uber", "internal", "timezone", "string"], "ast_kind": "function_or_method", "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n\nfunc TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}\n", "n_tokens": 224, "byte_len": 794, "file_sha1": "4dbd08a7a3e54935ccd87e4d8ea07d159a8b7094", "start_line": 122, "end_line": 152}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "module": "internal.foreca.adapters.mapping_dynamodb_repository", "ext": "go", "chunk_number": 1, "symbols": ["NewMappingDynamoDBRepository", "Get", "mappingDynamoDB", "MappingDynamoDBRepository", "mocks", "attributevalue", "foreca", "opentelemetry", "found", "weather", "dynamodbav", "struct", "wrap", "table", "name", "client", "interface", "true", "unmarshal", "get", "item", "return", "attribute", "bool", "import", "resp", "marshal", "map", "warn", "error", "dynamodb", "internal", "timezone", "mapping", "dynamo", "provider", "providerid", "trace", "string", "start", "errors", "generate", "github", "destination", "span", "false", "proxy", "params", "source", "service"], "ast_kind": "class_or_type", "text": "package adapters\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}\n\n//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)\n\ntype MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\n\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}\n\nfunc (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}\n\n\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\n\tspan.SetAttributes(attribute.Bool(\"cache_hit\", false))\n\n\tm := &foreca.Mapping{\n\t\tID:         i.ID,\n\t\tProviderID: i.ProviderID,\n\t\tTimezone:   i.Timezone,\n\t}\n\tr.cache.Add(id, m)\n\n\treturn m, nil\n}\n", "n_tokens": 870, "byte_len": 3230, "file_sha1": "4adbbfc57afd1b0231eadc71d1e1cef0b70ff375", "start_line": 1, "end_line": 106}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "module": "internal.foreca.adapters.mocks.mapping_dynamodb_repository_mocks", "ext": "go", "chunk_number": 1, "symbols": ["NewMockmappingDynamoDBClient", "EXPECT", "GetItem", "Add", "Get", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "mocks", "append", "gomock", "opt", "fns", "object", "range", "type", "mock", "caller", "arg", "arg1", "package", "method", "github", "instance", "expected", "context", "reflect", "controller", "creates", "recorder", "expect", "indicate", "indicates", "typeof", "command", "func", "cache", "call", "mockmapping", "dynamo", "destination", "mapping", "struct", "ctrl", "ret", "ret1", "edit", "gen", "mockgen", "allows", "get"], "ast_kind": "class_or_type", "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}\n\n// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}\n\n// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}\n\n// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}\n\n// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}\n\n// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}\n", "n_tokens": 1022, "byte_len": 3684, "file_sha1": "2036349aefb078f39d300c95c25c277b5d33cbb8", "start_line": 1, "end_line": 114}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 1, "symbols": ["SetupSuite", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "mocks", "bytes", "foreca", "temperature", "feels", "current", "condition", "unix", "weather", "time", "expected", "controller", "clients", "test", "humidity", "percentage", "struct", "daily", "forecast", "interface", "direction", "transformer", "wind", "new", "epoch", "load", "location", "TestTransformWithHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformWithHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestAllConditions", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "TestGetForecastForLocationValid", "TestForecaClient", "transform", "expect", "year", "make", "cloudy", "snow"], "ast_kind": "class_or_type", "text": "package clients_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}\n\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}\n\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}\n\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\n\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}\n\nfunc (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\n\tsuite.Assert().Nil(cc)\n}\n\nfunc (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 1035, "byte_len": 3931, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 1, "end_line": 147}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 2, "symbols": ["TestTransformWithHourlyCondition", "SetupSuite", "daytime", "format", "sunset", "dew", "point", "overcast", "foreca", "weather", "condition", "wind", "timestamp", "current", "temperature", "feels", "speed", "cloudy", "unix", "time", "expected", "gust", "month", "mostlycloudy", "heat", "index", "test", "transform", "visibility", "suite", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformWithHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestAllConditions", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "TestGetForecastForLocationValid", "TestForecaClient", "mocks", "bytes", "controller", "expect", "clients"], "ast_kind": "function_or_method", "text": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         1,\n\t\tPrecipitationNextHour: 1,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\tCode:        \"mostlycloudy\",\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -2.4,\n\t\tHumidityPercentage:   80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n\nfunc (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 798, "byte_len": 2648, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 148, "end_line": 248}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 3, "symbols": ["TestTransformMissingHourlyConditions", "sunset", "speed", "foreca", "wind", "timestamp", "format", "precipitation", "night", "unix", "day", "weather", "condition", "time", "expected", "sunrise", "suite", "epoch", "test", "transform", "daily", "forecast", "snow", "direction", "code", "description", "clear", "index", "uvindex", "transformer", "SetupSuite", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformWithHourlyCondition", "TestTransformWithHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestAllConditions", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "TestGetForecastForLocationValid", "TestForecaClient", "mocks", "bytes", "temperature", "feels"], "ast_kind": "function_or_method", "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 470, "byte_len": 1675, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 249, "end_line": 301}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 4, "symbols": ["TestTransformWithHourlyConditions", "SetupSuite", "daytime", "format", "sunset", "speed", "foreca", "wind", "timestamp", "temperature", "feels", "test", "transform", "precipitation", "night", "unix", "day", "hourly", "forecast", "weather", "condition", "time", "d000", "expected", "month", "sunrise", "suite", "epoch", "humidity", "percentage", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformWithHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestAllConditions", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "TestGetForecastForLocationValid", "TestForecaClient", "mocks", "bytes", "current", "controller", "expect"], "ast_kind": "function_or_method", "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(2 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           1,\n\t\tMaxTemperature:           4,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0,\n\t\tPrecipitationNight:       0,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 66,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n\nfunc (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}\n", "n_tokens": 864, "byte_len": 3153, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 302, "end_line": 400}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 5, "symbols": ["TestTransformHourlyForecast", "SetupSuite", "TestEmptyResponse", "TestOnlyCurrentCondition", "foreca", "temperature", "feels", "unix", "weather", "condition", "time", "expected", "humidity", "percentage", "year", "direction", "cloudy", "hourly", "conditions", "transformer", "clients", "wind", "epoch", "load", "location", "setup", "suite", "gust", "daytime", "format", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformWithHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformWithHourlyConditions", "TestAllConditions", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "TestGetForecastForLocationValid", "TestForecaClient", "mocks", "bytes", "current", "test", "transform", "controller", "expect"], "ast_kind": "function_or_method", "text": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.78,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tHumidityPercentage: 82,\n\t\tUVIndex:            0,\n\t}\n\n\tsuite.Assert().Equal(expected, hc)\n}\n\nfunc (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n\nfunc (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}\n\nfunc (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 1176, "byte_len": 3917, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 401, "end_line": 555}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 6, "symbols": ["TestAllConditions", "foreca", "temperature", "feels", "unix", "weather", "condition", "time", "expected", "humidity", "percentage", "direction", "cloudy", "hourly", "conditions", "snow", "day", "transformer", "clients", "mostly", "wind", "epoch", "max", "night", "gust", "daytime", "format", "speed", "overcast", "suite", "SetupSuite", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformWithHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformWithHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "TestGetForecastForLocationValid", "TestForecaClient", "mocks", "bytes", "current", "test"], "ast_kind": "function_or_method", "text": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Add(24 * time.Hour).Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"SW\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tSunriseTime:              suite.sunrise.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"mostlysunny\",\n\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t},\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -2.4,\n\t\t\tHumidityPercentage:   80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions: []*foreca.DailyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\t\t\tMinTemperature:           1,\n\t\t\t\tMaxTemperature:           4,\n\t\t\t\tPrecipitation:            0.4,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 66,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.Add(24 * time.Hour).UTC().Unix(),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\t\t\tDegrees:      225,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 0,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Add(24 * time.Hour).Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Add(24 * time.Hour).Unix(),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*foreca.HourlyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.UTC().Unix(),\n\t\t\t\tTemperature:          1,\n\t\t\t\tTemperatureFeelsLike: -4,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 14,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1017.46,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 58,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.Add(1 * time.Hour).UTC().Unix(),\n\t\t\t\tTemperature:          4,\n\t\t\t\tTemperatureFeelsLike: -1,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 23,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1019.77,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 74,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t},\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 2093, "byte_len": 7247, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 556, "end_line": 798}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 7, "symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "mock", "controller", "mocks", "gomock", "response", "foreca", "errors", "acquire", "test", "get", "bytes", "overcast", "http", "client", "fc1h", "unix", "partly", "cloudy", "error", "erroris", "ratelimit", "weather", "time", "context", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformWithHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformWithHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestAllConditions", "TestGetForecastForLocationValid", "TestForecaClient", "temperature", "feels", "current", "condition", "transform", "expected", "expect", "clients", "humidity"], "ast_kind": "function_or_method", "text": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().Nil(f.CurrentCondition)\n\tsuite.Assert().Nil(f.DailyConditions)\n\tsuite.Assert().Nil(f.HourlyConditions)\n}\n", "n_tokens": 1114, "byte_len": 3923, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 799, "end_line": 924}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "module": "internal.foreca.adapters.clients.foreca_client_test", "ext": "go", "chunk_number": 8, "symbols": ["TestGetForecastForLocationValid", "TestForecaClient", "mocks", "response", "mock", "controller", "bytes", "overcast", "fc1h", "partly", "acquire", "gomock", "foreca", "http", "client", "current", "condition", "cloudy", "unix", "hourly", "forecast", "weather", "time", "context", "status", "code", "expect", "body", "byte", "d320", "SetupSuite", "TestTransformMissingCurrentCondition", "TestTransformMissingHourlyCondition", "TestTransformWithHourlyCondition", "TestTransformMissingHourlyConditions", "TestTransformWithHourlyConditions", "TestTransformHourlyForecast", "TestEmptyResponse", "TestOnlyCurrentCondition", "TestAllConditions", "TestGetForecastForLocationLimitReached", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "TestGetForecastForLocationHttpError", "TestGetForecastForLocationTransformError", "temperature", "feels", "test", "transform", "expected"], "ast_kind": "function_or_method", "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n\nfunc TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}\n", "n_tokens": 595, "byte_len": 1888, "file_sha1": "d872f95b89d48ce4290520dac7d2d2cb3f9c3cf6", "start_line": 925, "end_line": 978}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "module": "internal.foreca.adapters.clients.foreca_client", "ext": "go", "chunk_number": 1, "symbols": ["IsZero", "IsValid", "HasCurrentCondition", "NewForecaClient", "WeatherCondition", "CurrentCondition", "DailyCondition", "HourlyCondition", "Response", "errorResponse", "ForecaClient", "mocks", "foreca", "message", "opentelemetry", "temperature", "feels", "weather", "time", "condition", "humidity", "percentage", "struct", "valid", "isvalid", "client", "station", "interface", "hourly", "conditions", "GetForecastForLocation", "isLimiterError", "NewTransformer", "Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "buildCurrentConditionFromHourlyForecast", "computeHeatIndex", "computeRelativeHumidity", "computeTemperatureFeelsLike", "computeWindChill", "NewDailyForecastTransformer", "getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "getAverageWeatherCodeForHourlyForecasts", "NewHourlyForecastTransformer"], "ast_kind": "class_or_type", "text": "package clients\n\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}\n\ntype CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\n\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\n\treturn zero == *cc\n}\n\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}\n\ntype DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}\n\ntype HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}\n\ntype Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\n\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\n\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (\n\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}\n\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\n\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\n\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}\n", "n_tokens": 1036, "byte_len": 3934, "file_sha1": "9db6d9a007eb31bdaf0535e75900d38b9f44ece2", "start_line": 1, "end_line": 139}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "module": "internal.foreca.adapters.clients.foreca_client", "ext": "go", "chunk_number": 2, "symbols": ["GetForecastForLocation", "isLimiterError", "NewTransformer", "Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "forecaTransformer", "currentConditionTransformer", "foreca", "with", "lock", "err", "count", "time", "zero", "unexpected", "acquiring", "http", "has", "prefix", "struct", "wrap", "unmarshal", "raw", "query", "client", "true", "daily", "forecast", "throttled", "IsZero", "IsValid", "HasCurrentCondition", "NewForecaClient", "buildCurrentConditionFromHourlyForecast", "computeHeatIndex", "computeRelativeHumidity", "computeTemperatureFeelsLike", "computeWindChill", "NewDailyForecastTransformer", "getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "getAverageWeatherCodeForHourlyForecasts", "NewHourlyForecastTransformer", "buildWeatherCondition", "buildWindGust"], "ast_kind": "class_or_type", "text": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: generic error\")\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, c.endpoint, nil)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot create request.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"foreca client: cannot create request\")\n\t}\n\n\tq := req.URL.Query()\n\tfor key, value := range c.defaultQueryParams {\n\t\tq.Add(key, value)\n\t}\n\tq.Add(\"l\", fmt.Sprintf(\"%d\", id))\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.http.Do(req)\n\tif err != nil {\n\t\tlog.Error(ctx,\n\t\t\t\"Error occurred with the HTTP request.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: http error\")\n\t}\n\n\tdefer func() {\n\t\tif err := resp.Body.Close(); err != nil {\n\t\t\tlog.Error(ctx,\n\t\t\t\t\"Error occurred while closing the response body stream.\",\n\t\t\t\tzap.Int(\"id\", id),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t}()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar r *Response\n\terr = xml.Unmarshal(body, &r)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tvar e errorResponse\n\t\tif err := xml.Unmarshal(body, &e); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"foreca client: cannot unmarshal response\")\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get forecast for location.\", zap.Int(\"id\", id), zap.Any(\"error\", e))\n\t\treturn nil, errors.Wrap(err, \"foreca client: client error\")\n\t}\n\n\treturn c.transformer.Transform(r, loc), nil\n}\n\nfunc (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\n\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}\n\nfunc (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\n\tvar dfs []*foreca.DailyCondition\n\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}\n\nfunc (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\n\treturn r\n}\n\ntype currentConditionTransformer struct{}\n\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}\n", "n_tokens": 1194, "byte_len": 4396, "file_sha1": "9db6d9a007eb31bdaf0535e75900d38b9f44ece2", "start_line": 140, "end_line": 303}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "module": "internal.foreca.adapters.clients.foreca_client", "ext": "go", "chunk_number": 3, "symbols": ["Transform", "buildCurrentConditionFromHourlyForecast", "computeHeatIndex", "computeRelativeHumidity", "steadman", "histeadman", "foreca", "temperature", "feels", "weather", "condition", "time", "rothfusz", "hirothfusz", "round", "humidity", "percentage", "andrew", "station", "return", "math", "wind", "direction", "epoch", "compute", "gust", "computes", "hourly", "speed", "index", "IsZero", "IsValid", "HasCurrentCondition", "NewForecaClient", "GetForecastForLocation", "isLimiterError", "NewTransformer", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "computeTemperatureFeelsLike", "computeWindChill", "NewDailyForecastTransformer", "getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "getAverageWeatherCodeForHourlyForecasts", "NewHourlyForecastTransformer"], "ast_kind": "function_or_method", "text": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex),\n\t\t\t\tutilities.KilometersToMiles(icc.WindGust.Wind.Speed),\n\t\t\t),\n\t\t),\n\t\t1,\n\t)\n\n\tif hf != nil {\n\t\ticc.UVIndex = hf.UVIndex\n\t\ticc.Precipitation = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t\ticc.WeatherConditionNextHour = buildWeatherCondition(hf.WeatherCode, hf.WeatherDescription)\n\t\ticc.PrecipitationNextHour = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t}\n\n\treturn &icc\n}\n\nfunc (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\n\tcc.Visibility = 0\n\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\n\treturn &cc\n}\n\n// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\n\treturn hiRothfusz + adjustment\n}\n\n// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}\n", "n_tokens": 1217, "byte_len": 4113, "file_sha1": "9db6d9a007eb31bdaf0535e75900d38b9f44ece2", "start_line": 304, "end_line": 426}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "module": "internal.foreca.adapters.clients.foreca_client", "ext": "go", "chunk_number": 4, "symbols": ["computeTemperatureFeelsLike", "computeWindChill", "NewDailyForecastTransformer", "Transform", "getMaximumTemperature", "getMinimumTemperature", "dailyForecastTransformer", "foreca", "weather", "condition", "time", "get", "day", "round", "next", "minimum", "struct", "daily", "forecast", "snow", "fahrenheit", "return", "math", "average", "hour", "wind", "direction", "epoch", "max", "temperature", "IsZero", "IsValid", "HasCurrentCondition", "NewForecaClient", "GetForecastForLocation", "isLimiterError", "NewTransformer", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "buildCurrentConditionFromHourlyForecast", "computeHeatIndex", "computeRelativeHumidity", "getAverageHumidityPercentage", "getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "getAverageWeatherCodeForHourlyForecasts", "NewHourlyForecastTransformer", "buildWeatherCondition", "buildWindGust"], "ast_kind": "class_or_type", "text": "// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\n\treturn temperature\n}\n\n// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\n\treturn temperature\n}\n\ntype dailyForecastTransformer struct{}\n\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}\n\nfunc (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location)\n\n\tif len(hfs) > 0 {\n\t\tdf.MinTemperature = utilities.Round(t.getMinimumTemperature(hfs), 1)\n\t\tdf.MaxTemperature = utilities.Round(t.getMaximumTemperature(hfs), 1)\n\t\tdf.AverageHumidityPercentage = int(math.Round(t.getAverageHumidityPercentage(hfs)))\n\n\t\troundedSunriseTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location))\n\t\troundedSunsetTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location))\n\t\tdayHourlyForecasts := t.getDayHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationDay = utilities.Round(t.getTotalPrecipitation(dayHourlyForecasts), 1)\n\n\t\tnightHourlyForecasts := t.getNightHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationNight = utilities.Round(t.getTotalPrecipitation(nightHourlyForecasts), 1)\n\t\tnightWeatherCode := t.getAverageWeatherCodeForHourlyForecasts(nightHourlyForecasts)\n\t\tdf.WeatherConditionNight = buildWeatherCondition(nightWeatherCode, \"\")\n\n\t\tif isSnowWeatherCode(d.WeatherCode) {\n\t\t\tdf.SnowDay = df.PrecipitationDay\n\t\t}\n\n\t\tif isSnowWeatherCode(nightWeatherCode) {\n\t\t\tdf.SnowNight = df.PrecipitationNight\n\t\t}\n\t}\n\n\treturn &df\n}\n\nfunc (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\n\treturn max\n}\n\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\n\treturn min\n}\n", "n_tokens": 1166, "byte_len": 4154, "file_sha1": "9db6d9a007eb31bdaf0535e75900d38b9f44ece2", "start_line": 427, "end_line": 532}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "module": "internal.foreca.adapters.clients.foreca_client", "ext": "go", "chunk_number": 5, "symbols": ["getAverageHumidityPercentage", "getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "getAverageWeatherCodeForHourlyForecasts", "NewHourlyForecastTransformer", "Transform", "buildWeatherCondition", "buildWindGust", "buildWind", "hourlyForecastTransformer", "foreca", "continue", "temperature", "feels", "tokens", "weather", "condition", "time", "get", "day", "gust", "round", "humidity", "percentage", "average", "precipitation", "struct", "nights", "direction", "IsZero", "IsValid", "HasCurrentCondition", "NewForecaClient", "GetForecastForLocation", "isLimiterError", "NewTransformer", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "buildCurrentConditionFromHourlyForecast", "computeHeatIndex", "computeRelativeHumidity", "computeTemperatureFeelsLike", "computeWindChill", "NewDailyForecastTransformer", "getMaximumTemperature", "getMinimumTemperature", "parseWeatherCode", "isSnowWeatherCode", "parsePrecipitationForWeatherCode"], "ast_kind": "class_or_type", "text": "func (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\n\tvar total int\n\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\n\treturn float64(total) / float64(len(hfs))\n}\n\nfunc (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\n\treturn total\n}\n\nfunc (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}\n\ntype hourlyForecastTransformer struct{}\n\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}\n\nfunc (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\n\treturn &hf\n}\n\nfunc buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\n\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\n\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}\n", "n_tokens": 1156, "byte_len": 4093, "file_sha1": "9db6d9a007eb31bdaf0535e75900d38b9f44ece2", "start_line": 533, "end_line": 688}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "module": "internal.foreca.adapters.clients.foreca_client", "ext": "go", "chunk_number": 6, "symbols": ["parseWeatherCode", "isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection", "getWindDirectionInDegrees", "buildPressure", "getUtcEpochForFormatInLocation", "getTimeForFormatInLocation", "roundToNextHour", "weather", "code", "pressure", "foreca", "duration", "unix", "parse", "precipitation", "time", "trend", "get", "float", "format", "func", "round", "next", "case", "utc", "float64", "location", "rounded", "IsZero", "IsValid", "HasCurrentCondition", "NewForecaClient", "GetForecastForLocation", "isLimiterError", "NewTransformer", "Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "buildCurrentConditionFromHourlyForecast", "computeHeatIndex", "computeRelativeHumidity", "computeTemperatureFeelsLike", "computeWindChill", "NewDailyForecastTransformer", "getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "getDayHourlyForecasts"], "ast_kind": "function_or_method", "text": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\n\treturn foreca.WeatherCode(wc)\n}\n\nfunc isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\n\treturn utilities.ContainsString(snowyConditions, c)\n}\n\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\n\treturn precipitation\n}\n\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}\n\nfunc getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}\n\nfunc buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}\n\nfunc getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn ts.In(utc).Unix()\n}\n\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\n\treturn &ts\n}\n\nfunc roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\n\treturn &roundedTime\n\n}\n", "n_tokens": 1024, "byte_len": 3228, "file_sha1": "9db6d9a007eb31bdaf0535e75900d38b9f44ece2", "start_line": 689, "end_line": 847}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "module": "internal.foreca.adapters.clients.mocks.foreca_client_mocks", "ext": "go", "chunk_number": 1, "symbols": ["NewMockhttpClient", "EXPECT", "Do", "NewMockrateLimiter", "Acquire", "NewMocktransformer", "Transform", "MockhttpClient", "MockhttpClientMockRecorder", "MockrateLimiter", "MockrateLimiterMockRecorder", "Mocktransformer", "MocktransformerMockRecorder", "mocks", "foreca", "caller", "weather", "time", "instance", "expected", "controller", "expect", "recorder", "struct", "interface", "mocktransformer", "mock", "ret", "ret0", "generated", "transformer", "return", "clients", "import", "error", "record", "call", "internal", "returns", "arg", "arg0", "http", "client", "type", "typeof", "destination", "new", "mockhttp", "ret1", "edit"], "ast_kind": "class_or_type", "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}\n\n// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}\n\n// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}\n\n// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}\n\n// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}\n\n// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}\n", "n_tokens": 1057, "byte_len": 4090, "file_sha1": "e6f7b0789b6e8e0abaf8c01ac34d17f35515e809", "start_line": 1, "end_line": 134}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "module": "internal.foreca.adapters.handlers.grpc.v0.transformers", "ext": "go", "chunk_number": 1, "symbols": ["newTransformer", "Transform", "transformCurrentCondition", "transformDailyConditions", "transformHourlyConditions", "transformWind", "transformPressure", "transformWeatherCondition", "transformer", "foreca", "temperature", "feels", "forecast", "response", "max", "weather", "condition", "next", "hour", "hourly", "forecasts", "humidity", "percentage", "struct", "transform", "pressure", "direction", "conditions", "snow", "day", "transformWindGust", "return", "epoch", "import", "internal", "night", "wind", "gust", "speed", "range", "new", "current", "daily", "proxy", "millibar", "precipitation", "probability", "min", "append", "type"], "ast_kind": "class_or_type", "text": "package v0\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\ntype transformer struct{}\n\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\n\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}\n\nfunc (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}\n\nfunc (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.SunsetEpoch,\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n\nfunc (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n\nfunc (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\n\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}\n\nfunc (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}\n", "n_tokens": 1179, "byte_len": 4589, "file_sha1": "1e6b52fb28aa2075a0a0371b8caa8c3ae51032c3", "start_line": 1, "end_line": 132}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "module": "internal.foreca.adapters.handlers.grpc.v0.transformers", "ext": "go", "chunk_number": 2, "symbols": ["transformWindGust", "transform", "wind", "transformer", "return", "foreca", "gust", "float", "float32", "forecast", "response", "func", "newTransformer", "Transform", "transformCurrentCondition", "transformDailyConditions", "transformHourlyConditions", "transformWind", "transformPressure", "transformWeatherCondition", "temperature", "feels", "max", "weather", "condition", "next", "hour", "hourly", "forecasts", "humidity", "percentage", "struct", "pressure", "direction", "conditions", "snow", "day", "epoch", "import", "internal", "night", "speed", "range", "new", "current", "daily", "proxy", "millibar", "precipitation", "probability"], "ast_kind": "function_or_method", "text": "func (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}\n", "n_tokens": 82, "byte_len": 264, "file_sha1": "1e6b52fb28aa2075a0a0371b8caa8c3ae51032c3", "start_line": 133, "end_line": 143}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/server.go", "module": "internal.foreca.adapters.handlers.grpc.v0.server", "ext": "go", "chunk_number": 1, "symbols": ["NewServer", "toGrpcError", "Server", "errors", "foreca", "type", "something", "google", "package", "status", "context", "weather", "found", "grpc", "unimplemented", "pbv", "pbv0", "error", "struct", "location", "wrong", "interface", "golang", "proxy", "transformer", "forecast", "return", "get", "retry", "import", "requests", "new", "server", "service", "err", "resource", "exhausted", "went", "internal", "request", "later", "impalastudios", "not", "many", "func", "codes"], "ast_kind": "class_or_type", "text": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\n\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\n\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}\n\nfunc (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}\n", "n_tokens": 229, "byte_len": 902, "file_sha1": "622197b0d98da0571da0cc1ee987fd2d4a6f1d18", "start_line": 1, "end_line": 37}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "module": "internal.foreca.adapters.handlers.grpc.v0.getforecast", "ext": "go", "chunk_number": 1, "symbols": ["GetForecast", "package", "context", "weather", "pbv", "pbv0", "get", "location", "forecast", "grpc", "error", "foreca", "proxy", "return", "transform", "import", "service", "response", "server", "request", "impalastudios", "func"], "ast_kind": "function_or_method", "text": "package v0\n\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\n\treturn s.t.Transform(forecast), nil\n}\n", "n_tokens": 112, "byte_len": 380, "file_sha1": "bf393d2654d7fa87d2b61b407a8f9d1e19981ef9", "start_line": 1, "end_line": 17}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go", "rel_path": "pkg/pb/v0/pb.go", "module": "pkg.pb.v0.pb", "ext": "go", "chunk_number": 1, "symbols": ["generate", "server", "protoc", "package", "weather", "rpc", "grpc", "client", "out", "generated", "opt", "foreca", "proxy", "module", "service", "code", "proto", "impalastudios", "auto", "path"], "ast_kind": "unknown", "text": "package v0\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n", "n_tokens": 101, "byte_len": 341, "file_sha1": "e5d50b46db8080a4f4b11c8a1d562063558ff552", "start_line": 1, "end_line": 6}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 1, "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "ForecastRequest", "ForecastResponse", "ForecastResponse_WeatherCondition", "bytes", "message", "string", "varint", "google", "deprecated", "proto", "state", "hourly", "forecasts", "forecast", "response", "unsafe", "enabled", "struct", "reset", "unknown", "fields", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetEpoch", "GetVisibility", "GetWeatherCondition", "GetPrecipitation", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "GetHeatIndex", "GetPressure", "GetUvIndex"], "ast_kind": "class_or_type", "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.28.1\n// \tprotoc        v3.21.12\n// source: service.v0.proto\n\npackage v0\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n\ntype ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}\n\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastRequest) ProtoMessage() {}\n\nfunc (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.\nfunc (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}\n\ntype ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`\n}\n\nfunc (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse) ProtoMessage() {}\n\nfunc (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}\n\ntype ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}\n\nfunc (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_WeatherCondition) ProtoMessage() {}\n\nfunc (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 1211, "byte_len": 4742, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 1, "end_line": 168}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 2, "symbols": ["Descriptor", "GetCode", "GetDescription", "Reset", "String", "ProtoMessage", "ProtoReflect", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "ForecastResponse_WindDirection", "ForecastResponse_Wind", "ForecastResponse_Pressure", "protoreflect", "bytes", "fixed", "fixed32", "message", "string", "speed", "type", "name", "forecast", "response", "deprecated", "pointer", "varint", "degrees", "proto", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetMillibar", "GetTrend", "GetEpoch", "GetVisibility", "GetWeatherCondition", "GetPrecipitation", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "GetHeatIndex", "GetPressure", "GetUvIndex", "GetHumidityPercentage", "GetTemperatureMin"], "ast_kind": "class_or_type", "text": "// Deprecated: Use ForecastResponse_WeatherCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}\n\nfunc (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\n\nfunc (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}\n\ntype ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}\n\nfunc (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_WindDirection) ProtoMessage() {}\n\nfunc (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_WindDirection.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}\n\nfunc (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}\n\nfunc (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}\n\nfunc (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_Wind) ProtoMessage() {}\n\nfunc (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_Wind.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}\n\nfunc (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}\n\nfunc (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_Pressure) ProtoMessage() {}\n\nfunc (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 1181, "byte_len": 4553, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 169, "end_line": 333}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 3, "symbols": ["Descriptor", "GetMillibar", "GetTrend", "Reset", "String", "ProtoMessage", "ProtoReflect", "GetEpoch", "GetVisibility", "GetWeatherCondition", "GetPrecipitation", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "GetHeatIndex", "GetPressure", "GetUvIndex", "ForecastResponse_CurrentCondition", "bytes", "message", "string", "get", "index", "varint", "temperature", "feels", "deprecated", "proto", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetHumidityPercentage", "GetTemperatureMin", "GetTemperatureMax", "GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight", "GetPrecipitationProbability", "GetWind"], "ast_kind": "class_or_type", "text": "// Deprecated: Use ForecastResponse_Pressure.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}\n\nfunc (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust             *ForecastResponse_CurrentCondition_WindGust `protobuf:\"bytes,8,opt,name=windGust,proto3\" json:\"windGust,omitempty\"`\n\tDewPoint             float32                                     `protobuf:\"fixed32,9,opt,name=dewPoint,proto3\" json:\"dewPoint,omitempty\"`\n\tHeatIndex            float32                                     `protobuf:\"fixed32,10,opt,name=heatIndex,proto3\" json:\"heatIndex,omitempty\"`\n\tPressure             *ForecastResponse_Pressure                  `protobuf:\"bytes,11,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tUvIndex              float32                                     `protobuf:\"fixed32,12,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tHumidityPercentage   int32                                       `protobuf:\"varint,13,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n}\n\nfunc (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n", "n_tokens": 1210, "byte_len": 5047, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 334, "end_line": 488}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 4, "symbols": ["GetHumidityPercentage", "Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch", "GetTemperatureMin", "GetTemperatureMax", "GetPrecipitation", "GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight", "GetPrecipitationProbability", "GetWind", "ForecastResponse_DailyForecast", "bytes", "message", "string", "varint", "deprecated", "temperature", "max", "proto", "precipitation", "probability", "weather", "condition", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetVisibility", "GetWeatherCondition", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "GetHeatIndex"], "ast_kind": "class_or_type", "text": "func (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32                            `protobuf:\"fixed32,8,opt,name=snowDay,proto3\" json:\"snowDay,omitempty\"`\n\tSnowNight                 float32                            `protobuf:\"fixed32,9,opt,name=snowNight,proto3\" json:\"snowNight,omitempty\"`\n\tPrecipitationProbability  int32                              `protobuf:\"varint,10,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                      *ForecastResponse_Wind             `protobuf:\"bytes,11,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tAverageHumidityPercentage int32                              `protobuf:\"varint,12,opt,name=averageHumidityPercentage,proto3\" json:\"averageHumidityPercentage,omitempty\"`\n\tWeatherCondition          *ForecastResponse_WeatherCondition `protobuf:\"bytes,13,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tWeatherConditionNight     *ForecastResponse_WeatherCondition `protobuf:\"bytes,14,opt,name=weatherConditionNight,proto3\" json:\"weatherConditionNight,omitempty\"`\n\tUvIndex                   float32                            `protobuf:\"fixed32,15,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tSunriseEpoch              int64                              `protobuf:\"varint,16,opt,name=sunriseEpoch,proto3\" json:\"sunriseEpoch,omitempty\"`\n\tSunsetEpoch               int64                              `protobuf:\"varint,17,opt,name=sunsetEpoch,proto3\" json:\"sunsetEpoch,omitempty\"`\n}\n\nfunc (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_DailyForecast) ProtoMessage() {}\n\nfunc (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_DailyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n", "n_tokens": 1228, "byte_len": 5095, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 489, "end_line": 628}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 5, "symbols": ["GetAverageHumidityPercentage", "GetWeatherCondition", "GetWeatherConditionNight", "GetUvIndex", "GetSunriseEpoch", "GetSunsetEpoch", "Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch", "GetTemperature", "GetTemperatureFeelsLike", "GetPrecipitation", "GetSnow", "GetPrecipitationProbability", "GetWind", "GetPressure", "GetHumidityPercentage", "ForecastResponse_HourlyForecast", "bytes", "message", "get", "index", "string", "varint", "temperature", "feels", "deprecated", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetVisibility", "GetNextHour", "GetWindGust", "GetDewPoint", "GetHeatIndex", "GetTemperatureMin", "GetTemperatureMax", "GetPrecipitationDay"], "ast_kind": "class_or_type", "text": "func (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *ForecastResponse_Wind             `protobuf:\"bytes,8,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tPressure                 *ForecastResponse_Pressure         `protobuf:\"bytes,9,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tHumidityPercentage       int32                              `protobuf:\"varint,10,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n\tUvIndex                  float32                            `protobuf:\"fixed32,11,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n}\n\nfunc (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_HourlyForecast) ProtoMessage() {}\n\nfunc (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_HourlyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\n", "n_tokens": 1209, "byte_len": 4835, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 629, "end_line": 790}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 6, "symbols": ["GetUvIndex", "Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetWeatherCondition", "GetPrecipitation", "GetWind", "ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_CurrentCondition_WindGust", "protoreflect", "bytes", "fixed", "fixed32", "get", "index", "message", "string", "type", "name", "wind", "deprecated", "pointer", "proto", "unknown", "fields", "weather", "condition", "store", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetEpoch", "GetVisibility", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "GetHeatIndex"], "ast_kind": "class_or_type", "text": "func (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition_NextHour.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition_WindGust.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n", "n_tokens": 872, "byte_len": 3454, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 791, "end_line": 900}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 7, "symbols": ["GetGust", "protoreflect", "file", "descriptor", "return", "get", "gust", "service", "once", "float", "float32", "forecast", "response", "func", "sync", "byte", "Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetEpoch", "GetVisibility", "GetWeatherCondition", "GetPrecipitation", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "GetHeatIndex", "GetPressure", "GetUvIndex", "GetHumidityPercentage", "GetTemperatureMin", "GetTemperatureMax", "GetPrecipitationDay", "GetPrecipitationNight"], "ast_kind": "function_or_method", "text": "func (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}\n\nvar File_service_v0_proto protoreflect.FileDescriptor\n\nvar file_service_v0_proto_rawDesc = []byte{\n\t0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x12, 0x1a, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x22, 0x31,\n\t0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n\t0x64, 0x22, 0x92, 0x18, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,\n\t0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63,\n\t0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f,\n\t0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,\n\t0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,\n\t0x00, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,\n\t0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,\n\t0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69,\n\t0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c,\n\t0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x68, 0x6f,\n\t0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,\n\t0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f,\n\t0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30,\n\t0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x52, 0x0f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x73, 0x1a, 0x48, 0x0a, 0x10, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,\n\t0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,\n\t0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4d, 0x0a, 0x0d, 0x57,\n\t0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,\n\t0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x1a, 0x76, 0x0a, 0x04, 0x57, 0x69,\n\t0x6e, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,\n\t0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,\n\t0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,\n\t0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,\n\t0x65, 0x64, 0x1a, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a,\n\t0x0a, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x62, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,\n\t0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64,\n\t0x1a, 0xd3, 0x07, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x76,\n\t0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,\n\t0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x10, 0x77,\n\t0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,\n\t0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,\n\t0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70,\n\t0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,\n\t0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x08,\n\t0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,\n\t0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72,\n\t0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,\n\t0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72,\n\t0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,\n\t0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,\n\t0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,\n\t0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65,\n\t0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75,\n\t0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,\n\t0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,\n\t0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74,\n\t0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,\n\t0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65,\n\t0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e,\n\t0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49,\n\t0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,\n\t0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64,\n\t0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65,\n\t0x78, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,\n\t0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x68,\n\t0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,\n\t0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x69,\n\t0x0a, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,\n\t0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,\n\t0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,\n\t0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65,\n\t0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,\n\t0x65, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x77,\n\t0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x61, 0x74,\n\t0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72,\n\t0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x77, 0x69,\n\t0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x04, 0x67, 0x75, 0x73, 0x74, 0x1a, 0xc4, 0x06, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79,\n\t0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,\n\t0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x26,\n\t0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,\n\t0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,\n\t0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,\n\t0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24,\n\t0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,\n\t0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x72,\n\t0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74,\n\t0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,\n\t0x73, 0x6e, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x18,\n\t0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x12, 0x1c,\n\t0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x18,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,\n\t0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,\n\t0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x64,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x64, 0x12,\n\t0x3c, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,\n\t0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,\n\t0x28, 0x05, 0x52, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64,\n\t0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a,\n\t0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,\n\t0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,\n\t0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78,\n\t0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,\n\t0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x74,\n\t0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68,\n\t0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,\n\t0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78,\n\t0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,\n\t0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,\n\t0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,\n\t0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x69,\n\t0x73, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,\n\t0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73,\n\t0x75, 0x6e, 0x73, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,\n\t0x52, 0x0b, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0xc1, 0x04,\n\t0x0a, 0x0e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,\n\t0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,\n\t0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,\n\t0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70,\n\t0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65,\n\t0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,\n\t0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x69, 0x0a, 0x10,\n\t0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n\t0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69,\n\t0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,\n\t0x04, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x6e, 0x6f,\n\t0x77, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,\n\t0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a,\n\t0x04, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65,\n\t0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e,\n\t0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04,\n\t0x77, 0x69, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,\n\t0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,\n\t0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64,\n\t0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,\n\t0x01, 0x28, 0x05, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,\n\t0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64,\n\t0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65,\n\t0x78, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x77, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,\n\t0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,\n\t0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,\n\t0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x6c, 0x61, 0x73, 0x74, 0x75, 0x64,\n\t0x69, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x6b, 0x67,\n\t0x2f, 0x70, 0x62, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_service_v0_proto_rawDescOnce sync.Once\n\tfile_service_v0_proto_rawDescData = file_service_v0_proto_rawDesc\n)\n", "n_tokens": 17683, "byte_len": 20797, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 901, "end_line": 1128}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 8, "symbols": ["file_service_v0_proto_rawDescGZIP", "init", "file_service_v0_proto_init", "pressure", "wind", "forecast", "response", "method", "weather", "condition", "current", "next", "hour", "byte", "input", "type", "forecasts", "extension", "output", "unsafe", "enabled", "get", "make", "message", "info", "file", "service", "interface", "int", "int32", "Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetEpoch", "GetVisibility", "GetWeatherCondition"], "ast_kind": "function_or_method", "text": "func file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}\n\nvar file_service_v0_proto_msgTypes = make([]protoimpl.MessageInfo, 11)\nvar file_service_v0_proto_goTypes = []interface{}{\n\t(*ForecastRequest)(nil),                            // 0: weather.forecasts.proxy.v0.ForecastRequest\n\t(*ForecastResponse)(nil),                           // 1: weather.forecasts.proxy.v0.ForecastResponse\n\t(*ForecastResponse_WeatherCondition)(nil),          // 2: weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t(*ForecastResponse_WindDirection)(nil),             // 3: weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t(*ForecastResponse_Wind)(nil),                      // 4: weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t(*ForecastResponse_Pressure)(nil),                  // 5: weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t(*ForecastResponse_CurrentCondition)(nil),          // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t(*ForecastResponse_DailyForecast)(nil),             // 7: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t(*ForecastResponse_HourlyForecast)(nil),            // 8: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t(*ForecastResponse_CurrentCondition_NextHour)(nil), // 9: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t(*ForecastResponse_CurrentCondition_WindGust)(nil), // 10: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust\n}\nvar file_service_v0_proto_depIdxs = []int32{\n\t6,  // 0: weather.forecasts.proxy.v0.ForecastResponse.currentCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t7,  // 1: weather.forecasts.proxy.v0.ForecastResponse.dailyForecasts:type_name -> weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t8,  // 2: weather.forecasts.proxy.v0.ForecastResponse.hourlyForecasts:type_name -> weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t3,  // 3: weather.forecasts.proxy.v0.ForecastResponse.Wind.direction:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t2,  // 4: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t9,  // 5: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.nextHour:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t10, // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.windGust:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust\n\t5,  // 7: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.pressure:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t4,  // 8: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t2,  // 9: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t2,  // 10: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.weatherConditionNight:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t2,  // 11: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t4,  // 12: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t5,  // 13: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.pressure:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t2,  // 14: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t4,  // 15: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t0,  // 16: weather.forecasts.proxy.v0.ForecaProxy.GetForecast:input_type -> weather.forecasts.proxy.v0.ForecastRequest\n\t1,  // 17: weather.forecasts.proxy.v0.ForecaProxy.GetForecast:output_type -> weather.forecasts.proxy.v0.ForecastResponse\n\t17, // [17:18] is the sub-list for method output_type\n\t16, // [16:17] is the sub-list for method input_type\n\t16, // [16:16] is the sub-list for extension type_name\n\t16, // [16:16] is the sub-list for extension extendee\n\t0,  // [0:16] is the sub-list for field type_name\n}\n\nfunc init() { file_service_v0_proto_init() }\nfunc file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {", "n_tokens": 1210, "byte_len": 4802, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 1129, "end_line": 1181}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "module": "pkg.pb.v0.service.v0.pb", "ext": "go", "chunk_number": 9, "symbols": ["x", "type", "types", "gotypes", "forecast", "response", "dependency", "indexes", "oneof", "wrappers", "num", "extensions", "reflect", "message", "infos", "typeof", "raw", "descriptor", "messages", "desc", "builder", "size", "cache", "case", "exporter", "struct", "file", "service", "state", "interface", "Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetLocationId", "GetCurrentCondition", "GetDailyForecasts", "GetHourlyForecasts", "GetCode", "GetDescription", "GetAbbreviation", "GetDegrees", "GetDirection", "GetSpeed", "GetMillibar", "GetTrend", "GetEpoch", "GetVisibility", "GetWeatherCondition"], "ast_kind": "class_or_type", "text": "\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()\n\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}\n", "n_tokens": 1125, "byte_len": 3776, "file_sha1": "a76d2dc0d23e7a3e0c77d652b13f496d2f554a94", "start_line": 1182, "end_line": 1335}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "module": "pkg.pb.v0.service.v0_grpc.pb", "ext": "go", "chunk_number": 1, "symbols": ["NewForecaProxyClient", "GetForecast", "mustEmbedUnimplementedForecaProxyServer", "RegisterForecaProxyServer", "_ForecaProxy_GetForecast_Handler", "forecaProxyClient", "UnimplementedForecaProxyServer", "info", "new", "stream", "with", "google", "foreca", "proxy", "weather", "time", "unimplemented", "introspected", "methods", "unsafe", "struct", "register", "service", "client", "interface", "name", "semantics", "generated", "full", "method", "return", "compile", "import", "implementations", "must", "have", "error", "registrar", "forecast", "request", "proto", "desc", "only", "conn", "errors", "errorf", "compatible", "server", "protoc", "grpc"], "ast_kind": "class_or_type", "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: service.v0.proto\n\npackage v0\n\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7\n\n// ForecaProxyClient is the client API for ForecaProxy service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}\n\ntype forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}\n\nfunc (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// ForecaProxyServer is the server API for ForecaProxy service.\n// All implementations must embed UnimplementedForecaProxyServer\n// for forward compatibility\ntype ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n\n// UnimplementedForecaProxyServer must be embedded to have forward compatible implementations.\ntype UnimplementedForecaProxyServer struct {\n}\n\nfunc (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}\nfunc (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}\n\n// UnsafeForecaProxyServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ForecaProxyServer will\n// result in compilation errors.\ntype UnsafeForecaProxyServer interface {\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n\nfunc RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}\n\nfunc _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// ForecaProxy_ServiceDesc is the grpc.ServiceDesc for ForecaProxy service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar ForecaProxy_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"weather.forecasts.proxy.v0.ForecaProxy\",\n\tHandlerType: (*ForecaProxyServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetForecast\",\n\t\t\tHandler:    _ForecaProxy_GetForecast_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"service.v0.proto\",\n}\n", "n_tokens": 908, "byte_len": 3764, "file_sha1": "ba0a17cbd6f0e679a1f664a3ed5b7bbf0c1539a0", "start_line": 1, "end_line": 106}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "module": "pkg.xotel.provider", "ext": "go", "chunk_number": 1, "symbols": ["NewTracerProvider", "SetGlobalTracer", "NewMeterProvider", "SetGlobalMeter", "getResource", "TracerProviderConfig", "MeterProviderConfig", "get", "resource", "new", "meter", "metric", "tracer", "provider", "opentelemetry", "viper", "time", "configuration", "reader", "struct", "wrap", "providers", "merge", "return", "otlptracegrpc", "with", "endpoint", "interval", "exporters", "periodic", "set", "import", "semconv", "initialize", "error", "insecure", "default", "global", "trace", "string", "errors", "name", "mapstructure", "github", "production", "tracesdk", "cancel", "service", "always", "shutdown"], "ast_kind": "class_or_type", "text": "package xotel\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\tmetricsdk \"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n// TracerProviderConfig is the configuration for the OpenTelemetry Tracer provider\ntype TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}\n\n// NewTracerProvider creates a new TracerProvider provider\n// Usage:\n//\n//\ttp, err := xotel.NewTracerProvider(ctx, cfg)\n//\tif err != nil {\n//\t\treturn nil, errors.Wrap(err, \"failed to create trace provider\")\n//\t}\n//\totel.SetTracerProvider(tp)\n//\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n//\n//\tdefer tp.Shutdown(ctx)\nfunc NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\n\treturn tp, nil\n}\n\n// Tracer is the global tracer\nvar Tracer trace.Tracer = nil\n\n// SetGlobalTracer sets global tracer\nfunc SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}\n\n// MeterProviderConfig is the configuration for the OpenTelemetry providers\ntype MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}\n\nfunc NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\n\treturn provider, nil\n}\n\n// Meter is the global tracer\nvar Meter metric.Meter = nil\n\n// SetGlobalMeter sets global tracer\nfunc SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}\n\nfunc getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\n\treturn r, nil\n}\n", "n_tokens": 877, "byte_len": 3309, "file_sha1": "4af03d233855925bd85305a739b8a87add5c64e0", "start_line": 1, "end_line": 126}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go", "rel_path": "pkg/cache/models.go", "module": "pkg.cache.models", "ext": "go", "chunk_number": 1, "symbols": ["Item", "expiration", "type", "value", "struct", "package", "cache", "item", "int", "int32", "string", "byte"], "ast_kind": "class_or_type", "text": "package cache\n\ntype Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 22, "byte_len": 92, "file_sha1": "1a5af2eeac08b02120f6c8e417f04beeaafeccf6", "start_line": 1, "end_line": 8}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go", "rel_path": "pkg/cache/memcached.go", "module": "pkg.cache.memcached", "ext": "go", "chunk_number": 1, "symbols": ["NewMemcached", "Get", "Set", "SetWithExpiration", "Memcached", "new", "memcached", "set", "with", "type", "value", "unix", "package", "github", "cache", "time", "uint", "uint32", "err", "byte", "response", "error", "case", "godropbox", "memcache", "struct", "client", "expiration", "string", "dropbox", "return", "status", "key", "default", "import", "item", "switch", "func"], "ast_kind": "class_or_type", "text": "package cache\n\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n\ntype Memcached struct {\n\tc memcache.Client\n}\n\nfunc NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}\n\nfunc (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}\n\nfunc (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\n\treturn response.Error()\n}\n\nfunc (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\n\treturn response.Error()\n}\n", "n_tokens": 260, "byte_len": 949, "file_sha1": "3c2e79e2dfe50e47e943cd8eebd23f978c8f5e0d", "start_line": 1, "end_line": 52}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go", "rel_path": "pkg/cache/errors.go", "module": "pkg.cache.errors", "ext": "go", "chunk_number": 1, "symbols": ["generic", "miss", "errors", "package", "import", "cache", "err"], "ast_kind": "imports", "text": "package cache\n\nimport \"errors\"\n\nvar (\n\tErrCacheMiss    = errors.New(\"cache miss\")\n\tErrCacheGeneric = errors.New(\"cache generic\")\n)\n", "n_tokens": 33, "byte_len": 131, "file_sha1": "d252a260679bbec6ae692302b1d63452048ada5c", "start_line": 1, "end_line": 9}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go", "rel_path": "pkg/utilities/units.go", "module": "pkg.utilities.units", "ext": "go", "chunk_number": 1, "symbols": ["CelsiusToFahrenheit", "FahrenheitToCelsius", "KilometersToMiles", "MilesToKilometers", "miles", "kilometers", "celsius", "fahrenheit", "return", "float", "float64", "package", "utilities", "func"], "ast_kind": "function_or_method", "text": "package utilities\n\nfunc CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}\n\nfunc FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}\n\nfunc KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}\n\nfunc MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}\n", "n_tokens": 107, "byte_len": 336, "file_sha1": "488573d8876a9894388229d25e1cc3e34eb9bd46", "start_line": 1, "end_line": 18}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go", "rel_path": "pkg/utilities/slices.go", "module": "pkg.utilities.slices", "ext": "go", "chunk_number": 1, "symbols": ["ContainsString", "contains", "string", "return", "range", "package", "utilities", "bool", "func", "true", "false"], "ast_kind": "function_or_method", "text": "package utilities\n\nfunc ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n", "n_tokens": 41, "byte_len": 144, "file_sha1": "c0a3f9f85dc156db31011d930f43340519e02471", "start_line": 1, "end_line": 12}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go", "rel_path": "pkg/utilities/math.go", "module": "pkg.utilities.math", "ext": "go", "chunk_number": 1, "symbols": ["Floor", "Round", "Ceil", "precision", "return", "math", "round", "floor", "float", "float64", "package", "utilities", "import", "ceil", "func", "base", "pow", "pow10"], "ast_kind": "function_or_method", "text": "package utilities\n\nimport \"math\"\n\nfunc Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Floor(v*base) / base\n}\n\nfunc Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Round(v*base) / base\n}\n\nfunc Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Ceil(v*base) / base\n}\n", "n_tokens": 102, "byte_len": 379, "file_sha1": "a4eb8a2065607a67f1df25e27575e8e636e6bf0a", "start_line": 1, "end_line": 22}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "module": "pkg.ratelimit.limiter_test", "ext": "go", "chunk_number": 1, "symbols": ["SetupSuite", "TestSingleThreadLimiter_PeekEmpty", "TestSingleThreadLimiter_PeekNotEmpty", "TestSingleThreadLimiter_AcquireNewBucket", "TestSingleThreadLimiter_AcquireExistingBucket", "TestSingleThreadLimiter_AcquireNNewBucket", "TestSingleThreadLimiter_AcquireNExistingBucket", "singleThreadLimiterTestSuite", "acquire", "acquiren", "equal", "values", "mocks", "mock", "controller", "gomock", "start", "arg", "arg2", "test", "single", "type", "duration", "testify", "package", "error", "erroris", "github", "weather", "ratelimit", "TestSingleThreadLimiter_Reset", "TestSingleThreadLimiter", "time", "suite", "expect", "token", "bucket", "new", "mockstorage", "testing", "thread", "storage", "float", "float64", "last", "access", "stretchr", "struct", "reset", "peek"], "ast_kind": "class_or_type", "text": "package ratelimit_test\n\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\n\tmockController *gomock.Controller\n}\n\nfunc (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\n", "n_tokens": 1149, "byte_len": 4116, "file_sha1": "5e5889757c60b90d4490d03c52a7447e2ce9a2b3", "start_line": 1, "end_line": 144}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "module": "pkg.ratelimit.limiter_test", "ext": "go", "chunk_number": 2, "symbols": ["TestSingleThreadLimiter_Reset", "TestSingleThreadLimiter", "mocks", "mock", "controller", "start", "test", "ratelimit", "time", "expect", "new", "mockstorage", "testing", "suite", "single", "thread", "storage", "reset", "defer", "second", "delete", "assert", "return", "func", "stop", "SetupSuite", "TestSingleThreadLimiter_PeekEmpty", "TestSingleThreadLimiter_PeekNotEmpty", "TestSingleThreadLimiter_AcquireNewBucket", "TestSingleThreadLimiter_AcquireExistingBucket", "TestSingleThreadLimiter_AcquireNNewBucket", "TestSingleThreadLimiter_AcquireNExistingBucket", "singleThreadLimiterTestSuite", "acquire", "acquiren", "equal", "values", "gomock", "arg", "arg2", "type", "duration", "testify", "package", "error", "erroris", "github", "weather", "token", "bucket"], "ast_kind": "function_or_method", "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}\n\nfunc TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}\n", "n_tokens": 106, "byte_len": 418, "file_sha1": "5e5889757c60b90d4490d03c52a7447e2ce9a2b3", "start_line": 145, "end_line": 160}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go", "rel_path": "pkg/ratelimit/interfaces.go", "module": "pkg.ratelimit.interfaces", "ext": "go", "chunk_number": 1, "symbols": ["rate", "limit", "type", "allow", "package", "context", "ratelimit", "import", "bool", "interface", "string"], "ast_kind": "imports", "text": "package ratelimit\n\nimport \"context\"\n\ntype IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}\n", "n_tokens": 27, "byte_len": 112, "file_sha1": "e533c11b64019011ea8b7d96a17bc397d5fbdaf6", "start_line": 1, "end_line": 8}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go", "rel_path": "pkg/ratelimit/tokenbucket.go", "module": "pkg.ratelimit.tokenbucket", "ext": "go", "chunk_number": 1, "symbols": ["NewTokenBucket", "Consume", "GetAdjustedUsage", "TokenBucket", "errors", "type", "duration", "unix", "package", "ratelimit", "reached", "time", "bucket", "new", "token", "used", "back", "float", "float64", "last", "access", "struct", "count", "get", "adjusted", "err", "limit", "return", "import", "consume", "error", "elapsed", "func"], "ast_kind": "class_or_type", "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\nvar (\n\tErrLimitReached = errors.New(\"limit reached\")\n)\n\ntype TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}\n\nfunc NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}\n\nfunc (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\n\treturn ErrLimitReached\n}\n\nfunc (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}\n", "n_tokens": 253, "byte_len": 927, "file_sha1": "d8095bf813c8686a97a87bff637c24bf42475f2b", "start_line": 1, "end_line": 48}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go", "rel_path": "pkg/ratelimit/storage_memcached.go", "module": "pkg.ratelimit.storage_memcached", "ext": "go", "chunk_number": 1, "symbols": ["NewMemcachedStorage", "Get", "Set", "Delete", "MemcachedStorage", "new", "decoder", "memcached", "storage", "bytes", "type", "value", "duration", "decode", "package", "ratelimit", "github", "time", "bucket", "buffer", "uint", "uint32", "token", "error", "else", "godropbox", "memcache", "struct", "client", "expiration", "encode", "string", "dropbox", "return", "status", "key", "encoding", "encoder", "resp", "import", "item", "delete", "prefix", "func", "seconds"], "ast_kind": "class_or_type", "text": "package ratelimit\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n\ntype MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}\n\nfunc NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}\n\nfunc (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}\n\nfunc (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}\n\nfunc (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}\n", "n_tokens": 323, "byte_len": 1270, "file_sha1": "a0bd19af24269f87b1978d62df73b60118e3a03b", "start_line": 1, "end_line": 55}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go", "rel_path": "pkg/ratelimit/storage.go", "module": "pkg.ratelimit.storage", "ext": "go", "chunk_number": 1, "symbols": ["NewDummyStorage", "Get", "Set", "Delete", "DummyStorage", "new", "dummy", "errors", "type", "duration", "storage", "package", "ratelimit", "found", "time", "bucket", "token", "expire", "struct", "make", "interface", "string", "return", "delete", "import", "err", "not", "error", "data", "func"], "ast_kind": "class_or_type", "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\nvar (\n\tErrNotFound = errors.New(\"not found\")\n)\n\ntype Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}\n\ntype DummyStorage struct {\n\tdata map[string]*TokenBucket\n}\n\nfunc NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}\n\nfunc (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}\n\nfunc (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}\n\nfunc (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}\n", "n_tokens": 198, "byte_len": 752, "file_sha1": "212c74de608e96c5a962c9257a74b5abc29bfcfe", "start_line": 1, "end_line": 43}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "module": "pkg.ratelimit.limiter", "ext": "go", "chunk_number": 1, "symbols": ["NewSingleThreadLimiter", "Start", "Stop", "AcquireN", "Acquire", "Peek", "Reset", "serve", "checkAcquireArgs", "usage", "SingleThreadLimiter", "response", "request", "mocks", "req", "chan", "acquire", "continue", "err", "count", "time", "zero", "reset", "action", "struct", "make", "peek", "true", "interface", "limit", "return", "math", "bool", "import", "not", "ceil", "error", "iota", "new", "token", "key", "start", "errors", "generate", "destination", "get", "adjusted", "select", "duration", "source"], "ast_kind": "class_or_type", "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar (\n\tErrKeyEmpty     = errors.New(\"key cannot be empty\")\n\tErrCountZero    = errors.New(\"count should be greater than zero\")\n\tErrLimitZero    = errors.New(\"limit should be greater than zero\")\n\tErrCountLimit   = errors.New(\"limit should be greater than count\")\n\tErrZeroDuration = errors.New(\"duration cannot be zero\")\n)\n\n//go:generate /go/bin/mockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\ntype (\n\tlimiter interface {\n\t\tPeek(string) (int64, error)\n\t\tAcquireN(string, int64) (int64, error)\n\t\tAcquire(string) (int64, error)\n\t\tReset(string) error\n\t}\n\tstorage interface {\n\t\tGet(string) (*TokenBucket, error)\n\t\tSet(string, *TokenBucket, time.Duration) error\n\t\tDelete(string) error\n\t}\n)\n\ntype SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}\n\nfunc NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}\n\nfunc (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}\n\nfunc (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}\n\nfunc (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\n\nfunc (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}\n\nfunc (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\n\nfunc (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.err\n}\n\nfunc (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n\n\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treq.response <- response{usage(bucket.Used), nil}\n\t\t\tdefault:\n\t\t\t\treq.response <- response{0, errors.New(\"undefined method\")}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}\n\ntype response struct {\n\tused int64\n\terr  error\n}\n\nconst (\n\tPEEK = iota\n\tACQUIRE\n\tRESET\n)\n\ntype request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}\n\nfunc usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}\n", "n_tokens": 1145, "byte_len": 4088, "file_sha1": "b338e7157e1991756b5e00e16a92773184364688", "start_line": 1, "end_line": 203}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "module": "pkg.ratelimit.mocks.limiter_mocks", "ext": "go", "chunk_number": 1, "symbols": ["NewMocklimiter", "EXPECT", "Acquire", "AcquireN", "Peek", "Reset", "NewMockstorage", "Delete", "Get", "Mocklimiter", "MocklimiterMockRecorder", "Mockstorage", "MockstorageMockRecorder", "acquire", "acquiren", "mocks", "gomock", "object", "type", "mock", "caller", "arg", "arg1", "package", "method", "ratelimit", "weather", "time", "instance", "reflect", "Set", "arg2", "duration", "controller", "creates", "recorder", "expect", "indicate", "expected", "indicates", "typeof", "mockstorage", "command", "new", "token", "bucket", "call", "storage", "destination", "struct"], "ast_kind": "class_or_type", "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: limiter.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tratelimit \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mocklimiter is a mock of limiter interface.\ntype Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}\n\n// MocklimiterMockRecorder is the mock recorder for Mocklimiter.\ntype MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}\n\n// NewMocklimiter creates a new mock instance.\nfunc NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}\n\n// Acquire mocks base method.\nfunc (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}\n\n// AcquireN mocks base method.\nfunc (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// AcquireN indicates an expected call of AcquireN.\nfunc (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}\n\n// Peek mocks base method.\nfunc (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Peek indicates an expected call of Peek.\nfunc (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}\n\n// Reset mocks base method.\nfunc (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Reset indicates an expected call of Reset.\nfunc (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}\n\n// Mockstorage is a mock of storage interface.\ntype Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}\n\n// MockstorageMockRecorder is the mock recorder for Mockstorage.\ntype MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}\n\n// NewMockstorage creates a new mock instance.\nfunc NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}\n\n// Delete mocks base method.\nfunc (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Delete indicates an expected call of Delete.\nfunc (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}\n\n// Get mocks base method.\nfunc (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 1208, "byte_len": 4243, "file_sha1": "b9ce8e74c63e2be2a9370a567f0741b34cc322e7", "start_line": 1, "end_line": 147}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "module": "pkg.ratelimit.mocks.limiter_mocks", "ext": "go", "chunk_number": 2, "symbols": ["Get", "Set", "mocks", "gomock", "arg", "arg2", "mock", "duration", "arg1", "method", "ratelimit", "expected", "time", "reflect", "indicates", "token", "bucket", "mockstorage", "type", "typeof", "call", "ctrl", "base", "string", "ret", "ret0", "return", "helper", "error", "record", "NewMocklimiter", "EXPECT", "Acquire", "AcquireN", "Peek", "Reset", "NewMockstorage", "Delete", "Mocklimiter", "MocklimiterMockRecorder", "Mockstorage", "MockstorageMockRecorder", "acquire", "acquiren", "object", "caller", "package", "weather", "instance", "controller"], "ast_kind": "function_or_method", "text": "// Get indicates an expected call of Get.\nfunc (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}\n\n// Set mocks base method.\nfunc (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Set indicates an expected call of Set.\nfunc (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}\n", "n_tokens": 217, "byte_len": 741, "file_sha1": "b9ce8e74c63e2be2a9370a567f0741b34cc322e7", "start_line": 148, "end_line": 167}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go", "rel_path": "pkg/aws/config.go", "module": "pkg.aws.config", "ext": "go", "chunk_number": 1, "symbols": ["GetConfig", "load", "default", "opt", "fns", "with", "credentials", "package", "secret", "key", "github", "config", "context", "new", "static", "todo", "signing", "region", "session", "token", "endpoint", "resolver", "interface", "string", "return", "access", "get", "import", "options", "aws", "service", "error", "partition", "partitionid", "sdk", "not", "func", "append"], "ast_kind": "function_or_method", "text": "package aws\n\nimport (\n\t\"context\"\n\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\tawsConfig \"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\n\nfunc GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {\n\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\n\treturn cfg\n}\n", "n_tokens": 275, "byte_len": 1093, "file_sha1": "85894f745b0d903307bce06efe5ba4fb51a2b3a1", "start_line": 1, "end_line": 44}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "language": "go", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go", "rel_path": "pkg/aws/client.go", "module": "pkg.aws.client", "ext": "go", "chunk_number": 1, "symbols": ["NewDynamoDbClientFromConfig", "NewDynamoDbClient", "package", "secret", "key", "github", "config", "new", "dynamo", "session", "token", "string", "from", "client", "return", "access", "get", "import", "service", "region", "dynamodb", "aws", "sdk", "endpoint", "func"], "ast_kind": "function_or_method", "text": "package aws\n\nimport (\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\n\nfunc NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}\n\nfunc NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}\n", "n_tokens": 111, "byte_len": 447, "file_sha1": "64b4fbd3c266c015e43556d3b6de94cbb52cf792", "start_line": 1, "end_line": 15}
