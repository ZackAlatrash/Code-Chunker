{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/main.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 12, "text": "package main\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)\n\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "n_tokens": 43, "primary_symbol": "main", "primary_kind": "function", "primary_span": [7, 12], "def_symbols": ["main"], "symbols": ["main", "package", "import", "impalastudios", "com", "weather", "foreca_proxy", "cmd", "func", "err", "RunRootCmd", "nil", "panic"], "doc_head": "package main\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package cmd\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n", "n_tokens": 43, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "cmd", "import", "impalastudios", "com", "weather", "foreca_proxy", "serve", "strings", "github", "spf13", "cobra", "viper"], "doc_head": "package cmd\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 11, "end_line": 51, "text": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")\n\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times to request the forecasts about.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.temp-unit\", \"C\", \"The default temperature unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.wind-unit\", \"KMH\", \"The default wind speed unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.lang\", \"en\", \"The locale of the forecast's descriptions.\")\n\n\tcmd.PersistentFlags().String(\"mappings.dynamodb.table-name\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"memcached.address\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}\n", "n_tokens": 515, "primary_symbol": "RunRootCmd", "primary_kind": "function", "primary_span": [12, 51], "def_symbols": ["RunRootCmd"], "symbols": ["RunRootCmd", "entrypoint", "the", "root", "command", "func", "error", "viper", "AutomaticEnv", "SetEnvKeyReplacer", "strings", "NewReplacer", "cmd", "cobra", "Command", "Use", "weather", "foreca", "proxy", "Short", "Weather", "Foreca", "Proxy", "Microservice", "Version", "AddCommand", "serve", "New", "PersistentFlags", "Bool", "logging", "debug", "false", "Whether", "emit", "level", "logs", "not", "String", "encoding", "json", "The", "log", "strategy", "StringP", "app", "name", "application", "endpoint", "url", "https", "pfa", "com", "data", "provider", "requests", "per", "second", "rate", "limit", "applied", "expiration", "duration", "amount", "time", "already", "requested", "forecast", "should", "considered", "fresh", "query", "default", "format", "xml", "itwcalculator", "jun17pres", "value", "for", "param", "ftimes", "times", "request", "forecasts", "about", "temp", "unit", "temperature", "wind", "KMH", "speed", "lang", "locale", "descriptions", "mappings", "dynamodb", "table", "DynamoDB", "memcached", "address", "aws", "access", "key", "AWS", "secret", "session", "token", "region", "BindPFlags", "return", "Execute"], "doc_head": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\tcmd.AddCommand(serve.New())\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 42, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\trequestid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\totelgrpctrace \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\totelgrpcmetric \"go.impalastudios.com/otel/grpc\"\n\tgrpcv0 \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/handlers/grpc/v0\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"net\"\n\t\"os\"\n)\n", "n_tokens": 465, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 42], "def_symbols": [], "symbols": ["import", "context", "fmt", "github", "com", "dropbox", "godropbox", "memcache", "grpc", "ecosystem", "middleware", "interceptors", "logging", "recovery", "lru", "hashicorp", "golang", "impalastudios", "log", "xotel", "otel", "requestid", "weather", "foreca_proxy", "internal", "foreca", "adapters", "clients", "pkg", "aws", "cache", "ratelimit", "otelgrpctrace", "opentelemetry", "contrib", "instrumentation", "google", "org", "otelgrpc", "propagation", "uber", "zap", "codes", "metadata", "status", "net", "http", "time", "cockroachdb", "errors", "spf13", "cobra", "viper", "otelgrpcmetric", "grpcv0", "handlers", "pbv0", "sdk", "otelaws", "reflection"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\trequestid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\totelgrpctrace \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\totelgrp"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 79, "text": "func InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\n\t\tlogger := l.With(f...)\n\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}\n", "n_tokens": 242, "primary_symbol": "InterceptorLogger", "primary_kind": "function", "primary_span": [43, 79], "def_symbols": ["InterceptorLogger"], "symbols": ["InterceptorLogger", "func", "zap", "Logger", "logging", "return", "LoggerFunc", "ctx", "context", "Context", "lvl", "Level", "msg", "string", "fields", "any", "make", "Field", "len", "for", "key", "value", "switch", "type", "case", "append", "String", "int", "Int", "bool", "Bool", "default", "Any", "logger", "With", "LevelDebug", "Debug", "LevelInfo", "Info", "LevelWarn", "Warn", "LevelError", "Error", "panic", "fmt", "Sprintf", "unknown", "level"], "doc_head": "func InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\t\tlogger := l.With(f...)\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 80, "end_line": 95, "text": "func newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\n\treturn cmd\n}\n", "n_tokens": 111, "primary_symbol": "newServeGrpcCommand", "primary_kind": "function", "primary_span": [80, 95], "def_symbols": ["newServeGrpcCommand"], "symbols": ["newServeGrpcCommand", "func", "cobra", "Command", "cmd", "Use", "grpc", "Short", "Start", "gRPC", "server", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runServeGrpc", "Args", "ExactArgs", "PersistentFlags", "Int", "app", "port", "service"], "doc_head": "func newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 96, "end_line": 250, "text": "func runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n\n\tawsCfg := aws.GetConfig(\n\t\tviper.GetString(\"aws.access-key-id\"),\n\t\tviper.GetString(\"aws.secret-access-key\"),\n\t\tviper.GetString(\"aws.session-token\"),\n\t\tviper.GetString(\"aws.region\"),\n\t\tviper.GetString(\"aws.endpoint-url\"),\n\t)\n\totelaws.AppendMiddlewares(&awsCfg.APIOptions)\n\n\tddb := aws.NewDynamoDbClientFromConfig(awsCfg)\n\n\tmappingsCache, err := lru.New[int, *foreca.Mapping](5_000)\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tmappingsRepository := adapters.NewMappingDynamoDBRepository(\n\t\tviper.GetString(\"mappings.dynamodb.table-name\"),\n\t\tddb,\n\t\tmappingsCache,\n\t)\n\n\tmemcachedRateLimiterConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tlimiter := ratelimit.NewSingleThreadLimiter(\n\t\tviper.GetInt64(\"foreca.requests-per-second\"),\n\t\ttime.Second,\n\t\tratelimit.NewMemcachedStorage(memcache.NewRawBinaryClient(0, memcachedRateLimiterConn), \"weather:proxies:\"),\n\t)\n\n\tlimiter.Start()\n\n\tforecaClient := clients.NewForecaClient(\n\t\t&http.Client{Timeout: 5 * time.Second},\n\t\tviper.GetString(\"foreca.endpoint-url\"),\n\t\tmap[string]string{\n\t\t\t\"format\":   viper.GetString(\"foreca.query.default.format\"),\n\t\t\t\"ftimes\":   viper.GetString(\"foreca.query.default.ftimes\"),\n\t\t\t\"tempunit\": viper.GetString(\"foreca.query.default.temp-unit\"),\n\t\t\t\"windunit\": viper.GetString(\"foreca.query.default.wind-unit\"),\n\t\t\t\"lang\":     viper.GetString(\"foreca.query.default.lang\"),\n\t\t},\n\t\tlimiter,\n\t\tclients.NewTransformer(),\n\t)\n\n\tmemcachedForecastsConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tforecastService := foreca.NewService(\n\t\tforecaClient,\n\t\tmappingsRepository,\n\t\tcache.NewMemcached(memcache.NewRawBinaryClient(1, memcachedForecastsConn)),\n\t\t\"weather:proxies:foreca:\",\n\t\tviper.GetDuration(\"foreca.expiration-duration\"),\n\t)\n\n\trecoveryOpts := []recovery.Option{\n\t\trecovery.WithRecoveryHandler(func(p any) error {\n\t\t\treturn status.Error(codes.Internal, \"We cannot serve your request right now. Please try again later.\")\n\t\t}),\n\t}\n\tloggingOpts := []logging.Option{\n\t\tlogging.WithLogOnEvents(logging.StartCall),\n\t\tlogging.WithFieldsFromContextAndCallMeta(func(ctx context.Context, c interceptors.CallMeta) logging.Fields {\n\t\t\tvar requestID string\n\t\t\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\t\t\tif m, found := md[requestid.MetadataKey]; found && len(m) > 0 {\n\t\t\t\t\trequestID = m[0]\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn logging.Fields{\"request_id\", requestID}\n\t\t}),\n\t}\n\tserver := grpc.NewServer(\n\t\tgrpc.StatsHandler(otelgrpctrace.NewServerHandler()),\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\totelgrpcmetric.UnaryServerInterceptor(),\n\t\t\trequestid.NewServerUnaryInterceptor(),\n\t\t\tlogging.UnaryServerInterceptor(InterceptorLogger(logger), loggingOpts...),\n\t\t\trecovery.UnaryServerInterceptor(recoveryOpts...),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\totelgrpcmetric.StreamServerInterceptor(),\n\t\t),\n\t)\n\tserverV0 := grpcv0.NewServer(forecastService)\n\tpbv0.RegisterForecaProxyServer(server, serverV0)\n\n\treflection.Register(server)\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", viper.GetInt(\"app.grpc.port\")))\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tgo func(s *grpc.Server, lis *net.Listener) {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := s.Serve(*lis); err != nil {\n\t\t\tlogger.Fatal(fmt.Sprintf(\"Failed to serve gRPC: %v\", err))\n\t\t}\n\t}(server, &listener)\n\n\ts := <-quit\n\tlogger.Info(fmt.Sprintf(\"Received signal %v\", s))\n\n\tserver.GracefulStop()\n\tlimiter.Stop()\n\tif err := tp.Shutdown(cmd.Context()); err != nil {\n\t\tlog.Error(context.TODO(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tclose(quit)\n\n\tlogger.Info(\"Application shutdown gracefully.\")\n\n\treturn nil\n}\n", "n_tokens": 1242, "primary_symbol": "runServeGrpc", "primary_kind": "function", "primary_span": [96, 250], "def_symbols": ["runServeGrpc"], "symbols": ["runServeGrpc", "func", "cmd", "cobra", "Command", "string", "error", "quit", "make", "chan", "Signal", "defer", "close", "logger", "log", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "SetLogger", "err", "xotel", "NewTracerProvider", "Context", "TracerProviderConfig", "ServiceName", "Endpoint", "otel", "tracer", "endpoint", "nil", "return", "errors", "Wrap", "failed", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "awsCfg", "aws", "GetConfig", "access", "key", "secret", "session", "token", "region", "url", "otelaws", "AppendMiddlewares", "APIOptions", "ddb", "NewDynamoDbClientFromConfig", "mappingsCache", "lru", "int", "foreca", "Mapping", "Panic", "Error", "mappingsRepository", "adapters", "NewMappingDynamoDBRepository", "mappings", "dynamodb", "table", "memcachedRateLimiterConn", "net", "Dial", "tcp", "memcached", "address", "limiter", "ratelimit", "NewSingleThreadLimiter", "GetInt64", "requests", "per", "second", "time", "Second", "NewMemcachedStorage", "memcache", "NewRawBinaryClient", "weather", "proxies", "Start", "forecaClient", "clients", "NewForecaClient", "http", "Client", "Timeout", "map", "format", "query", "default", "ftimes", "tempunit", "temp", "unit", "windunit", "wind", "lang", "NewTransformer", "memcachedForecastsConn", "forecastService", "NewService", "cache", "NewMemcached", "expiration", "duration", "recoveryOpts", "recovery", "Option", "WithRecoveryHandler", "any", "status", "codes", "Internal", "cannot", "serve", "your", "request", "right", "now", "Please", "try", "again", "later", "loggingOpts", "WithLogOnEvents", "StartCall", "WithFieldsFromContextAndCallMeta", "ctx", "context", "interceptors", "CallMeta", "Fields", "var", "requestID", "metadata", "FromIncomingContext", "found", "requestid", "MetadataKey", "len", "request_id", "server", "grpc", "NewServer", "StatsHandler", "otelgrpctrace", "NewServerHandler", "ChainUnaryInterceptor", "otelgrpcmetric", "UnaryServerInterceptor", "NewServerUnaryInterceptor", "InterceptorLogger", "ChainStreamInterceptor", "StreamServerInterceptor", "serverV0", "grpcv0", "pbv0", "RegisterForecaProxyServer", "reflection", "Register", "listener", "Listen", "fmt", "Sprintf", "GetInt", "port", "Server", "lis", "Listener", "Info", "started", "Ready", "accept", "incoming", "Serve", "Fatal", "Failed", "gRPC", "Received", "signal", "GracefulStop", "Stop", "Shutdown", "TODO", "occurred", "while", "shutting", "down", "the", "zap", "Application", "shutdown", "gracefully"], "doc_head": "func runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\n\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeGrpcCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}\n", "n_tokens": 139, "primary_symbol": "New", "primary_kind": "function", "primary_span": [8, 22], "def_symbols": ["New"], "symbols": ["New", "package", "serve", "import", "github", "com", "spf13", "cobra", "time", "func", "Command", "cmd", "Use", "Short", "Serve", "AddCommand", "newServeGrpcCommand", "PersistentFlags", "String", "otel", "tracer", "endpoint", "localhost", "The", "URL", "the", "tracing", "collector", "meter", "Duration", "interval", "Second", "which", "metrics", "will", "reported", "return"], "doc_head": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\tcmd.AddCommand(newServeGrpcCommand())\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 33, "text": "package foreca\n\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\n\ntype PressureTrend int\n\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\n\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\n\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\n\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\n\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}\n", "n_tokens": 169, "primary_symbol": "String", "primary_kind": "function", "primary_span": [17, 33], "def_symbols": ["String", "IsFalling", "IsSteady"], "symbols": ["String", "IsFalling", "IsSteady", "package", "foreca", "type", "Mapping", "struct", "int", "ProviderID", "Timezone", "string", "PressureTrend", "const", "PressureTrendFalling", "iota", "PressureTrendSteady", "PressureTrendRising", "func", "return", "Falling", "Steady", "Rising", "Pressure", "Millibar", "float64", "json", "mbar", "Trend", "bool"], "doc_head": "package foreca\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\ntype PressureTrend int\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 34, "end_line": 55, "text": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\n\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)\n", "n_tokens": 205, "primary_symbol": "IsRising", "primary_kind": "function", "primary_span": [34, 55], "def_symbols": ["IsRising"], "symbols": ["IsRising", "func", "Pressure", "bool", "return", "Trend", "PressureTrendRising", "const", "WeatherCodeClear", "clear", "WeatherCodeMostlySunny", "mostlysunny", "WeatherCodePartlyCloudy", "partlycloudy", "WeatherCodeMostlyCloudy", "mostlycloudy", "WeatherCodeCloudy", "cloudy", "WeatherCodeHazy", "hazy", "WeatherCodeFog", "fog", "WeatherCodeChanceOfRain", "chancerain", "WeatherCodeRain", "rain", "WeatherCodeChanceOfThunderstorms", "chancetstorms", "WeatherCodeThunderstorms", "tstorms", "WeatherCodeChanceOfSleet", "chancesleet", "WeatherCodeSleet", "sleet", "WeatherCodeChanceOfSnow", "chancesnow", "WeatherCodeSnow", "snow"], "doc_head": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 56, "end_line": 77, "text": "type WeatherCode string\n\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\n\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\n\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}\n\ntype WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}\n", "n_tokens": 108, "primary_symbol": "", "primary_kind": "", "primary_span": [56, 77], "def_symbols": [], "symbols": ["type", "WeatherCode", "string", "WeatherCondition", "struct", "Code", "json", "Description", "WindDirection", "Abbreviation", "Degrees", "float64", "deg", "Wind", "Direction", "Speed", "WindGust", "Gust"], "doc_head": "type WeatherCode string\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}\ntype WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 78, "end_line": 94, "text": "type CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n", "n_tokens": 182, "primary_symbol": "", "primary_kind": "", "primary_span": [78, 94], "def_symbols": [], "symbols": ["type", "CurrentCondition", "struct", "Epoch", "int64", "json", "tms", "Visibility", "float64", "Precipitation", "PrecipitationNextHour", "prn", "WeatherCondition", "WeatherConditionNextHour", "wcn", "Temperature", "TemperatureFeelsLike", "HumidityPercentage", "int", "WindGust", "DewPoint", "HeatIndex", "Pressure", "UVIndex", "uvi"], "doc_head": "type CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 95, "end_line": 114, "text": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}\n", "n_tokens": 220, "primary_symbol": "", "primary_kind": "", "primary_span": [95, 114], "def_symbols": [], "symbols": ["type", "DailyCondition", "struct", "Epoch", "int64", "json", "tms", "MinTemperature", "float64", "MaxTemperature", "Precipitation", "PrecipitationDay", "pry", "PrecipitationNight", "prt", "Snow", "SnowDay", "SnowNight", "PrecipitationProbability", "int", "Wind", "AverageHumidityPercentage", "rhe", "WeatherCondition", "WeatherConditionNight", "wct", "UVIndex", "uvi", "SunriseEpoch", "rise", "SunsetEpoch", "set"], "doc_head": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 115, "end_line": 140, "text": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\n\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 200, "primary_symbol": "", "primary_kind": "", "primary_span": [115, 140], "def_symbols": [], "symbols": ["type", "HourlyCondition", "struct", "Epoch", "int64", "json", "tms", "Temperature", "float64", "TemperatureFeelsLike", "WeatherCondition", "Precipitation", "Snow", "PrecipitationProbability", "int", "Wind", "Pressure", "HumidityPercentage", "UVIndex", "uvi", "Forecast", "CurrentCondition", "DailyConditions", "DailyCondition", "HourlyConditions", "CachedForecast", "Key", "string", "Value", "byte", "Expiration", "int32"], "doc_head": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 29, "text": "package foreca\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}\n", "n_tokens": 197, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 29], "def_symbols": [], "symbols": ["package", "foreca", "import", "context", "encoding", "json", "fmt", "github", "com", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "cache", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "golang", "sync", "singleflight", "strings", "time", "generate", "bin", "mockgen", "source", "service", "destination", "mocks", "service_mocks", "type", "providerClient", "interface", "GetForecastForLocation", "ctx", "Context", "int", "loc", "Location", "Forecast", "error", "mappingsRepository", "Get", "Mapping"], "doc_head": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 30, "end_line": 54, "text": "\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\n\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}\n\nfunc NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}\n", "n_tokens": 144, "primary_symbol": "NewService", "primary_kind": "function", "primary_span": [45, 54], "def_symbols": ["NewService"], "symbols": ["NewService", "cacheClient", "interface", "Get", "key", "string", "cache", "Item", "error", "Set", "value", "byte", "type", "Service", "struct", "singleflight", "Group", "provider", "providerClient", "mappings", "mappingsRepository", "cacheKeyPrefix", "cacheExpirationDuration", "time", "Duration", "func", "return"], "doc_head": "\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}\nfunc NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 55, "end_line": 87, "text": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}\n", "n_tokens": 247, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [55, 87], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "func", "Service", "ctx", "context", "Context", "int", "Forecast", "error", "span", "xotel", "Tracer", "Start", "service", "forecast", "location", "trace", "WithSpanKind", "SpanKindInternal", "defer", "End", "SetAttributes", "attribute", "Int", "location_id", "mapping", "err", "mappings", "Get", "nil", "SetStatus", "codes", "Error", "Mapping", "not", "found", "RecordError", "log", "Cannot", "get", "for", "zap", "errors", "ErrMappingNotFound", "return", "ErrLocationNotFound", "Wrap", "cannot", "loc", "time", "LoadLocation", "Timezone", "Unsupported", "timezone", "Any", "unsupported"], "doc_head": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 88, "end_line": 160, "text": "\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}\n", "n_tokens": 567, "primary_symbol": "", "primary_kind": "", "primary_span": [88, 160], "def_symbols": [], "symbols": ["result", "err", "getSingleFlightKey", "mapping", "func", "interface", "error", "cache", "Get", "getCacheKeyForLocation", "ProviderID", "nil", "log", "Debug", "ctx", "Cache", "hit", "Checking", "for", "freshness", "zap", "Int", "var", "item", "expirableCacheItem", "json", "Unmarshal", "Value", "time", "Now", "UTC", "Unix", "ExpiresAtUnix", "span", "SetAttributes", "attribute", "Bool", "cache_hit", "true", "Returning", "cached", "forecast", "return", "Forecast", "cacheHit", "provider", "GetForecastForLocation", "loc", "Error", "occurred", "while", "retrieving", "location", "Any", "errors", "ErrRequestThrottled", "Request", "throttled", "without", "Info", "stale", "Marshal", "Add", "cacheExpirationDuration", "Cannot", "marshal", "Caching", "Set", "response", "SetStatus", "codes", "RecordError"], "doc_head": "\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\t\t\t\tv"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 161, "end_line": 173, "text": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\n\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\n\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}\n", "n_tokens": 98, "primary_symbol": "getCacheKeyForLocation", "primary_kind": "function", "primary_span": [161, 173], "def_symbols": ["getCacheKeyForLocation", "getSingleFlightKey"], "symbols": ["getCacheKeyForLocation", "getSingleFlightKey", "func", "Service", "int", "string", "return", "fmt", "Sprintf", "strings", "Trim", "cacheKeyPrefix", "mapping", "Mapping", "foreca", "locations", "ProviderID", "type", "expirableCacheItem", "struct", "ExpiresAtUnix", "int64", "json", "exp", "Forecast"], "doc_head": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package foreca_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n", "n_tokens": 140, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [24, 27], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "package", "foreca_test", "import", "context", "errors", "fmt", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "mocks", "pkg", "cache", "uber", "org", "mock", "gomock", "testing", "time", "type", "serviceTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController"], "doc_head": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t}\n)\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 46, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n", "n_tokens": 140, "primary_symbol": "TestGetForecastForLocationMappingError", "primary_kind": "function", "primary_span": [28, 46], "def_symbols": ["TestGetForecastForLocationMappingError"], "symbols": ["TestGetForecastForLocationMappingError", "func", "suite", "serviceTestSuite", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "nil", "errors", "New", "error", "foreca", "NewService", "NewMockproviderClient", "NewMockcacheClient", "weather", "proxies", "test", "time", "Second", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "cannot", "get", "mapping"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 47, "end_line": 69, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}\n", "n_tokens": 165, "primary_symbol": "TestGetForecastForLocationInvalidLocation", "primary_kind": "function", "primary_span": [47, 69], "def_symbols": ["TestGetForecastForLocationInvalidLocation"], "symbols": ["TestGetForecastForLocationInvalidLocation", "func", "suite", "serviceTestSuite", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "invalid", "nil", "NewService", "NewMockproviderClient", "NewMockcacheClient", "weather", "proxies", "test", "time", "Second", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "unsupported", "timezone"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 70, "end_line": 100, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}\n", "n_tokens": 247, "primary_symbol": "TestGetForecastForLocationNonCacheForecastError", "primary_kind": "function", "primary_span": [70, 100], "def_symbols": ["TestGetForecastForLocationNonCacheForecastError"], "symbols": ["TestGetForecastForLocationNonCacheForecastError", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "errors", "New", "error", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "cache", "miss", "NewService", "Second", "err", "context", "TODO", "Assert", "NotNil", "ErrorContains"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 101, "end_line": 140, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 347, "primary_symbol": "TestGetForecastForLocationSettingCacheError", "primary_kind": "function", "primary_span": [101, 140], "def_symbols": ["TestGetForecastForLocationSettingCacheError"], "symbols": ["TestGetForecastForLocationSettingCacheError", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "Forecast", "CurrentCondition", "DailyConditions", "make", "DailyCondition", "HourlyConditions", "HourlyCondition", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "errors", "New", "cache", "miss", "Set", "error", "NewService", "Second", "err", "context", "TODO", "Assert", "Nil", "NotNil"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentConditi"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 141, "end_line": 180, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 368, "primary_symbol": "TestGetForecastForLocationFromCache", "primary_kind": "function", "primary_span": [141, 180], "def_symbols": ["TestGetForecastForLocationFromCache"], "symbols": ["TestGetForecastForLocationFromCache", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "Times", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "cache", "Item", "Key", "locations", "Value", "byte", "fmt", "Sprintf", "exp", "Now", "UTC", "Add", "Hour", "Unix", "Expiration", "int32", "Set", "NewService", "Second", "err", "context", "TODO", "Assert", "Nil", "NotNil", "CurrentCondition", "DailyConditions", "HourlyConditions"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentConditi"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 181, "end_line": 184, "text": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}\n", "n_tokens": 19, "primary_symbol": "TestService", "primary_kind": "function", "primary_span": [181, 184], "def_symbols": ["TestService"], "symbols": ["TestService", "func", "testing", "suite", "Run", "new", "serviceTestSuite"], "doc_head": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go", "rel_path": "internal/foreca/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package foreca\n\nimport \"errors\"\n\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)\n", "n_tokens": 50, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "foreca", "import", "errors", "var", "ErrMappingNotFound", "New", "mapping", "not", "found", "ErrRequestThrottled", "request", "throttled", "ErrLocationNotFound", "location"], "doc_head": "package foreca\nimport \"errors\"\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}\n", "n_tokens": 192, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "time", "foreca", "impalastudios", "com", "weather", "foreca_proxy", "internal", "cache", "pkg", "gomock", "uber", "org", "mock", "MockproviderClient", "providerClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockproviderClientMockRecorder", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 53, "text": "// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}\n\n// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 193, "primary_symbol": "NewMockproviderClient", "primary_kind": "function", "primary_span": [34, 53], "def_symbols": ["NewMockproviderClient", "EXPECT", "GetForecastForLocation"], "symbols": ["NewMockproviderClient", "EXPECT", "GetForecastForLocation", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockproviderClient", "recorder", "MockproviderClientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "ctx", "context", "Context", "int", "loc", "time", "Location", "foreca", "Forecast", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}\n// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 54, "end_line": 70, "text": "// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}\n", "n_tokens": 160, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [55, 70], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "indicates", "expected", "call", "func", "MockproviderClientMockRecorder", "ctx", "loc", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockproviderClient", "nil", "MockmappingsRepository", "mappingsRepository", "interface", "type", "struct", "Controller", "recorder", "MockmappingsRepositoryMockRecorder", "the", "for"], "doc_head": "// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 71, "end_line": 91, "text": "// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 183, "primary_symbol": "NewMockmappingsRepository", "primary_kind": "function", "primary_span": [72, 91], "def_symbols": ["NewMockmappingsRepository", "EXPECT", "Get"], "symbols": ["NewMockmappingsRepository", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockmappingsRepository", "recorder", "MockmappingsRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "ctx", "context", "Context", "int", "foreca", "Mapping", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 92, "end_line": 115, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}\n\n// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 191, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [93, 115], "def_symbols": ["Get", "NewMockcacheClient"], "symbols": ["Get", "NewMockcacheClient", "indicates", "expected", "call", "func", "MockmappingsRepositoryMockRecorder", "ctx", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockmappingsRepository", "nil", "MockcacheClient", "cacheClient", "interface", "type", "struct", "Controller", "recorder", "MockcacheClientMockRecorder", "the", "for", "creates", "new", "instance"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}\n// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 116, "end_line": 135, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}\n", "n_tokens": 177, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [117, 135], "def_symbols": ["EXPECT", "Get"], "symbols": ["EXPECT", "Get", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockcacheClient", "MockcacheClientMockRecorder", "return", "recorder", "mocks", "base", "method", "key", "string", "cache", "Item", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 136, "end_line": 149, "text": "// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}\n", "n_tokens": 129, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [137, 149], "def_symbols": ["Set"], "symbols": ["Set", "mocks", "base", "method", "func", "MockcacheClient", "key", "string", "value", "byte", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return", "indicates", "expected", "call", "MockcacheClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package adapters_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\n\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n", "n_tokens": 183, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [25, 28], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "package", "adapters_test", "import", "context", "errors", "github", "com", "aws", "sdk", "service", "dynamodb", "types", "smithy", "ptr", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "adapters", "mocks", "uber", "org", "mock", "gomock", "testing", "type", "dynamoMappingsRepositoryTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController"], "doc_head": "package adapters_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t}\n)\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 29, "end_line": 55, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n", "n_tokens": 247, "primary_symbol": "TestGetDynamoError", "primary_kind": "function", "primary_span": [29, 55], "def_symbols": ["TestGetDynamoError"], "symbols": ["TestGetDynamoError", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "nil", "errors", "New", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "NotNil", "ErrorContains", "cannot", "get", "mapping"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\t_, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 56, "end_line": 82, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}\n", "n_tokens": 261, "primary_symbol": "TestGetNoMapping", "primary_kind": "function", "primary_span": [56, 82], "def_symbols": ["TestGetNoMapping"], "symbols": ["TestGetNoMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "Item", "make", "nil", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "NotNil", "ErrorIs", "ErrMappingNotFound"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\t_, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 83, "end_line": 121, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n", "n_tokens": 366, "primary_symbol": "TestGetNoCacheMapping", "primary_kind": "function", "primary_span": [83, 121], "def_symbols": ["TestGetNoCacheMapping"], "symbols": ["TestGetNoCacheMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "Item", "provider_id", "AttributeValueMemberS", "Europe", "Amsterdam", "nil", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "Add", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "Nil", "NotNil", "Equal", "ProviderID", "Timezone"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\tm, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Ass"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 122, "end_line": 148, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n", "n_tokens": 201, "primary_symbol": "TestGetCachedMapping", "primary_kind": "function", "primary_span": [122, 148], "def_symbols": ["TestGetCachedMapping"], "symbols": ["TestGetCachedMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "Times", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "ProviderID", "Timezone", "Europe", "Amsterdam", "true", "adapters", "NewMappingDynamoDBRepository", "mappings_test", "err", "context", "TODO", "Assert", "Nil", "NotNil", "Equal"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\tm, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 149, "end_line": 152, "text": "func TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}\n", "n_tokens": 23, "primary_symbol": "TestMappingsRepository", "primary_kind": "function", "primary_span": [149, 152], "def_symbols": ["TestMappingsRepository"], "symbols": ["TestMappingsRepository", "func", "testing", "suite", "Run", "new", "dynamoMappingsRepositoryTestSuite"], "doc_head": "func TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "package adapters\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}\n", "n_tokens": 191, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["package", "adapters", "import", "context", "github", "com", "aws", "sdk", "feature", "dynamodb", "attributevalue", "service", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "internal", "foreca", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "type", "mappingDynamoDB", "struct", "int", "json", "dynamodbav", "ProviderID", "provider_id", "Timezone", "string"], "doc_head": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 48, "text": "//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)\n\ntype MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\n\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}\n", "n_tokens": 202, "primary_symbol": "NewMappingDynamoDBRepository", "primary_kind": "function", "primary_span": [41, 48], "def_symbols": ["NewMappingDynamoDBRepository"], "symbols": ["NewMappingDynamoDBRepository", "generate", "bin", "mockgen", "source", "mapping_dynamodb_repository", "destination", "mocks", "mapping_dynamodb_repository_mocks", "package", "type", "mappingDynamoDBClient", "interface", "GetItem", "ctx", "context", "Context", "params", "dynamodb", "GetItemInput", "optFns", "func", "Options", "GetItemOutput", "error", "cache", "any", "Get", "bool", "Add", "MappingDynamoDBRepository", "struct", "tableName", "string", "client", "int", "foreca", "Mapping", "return"], "doc_head": "//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)\ntype MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 49, "end_line": 58, "text": "func (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}\n", "n_tokens": 107, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [49, 58], "def_symbols": ["Get"], "symbols": ["Get", "func", "MappingDynamoDBRepository", "ctx", "context", "Context", "int", "foreca", "Mapping", "error", "span", "xotel", "Tracer", "Start", "mapping", "repository", "get", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "found", "cache", "SetAttributes", "attribute", "Bool", "cache_hit", "true", "log", "Debug", "zap", "Any", "return", "nil"], "doc_head": "func (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 59, "end_line": 106, "text": "\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\n\tspan.SetAttributes(attribute.Bool(\"cache_hit\", false))\n\n\tm := &foreca.Mapping{\n\t\tID:         i.ID,\n\t\tProviderID: i.ProviderID,\n\t\tTimezone:   i.Timezone,\n\t}\n\tr.cache.Add(id, m)\n\n\treturn m, nil\n}\n", "n_tokens": 370, "primary_symbol": "", "primary_kind": "", "primary_span": [59, 106], "def_symbols": [], "symbols": ["key", "err", "attributevalue", "MarshalMap", "map", "string", "interface", "nil", "log", "Error", "ctx", "Cannot", "marshal", "zap", "Int", "span", "SetStatus", "codes", "RecordError", "return", "errors", "Wrap", "mapping", "dynamodb", "repository", "cannot", "resp", "client", "GetItem", "GetItemInput", "TableName", "aws", "String", "tableName", "Key", "ConsistentRead", "Bool", "false", "DynamoDB", "error", "get", "len", "Item", "Warn", "Mapping", "not", "found", "foreca", "ErrMappingNotFound", "var", "mappingDynamoDB", "UnmarshalMap", "unmarshal", "Any", "item", "SetAttributes", "attribute", "cache_hit", "ProviderID", "Timezone", "cache", "Add"], "doc_head": "\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\tspan.SetAttributes(attribut"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 30, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}\n", "n_tokens": 201, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 30], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "mapping_dynamodb_repository", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "mapping_dynamodb_repository_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "dynamodb", "github", "com", "aws", "sdk", "service", "gomock", "uber", "org", "mock", "MockmappingDynamoDBClient", "mappingDynamoDBClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockmappingDynamoDBClientMockRecorder", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 31, "end_line": 42, "text": "// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 113, "primary_symbol": "NewMockmappingDynamoDBClient", "primary_kind": "function", "primary_span": [32, 42], "def_symbols": ["NewMockmappingDynamoDBClient", "EXPECT"], "symbols": ["NewMockmappingDynamoDBClient", "EXPECT", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockmappingDynamoDBClient", "recorder", "MockmappingDynamoDBClientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use"], "doc_head": "// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 55, "text": "// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 135, "primary_symbol": "GetItem", "primary_kind": "function", "primary_span": [44, 55], "def_symbols": ["GetItem"], "symbols": ["GetItem", "mocks", "base", "method", "func", "MockmappingDynamoDBClient", "ctx", "context", "Context", "params", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "ctrl", "Helper", "varargs", "any", "for", "range", "append", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 56, "end_line": 73, "text": "// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}\n\n// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}\n", "n_tokens": 175, "primary_symbol": "GetItem", "primary_kind": "function", "primary_span": [57, 73], "def_symbols": ["GetItem"], "symbols": ["GetItem", "indicates", "expected", "call", "func", "MockmappingDynamoDBClientMockRecorder", "ctx", "params", "any", "optFns", "gomock", "Call", "mock", "ctrl", "Helper", "varargs", "append", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockmappingDynamoDBClient", "nil", "Mockcache", "cache", "interface", "type", "struct", "Controller", "recorder", "MockcacheMockRecorder", "the", "for"], "doc_head": "// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}\n// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 74, "end_line": 93, "text": "// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}\n", "n_tokens": 173, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [82, 93], "def_symbols": ["EXPECT", "Add"], "symbols": ["EXPECT", "Add", "NewMockcache", "creates", "new", "mock", "instance", "func", "any", "ctrl", "gomock", "Controller", "Mockcache", "recorder", "MockcacheMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "arg1", "bool", "Helper", "ret", "Call", "ret0"], "doc_head": "// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 94, "end_line": 108, "text": "// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}\n", "n_tokens": 154, "primary_symbol": "Add", "primary_kind": "function", "primary_span": [95, 108], "def_symbols": ["Add", "Get"], "symbols": ["Add", "Get", "indicates", "expected", "call", "func", "MockcacheMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockcache", "nil", "mocks", "base", "method", "bool", "ret", "ret0", "ret1"], "doc_head": "// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 109, "end_line": 114, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}\n", "n_tokens": 71, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [110, 114], "def_symbols": ["Get"], "symbols": ["Get", "indicates", "expected", "call", "func", "MockcacheMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockcache", "nil"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package clients_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}", "n_tokens": 190, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 25], "def_symbols": [], "symbols": ["package", "clients_test", "import", "bytes", "context", "errors", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "adapters", "clients", "mocks", "pkg", "ratelimit", "uber", "org", "mock", "gomock", "net", "http", "testing", "time", "type", "currentConditionTransformer", "interface", "Transform", "CurrentCondition", "HourlyCondition", "Location", "dailyForecastTransformer", "DailyCondition"], "doc_head": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 61, "text": "\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}\n\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}", "n_tokens": 218, "primary_symbol": "", "primary_kind": "", "primary_span": [26, 61], "def_symbols": [], "symbols": ["hourlyForecastTransformer", "interface", "Transform", "clients", "HourlyCondition", "time", "Location", "foreca", "transformer", "Response", "Forecast", "currentConditionTransformerTestSuite", "struct", "suite", "Suite", "currentConditionTransformer", "Time", "timestampFormat", "string", "location", "dailyForecastTransformerTestSuite", "dailyForecastTransformer", "daystampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset", "hourlyForecastTransformerTestSuite"], "doc_head": "\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}\n\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 62, "end_line": 95, "text": "\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\n\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}\n\nfunc (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\n\tsuite.Assert().Nil(cc)\n}\n", "n_tokens": 207, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [83, 95], "def_symbols": ["SetupSuite", "TestTransformMissingCurrentCondition"], "symbols": ["SetupSuite", "TestTransformMissingCurrentCondition", "transformerTestSuite", "struct", "suite", "Suite", "transformer", "time", "Time", "daystampFormat", "string", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset", "location", "Location", "forecaClientTestSuite", "mockController", "gomock", "Controller", "func", "currentConditionTransformerTestSuite", "LoadLocation", "Europe", "Amsterdam", "clients", "NewCurrentConditionTransformer", "Now", "Transform", "nil", "Assert", "Nil"], "doc_head": "\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}\nfunc (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\tsuite.Assert().Nil(cc)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 96, "end_line": 147, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 420, "primary_symbol": "TestTransformMissingHourlyCondition", "primary_kind": "function", "primary_span": [96, 147], "def_symbols": ["TestTransformMissingHourlyCondition"], "symbols": ["TestTransformMissingHourlyCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "clients", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timestampFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "nil", "location", "expected", "foreca", "Epoch", "Unix", "Precipitation", "PrecipitationNextHour", "Code", "cloudy", "Description", "Overcast", "WeatherConditionNextHour", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UVIndex", "Assert", "Equal"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHea"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 148, "end_line": 217, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         1,\n\t\tPrecipitationNextHour: 1,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\tCode:        \"mostlycloudy\",\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -2.4,\n\t\tHumidityPercentage:   80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 578, "primary_symbol": "TestTransformWithHourlyCondition", "primary_kind": "function", "primary_span": [148, 217], "def_symbols": ["TestTransformWithHourlyCondition"], "symbols": ["TestTransformWithHourlyCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "clients", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timestampFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "HourlyCondition", "d300", "cloudy", "Precipitation", "PrecipitationProbability", "UVIndex", "location", "expected", "foreca", "Epoch", "Unix", "PrecipitationNextHour", "Code", "Description", "Overcast", "WeatherConditionNextHour", "mostlycloudy", "Cloudy", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "Assert", "Equal"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            3"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 218, "end_line": 248, "text": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 220, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [218, 248], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "dailyForecastTransformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewDailyForecastTransformer", "now", "Now", "Date", "Year", "Month", "Day", "daystampFormat", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 249, "end_line": 301, "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 470, "primary_symbol": "TestTransformMissingHourlyConditions", "primary_kind": "function", "primary_span": [249, 301], "def_symbols": ["TestTransformMissingHourlyConditions"], "symbols": ["TestTransformMissingHourlyConditions", "func", "suite", "dailyForecastTransformerTestSuite", "transformer", "Transform", "clients", "DailyCondition", "WeatherCondition", "WeatherCode", "d100", "WeatherDescription", "mostly", "clear", "Date", "time", "Format", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "nil", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "AverageHumidityPercentage", "Code", "WeatherCodeMostlySunny", "Description", "Mostly", "Clear", "WeatherConditionNight", "SunriseEpoch", "SunsetEpoch", "Assert", "Equal"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDeg"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 302, "end_line": 391, "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(2 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           1,\n\t\tMaxTemperature:           4,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0,\n\t\tPrecipitationNight:       0,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 66,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 761, "primary_symbol": "TestTransformWithHourlyConditions", "primary_kind": "function", "primary_span": [302, 391], "def_symbols": ["TestTransformWithHourlyConditions"], "symbols": ["TestTransformWithHourlyConditions", "func", "suite", "dailyForecastTransformerTestSuite", "transformer", "Transform", "clients", "DailyCondition", "WeatherCondition", "WeatherCode", "d100", "WeatherDescription", "mostly", "clear", "Date", "time", "Format", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "HourlyCondition", "Timestamp", "Add", "Hour", "daytimeFormat", "Temperature", "TemperatureFeelsLike", "HumidityPercentage", "Pressure", "d000", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "AverageHumidityPercentage", "Code", "WeatherCodeMostlySunny", "Description", "Mostly", "Clear", "WeatherConditionNight", "WeatherCodeClear", "SunriseEpoch", "SunsetEpoch", "Assert", "Equal"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPerce"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 392, "end_line": 400, "text": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}\n", "n_tokens": 103, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [392, 400], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "hourlyForecastTransformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewHourlyForecastTransformer", "now", "Now", "Date", "Year", "Month", "Day", "Hour", "timestampFormat", "daytimeFormat"], "doc_head": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#10", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 401, "end_line": 450, "text": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.78,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tHumidityPercentage: 82,\n\t\tUVIndex:            0,\n\t}\n\n\tsuite.Assert().Equal(expected, hc)\n}\n", "n_tokens": 396, "primary_symbol": "TestTransformHourlyForecast", "primary_kind": "function", "primary_span": [401, 450], "def_symbols": ["TestTransformHourlyForecast"], "symbols": ["TestTransformHourlyForecast", "func", "suite", "hourlyForecastTransformerTestSuite", "transformer", "Transform", "clients", "HourlyCondition", "WeatherCondition", "WeatherCode", "d300", "WeatherDescription", "cloudy", "Timestamp", "time", "Format", "daytimeFormat", "Temperature", "TemperatureFeelsLike", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "HumidityPercentage", "UVIndex", "Pressure", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "Code", "WeatherCodeMostlyCloudy", "Description", "Cloudy", "Snow", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Millibar", "Trend", "PressureTrendSteady", "Assert", "Equal"], "doc_head": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024."}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#11", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 451, "end_line": 481, "text": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 217, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [451, 481], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "transformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewTransformer", "now", "Now", "Date", "Year", "Month", "Day", "daystampFormat", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset"], "doc_head": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#12", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 482, "end_line": 495, "text": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}\n", "n_tokens": 90, "primary_symbol": "TestEmptyResponse", "primary_kind": "function", "primary_span": [482, 495], "def_symbols": ["TestEmptyResponse"], "symbols": ["TestEmptyResponse", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "nil", "DailyConditions", "HourlyConditions", "location", "Assert", "Equal", "foreca", "Forecast"], "doc_head": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#13", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 496, "end_line": 555, "text": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 473, "primary_symbol": "TestOnlyCurrentCondition", "primary_kind": "function", "primary_span": [496, 555], "def_symbols": ["TestOnlyCurrentCondition"], "symbols": ["TestOnlyCurrentCondition", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timeFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "DailyConditions", "nil", "HourlyConditions", "location", "expected", "foreca", "Forecast", "Epoch", "Unix", "Precipitation", "PrecipitationNextHour", "Code", "cloudy", "Description", "Overcast", "WeatherConditionNextHour", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UVIndex", "Assert", "Equal"], "doc_head": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDir"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#14", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 556, "end_line": 798, "text": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Add(24 * time.Hour).Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"SW\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tSunriseTime:              suite.sunrise.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"mostlysunny\",\n\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t},\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -2.4,\n\t\t\tHumidityPercentage:   80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions: []*foreca.DailyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\t\t\tMinTemperature:           1,\n\t\t\t\tMaxTemperature:           4,\n\t\t\t\tPrecipitation:            0.4,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 66,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.Add(24 * time.Hour).UTC().Unix(),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\t\t\tDegrees:      225,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 0,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Add(24 * time.Hour).Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Add(24 * time.Hour).Unix(),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*foreca.HourlyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.UTC().Unix(),\n\t\t\t\tTemperature:          1,\n\t\t\t\tTemperatureFeelsLike: -4,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 14,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1017.46,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 58,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.Add(1 * time.Hour).UTC().Unix(),\n\t\t\t\tTemperature:          4,\n\t\t\t\tTemperatureFeelsLike: -1,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 23,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1019.77,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 74,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t},\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 2093, "primary_symbol": "TestAllConditions", "primary_kind": "function", "primary_span": [556, 798], "def_symbols": ["TestAllConditions"], "symbols": ["TestAllConditions", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timeFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "DailyConditions", "DailyCondition", "d100", "mostly", "clear", "Date", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "d300", "cloudy", "Add", "Hour", "HourlyConditions", "HourlyCondition", "daytimeFormat", "d000", "location", "expected", "foreca", "Forecast", "Epoch", "Unix", "PrecipitationNextHour", "Code", "Description", "Overcast", "WeatherConditionNextHour", "mostlysunny", "Mostly", "Clear", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UTC", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "AverageHumidityPercentage", "WeatherCodeMostlySunny", "WeatherConditionNight", "WeatherCodeClear", "SunriseEpoch", "SunsetEpoch", "WeatherCodeMostlyCloudy", "Cloudy", "Assert", "Equal"], "doc_head": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(su"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#15", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 799, "end_line": 822, "text": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}\n", "n_tokens": 186, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [799, 822], "def_symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached"], "symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached", "func", "suite", "forecaClientTestSuite", "mockController", "gomock", "NewController", "location", "time", "LoadLocation", "Europe", "Amsterdam", "limiter", "mocks", "NewMockrateLimiter", "EXPECT", "Acquire", "Any", "Return", "int64", "ratelimit", "ErrLimitReached", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorIs", "foreca", "ErrRequestThrottled"], "doc_head": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#16", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 823, "end_line": 841, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}\n", "n_tokens": 142, "primary_symbol": "TestGetForecastForLocationLimitError", "primary_kind": "function", "primary_span": [823, 841], "def_symbols": ["TestGetForecastForLocationLimitError"], "symbols": ["TestGetForecastForLocationLimitError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "int64", "ratelimit", "ErrCountZero", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "location", "Assert", "NotNil", "ErrorContains", "error"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#17", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 842, "end_line": 860, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}\n", "n_tokens": 140, "primary_symbol": "TestGetForecastForLocationLimitUnknownError", "primary_kind": "function", "primary_span": [842, 860], "def_symbols": ["TestGetForecastForLocationLimitUnknownError"], "symbols": ["TestGetForecastForLocationLimitUnknownError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "int64", "errors", "New", "unknown", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "location", "Assert", "NotNil", "ErrorContains", "generic", "error"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#18", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 861, "end_line": 882, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}\n", "n_tokens": 166, "primary_symbol": "TestGetForecastForLocationHttpError", "primary_kind": "function", "primary_span": [861, 882], "def_symbols": ["TestGetForecastForLocationHttpError"], "symbols": ["TestGetForecastForLocationHttpError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "errors", "New", "error", "clients", "NewForecaClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "http"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#19", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 883, "end_line": 924, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().Nil(f.CurrentCondition)\n\tsuite.Assert().Nil(f.DailyConditions)\n\tsuite.Assert().Nil(f.HourlyConditions)\n}\n", "n_tokens": 480, "primary_symbol": "TestGetForecastForLocationTransformError", "primary_kind": "function", "primary_span": [883, 924], "def_symbols": ["TestGetForecastForLocationTransformError"], "symbols": ["TestGetForecastForLocationTransformError", "func", "suite", "forecaClientTestSuite", "response", "http", "Response", "StatusCode", "Body", "NopCloser", "bytes", "NewReader", "byte", "weather", "loc", "obs", "station", "Amsterdam", "Airport", "Schiphol", "dist", "d400", "overcast", "d320", "showers", "uvi", "wsx", "rise", "set", "fc1h", "d200", "partly", "cloudy", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "transformerMock", "NewMocktransformer", "Transform", "foreca", "Forecast", "clients", "NewForecaClient", "map", "string", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "Nil", "CurrentCondition", "DailyConditions", "HourlyConditions"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransfo"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#20", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 925, "end_line": 970, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 526, "primary_symbol": "TestGetForecastForLocationValid", "primary_kind": "function", "primary_span": [925, 970], "def_symbols": ["TestGetForecastForLocationValid"], "symbols": ["TestGetForecastForLocationValid", "func", "suite", "forecaClientTestSuite", "response", "http", "Response", "StatusCode", "Body", "NopCloser", "bytes", "NewReader", "byte", "weather", "loc", "obs", "station", "Amsterdam", "Airport", "Schiphol", "dist", "d400", "overcast", "d320", "showers", "uvi", "wsx", "rise", "set", "fc1h", "d200", "partly", "cloudy", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "transformerMock", "NewMocktransformer", "Transform", "foreca", "Forecast", "CurrentCondition", "DailyConditions", "make", "DailyCondition", "HourlyConditions", "HourlyCondition", "clients", "NewForecaClient", "map", "string", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#21", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 971, "end_line": 978, "text": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}\n", "n_tokens": 69, "primary_symbol": "TestForecaClient", "primary_kind": "function", "primary_span": [971, 978], "def_symbols": ["TestForecaClient"], "symbols": ["TestForecaClient", "func", "testing", "suite", "Run", "new", "currentConditionTransformerTestSuite", "dailyForecastTransformerTestSuite", "hourlyForecastTransformerTestSuite", "transformerTestSuite", "forecaClientTestSuite"], "doc_head": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "package clients\n\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}\n", "n_tokens": 200, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["package", "clients", "import", "context", "encoding", "xml", "fmt", "github", "com", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "internal", "foreca", "ratelimit", "utilities", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "golang", "text", "cases", "language", "math", "net", "http", "strconv", "strings", "time", "type", "WeatherCondition", "struct", "WeatherCode", "string", "attr", "WeatherDescription"], "doc_head": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 57, "text": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\n\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\n\treturn zero == *cc\n}\n\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}\n", "n_tokens": 192, "primary_symbol": "IsZero", "primary_kind": "function", "primary_span": [48, 57], "def_symbols": ["IsZero", "IsValid"], "symbols": ["IsZero", "IsValid", "type", "CurrentCondition", "struct", "XMLName", "xml", "Name", "obs", "WeatherCondition", "Station", "string", "station", "attr", "Timestamp", "Temperature", "float64", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "int", "Visibility", "func", "bool", "var", "zero", "return"], "doc_head": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\treturn zero == *cc\n}\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 58, "end_line": 73, "text": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}\n", "n_tokens": 153, "primary_symbol": "", "primary_kind": "", "primary_span": [58, 73], "def_symbols": [], "symbols": ["type", "DailyCondition", "struct", "XMLName", "xml", "Name", "WeatherCondition", "Date", "string", "attr", "MinTemperature", "float64", "MaxTemperature", "UVIndex", "uvi", "WindDirection", "WindSpeed", "wsx", "Precipitation", "PrecipitationProbability", "int", "SunriseTime", "rise", "SunsetTime", "set"], "doc_head": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 74, "end_line": 89, "text": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}\n", "n_tokens": 154, "primary_symbol": "", "primary_kind": "", "primary_span": [74, 89], "def_symbols": [], "symbols": ["type", "HourlyCondition", "struct", "XMLName", "xml", "Name", "fc1h", "WeatherCondition", "Timestamp", "string", "attr", "Temperature", "float64", "TemperatureFeelsLike", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "int", "HumidityPercentage", "UVIndex", "uvi", "Pressure"], "doc_head": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 90, "end_line": 114, "text": "type Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\n\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\n\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (\n\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}", "n_tokens": 186, "primary_symbol": "HasCurrentCondition", "primary_kind": "function", "primary_span": [98, 114], "def_symbols": ["HasCurrentCondition"], "symbols": ["HasCurrentCondition", "type", "Response", "struct", "XMLName", "xml", "Name", "weather", "CurrentCondition", "loc", "obs", "DailyConditions", "DailyCondition", "HourlyConditions", "HourlyCondition", "fc1h", "func", "bool", "return", "nil", "IsValid", "errorResponse", "error", "Message", "string", "message", "attr", "generate", "bin", "mockgen", "source", "foreca_client", "destination", "mocks", "foreca_client_mocks", "package", "httpClient", "interface", "http", "Request", "rateLimiter", "Acquire", "int64"], "doc_head": "type Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (\n\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 115, "end_line": 139, "text": "\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\n\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\n\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}\n", "n_tokens": 151, "primary_symbol": "NewForecaClient", "primary_kind": "function", "primary_span": [129, 139], "def_symbols": ["NewForecaClient"], "symbols": ["NewForecaClient", "transformer", "interface", "Transform", "Response", "time", "Location", "foreca", "Forecast", "type", "ForecaClient", "struct", "http", "httpClient", "endpoint", "string", "defaultQueryParams", "map", "rateLimiter", "rateLimitKey", "func", "client", "return"], "doc_head": "\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 140, "end_line": 236, "text": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: generic error\")\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, c.endpoint, nil)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot create request.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"foreca client: cannot create request\")\n\t}\n\n\tq := req.URL.Query()\n\tfor key, value := range c.defaultQueryParams {\n\t\tq.Add(key, value)\n\t}\n\tq.Add(\"l\", fmt.Sprintf(\"%d\", id))\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.http.Do(req)\n\tif err != nil {\n\t\tlog.Error(ctx,\n\t\t\t\"Error occurred with the HTTP request.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: http error\")\n\t}\n\n\tdefer func() {\n\t\tif err := resp.Body.Close(); err != nil {\n\t\t\tlog.Error(ctx,\n\t\t\t\t\"Error occurred while closing the response body stream.\",\n\t\t\t\tzap.Int(\"id\", id),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t}()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar r *Response\n\terr = xml.Unmarshal(body, &r)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tvar e errorResponse\n\t\tif err := xml.Unmarshal(body, &e); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"foreca client: cannot unmarshal response\")\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get forecast for location.\", zap.Int(\"id\", id), zap.Any(\"error\", e))\n\t\treturn nil, errors.Wrap(err, \"foreca client: client error\")\n\t}\n\n\treturn c.transformer.Transform(r, loc), nil\n}\n", "n_tokens": 742, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [140, 236], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "func", "ForecaClient", "ctx", "context", "Context", "int", "loc", "time", "Location", "foreca", "Forecast", "error", "span", "xotel", "Tracer", "Start", "client", "get", "forecast", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "location_id", "log", "Debug", "Acquiring", "lock", "for", "key", "zap", "String", "rateLimitKey", "epoch", "err", "Acquire", "Lock", "acquired", "Int64", "errors", "ratelimit", "ErrLimitReached", "Bool", "throttled", "true", "Warn", "Request", "return", "nil", "ErrRequestThrottled", "else", "isLimiterError", "SetStatus", "codes", "Error", "Limiter", "experienced", "RecordError", "Wrap", "limiter", "occurred", "Unexpected", "generic", "req", "http", "NewRequestWithContext", "MethodGet", "endpoint", "Cannot", "create", "request", "cannot", "URL", "Query", "value", "range", "defaultQueryParams", "Add", "fmt", "Sprintf", "RawQuery", "Encode", "resp", "with", "the", "HTTP", "Body", "Close", "while", "closing", "response", "body", "stream", "ReadAll", "var", "Response", "xml", "Unmarshal", "errorResponse", "unmarshal", "location", "Any", "transformer", "Transform"], "doc_head": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"loca"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 237, "end_line": 260, "text": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\n\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}\n", "n_tokens": 158, "primary_symbol": "isLimiterError", "primary_kind": "function", "primary_span": [237, 260], "def_symbols": ["isLimiterError", "NewTransformer"], "symbols": ["isLimiterError", "NewTransformer", "func", "ForecaClient", "err", "error", "bool", "list", "ratelimit", "ErrKeyEmpty", "ErrCountZero", "ErrLimitZero", "ErrCountLimit", "ErrZeroDuration", "for", "range", "return", "true", "false", "type", "forecaTransformer", "struct", "cct", "currentConditionTransformer", "dft", "dailyForecastTransformer", "hft", "hourlyForecastTransformer", "NewCurrentConditionTransformer", "NewDailyForecastTransformer", "NewHourlyForecastTransformer"], "doc_head": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 261, "end_line": 285, "text": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\n\tvar dfs []*foreca.DailyCondition\n\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}\n", "n_tokens": 198, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [261, 285], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "forecaTransformer", "Response", "location", "time", "Location", "foreca", "Forecast", "CurrentCondition", "var", "firstHourForecast", "HourlyCondition", "len", "HourlyConditions", "dfs", "DailyCondition", "for", "range", "DailyConditions", "append", "dft", "getHourlyForecastsForDate", "Date", "hfs", "hft", "return", "cct"], "doc_head": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\tvar dfs []*foreca.DailyCondition\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#10", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 286, "end_line": 303, "text": "func (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\n\treturn r\n}\n\ntype currentConditionTransformer struct{}\n\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}\n", "n_tokens": 96, "primary_symbol": "getHourlyForecastsForDate", "primary_kind": "function", "primary_span": [286, 303], "def_symbols": ["getHourlyForecastsForDate", "NewCurrentConditionTransformer"], "symbols": ["getHourlyForecastsForDate", "NewCurrentConditionTransformer", "func", "forecaTransformer", "string", "hfs", "HourlyCondition", "var", "for", "range", "strings", "HasPrefix", "Timestamp", "append", "return", "type", "currentConditionTransformer", "struct"], "doc_head": "func (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\treturn r\n}\ntype currentConditionTransformer struct{}\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#11", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 304, "end_line": 349, "text": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex),\n\t\t\t\tutilities.KilometersToMiles(icc.WindGust.Wind.Speed),\n\t\t\t),\n\t\t),\n\t\t1,\n\t)\n\n\tif hf != nil {\n\t\ticc.UVIndex = hf.UVIndex\n\t\ticc.Precipitation = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t\ticc.WeatherConditionNextHour = buildWeatherCondition(hf.WeatherCode, hf.WeatherDescription)\n\t\ticc.PrecipitationNextHour = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t}\n\n\treturn &icc\n}\n", "n_tokens": 465, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [304, 349], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "currentConditionTransformer", "CurrentCondition", "HourlyCondition", "location", "time", "Location", "foreca", "var", "icc", "nil", "return", "buildCurrentConditionFromHourlyForecast", "Epoch", "getUtcEpochForFormatInLocation", "Timestamp", "Visibility", "utilities", "Round", "float64", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Temperature", "HumidityPercentage", "WindGust", "buildWindGust", "WindDirection", "WindSpeed", "Pressure", "buildPressure", "DewPoint", "HeatIndex", "FahrenheitToCelsius", "computeHeatIndex", "CelsiusToFahrenheit", "TemperatureFeelsLike", "computeTemperatureFeelsLike", "KilometersToMiles", "Wind", "Speed", "UVIndex", "Precipitation", "parsePrecipitationForWeatherCode", "WeatherConditionNextHour", "PrecipitationNextHour"], "doc_head": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#12", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 350, "end_line": 384, "text": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\n\tcc.Visibility = 0\n\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\n\treturn &cc\n}\n", "n_tokens": 232, "primary_symbol": "buildCurrentConditionFromHourlyForecast", "primary_kind": "function", "primary_span": [350, 384], "def_symbols": ["buildCurrentConditionFromHourlyForecast"], "symbols": ["buildCurrentConditionFromHourlyForecast", "func", "currentConditionTransformer", "HourlyCondition", "CurrentCondition", "var", "Timestamp", "fmt", "Sprintf", "else", "time", "Now", "UTC", "Format", "Station", "WeatherCode", "d000", "WeatherDescription", "clear", "Visibility", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "return"], "doc_head": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\tcc.Visibility = 0\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\treturn &cc\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#13", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 385, "end_line": 418, "text": "// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\n\treturn hiRothfusz + adjustment\n}\n", "n_tokens": 403, "primary_symbol": "computeHeatIndex", "primary_kind": "function", "primary_span": [391, 418], "def_symbols": ["computeHeatIndex"], "symbols": ["computeHeatIndex", "computes", "heat", "index", "based", "temperature", "fahrenheit", "and", "dewPoint", "Returns", "Source", "http", "www", "wpc", "ncep", "noaa", "gov", "html", "heatindex", "shtml", "heatindex_equation", "dewrh", "func", "currentConditionTransformer", "float64", "computeRelativeHumidity", "hiSteadman", "return", "hiRothfusz", "adjustment", "math", "Sqrt", "Abs", "else"], "doc_head": "// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\treturn hiRothfusz + adjus"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#14", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 419, "end_line": 426, "text": "// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}\n", "n_tokens": 117, "primary_symbol": "computeRelativeHumidity", "primary_kind": "function", "primary_span": [423, 426], "def_symbols": ["computeRelativeHumidity"], "symbols": ["computeRelativeHumidity", "computes", "relative", "humidity", "based", "temperature", "fahrenheit", "and", "dewPoint", "Returns", "Source", "http", "andrew", "rsmas", "miami", "edu", "bmcnoldy", "Humidity", "html", "func", "currentConditionTransformer", "float64", "return", "math", "Exp"], "doc_head": "// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#15", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 427, "end_line": 440, "text": "// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\n\treturn temperature\n}\n", "n_tokens": 104, "primary_symbol": "computeTemperatureFeelsLike", "primary_kind": "function", "primary_span": [429, 440], "def_symbols": ["computeTemperatureFeelsLike"], "symbols": ["computeTemperatureFeelsLike", "computes", "feels", "like", "temperature", "based", "fahrenheit", "heat", "index", "and", "windSpeed", "Returns", "relative", "humidity", "Fahrenheit", "func", "currentConditionTransformer", "float64", "heatIndex", "return", "computeWindChill"], "doc_head": "// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\treturn temperature\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#16", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 441, "end_line": 461, "text": "// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\n\treturn temperature\n}\n\ntype dailyForecastTransformer struct{}\n\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}\n", "n_tokens": 193, "primary_symbol": "computeWindChill", "primary_kind": "function", "primary_span": [445, 461], "def_symbols": ["computeWindChill", "NewDailyForecastTransformer"], "symbols": ["computeWindChill", "NewDailyForecastTransformer", "Compute", "wind", "chill", "based", "temperature", "fahrenheit", "and", "windSpeed", "miles", "per", "hour", "Returns", "Source", "http", "www", "nws", "noaa", "gov", "winter", "windchill", "shtml", "func", "currentConditionTransformer", "float64", "isColdEnough", "isWindyEnough", "return", "math", "Pow", "type", "dailyForecastTransformer", "struct"], "doc_head": "// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\treturn temperature\n}\ntype dailyForecastTransformer struct{}\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#17", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 462, "end_line": 508, "text": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location)\n\n\tif len(hfs) > 0 {\n\t\tdf.MinTemperature = utilities.Round(t.getMinimumTemperature(hfs), 1)\n\t\tdf.MaxTemperature = utilities.Round(t.getMaximumTemperature(hfs), 1)\n\t\tdf.AverageHumidityPercentage = int(math.Round(t.getAverageHumidityPercentage(hfs)))\n\n\t\troundedSunriseTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location))\n\t\troundedSunsetTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location))\n\t\tdayHourlyForecasts := t.getDayHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationDay = utilities.Round(t.getTotalPrecipitation(dayHourlyForecasts), 1)\n\n\t\tnightHourlyForecasts := t.getNightHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationNight = utilities.Round(t.getTotalPrecipitation(nightHourlyForecasts), 1)\n\t\tnightWeatherCode := t.getAverageWeatherCodeForHourlyForecasts(nightHourlyForecasts)\n\t\tdf.WeatherConditionNight = buildWeatherCondition(nightWeatherCode, \"\")\n\n\t\tif isSnowWeatherCode(d.WeatherCode) {\n\t\t\tdf.SnowDay = df.PrecipitationDay\n\t\t}\n\n\t\tif isSnowWeatherCode(nightWeatherCode) {\n\t\t\tdf.SnowNight = df.PrecipitationNight\n\t\t}\n\t}\n\n\treturn &df\n}\n", "n_tokens": 749, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [462, 508], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "dailyForecastTransformer", "DailyCondition", "hfs", "HourlyCondition", "location", "time", "Location", "foreca", "var", "Epoch", "getUtcEpochForFormatInLocation", "Date", "MinTemperature", "utilities", "Round", "MaxTemperature", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Precipitation", "parsePrecipitationForWeatherCode", "PrecipitationProbability", "PrecipitationDay", "PrecipitationNight", "Wind", "buildWind", "WindDirection", "WindSpeed", "UVIndex", "AverageHumidityPercentage", "SnowDay", "SnowNight", "WeatherConditionNight", "SunriseEpoch", "fmt", "Sprintf", "SunriseTime", "SunsetEpoch", "SunsetTime", "len", "getMinimumTemperature", "getMaximumTemperature", "int", "math", "getAverageHumidityPercentage", "roundedSunriseTime", "roundToNextHour", "getTimeForFormatInLocation", "roundedSunsetTime", "dayHourlyForecasts", "getDayHourlyForecasts", "getTotalPrecipitation", "nightHourlyForecasts", "getNightHourlyForecasts", "nightWeatherCode", "getAverageWeatherCodeForHourlyForecasts", "isSnowWeatherCode", "return"], "doc_head": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#18", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 509, "end_line": 546, "text": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\n\treturn max\n}\n\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\n\treturn min\n}\n\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\n\tvar total int\n\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\n\treturn float64(total) / float64(len(hfs))\n}\n", "n_tokens": 194, "primary_symbol": "getMaximumTemperature", "primary_kind": "function", "primary_span": [509, 546], "def_symbols": ["getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage"], "symbols": ["getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "float64", "max", "math", "Inf", "for", "range", "Temperature", "return", "min", "len", "var", "total", "int", "HumidityPercentage"], "doc_head": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\treturn max\n}\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\treturn min\n}\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\tvar total int\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\treturn float64(total) / float64(len(hfs))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#19", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 547, "end_line": 563, "text": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n", "n_tokens": 122, "primary_symbol": "getDayHourlyForecasts", "primary_kind": "function", "primary_span": [547, 563], "def_symbols": ["getDayHourlyForecasts"], "symbols": ["getDayHourlyForecasts", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "format", "string", "sunrise", "time", "Time", "sunset", "loc", "Location", "var", "for", "range", "err", "ParseInLocation", "Timestamp", "nil", "continue", "Hour", "append", "return"], "doc_head": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\treturn o\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#20", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 564, "end_line": 590, "text": "func (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\n\treturn total\n}\n", "n_tokens": 184, "primary_symbol": "getNightHourlyForecasts", "primary_kind": "function", "primary_span": [564, 590], "def_symbols": ["getNightHourlyForecasts", "getTotalPrecipitation"], "symbols": ["getNightHourlyForecasts", "getTotalPrecipitation", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "format", "string", "sunrise", "time", "Time", "sunset", "loc", "Location", "var", "for", "range", "err", "ParseInLocation", "Timestamp", "nil", "continue", "Hour", "append", "return", "float64", "total", "parsePrecipitationForWeatherCode", "WeatherCode", "Precipitation"], "doc_head": "func (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\treturn o\n}\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\treturn total\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#21", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 591, "end_line": 640, "text": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}\n", "n_tokens": 354, "primary_symbol": "getAverageWeatherCodeForHourlyForecasts", "primary_kind": "function", "primary_span": [591, 640], "def_symbols": ["getAverageWeatherCodeForHourlyForecasts"], "symbols": ["getAverageWeatherCodeForHourlyForecasts", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "string", "var", "days", "nights", "cloudiness", "precipitationRate", "precipitationType", "int", "for", "range", "tokens", "strings", "Split", "WeatherCode", "len", "switch", "case", "err", "strconv", "Atoi", "nil", "obs", "code", "else", "averageCloudiness", "math", "Round", "float64", "averagePrecipitationRate", "averagePrecipitationType", "return", "fmt", "Sprintf"], "doc_head": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#22", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 641, "end_line": 646, "text": "type hourlyForecastTransformer struct{}\n\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}\n", "n_tokens": 27, "primary_symbol": "NewHourlyForecastTransformer", "primary_kind": "function", "primary_span": [643, 646], "def_symbols": ["NewHourlyForecastTransformer"], "symbols": ["NewHourlyForecastTransformer", "type", "hourlyForecastTransformer", "struct", "func", "return"], "doc_head": "type hourlyForecastTransformer struct{}\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#23", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 647, "end_line": 666, "text": "func (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\n\treturn &hf\n}\n", "n_tokens": 244, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [647, 666], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "hourlyForecastTransformer", "HourlyCondition", "location", "time", "Location", "foreca", "var", "Epoch", "getUtcEpochForFormatInLocation", "Timestamp", "Temperature", "utilities", "Round", "TemperatureFeelsLike", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Precipitation", "parsePrecipitationForWeatherCode", "isSnowWeatherCode", "Snow", "PrecipitationProbability", "Wind", "buildWind", "WindDirection", "WindSpeed", "Pressure", "buildPressure", "HumidityPercentage", "UVIndex", "return"], "doc_head": "func (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\treturn &hf\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#24", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 667, "end_line": 688, "text": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\n\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\n\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}\n", "n_tokens": 151, "primary_symbol": "buildWeatherCondition", "primary_kind": "function", "primary_span": [667, 688], "def_symbols": ["buildWeatherCondition", "buildWindGust", "buildWind"], "symbols": ["buildWeatherCondition", "buildWindGust", "buildWind", "func", "code", "string", "description", "foreca", "WeatherCondition", "title", "cases", "Title", "language", "English", "return", "Code", "parseWeatherCode", "Description", "String", "direction", "speed", "float64", "gust", "WindGust", "Wind", "Gust", "Direction", "getWindDirection", "Speed", "utilities", "Round"], "doc_head": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#25", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 689, "end_line": 730, "text": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\n\treturn foreca.WeatherCode(wc)\n}\n", "n_tokens": 336, "primary_symbol": "parseWeatherCode", "primary_kind": "function", "primary_span": [689, 730], "def_symbols": ["parseWeatherCode"], "symbols": ["parseWeatherCode", "func", "code", "string", "foreca", "WeatherCode", "strings", "TrimLeft", "var", "switch", "case", "WeatherCodeClear", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeMostlyCloudy", "WeatherCodeCloudy", "WeatherCodeHazy", "WeatherCodeFog", "WeatherCodeChanceOfRain", "WeatherCodeRain", "WeatherCodeChanceOfThunderstorms", "WeatherCodeThunderstorms", "WeatherCodeChanceOfSleet", "WeatherCodeSleet", "WeatherCodeChanceOfSnow", "WeatherCodeSnow", "default", "return"], "doc_head": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\treturn foreca.WeatherCode(wc)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#26", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 731, "end_line": 752, "text": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\n\treturn utilities.ContainsString(snowyConditions, c)\n}\n\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\n\treturn precipitation\n}\n\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}\n", "n_tokens": 145, "primary_symbol": "isSnowWeatherCode", "primary_kind": "function", "primary_span": [731, 752], "def_symbols": ["isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection"], "symbols": ["isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection", "func", "code", "string", "bool", "strings", "TrimLeft", "snowyConditions", "return", "utilities", "ContainsString", "precipitation", "float64", "foreca", "WindDirection", "Abbreviation", "Degrees", "getWindDirectionInDegrees"], "doc_head": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\treturn utilities.ContainsString(snowyConditions, c)\n}\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\treturn precipitation\n}\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#27", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 753, "end_line": 791, "text": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}\n", "n_tokens": 192, "primary_symbol": "getWindDirectionInDegrees", "primary_kind": "function", "primary_span": [753, 791], "def_symbols": ["getWindDirectionInDegrees"], "symbols": ["getWindDirectionInDegrees", "func", "string", "float64", "switch", "case", "return", "NNE", "ENE", "ESE", "SSE", "SSW", "WSW", "WNW", "NNW", "default"], "doc_head": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#28", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 792, "end_line": 819, "text": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}\n", "n_tokens": 168, "primary_symbol": "buildPressure", "primary_kind": "function", "primary_span": [792, 819], "def_symbols": ["buildPressure"], "symbols": ["buildPressure", "func", "string", "foreca", "Pressure", "pressureStr", "strings", "TrimLeft", "pressure", "err", "strconv", "ParseFloat", "nil", "var", "trend", "PressureTrend", "switch", "case", "PressureTrendFalling", "PressureTrendRising", "default", "PressureTrendSteady", "return", "Millibar", "Trend"], "doc_head": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#29", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 820, "end_line": 847, "text": "func getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn ts.In(utc).Unix()\n}\n\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\n\treturn &ts\n}\n\nfunc roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\n\treturn &roundedTime\n\n}\n", "n_tokens": 183, "primary_symbol": "getUtcEpochForFormatInLocation", "primary_kind": "function", "primary_span": [820, 847], "def_symbols": ["getUtcEpochForFormatInLocation", "getTimeForFormatInLocation", "roundToNextHour"], "symbols": ["getUtcEpochForFormatInLocation", "getTimeForFormatInLocation", "roundToNextHour", "func", "string", "format", "location", "time", "Location", "int64", "utc", "LoadLocation", "UTC", "err", "ParseInLocation", "nil", "return", "Unix", "Time", "missingSeconds", "roundedTime", "Add", "Duration", "Second"], "doc_head": "func getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\treturn ts.In(utc).Unix()\n}\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\treturn &ts\n}\nfunc roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\treturn &roundedTime\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}\n", "n_tokens": 199, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "foreca_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "foreca_client_mocks", "package", "Package", "GoMock", "import", "http", "net", "reflect", "time", "foreca", "impalastudios", "com", "weather", "foreca_proxy", "internal", "clients", "adapters", "gomock", "uber", "org", "mock", "MockhttpClient", "httpClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockhttpClientMockRecorder", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 53, "text": "// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}\n\n// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 163, "primary_symbol": "NewMockhttpClient", "primary_kind": "function", "primary_span": [34, 53], "def_symbols": ["NewMockhttpClient", "EXPECT", "Do"], "symbols": ["NewMockhttpClient", "EXPECT", "Do", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockhttpClient", "recorder", "MockhttpClientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "http", "Request", "Response", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}\n// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 54, "end_line": 77, "text": "// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 198, "primary_symbol": "Do", "primary_kind": "function", "primary_span": [55, 77], "def_symbols": ["Do", "NewMockrateLimiter"], "symbols": ["Do", "NewMockrateLimiter", "indicates", "expected", "call", "func", "MockhttpClientMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockhttpClient", "nil", "MockrateLimiter", "rateLimiter", "interface", "type", "struct", "Controller", "recorder", "MockrateLimiterMockRecorder", "the", "for", "creates", "new", "instance"], "doc_head": "// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 78, "end_line": 97, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}\n", "n_tokens": 194, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [79, 97], "def_symbols": ["EXPECT", "Acquire"], "symbols": ["EXPECT", "Acquire", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockrateLimiter", "MockrateLimiterMockRecorder", "return", "recorder", "mocks", "base", "method", "arg0", "string", "int64", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 98, "end_line": 120, "text": "// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}\n\n// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 156, "primary_symbol": "NewMocktransformer", "primary_kind": "function", "primary_span": [110, 120], "def_symbols": ["NewMocktransformer", "EXPECT"], "symbols": ["NewMocktransformer", "EXPECT", "Mocktransformer", "mock", "transformer", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MocktransformerMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}\n// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 121, "end_line": 134, "text": "// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}\n", "n_tokens": 147, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [122, 134], "def_symbols": ["Transform"], "symbols": ["Transform", "mocks", "base", "method", "func", "Mocktransformer", "arg0", "clients", "Response", "arg1", "time", "Location", "foreca", "Forecast", "ctrl", "Helper", "ret", "Call", "ret0", "return", "indicates", "expected", "call", "MocktransformerMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package v0\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\ntype transformer struct{}\n\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\n\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}\n", "n_tokens": 142, "primary_symbol": "newTransformer", "primary_kind": "function", "primary_span": [10, 21], "def_symbols": ["newTransformer", "Transform"], "symbols": ["newTransformer", "Transform", "package", "import", "impalastudios", "com", "weather", "foreca_proxy", "internal", "foreca", "pkg", "type", "transformer", "struct", "func", "return", "Forecast", "ForecastResponse", "CurrentCondition", "transformCurrentCondition", "DailyForecasts", "transformDailyConditions", "DailyConditions", "HourlyForecasts", "transformHourlyConditions", "HourlyConditions"], "doc_head": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\ntype transformer struct{}\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 42, "text": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}\n", "n_tokens": 249, "primary_symbol": "transformCurrentCondition", "primary_kind": "function", "primary_span": [22, 42], "def_symbols": ["transformCurrentCondition"], "symbols": ["transformCurrentCondition", "func", "transformer", "foreca", "CurrentCondition", "ForecastResponse_CurrentCondition", "return", "Epoch", "Visibility", "float32", "WeatherCondition", "transformWeatherCondition", "Precipitation", "NextHour", "ForecastResponse_CurrentCondition_NextHour", "WeatherConditionNextHour", "PrecipitationNextHour", "Temperature", "TemperatureFeelsLike", "WindGust", "transformWindGust", "DewPoint", "HeatIndex", "Pressure", "transformPressure", "UvIndex", "UVIndex", "HumidityPercentage", "int32"], "doc_head": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 72, "text": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.SunsetEpoch,\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n", "n_tokens": 314, "primary_symbol": "transformDailyConditions", "primary_kind": "function", "primary_span": [43, 72], "def_symbols": ["transformDailyConditions"], "symbols": ["transformDailyConditions", "func", "transformer", "foreca", "DailyCondition", "ForecastResponse_DailyForecast", "var", "conditions", "for", "range", "condition", "Epoch", "TemperatureMin", "float32", "MinTemperature", "TemperatureMax", "MaxTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "PrecipitationProbability", "int32", "Wind", "transformWind", "AverageHumidityPercentage", "WeatherCondition", "transformWeatherCondition", "WeatherConditionNight", "UvIndex", "UVIndex", "SunriseEpoch", "SunsetEpoch", "append", "return"], "doc_head": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.Su"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 73, "end_line": 96, "text": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n", "n_tokens": 228, "primary_symbol": "transformHourlyConditions", "primary_kind": "function", "primary_span": [73, 96], "def_symbols": ["transformHourlyConditions"], "symbols": ["transformHourlyConditions", "func", "transformer", "foreca", "HourlyCondition", "ForecastResponse_HourlyForecast", "var", "conditions", "for", "range", "condition", "Epoch", "Temperature", "float32", "TemperatureFeelsLike", "WeatherCondition", "transformWeatherCondition", "Precipitation", "Snow", "PrecipitationProbability", "int32", "Wind", "transformWind", "Pressure", "transformPressure", "HumidityPercentage", "UvIndex", "UVIndex", "append", "return"], "doc_head": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\t\tconditions = append(conditions, condition)\n\t}\n\treturn conditions\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 97, "end_line": 121, "text": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\n\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}\n", "n_tokens": 179, "primary_symbol": "transformWind", "primary_kind": "function", "primary_span": [97, 121], "def_symbols": ["transformWind", "transformPressure"], "symbols": ["transformWind", "transformPressure", "func", "transformer", "foreca", "Wind", "ForecastResponse_Wind", "nil", "return", "Direction", "ForecastResponse_WindDirection", "Abbreviation", "Degrees", "float32", "Speed", "Pressure", "ForecastResponse_Pressure", "Millibar", "Trend", "int32"], "doc_head": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 122, "end_line": 143, "text": "func (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}\n\nfunc (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}\n", "n_tokens": 149, "primary_symbol": "transformWeatherCondition", "primary_kind": "function", "primary_span": [122, 143], "def_symbols": ["transformWeatherCondition", "transformWindGust"], "symbols": ["transformWeatherCondition", "transformWindGust", "func", "transformer", "foreca", "WeatherCondition", "ForecastResponse_WeatherCondition", "nil", "return", "Code", "string", "Description", "WindGust", "ForecastResponse_CurrentCondition_WindGust", "Wind", "transformWind", "Gust", "float32"], "doc_head": "func (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}\nfunc (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\n\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\n\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}\n", "n_tokens": 139, "primary_symbol": "NewServer", "primary_kind": "function", "primary_span": [22, 25], "def_symbols": ["NewServer"], "symbols": ["NewServer", "package", "import", "context", "errors", "impalastudios", "com", "weather", "foreca_proxy", "internal", "foreca", "pbv0", "pkg", "google", "golang", "org", "grpc", "codes", "status", "type", "forecastService", "interface", "GetForecastForLocation", "ctx", "Context", "int", "Forecast", "error", "Server", "struct", "UnimplementedForecaProxyServer", "service", "transformer", "func", "return"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 37, "text": "func (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}\n", "n_tokens": 90, "primary_symbol": "toGrpcError", "primary_kind": "function", "primary_span": [26, 37], "def_symbols": ["toGrpcError"], "symbols": ["toGrpcError", "func", "Server", "err", "error", "errors", "foreca", "ErrLocationNotFound", "return", "status", "Error", "codes", "NotFound", "Location", "not", "found", "ErrRequestThrottled", "ResourceExhausted", "Too", "many", "requests", "Retry", "later", "Internal", "Something", "went", "wrong"], "doc_head": "func (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 17, "text": "package v0\n\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\n\treturn s.t.Transform(forecast), nil\n}\n", "n_tokens": 112, "primary_symbol": "GetForecast", "primary_kind": "function", "primary_span": [8, 17], "def_symbols": ["GetForecast"], "symbols": ["GetForecast", "package", "import", "context", "pbv0", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "func", "Server", "ctx", "Context", "ForecastRequest", "ForecastResponse", "error", "forecast", "err", "service", "GetForecastForLocation", "int", "GetLocationId", "nil", "return", "toGrpcError", "Transform"], "doc_head": "package v0\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\treturn s.t.Transform(forecast), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go", "rel_path": "pkg/pb/v0/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package v0\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n", "n_tokens": 101, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "module", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "service", "proto", "grpc_out", "grpc_opt"], "doc_head": "package v0\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.28.1\n// \tprotoc        v3.21.12\n// source: service.v0.proto\n\npackage v0\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 161, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 22], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "service", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "sync", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.28.1\n// \tprotoc        v3.21.12\n// source: service.v0.proto\npackage v0\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 45, "text": "type ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}\n\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastRequest) ProtoMessage() {}\n", "n_tokens": 154, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [31, 45], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "ForecastRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "LocationId", "int64", "protobuf", "varint", "opt", "name", "locationId", "proto3", "json", "omitempty", "The", "Impala", "Location", "func", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 46, "end_line": 69, "text": "func (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.\nfunc (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [46, 69], "def_symbols": ["ProtoReflect", "Descriptor", "GetLocationId"], "symbols": ["ProtoReflect", "Descriptor", "GetLocationId", "func", "ForecastRequest", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "protoimpl", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "int64", "LocationId"], "doc_head": "func (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.\nfunc (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 70, "end_line": 88, "text": "type ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`\n}\n\nfunc (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [80, 88], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "ForecastResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "CurrentCondition", "ForecastResponse_CurrentCondition", "protobuf", "bytes", "opt", "name", "currentCondition", "proto3", "oneof", "json", "omitempty", "DailyForecasts", "ForecastResponse_DailyForecast", "rep", "dailyForecasts", "HourlyForecasts", "ForecastResponse_HourlyForecast", "hourlyForecasts", "func", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`\n}\nfunc (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 89, "end_line": 118, "text": "func (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse) ProtoMessage() {}\n\nfunc (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}\n", "n_tokens": 194, "primary_symbol": "String", "primary_kind": "function", "primary_span": [89, 118], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCurrentCondition"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCurrentCondition", "func", "ForecastResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_CurrentCondition", "CurrentCondition"], "doc_head": "func (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse) ProtoMessage() {}\nfunc (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 119, "end_line": 141, "text": "func (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}\n\ntype ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}\n", "n_tokens": 151, "primary_symbol": "GetDailyForecasts", "primary_kind": "function", "primary_span": [119, 141], "def_symbols": ["GetDailyForecasts", "GetHourlyForecasts"], "symbols": ["GetDailyForecasts", "GetHourlyForecasts", "func", "ForecastResponse", "ForecastResponse_DailyForecast", "nil", "return", "DailyForecasts", "ForecastResponse_HourlyForecast", "HourlyForecasts", "type", "ForecastResponse_WeatherCondition", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Code", "string", "protobuf", "bytes", "opt", "name", "code", "proto3", "json", "omitempty", "Description", "description"], "doc_head": "func (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}\ntype ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 142, "end_line": 168, "text": "func (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_WeatherCondition) ProtoMessage() {}\n\nfunc (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [142, 168], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_WeatherCondition", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_WeatherCondition) ProtoMessage() {}\nfunc (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 169, "end_line": 196, "text": "// Deprecated: Use ForecastResponse_WeatherCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}\n\nfunc (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\n\nfunc (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}\n\ntype ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}\n", "n_tokens": 194, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [170, 196], "def_symbols": ["Descriptor", "GetCode", "GetDescription"], "symbols": ["Descriptor", "GetCode", "GetDescription", "Deprecated", "Use", "ForecastResponse_WeatherCondition", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "string", "nil", "Code", "Description", "type", "ForecastResponse_WindDirection", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Abbreviation", "protobuf", "bytes", "opt", "name", "abbreviation", "proto3", "json", "omitempty", "Degrees", "float32", "fixed32", "degrees"], "doc_head": "// Deprecated: Use ForecastResponse_WeatherCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}\nfunc (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\nfunc (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}\ntype ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 197, "end_line": 223, "text": "func (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_WindDirection) ProtoMessage() {}\n\nfunc (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [197, 223], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_WindDirection", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_WindDirection) ProtoMessage() {}\nfunc (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#10", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 224, "end_line": 251, "text": "// Deprecated: Use ForecastResponse_WindDirection.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}\n\nfunc (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}\n\nfunc (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [225, 251], "def_symbols": ["Descriptor", "GetAbbreviation", "GetDegrees"], "symbols": ["Descriptor", "GetAbbreviation", "GetDegrees", "Deprecated", "Use", "ForecastResponse_WindDirection", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "string", "nil", "Abbreviation", "float32", "Degrees", "type", "ForecastResponse_Wind", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Direction", "protobuf", "bytes", "opt", "name", "direction", "proto3", "json", "omitempty", "Speed", "fixed32", "speed"], "doc_head": "// Deprecated: Use ForecastResponse_WindDirection.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}\nfunc (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}\nfunc (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}\ntype ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#11", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 252, "end_line": 278, "text": "func (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_Wind) ProtoMessage() {}\n\nfunc (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 189, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [252, 278], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_Wind", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_Wind) ProtoMessage() {}\nfunc (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#12", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 279, "end_line": 306, "text": "// Deprecated: Use ForecastResponse_Wind.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}\n\nfunc (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [280, 306], "def_symbols": ["Descriptor", "GetDirection", "GetSpeed"], "symbols": ["Descriptor", "GetDirection", "GetSpeed", "Deprecated", "Use", "ForecastResponse_Wind", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_WindDirection", "nil", "Direction", "float32", "Speed", "type", "ForecastResponse_Pressure", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Millibar", "protobuf", "fixed32", "opt", "name", "millibar", "proto3", "json", "omitempty", "Trend", "int32", "varint", "trend"], "doc_head": "// Deprecated: Use ForecastResponse_Wind.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}\nfunc (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}\ntype ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#13", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 307, "end_line": 333, "text": "func (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_Pressure) ProtoMessage() {}\n\nfunc (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [307, 333], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_Pressure", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_Pressure) ProtoMessage() {}\nfunc (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#14", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 334, "end_line": 352, "text": "// Deprecated: Use ForecastResponse_Pressure.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}\n\nfunc (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}\n", "n_tokens": 126, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [335, 352], "def_symbols": ["Descriptor", "GetMillibar", "GetTrend"], "symbols": ["Descriptor", "GetMillibar", "GetTrend", "Deprecated", "Use", "ForecastResponse_Pressure", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "float32", "nil", "Millibar", "int32", "Trend"], "doc_head": "// Deprecated: Use ForecastResponse_Pressure.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}\nfunc (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#15", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 353, "end_line": 372, "text": "type ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust             *ForecastResponse_CurrentCondition_WindGust `protobuf:\"bytes,8,opt,name=windGust,proto3\" json:\"windGust,omitempty\"`\n\tDewPoint             float32                                     `protobuf:\"fixed32,9,opt,name=dewPoint,proto3\" json:\"dewPoint,omitempty\"`\n\tHeatIndex            float32                                     `protobuf:\"fixed32,10,opt,name=heatIndex,proto3\" json:\"heatIndex,omitempty\"`\n\tPressure             *ForecastResponse_Pressure                  `protobuf:\"bytes,11,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tUvIndex              float32                                     `protobuf:\"fixed32,12,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tHumidityPercentage   int32                                       `protobuf:\"varint,13,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n}\n", "n_tokens": 407, "primary_symbol": "", "primary_kind": "", "primary_span": [353, 372], "def_symbols": [], "symbols": ["type", "ForecastResponse_CurrentCondition", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Epoch", "int64", "protobuf", "varint", "opt", "name", "epoch", "proto3", "json", "omitempty", "Visibility", "float32", "fixed32", "visibility", "WeatherCondition", "ForecastResponse_WeatherCondition", "bytes", "weatherCondition", "Precipitation", "precipitation", "NextHour", "ForecastResponse_CurrentCondition_NextHour", "nextHour", "Temperature", "temperature", "TemperatureFeelsLike", "temperatureFeelsLike", "WindGust", "ForecastResponse_CurrentCondition_WindGust", "windGust", "DewPoint", "dewPoint", "HeatIndex", "heatIndex", "Pressure", "ForecastResponse_Pressure", "pressure", "UvIndex", "uvIndex", "HumidityPercentage", "int32", "humidityPercentage"], "doc_head": "type ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust  "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#16", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 373, "end_line": 399, "text": "func (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 189, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [373, 399], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_CurrentCondition", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_CurrentCondition) ProtoMessage() {}\nfunc (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#17", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 400, "end_line": 432, "text": "// Deprecated: Use ForecastResponse_CurrentCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n", "n_tokens": 192, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [401, 432], "def_symbols": ["Descriptor", "GetEpoch", "GetVisibility", "GetWeatherCondition", "GetPrecipitation"], "symbols": ["Descriptor", "GetEpoch", "GetVisibility", "GetWeatherCondition", "GetPrecipitation", "Deprecated", "Use", "ForecastResponse_CurrentCondition", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "int64", "nil", "Epoch", "float32", "Visibility", "ForecastResponse_WeatherCondition", "WeatherCondition", "Precipitation"], "doc_head": "// Deprecated: Use ForecastResponse_CurrentCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}\nfunc (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#18", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 433, "end_line": 467, "text": "func (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}\n", "n_tokens": 188, "primary_symbol": "GetNextHour", "primary_kind": "function", "primary_span": [433, 467], "def_symbols": ["GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint"], "symbols": ["GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "func", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition_NextHour", "nil", "return", "NextHour", "float32", "Temperature", "TemperatureFeelsLike", "ForecastResponse_CurrentCondition_WindGust", "WindGust", "DewPoint"], "doc_head": "func (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#19", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 468, "end_line": 495, "text": "func (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\n", "n_tokens": 144, "primary_symbol": "GetHeatIndex", "primary_kind": "function", "primary_span": [468, 495], "def_symbols": ["GetHeatIndex", "GetPressure", "GetUvIndex", "GetHumidityPercentage"], "symbols": ["GetHeatIndex", "GetPressure", "GetUvIndex", "GetHumidityPercentage", "func", "ForecastResponse_CurrentCondition", "float32", "nil", "return", "HeatIndex", "ForecastResponse_Pressure", "Pressure", "UvIndex", "int32", "HumidityPercentage"], "doc_head": "func (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#20", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 496, "end_line": 519, "text": "type ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32                            `protobuf:\"fixed32,8,opt,name=snowDay,proto3\" json:\"snowDay,omitempty\"`\n\tSnowNight                 float32                            `protobuf:\"fixed32,9,opt,name=snowNight,proto3\" json:\"snowNight,omitempty\"`\n\tPrecipitationProbability  int32                              `protobuf:\"varint,10,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                      *ForecastResponse_Wind             `protobuf:\"bytes,11,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tAverageHumidityPercentage int32                              `protobuf:\"varint,12,opt,name=averageHumidityPercentage,proto3\" json:\"averageHumidityPercentage,omitempty\"`\n\tWeatherCondition          *ForecastResponse_WeatherCondition `protobuf:\"bytes,13,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tWeatherConditionNight     *ForecastResponse_WeatherCondition `protobuf:\"bytes,14,opt,name=weatherConditionNight,proto3\" json:\"weatherConditionNight,omitempty\"`\n\tUvIndex                   float32                            `protobuf:\"fixed32,15,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tSunriseEpoch              int64                              `protobuf:\"varint,16,opt,name=sunriseEpoch,proto3\" json:\"sunriseEpoch,omitempty\"`\n\tSunsetEpoch               int64                              `protobuf:\"varint,17,opt,name=sunsetEpoch,proto3\" json:\"sunsetEpoch,omitempty\"`\n}\n", "n_tokens": 538, "primary_symbol": "", "primary_kind": "", "primary_span": [496, 519], "def_symbols": [], "symbols": ["type", "ForecastResponse_DailyForecast", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Epoch", "int64", "protobuf", "varint", "opt", "name", "epoch", "proto3", "json", "omitempty", "TemperatureMin", "float32", "fixed32", "temperatureMin", "TemperatureMax", "temperatureMax", "Precipitation", "precipitation", "PrecipitationDay", "precipitationDay", "PrecipitationNight", "precipitationNight", "Snow", "snow", "SnowDay", "snowDay", "SnowNight", "snowNight", "PrecipitationProbability", "int32", "precipitationProbability", "Wind", "ForecastResponse_Wind", "bytes", "wind", "AverageHumidityPercentage", "averageHumidityPercentage", "WeatherCondition", "ForecastResponse_WeatherCondition", "weatherCondition", "WeatherConditionNight", "weatherConditionNight", "UvIndex", "uvIndex", "SunriseEpoch", "sunriseEpoch", "SunsetEpoch", "sunsetEpoch"], "doc_head": "type ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32  "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#21", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 520, "end_line": 546, "text": "func (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_DailyForecast) ProtoMessage() {}\n\nfunc (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [520, 546], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_DailyForecast", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_DailyForecast) ProtoMessage() {}\nfunc (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#22", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 547, "end_line": 579, "text": "// Deprecated: Use ForecastResponse_DailyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n", "n_tokens": 198, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [548, 579], "def_symbols": ["Descriptor", "GetEpoch", "GetTemperatureMin", "GetTemperatureMax", "GetPrecipitation"], "symbols": ["Descriptor", "GetEpoch", "GetTemperatureMin", "GetTemperatureMax", "GetPrecipitation", "Deprecated", "Use", "ForecastResponse_DailyForecast", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "int64", "nil", "Epoch", "float32", "TemperatureMin", "TemperatureMax", "Precipitation"], "doc_head": "// Deprecated: Use ForecastResponse_DailyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}\nfunc (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#23", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 580, "end_line": 614, "text": "func (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "GetPrecipitationDay", "primary_kind": "function", "primary_span": [580, 614], "def_symbols": ["GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight"], "symbols": ["GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight", "func", "ForecastResponse_DailyForecast", "float32", "nil", "return", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight"], "doc_head": "func (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#24", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 615, "end_line": 649, "text": "func (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}\n", "n_tokens": 196, "primary_symbol": "GetPrecipitationProbability", "primary_kind": "function", "primary_span": [615, 649], "def_symbols": ["GetPrecipitationProbability", "GetWind", "GetAverageHumidityPercentage", "GetWeatherCondition", "GetWeatherConditionNight"], "symbols": ["GetPrecipitationProbability", "GetWind", "GetAverageHumidityPercentage", "GetWeatherCondition", "GetWeatherConditionNight", "func", "ForecastResponse_DailyForecast", "int32", "nil", "return", "PrecipitationProbability", "ForecastResponse_Wind", "Wind", "AverageHumidityPercentage", "ForecastResponse_WeatherCondition", "WeatherCondition", "WeatherConditionNight"], "doc_head": "func (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#25", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 650, "end_line": 670, "text": "func (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}\n", "n_tokens": 112, "primary_symbol": "GetUvIndex", "primary_kind": "function", "primary_span": [650, 670], "def_symbols": ["GetUvIndex", "GetSunriseEpoch", "GetSunsetEpoch"], "symbols": ["GetUvIndex", "GetSunriseEpoch", "GetSunsetEpoch", "func", "ForecastResponse_DailyForecast", "float32", "nil", "return", "UvIndex", "int64", "SunriseEpoch", "SunsetEpoch"], "doc_head": "func (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#26", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 671, "end_line": 688, "text": "type ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *ForecastResponse_Wind             `protobuf:\"bytes,8,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tPressure                 *ForecastResponse_Pressure         `protobuf:\"bytes,9,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tHumidityPercentage       int32                              `protobuf:\"varint,10,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n\tUvIndex                  float32                            `protobuf:\"fixed32,11,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n}\n", "n_tokens": 344, "primary_symbol": "", "primary_kind": "", "primary_span": [671, 688], "def_symbols": [], "symbols": ["type", "ForecastResponse_HourlyForecast", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Epoch", "int64", "protobuf", "varint", "opt", "name", "epoch", "proto3", "json", "omitempty", "Temperature", "float32", "fixed32", "temperature", "TemperatureFeelsLike", "temperatureFeelsLike", "WeatherCondition", "ForecastResponse_WeatherCondition", "bytes", "weatherCondition", "Precipitation", "precipitation", "Snow", "snow", "PrecipitationProbability", "int32", "precipitationProbability", "Wind", "ForecastResponse_Wind", "wind", "Pressure", "ForecastResponse_Pressure", "pressure", "HumidityPercentage", "humidityPercentage", "UvIndex", "uvIndex"], "doc_head": "type ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#27", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 689, "end_line": 715, "text": "func (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_HourlyForecast) ProtoMessage() {}\n\nfunc (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 199, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [689, 715], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_HourlyForecast", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_HourlyForecast) ProtoMessage() {}\nfunc (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#28", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 716, "end_line": 748, "text": "// Deprecated: Use ForecastResponse_HourlyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [717, 748], "def_symbols": ["Descriptor", "GetEpoch", "GetTemperature", "GetTemperatureFeelsLike", "GetWeatherCondition"], "symbols": ["Descriptor", "GetEpoch", "GetTemperature", "GetTemperatureFeelsLike", "GetWeatherCondition", "Deprecated", "Use", "ForecastResponse_HourlyForecast", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "int64", "nil", "Epoch", "float32", "Temperature", "TemperatureFeelsLike", "ForecastResponse_WeatherCondition", "WeatherCondition"], "doc_head": "// Deprecated: Use ForecastResponse_HourlyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}\nfunc (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#29", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 749, "end_line": 783, "text": "func (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\n", "n_tokens": 191, "primary_symbol": "GetPrecipitation", "primary_kind": "function", "primary_span": [749, 783], "def_symbols": ["GetPrecipitation", "GetSnow", "GetPrecipitationProbability", "GetWind", "GetPressure"], "symbols": ["GetPrecipitation", "GetSnow", "GetPrecipitationProbability", "GetWind", "GetPressure", "func", "ForecastResponse_HourlyForecast", "float32", "nil", "return", "Precipitation", "Snow", "int32", "PrecipitationProbability", "ForecastResponse_Wind", "Wind", "ForecastResponse_Pressure", "Pressure"], "doc_head": "func (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#30", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 784, "end_line": 806, "text": "func (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}\n", "n_tokens": 170, "primary_symbol": "GetHumidityPercentage", "primary_kind": "function", "primary_span": [784, 806], "def_symbols": ["GetHumidityPercentage", "GetUvIndex"], "symbols": ["GetHumidityPercentage", "GetUvIndex", "func", "ForecastResponse_HourlyForecast", "int32", "nil", "return", "HumidityPercentage", "float32", "UvIndex", "type", "ForecastResponse_CurrentCondition_NextHour", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "WeatherCondition", "ForecastResponse_WeatherCondition", "protobuf", "bytes", "opt", "name", "weatherCondition", "proto3", "json", "omitempty", "Precipitation", "fixed32", "precipitation"], "doc_head": "func (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\ntype ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#31", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 807, "end_line": 821, "text": "func (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}\n", "n_tokens": 112, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [807, 821], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "func", "ForecastResponse_CurrentCondition_NextHour", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "func (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#32", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 822, "end_line": 845, "text": "func (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition_NextHour.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n", "n_tokens": 193, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [822, 845], "def_symbols": ["ProtoReflect", "Descriptor", "GetWeatherCondition"], "symbols": ["ProtoReflect", "Descriptor", "GetWeatherCondition", "func", "ForecastResponse_CurrentCondition_NextHour", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "protoimpl", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_WeatherCondition", "WeatherCondition"], "doc_head": "func (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_CurrentCondition_NextHour.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#33", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 846, "end_line": 870, "text": "func (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n", "n_tokens": 199, "primary_symbol": "GetPrecipitation", "primary_kind": "function", "primary_span": [846, 870], "def_symbols": ["GetPrecipitation", "Reset"], "symbols": ["GetPrecipitation", "Reset", "func", "ForecastResponse_CurrentCondition_NextHour", "float32", "nil", "return", "Precipitation", "type", "ForecastResponse_CurrentCondition_WindGust", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Wind", "ForecastResponse_Wind", "protobuf", "bytes", "opt", "name", "wind", "proto3", "json", "omitempty", "Gust", "fixed32", "gust", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\ntype ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}\nfunc (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#34", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 871, "end_line": 893, "text": "func (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition_WindGust.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}\n", "n_tokens": 197, "primary_symbol": "String", "primary_kind": "function", "primary_span": [871, 893], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "ForecastResponse_CurrentCondition_WindGust", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP"], "doc_head": "func (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}\nfunc (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_CurrentCondition_WindGust.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#35", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 894, "end_line": 900, "text": "func (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n", "n_tokens": 39, "primary_symbol": "GetWind", "primary_kind": "function", "primary_span": [894, 900], "def_symbols": ["GetWind"], "symbols": ["GetWind", "func", "ForecastResponse_CurrentCondition_WindGust", "ForecastResponse_Wind", "nil", "return", "Wind"], "doc_head": "func (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#36", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 901, "end_line": 1128, "text": "func (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}\n\nvar File_service_v0_proto protoreflect.FileDescriptor\n\nvar file_service_v0_proto_rawDesc = []byte{\n\t0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x12, 0x1a, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x22, 0x31,\n\t0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n\t0x64, 0x22, 0x92, 0x18, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,\n\t0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63,\n\t0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f,\n\t0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,\n\t0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,\n\t0x00, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,\n\t0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,\n\t0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69,\n\t0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c,\n\t0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x68, 0x6f,\n\t0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,\n\t0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f,\n\t0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30,\n\t0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x52, 0x0f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x73, 0x1a, 0x48, 0x0a, 0x10, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,\n\t0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,\n\t0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4d, 0x0a, 0x0d, 0x57,\n\t0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,\n\t0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x1a, 0x76, 0x0a, 0x04, 0x57, 0x69,\n\t0x6e, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,\n\t0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,\n\t0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,\n\t0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,\n\t0x65, 0x64, 0x1a, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a,\n\t0x0a, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x62, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,\n\t0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64,\n\t0x1a, 0xd3, 0x07, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x76,\n\t0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,\n\t0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x10, 0x77,\n\t0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,\n\t0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,\n\t0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70,\n\t0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,\n\t0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x08,\n\t0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,\n\t0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72,\n\t0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,\n\t0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72,\n\t0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,\n\t0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,\n\t0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,\n\t0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65,\n\t0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75,\n\t0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,\n\t0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,\n\t0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74,\n\t0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,\n\t0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65,\n\t0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e,\n\t0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49,\n\t0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,\n\t0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64,\n\t0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65,\n\t0x78, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,\n\t0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x68,\n\t0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,\n\t0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x69,\n\t0x0a, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,\n\t0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,\n\t0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,\n\t0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65,\n\t0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,\n\t0x65, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x77,\n\t0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x61, 0x74,\n\t0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72,\n\t0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x77, 0x69,\n\t0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x04, 0x67, 0x75, 0x73, 0x74, 0x1a, 0xc4, 0x06, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79,\n\t0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,\n\t0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x26,\n\t0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,\n\t0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,\n\t0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,\n\t0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24,\n\t0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,\n\t0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x72,\n\t0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74,\n\t0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,\n\t0x73, 0x6e, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x18,\n\t0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x12, 0x1c,\n\t0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x18,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,\n\t0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,\n\t0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x64,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x64, 0x12,\n\t0x3c, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,\n\t0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,\n\t0x28, 0x05, 0x52, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64,\n\t0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a,\n\t0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,\n\t0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,\n\t0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78,\n\t0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,\n\t0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x74,\n\t0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68,\n\t0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,\n\t0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78,\n\t0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,\n\t0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,\n\t0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,\n\t0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x69,\n\t0x73, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,\n\t0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73,\n\t0x75, 0x6e, 0x73, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,\n\t0x52, 0x0b, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0xc1, 0x04,\n\t0x0a, 0x0e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,\n\t0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,\n\t0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,\n\t0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70,\n\t0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65,\n\t0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,\n\t0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x69, 0x0a, 0x10,\n\t0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n\t0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69,\n\t0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,\n\t0x04, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x6e, 0x6f,\n\t0x77, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,\n\t0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a,\n\t0x04, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65,\n\t0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e,\n\t0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04,\n\t0x77, 0x69, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,\n\t0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,\n\t0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64,\n\t0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,\n\t0x01, 0x28, 0x05, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,\n\t0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64,\n\t0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65,\n\t0x78, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x77, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,\n\t0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,\n\t0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,\n\t0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x6c, 0x61, 0x73, 0x74, 0x75, 0x64,\n\t0x69, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x6b, 0x67,\n\t0x2f, 0x70, 0x62, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_service_v0_proto_rawDescOnce sync.Once\n\tfile_service_v0_proto_rawDescData = file_service_v0_proto_rawDesc\n)\n", "n_tokens": 17683, "primary_symbol": "GetGust", "primary_kind": "function", "primary_span": [901, 1128], "def_symbols": ["GetGust"], "symbols": ["GetGust", "func", "ForecastResponse_CurrentCondition_WindGust", "float32", "nil", "return", "Gust", "var", "File_service_v0_proto", "protoreflect", "FileDescriptor", "file_service_v0_proto_rawDesc", "byte", "file_service_v0_proto_rawDescOnce", "sync", "Once", "file_service_v0_proto_rawDescData"], "doc_head": "func (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}\nvar File_service_v0_proto protoreflect.FileDescriptor\nvar file_service_v0_proto_rawDesc = []byte{\n\t0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x12, 0x1a, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x22, 0x31,\n\t0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n\t0x64, 0x22, 0x92, 0x18, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,\n\t0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63,\n\t0x61, 0x73, "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#37", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 1129, "end_line": 1136, "text": "func file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}\n\nvar file_service_v0_proto_msgTypes = make([]protoimpl.MessageInfo, 11)", "n_tokens": 84, "primary_symbol": "file_service_v0_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [1129, 1136], "def_symbols": ["file_service_v0_proto_rawDescGZIP"], "symbols": ["file_service_v0_proto_rawDescGZIP", "func", "byte", "file_service_v0_proto_rawDescOnce", "file_service_v0_proto_rawDescData", "protoimpl", "CompressGZIP", "return", "var", "file_service_v0_proto_msgTypes", "make", "MessageInfo"], "doc_head": "func file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}\nvar file_service_v0_proto_msgTypes = make([]protoimpl.MessageInfo, 11)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#38", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 1137, "end_line": 1175, "text": "var file_service_v0_proto_goTypes = []interface{}{\n\t(*ForecastRequest)(nil),                            // 0: weather.forecasts.proxy.v0.ForecastRequest\n\t(*ForecastResponse)(nil),                           // 1: weather.forecasts.proxy.v0.ForecastResponse\n\t(*ForecastResponse_WeatherCondition)(nil),          // 2: weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t(*ForecastResponse_WindDirection)(nil),             // 3: weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t(*ForecastResponse_Wind)(nil),                      // 4: weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t(*ForecastResponse_Pressure)(nil),                  // 5: weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t(*ForecastResponse_CurrentCondition)(nil),          // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t(*ForecastResponse_DailyForecast)(nil),             // 7: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t(*ForecastResponse_HourlyForecast)(nil),            // 8: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t(*ForecastResponse_CurrentCondition_NextHour)(nil), // 9: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t(*ForecastResponse_CurrentCondition_WindGust)(nil), // 10: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust\n}\nvar file_service_v0_proto_depIdxs = []int32{\n\t6,  // 0: weather.forecasts.proxy.v0.ForecastResponse.currentCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t7,  // 1: weather.forecasts.proxy.v0.ForecastResponse.dailyForecasts:type_name -> weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t8,  // 2: weather.forecasts.proxy.v0.ForecastResponse.hourlyForecasts:type_name -> weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t3,  // 3: weather.forecasts.proxy.v0.ForecastResponse.Wind.direction:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t2,  // 4: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t9,  // 5: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.nextHour:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t10, // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.windGust:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust\n\t5,  // 7: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.pressure:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t4,  // 8: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t2,  // 9: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t2,  // 10: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.weatherConditionNight:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t2,  // 11: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t4,  // 12: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t5,  // 13: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.pressure:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t2,  // 14: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t4,  // 15: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t0,  // 16: weather.forecasts.proxy.v0.ForecaProxy.GetForecast:input_type -> weather.forecasts.proxy.v0.ForecastRequest\n\t1,  // 17: weather.forecasts.proxy.v0.ForecaProxy.GetForecast:output_type -> weather.forecasts.proxy.v0.ForecastResponse\n\t17, // [17:18] is the sub-list for method output_type\n\t16, // [16:17] is the sub-list for method input_type\n\t16, // [16:16] is the sub-list for extension type_name\n\t16, // [16:16] is the sub-list for extension extendee\n\t0,  // [0:16] is the sub-list for field type_name\n}\n", "n_tokens": 1083, "primary_symbol": "", "primary_kind": "", "primary_span": [1137, 1175], "def_symbols": [], "symbols": ["var", "file_service_v0_proto_goTypes", "interface", "ForecastRequest", "nil", "weather", "forecasts", "proxy", "ForecastResponse", "ForecastResponse_WeatherCondition", "WeatherCondition", "ForecastResponse_WindDirection", "WindDirection", "ForecastResponse_Wind", "Wind", "ForecastResponse_Pressure", "Pressure", "ForecastResponse_CurrentCondition", "CurrentCondition", "ForecastResponse_DailyForecast", "DailyForecast", "ForecastResponse_HourlyForecast", "HourlyForecast", "ForecastResponse_CurrentCondition_NextHour", "NextHour", "ForecastResponse_CurrentCondition_WindGust", "WindGust", "file_service_v0_proto_depIdxs", "int32", "currentCondition", "type_name", "dailyForecasts", "hourlyForecasts", "direction", "weatherCondition", "nextHour", "windGust", "pressure", "wind", "weatherConditionNight", "ForecaProxy", "GetForecast", "input_type", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "var file_service_v0_proto_goTypes = []interface{}{\n\t(*ForecastRequest)(nil),                            // 0: weather.forecasts.proxy.v0.ForecastRequest\n\t(*ForecastResponse)(nil),                           // 1: weather.forecasts.proxy.v0.ForecastResponse\n\t(*ForecastResponse_WeatherCondition)(nil),          // 2: weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t(*ForecastResponse_WindDirection)(nil),             // 3: weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t(*ForecastResponse_Wind)(nil),                      // 4: weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t(*ForecastResponse_Pressure)(nil),                  // 5: weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t(*ForecastResponse_CurrentCondition)(nil),          // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t(*ForecastResponse_DailyForecast)(nil),             // 7: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t(*ForecastResponse_HourlyForecast)(nil),            // 8: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t(*ForecastResponse_CurrentCondition_NextHour)(nil), // 9: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t(*"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#39", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 1176, "end_line": 1205, "text": "func init() { file_service_v0_proto_init() }\nfunc file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 207, "primary_symbol": "init", "primary_kind": "function", "primary_span": [1176, 1205], "def_symbols": ["init", "file_service_v0_proto_init"], "symbols": ["init", "file_service_v0_proto_init", "func", "File_service_v0_proto", "nil", "return", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "Exporter", "interface", "int", "switch", "ForecastRequest", "case", "state", "sizeCache", "unknownFields", "default", "ForecastResponse"], "doc_head": "func init() { file_service_v0_proto_init() }\nfunc file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#40", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 1206, "end_line": 1229, "text": "\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 170, "primary_symbol": "", "primary_kind": "", "primary_span": [1206, 1229], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_WeatherCondition", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_WindDirection"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#41", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 1230, "end_line": 1253, "text": "\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 169, "primary_symbol": "", "primary_kind": "", "primary_span": [1230, 1253], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_Wind", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_Pressure"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#42", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 1254, "end_line": 1277, "text": "\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 169, "primary_symbol": "", "primary_kind": "", "primary_span": [1254, 1277], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_CurrentCondition", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_DailyForecast"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#43", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1278, "end_line": 1301, "text": "\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 173, "primary_symbol": "", "primary_kind": "", "primary_span": [1278, 1301], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_HourlyForecast", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_CurrentCondition_NextHour"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#44", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1302, "end_line": 1315, "text": "\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}", "n_tokens": 109, "primary_symbol": "", "primary_kind": "", "primary_span": [1302, 1315], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_CurrentCondition_WindGust", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "OneofWrappers"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#45", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1316, "end_line": 1335, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()\n\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}\n", "n_tokens": 171, "primary_symbol": "", "primary_kind": "", "primary_span": [1316, 1335], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "file_service_v0_proto_rawDesc", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_service_v0_proto_goTypes", "DependencyIndexes", "file_service_v0_proto_depIdxs", "MessageInfos", "file_service_v0_proto_msgTypes", "Build", "File_service_v0_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()\n\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: service.v0.proto\n\npackage v0\n\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7\n", "n_tokens": 145, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 20], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "service", "proto", "package", "import", "context", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "file", "compatible", "with", "the", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion7"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: service.v0.proto\npackage v0\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 21, "end_line": 35, "text": "// ForecaProxyClient is the client API for ForecaProxy service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}\n\ntype forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}\n", "n_tokens": 125, "primary_symbol": "NewForecaProxyClient", "primary_kind": "function", "primary_span": [32, 35], "def_symbols": ["NewForecaProxyClient"], "symbols": ["NewForecaProxyClient", "ForecaProxyClient", "the", "client", "API", "for", "ForecaProxy", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "GetForecast", "context", "Context", "ForecastRequest", "opts", "CallOption", "ForecastResponse", "error", "forecaProxyClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// ForecaProxyClient is the client API for ForecaProxy service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}\ntype forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 36, "end_line": 56, "text": "func (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// ForecaProxyServer is the server API for ForecaProxy service.\n// All implementations must embed UnimplementedForecaProxyServer\n// for forward compatibility\ntype ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n\n// UnimplementedForecaProxyServer must be embedded to have forward compatible implementations.\ntype UnimplementedForecaProxyServer struct {\n}\n", "n_tokens": 178, "primary_symbol": "GetForecast", "primary_kind": "function", "primary_span": [36, 56], "def_symbols": ["GetForecast"], "symbols": ["GetForecast", "func", "forecaProxyClient", "ctx", "context", "Context", "ForecastRequest", "opts", "grpc", "CallOption", "ForecastResponse", "error", "out", "new", "err", "Invoke", "weather", "forecasts", "proxy", "ForecaProxy", "nil", "return", "ForecaProxyServer", "the", "server", "API", "for", "service", "All", "implementations", "must", "embed", "UnimplementedForecaProxyServer", "forward", "compatibility", "type", "interface", "mustEmbedUnimplementedForecaProxyServer", "embedded", "have", "compatible", "struct"], "doc_head": "func (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n// ForecaProxyServer is the server API for ForecaProxy service.\n// All implementations must embed UnimplementedForecaProxyServer\n// for forward compatibility\ntype ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n// UnimplementedForecaProxyServer must be embedded to have forward compatible implementations.\ntype UnimplementedForecaProxyServer struct {\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 57, "end_line": 72, "text": "func (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}\nfunc (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}\n\n// UnsafeForecaProxyServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ForecaProxyServer will\n// result in compilation errors.\ntype UnsafeForecaProxyServer interface {\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n\nfunc RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}\n", "n_tokens": 156, "primary_symbol": "GetForecast", "primary_kind": "function", "primary_span": [57, 72], "def_symbols": ["GetForecast", "mustEmbedUnimplementedForecaProxyServer", "RegisterForecaProxyServer"], "symbols": ["GetForecast", "mustEmbedUnimplementedForecaProxyServer", "RegisterForecaProxyServer", "func", "UnimplementedForecaProxyServer", "context", "Context", "ForecastRequest", "ForecastResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "UnsafeForecaProxyServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "recommended", "added", "methods", "ForecaProxyServer", "will", "result", "compilation", "errors", "type", "grpc", "ServiceRegistrar", "srv", "RegisterService", "ForecaProxy_ServiceDesc"], "doc_head": "func (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}\nfunc (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}\n// UnsafeForecaProxyServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ForecaProxyServer will\n// result in compilation errors.\ntype UnsafeForecaProxyServer interface {\n\tmustEmbedUnimplementedForecaProxyServer()\n}\nfunc RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 73, "end_line": 84, "text": "func _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}", "n_tokens": 119, "primary_symbol": "_ForecaProxy_GetForecast_Handler", "primary_kind": "function", "primary_span": [73, 84], "def_symbols": ["_ForecaProxy_GetForecast_Handler"], "symbols": ["_ForecaProxy_GetForecast_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "ForecastRequest", "err", "nil", "return", "ForecaProxyServer", "GetForecast", "info", "UnaryServerInfo", "Server", "FullMethod", "weather", "forecasts", "proxy", "ForecaProxy"], "doc_head": "func _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 85, "end_line": 106, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// ForecaProxy_ServiceDesc is the grpc.ServiceDesc for ForecaProxy service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar ForecaProxy_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"weather.forecasts.proxy.v0.ForecaProxy\",\n\tHandlerType: (*ForecaProxyServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetForecast\",\n\t\t\tHandler:    _ForecaProxy_GetForecast_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"service.v0.proto\",\n}\n", "n_tokens": 185, "primary_symbol": "", "primary_kind": "", "primary_span": [85, 106], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "ForecaProxyServer", "GetForecast", "ForecastRequest", "interceptor", "info", "ForecaProxy_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "ForecaProxy", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "weather", "forecasts", "proxy", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Handler", "_ForecaProxy_GetForecast_Handler", "Streams", "StreamDesc", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// ForecaProxy_ServiceDesc is the grpc.ServiceDesc for ForecaProxy service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar ForecaProxy_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"weather.forecasts.proxy.v0.ForecaProxy\",\n\tHandlerType: (*ForecaProxyServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetForecast\",\n\t\t\tHandler:    _ForecaProxy_GetForecast_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"service.v0.proto\",\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 19, "text": "package xotel\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\tmetricsdk \"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n", "n_tokens": 181, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 19], "def_symbols": [], "symbols": ["package", "xotel", "import", "context", "opentelemetry", "otel", "metric", "time", "github", "com", "cockroachdb", "errors", "spf13", "viper", "exporters", "otlp", "otlpmetric", "otlpmetricgrpc", "otlptrace", "otlptracegrpc", "metricsdk", "sdk", "resource", "tracesdk", "trace", "semconv"], "doc_head": "package xotel\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\tmetricsdk \"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 20, "end_line": 24, "text": "// TracerProviderConfig is the configuration for the OpenTelemetry Tracer provider\ntype TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}\n", "n_tokens": 34, "primary_symbol": "", "primary_kind": "", "primary_span": [20, 24], "def_symbols": [], "symbols": ["TracerProviderConfig", "the", "configuration", "for", "OpenTelemetry", "Tracer", "provider", "type", "struct", "Endpoint", "string", "mapstructure", "endpoint"], "doc_head": "// TracerProviderConfig is the configuration for the OpenTelemetry Tracer provider\ntype TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 25, "end_line": 63, "text": "// NewTracerProvider creates a new TracerProvider provider\n// Usage:\n//\n//\ttp, err := xotel.NewTracerProvider(ctx, cfg)\n//\tif err != nil {\n//\t\treturn nil, errors.Wrap(err, \"failed to create trace provider\")\n//\t}\n//\totel.SetTracerProvider(tp)\n//\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n//\n//\tdefer tp.Shutdown(ctx)\nfunc NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\n\treturn tp, nil\n}\n\n// Tracer is the global tracer\nvar Tracer trace.Tracer = nil\n", "n_tokens": 297, "primary_symbol": "NewTracerProvider", "primary_kind": "function", "primary_span": [36, 63], "def_symbols": ["NewTracerProvider"], "symbols": ["NewTracerProvider", "creates", "new", "TracerProvider", "provider", "Usage", "err", "xotel", "ctx", "cfg", "nil", "return", "errors", "Wrap", "failed", "create", "trace", "otel", "SetTracerProvider", "SetGlobalTracer", "Tracer", "viper", "GetString", "app", "name", "defer", "Shutdown", "func", "context", "Context", "TracerProviderConfig", "tracesdk", "error", "getResource", "cannot", "get", "resource", "tracer", "otlptracegrpc", "NewClient", "WithEndpoint", "Endpoint", "WithInsecure", "exporter", "otlptrace", "New", "initialize", "Always", "sure", "batch", "production", "WithBatcher", "WithResource", "WithSampler", "ParentBased", "AlwaysSample", "the", "global", "var"], "doc_head": "// NewTracerProvider creates a new TracerProvider provider\n// Usage:\n//\n//\ttp, err := xotel.NewTracerProvider(ctx, cfg)\n//\tif err != nil {\n//\t\treturn nil, errors.Wrap(err, \"failed to create trace provider\")\n//\t}\n//\totel.SetTracerProvider(tp)\n//\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n//\n//\tdefer tp.Shutdown(ctx)\nfunc NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\treturn tp, nil\n}\n// Tracer is the global tracer\nvar Tracer trace.Tracer = nil"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 64, "end_line": 74, "text": "// SetGlobalTracer sets global tracer\nfunc SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}\n\n// MeterProviderConfig is the configuration for the OpenTelemetry providers\ntype MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}\n", "n_tokens": 69, "primary_symbol": "SetGlobalTracer", "primary_kind": "function", "primary_span": [65, 74], "def_symbols": ["SetGlobalTracer"], "symbols": ["SetGlobalTracer", "sets", "global", "tracer", "func", "trace", "Tracer", "MeterProviderConfig", "the", "configuration", "for", "OpenTelemetry", "providers", "type", "struct", "Endpoint", "string", "mapstructure", "endpoint", "Interval", "time", "Duration", "interval"], "doc_head": "// SetGlobalTracer sets global tracer\nfunc SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}\n// MeterProviderConfig is the configuration for the OpenTelemetry providers\ntype MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 75, "end_line": 106, "text": "func NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\n\treturn provider, nil\n}\n\n// Meter is the global tracer\nvar Meter metric.Meter = nil\n", "n_tokens": 193, "primary_symbol": "NewMeterProvider", "primary_kind": "function", "primary_span": [75, 106], "def_symbols": ["NewMeterProvider"], "symbols": ["NewMeterProvider", "func", "ctx", "context", "Context", "cfg", "MeterProviderConfig", "metricsdk", "MeterProvider", "error", "cancel", "WithTimeout", "time", "Second", "defer", "err", "getResource", "nil", "return", "errors", "Wrap", "cannot", "get", "resource", "exporter", "otlpmetricgrpc", "New", "WithEndpoint", "Endpoint", "WithInsecure", "failed", "initialize", "metric", "reader", "NewPeriodicReader", "WithInterval", "Interval", "provider", "WithResource", "WithReader", "Meter", "the", "global", "tracer", "var"], "doc_head": "func NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\treturn provider, nil\n}\n// Meter is the global tracer\nvar Meter metric.Meter = nil"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 107, "end_line": 126, "text": "// SetGlobalMeter sets global tracer\nfunc SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}\n\nfunc getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\n\treturn r, nil\n}\n", "n_tokens": 103, "primary_symbol": "SetGlobalMeter", "primary_kind": "function", "primary_span": [108, 126], "def_symbols": ["SetGlobalMeter", "getResource"], "symbols": ["SetGlobalMeter", "getResource", "sets", "global", "tracer", "func", "meter", "metric", "Meter", "resource", "Resource", "error", "err", "Merge", "Default", "NewWithAttributes", "semconv", "SchemaURL", "ServiceNameKey", "String", "viper", "GetString", "app", "name", "nil", "return", "errors", "Wrap", "cannot", "merge"], "doc_head": "// SetGlobalMeter sets global tracer\nfunc SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}\nfunc getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\treturn r, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go", "rel_path": "pkg/cache/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "package cache\n\ntype Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 22, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["package", "cache", "type", "Item", "struct", "Key", "string", "Value", "byte", "Expiration", "int32"], "doc_head": "package cache\ntype Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go", "rel_path": "pkg/cache/memcached.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 42, "text": "package cache\n\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n\ntype Memcached struct {\n\tc memcache.Client\n}\n\nfunc NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}\n\nfunc (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}\n\nfunc (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\n\treturn response.Error()\n}\n", "n_tokens": 197, "primary_symbol": "NewMemcached", "primary_kind": "function", "primary_span": [12, 42], "def_symbols": ["NewMemcached", "Get", "Set"], "symbols": ["NewMemcached", "Get", "Set", "package", "cache", "import", "github", "com", "dropbox", "godropbox", "memcache", "time", "type", "Memcached", "struct", "Client", "func", "client", "return", "key", "string", "Item", "error", "response", "Status", "StatusNoError", "switch", "case", "StatusKeyNotFound", "nil", "ErrCacheMiss", "default", "ErrCacheGeneric", "Key", "Value", "value", "byte", "Error"], "doc_head": "package cache\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\ntype Memcached struct {\n\tc memcache.Client\n}\nfunc NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}\nfunc (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}\nfunc (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\treturn response.Error()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go", "rel_path": "pkg/cache/memcached.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 43, "end_line": 52, "text": "func (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\n\treturn response.Error()\n}\n", "n_tokens": 63, "primary_symbol": "SetWithExpiration", "primary_kind": "function", "primary_span": [43, 52], "def_symbols": ["SetWithExpiration"], "symbols": ["SetWithExpiration", "func", "Memcached", "key", "string", "value", "byte", "exp", "time", "Time", "error", "response", "Set", "memcache", "Item", "Key", "Value", "Expiration", "uint32", "Unix", "return", "Error"], "doc_head": "func (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\treturn response.Error()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go", "rel_path": "pkg/cache/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package cache\n\nimport \"errors\"\n\nvar (\n\tErrCacheMiss    = errors.New(\"cache miss\")\n\tErrCacheGeneric = errors.New(\"cache generic\")\n)\n", "n_tokens": 33, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "cache", "import", "errors", "var", "ErrCacheMiss", "New", "miss", "ErrCacheGeneric", "generic"], "doc_head": "package cache\nimport \"errors\"\nvar (\n\tErrCacheMiss    = errors.New(\"cache miss\")\n\tErrCacheGeneric = errors.New(\"cache generic\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go", "rel_path": "pkg/utilities/units.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package utilities\n\nfunc CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}\n\nfunc FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}\n\nfunc KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}\n\nfunc MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}\n", "n_tokens": 107, "primary_symbol": "CelsiusToFahrenheit", "primary_kind": "function", "primary_span": [3, 18], "def_symbols": ["CelsiusToFahrenheit", "FahrenheitToCelsius", "KilometersToMiles", "MilesToKilometers"], "symbols": ["CelsiusToFahrenheit", "FahrenheitToCelsius", "KilometersToMiles", "MilesToKilometers", "package", "utilities", "func", "celsius", "float64", "return", "fahrenheit"], "doc_head": "package utilities\nfunc CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}\nfunc FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}\nfunc KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}\nfunc MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go", "rel_path": "pkg/utilities/slices.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 12, "text": "package utilities\n\nfunc ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n", "n_tokens": 41, "primary_symbol": "ContainsString", "primary_kind": "function", "primary_span": [3, 12], "def_symbols": ["ContainsString"], "symbols": ["ContainsString", "package", "utilities", "func", "string", "bool", "for", "range", "return", "true", "false"], "doc_head": "package utilities\nfunc ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go", "rel_path": "pkg/utilities/math.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package utilities\n\nimport \"math\"\n\nfunc Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Floor(v*base) / base\n}\n\nfunc Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Round(v*base) / base\n}\n\nfunc Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Ceil(v*base) / base\n}\n", "n_tokens": 102, "primary_symbol": "Floor", "primary_kind": "function", "primary_span": [5, 22], "def_symbols": ["Floor", "Round", "Ceil"], "symbols": ["Floor", "Round", "Ceil", "package", "utilities", "import", "math", "func", "float64", "precision", "int", "base", "Pow10", "return"], "doc_head": "package utilities\nimport \"math\"\nfunc Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\treturn math.Floor(v*base) / base\n}\nfunc Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\treturn math.Round(v*base) / base\n}\nfunc Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\treturn math.Ceil(v*base) / base\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package ratelimit_test\n\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\n\tmockController *gomock.Controller\n}\n\nfunc (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n", "n_tokens": 118, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [18, 21], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "package", "ratelimit_test", "import", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "pkg", "ratelimit", "mocks", "uber", "org", "mock", "gomock", "testing", "time", "type", "singleThreadLimiterTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController"], "doc_head": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\ntype singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\tmockController *gomock.Controller\n}\nfunc (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 35, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}\n", "n_tokens": 107, "primary_symbol": "TestSingleThreadLimiter_PeekEmpty", "primary_kind": "function", "primary_span": [22, 35], "def_symbols": ["TestSingleThreadLimiter_PeekEmpty"], "symbols": ["TestSingleThreadLimiter_PeekEmpty", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "nil", "ratelimit", "NewSingleThreadLimiter", "time", "Second", "Start", "defer", "Stop", "err", "Peek", "Assert", "NotNil", "ErrorIs", "ErrNotFound", "Zero"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 36, "end_line": 54, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}\n", "n_tokens": 144, "primary_symbol": "TestSingleThreadLimiter_PeekNotEmpty", "primary_kind": "function", "primary_span": [36, 54], "def_symbols": ["TestSingleThreadLimiter_PeekNotEmpty"], "symbols": ["TestSingleThreadLimiter_PeekNotEmpty", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "ratelimit", "TokenBucket", "Used", "LastAccessTime", "time", "Now", "Limit", "Duration", "Second", "nil", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "Peek", "Assert", "Nil", "NotNil", "EqualValues"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 55, "end_line": 74, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}\n", "n_tokens": 171, "primary_symbol": "TestSingleThreadLimiter_AcquireNewBucket", "primary_kind": "function", "primary_span": [55, 74], "def_symbols": ["TestSingleThreadLimiter_AcquireNewBucket"], "symbols": ["TestSingleThreadLimiter_AcquireNewBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "nil", "Set", "gomock", "Any", "time", "Second", "DoAndReturn", "arg0", "string", "arg1", "ratelimit", "TokenBucket", "arg2", "Duration", "error", "Assert", "Equal", "float64", "Used", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "Acquire", "Nil", "NotNil", "EqualValues"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 75, "end_line": 99, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\n", "n_tokens": 214, "primary_symbol": "TestSingleThreadLimiter_AcquireExistingBucket", "primary_kind": "function", "primary_span": [75, 99], "def_symbols": ["TestSingleThreadLimiter_AcquireExistingBucket"], "symbols": ["TestSingleThreadLimiter_AcquireExistingBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "ratelimit", "TokenBucket", "Used", "LastAccessTime", "time", "Now", "Limit", "Duration", "Second", "nil", "Set", "gomock", "Any", "DoAndReturn", "arg0", "string", "arg1", "arg2", "error", "Assert", "GreaterOrEqual", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "Acquire", "Nil", "NotNil", "Equal", "int64"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 100, "end_line": 119, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}\n", "n_tokens": 176, "primary_symbol": "TestSingleThreadLimiter_AcquireNNewBucket", "primary_kind": "function", "primary_span": [100, 119], "def_symbols": ["TestSingleThreadLimiter_AcquireNNewBucket"], "symbols": ["TestSingleThreadLimiter_AcquireNNewBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "nil", "Set", "gomock", "Any", "time", "Second", "DoAndReturn", "arg0", "string", "arg1", "ratelimit", "TokenBucket", "arg2", "Duration", "error", "Assert", "Equal", "float64", "Used", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "AcquireN", "Nil", "NotNil", "EqualValues"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 120, "end_line": 144, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\n", "n_tokens": 219, "primary_symbol": "TestSingleThreadLimiter_AcquireNExistingBucket", "primary_kind": "function", "primary_span": [120, 144], "def_symbols": ["TestSingleThreadLimiter_AcquireNExistingBucket"], "symbols": ["TestSingleThreadLimiter_AcquireNExistingBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "ratelimit", "TokenBucket", "Used", "LastAccessTime", "time", "Now", "Limit", "Duration", "Second", "nil", "Set", "gomock", "Any", "DoAndReturn", "arg0", "string", "arg1", "arg2", "error", "Assert", "GreaterOrEqual", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "AcquireN", "Nil", "NotNil", "Equal", "int64"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 145, "end_line": 160, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}\n\nfunc TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}\n", "n_tokens": 106, "primary_symbol": "TestSingleThreadLimiter_Reset", "primary_kind": "function", "primary_span": [145, 160], "def_symbols": ["TestSingleThreadLimiter_Reset", "TestSingleThreadLimiter"], "symbols": ["TestSingleThreadLimiter_Reset", "TestSingleThreadLimiter", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Delete", "test", "Return", "nil", "ratelimit", "NewSingleThreadLimiter", "time", "Second", "Start", "defer", "Stop", "err", "Reset", "Assert", "Nil", "testing", "Run", "new"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}\nfunc TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go", "rel_path": "pkg/ratelimit/interfaces.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "package ratelimit\n\nimport \"context\"\n\ntype IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}\n", "n_tokens": 27, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["package", "ratelimit", "import", "context", "type", "IRateLimit", "interface", "Allow", "ctx", "Context", "key", "string", "bool"], "doc_head": "package ratelimit\nimport \"context\"\ntype IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go", "rel_path": "pkg/ratelimit/tokenbucket.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 35, "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\nvar (\n\tErrLimitReached = errors.New(\"limit reached\")\n)\n\ntype TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}\n\nfunc NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}\n\nfunc (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\n\treturn ErrLimitReached\n}\n", "n_tokens": 159, "primary_symbol": "NewTokenBucket", "primary_kind": "function", "primary_span": [19, 35], "def_symbols": ["NewTokenBucket", "Consume"], "symbols": ["NewTokenBucket", "Consume", "package", "ratelimit", "import", "errors", "time", "var", "ErrLimitReached", "New", "limit", "reached", "type", "TokenBucket", "struct", "Used", "float64", "LastAccessTime", "Time", "Limit", "Duration", "func", "duration", "return", "Now", "bucket", "count", "error", "now", "used", "GetAdjustedUsage", "nil"], "doc_head": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\nvar (\n\tErrLimitReached = errors.New(\"limit reached\")\n)\ntype TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}\nfunc NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}\nfunc (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\treturn ErrLimitReached\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go", "rel_path": "pkg/ratelimit/tokenbucket.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 36, "end_line": 48, "text": "func (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}\n", "n_tokens": 94, "primary_symbol": "GetAdjustedUsage", "primary_kind": "function", "primary_span": [36, 48], "def_symbols": ["GetAdjustedUsage"], "symbols": ["GetAdjustedUsage", "func", "bucket", "TokenBucket", "now", "time", "Time", "float64", "used", "Used", "LastAccessTime", "Unix", "elapsed", "Sub", "back", "Limit", "Duration", "return"], "doc_head": "func (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go", "rel_path": "pkg/ratelimit/storage_memcached.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 36, "text": "package ratelimit\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n\ntype MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}\n\nfunc NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}\n\nfunc (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}\n", "n_tokens": 201, "primary_symbol": "NewMemcachedStorage", "primary_kind": "function", "primary_span": [15, 36], "def_symbols": ["NewMemcachedStorage", "Get"], "symbols": ["NewMemcachedStorage", "Get", "package", "ratelimit", "import", "bytes", "encoding", "gob", "github", "com", "dropbox", "godropbox", "memcache", "time", "type", "MemcachedStorage", "struct", "client", "Client", "prefix", "string", "func", "return", "key", "TokenBucket", "error", "var", "err", "resp", "Status", "StatusNoError", "StatusKeyNotFound", "nil", "else", "Error", "bucket", "new", "dec", "NewDecoder", "NewBuffer", "Value", "Decode"], "doc_head": "package ratelimit\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\ntype MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}\nfunc NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}\nfunc (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go", "rel_path": "pkg/ratelimit/storage_memcached.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 37, "end_line": 55, "text": "func (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}\n\nfunc (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}\n", "n_tokens": 122, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [37, 55], "def_symbols": ["Set", "Delete"], "symbols": ["Set", "Delete", "func", "MemcachedStorage", "key", "string", "bucket", "TokenBucket", "duration", "time", "Duration", "error", "var", "buffer", "bytes", "NewBuffer", "nil", "enc", "gob", "NewEncoder", "Encode", "item", "memcache", "Item", "Key", "prefix", "Value", "Bytes", "Expiration", "uint32", "Seconds", "resp", "client", "return", "Error"], "doc_head": "func (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}\nfunc (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go", "rel_path": "pkg/ratelimit/storage.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 43, "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\nvar (\n\tErrNotFound = errors.New(\"not found\")\n)\n\ntype Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}\n\ntype DummyStorage struct {\n\tdata map[string]*TokenBucket\n}\n\nfunc NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}\n\nfunc (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}\n\nfunc (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}\n\nfunc (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}\n", "n_tokens": 198, "primary_symbol": "NewDummyStorage", "primary_kind": "function", "primary_span": [22, 43], "def_symbols": ["NewDummyStorage", "Get", "Set", "Delete"], "symbols": ["NewDummyStorage", "Get", "Set", "Delete", "package", "ratelimit", "import", "errors", "time", "var", "ErrNotFound", "New", "not", "found", "type", "Storage", "interface", "key", "string", "TokenBucket", "error", "bucket", "expire", "Duration", "DummyStorage", "struct", "data", "map", "func", "return", "make", "nil", "delete"], "doc_head": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\nvar (\n\tErrNotFound = errors.New(\"not found\")\n)\ntype Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}\ntype DummyStorage struct {\n\tdata map[string]*TokenBucket\n}\nfunc NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}\nfunc (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}\nfunc (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}\nfunc (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar (\n\tErrKeyEmpty     = errors.New(\"key cannot be empty\")\n\tErrCountZero    = errors.New(\"count should be greater than zero\")\n\tErrLimitZero    = errors.New(\"limit should be greater than zero\")\n\tErrCountLimit   = errors.New(\"limit should be greater than count\")\n\tErrZeroDuration = errors.New(\"duration cannot be zero\")\n)\n\n//go:generate /go/bin/mockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\ntype (\n\tlimiter interface {\n\t\tPeek(string) (int64, error)\n\t\tAcquireN(string, int64) (int64, error)\n\t\tAcquire(string) (int64, error)\n\t\tReset(string) error\n\t}", "n_tokens": 186, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 25], "def_symbols": [], "symbols": ["package", "ratelimit", "import", "errors", "math", "strings", "time", "var", "ErrKeyEmpty", "New", "key", "cannot", "empty", "ErrCountZero", "count", "should", "greater", "than", "zero", "ErrLimitZero", "limit", "ErrCountLimit", "ErrZeroDuration", "duration", "generate", "bin", "mockgen", "source", "limiter", "destination", "mocks", "limiter_mocks", "type", "interface", "Peek", "string", "int64", "error", "AcquireN", "Acquire", "Reset"], "doc_head": "package ratelimit\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\nvar (\n\tErrKeyEmpty     = errors.New(\"key cannot be empty\")\n\tErrCountZero    = errors.New(\"count should be greater than zero\")\n\tErrLimitZero    = errors.New(\"limit should be greater than zero\")\n\tErrCountLimit   = errors.New(\"limit should be greater than count\")\n\tErrZeroDuration = errors.New(\"duration cannot be zero\")\n)\n//go:generate /go/bin/mockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\ntype (\n\tlimiter interface {\n\t\tPeek(string) (int64, error)\n\t\tAcquireN(string, int64) (int64, error)\n\t\tAcquire(string) (int64, error)\n\t\tReset(string) error\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 52, "text": "\tstorage interface {\n\t\tGet(string) (*TokenBucket, error)\n\t\tSet(string, *TokenBucket, time.Duration) error\n\t\tDelete(string) error\n\t}\n)\n\ntype SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}\n\nfunc NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}\n\nfunc (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}\n\nfunc (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}\n", "n_tokens": 152, "primary_symbol": "NewSingleThreadLimiter", "primary_kind": "function", "primary_span": [41, 52], "def_symbols": ["NewSingleThreadLimiter", "Start", "Stop"], "symbols": ["NewSingleThreadLimiter", "Start", "Stop", "storage", "interface", "Get", "string", "TokenBucket", "error", "Set", "time", "Duration", "Delete", "type", "SingleThreadLimiter", "struct", "reqChan", "chan", "request", "stopChan", "bool", "limit", "int64", "duration", "func", "return", "make", "serve", "true"], "doc_head": "\tstorage interface {\n\t\tGet(string) (*TokenBucket, error)\n\t\tSet(string, *TokenBucket, time.Duration) error\n\t\tDelete(string) error\n\t}\n)\ntype SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}\nfunc NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}\nfunc (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}\nfunc (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 77, "text": "func (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\n\nfunc (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}\n", "n_tokens": 138, "primary_symbol": "AcquireN", "primary_kind": "function", "primary_span": [53, 77], "def_symbols": ["AcquireN", "Acquire"], "symbols": ["AcquireN", "Acquire", "func", "SingleThreadLimiter", "key", "string", "count", "int64", "error", "err", "checkAcquireArgs", "limit", "duration", "nil", "return", "req", "request", "ACQUIRE", "make", "chan", "response", "reqChan", "res", "used"], "doc_head": "func (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\nfunc (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 78, "end_line": 105, "text": "func (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\n\nfunc (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.err\n}\n", "n_tokens": 133, "primary_symbol": "Peek", "primary_kind": "function", "primary_span": [78, 105], "def_symbols": ["Peek", "Reset"], "symbols": ["Peek", "Reset", "func", "SingleThreadLimiter", "key", "string", "int64", "error", "req", "request", "PEEK", "make", "chan", "response", "reqChan", "res", "return", "used", "err", "RESET"], "doc_head": "func (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\nfunc (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.err\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 106, "end_line": 163, "text": "func (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n\n\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treq.response <- response{usage(bucket.Used), nil}\n\t\t\tdefault:\n\t\t\t\treq.response <- response{0, errors.New(\"undefined method\")}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 364, "primary_symbol": "serve", "primary_kind": "function", "primary_span": [106, 163], "def_symbols": ["serve"], "symbols": ["serve", "func", "SingleThreadLimiter", "for", "select", "case", "stopChan", "return", "req", "reqChan", "switch", "action", "PEEK", "bucket", "err", "storage", "Get", "key", "nil", "response", "continue", "ErrNotFound", "now", "time", "Now", "usage", "GetAdjustedUsage", "RESET", "Delete", "ACQUIRE", "count", "limit", "float64", "duration", "NewTokenBucket", "else", "Limit", "Duration", "Consume", "Used", "Set", "default", "errors", "New", "undefined", "method"], "doc_head": "func (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\t"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 164, "end_line": 203, "text": "func checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}\n\ntype response struct {\n\tused int64\n\terr  error\n}\n\nconst (\n\tPEEK = iota\n\tACQUIRE\n\tRESET\n)\n\ntype request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}\n\nfunc usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}\n", "n_tokens": 172, "primary_symbol": "checkAcquireArgs", "primary_kind": "function", "primary_span": [164, 203], "def_symbols": ["checkAcquireArgs", "usage"], "symbols": ["checkAcquireArgs", "usage", "func", "key", "string", "count", "limit", "int64", "duration", "time", "Duration", "error", "switch", "true", "case", "len", "strings", "TrimSpace", "return", "ErrKeyEmpty", "ErrCountZero", "ErrLimitZero", "ErrCountLimit", "ErrZeroDuration", "nil", "type", "response", "struct", "used", "err", "const", "PEEK", "iota", "ACQUIRE", "RESET", "request", "action", "int", "chan", "float64", "math", "Ceil"], "doc_head": "func checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}\ntype response struct {\n\tused int64\n\terr  error\n}\nconst (\n\tPEEK = iota\n\tACQUIRE\n\tRESET\n)\ntype request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}\nfunc usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 30, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: limiter.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tratelimit \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mocklimiter is a mock of limiter interface.\ntype Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}\n\n// MocklimiterMockRecorder is the mock recorder for Mocklimiter.\ntype MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}\n", "n_tokens": 176, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 30], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "limiter", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "limiter_mocks", "package", "Package", "GoMock", "import", "reflect", "time", "ratelimit", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "gomock", "uber", "org", "mock", "Mocklimiter", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MocklimiterMockRecorder", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: limiter.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\treflect \"reflect\"\n\ttime \"time\"\n\tratelimit \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mocklimiter is a mock of limiter interface.\ntype Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}\n// MocklimiterMockRecorder is the mock recorder for Mocklimiter.\ntype MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 31, "end_line": 51, "text": "// NewMocklimiter creates a new mock instance.\nfunc NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}\n\n// Acquire mocks base method.\nfunc (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 172, "primary_symbol": "NewMocklimiter", "primary_kind": "function", "primary_span": [32, 51], "def_symbols": ["NewMocklimiter", "EXPECT", "Acquire"], "symbols": ["NewMocklimiter", "EXPECT", "Acquire", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mocklimiter", "recorder", "MocklimiterMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "string", "int64", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMocklimiter creates a new mock instance.\nfunc NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}\n// Acquire mocks base method.\nfunc (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 52, "end_line": 66, "text": "// Acquire indicates an expected call of Acquire.\nfunc (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}\n\n// AcquireN mocks base method.\nfunc (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 163, "primary_symbol": "Acquire", "primary_kind": "function", "primary_span": [53, 66], "def_symbols": ["Acquire", "AcquireN"], "symbols": ["Acquire", "AcquireN", "indicates", "expected", "call", "func", "MocklimiterMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocklimiter", "nil", "mocks", "base", "method", "string", "arg1", "int64", "error", "ret", "ret0", "ret1"], "doc_head": "// Acquire indicates an expected call of Acquire.\nfunc (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}\n// AcquireN mocks base method.\nfunc (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 81, "text": "// AcquireN indicates an expected call of AcquireN.\nfunc (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}\n\n// Peek mocks base method.\nfunc (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 161, "primary_symbol": "AcquireN", "primary_kind": "function", "primary_span": [68, 81], "def_symbols": ["AcquireN", "Peek"], "symbols": ["AcquireN", "Peek", "indicates", "expected", "call", "func", "MocklimiterMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocklimiter", "nil", "mocks", "base", "method", "string", "int64", "error", "ret", "ret0", "ret1"], "doc_head": "// AcquireN indicates an expected call of AcquireN.\nfunc (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}\n// Peek mocks base method.\nfunc (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 82, "end_line": 101, "text": "// Peek indicates an expected call of Peek.\nfunc (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}\n\n// Reset mocks base method.\nfunc (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Reset indicates an expected call of Reset.\nfunc (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}\n", "n_tokens": 192, "primary_symbol": "Peek", "primary_kind": "function", "primary_span": [83, 101], "def_symbols": ["Peek", "Reset"], "symbols": ["Peek", "Reset", "indicates", "expected", "call", "func", "MocklimiterMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocklimiter", "nil", "mocks", "base", "method", "string", "error", "ret", "ret0"], "doc_head": "// Peek indicates an expected call of Peek.\nfunc (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}\n// Reset mocks base method.\nfunc (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n// Reset indicates an expected call of Reset.\nfunc (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 102, "end_line": 132, "text": "// Mockstorage is a mock of storage interface.\ntype Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}\n\n// MockstorageMockRecorder is the mock recorder for Mockstorage.\ntype MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}\n\n// NewMockstorage creates a new mock instance.\nfunc NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}\n\n// Delete mocks base method.\nfunc (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 197, "primary_symbol": "NewMockstorage", "primary_kind": "function", "primary_span": [114, 132], "def_symbols": ["NewMockstorage", "EXPECT", "Delete"], "symbols": ["NewMockstorage", "EXPECT", "Delete", "Mockstorage", "mock", "storage", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockstorageMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "string", "error", "Helper", "ret", "Call", "ret0"], "doc_head": "// Mockstorage is a mock of storage interface.\ntype Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}\n// MockstorageMockRecorder is the mock recorder for Mockstorage.\ntype MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}\n// NewMockstorage creates a new mock instance.\nfunc NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}\n// Delete mocks base method.\nfunc (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 133, "end_line": 147, "text": "// Delete indicates an expected call of Delete.\nfunc (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}\n\n// Get mocks base method.\nfunc (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 147, "primary_symbol": "Delete", "primary_kind": "function", "primary_span": [134, 147], "def_symbols": ["Delete", "Get"], "symbols": ["Delete", "Get", "indicates", "expected", "call", "func", "MockstorageMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockstorage", "nil", "mocks", "base", "method", "string", "ratelimit", "TokenBucket", "error", "ret", "ret0", "ret1"], "doc_head": "// Delete indicates an expected call of Delete.\nfunc (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}\n// Get mocks base method.\nfunc (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 148, "end_line": 161, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}\n\n// Set mocks base method.\nfunc (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 140, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [149, 161], "def_symbols": ["Get", "Set"], "symbols": ["Get", "Set", "indicates", "expected", "call", "func", "MockstorageMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockstorage", "nil", "mocks", "base", "method", "string", "arg1", "ratelimit", "TokenBucket", "arg2", "time", "Duration", "error", "ret", "ret0"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}\n// Set mocks base method.\nfunc (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 162, "end_line": 167, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}\n", "n_tokens": 77, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [163, 167], "def_symbols": ["Set"], "symbols": ["Set", "indicates", "expected", "call", "func", "MockstorageMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockstorage", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go", "rel_path": "pkg/aws/config.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 11, "text": "package aws\n\nimport (\n\t\"context\"\n\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\tawsConfig \"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\n\nfunc GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {", "n_tokens": 72, "primary_symbol": "GetConfig", "primary_kind": "function", "primary_span": [11, 11], "def_symbols": ["GetConfig"], "symbols": ["GetConfig", "package", "aws", "import", "context", "awsSdk", "github", "com", "sdk", "awsConfig", "config", "credentials", "func", "accessKey", "secretKey", "sessionToken", "string", "reg", "endpoint", "Config"], "doc_head": "package aws\nimport (\n\t\"context\"\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\tawsConfig \"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\nfunc GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go", "rel_path": "pkg/aws/config.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 12, "end_line": 44, "text": "\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\n\treturn cfg\n}\n", "n_tokens": 203, "primary_symbol": "", "primary_kind": "", "primary_span": [12, 44], "def_symbols": [], "symbols": ["endpointResolver", "awsSdk", "EndpointResolverWithOptionsFunc", "func", "service", "region", "string", "options", "interface", "Endpoint", "error", "endpoint", "return", "PartitionID", "aws", "URL", "SigningRegion", "reg", "nil", "EndpointNotFoundError", "optFns", "awsConfig", "LoadOptions", "WithEndpointResolverWithOptions", "accessKey", "secretKey", "sessionToken", "append", "WithCredentialsProvider", "credentials", "NewStaticCredentialsProvider", "cfg", "err", "LoadDefaultConfig", "context", "TODO", "Config"], "doc_head": "\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\treturn cfg\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/Company Repos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go", "rel_path": "pkg/aws/client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package aws\n\nimport (\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\n\nfunc NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}\n\nfunc NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}\n", "n_tokens": 111, "primary_symbol": "NewDynamoDbClientFromConfig", "primary_kind": "function", "primary_span": [8, 15], "def_symbols": ["NewDynamoDbClientFromConfig", "NewDynamoDbClient"], "symbols": ["NewDynamoDbClientFromConfig", "NewDynamoDbClient", "package", "aws", "import", "awsSdk", "github", "com", "sdk", "service", "dynamodb", "func", "cfg", "Config", "Client", "return", "NewFromConfig", "accessKey", "secretKey", "sessionToken", "string", "region", "endpoint", "GetConfig"], "doc_head": "package aws\nimport (\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\nfunc NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}\nfunc NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}"}
