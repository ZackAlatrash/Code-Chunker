{"id": "pkg/pb/v0/service.v0.pb.go#1", "repo_id": "test-repo", "path": "pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 50, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.28.1\n// \tprotoc        v3.21.12\n// source: service.proto\n\npackage v0\n\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n\n// ForecastRequest represents a request for weather forecast data.\ntype ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\t// Location identifier for the forecast\n\tLocation string `protobuf:\"bytes,1,opt,name=location,proto3\" json:\"location,omitempty\"`\n}\n\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n}\n\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastRequest) ProtoMessage() {}\n\nfunc (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}", "n_tokens": 45, "primary_symbol": "ForecastRequest", "primary_kind": "type", "primary_span": [1, 1], "def_symbols": ["ForecastRequest"], "symbols": ["ForecastRequest", "protoimpl", "protoreflect"], "doc_head": "", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:ForecastRequest (struct)", "package": "v0", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "ForecastRequest", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["ForecastRequest", "protoimpl.MessageState", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoreflect.Message"], "header_context_minimal": "package v0\nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)", "neighbors": {"next": "pkg/pb/v0/service.v0.pb.go#2"}, "summary_nl": "Gegenereerde protobuf-berichten en hulpfuncties; geen domeinlogica.", "keywords_nl": ["protobuf", "gegenereerd", "berichten", "hulpmethoden", "grpc"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-01-01T00:00:00", "file_synopsis_hash": "FILE_SYNOPSIS_HASH_PLACEHOLDER", "chunk_text_hash": "CHUNK_TEXT_HASH_PLACEHOLDER", "input_lang": "nl", "skipped_reason": "generated"}}
{"id": "internal/foreca/service.go#1", "repo_id": "test-repo", "path": "internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 30, "text": "package foreca\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n)\n\n// Service provides weather forecast functionality.\ntype Service struct {\n\tproviderClient adapters.ProviderClient\n\tmappingsRepo   adapters.MappingsRepository\n\tcacheClient    adapters.CacheClient\n}\n\n// NewService creates a new weather forecast service.\nfunc NewService(\n\tproviderClient adapters.ProviderClient,\n\tmappingsRepo adapters.MappingsRepository,\n\tcacheClient adapters.CacheClient,\n) *Service {\n\treturn &Service{\n\t\tproviderClient: providerClient,\n\t\tmappingsRepo:   mappingsRepo,\n\t\tcacheClient:    cacheClient,\n\t}\n}", "n_tokens": 25, "primary_symbol": "Service", "primary_kind": "type", "primary_span": [1, 1], "def_symbols": ["Service", "NewService"], "symbols": ["Service", "adapters", "ProviderClient", "MappingsRepository", "CacheClient"], "doc_head": "Service provides weather forecast functionality.", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Service (struct)", "package": "foreca", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Service", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["context", "fmt", "time", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters"], "symbols_referenced_strict": ["Service", "adapters.ProviderClient", "adapters.MappingsRepository", "adapters.CacheClient", "NewService"], "header_context_minimal": "package foreca\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n)", "neighbors": {"next": "internal/foreca/service.go#2"}, "summary_nl": "Definieert Service structuur voor weersvoorspelling met provider, mapping en cache clients.", "keywords_nl": ["service", "weersvoorspelling", "struct", "provider", "mapping", "cache", "clients", "foreca"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-01-01T00:00:00", "file_synopsis_hash": "FILE_SYNOPSIS_HASH_PLACEHOLDER", "chunk_text_hash": "CHUNK_TEXT_HASH_PLACEHOLDER", "input_lang": "nl", "skipped_reason": null}}
{"id": "internal/foreca/service.go#2", "repo_id": "test-repo", "path": "internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 31, "end_line": 60, "text": "// GetForecastForLocation retrieves weather forecast for a specific location.\nfunc (s *Service) GetForecastForLocation(ctx context.Context, location string) (*ForecastResponse, error) {\n\t// Check cache first\n\tcacheKey := s.getCacheKeyForLocation(location)\n\tif cached, err := s.cacheClient.Get(ctx, cacheKey); err == nil && cached != nil {\n\t\treturn cached, nil\n\t}\n\n\t// Get location mapping\n\tmapping, err := s.mappingsRepo.Get(ctx, location)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to get location mapping: %w\", err)\n\t}\n\n\t// Fetch forecast from provider\n\tforecast, err := s.providerClient.GetForecastForLocation(ctx, mapping.ForecaLocation)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to get forecast: %w\", err)\n\t}\n\n\t// Cache the result\n\tif err := s.cacheClient.Set(ctx, cacheKey, forecast, time.Hour); err != nil {\n\t\t// Log error but don't fail the request\n\t\tfmt.Printf(\"Warning: failed to cache forecast: %v\", err)\n\t}\n\n\treturn forecast, nil\n}", "n_tokens": 28, "primary_symbol": "GetForecastForLocation", "primary_kind": "method", "primary_span": [1, 1], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "Service", "context", "ForecastResponse", "cacheKey", "cacheClient", "mappingsRepo", "providerClient"], "doc_head": "GetForecastForLocation retrieves weather forecast for a specific location.", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*Service).GetForecastForLocation", "package": "foreca", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["context", "fmt", "time"], "symbols_referenced_strict": ["GetForecastForLocation", "Service", "context.Context", "ForecastResponse", "getCacheKeyForLocation", "cacheClient.Get", "mappingsRepo.Get", "providerClient.GetForecastForLocation", "cacheClient.Set", "fmt.Errorf", "fmt.Printf"], "header_context_minimal": "package foreca\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n// receiver: s *Service", "neighbors": {"prev": "internal/foreca/service.go#1", "next": "internal/foreca/service.go#3"}, "summary_nl": "Haalt weersvoorspelling op voor locatie via cache, mapping en provider met foutafhandeling.", "keywords_nl": ["weersvoorspelling", "locatie", "cache", "mapping", "provider", "foutafhandeling", "forecast", "get"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-01-01T00:00:00", "file_synopsis_hash": "FILE_SYNOPSIS_HASH_PLACEHOLDER", "chunk_text_hash": "CHUNK_TEXT_HASH_PLACEHOLDER", "input_lang": "nl", "skipped_reason": null}}
{"id": "internal/foreca/service.go#3", "repo_id": "test-repo", "path": "internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 61, "end_line": 70, "text": "// getCacheKeyForLocation generates a cache key for a location.\nfunc (s *Service) getCacheKeyForLocation(location string) string {\n\treturn fmt.Sprintf(\"forecast:%s\", location)\n}", "n_tokens": 8, "primary_symbol": "getCacheKeyForLocation", "primary_kind": "method", "primary_span": [1, 1], "def_symbols": ["getCacheKeyForLocation"], "symbols": ["getCacheKeyForLocation", "Service", "fmt", "location"], "doc_head": "getCacheKeyForLocation generates a cache key for a location.", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*Service).getCacheKeyForLocation", "package": "foreca", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "getCacheKeyForLocation", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["fmt"], "symbols_referenced_strict": ["getCacheKeyForLocation", "Service", "fmt.Sprintf"], "header_context_minimal": "package foreca\nimport (\n    \"fmt\"\n)\n// receiver: s *Service", "neighbors": {"prev": "internal/foreca/service.go#2"}, "summary_nl": "Genereert cache-sleutel voor locatie met forecast: prefix.", "keywords_nl": ["cache", "sleutel", "locatie", "forecast", "prefix", "genereren", "fmt"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-01-01T00:00:00", "file_synopsis_hash": "FILE_SYNOPSIS_HASH_PLACEHOLDER", "chunk_text_hash": "CHUNK_TEXT_HASH_PLACEHOLDER", "input_lang": "nl", "skipped_reason": null}}
