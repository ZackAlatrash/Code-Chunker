{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/main.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package main\n\nimport \"go.impalastudios.com/aviation/schedules/cmd\"\n\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "n_tokens": 41, "primary_symbol": "main", "primary_kind": "function", "primary_span": [5, 10], "def_symbols": ["main"], "symbols": ["main", "package", "import", "impalastudios", "com", "aviation", "schedules", "cmd", "func", "err", "RunRootCmd", "nil", "panic"], "doc_head": "package main\nimport \"go.impalastudios.com/aviation/schedules/cmd\"\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package cmd\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"os\"\n\t\"os/signal\"\n\t\"slices\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/service/sqs\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xaws\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 150, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 22], "def_symbols": [], "symbols": ["package", "cmd", "import", "context", "encoding", "json", "signal", "slices", "time", "github", "com", "aws", "sdk", "service", "sqs", "pkg", "errors", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "internal", "pgsql", "ssimdb", "ssim", "xaws", "log", "uber", "org", "zap"], "doc_head": "package cmd\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"os\"\n\t\"os/signal\"\n\t\"slices\"\n\t\"time\"\n\t\"github.com/aws/aws-sdk-go-v2/service/sqs\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xaws\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 54, "text": "func newConsumeCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"consume\",\n\t\tShort: \"Consume SQS queue messages\",\n\t\tLong:  \"Consume SQS queue messages for the flight status updates\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runConsumeCmd,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().StringP(\"queue-url\", \"q\", \"\", \"Queue url\")\n\n\tcmd.PersistentFlags().StringP(\"aws.access-key-id\", \"i\", \"\", \"AWS access key ID\")\n\tcmd.PersistentFlags().StringP(\"aws.secret-access-key\", \"s\", \"\", \"AWS secret access key\")\n\tcmd.PersistentFlags().StringP(\"aws.session-token\", \"t\", \"\", \"AWS session token\")\n\tcmd.PersistentFlags().StringP(\"aws.region\", \"r\", \"us-east-1\", \"AWS region\")\n\tcmd.PersistentFlags().StringP(\"aws.endpoint-url\", \"e\", \"\", \"AWS endpoint URL\")\n\tcmd.PersistentFlags().Bool(\"aws.host-name-immutable\", false, \"AWS host name immutable\")\n\n\tcmd.MarkFlagsRequiredTogether(\"aws.access-key-id\", \"aws.secret-access-key\", \"aws.session-token\", \"aws.region\", \"aws.endpoint-url\")\n\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5433, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\n\treturn cmd\n}\n", "n_tokens": 385, "primary_symbol": "newConsumeCommand", "primary_kind": "function", "primary_span": [23, 54], "def_symbols": ["newConsumeCommand"], "symbols": ["newConsumeCommand", "func", "cobra", "Command", "cmd", "Use", "consume", "Short", "Consume", "SQS", "queue", "messages", "Long", "for", "the", "flight", "status", "updates", "PreRunE", "args", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runConsumeCmd", "Args", "ExactArgs", "PersistentFlags", "StringP", "url", "Queue", "aws", "access", "key", "AWS", "secret", "session", "token", "region", "east", "endpoint", "URL", "Bool", "host", "name", "immutable", "false", "MarkFlagsRequiredTogether", "localhost", "database", "IntP", "port", "dbname", "schedules", "user", "postgres", "String", "password", "toor"], "doc_head": "func newConsumeCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"consume\",\n\t\tShort: \"Consume SQS queue messages\",\n\t\tLong:  \"Consume SQS queue messages for the flight status updates\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runConsumeCmd,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().StringP(\"queue-url\", \"q\", \"\", \"Queue url\")\n\tcmd.PersistentFlags().StringP(\"aws.access-key-id\", \"i\", \"\", \"AWS access key ID\")\n\tcmd.PersistentFlags().StringP(\"aws.secret-access-key\", \"s\", \"\", \"AWS secret access key\")\n\tcmd.PersistentFlags().StringP(\"aws.session-token\", \"t\", \"\", \"AWS session token\")\n\tcmd.PersistentFlags().StringP(\"aws.region\", \"r\", \"us-east-1\", \"AWS region\")\n\tcmd.PersistentFlags().StringP(\"aws.endpoint-url\", \"e\", \"\", \"AWS endpoint URL\")\n\tcmd.PersistentFlags().Bool(\"aws.host-name-immutable\", false, \"AWS host name immutable\")\n\tcmd.MarkFlagsRequiredTogether(\"aws.access-key-id\", \"aws.secret-access-key\", \"aws.session-token\", \"aws.region\", \"aws.endpoint-url\")\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5433, \"database port\")\n\tcmd.P"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 55, "end_line": 86, "text": "type consumeConfig struct {\n\tQueueURL string `mapstructure:\"queue-url\"`\n\tAWS      xaws.Config\n\tDB       pgsql.Config\n}\n\nfunc runConsumeCmd(cmd *cobra.Command, _ []string) error {\n\tvar cfg consumeConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- consume(ctx, &cfg)\n\t}()\n\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n", "n_tokens": 156, "primary_symbol": "runConsumeCmd", "primary_kind": "function", "primary_span": [61, 86], "def_symbols": ["runConsumeCmd"], "symbols": ["runConsumeCmd", "type", "consumeConfig", "struct", "QueueURL", "string", "mapstructure", "queue", "url", "AWS", "xaws", "Config", "pgsql", "func", "cmd", "cobra", "Command", "error", "var", "cfg", "err", "viper", "Unmarshal", "nil", "return", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "ctx", "cancel", "context", "WithCancel", "Context", "defer", "errChan", "consume", "select", "case", "errors", "New", "canceled"], "doc_head": "type consumeConfig struct {\n\tQueueURL string `mapstructure:\"queue-url\"`\n\tAWS      xaws.Config\n\tDB       pgsql.Config\n}\nfunc runConsumeCmd(cmd *cobra.Command, _ []string) error {\n\tvar cfg consumeConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- consume(ctx, &cfg)\n\t}()\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 87, "end_line": 211, "text": "func consume(ctx context.Context, cfg *consumeConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\n\tif err := pgsql.MigrateUp(&cfg.DB); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\n\tdb, err := pgsql.Connect(ctx, &cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\n\tawsCfg, err := xaws.GetConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tqueue := sqs.NewFromConfig(awsCfg)\n\n\tlog.Debug(ctx, \"Starting to consume messages\", zap.String(\"queue_url\", cfg.QueueURL))\n\n\tfor {\n\t\tout, err := queue.ReceiveMessage(ctx, &sqs.ReceiveMessageInput{\n\t\t\tQueueUrl:            &cfg.QueueURL,\n\t\t\tMaxNumberOfMessages: 10,\n\t\t\tVisibilityTimeout:   60,\n\t\t\tWaitTimeSeconds:     20,\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to receive messages\", zap.Error(err))\n\t\t\tcontinue\n\t\t}\n\n\t\tif len(out.Messages) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tlog.Debug(ctx, \"Received messages, starting to process\", zap.Int(\"messages\", len(out.Messages)))\n\n\t\tfor _, msg := range out.Messages {\n\t\t\tif msg.Body == nil {\n\t\t\t\tlog.Error(ctx, \"Message body is nil\", zap.Any(\"msg\", msg))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tvar body flightStatusUpdateEventMsgBody\n\t\t\tif err := json.Unmarshal([]byte(*msg.Body), &body); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to unmarshal message body\", zap.Error(err))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tevent := body.Detail\n\t\t\tdepartureInfo := mergeDepartureInformation(event.Status.Old.Departure, event.Status.New.Departure)\n\t\t\tarrivalInfo := mergeArrivalInformation(event.Status.Old.Arrival, event.Status.New.Arrival)\n\n\t\t\tvar (\n\t\t\t\tdepartureStatus     *string\n\t\t\t\tarrivalStatus       *string\n\t\t\t\tflightStatus        *string\n\t\t\t\texpectedDepartureAt *time.Time\n\t\t\t\tactualDepartureAt   *time.Time\n\t\t\t\texpectedArrivalAt   *time.Time\n\t\t\t\tactualArrivalAt     *time.Time\n\t\t\t)\n\n\t\t\tif slices.Contains(schedules.FlightOperationalStatusValues(), event.Status.New.StatusCode) {\n\t\t\t\tflightStatus = &event.Status.New.StatusCode\n\t\t\t}\n\n\t\t\tif slices.Contains(schedules.FlightTimingStatusValues(), departureInfo.Delay.Status) {\n\t\t\t\tdepartureStatus = &departureInfo.Delay.Status\n\t\t\t}\n\n\t\t\tif slices.Contains(schedules.FlightTimingStatusValues(), arrivalInfo.Delay.Status) {\n\t\t\t\tarrivalStatus = &arrivalInfo.Delay.Status\n\t\t\t}\n\n\t\t\tlog.Debug(ctx, \"Consuming update.\", zap.Any(\"update\", event))\n\n\t\t\texpectedDepartureAt = getBestDepartureAt(departureInfo.Expected)\n\t\t\tactualDepartureAt = getBestDepartureAt(departureInfo.Actual)\n\n\t\t\texpectedArrivalAt = getBestArrivalAt(arrivalInfo.Expected)\n\t\t\tactualArrivalAt = getBestArrivalAt(arrivalInfo.Actual)\n\n\t\t\tupd := &ssimdb.FlightStatusUpdate{\n\t\t\t\tExpectedDepartureAt:   expectedDepartureAt,\n\t\t\t\tActualDepartureAt:     actualDepartureAt,\n\t\t\t\tExpectedArrivalAt:     expectedArrivalAt,\n\t\t\t\tActualArrivalAt:       actualArrivalAt,\n\t\t\t\tFlightStatus:          flightStatus,\n\t\t\t\tDepartureFlightStatus: departureStatus,\n\t\t\t\tArrivalFlightStatus:   arrivalStatus,\n\t\t\t}\n\n\t\t\tlog.Debug(ctx, \"Updating expected and actual times\",\n\t\t\t\tzap.String(\"flight_id\", event.FlightID),\n\t\t\t\tzap.Int(\"transaction_id\", event.Status.New.TransactionId),\n\t\t\t\tzap.Any(\"update\", upd),\n\t\t\t)\n\n\t\t\tif event.FlightID == \"\" {\n\t\t\t\tlog.Warn(ctx, \"Flight ID is empty\", zap.Any(\"event\", event))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif err := ssimdb.UpdateFlightStatus(ctx, db, event.FlightID, upd); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to update expected and actual times\", zap.Error(err))\n\t\t\t}\n\n\t\t\tif _, err := queue.DeleteMessage(ctx, &sqs.DeleteMessageInput{\n\t\t\t\tQueueUrl:      &cfg.QueueURL,\n\t\t\t\tReceiptHandle: msg.ReceiptHandle,\n\t\t\t}); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to delete message from queue\", zap.Error(err))\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 1017, "primary_symbol": "consume", "primary_kind": "function", "primary_span": [87, 211], "def_symbols": ["consume"], "symbols": ["consume", "func", "ctx", "context", "Context", "cfg", "consumeConfig", "error", "log", "SetLogger", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "err", "pgsql", "MigrateUp", "nil", "return", "errors", "Wrap", "failed", "migrate", "Connect", "connect", "database", "awsCfg", "xaws", "GetConfig", "AWS", "Error", "Failed", "load", "config", "zap", "queue", "sqs", "NewFromConfig", "Debug", "Starting", "messages", "String", "queue_url", "QueueURL", "for", "out", "ReceiveMessage", "ReceiveMessageInput", "QueueUrl", "MaxNumberOfMessages", "VisibilityTimeout", "WaitTimeSeconds", "receive", "continue", "len", "Messages", "Received", "starting", "process", "Int", "msg", "range", "Body", "Message", "body", "Any", "var", "flightStatusUpdateEventMsgBody", "json", "Unmarshal", "byte", "unmarshal", "message", "event", "Detail", "departureInfo", "mergeDepartureInformation", "Status", "Old", "Departure", "arrivalInfo", "mergeArrivalInformation", "Arrival", "departureStatus", "string", "arrivalStatus", "flightStatus", "expectedDepartureAt", "time", "Time", "actualDepartureAt", "expectedArrivalAt", "actualArrivalAt", "slices", "Contains", "schedules", "FlightOperationalStatusValues", "StatusCode", "FlightTimingStatusValues", "Delay", "Consuming", "update", "getBestDepartureAt", "Expected", "Actual", "getBestArrivalAt", "upd", "ssimdb", "FlightStatusUpdate", "ExpectedDepartureAt", "ActualDepartureAt", "ExpectedArrivalAt", "ActualArrivalAt", "FlightStatus", "DepartureFlightStatus", "ArrivalFlightStatus", "Updating", "expected", "and", "actual", "times", "flight_id", "FlightID", "transaction_id", "TransactionId", "Warn", "Flight", "empty", "UpdateFlightStatus", "DeleteMessage", "DeleteMessageInput", "ReceiptHandle", "delete", "from"], "doc_head": "func consume(ctx context.Context, cfg *consumeConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\tif err := pgsql.MigrateUp(&cfg.DB); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\tdb, err := pgsql.Connect(ctx, &cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tawsCfg, err := xaws.GetConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tqueue := sqs.NewFromConfig(awsCfg)\n\tlog.Debug(ctx, \"Starting to consume messages\", zap.String(\"queue_url\", cfg.QueueURL))\n\tfor {\n\t\tout, err := queue.ReceiveMessage(ctx, &sqs.ReceiveMessageInput{\n\t\t\tQueueUrl:            &cfg.QueueURL,\n\t\t\tMaxNumberOfMessages: 10,\n\t\t\tVisibilityTimeout:   60,\n\t\t\tWaitTimeSeconds:     20,\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to receive messages\", zap.Error(err))\n\t\t\tcontinue\n\t\t}\n\t\tif len(out.Messages) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tlog.Debug(ctx, \"Received messages, starting to process\", zap.Int(\"messages\", len(out.Messages)))\n\t\tfor _, msg := range "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 212, "end_line": 233, "text": "func mergeDepartureDetails(o, n flightStatusDepartureDetails) flightStatusDepartureDetails {\n\tm := flightStatusDepartureDetails{\n\t\tTimestamp: o.Timestamp,\n\t\tOffBlock:  o.OffBlock,\n\t\tAirborne:  o.Airborne,\n\t}\n\n\tif n.Timestamp != nil {\n\t\tm.Timestamp = n.Timestamp\n\t}\n\n\tif n.OffBlock != nil {\n\t\tm.OffBlock = n.OffBlock\n\t}\n\n\tif n.Airborne != nil {\n\t\tm.Airborne = n.Airborne\n\t}\n\n\treturn m\n}\n", "n_tokens": 120, "primary_symbol": "mergeDepartureDetails", "primary_kind": "function", "primary_span": [212, 233], "def_symbols": ["mergeDepartureDetails"], "symbols": ["mergeDepartureDetails", "func", "flightStatusDepartureDetails", "Timestamp", "OffBlock", "Airborne", "nil", "return"], "doc_head": "func mergeDepartureDetails(o, n flightStatusDepartureDetails) flightStatusDepartureDetails {\n\tm := flightStatusDepartureDetails{\n\t\tTimestamp: o.Timestamp,\n\t\tOffBlock:  o.OffBlock,\n\t\tAirborne:  o.Airborne,\n\t}\n\tif n.Timestamp != nil {\n\t\tm.Timestamp = n.Timestamp\n\t}\n\tif n.OffBlock != nil {\n\t\tm.OffBlock = n.OffBlock\n\t}\n\tif n.Airborne != nil {\n\t\tm.Airborne = n.Airborne\n\t}\n\treturn m\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 234, "end_line": 275, "text": "func mergeArrivalDetails(o, n flightStatusArrivalDetails) flightStatusArrivalDetails {\n\tm := flightStatusArrivalDetails{\n\t\tTimestamp: o.Timestamp,\n\t\tTouchdown: o.Touchdown,\n\t\tOnBlock:   o.OnBlock,\n\t}\n\n\tif n.Timestamp != nil {\n\t\tm.Timestamp = n.Timestamp\n\t}\n\n\tif n.Touchdown != nil {\n\t\tm.Touchdown = n.Touchdown\n\t}\n\n\tif n.OnBlock != nil {\n\t\tm.OnBlock = n.OnBlock\n\t}\n\n\treturn m\n}\n\nfunc mergeDelay(o, n flightStatusUpdateDelay) flightStatusUpdateDelay {\n\tm := flightStatusUpdateDelay{\n\t\tDetail:   o.Detail,\n\t\tCategory: o.Category,\n\t\tStatus:   o.Status,\n\t}\n\n\tif n.Detail != \"\" {\n\t\tm.Detail = n.Detail\n\t}\n\tif n.Category != \"\" {\n\t\tm.Category = n.Category\n\t}\n\tif n.Status != \"\" {\n\t\tm.Status = n.Status\n\t}\n\n\treturn m\n}\n", "n_tokens": 206, "primary_symbol": "mergeArrivalDetails", "primary_kind": "function", "primary_span": [234, 275], "def_symbols": ["mergeArrivalDetails", "mergeDelay"], "symbols": ["mergeArrivalDetails", "mergeDelay", "func", "flightStatusArrivalDetails", "Timestamp", "Touchdown", "OnBlock", "nil", "return", "flightStatusUpdateDelay", "Detail", "Category", "Status"], "doc_head": "func mergeArrivalDetails(o, n flightStatusArrivalDetails) flightStatusArrivalDetails {\n\tm := flightStatusArrivalDetails{\n\t\tTimestamp: o.Timestamp,\n\t\tTouchdown: o.Touchdown,\n\t\tOnBlock:   o.OnBlock,\n\t}\n\tif n.Timestamp != nil {\n\t\tm.Timestamp = n.Timestamp\n\t}\n\tif n.Touchdown != nil {\n\t\tm.Touchdown = n.Touchdown\n\t}\n\tif n.OnBlock != nil {\n\t\tm.OnBlock = n.OnBlock\n\t}\n\treturn m\n}\nfunc mergeDelay(o, n flightStatusUpdateDelay) flightStatusUpdateDelay {\n\tm := flightStatusUpdateDelay{\n\t\tDetail:   o.Detail,\n\t\tCategory: o.Category,\n\t\tStatus:   o.Status,\n\t}\n\tif n.Detail != \"\" {\n\t\tm.Detail = n.Detail\n\t}\n\tif n.Category != \"\" {\n\t\tm.Category = n.Category\n\t}\n\tif n.Status != \"\" {\n\t\tm.Status = n.Status\n\t}\n\treturn m\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 276, "end_line": 297, "text": "func mergeDepartureInformation(o, n flightStatusDepartureInformation) flightStatusDepartureInformation {\n\tm := flightStatusDepartureInformation{\n\t\tScheduled: mergeDepartureDetails(o.Scheduled, n.Scheduled),\n\t\tExpected:  mergeDepartureDetails(o.Expected, n.Expected),\n\t\tActual:    mergeDepartureDetails(o.Actual, n.Actual),\n\t\tDelay:     mergeDelay(o.Delay, n.Delay),\n\t}\n\n\treturn m\n}\n\nfunc mergeArrivalInformation(o, n flightStatusArrivalInformation) flightStatusArrivalInformation {\n\tm := flightStatusArrivalInformation{\n\t\tScheduled: mergeArrivalDetails(o.Scheduled, n.Scheduled),\n\t\tExpected:  mergeArrivalDetails(o.Expected, n.Expected),\n\t\tActual:    mergeArrivalDetails(o.Actual, n.Actual),\n\t\tDelay:     mergeDelay(o.Delay, n.Delay),\n\t}\n\n\treturn m\n}\n", "n_tokens": 194, "primary_symbol": "mergeDepartureInformation", "primary_kind": "function", "primary_span": [276, 297], "def_symbols": ["mergeDepartureInformation", "mergeArrivalInformation"], "symbols": ["mergeDepartureInformation", "mergeArrivalInformation", "func", "flightStatusDepartureInformation", "Scheduled", "mergeDepartureDetails", "Expected", "Actual", "Delay", "mergeDelay", "return", "flightStatusArrivalInformation", "mergeArrivalDetails"], "doc_head": "func mergeDepartureInformation(o, n flightStatusDepartureInformation) flightStatusDepartureInformation {\n\tm := flightStatusDepartureInformation{\n\t\tScheduled: mergeDepartureDetails(o.Scheduled, n.Scheduled),\n\t\tExpected:  mergeDepartureDetails(o.Expected, n.Expected),\n\t\tActual:    mergeDepartureDetails(o.Actual, n.Actual),\n\t\tDelay:     mergeDelay(o.Delay, n.Delay),\n\t}\n\treturn m\n}\nfunc mergeArrivalInformation(o, n flightStatusArrivalInformation) flightStatusArrivalInformation {\n\tm := flightStatusArrivalInformation{\n\t\tScheduled: mergeArrivalDetails(o.Scheduled, n.Scheduled),\n\t\tExpected:  mergeArrivalDetails(o.Expected, n.Expected),\n\t\tActual:    mergeArrivalDetails(o.Actual, n.Actual),\n\t\tDelay:     mergeDelay(o.Delay, n.Delay),\n\t}\n\treturn m\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 298, "end_line": 334, "text": "func getBestDepartureAt(dept flightStatusDepartureDetails) *time.Time {\n\tvar t *time.Time\n\n\tif dept.Airborne != nil && !dept.Airborne.IsZero() {\n\t\tt = dept.Airborne\n\t}\n\n\tif dept.OffBlock != nil && !dept.OffBlock.IsZero() {\n\t\tt = dept.OffBlock\n\t}\n\n\tif dept.Timestamp != nil && !dept.Timestamp.IsZero() {\n\t\tt = dept.Timestamp\n\t}\n\n\treturn t\n}\n\nfunc getBestArrivalAt(arr flightStatusArrivalDetails) *time.Time {\n\tvar t *time.Time\n\n\tif arr.Touchdown != nil && !arr.Touchdown.IsZero() {\n\t\tt = arr.Touchdown\n\t}\n\n\tif arr.OnBlock != nil && !arr.OnBlock.IsZero() {\n\t\tt = arr.OnBlock\n\t}\n\n\tif arr.Timestamp != nil && !arr.Timestamp.IsZero() {\n\t\tt = arr.Timestamp\n\t}\n\n\treturn t\n}\n\ntype (", "n_tokens": 201, "primary_symbol": "getBestDepartureAt", "primary_kind": "function", "primary_span": [298, 334], "def_symbols": ["getBestDepartureAt", "getBestArrivalAt"], "symbols": ["getBestDepartureAt", "getBestArrivalAt", "func", "dept", "flightStatusDepartureDetails", "time", "Time", "var", "Airborne", "nil", "IsZero", "OffBlock", "Timestamp", "return", "arr", "flightStatusArrivalDetails", "Touchdown", "OnBlock", "type"], "doc_head": "func getBestDepartureAt(dept flightStatusDepartureDetails) *time.Time {\n\tvar t *time.Time\n\tif dept.Airborne != nil && !dept.Airborne.IsZero() {\n\t\tt = dept.Airborne\n\t}\n\tif dept.OffBlock != nil && !dept.OffBlock.IsZero() {\n\t\tt = dept.OffBlock\n\t}\n\tif dept.Timestamp != nil && !dept.Timestamp.IsZero() {\n\t\tt = dept.Timestamp\n\t}\n\treturn t\n}\nfunc getBestArrivalAt(arr flightStatusArrivalDetails) *time.Time {\n\tvar t *time.Time\n\tif arr.Touchdown != nil && !arr.Touchdown.IsZero() {\n\t\tt = arr.Touchdown\n\t}\n\tif arr.OnBlock != nil && !arr.OnBlock.IsZero() {\n\t\tt = arr.OnBlock\n\t}\n\tif arr.Timestamp != nil && !arr.Timestamp.IsZero() {\n\t\tt = arr.Timestamp\n\t}\n\treturn t\n}\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 335, "end_line": 353, "text": "\tflightStatusUpdateEventMsgBody struct {\n\t\tDetail flightStatusUpdateEvent `json:\"detail\"`\n\t}\n\n\tflightStatusUpdateEvent struct {\n\t\tFlightID string `json:\"id\"`\n\t\tStatus   struct {\n\t\t\tOld flightStatus `json:\"old\"`\n\t\t\tNew flightStatus `json:\"new\"`\n\t\t} `json:\"status\"`\n\t}\n\n\tflightStatusDepartureInformation struct {\n\t\tScheduled flightStatusDepartureDetails `json:\"scheduled\"`\n\t\tExpected  flightStatusDepartureDetails `json:\"expected\"`\n\t\tActual    flightStatusDepartureDetails `json:\"actual\"`\n\t\tDelay     flightStatusUpdateDelay      `json:\"delay\"`\n\t}\n", "n_tokens": 140, "primary_symbol": "", "primary_kind": "", "primary_span": [335, 353], "def_symbols": [], "symbols": ["flightStatusUpdateEventMsgBody", "struct", "Detail", "flightStatusUpdateEvent", "json", "detail", "FlightID", "string", "Status", "Old", "flightStatus", "old", "New", "new", "status", "flightStatusDepartureInformation", "Scheduled", "flightStatusDepartureDetails", "scheduled", "Expected", "expected", "Actual", "actual", "Delay", "flightStatusUpdateDelay", "delay"], "doc_head": "\tflightStatusUpdateEventMsgBody struct {\n\t\tDetail flightStatusUpdateEvent `json:\"detail\"`\n\t}\n\tflightStatusUpdateEvent struct {\n\t\tFlightID string `json:\"id\"`\n\t\tStatus   struct {\n\t\t\tOld flightStatus `json:\"old\"`\n\t\t\tNew flightStatus `json:\"new\"`\n\t\t} `json:\"status\"`\n\t}\n\tflightStatusDepartureInformation struct {\n\t\tScheduled flightStatusDepartureDetails `json:\"scheduled\"`\n\t\tExpected  flightStatusDepartureDetails `json:\"expected\"`\n\t\tActual    flightStatusDepartureDetails `json:\"actual\"`\n\t\tDelay     flightStatusUpdateDelay      `json:\"delay\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 354, "end_line": 367, "text": "\tflightStatusArrivalInformation struct {\n\t\tScheduled flightStatusArrivalDetails `json:\"scheduled\"`\n\t\tExpected  flightStatusArrivalDetails `json:\"expected\"`\n\t\tActual    flightStatusArrivalDetails `json:\"actual\"`\n\t\tDelay     flightStatusUpdateDelay    `json:\"delay\"`\n\t}\n\n\tflightStatus struct {\n\t\tStatusCode    string                           `json:\"status_code\"`\n\t\tTransactionId int                              `json:\"transaction_id\"`\n\t\tDeparture     flightStatusDepartureInformation `json:\"departure\"`\n\t\tArrival       flightStatusArrivalInformation   `json:\"arrival\"`\n\t}\n", "n_tokens": 127, "primary_symbol": "", "primary_kind": "", "primary_span": [354, 367], "def_symbols": [], "symbols": ["flightStatusArrivalInformation", "struct", "Scheduled", "flightStatusArrivalDetails", "json", "scheduled", "Expected", "expected", "Actual", "actual", "Delay", "flightStatusUpdateDelay", "delay", "flightStatus", "StatusCode", "string", "status_code", "TransactionId", "int", "transaction_id", "Departure", "flightStatusDepartureInformation", "departure", "Arrival", "arrival"], "doc_head": "\tflightStatusArrivalInformation struct {\n\t\tScheduled flightStatusArrivalDetails `json:\"scheduled\"`\n\t\tExpected  flightStatusArrivalDetails `json:\"expected\"`\n\t\tActual    flightStatusArrivalDetails `json:\"actual\"`\n\t\tDelay     flightStatusUpdateDelay    `json:\"delay\"`\n\t}\n\tflightStatus struct {\n\t\tStatusCode    string                           `json:\"status_code\"`\n\t\tTransactionId int                              `json:\"transaction_id\"`\n\t\tDeparture     flightStatusDepartureInformation `json:\"departure\"`\n\t\tArrival       flightStatusArrivalInformation   `json:\"arrival\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/consume.go", "rel_path": "cmd/consume.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 368, "end_line": 389, "text": "\tflightStatusDepartureDetails struct {\n\t\tTimestamp *time.Time `json:\"timestamp\"`\n\t\tOffBlock  *time.Time `json:\"off_block\"`\n\t\tAirborne  *time.Time `json:\"airborne\"`\n\t\tGate      *string    `json:\"gate\"`\n\t\tCheckIn   *string    `json:\"check_in\"`\n\t}\n\n\tflightStatusArrivalDetails struct {\n\t\tTimestamp    *time.Time `json:\"timestamp\"`\n\t\tTouchdown    *time.Time `json:\"touchdown\"`\n\t\tOnBlock      *time.Time `json:\"on_block\"`\n\t\tBaggageClaim *string    `json:\"baggage_claim\"`\n\t}\n\n\tflightStatusUpdateDelay struct {\n\t\tDetail   string `json:\"detail\"`\n\t\tCategory string `json:\"category\"`\n\t\tStatus   string `json:\"status\"`\n\t}\n)\n", "n_tokens": 176, "primary_symbol": "", "primary_kind": "", "primary_span": [368, 389], "def_symbols": [], "symbols": ["flightStatusDepartureDetails", "struct", "Timestamp", "time", "Time", "json", "timestamp", "OffBlock", "off_block", "Airborne", "airborne", "Gate", "string", "gate", "CheckIn", "check_in", "flightStatusArrivalDetails", "Touchdown", "touchdown", "OnBlock", "on_block", "BaggageClaim", "baggage_claim", "flightStatusUpdateDelay", "Detail", "detail", "Category", "category", "Status", "status"], "doc_head": "\tflightStatusDepartureDetails struct {\n\t\tTimestamp *time.Time `json:\"timestamp\"`\n\t\tOffBlock  *time.Time `json:\"off_block\"`\n\t\tAirborne  *time.Time `json:\"airborne\"`\n\t\tGate      *string    `json:\"gate\"`\n\t\tCheckIn   *string    `json:\"check_in\"`\n\t}\n\tflightStatusArrivalDetails struct {\n\t\tTimestamp    *time.Time `json:\"timestamp\"`\n\t\tTouchdown    *time.Time `json:\"touchdown\"`\n\t\tOnBlock      *time.Time `json:\"on_block\"`\n\t\tBaggageClaim *string    `json:\"baggage_claim\"`\n\t}\n\tflightStatusUpdateDelay struct {\n\t\tDetail   string `json:\"detail\"`\n\t\tCategory string `json:\"category\"`\n\t\tStatus   string `json:\"status\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/root.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 11, "text": "package cmd\n\nimport (\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/cmd/serve\"\n\t\"go.impalastudios.com/aviation/schedules/cmd/ssim\"\n)\n", "n_tokens": 59, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 11], "def_symbols": [], "symbols": ["package", "cmd", "import", "strings", "github", "com", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "serve", "ssim"], "doc_head": "package cmd\nimport (\n\t\"strings\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/cmd/serve\"\n\t\"go.impalastudios.com/aviation/schedules/cmd/ssim\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/root.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 12, "end_line": 36, "text": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"schedules\",\n\t\tShort:   \"Access to flight schedules\",\n\t\tLong:    \"Access to flight schedules\",\n\t\tVersion: \"0.0.1\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\tcmd.AddCommand(ssim.New())\n\tcmd.AddCommand(newConsumeCommand())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"emits debug level logs\")\n\tcmd.PersistentFlags().String(\"app.name\", \"[Aviation] Schedules\", \"The name of the application.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"log format (json, console)\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}\n", "n_tokens": 188, "primary_symbol": "RunRootCmd", "primary_kind": "function", "primary_span": [13, 36], "def_symbols": ["RunRootCmd"], "symbols": ["RunRootCmd", "entrypoint", "the", "root", "command", "func", "error", "viper", "AutomaticEnv", "SetEnvKeyReplacer", "strings", "NewReplacer", "cmd", "cobra", "Command", "Use", "schedules", "Short", "Access", "flight", "Long", "Version", "AddCommand", "serve", "New", "ssim", "newConsumeCommand", "PersistentFlags", "Bool", "logging", "debug", "false", "emits", "level", "logs", "String", "app", "name", "Aviation", "Schedules", "The", "application", "encoding", "json", "log", "format", "console", "BindPFlags", "return", "Execute"], "doc_head": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\tcmd := &cobra.Command{\n\t\tUse:     \"schedules\",\n\t\tShort:   \"Access to flight schedules\",\n\t\tLong:    \"Access to flight schedules\",\n\t\tVersion: \"0.0.1\",\n\t}\n\tcmd.AddCommand(serve.New())\n\tcmd.AddCommand(ssim.New())\n\tcmd.AddCommand(newConsumeCommand())\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"emits debug level logs\")\n\tcmd.PersistentFlags().String(\"app.name\", \"[Aviation] Schedules\", \"The name of the application.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"log format (json, console)\")\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\treturn cmd.Execute()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go", "rel_path": "cmd/ssim/ingest.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package ssim\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n)\n", "n_tokens": 107, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 16], "def_symbols": [], "symbols": ["package", "ssim", "import", "context", "signal", "github", "com", "cockroachdb", "errors", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "pkg", "pgsql", "ssimdb", "parser", "log"], "doc_head": "package ssim\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go", "rel_path": "cmd/ssim/ingest.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 17, "end_line": 39, "text": "func NewIngest() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"ingest\",\n\t\tShort: \"Ingest SSIM data\",\n\t\tLong:  \"Ingest parsed carrier trailer blocks\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runIngest,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().StringP(\"link\", \"l\", \"carrier_trailers\", \"Folder that contains the carrier trailer blocks\")\n\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5433, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\n\treturn cmd\n}\n", "n_tokens": 229, "primary_symbol": "NewIngest", "primary_kind": "function", "primary_span": [17, 39], "def_symbols": ["NewIngest"], "symbols": ["NewIngest", "func", "cobra", "Command", "cmd", "Use", "ingest", "Short", "Ingest", "SSIM", "data", "Long", "parsed", "carrier", "trailer", "blocks", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runIngest", "Args", "ExactArgs", "PersistentFlags", "StringP", "link", "carrier_trailers", "Folder", "that", "contains", "the", "host", "localhost", "database", "IntP", "port", "dbname", "schedules", "name", "user", "postgres", "String", "password", "toor"], "doc_head": "func NewIngest() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"ingest\",\n\t\tShort: \"Ingest SSIM data\",\n\t\tLong:  \"Ingest parsed carrier trailer blocks\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runIngest,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().StringP(\"link\", \"l\", \"carrier_trailers\", \"Folder that contains the carrier trailer blocks\")\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5433, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go", "rel_path": "cmd/ssim/ingest.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 40, "end_line": 70, "text": "type ingestConfig struct {\n\tLink string\n\tDB   *pgsql.Config\n}\n\nfunc runIngest(cmd *cobra.Command, _ []string) error {\n\tvar cfg ingestConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- ingest(ctx, &cfg)\n\t}()\n\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n", "n_tokens": 141, "primary_symbol": "runIngest", "primary_kind": "function", "primary_span": [45, 70], "def_symbols": ["runIngest"], "symbols": ["runIngest", "type", "ingestConfig", "struct", "Link", "string", "pgsql", "Config", "func", "cmd", "cobra", "Command", "error", "var", "cfg", "err", "viper", "Unmarshal", "nil", "return", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "ctx", "cancel", "context", "WithCancel", "Context", "defer", "errChan", "ingest", "select", "case", "errors", "New", "canceled"], "doc_head": "type ingestConfig struct {\n\tLink string\n\tDB   *pgsql.Config\n}\nfunc runIngest(cmd *cobra.Command, _ []string) error {\n\tvar cfg ingestConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- ingest(ctx, &cfg)\n\t}()\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/ingest.go", "rel_path": "cmd/ssim/ingest.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 71, "end_line": 105, "text": "func ingest(ctx context.Context, cfg *ingestConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\n\tdirs, err := os.ReadDir(cfg.Link)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read directory\")\n\t}\n\n\tlinks := make([]*parser.CarrierTrailerBlockLink, 0)\n\tfor _, dir := range dirs {\n\t\tif dir.IsDir() {\n\t\t\tcontinue\n\t\t}\n\n\t\tlinks = append(links, &parser.CarrierTrailerBlockLink{\n\t\t\tFilepath:    cfg.Link + \"/\" + dir.Name(),\n\t\t\tPeriodBegin: dir.Name()[3:],\n\t\t})\n\t}\n\n\tingester := ssimdb.NewIngester(db, cfg.DB)\n\treturn errors.Wrap(ingester.Ingest(ctx, links), \"failed to ingest\")\n}\n", "n_tokens": 237, "primary_symbol": "ingest", "primary_kind": "function", "primary_span": [71, 105], "def_symbols": ["ingest"], "symbols": ["ingest", "func", "ctx", "context", "Context", "cfg", "ingestConfig", "error", "log", "SetLogger", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "err", "pgsql", "Connect", "nil", "return", "errors", "Wrap", "failed", "connect", "database", "dirs", "ReadDir", "Link", "read", "directory", "links", "make", "parser", "CarrierTrailerBlockLink", "for", "dir", "range", "IsDir", "continue", "append", "Filepath", "Name", "PeriodBegin", "ingester", "ssimdb", "NewIngester", "Ingest"], "doc_head": "func ingest(ctx context.Context, cfg *ingestConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdirs, err := os.ReadDir(cfg.Link)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read directory\")\n\t}\n\tlinks := make([]*parser.CarrierTrailerBlockLink, 0)\n\tfor _, dir := range dirs {\n\t\tif dir.IsDir() {\n\t\t\tcontinue\n\t\t}\n\t\tlinks = append(links, &parser.CarrierTrailerBlockLink{\n\t\t\tFilepath:    cfg.Link + \"/\" + dir.Name(),\n\t\t\tPeriodBegin: dir.Name()[3:],\n\t\t})\n\t}\n\tingester := ssimdb.NewIngester(db, cfg.DB)\n\treturn errors.Wrap(ingester.Ingest(ctx, links), \"failed to ingest\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package ssim\n", "n_tokens": 4, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "ssim"], "doc_head": "package ssim"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 29, "text": "import (\n\t\"archive/zip\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/diff\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/writer\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xaws\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"math/rand\"\n)\n", "n_tokens": 226, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 29], "def_symbols": [], "symbols": ["import", "archive", "zip", "context", "encoding", "json", "fmt", "signal", "strings", "github", "com", "aws", "sdk", "service", "cockroachdb", "errors", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "pkg", "concurrent", "pgsql", "ssimdb", "ssim", "diff", "parser", "writer", "xaws", "log", "uber", "org", "zap", "math", "rand"], "doc_head": "import (\n\t\"archive/zip\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/diff\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/writer\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xaws\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"math/rand\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 30, "end_line": 63, "text": "func NewImport() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"import\",\n\t\tShort: \"Import SSIM data\",\n\t\tLong:  \"Parse SSIM data, find the diff with the previous state and ingest the diff\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runImport,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().StringP(\"bucket\", \"b\", \"\", \"S3 bucket\")\n\tcmd.PersistentFlags().StringP(\"key\", \"k\", \"\", \"S3 key\")\n\n\tcmd.PersistentFlags().StringP(\"aws.access-key-id\", \"i\", \"\", \"AWS access key ID\")\n\tcmd.PersistentFlags().StringP(\"aws.secret-access-key\", \"s\", \"\", \"AWS secret access key\")\n\tcmd.PersistentFlags().StringP(\"aws.session-token\", \"t\", \"\", \"AWS session token\")\n\tcmd.PersistentFlags().StringP(\"aws.region\", \"r\", \"us-east-1\", \"AWS region\")\n\tcmd.PersistentFlags().StringP(\"aws.endpoint-url\", \"e\", \"\", \"AWS endpoint URL\")\n\tcmd.PersistentFlags().Bool(\"aws.host-name-immutable\", false, \"AWS host name immutable\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"AWS S3 use path style\")\n\n\tcmd.MarkFlagsRequiredTogether(\"aws.access-key-id\", \"aws.secret-access-key\", \"aws.session-token\", \"aws.region\", \"aws.endpoint-url\")\n\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5432, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\n\treturn cmd\n}\n", "n_tokens": 425, "primary_symbol": "NewImport", "primary_kind": "function", "primary_span": [30, 63], "def_symbols": ["NewImport"], "symbols": ["NewImport", "func", "cobra", "Command", "cmd", "Use", "import", "Short", "Import", "SSIM", "data", "Long", "Parse", "find", "the", "diff", "with", "previous", "state", "and", "ingest", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runImport", "Args", "ExactArgs", "PersistentFlags", "StringP", "bucket", "key", "aws", "access", "AWS", "secret", "session", "token", "region", "east", "endpoint", "url", "URL", "Bool", "host", "name", "immutable", "false", "use", "path", "style", "MarkFlagsRequiredTogether", "localhost", "database", "IntP", "port", "dbname", "schedules", "user", "postgres", "String", "password", "toor"], "doc_head": "func NewImport() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"import\",\n\t\tShort: \"Import SSIM data\",\n\t\tLong:  \"Parse SSIM data, find the diff with the previous state and ingest the diff\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runImport,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().StringP(\"bucket\", \"b\", \"\", \"S3 bucket\")\n\tcmd.PersistentFlags().StringP(\"key\", \"k\", \"\", \"S3 key\")\n\tcmd.PersistentFlags().StringP(\"aws.access-key-id\", \"i\", \"\", \"AWS access key ID\")\n\tcmd.PersistentFlags().StringP(\"aws.secret-access-key\", \"s\", \"\", \"AWS secret access key\")\n\tcmd.PersistentFlags().StringP(\"aws.session-token\", \"t\", \"\", \"AWS session token\")\n\tcmd.PersistentFlags().StringP(\"aws.region\", \"r\", \"us-east-1\", \"AWS region\")\n\tcmd.PersistentFlags().StringP(\"aws.endpoint-url\", \"e\", \"\", \"AWS endpoint URL\")\n\tcmd.PersistentFlags().Bool(\"aws.host-name-immutable\", false, \"AWS host name immutable\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"AWS S3 use path style\")\n\tcmd.MarkFlagsRequiredTogether(\"aws.access-key-id\", \"aws.secret-access-key\", \"aws.session-token\", \"aws.region\", \"aws.endpoint-url\")\n\tcmd.PersistentFlag"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 64, "end_line": 96, "text": "type importConfig struct {\n\tBucket string        `mapstructure:\"bucket\"`\n\tKey    string        `mapstructure:\"key\"`\n\tAWS    xaws.Config   `mapstructure:\"aws\"`\n\tDB     *pgsql.Config `mapstructure:\"db\"`\n}\n\nfunc runImport(cmd *cobra.Command, _ []string) error {\n\tvar cfg importConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- importssim(ctx, &cfg)\n\t}()\n\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n", "n_tokens": 176, "primary_symbol": "runImport", "primary_kind": "function", "primary_span": [71, 96], "def_symbols": ["runImport"], "symbols": ["runImport", "type", "importConfig", "struct", "Bucket", "string", "mapstructure", "bucket", "Key", "key", "AWS", "xaws", "Config", "aws", "pgsql", "func", "cmd", "cobra", "Command", "error", "var", "cfg", "err", "viper", "Unmarshal", "nil", "return", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "ctx", "cancel", "context", "WithCancel", "Context", "defer", "errChan", "importssim", "select", "case", "errors", "New", "canceled"], "doc_head": "type importConfig struct {\n\tBucket string        `mapstructure:\"bucket\"`\n\tKey    string        `mapstructure:\"key\"`\n\tAWS    xaws.Config   `mapstructure:\"aws\"`\n\tDB     *pgsql.Config `mapstructure:\"db\"`\n}\nfunc runImport(cmd *cobra.Command, _ []string) error {\n\tvar cfg importConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- importssim(ctx, &cfg)\n\t}()\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 97, "end_line": 146, "text": "func importssim(ctx context.Context, cfg *importConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\n\tif err := pgsql.MigrateUp(cfg.DB); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\n\tlog.Debug(ctx, \"SSIM data processing started\", zap.Any(\"config\", cfg))\n\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdefer db.Close()\n\n\tawsCfg, err := xaws.GetConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tairlinesMapper, err := ssimdb.LoadOagAirlinesMapper(ctx, db)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to fill airlines mapper\")\n\t}\n\n\tstorage := s3.NewFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\tlink, err := parseSsimZipFromS3(ctx, cfg, storage, airlinesMapper)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlog.Debug(ctx, \"Starting export statefiles\")\n\n\tif err := exportStatefiles(ctx, cfg, link); err != nil {\n\t\treturn err\n\t}\n\n\tingester := ssimdb.NewIngester(db, cfg.DB)\n\n\treturn ingestStateDiff(ctx, db, ingester, link)\n}\n", "n_tokens": 352, "primary_symbol": "importssim", "primary_kind": "function", "primary_span": [97, 146], "def_symbols": ["importssim"], "symbols": ["importssim", "func", "ctx", "context", "Context", "cfg", "importConfig", "error", "log", "SetLogger", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "err", "pgsql", "MigrateUp", "nil", "return", "errors", "Wrap", "failed", "migrate", "Debug", "SSIM", "data", "processing", "started", "zap", "Any", "config", "Connect", "connect", "database", "defer", "Close", "awsCfg", "xaws", "GetConfig", "AWS", "Error", "Failed", "load", "airlinesMapper", "ssimdb", "LoadOagAirlinesMapper", "fill", "airlines", "mapper", "storage", "NewFromConfig", "Options", "UsePathStyle", "link", "parseSsimZipFromS3", "Starting", "export", "statefiles", "exportStatefiles", "ingester", "NewIngester", "ingestStateDiff"], "doc_head": "func importssim(ctx context.Context, cfg *importConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\tif err := pgsql.MigrateUp(cfg.DB); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\tlog.Debug(ctx, \"SSIM data processing started\", zap.Any(\"config\", cfg))\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdefer db.Close()\n\tawsCfg, err := xaws.GetConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tairlinesMapper, err := ssimdb.LoadOagAirlinesMapper(ctx, db)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to fill airlines mapper\")\n\t}\n\tstorage := s3.NewFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\tlink, err := parseSsimZipFromS3(ctx, cfg, storage, airlinesMapper)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Debug(ctx, \"Starting export statefiles\")\n\tif err := exportStatefiles(ctx, cfg, link); err != nil {\n\t\treturn err\n\t}\n\tingester := ssimdb.NewIngeste"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 147, "end_line": 244, "text": "func ingestStateDiff(\n\tctx context.Context,\n\tdb *pgsql.DB,\n\ti *ssimdb.Ingester,\n\tlink *parser.SSIM,\n) error {\n\tw := writer.NewBlockWriter(writer.DefaultDir)\n\n\tlog.Debug(ctx, \"SSIM started partial ingestion\", zap.Int(\"link\", len(link.Links)))\n\n\tvar (\n\t\ttotalIngestedFlights    = concurrent.NewAtomicInt64(0)\n\t\ttotalRemovedFlights     = concurrent.NewAtomicInt64(0)\n\t\ttotalIngestedCF         = concurrent.NewAtomicInt64(0)\n\t\ttotalRemovedCF          = concurrent.NewAtomicInt64(0)\n\t\ttotalSameFlights        = concurrent.NewAtomicInt64(0)\n\t\ttotalSameConnectFlights = concurrent.NewAtomicInt64(0)\n\t\ttotalZombieFlights      = concurrent.NewAtomicInt64(0)\n\t\ttotalZombieCF           = concurrent.NewAtomicInt64(0)\n\t)\n\n\tfn := func(ctx context.Context, l *parser.CarrierTrailerBlockLink) error {\n\t\toldfilepath := strings.ReplaceAll(l.Filepath, \"carrier_trailers\", \"statefiles\")\n\t\told, err := readCarrierTrailerBlock(oldfilepath)\n\t\tif errors.Is(err, os.ErrNotExist) {\n\t\t\treturn i.IngestLink(ctx, l)\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tnew, err := readCarrierTrailerBlock(l.Filepath)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to read ct file\")\n\t\t}\n\n\t\tdf, err := diff.Compare(ctx, old, new)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to compare\")\n\t\t}\n\n\t\tif err := ssimdb.IngestPartially(ctx, db, i, df); err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to ingest partially\")\n\t\t}\n\n\t\ttotalSameFlights.Add(int64(len(df.Flights.NoChanges)))\n\t\ttotalSameConnectFlights.Add(int64(len(df.ConnectingFlights.NoChanges)))\n\t\ttotalRemovedFlights.Add(int64(len(df.Flights.Removed)))\n\t\ttotalRemovedCF.Add(int64(len(df.ConnectingFlights.Removed)))\n\t\ttotalIngestedFlights.Add(int64(len(df.MergedCT.Flights)))\n\t\ttotalIngestedCF.Add(int64(len(df.MergedCT.ConnectingFlights)))\n\t\ttotalZombieFlights.Add(int64(len(df.Flights.Zombie)))\n\t\ttotalZombieCF.Add(int64(len(df.ConnectingFlights.Zombie)))\n\n\t\t// log 1 random zombie flight (if any)\n\t\tif len(df.Flights.Zombie) > 0 {\n\t\t\tkeys := make([]string, 0, len(df.Flights.Zombie))\n\t\t\tfor k := range df.Flights.Zombie {\n\t\t\t\tkeys = append(keys, k)\n\t\t\t}\n\t\t\tpick := keys[rand.Intn(len(keys))]\n\t\t\tlog.Debug(ctx, \"Zombie flight sample\", zap.String(\"flight_id\", pick))\n\t\t}\n\n\t\t// log 1 random zombie connecting flight (if any)\n\t\tif len(df.ConnectingFlights.Zombie) > 0 {\n\t\t\tkeys := make([]string, 0, len(df.ConnectingFlights.Zombie))\n\t\t\tfor k := range df.ConnectingFlights.Zombie {\n\t\t\t\tkeys = append(keys, k)\n\t\t\t}\n\t\t\tpick := keys[rand.Intn(len(keys))]\n\t\t\tlog.Debug(ctx, \"Zombie connected flight sample\", zap.String(\"connected_flight_id\", pick))\n\t\t}\n\n\t\tfinalCT := buildFinalCarrierTrailer(old, new, df)\n\t\t_, err = w.Write(finalCT)\n\t\treturn errors.Wrap(err, \"failed to write ct\")\n\t}\n\n\terrs := concurrent.ExecuteInPool(ctx, link.Links, fn)\n\n\ttotalIngestedFlights.Add(i.TotalFlightsIngested.Get())\n\ttotalIngestedCF.Add(i.TotalConnectingFlightsIngested.Get())\n\n\tlog.Debug(ctx, \"SSIM finished partial ingestion\",\n\t\tzap.Int64(\"same_flights\", totalSameFlights.Get()),\n\t\tzap.Int64(\"same_cf\", totalSameConnectFlights.Get()),\n\t\tzap.Int64(\"removed_flights\", totalRemovedFlights.Get()),\n\t\tzap.Int64(\"removed_cf\", totalRemovedCF.Get()),\n\t\tzap.Int64(\"ingested_flights\", totalIngestedFlights.Get()),\n\t\tzap.Int64(\"ingested_cf\", totalIngestedCF.Get()),\n\t\tzap.Int64(\"zombie_flights\", totalZombieFlights.Get()),\n\t\tzap.Int64(\"zombie_cf\", totalZombieCF.Get()),\n\t\tzap.Errors(\"errors\", errs),\n\t)\n\n\treturn nil\n}\n", "n_tokens": 970, "primary_symbol": "ingestStateDiff", "primary_kind": "function", "primary_span": [147, 244], "def_symbols": ["ingestStateDiff"], "symbols": ["ingestStateDiff", "func", "ctx", "context", "Context", "pgsql", "ssimdb", "Ingester", "link", "parser", "SSIM", "error", "writer", "NewBlockWriter", "DefaultDir", "log", "Debug", "started", "partial", "ingestion", "zap", "Int", "len", "Links", "var", "totalIngestedFlights", "concurrent", "NewAtomicInt64", "totalRemovedFlights", "totalIngestedCF", "totalRemovedCF", "totalSameFlights", "totalSameConnectFlights", "totalZombieFlights", "totalZombieCF", "CarrierTrailerBlockLink", "oldfilepath", "strings", "ReplaceAll", "Filepath", "carrier_trailers", "statefiles", "old", "err", "readCarrierTrailerBlock", "errors", "ErrNotExist", "return", "IngestLink", "else", "nil", "new", "Wrap", "failed", "read", "file", "diff", "Compare", "compare", "IngestPartially", "ingest", "partially", "Add", "int64", "Flights", "NoChanges", "ConnectingFlights", "Removed", "MergedCT", "Zombie", "random", "zombie", "flight", "any", "keys", "make", "string", "for", "range", "append", "pick", "rand", "Intn", "sample", "String", "flight_id", "connecting", "connected", "connected_flight_id", "finalCT", "buildFinalCarrierTrailer", "Write", "write", "errs", "ExecuteInPool", "TotalFlightsIngested", "Get", "TotalConnectingFlightsIngested", "finished", "Int64", "same_flights", "same_cf", "removed_flights", "removed_cf", "ingested_flights", "ingested_cf", "zombie_flights", "zombie_cf", "Errors"], "doc_head": "func ingestStateDiff(\n\tctx context.Context,\n\tdb *pgsql.DB,\n\ti *ssimdb.Ingester,\n\tlink *parser.SSIM,\n) error {\n\tw := writer.NewBlockWriter(writer.DefaultDir)\n\tlog.Debug(ctx, \"SSIM started partial ingestion\", zap.Int(\"link\", len(link.Links)))\n\tvar (\n\t\ttotalIngestedFlights    = concurrent.NewAtomicInt64(0)\n\t\ttotalRemovedFlights     = concurrent.NewAtomicInt64(0)\n\t\ttotalIngestedCF         = concurrent.NewAtomicInt64(0)\n\t\ttotalRemovedCF          = concurrent.NewAtomicInt64(0)\n\t\ttotalSameFlights        = concurrent.NewAtomicInt64(0)\n\t\ttotalSameConnectFlights = concurrent.NewAtomicInt64(0)\n\t\ttotalZombieFlights      = concurrent.NewAtomicInt64(0)\n\t\ttotalZombieCF           = concurrent.NewAtomicInt64(0)\n\t)\n\tfn := func(ctx context.Context, l *parser.CarrierTrailerBlockLink) error {\n\t\toldfilepath := strings.ReplaceAll(l.Filepath, \"carrier_trailers\", \"statefiles\")\n\t\told, err := readCarrierTrailerBlock(oldfilepath)\n\t\tif errors.Is(err, os.ErrNotExist) {\n\t\t\treturn i.IngestLink(ctx, l)\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnew, err := readCarrierTrailerBlock(l.Filepath)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to read ct file\")\n\t\t}\n\t\tdf, err := diff.Compare(ctx, old, new)\n\t\tif e"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 245, "end_line": 285, "text": "// buildFinalCarrierTrailer merges the new carrier trailer block with the unchanged old block\n// some flights in the old carrier trailer block gets updated so we need to find the unchanged ones\n// to merge with the new carrier trailer block\nfunc buildFinalCarrierTrailer(old, curr *parser.CarrierTrailerBlock, df *diff.Diff) *parser.CarrierTrailerBlock {\n\t// Direct flights\n\tcurrentFlights := make(map[string]*parser.Flight)\n\tfor _, f := range curr.Flights {\n\t\tcurrentFlights[f.FlightID] = f\n\t}\n\n\tfor _, f := range old.Flights {\n\t\tif _, ok := currentFlights[f.FlightID]; ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tif _, ok := df.Flights.Removed[f.FlightID]; !ok {\n\t\t\tcurr.Flights = append(curr.Flights, f)\n\t\t\tcurrentFlights[f.FlightID] = f\n\t\t}\n\t}\n\n\t// Connecting flights\n\tcurrentCFs := make(map[string]*parser.ConnectingFlight)\n\tfor _, cf := range curr.ConnectingFlights {\n\t\tcurrentCFs[cf.ConnectingFlightID] = cf\n\t}\n\n\tfor _, cf := range old.ConnectingFlights {\n\t\tif _, ok := currentCFs[cf.ConnectingFlightID]; ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tif _, ok := df.ConnectingFlights.Removed[cf.ConnectingFlightID]; !ok {\n\t\t\tcurr.ConnectingFlights = append(curr.ConnectingFlights, cf)\n\t\t\tcurrentCFs[cf.ConnectingFlightID] = cf\n\t\t}\n\t}\n\n\treturn curr\n}\n", "n_tokens": 335, "primary_symbol": "buildFinalCarrierTrailer", "primary_kind": "function", "primary_span": [248, 285], "def_symbols": ["buildFinalCarrierTrailer"], "symbols": ["buildFinalCarrierTrailer", "merges", "the", "new", "carrier", "trailer", "block", "with", "unchanged", "old", "some", "flights", "gets", "updated", "need", "find", "ones", "merge", "func", "curr", "parser", "CarrierTrailerBlock", "diff", "Diff", "Direct", "currentFlights", "make", "map", "string", "Flight", "for", "range", "Flights", "FlightID", "continue", "Removed", "append", "Connecting", "currentCFs", "ConnectingFlight", "ConnectingFlights", "ConnectingFlightID", "return"], "doc_head": "// buildFinalCarrierTrailer merges the new carrier trailer block with the unchanged old block\n// some flights in the old carrier trailer block gets updated so we need to find the unchanged ones\n// to merge with the new carrier trailer block\nfunc buildFinalCarrierTrailer(old, curr *parser.CarrierTrailerBlock, df *diff.Diff) *parser.CarrierTrailerBlock {\n\t// Direct flights\n\tcurrentFlights := make(map[string]*parser.Flight)\n\tfor _, f := range curr.Flights {\n\t\tcurrentFlights[f.FlightID] = f\n\t}\n\tfor _, f := range old.Flights {\n\t\tif _, ok := currentFlights[f.FlightID]; ok {\n\t\t\tcontinue\n\t\t}\n\t\tif _, ok := df.Flights.Removed[f.FlightID]; !ok {\n\t\t\tcurr.Flights = append(curr.Flights, f)\n\t\t\tcurrentFlights[f.FlightID] = f\n\t\t}\n\t}\n\t// Connecting flights\n\tcurrentCFs := make(map[string]*parser.ConnectingFlight)\n\tfor _, cf := range curr.ConnectingFlights {\n\t\tcurrentCFs[cf.ConnectingFlightID] = cf\n\t}\n\tfor _, cf := range old.ConnectingFlights {\n\t\tif _, ok := currentCFs[cf.ConnectingFlightID]; ok {\n\t\t\tcontinue\n\t\t}\n\t\tif _, ok := df.ConnectingFlights.Removed[cf.ConnectingFlightID]; !ok {\n\t\t\tcurr.ConnectingFlights = append(curr.ConnectingFlights, cf)\n\t\t\tcurrentCFs[cf.ConnectingFlightID] = cf\n\t\t}\n\t}\n\tretur"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 286, "end_line": 314, "text": "func exportStatefiles(\n\tctx context.Context,\n\tcfg *importConfig,\n\tlink *parser.SSIM,\n) error {\n\tvar (\n\t\tairlines []string\n\t\tschema   []string\n\t)\n\n\tlog.Debug(ctx, \"Preparing airline and schema slices\", zap.Int(\"link\", len(link.Links)))\n\n\tfor _, l := range link.Links {\n\t\texcludedFilepath := strings.Split(l.Filepath, \"/\")[1]\n\n\t\tparts := strings.Split(strings.TrimRight(excludedFilepath, \".json\"), \"_\")\n\n\t\tairlines = append(airlines, parts[0])\n\t\tschema = append(schema, fmt.Sprintf(\"period_%s_%s\", parts[1], parts[2]))\n\t}\n\n\texportCfg := &exportCfg{\n\t\tAirline: airlines,\n\t\tSchema:  schema,\n\t\tDB:      cfg.DB,\n\t}\n\treturn export(ctx, exportCfg)\n}\n", "n_tokens": 183, "primary_symbol": "exportStatefiles", "primary_kind": "function", "primary_span": [286, 314], "def_symbols": ["exportStatefiles"], "symbols": ["exportStatefiles", "func", "ctx", "context", "Context", "cfg", "importConfig", "link", "parser", "SSIM", "error", "var", "airlines", "string", "schema", "log", "Debug", "Preparing", "airline", "and", "slices", "zap", "Int", "len", "Links", "for", "range", "excludedFilepath", "strings", "Split", "Filepath", "parts", "TrimRight", "json", "append", "fmt", "Sprintf", "period_", "exportCfg", "Airline", "Schema", "return", "export"], "doc_head": "func exportStatefiles(\n\tctx context.Context,\n\tcfg *importConfig,\n\tlink *parser.SSIM,\n) error {\n\tvar (\n\t\tairlines []string\n\t\tschema   []string\n\t)\n\tlog.Debug(ctx, \"Preparing airline and schema slices\", zap.Int(\"link\", len(link.Links)))\n\tfor _, l := range link.Links {\n\t\texcludedFilepath := strings.Split(l.Filepath, \"/\")[1]\n\t\tparts := strings.Split(strings.TrimRight(excludedFilepath, \".json\"), \"_\")\n\t\tairlines = append(airlines, parts[0])\n\t\tschema = append(schema, fmt.Sprintf(\"period_%s_%s\", parts[1], parts[2]))\n\t}\n\texportCfg := &exportCfg{\n\t\tAirline: airlines,\n\t\tSchema:  schema,\n\t\tDB:      cfg.DB,\n\t}\n\treturn export(ctx, exportCfg)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 315, "end_line": 333, "text": "func readCarrierTrailerBlock(filepath string) (*parser.CarrierTrailerBlock, error) {\n\tf, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"open ct file\")\n\t}\n\tdefer f.Close()\n\n\tvar ct parser.CarrierTrailerBlock\n\tif err := json.NewDecoder(f).Decode(&ct); err != nil {\n\t\treturn nil, errors.Wrap(err, \"decode ct\")\n\t}\n\n\treturn &ct, nil\n}\n\ntype mapper interface {\n\tGet(ctx context.Context, key string) string\n}\n", "n_tokens": 113, "primary_symbol": "readCarrierTrailerBlock", "primary_kind": "function", "primary_span": [315, 333], "def_symbols": ["readCarrierTrailerBlock"], "symbols": ["readCarrierTrailerBlock", "func", "filepath", "string", "parser", "CarrierTrailerBlock", "error", "err", "Open", "nil", "return", "errors", "Wrap", "open", "file", "defer", "Close", "var", "json", "NewDecoder", "Decode", "decode", "type", "mapper", "interface", "Get", "ctx", "context", "Context", "key"], "doc_head": "func readCarrierTrailerBlock(filepath string) (*parser.CarrierTrailerBlock, error) {\n\tf, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"open ct file\")\n\t}\n\tdefer f.Close()\n\tvar ct parser.CarrierTrailerBlock\n\tif err := json.NewDecoder(f).Decode(&ct); err != nil {\n\t\treturn nil, errors.Wrap(err, \"decode ct\")\n\t}\n\treturn &ct, nil\n}\ntype mapper interface {\n\tGet(ctx context.Context, key string) string\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 334, "end_line": 380, "text": "func parseSsimZipFromS3(\n\tctx context.Context,\n\tcfg *importConfig,\n\tstorage *s3.Client,\n\tairlinesMapper mapper,\n) (*parser.SSIM, error) {\n\tobj, err := storage.GetObject(ctx, &s3.GetObjectInput{\n\t\tBucket: &cfg.Bucket,\n\t\tKey:    &cfg.Key,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get object\")\n\t}\n\tdefer obj.Body.Close()\n\n\treaderat := NewBufferingReaderAt(obj.Body)\n\treader, err := zip.NewReader(readerat, aws.ToInt64(obj.ContentLength))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to create zip reader\")\n\t}\n\n\t// We expect a single file in the zip archive\n\t// That's how the SSIM data is delivered to us\n\tif len(reader.File) != 1 {\n\t\treturn nil, errors.New(\"expected a single file in the zip archive\")\n\t}\n\n\tssimFile := reader.File[0]\n\trc, err := ssimFile.Open()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to open file\")\n\t}\n\tdefer rc.Close()\n\n\tw := writer.NewBlockWriter(writer.DefaultDir)\n\tp := parser.NewParser(w, airlinesMapper)\n\n\tlink, err := p.Parse(ctx, rc)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to parse file\")\n\t}\n\n\tlog.Debug(ctx, \"SSIM data parsing finished\", zap.Int(\"link\", len(link.Links)))\n\n\treturn link, nil\n}\n", "n_tokens": 322, "primary_symbol": "parseSsimZipFromS3", "primary_kind": "function", "primary_span": [334, 380], "def_symbols": ["parseSsimZipFromS3"], "symbols": ["parseSsimZipFromS3", "func", "ctx", "context", "Context", "cfg", "importConfig", "storage", "Client", "airlinesMapper", "mapper", "parser", "SSIM", "error", "obj", "err", "GetObject", "GetObjectInput", "Bucket", "Key", "nil", "return", "errors", "Wrap", "failed", "get", "object", "defer", "Body", "Close", "readerat", "NewBufferingReaderAt", "reader", "zip", "NewReader", "aws", "ToInt64", "ContentLength", "create", "expect", "single", "file", "the", "archive", "That", "how", "data", "delivered", "len", "File", "New", "expected", "ssimFile", "Open", "open", "writer", "NewBlockWriter", "DefaultDir", "NewParser", "link", "Parse", "parse", "log", "Debug", "parsing", "finished", "zap", "Int", "Links"], "doc_head": "func parseSsimZipFromS3(\n\tctx context.Context,\n\tcfg *importConfig,\n\tstorage *s3.Client,\n\tairlinesMapper mapper,\n) (*parser.SSIM, error) {\n\tobj, err := storage.GetObject(ctx, &s3.GetObjectInput{\n\t\tBucket: &cfg.Bucket,\n\t\tKey:    &cfg.Key,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get object\")\n\t}\n\tdefer obj.Body.Close()\n\treaderat := NewBufferingReaderAt(obj.Body)\n\treader, err := zip.NewReader(readerat, aws.ToInt64(obj.ContentLength))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to create zip reader\")\n\t}\n\t// We expect a single file in the zip archive\n\t// That's how the SSIM data is delivered to us\n\tif len(reader.File) != 1 {\n\t\treturn nil, errors.New(\"expected a single file in the zip archive\")\n\t}\n\tssimFile := reader.File[0]\n\trc, err := ssimFile.Open()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to open file\")\n\t}\n\tdefer rc.Close()\n\tw := writer.NewBlockWriter(writer.DefaultDir)\n\tp := parser.NewParser(w, airlinesMapper)\n\tlink, err := p.Parse(ctx, rc)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to parse file\")\n\t}\n\tlog.Debug(ctx, \"SSIM data parsing finished\", zap.Int(\"link\", len(link.Links)))\n\treturn link, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/import.go", "rel_path": "cmd/ssim/import.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 381, "end_line": 412, "text": "type bufferingReaderAt struct {\n\tr   io.Reader\n\tbuf []byte\n}\n\nfunc NewBufferingReaderAt(r io.Reader) io.ReaderAt {\n\treturn &bufferingReaderAt{\n\t\tr: r,\n\t}\n}\n\nfunc (br *bufferingReaderAt) ReadAt(p []byte, off int64) (n int, err error) {\n\tendOff := off + int64(len(p))\n\tneed := endOff - int64(len(br.buf))\n\tif need > 0 {\n\t\tbuf := make([]byte, need)\n\t\tvar rn int\n\t\trn, err = io.ReadFull(br.r, buf)\n\t\tbr.buf = append(br.buf, buf[:rn]...)\n\t}\n\n\tif int64(len(br.buf)) >= off {\n\t\tn = copy(p, br.buf[off:])\n\t}\n\n\tif n == len(p) {\n\t\terr = nil\n\t}\n\n\treturn\n}\n", "n_tokens": 183, "primary_symbol": "NewBufferingReaderAt", "primary_kind": "function", "primary_span": [386, 412], "def_symbols": ["NewBufferingReaderAt", "ReadAt"], "symbols": ["NewBufferingReaderAt", "ReadAt", "type", "bufferingReaderAt", "struct", "Reader", "buf", "byte", "func", "ReaderAt", "return", "off", "int64", "int", "err", "error", "endOff", "len", "need", "make", "var", "ReadFull", "append", "copy", "nil"], "doc_head": "type bufferingReaderAt struct {\n\tr   io.Reader\n\tbuf []byte\n}\nfunc NewBufferingReaderAt(r io.Reader) io.ReaderAt {\n\treturn &bufferingReaderAt{\n\t\tr: r,\n\t}\n}\nfunc (br *bufferingReaderAt) ReadAt(p []byte, off int64) (n int, err error) {\n\tendOff := off + int64(len(p))\n\tneed := endOff - int64(len(br.buf))\n\tif need > 0 {\n\t\tbuf := make([]byte, need)\n\t\tvar rn int\n\t\trn, err = io.ReadFull(br.r, buf)\n\t\tbr.buf = append(br.buf, buf[:rn]...)\n\t}\n\tif int64(len(br.buf)) >= off {\n\t\tn = copy(p, br.buf[off:])\n\t}\n\tif n == len(p) {\n\t\terr = nil\n\t}\n\treturn\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go", "rel_path": "cmd/ssim/controlled_duplicates.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package ssim\n\nimport (\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gocarina/gocsv\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xaws\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 127, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "ssim", "import", "github", "com", "aws", "sdk", "service", "cockroachdb", "errors", "gocarina", "gocsv", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "pkg", "pgsql", "ssimdb", "xaws", "log", "uber", "org", "zap"], "doc_head": "package ssim\nimport (\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gocarina/gocsv\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssimdb \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xaws\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go", "rel_path": "cmd/ssim/controlled_duplicates.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 16, "end_line": 48, "text": "// NewControlledDuplicates creates a new cobra command for the \"controlled-duplicates\" command\nfunc NewControlledDuplicates() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"controlled-duplicates\",\n\t\tShort: \"Store controlled duplicate mappings\",\n\t\tLong:  \"Store controlled duplicate mappings\",\n\t\tPreRun: func(cmd *cobra.Command, _ []string) {\n\t\t\tviper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runControlledDuplicates,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().StringP(\"bucket\", \"b\", \"mappings\", \"S3 bucket\")\n\tcmd.PersistentFlags().StringP(\"key\", \"k\", \"controlled-duplicates.csv\", \"S3 key\")\n\n\tcmd.PersistentFlags().StringP(\"aws.access-key-id\", \"i\", \"\", \"AWS access key ID\")\n\tcmd.PersistentFlags().StringP(\"aws.secret-access-key\", \"s\", \"\", \"AWS secret access key\")\n\tcmd.PersistentFlags().StringP(\"aws.session-token\", \"t\", \"\", \"AWS session token\")\n\tcmd.PersistentFlags().StringP(\"aws.region\", \"r\", \"us-east-1\", \"AWS region\")\n\tcmd.PersistentFlags().StringP(\"aws.endpoint-url\", \"e\", \"\", \"AWS endpoint URL\")\n\tcmd.PersistentFlags().Bool(\"aws.host-name-immutable\", false, \"AWS host name immutable\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"AWS S3 use path style\")\n\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5432, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\n\treturn cmd\n}\n", "n_tokens": 414, "primary_symbol": "NewControlledDuplicates", "primary_kind": "function", "primary_span": [17, 48], "def_symbols": ["NewControlledDuplicates"], "symbols": ["NewControlledDuplicates", "creates", "new", "cobra", "command", "for", "the", "controlled", "duplicates", "func", "Command", "cmd", "Use", "Short", "Store", "duplicate", "mappings", "Long", "PreRun", "string", "viper", "BindPFlags", "Flags", "RunE", "runControlledDuplicates", "Args", "ExactArgs", "PersistentFlags", "StringP", "bucket", "key", "csv", "aws", "access", "AWS", "secret", "session", "token", "region", "east", "endpoint", "url", "URL", "Bool", "host", "name", "immutable", "false", "use", "path", "style", "localhost", "database", "IntP", "port", "dbname", "schedules", "user", "postgres", "String", "password", "toor", "return"], "doc_head": "// NewControlledDuplicates creates a new cobra command for the \"controlled-duplicates\" command\nfunc NewControlledDuplicates() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"controlled-duplicates\",\n\t\tShort: \"Store controlled duplicate mappings\",\n\t\tLong:  \"Store controlled duplicate mappings\",\n\t\tPreRun: func(cmd *cobra.Command, _ []string) {\n\t\t\tviper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runControlledDuplicates,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().StringP(\"bucket\", \"b\", \"mappings\", \"S3 bucket\")\n\tcmd.PersistentFlags().StringP(\"key\", \"k\", \"controlled-duplicates.csv\", \"S3 key\")\n\tcmd.PersistentFlags().StringP(\"aws.access-key-id\", \"i\", \"\", \"AWS access key ID\")\n\tcmd.PersistentFlags().StringP(\"aws.secret-access-key\", \"s\", \"\", \"AWS secret access key\")\n\tcmd.PersistentFlags().StringP(\"aws.session-token\", \"t\", \"\", \"AWS session token\")\n\tcmd.PersistentFlags().StringP(\"aws.region\", \"r\", \"us-east-1\", \"AWS region\")\n\tcmd.PersistentFlags().StringP(\"aws.endpoint-url\", \"e\", \"\", \"AWS endpoint URL\")\n\tcmd.PersistentFlags().Bool(\"aws.host-name-immutable\", false, \"AWS host name immutable\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"AWS S3 use path style\")\n\tcmd.Persisten"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go", "rel_path": "cmd/ssim/controlled_duplicates.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 49, "end_line": 55, "text": "type controlledDuplicatesConfig struct {\n\tBucket string        `mapstructure:\"bucket\"`\n\tKey    string        `mapstructure:\"key\"`\n\tAWS    xaws.Config   `mapstructure:\"aws\"`\n\tDB     *pgsql.Config `mapstructure:\"db\"`\n}\n", "n_tokens": 51, "primary_symbol": "", "primary_kind": "", "primary_span": [49, 55], "def_symbols": [], "symbols": ["type", "controlledDuplicatesConfig", "struct", "Bucket", "string", "mapstructure", "bucket", "Key", "key", "AWS", "xaws", "Config", "aws", "pgsql"], "doc_head": "type controlledDuplicatesConfig struct {\n\tBucket string        `mapstructure:\"bucket\"`\n\tKey    string        `mapstructure:\"key\"`\n\tAWS    xaws.Config   `mapstructure:\"aws\"`\n\tDB     *pgsql.Config `mapstructure:\"db\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go", "rel_path": "cmd/ssim/controlled_duplicates.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 56, "end_line": 114, "text": "func runControlledDuplicates(cmd *cobra.Command, _ []string) error {\n\tvar cfg controlledDuplicatesConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\n\tif err := pgsql.MigrateUp(cfg.DB); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\n\tctx := cmd.Context()\n\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdefer db.Close()\n\n\tawsCfg, err := xaws.GetConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tstorage := s3.NewFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\tobj, err := storage.GetObject(ctx, &s3.GetObjectInput{\n\t\tBucket: &cfg.Bucket,\n\t\tKey:    &cfg.Key,\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to get object\")\n\t}\n\tdefer obj.Body.Close()\n\n\tvar controlledDuplicates []controlledDuplicate\n\tif err := gocsv.Unmarshal(obj.Body, &controlledDuplicates); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal CSV\")\n\t}\n\n\tvar oagMappings []ssimdb.OagMapping\n\tfor _, controlledDuplicate := range controlledDuplicates {\n\t\toagMappings = append(oagMappings, ssimdb.OagMapping{\n\t\t\tOagID: controlledDuplicate.OAGCode,\n\t\t\tID:    controlledDuplicate.IATACode,\n\t\t})\n\t}\n\n\treturn ssimdb.UpsertAirlineMappings(ctx, db, oagMappings)\n}\n", "n_tokens": 413, "primary_symbol": "runControlledDuplicates", "primary_kind": "function", "primary_span": [56, 114], "def_symbols": ["runControlledDuplicates"], "symbols": ["runControlledDuplicates", "func", "cmd", "cobra", "Command", "string", "error", "var", "cfg", "controlledDuplicatesConfig", "err", "viper", "Unmarshal", "nil", "return", "log", "SetLogger", "New", "WithService", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "pgsql", "MigrateUp", "errors", "Wrap", "failed", "migrate", "ctx", "Context", "Connect", "connect", "database", "defer", "Close", "awsCfg", "xaws", "GetConfig", "AWS", "Error", "Failed", "load", "config", "zap", "storage", "NewFromConfig", "Options", "UsePathStyle", "obj", "GetObject", "GetObjectInput", "Bucket", "Key", "get", "object", "Body", "controlledDuplicates", "controlledDuplicate", "gocsv", "unmarshal", "CSV", "oagMappings", "ssimdb", "OagMapping", "for", "range", "append", "OagID", "OAGCode", "IATACode", "UpsertAirlineMappings"], "doc_head": "func runControlledDuplicates(cmd *cobra.Command, _ []string) error {\n\tvar cfg controlledDuplicatesConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\tif err := pgsql.MigrateUp(cfg.DB); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\tctx := cmd.Context()\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdefer db.Close()\n\tawsCfg, err := xaws.GetConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tstorage := s3.NewFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\tobj, err := storage.GetObject(ctx, &s3.GetObjectInput{\n\t\tBucket: &cfg.Bucket,\n\t\tKey:    &cfg.Key,\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to get object\")\n\t}\n\tdefer obj.Body.Close()\n\tvar controlledDuplicates []controlledDuplicate\n\tif err := gocsv.Unmarshal(obj.Body, &controlledDuplicates); err != nil {\n\t\treturn errors.Wrap"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/controlled_duplicates.go", "rel_path": "cmd/ssim/controlled_duplicates.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 115, "end_line": 122, "text": "type controlledDuplicate struct {\n\tIATACode             string `csv:\"IATACode\"`\n\tPrimaryCarrierName   string `csv:\"PrimaryCarrierName\"`\n\tDupeCode             string `csv:\"DupeCode\"`\n\tOAGCode              string `csv:\"OAGCode\"`\n\tSecondaryCarrierName string `csv:\"SecondaryCarrierName\"`\n}\n", "n_tokens": 69, "primary_symbol": "", "primary_kind": "", "primary_span": [115, 122], "def_symbols": [], "symbols": ["type", "controlledDuplicate", "struct", "IATACode", "string", "csv", "PrimaryCarrierName", "DupeCode", "OAGCode", "SecondaryCarrierName"], "doc_head": "type controlledDuplicate struct {\n\tIATACode             string `csv:\"IATACode\"`\n\tPrimaryCarrierName   string `csv:\"PrimaryCarrierName\"`\n\tDupeCode             string `csv:\"DupeCode\"`\n\tOAGCode              string `csv:\"OAGCode\"`\n\tSecondaryCarrierName string `csv:\"SecondaryCarrierName\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 19, "text": "package ssim\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssim_db \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/writer\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 149, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 19], "def_symbols": [], "symbols": ["package", "ssim", "import", "context", "signal", "github", "com", "cockroachdb", "errors", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "pkg", "concurrent", "pgsql", "ssim_db", "parser", "writer", "log", "uber", "org", "zap"], "doc_head": "package ssim\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tssim_db \"go.impalastudios.com/aviation/schedules/pkg/ssim/db\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/writer\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 20, "end_line": 43, "text": "func NewExport() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"export\",\n\t\tShort: \"Export flights data\",\n\t\tLong:  \"Exports flight data from the database to a CSV file\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runExport,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().String(\"airline\", \"AA\", \"Airline code\")\n\tcmd.PersistentFlags().String(\"schema\", \"period_2024_1\", \"Schema name\")\n\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5432, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\n\treturn cmd\n}\n", "n_tokens": 238, "primary_symbol": "NewExport", "primary_kind": "function", "primary_span": [20, 43], "def_symbols": ["NewExport"], "symbols": ["NewExport", "func", "cobra", "Command", "cmd", "Use", "export", "Short", "Export", "flights", "data", "Long", "Exports", "flight", "from", "the", "database", "CSV", "file", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runExport", "Args", "ExactArgs", "PersistentFlags", "String", "airline", "Airline", "code", "schema", "period_2024_1", "Schema", "name", "StringP", "host", "localhost", "IntP", "port", "dbname", "schedules", "user", "postgres", "password", "toor"], "doc_head": "func NewExport() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"export\",\n\t\tShort: \"Export flights data\",\n\t\tLong:  \"Exports flight data from the database to a CSV file\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runExport,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().String(\"airline\", \"AA\", \"Airline code\")\n\tcmd.PersistentFlags().String(\"schema\", \"period_2024_1\", \"Schema name\")\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5432, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 44, "end_line": 76, "text": "type exportCfg struct {\n\tAirline []string `mapstructure:\"airline\"`\n\tSchema  []string `mapstructure:\"schema\"`\n\n\tDB *pgsql.Config `mapstructure:\"db\"`\n}\n\nfunc runExport(cmd *cobra.Command, _ []string) error {\n\tvar cfg exportCfg\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- export(ctx, &cfg)\n\t}()\n\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n", "n_tokens": 162, "primary_symbol": "runExport", "primary_kind": "function", "primary_span": [51, 76], "def_symbols": ["runExport"], "symbols": ["runExport", "type", "exportCfg", "struct", "Airline", "string", "mapstructure", "airline", "Schema", "schema", "pgsql", "Config", "func", "cmd", "cobra", "Command", "error", "var", "cfg", "err", "viper", "Unmarshal", "nil", "return", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "ctx", "cancel", "context", "WithCancel", "Context", "defer", "errChan", "export", "select", "case", "errors", "New", "canceled"], "doc_head": "type exportCfg struct {\n\tAirline []string `mapstructure:\"airline\"`\n\tSchema  []string `mapstructure:\"schema\"`\n\tDB *pgsql.Config `mapstructure:\"db\"`\n}\nfunc runExport(cmd *cobra.Command, _ []string) error {\n\tvar cfg exportCfg\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- export(ctx, &cfg)\n\t}()\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 77, "end_line": 90, "text": "func export(ctx context.Context, cfg *exportCfg) error {\n\tlog.Debug(ctx, \"Starting export process\")\n\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdefer db.Close()\n\n\tschemas, err := listSchemas(ctx, db)\n\tif err != nil {\n\t\treturn err\n\t}\n", "n_tokens": 81, "primary_symbol": "export", "primary_kind": "function", "primary_span": [77, 90], "def_symbols": ["export"], "symbols": ["export", "func", "ctx", "context", "Context", "cfg", "exportCfg", "error", "log", "Debug", "Starting", "process", "err", "pgsql", "Connect", "nil", "return", "errors", "Wrap", "failed", "connect", "database", "defer", "Close", "schemas", "listSchemas"], "doc_head": "func export(ctx context.Context, cfg *exportCfg) error {\n\tlog.Debug(ctx, \"Starting export process\")\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tdefer db.Close()\n\tschemas, err := listSchemas(ctx, db)\n\tif err != nil {\n\t\treturn err\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 91, "end_line": 126, "text": "\ttype exportSpec struct {\n\t\tAirline string\n\t\tSchema  string\n\t}\n\tvar specs []exportSpec\n\tfor i := range cfg.Airline {\n\t\tif _, ok := schemas[cfg.Schema[i]]; !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tspecs = append(specs, exportSpec{\n\t\t\tcfg.Airline[i],\n\t\t\tcfg.Schema[i],\n\t\t})\n\t}\n\n\tlog.Debug(ctx, \"Exporting the data\", zap.Int(\"specs\", len(specs)))\n\n\tw := &writerCounter{\n\t\tblockWriter:            writer.NewBlockWriter(\"statefiles\"),\n\t\tTotalFlights:           concurrent.NewAtomicInt64(0),\n\t\tTotalConnectingFilghts: concurrent.NewAtomicInt64(0),\n\t}\n\n\terrs := concurrent.ExecuteInPool(ctx, specs, func(ctx context.Context, es exportSpec) error {\n\t\tlog.Debug(ctx, \"exporting data\", zap.String(\"airline\", es.Airline), zap.String(\"schema\", es.Schema))\n\t\treturn ssim_db.Export(ctx, db, w, es.Schema, es.Airline)\n\t})\n\tif len(errs) > 0 {\n\t\tlog.Error(ctx, \"failed to export data\", zap.Errors(\"errs\", errs))\n\t}\n\n\tlog.Debug(ctx, \"exported data\", zap.Int64(\"flights\", w.TotalFlights.Get()), zap.Int64(\"connecting_flights\", w.TotalConnectingFilghts.Get()))\n\treturn nil\n}\n", "n_tokens": 296, "primary_symbol": "", "primary_kind": "", "primary_span": [91, 126], "def_symbols": [], "symbols": ["type", "exportSpec", "struct", "Airline", "string", "Schema", "var", "specs", "for", "range", "cfg", "schemas", "continue", "append", "log", "Debug", "ctx", "Exporting", "the", "data", "zap", "Int", "len", "writerCounter", "blockWriter", "writer", "NewBlockWriter", "statefiles", "TotalFlights", "concurrent", "NewAtomicInt64", "TotalConnectingFilghts", "errs", "ExecuteInPool", "func", "context", "Context", "error", "exporting", "String", "airline", "schema", "return", "ssim_db", "Export", "Error", "failed", "export", "Errors", "exported", "Int64", "flights", "Get", "connecting_flights", "nil"], "doc_head": "\ttype exportSpec struct {\n\t\tAirline string\n\t\tSchema  string\n\t}\n\tvar specs []exportSpec\n\tfor i := range cfg.Airline {\n\t\tif _, ok := schemas[cfg.Schema[i]]; !ok {\n\t\t\tcontinue\n\t\t}\n\t\tspecs = append(specs, exportSpec{\n\t\t\tcfg.Airline[i],\n\t\t\tcfg.Schema[i],\n\t\t})\n\t}\n\tlog.Debug(ctx, \"Exporting the data\", zap.Int(\"specs\", len(specs)))\n\tw := &writerCounter{\n\t\tblockWriter:            writer.NewBlockWriter(\"statefiles\"),\n\t\tTotalFlights:           concurrent.NewAtomicInt64(0),\n\t\tTotalConnectingFilghts: concurrent.NewAtomicInt64(0),\n\t}\n\terrs := concurrent.ExecuteInPool(ctx, specs, func(ctx context.Context, es exportSpec) error {\n\t\tlog.Debug(ctx, \"exporting data\", zap.String(\"airline\", es.Airline), zap.String(\"schema\", es.Schema))\n\t\treturn ssim_db.Export(ctx, db, w, es.Schema, es.Airline)\n\t})\n\tif len(errs) > 0 {\n\t\tlog.Error(ctx, \"failed to export data\", zap.Errors(\"errs\", errs))\n\t}\n\tlog.Debug(ctx, \"exported data\", zap.Int64(\"flights\", w.TotalFlights.Get()), zap.Int64(\"connecting_flights\", w.TotalConnectingFilghts.Get()))\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 127, "end_line": 152, "text": "func listSchemas(ctx context.Context, db *pgsql.DB) (map[string]bool, error) {\n\tlog.Debug(ctx, \"Querying all the schemas\")\n\n\trows, err := db.Query(ctx, \"SELECT schema_name FROM information_schema.schemata WHERE schema_name LIKE 'period_%'\")\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to list schemas\")\n\t}\n\tdefer rows.Close()\n\n\tschemas := make(map[string]bool)\n\tfor rows.Next() {\n\t\tvar schema string\n\t\tif err := rows.Scan(&schema); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"failed to scan schema\")\n\t\t}\n\t\tschemas[schema] = true\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to iterate over schemas\")\n\t}\n\n\tlog.Debug(ctx, \"Found schemas.\", zap.Int(\"schemas\", len(schemas)))\n\n\treturn schemas, nil\n}\n", "n_tokens": 192, "primary_symbol": "listSchemas", "primary_kind": "function", "primary_span": [127, 152], "def_symbols": ["listSchemas"], "symbols": ["listSchemas", "func", "ctx", "context", "Context", "pgsql", "map", "string", "bool", "error", "log", "Debug", "Querying", "all", "the", "schemas", "rows", "err", "Query", "SELECT", "schema_name", "FROM", "information_schema", "schemata", "WHERE", "LIKE", "period_", "nil", "return", "errors", "Wrap", "failed", "list", "defer", "Close", "make", "for", "Next", "var", "schema", "Scan", "scan", "true", "Err", "iterate", "over", "Found", "zap", "Int", "len"], "doc_head": "func listSchemas(ctx context.Context, db *pgsql.DB) (map[string]bool, error) {\n\tlog.Debug(ctx, \"Querying all the schemas\")\n\trows, err := db.Query(ctx, \"SELECT schema_name FROM information_schema.schemata WHERE schema_name LIKE 'period_%'\")\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to list schemas\")\n\t}\n\tdefer rows.Close()\n\tschemas := make(map[string]bool)\n\tfor rows.Next() {\n\t\tvar schema string\n\t\tif err := rows.Scan(&schema); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"failed to scan schema\")\n\t\t}\n\t\tschemas[schema] = true\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to iterate over schemas\")\n\t}\n\tlog.Debug(ctx, \"Found schemas.\", zap.Int(\"schemas\", len(schemas)))\n\treturn schemas, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/export.go", "rel_path": "cmd/ssim/export.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 153, "end_line": 166, "text": "type writerCounter struct {\n\tblockWriter *writer.BlockWriter\n\n\tTotalFlights           *concurrent.AtomicInt64\n\tTotalConnectingFilghts *concurrent.AtomicInt64\n}\n\nfunc (w *writerCounter) Write(block *parser.CarrierTrailerBlock) (*parser.CarrierTrailerBlockLink, error) {\n\tw.TotalConnectingFilghts.Add(int64(len(block.ConnectingFlights)))\n\tw.TotalFlights.Add(int64(len(block.Flights)))\n\n\treturn w.blockWriter.Write(block)\n}\n", "n_tokens": 103, "primary_symbol": "Write", "primary_kind": "function", "primary_span": [160, 166], "def_symbols": ["Write"], "symbols": ["Write", "type", "writerCounter", "struct", "blockWriter", "writer", "BlockWriter", "TotalFlights", "concurrent", "AtomicInt64", "TotalConnectingFilghts", "func", "block", "parser", "CarrierTrailerBlock", "CarrierTrailerBlockLink", "error", "Add", "int64", "len", "ConnectingFlights", "Flights", "return"], "doc_head": "type writerCounter struct {\n\tblockWriter *writer.BlockWriter\n\tTotalFlights           *concurrent.AtomicInt64\n\tTotalConnectingFilghts *concurrent.AtomicInt64\n}\nfunc (w *writerCounter) Write(block *parser.CarrierTrailerBlock) (*parser.CarrierTrailerBlockLink, error) {\n\tw.TotalConnectingFilghts.Add(int64(len(block.ConnectingFlights)))\n\tw.TotalFlights.Add(int64(len(block.Flights)))\n\treturn w.blockWriter.Write(block)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go", "rel_path": "cmd/ssim/diff.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 17, "text": "package ssim\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/diff\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 101, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 17], "def_symbols": [], "symbols": ["package", "ssim", "import", "context", "encoding", "json", "signal", "github", "com", "cockroachdb", "errors", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "pkg", "diff", "parser", "log", "uber", "org", "zap"], "doc_head": "package ssim\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"os\"\n\t\"os/signal\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/diff\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go", "rel_path": "cmd/ssim/diff.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 18, "end_line": 40, "text": "func NewDiff() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"diff\",\n\t\tShort: \"Diff SSIM data\",\n\t\tLong:  \"Finds the differences between two parsed SSIM data\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runDiff,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().StringP(\"old\", \"o\", \"SIMSCD.DAT\", \"Old SSIM file path\")\n\tcmd.PersistentFlags().StringP(\"new\", \"n\", \"SIMSCD.DAT\", \"New SSIM file path\")\n\n\treturn cmd\n}\n\ntype diffConfig struct {\n\tOld string `mapstructure:\"old\"`\n\tNew string `mapstructure:\"new\"`\n}\n", "n_tokens": 178, "primary_symbol": "NewDiff", "primary_kind": "function", "primary_span": [18, 40], "def_symbols": ["NewDiff"], "symbols": ["NewDiff", "func", "cobra", "Command", "cmd", "Use", "diff", "Short", "Diff", "SSIM", "data", "Long", "Finds", "the", "differences", "between", "two", "parsed", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runDiff", "Args", "ExactArgs", "PersistentFlags", "StringP", "old", "SIMSCD", "DAT", "Old", "file", "path", "new", "New", "type", "diffConfig", "struct", "mapstructure"], "doc_head": "func NewDiff() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"diff\",\n\t\tShort: \"Diff SSIM data\",\n\t\tLong:  \"Finds the differences between two parsed SSIM data\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runDiff,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().StringP(\"old\", \"o\", \"SIMSCD.DAT\", \"Old SSIM file path\")\n\tcmd.PersistentFlags().StringP(\"new\", \"n\", \"SIMSCD.DAT\", \"New SSIM file path\")\n\treturn cmd\n}\ntype diffConfig struct {\n\tOld string `mapstructure:\"old\"`\n\tNew string `mapstructure:\"new\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go", "rel_path": "cmd/ssim/diff.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 41, "end_line": 66, "text": "func runDiff(cmd *cobra.Command, _ []string) error {\n\tvar cfg diffConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- findDiff(ctx, &cfg)\n\t}()\n\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n", "n_tokens": 125, "primary_symbol": "runDiff", "primary_kind": "function", "primary_span": [41, 66], "def_symbols": ["runDiff"], "symbols": ["runDiff", "func", "cmd", "cobra", "Command", "string", "error", "var", "cfg", "diffConfig", "err", "viper", "Unmarshal", "nil", "return", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "ctx", "cancel", "context", "WithCancel", "Context", "defer", "errChan", "findDiff", "select", "case", "errors", "New", "canceled"], "doc_head": "func runDiff(cmd *cobra.Command, _ []string) error {\n\tvar cfg diffConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- findDiff(ctx, &cfg)\n\t}()\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/diff.go", "rel_path": "cmd/ssim/diff.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 105, "text": "func findDiff(ctx context.Context, cfg *diffConfig) error {\n\toldBytes, err := os.ReadFile(cfg.Old)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read old file\")\n\t}\n\n\tnewBytes, err := os.ReadFile(cfg.New)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read new file\")\n\t}\n\n\tvar (\n\t\toldCtblock parser.CarrierTrailerBlock\n\t\tnewCtblock parser.CarrierTrailerBlock\n\t)\n\n\tif err := json.Unmarshal(oldBytes, &oldCtblock); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal old file\")\n\t}\n\n\tif err := json.Unmarshal(newBytes, &newCtblock); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal new file\")\n\t}\n\n\tdf, err := diff.Compare(ctx, &oldCtblock, &newCtblock)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to compare\")\n\t}\n\n\tlog.Debug(ctx, \"diffing ssim data\",\n\t\tzap.Int(\"flights_same\", len(df.Flights.NoChanges)),\n\t\tzap.Int(\"connecting_flights_same\", len(df.ConnectingFlights.NoChanges)),\n\t\tzap.Int(\"flights_removed_updated\", len(df.Flights.Removed)),\n\t\tzap.Int(\"connecting_flights_removed_updated\", len(df.ConnectingFlights.Removed)),\n\t)\n\n\treturn nil\n}\n", "n_tokens": 298, "primary_symbol": "findDiff", "primary_kind": "function", "primary_span": [67, 105], "def_symbols": ["findDiff"], "symbols": ["findDiff", "func", "ctx", "context", "Context", "cfg", "diffConfig", "error", "oldBytes", "err", "ReadFile", "Old", "nil", "return", "errors", "Wrap", "failed", "read", "old", "file", "newBytes", "New", "new", "var", "oldCtblock", "parser", "CarrierTrailerBlock", "newCtblock", "json", "Unmarshal", "unmarshal", "diff", "Compare", "compare", "log", "Debug", "diffing", "ssim", "data", "zap", "Int", "flights_same", "len", "Flights", "NoChanges", "connecting_flights_same", "ConnectingFlights", "flights_removed_updated", "Removed", "connecting_flights_removed_updated"], "doc_head": "func findDiff(ctx context.Context, cfg *diffConfig) error {\n\toldBytes, err := os.ReadFile(cfg.Old)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read old file\")\n\t}\n\tnewBytes, err := os.ReadFile(cfg.New)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read new file\")\n\t}\n\tvar (\n\t\toldCtblock parser.CarrierTrailerBlock\n\t\tnewCtblock parser.CarrierTrailerBlock\n\t)\n\tif err := json.Unmarshal(oldBytes, &oldCtblock); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal old file\")\n\t}\n\tif err := json.Unmarshal(newBytes, &newCtblock); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal new file\")\n\t}\n\tdf, err := diff.Compare(ctx, &oldCtblock, &newCtblock)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to compare\")\n\t}\n\tlog.Debug(ctx, \"diffing ssim data\",\n\t\tzap.Int(\"flights_same\", len(df.Flights.NoChanges)),\n\t\tzap.Int(\"connecting_flights_same\", len(df.ConnectingFlights.NoChanges)),\n\t\tzap.Int(\"flights_removed_updated\", len(df.Flights.Removed)),\n\t\tzap.Int(\"connecting_flights_removed_updated\", len(df.ConnectingFlights.Removed)),\n\t)\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go", "rel_path": "cmd/ssim/parse.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package ssim\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/writer\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 97, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 16], "def_symbols": [], "symbols": ["package", "ssim", "import", "context", "signal", "github", "com", "cockroachdb", "errors", "spf13", "cobra", "viper", "impalastudios", "aviation", "schedules", "pkg", "parser", "writer", "log", "uber", "org", "zap"], "doc_head": "package ssim\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/writer\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go", "rel_path": "cmd/ssim/parse.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 17, "end_line": 37, "text": "func NewParse() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"parse\",\n\t\tShort: \"Parse SSIM data\",\n\t\tLong:  \"Parse SSIM data\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runParse,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().StringP(\"path\", \"p\", \"SIMSCD.DAT\", \"SSIM file path\")\n\n\treturn cmd\n}\n\ntype parseConfig struct {\n\tPath string `mapstructure:\"path\"`\n}\n", "n_tokens": 135, "primary_symbol": "NewParse", "primary_kind": "function", "primary_span": [17, 37], "def_symbols": ["NewParse"], "symbols": ["NewParse", "func", "cobra", "Command", "cmd", "Use", "parse", "Short", "Parse", "SSIM", "data", "Long", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runParse", "Args", "ExactArgs", "PersistentFlags", "StringP", "path", "SIMSCD", "DAT", "file", "type", "parseConfig", "struct", "Path", "mapstructure"], "doc_head": "func NewParse() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"parse\",\n\t\tShort: \"Parse SSIM data\",\n\t\tLong:  \"Parse SSIM data\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runParse,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().StringP(\"path\", \"p\", \"SIMSCD.DAT\", \"SSIM file path\")\n\treturn cmd\n}\ntype parseConfig struct {\n\tPath string `mapstructure:\"path\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go", "rel_path": "cmd/ssim/parse.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 38, "end_line": 71, "text": "func runParse(cmd *cobra.Command, _ []string) error {\n\tvar cfg parseConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- parse(ctx, &cfg)\n\t}()\n\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n\n// defaultMapper is a mapper that returns the key itself\ntype defaultMapper struct{}\n\n// Get returns the key\nfunc (d *defaultMapper) Get(ctx context.Context, key string) string {\n\treturn key\n}\n", "n_tokens": 168, "primary_symbol": "runParse", "primary_kind": "function", "primary_span": [38, 71], "def_symbols": ["runParse", "Get"], "symbols": ["runParse", "Get", "func", "cmd", "cobra", "Command", "string", "error", "var", "cfg", "parseConfig", "err", "viper", "Unmarshal", "nil", "return", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "ctx", "cancel", "context", "WithCancel", "Context", "defer", "errChan", "parse", "select", "case", "errors", "New", "canceled", "defaultMapper", "mapper", "that", "returns", "the", "key", "itself", "type", "struct"], "doc_head": "func runParse(cmd *cobra.Command, _ []string) error {\n\tvar cfg parseConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn err\n\t}\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tctx, cancel := context.WithCancel(cmd.Context())\n\tdefer cancel()\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- parse(ctx, &cfg)\n\t}()\n\tselect {\n\tcase <-quit:\n\t\treturn errors.New(\"context canceled\")\n\tcase err := <-errChan:\n\t\treturn err\n\t}\n}\n// defaultMapper is a mapper that returns the key itself\ntype defaultMapper struct{}\n// Get returns the key\nfunc (d *defaultMapper) Get(ctx context.Context, key string) string {\n\treturn key\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/parse.go", "rel_path": "cmd/ssim/parse.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 72, "end_line": 99, "text": "func parse(ctx context.Context, cfg *parseConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\n\tw := writer.NewBlockWriter(writer.DefaultDir)\n\tp := parser.NewParser(w, &defaultMapper{})\n\n\tf, err := os.Open(cfg.Path)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to open file\")\n\t}\n\tdefer f.Close()\n\n\tssim, err := p.Parse(ctx, f)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlog.Debug(ctx, \"Parsed SSIM\", zap.Any(\"links\", len(ssim.Links)))\n\n\treturn nil\n}\n", "n_tokens": 160, "primary_symbol": "parse", "primary_kind": "function", "primary_span": [72, 99], "def_symbols": ["parse"], "symbols": ["parse", "func", "ctx", "context", "Context", "cfg", "parseConfig", "error", "log", "SetLogger", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "writer", "NewBlockWriter", "DefaultDir", "parser", "NewParser", "defaultMapper", "err", "Open", "Path", "nil", "return", "errors", "Wrap", "failed", "open", "file", "defer", "Close", "ssim", "Parse", "Debug", "Parsed", "SSIM", "zap", "Any", "links", "len", "Links"], "doc_head": "func parse(ctx context.Context, cfg *parseConfig) error {\n\tlog.SetLogger(\n\t\tlog.New(\n\t\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\t),\n\t)\n\tw := writer.NewBlockWriter(writer.DefaultDir)\n\tp := parser.NewParser(w, &defaultMapper{})\n\tf, err := os.Open(cfg.Path)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to open file\")\n\t}\n\tdefer f.Close()\n\tssim, err := p.Parse(ctx, f)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Debug(ctx, \"Parsed SSIM\", zap.Any(\"links\", len(ssim.Links)))\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/root.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/ssim/root.go", "rel_path": "cmd/ssim/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package ssim\n\nimport \"github.com/spf13/cobra\"\n\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"ssim\",\n\t\tShort: \"Run operations on SSIM data\",\n\t}\n\n\tcmd.AddCommand(NewImport())\n\tcmd.AddCommand(NewIngest())\n\tcmd.AddCommand(NewParse())\n\tcmd.AddCommand(NewDiff())\n\tcmd.AddCommand(NewExport())\n\tcmd.AddCommand(NewControlledDuplicates())\n\n\treturn cmd\n}\n", "n_tokens": 92, "primary_symbol": "New", "primary_kind": "function", "primary_span": [5, 20], "def_symbols": ["New"], "symbols": ["New", "package", "ssim", "import", "github", "com", "spf13", "cobra", "func", "Command", "cmd", "Use", "Short", "Run", "operations", "SSIM", "data", "AddCommand", "NewImport", "NewIngest", "NewParse", "NewDiff", "NewExport", "NewControlledDuplicates", "return"], "doc_head": "package ssim\nimport \"github.com/spf13/cobra\"\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"ssim\",\n\t\tShort: \"Run operations on SSIM data\",\n\t}\n\tcmd.AddCommand(NewImport())\n\tcmd.AddCommand(NewIngest())\n\tcmd.AddCommand(NewParse())\n\tcmd.AddCommand(NewDiff())\n\tcmd.AddCommand(NewExport())\n\tcmd.AddCommand(NewControlledDuplicates())\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 34, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/enc\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xgrpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tschedules_adapter \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter\"\n\tgrpcv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/grpc/v0\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\tgrpc_requestid \"go.impalastudios.com/requestid/grpc\"\n\t\"google.golang.org/grpc/resolver\"\n\n\tgrpc_aircraft \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/aircraft\"\n\tgrpc_airlines \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airlines\"\n\tgrpc_airports \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airports\"\n)\n", "n_tokens": 354, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 34], "def_symbols": [], "symbols": ["import", "context", "fmt", "impalastudios", "com", "aviation", "schedules", "pkg", "enc", "xgrpc", "google", "golang", "org", "grpc", "health", "grpc_health_v1", "reflection", "net", "signal", "time", "github", "cockroachdb", "errors", "spf13", "cobra", "viper", "internal", "schedules_adapter", "adapter", "grpcv0", "handler", "pbv0", "pgsql", "dnssrvresolver", "log", "grpc_requestid", "requestid", "resolver", "grpc_aircraft", "grpc_clients", "aircraft", "grpc_airlines", "airlines", "grpc_airports", "airports"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/enc\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xgrpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tschedules_adapter \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter\"\n\tgrpcv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/grpc/v0\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\tgrpc_requestid \"go.impalastudios.com/requestid/grpc\"\n\t\"google.golang.org/grpc/resolver\"\n\tgrpc_aircraft \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/aircraft\"\n\tgrpc_airlines \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airlines\"\n\tgrpc_airports \"go.impalastudios.com/aviation/schedules/internal/schedules/adap"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 35, "end_line": 55, "text": "type grpcHealthCheckDbClient interface {\n\tPing(ctx context.Context) error\n}\n\nfunc newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Serve gRPC server\",\n\t\tLong:  \"Serve gRPC server\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGRPC,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\n\treturn cmd\n}\n", "n_tokens": 138, "primary_symbol": "newServeGrpcCommand", "primary_kind": "function", "primary_span": [39, 55], "def_symbols": ["newServeGrpcCommand"], "symbols": ["newServeGrpcCommand", "type", "grpcHealthCheckDbClient", "interface", "Ping", "ctx", "context", "Context", "error", "func", "cobra", "Command", "cmd", "Use", "grpc", "Short", "Serve", "gRPC", "server", "Long", "PreRunE", "string", "return", "viper", "BindPFlags", "Flags", "RunE", "runServeGRPC", "Args", "ExactArgs", "PersistentFlags", "Int", "app", "port", "service"], "doc_head": "type grpcHealthCheckDbClient interface {\n\tPing(ctx context.Context) error\n}\nfunc newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Serve gRPC server\",\n\t\tLong:  \"Serve gRPC server\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGRPC,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 56, "end_line": 152, "text": "func runServeGRPC(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\tlog.AddCallerSkip(1),\n\t)\n\tlog.SetLogger(logger)\n\n\tvar cfg serveConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tresolver.Register(dnssrvresolver.New())\n\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\n\tairportsGrpcAdapter := schedules_adapter.NewAirportGrpcClient(\n\t\tgrpc_airports.NewAirportsServiceClient(xgrpc.MustConnect(cfg.Services.Airports)),\n\t)\n\tairlinesGrpcAdapter := schedules_adapter.NewAirlineGrpcClient(\n\t\tgrpc_airlines.NewAirlinesServiceClient(xgrpc.MustConnect(cfg.Services.Airlines)),\n\t)\n\taircraftGrpcAdapter := schedules_adapter.NewAircraftGrpcClient(\n\t\tgrpc_aircraft.NewAircraftServiceClient(xgrpc.MustConnect(cfg.Services.Aircraft)),\n\t)\n\n\tcipher := enc.NewCBCCipher(viper.GetString(\"app.key\"))\n\trepo := schedules_adapter.NewFlightsPostgresRepository(db, cipher)\n\tsvc := schedules.NewService(repo, airlinesGrpcAdapter, airportsGrpcAdapter, aircraftGrpcAdapter)\n\n\tserver := grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(grpc_requestid.NewServerUnaryInterceptor()),\n\t\tgrpc.StreamInterceptor(grpc_requestid.NewServerStreamInterceptor()),\n\t)\n\tschedulesServiceV0 := grpcv0.NewServer(svc)\n\tpbv0.RegisterSchedulesServiceServer(server, schedulesServiceV0)\n\n\thealthcheck := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(server, healthcheck)\n\tgo func(hc *health.Server, db grpcHealthCheckDbClient) {\n\t\tfor {\n\t\t\tst := grpc_health_v1.HealthCheckResponse_SERVING\n\t\t\tif err := db.Ping(context.TODO()); err != nil {\n\t\t\t\tst = grpc_health_v1.HealthCheckResponse_NOT_SERVING\n\t\t\t}\n\n\t\t\thc.SetServingStatus(\"\", st)\n\n\t\t\ttime.Sleep(time.Minute)\n\t\t}\n\t}(healthcheck, db)\n\n\treflection.Register(server)\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", viper.GetInt(\"app.grpc.port\")))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgo func(s *grpc.Server, lis *net.Listener) {\n\t\tlog.Info(ctx, \"GRPC server started. Ready to accept incoming requests...\")\n\t\tif err := s.Serve(*lis); err != nil {\n\t\t\tlog.Fatal(ctx, fmt.Sprintf(\"Failed to serve gRPC: %v\", err))\n\t\t}\n\t}(server, &listener)\n\n\t<-quit\n\n\tlog.Info(ctx, \"Shutting down the REST server...\")\n\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tserver.GracefulStop()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(ctx, \"REST server shutdown timed out.\")\n\tdefault:\n\t\tlog.Info(ctx, \"REST server shutdown gracefully.\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 705, "primary_symbol": "runServeGRPC", "primary_kind": "function", "primary_span": [56, 152], "def_symbols": ["runServeGRPC"], "symbols": ["runServeGRPC", "func", "cmd", "cobra", "Command", "string", "error", "ctx", "Context", "logger", "log", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "AddCallerSkip", "SetLogger", "var", "cfg", "serveConfig", "err", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "quit", "make", "chan", "Signal", "defer", "close", "signal", "Notify", "Interrupt", "resolver", "Register", "dnssrvresolver", "pgsql", "Connect", "connect", "database", "airportsGrpcAdapter", "schedules_adapter", "NewAirportGrpcClient", "grpc_airports", "NewAirportsServiceClient", "xgrpc", "MustConnect", "Services", "Airports", "airlinesGrpcAdapter", "NewAirlineGrpcClient", "grpc_airlines", "NewAirlinesServiceClient", "Airlines", "aircraftGrpcAdapter", "NewAircraftGrpcClient", "grpc_aircraft", "NewAircraftServiceClient", "Aircraft", "cipher", "enc", "NewCBCCipher", "key", "repo", "NewFlightsPostgresRepository", "svc", "schedules", "NewService", "server", "grpc", "NewServer", "UnaryInterceptor", "grpc_requestid", "NewServerUnaryInterceptor", "StreamInterceptor", "NewServerStreamInterceptor", "schedulesServiceV0", "grpcv0", "pbv0", "RegisterSchedulesServiceServer", "healthcheck", "health", "grpc_health_v1", "RegisterHealthServer", "Server", "grpcHealthCheckDbClient", "for", "HealthCheckResponse_SERVING", "Ping", "context", "TODO", "HealthCheckResponse_NOT_SERVING", "SetServingStatus", "time", "Sleep", "Minute", "reflection", "listener", "net", "Listen", "tcp", "fmt", "Sprintf", "GetInt", "port", "lis", "Listener", "Info", "GRPC", "started", "Ready", "accept", "incoming", "requests", "Serve", "Fatal", "Failed", "serve", "gRPC", "Shutting", "down", "the", "REST", "cancel", "WithTimeout", "Second", "GracefulStop", "select", "case", "Done", "shutdown", "timed", "out", "default", "gracefully"], "doc_head": "func runServeGRPC(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\tlog.AddCallerSkip(1),\n\t)\n\tlog.SetLogger(logger)\n\tvar cfg serveConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tsignal.Notify(quit, os.Interrupt)\n\tresolver.Register(dnssrvresolver.New())\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tairportsGrpcAdapter := schedules_adapter.NewAirportGrpcClient(\n\t\tgrpc_airports.NewAirportsServiceClient(xgrpc.MustConnect(cfg.Services.Airports)),\n\t)\n\tairlinesGrpcAdapter := schedules_adapter.NewAirlineGrpcClient(\n\t\tgrpc_airlines.NewAirlinesServiceClient(xgrpc.MustConnect(cfg.Services.Airlines)),\n\t)\n\taircraftGrpcAdapter := schedules_adapter.NewAircraftGrpcClient(\n\t\tgrpc_aircraft.NewAircraftServiceClient(xgrpc.MustConnect(cfg.Services.Aircraft)),\n\t)\n\tcipher := enc.NewCBCCipher(viper.GetString(\"app.key\"))\n\trepo "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 39, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xgrpc\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/go-playground/validator/v10\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/enc\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\n\t\"go.uber.org/zap/zapcore\"\n\n\t\"github.com/cockroachdb/errors\"\n\tginzap \"github.com/gin-contrib/zap\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tschedules_adapter \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter\"\n\thttphandlers \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\trequestid \"go.impalastudios.com/requestid/gin\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\n\tgrpc_aircraft \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/aircraft\"\n\tgrpc_airlines \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airlines\"\n\tgrpc_airports \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airports\"\n)\n", "n_tokens": 390, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 39], "def_symbols": [], "symbols": ["import", "context", "fmt", "impalastudios", "com", "aviation", "schedules", "pkg", "xgrpc", "net", "http", "signal", "time", "github", "gin", "gonic", "binding", "playground", "validator", "v10", "enc", "i18n", "uber", "org", "zap", "zapcore", "cockroachdb", "errors", "ginzap", "contrib", "spf13", "cobra", "viper", "internal", "schedules_adapter", "adapter", "httphandlers", "handler", "pgsql", "grpc", "dnssrvresolver", "log", "requestid", "google", "golang", "resolver", "grpc_aircraft", "grpc_clients", "aircraft", "grpc_airlines", "airlines", "grpc_airports", "airports"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xgrpc\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/go-playground/validator/v10\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/enc\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"github.com/cockroachdb/errors\"\n\tginzap \"github.com/gin-contrib/zap\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tschedules_adapter \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter\"\n\thttphandlers \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\trequestid \"go.impalastudios.com/requestid/gin\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\tgrpc_aircraft \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/aircraft\"\n\tgrpc_airlines \"go.impalastudios.com/aviation/schedules"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 40, "end_line": 56, "text": "func newServeHttpCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"http\",\n\t\tShort: \"Serve REST API\",\n\t\tLong:  \"Serve REST API\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeHTTP,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.http.port\", 8080, \"HTTP service port\")\n\n\treturn cmd\n}\n", "n_tokens": 116, "primary_symbol": "newServeHttpCommand", "primary_kind": "function", "primary_span": [40, 56], "def_symbols": ["newServeHttpCommand"], "symbols": ["newServeHttpCommand", "func", "cobra", "Command", "cmd", "Use", "http", "Short", "Serve", "REST", "API", "Long", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runServeHTTP", "Args", "ExactArgs", "PersistentFlags", "Int", "app", "port", "HTTP", "service"], "doc_head": "func newServeHttpCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"http\",\n\t\tShort: \"Serve REST API\",\n\t\tLong:  \"Serve REST API\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeHTTP,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().Int(\"app.http.port\", 8080, \"HTTP service port\")\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 57, "end_line": 156, "text": "func runServeHTTP(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\tlog.AddCallerSkip(1),\n\t)\n\tlog.SetLogger(logger)\n\n\tvar cfg serveConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\trouter := gin.New()\n\trouter.Use(requestid.New()...)\n\trouter.Use(\n\t\tginzap.GinzapWithConfig(logger, &ginzap.Config{\n\t\t\tTimeFormat: time.RFC3339,\n\t\t\tUTC:        true,\n\t\t\tSkipPaths:  []string{\"/__gw/health\"},\n\t\t\tContext: func(c *gin.Context) []zapcore.Field {\n\t\t\t\treturn []zapcore.Field{log.RequestIDExtractor(c), zap.String(\"type\", \"access_log\")}\n\t\t\t},\n\t\t}),\n\t\tginzap.RecoveryWithZap(logger, true),\n\t)\n\n\tresolver.Register(dnssrvresolver.New())\n\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\n\tairportsGrpcAdapter := schedules_adapter.NewAirportGrpcClient(\n\t\tgrpc_airports.NewAirportsServiceClient(xgrpc.MustConnect(cfg.Services.Airports)),\n\t)\n\tairlinesGrpcAdapter := schedules_adapter.NewAirlineGrpcClient(\n\t\tgrpc_airlines.NewAirlinesServiceClient(xgrpc.MustConnect(cfg.Services.Airlines)),\n\t)\n\taircraftsGrpcAdapter := schedules_adapter.NewAircraftGrpcClient(\n\t\tgrpc_aircraft.NewAircraftServiceClient(xgrpc.MustConnect(cfg.Services.Aircraft)),\n\t)\n\n\tcipher := enc.NewCBCCipher(viper.GetString(\"app.key\"))\n\trepo := schedules_adapter.NewFlightsPostgresRepository(db, cipher)\n\tsvc := schedules.NewService(repo, airlinesGrpcAdapter, airportsGrpcAdapter, aircraftsGrpcAdapter)\n\n\tgw := router.Group(\"/__gw\")\n\n\thandlers := v0.NewHandler(svc)\n\thandlers.Register(gw)\n\n\thealth := httphandlers.NewHealthHandler(db)\n\thealth.Register(gw)\n\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\ti18n.Register(v)\n\t}\n\n\tsrv := http.Server{\n\t\tAddr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.http.port\")),\n\t\tHandler: router,\n\t}\n\n\tgo func() {\n\t\tif err := srv.ListenAndServe(); err != nil && errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Error(ctx, \"Error occurred while listening.\", zap.Error(err))\n\t\t}\n\t}()\n\n\t<-quit\n\n\tlog.Info(ctx, \"Shutting down the REST server...\")\n\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Error(ctx, \"Error occurred while shutting down.\", zap.Error(err))\n\t}\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(ctx, \"REST server shutdown timed out.\")\n\tdefault:\n\t\tlog.Info(ctx, \"REST server shutdown gracefully.\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 709, "primary_symbol": "runServeHTTP", "primary_kind": "function", "primary_span": [57, 156], "def_symbols": ["runServeHTTP"], "symbols": ["runServeHTTP", "func", "cmd", "cobra", "Command", "string", "error", "ctx", "Context", "logger", "log", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "AddCallerSkip", "SetLogger", "var", "cfg", "serveConfig", "err", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "quit", "make", "chan", "Signal", "defer", "close", "signal", "Notify", "Interrupt", "router", "gin", "Use", "requestid", "ginzap", "GinzapWithConfig", "Config", "TimeFormat", "time", "RFC3339", "UTC", "true", "SkipPaths", "__gw", "health", "zapcore", "Field", "RequestIDExtractor", "zap", "String", "type", "access_log", "RecoveryWithZap", "resolver", "Register", "dnssrvresolver", "pgsql", "Connect", "connect", "database", "airportsGrpcAdapter", "schedules_adapter", "NewAirportGrpcClient", "grpc_airports", "NewAirportsServiceClient", "xgrpc", "MustConnect", "Services", "Airports", "airlinesGrpcAdapter", "NewAirlineGrpcClient", "grpc_airlines", "NewAirlinesServiceClient", "Airlines", "aircraftsGrpcAdapter", "NewAircraftGrpcClient", "grpc_aircraft", "NewAircraftServiceClient", "Aircraft", "cipher", "enc", "NewCBCCipher", "key", "repo", "NewFlightsPostgresRepository", "svc", "schedules", "NewService", "Group", "handlers", "NewHandler", "httphandlers", "NewHealthHandler", "binding", "Validator", "Engine", "validator", "Validate", "i18n", "srv", "http", "Server", "Addr", "fmt", "Sprintf", "GetInt", "port", "Handler", "ListenAndServe", "ErrServerClosed", "Error", "occurred", "while", "listening", "Info", "Shutting", "down", "the", "REST", "server", "cancel", "context", "WithTimeout", "Second", "Shutdown", "shutting", "select", "case", "Done", "shutdown", "timed", "out", "default", "gracefully"], "doc_head": "func runServeHTTP(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t\tlog.AddCallerSkip(1),\n\t)\n\tlog.SetLogger(logger)\n\tvar cfg serveConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tsignal.Notify(quit, os.Interrupt)\n\trouter := gin.New()\n\trouter.Use(requestid.New()...)\n\trouter.Use(\n\t\tginzap.GinzapWithConfig(logger, &ginzap.Config{\n\t\t\tTimeFormat: time.RFC3339,\n\t\t\tUTC:        true,\n\t\t\tSkipPaths:  []string{\"/__gw/health\"},\n\t\t\tContext: func(c *gin.Context) []zapcore.Field {\n\t\t\t\treturn []zapcore.Field{log.RequestIDExtractor(c), zap.String(\"type\", \"access_log\")}\n\t\t\t},\n\t\t}),\n\t\tginzap.RecoveryWithZap(logger, true),\n\t)\n\tresolver.Register(dnssrvresolver.New())\n\tdb, err := pgsql.Connect(ctx, cfg.DB)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to database\")\n\t}\n\tairportsGrpcAdapter := schedules_adapter.NewAirportGrpcClient(\n\t\tgrpc_airports.NewAirportsServiceClient(xgrpc.Must"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/root.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 7, "text": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n", "n_tokens": 31, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 7], "def_symbols": [], "symbols": ["package", "serve", "import", "github", "com", "spf13", "cobra", "impalastudios", "aviation", "schedules", "pkg", "pgsql"], "doc_head": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/root.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 8, "end_line": 31, "text": "func New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve http/gRPC server\",\n\t}\n\n\tcmd.PersistentFlags().String(\"app.key\", \"wji7mQXIwef8jvdOaowTC9BuR3sij0Mv\", \"The application encryption key.\")\n\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5432, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\n\tcmd.PersistentFlags().String(\"services.airports\", \"localhost:50051\", \"airports gRPC server address\")\n\tcmd.PersistentFlags().String(\"services.airlines\", \"localhost:50052\", \"airlines gRPC server address\")\n\tcmd.PersistentFlags().String(\"services.aircraft\", \"localhost:50053\", \"aircraft gRPC server address\")\n\n\tcmd.AddCommand(newServeHttpCommand())\n\tcmd.AddCommand(newServeGrpcCommand())\n\n\treturn cmd\n}\n", "n_tokens": 267, "primary_symbol": "New", "primary_kind": "function", "primary_span": [8, 31], "def_symbols": ["New"], "symbols": ["New", "func", "cobra", "Command", "cmd", "Use", "serve", "Short", "Serve", "http", "gRPC", "server", "PersistentFlags", "String", "app", "key", "wji7mQXIwef8jvdOaowTC9BuR3sij0Mv", "The", "application", "encryption", "StringP", "host", "localhost", "database", "IntP", "port", "dbname", "schedules", "name", "user", "postgres", "password", "toor", "services", "airports", "address", "airlines", "aircraft", "AddCommand", "newServeHttpCommand", "newServeGrpcCommand", "return"], "doc_head": "func New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve http/gRPC server\",\n\t}\n\tcmd.PersistentFlags().String(\"app.key\", \"wji7mQXIwef8jvdOaowTC9BuR3sij0Mv\", \"The application encryption key.\")\n\tcmd.PersistentFlags().StringP(\"db.host\", \"H\", \"localhost\", \"database host\")\n\tcmd.PersistentFlags().IntP(\"db.port\", \"P\", 5432, \"database port\")\n\tcmd.PersistentFlags().StringP(\"db.dbname\", \"d\", \"schedules\", \"database name\")\n\tcmd.PersistentFlags().StringP(\"db.user\", \"U\", \"postgres\", \"database user\")\n\tcmd.PersistentFlags().String(\"db.password\", \"toor\", \"database password\")\n\tcmd.PersistentFlags().String(\"services.airports\", \"localhost:50051\", \"airports gRPC server address\")\n\tcmd.PersistentFlags().String(\"services.airlines\", \"localhost:50052\", \"airlines gRPC server address\")\n\tcmd.PersistentFlags().String(\"services.aircraft\", \"localhost:50053\", \"aircraft gRPC server address\")\n\tcmd.AddCommand(newServeHttpCommand())\n\tcmd.AddCommand(newServeGrpcCommand())\n\treturn cmd\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/root.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 32, "end_line": 40, "text": "type serveConfig struct {\n\tDB       *pgsql.Config\n\tServices struct {\n\t\tAirports string `mapstructure:\"airports\"`\n\t\tAirlines string `mapstructure:\"airlines\"`\n\t\tAircraft string `mapstructure:\"aircraft\"`\n\t} `mapstructure:\"services\"`\n}\n", "n_tokens": 58, "primary_symbol": "", "primary_kind": "", "primary_span": [32, 40], "def_symbols": [], "symbols": ["type", "serveConfig", "struct", "pgsql", "Config", "Services", "Airports", "string", "mapstructure", "airports", "Airlines", "airlines", "Aircraft", "aircraft", "services"], "doc_head": "type serveConfig struct {\n\tDB       *pgsql.Config\n\tServices struct {\n\t\tAirports string `mapstructure:\"airports\"`\n\t\tAirlines string `mapstructure:\"airlines\"`\n\t\tAircraft string `mapstructure:\"aircraft\"`\n\t} `mapstructure:\"services\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package schedules\n\nimport \"time\"\n\ntype FlightBoardType int\n\nconst (\n\tFlightBoardTypeDepartures FlightBoardType = iota\n\tFlightBoardTypeArrivals\n)\n\n// FlightOperationalStatus represents the status of a flight\ntype FlightOperationalStatus string\n\nconst (\n\tFlightOperationalStatusLanded    FlightOperationalStatus = \"LANDED\"\n\tFlightOperationalStatusDiverted  FlightOperationalStatus = \"DIVERTED\"\n\tFlightOperationalStatusCancelled FlightOperationalStatus = \"CANCELLED\"\n\tFlightOperationalStatusAirborne  FlightOperationalStatus = \"AIRBORNE\"\n\tFlightOperationalStatusScheduled FlightOperationalStatus = \"SCHEDULED\"\n)\n", "n_tokens": 142, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 22], "def_symbols": [], "symbols": ["package", "schedules", "import", "time", "type", "FlightBoardType", "int", "const", "FlightBoardTypeDepartures", "iota", "FlightBoardTypeArrivals", "FlightOperationalStatus", "represents", "the", "status", "flight", "string", "FlightOperationalStatusLanded", "LANDED", "FlightOperationalStatusDiverted", "DIVERTED", "FlightOperationalStatusCancelled", "CANCELLED", "FlightOperationalStatusAirborne", "AIRBORNE", "FlightOperationalStatusScheduled", "SCHEDULED"], "doc_head": "package schedules\nimport \"time\"\ntype FlightBoardType int\nconst (\n\tFlightBoardTypeDepartures FlightBoardType = iota\n\tFlightBoardTypeArrivals\n)\n// FlightOperationalStatus represents the status of a flight\ntype FlightOperationalStatus string\nconst (\n\tFlightOperationalStatusLanded    FlightOperationalStatus = \"LANDED\"\n\tFlightOperationalStatusDiverted  FlightOperationalStatus = \"DIVERTED\"\n\tFlightOperationalStatusCancelled FlightOperationalStatus = \"CANCELLED\"\n\tFlightOperationalStatusAirborne  FlightOperationalStatus = \"AIRBORNE\"\n\tFlightOperationalStatusScheduled FlightOperationalStatus = \"SCHEDULED\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 44, "text": "// FlightOperationalStatusValues returns all possible values for FlightStatus\nfunc FlightOperationalStatusValues() []string {\n\treturn []string{\n\t\tstring(FlightOperationalStatusLanded),\n\t\tstring(FlightOperationalStatusDiverted),\n\t\tstring(FlightOperationalStatusCancelled),\n\t\tstring(FlightOperationalStatusAirborne),\n\t\tstring(FlightOperationalStatusScheduled),\n\t}\n}\n\n// FlightTimingStatus represents the status of a flight departure or arrival\ntype FlightTimingStatus string\n\nconst (\n\tFlightTimingStatusOnTime    FlightTimingStatus = \"ON_TIME\"\n\tFlightTimingStatusNoStatus  FlightTimingStatus = \"NO_STATUS\"\n\tFlightTimingStatusCancelled FlightTimingStatus = \"CANCELLED\"\n\tFlightTimingStatusDelayed   FlightTimingStatus = \"DELAYED\"\n\tFlightTimingStatusEarly     FlightTimingStatus = \"EARLY\"\n)\n", "n_tokens": 174, "primary_symbol": "FlightOperationalStatusValues", "primary_kind": "function", "primary_span": [24, 44], "def_symbols": ["FlightOperationalStatusValues"], "symbols": ["FlightOperationalStatusValues", "returns", "all", "possible", "values", "for", "FlightStatus", "func", "string", "return", "FlightOperationalStatusLanded", "FlightOperationalStatusDiverted", "FlightOperationalStatusCancelled", "FlightOperationalStatusAirborne", "FlightOperationalStatusScheduled", "FlightTimingStatus", "represents", "the", "status", "flight", "departure", "arrival", "type", "const", "FlightTimingStatusOnTime", "ON_TIME", "FlightTimingStatusNoStatus", "NO_STATUS", "FlightTimingStatusCancelled", "CANCELLED", "FlightTimingStatusDelayed", "DELAYED", "FlightTimingStatusEarly", "EARLY"], "doc_head": "// FlightOperationalStatusValues returns all possible values for FlightStatus\nfunc FlightOperationalStatusValues() []string {\n\treturn []string{\n\t\tstring(FlightOperationalStatusLanded),\n\t\tstring(FlightOperationalStatusDiverted),\n\t\tstring(FlightOperationalStatusCancelled),\n\t\tstring(FlightOperationalStatusAirborne),\n\t\tstring(FlightOperationalStatusScheduled),\n\t}\n}\n// FlightTimingStatus represents the status of a flight departure or arrival\ntype FlightTimingStatus string\nconst (\n\tFlightTimingStatusOnTime    FlightTimingStatus = \"ON_TIME\"\n\tFlightTimingStatusNoStatus  FlightTimingStatus = \"NO_STATUS\"\n\tFlightTimingStatusCancelled FlightTimingStatus = \"CANCELLED\"\n\tFlightTimingStatusDelayed   FlightTimingStatus = \"DELAYED\"\n\tFlightTimingStatusEarly     FlightTimingStatus = \"EARLY\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 45, "end_line": 61, "text": "// FlightTimingStatusValues returns all possible values\nfunc FlightTimingStatusValues() []string {\n\treturn []string{\n\t\tstring(FlightTimingStatusOnTime),\n\t\tstring(FlightTimingStatusNoStatus),\n\t\tstring(FlightTimingStatusCancelled),\n\t\tstring(FlightTimingStatusDelayed),\n\t\tstring(FlightTimingStatusEarly),\n\t}\n}\n\ntype (\n\tCodeshare struct {\n\t\tAirline      *Airline\n\t\tFlightNumber int\n\t}\n", "n_tokens": 92, "primary_symbol": "FlightTimingStatusValues", "primary_kind": "function", "primary_span": [46, 61], "def_symbols": ["FlightTimingStatusValues"], "symbols": ["FlightTimingStatusValues", "returns", "all", "possible", "values", "func", "string", "return", "FlightTimingStatusOnTime", "FlightTimingStatusNoStatus", "FlightTimingStatusCancelled", "FlightTimingStatusDelayed", "FlightTimingStatusEarly", "type", "Codeshare", "struct", "Airline", "FlightNumber", "int"], "doc_head": "// FlightTimingStatusValues returns all possible values\nfunc FlightTimingStatusValues() []string {\n\treturn []string{\n\t\tstring(FlightTimingStatusOnTime),\n\t\tstring(FlightTimingStatusNoStatus),\n\t\tstring(FlightTimingStatusCancelled),\n\t\tstring(FlightTimingStatusDelayed),\n\t\tstring(FlightTimingStatusEarly),\n\t}\n}\ntype (\n\tCodeshare struct {\n\t\tAirline      *Airline\n\t\tFlightNumber int\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 62, "end_line": 89, "text": "\tFlight struct {\n\t\tID                   int64\n\t\tFlightID             string\n\t\tConnectingFlightID   int64\n\t\tSequence             int\n\t\tStatus               FlightOperationalStatus\n\t\tDepartureStatus      FlightTimingStatus\n\t\tArrivalStatus        FlightTimingStatus\n\t\tAirline              *Airline\n\t\tFlightNumber         int\n\t\tDepartureAirport     *Airport\n\t\tArrivalAirport       *Airport\n\t\tAircraft             *Aircraft\n\t\tScheduledDepartureAt time.Time\n\t\tExpectedDepartureAt  time.Time\n\t\tActualDepartureAt    time.Time\n\t\tScheduledArrivalAt   time.Time\n\t\tExpectedArrivalAt    time.Time\n\t\tActualArrivalAt      time.Time\n\t\tCodeshare            []*Codeshare\n\t}\n)\n\ntype (\n\tCountry struct {\n\t\tID   string\n\t\tName map[string]string\n\t}", "n_tokens": 192, "primary_symbol": "", "primary_kind": "", "primary_span": [62, 89], "def_symbols": [], "symbols": ["Flight", "struct", "int64", "FlightID", "string", "ConnectingFlightID", "Sequence", "int", "Status", "FlightOperationalStatus", "DepartureStatus", "FlightTimingStatus", "ArrivalStatus", "Airline", "FlightNumber", "DepartureAirport", "Airport", "ArrivalAirport", "Aircraft", "ScheduledDepartureAt", "time", "Time", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Codeshare", "type", "Country", "Name", "map"], "doc_head": "\tFlight struct {\n\t\tID                   int64\n\t\tFlightID             string\n\t\tConnectingFlightID   int64\n\t\tSequence             int\n\t\tStatus               FlightOperationalStatus\n\t\tDepartureStatus      FlightTimingStatus\n\t\tArrivalStatus        FlightTimingStatus\n\t\tAirline              *Airline\n\t\tFlightNumber         int\n\t\tDepartureAirport     *Airport\n\t\tArrivalAirport       *Airport\n\t\tAircraft             *Aircraft\n\t\tScheduledDepartureAt time.Time\n\t\tExpectedDepartureAt  time.Time\n\t\tActualDepartureAt    time.Time\n\t\tScheduledArrivalAt   time.Time\n\t\tExpectedArrivalAt    time.Time\n\t\tActualArrivalAt      time.Time\n\t\tCodeshare            []*Codeshare\n\t}\n)\ntype (\n\tCountry struct {\n\t\tID   string\n\t\tName map[string]string\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 90, "end_line": 124, "text": "\tCity struct {\n\t\tID       int\n\t\tName     map[string]string\n\t\tState    *string\n\t\tTimezone string\n\t\tCountry  *Country\n\t}\n)\n\ntype (\n\tAirport struct {\n\t\tID              *string\n\t\tDesignator      string\n\t\tIATA            *string\n\t\tICAO            *string\n\t\tFAA             *string\n\t\tClassification  uint\n\t\tName            map[string]string\n\t\tShortName       map[string]string\n\t\tDescription     map[string]string\n\t\tCity            *City\n\t\tLatitude        float64\n\t\tLongitude       float64\n\t\tElevation       int\n\t\tNumberOfRunways uint\n\t\tWebsiteURL      *string\n\t\tWikipediaURL    map[string]string\n\t\tFacebookURL     *string\n\t\tTwitterURL      *string\n\t\tCreatedAt       time.Time\n\t\tUpdatedAt       time.Time\n\t}\n)\n\ntype (", "n_tokens": 195, "primary_symbol": "", "primary_kind": "", "primary_span": [90, 124], "def_symbols": [], "symbols": ["City", "struct", "int", "Name", "map", "string", "State", "Timezone", "Country", "type", "Airport", "Designator", "IATA", "ICAO", "FAA", "Classification", "uint", "ShortName", "Description", "Latitude", "float64", "Longitude", "Elevation", "NumberOfRunways", "WebsiteURL", "WikipediaURL", "FacebookURL", "TwitterURL", "CreatedAt", "time", "Time", "UpdatedAt"], "doc_head": "\tCity struct {\n\t\tID       int\n\t\tName     map[string]string\n\t\tState    *string\n\t\tTimezone string\n\t\tCountry  *Country\n\t}\n)\ntype (\n\tAirport struct {\n\t\tID              *string\n\t\tDesignator      string\n\t\tIATA            *string\n\t\tICAO            *string\n\t\tFAA             *string\n\t\tClassification  uint\n\t\tName            map[string]string\n\t\tShortName       map[string]string\n\t\tDescription     map[string]string\n\t\tCity            *City\n\t\tLatitude        float64\n\t\tLongitude       float64\n\t\tElevation       int\n\t\tNumberOfRunways uint\n\t\tWebsiteURL      *string\n\t\tWikipediaURL    map[string]string\n\t\tFacebookURL     *string\n\t\tTwitterURL      *string\n\t\tCreatedAt       time.Time\n\t\tUpdatedAt       time.Time\n\t}\n)\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 125, "end_line": 156, "text": "\tAirline struct {\n\t\tID                         *string\n\t\tDesignator                 string\n\t\tIATA                       *string\n\t\tICAO                       *string\n\t\tClassification             uint\n\t\tName                       string\n\t\tDescription                map[string]string\n\t\tWebsiteURL                 *string\n\t\tWikipediaURL               map[string]string\n\t\tFacebookURL                *string\n\t\tTwitterURL                 *string\n\t\tReservationTelephoneNumber *string\n\t\tHubAirport                 *Airport\n\t\tImages                     map[string]string\n\t\tCreatedAt                  time.Time\n\t\tUpdatedAt                  time.Time\n\t}\n)\n\ntype (\n\tSpecification struct {\n\t\tEngine          *string\n\t\tAverageSpeed    *float32\n\t\tWideBody        *float32\n\t\tWingspan        *float32\n\t\tLength          *float32\n\t\tHeight          *float32\n\t\tSeatingCapacity *int\n\t\tFlightRange     *float32\n\t\tCrewSize        *int\n\t}", "n_tokens": 209, "primary_symbol": "", "primary_kind": "", "primary_span": [125, 156], "def_symbols": [], "symbols": ["Airline", "struct", "string", "Designator", "IATA", "ICAO", "Classification", "uint", "Name", "Description", "map", "WebsiteURL", "WikipediaURL", "FacebookURL", "TwitterURL", "ReservationTelephoneNumber", "HubAirport", "Airport", "Images", "CreatedAt", "time", "Time", "UpdatedAt", "type", "Specification", "Engine", "AverageSpeed", "float32", "WideBody", "Wingspan", "Length", "Height", "SeatingCapacity", "int", "FlightRange", "CrewSize"], "doc_head": "\tAirline struct {\n\t\tID                         *string\n\t\tDesignator                 string\n\t\tIATA                       *string\n\t\tICAO                       *string\n\t\tClassification             uint\n\t\tName                       string\n\t\tDescription                map[string]string\n\t\tWebsiteURL                 *string\n\t\tWikipediaURL               map[string]string\n\t\tFacebookURL                *string\n\t\tTwitterURL                 *string\n\t\tReservationTelephoneNumber *string\n\t\tHubAirport                 *Airport\n\t\tImages                     map[string]string\n\t\tCreatedAt                  time.Time\n\t\tUpdatedAt                  time.Time\n\t}\n)\ntype (\n\tSpecification struct {\n\t\tEngine          *string\n\t\tAverageSpeed    *float32\n\t\tWideBody        *float32\n\t\tWingspan        *float32\n\t\tLength          *float32\n\t\tHeight          *float32\n\t\tSeatingCapacity *int\n\t\tFlightRange     *float32\n\t\tCrewSize        *int\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/models.go", "rel_path": "internal/schedules/models.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 157, "end_line": 194, "text": "\tAircraft struct {\n\t\tID            string\n\t\tType          string\n\t\tName          string\n\t\tDescription   map[string]string\n\t\tWikipediaURL  map[string]string\n\t\tImages        map[string]string\n\t\tSpecification *Specification\n\t\tCreatedAt     time.Time\n\t\tUpdatedAt     time.Time\n\t}\n)\n\ntype Schedule struct {\n\tDepartureAirport *Airport\n\tArrivalAirport   *Airport\n\tMainCarrier      *Airline\n\tFlightNumber     int\n\tFlights          []*Flight\n}\n\ntype Page[T any] struct {\n\tItems    []T\n\tNext     *string\n\tPrevious *string\n\tTotal    int\n}\n\ntype UniqueRoutes struct {\n\tAirline *Airline\n\tRoutes  []*Route\n}\n\ntype Route struct {\n\tA *Airport\n\tB *Airport\n}\n", "n_tokens": 169, "primary_symbol": "", "primary_kind": "", "primary_span": [157, 194], "def_symbols": [], "symbols": ["Aircraft", "struct", "string", "Type", "Name", "Description", "map", "WikipediaURL", "Images", "Specification", "CreatedAt", "time", "Time", "UpdatedAt", "type", "Schedule", "DepartureAirport", "Airport", "ArrivalAirport", "MainCarrier", "Airline", "FlightNumber", "int", "Flights", "Flight", "Page", "any", "Items", "Next", "Previous", "Total", "UniqueRoutes", "Routes", "Route"], "doc_head": "\tAircraft struct {\n\t\tID            string\n\t\tType          string\n\t\tName          string\n\t\tDescription   map[string]string\n\t\tWikipediaURL  map[string]string\n\t\tImages        map[string]string\n\t\tSpecification *Specification\n\t\tCreatedAt     time.Time\n\t\tUpdatedAt     time.Time\n\t}\n)\ntype Schedule struct {\n\tDepartureAirport *Airport\n\tArrivalAirport   *Airport\n\tMainCarrier      *Airline\n\tFlightNumber     int\n\tFlights          []*Flight\n}\ntype Page[T any] struct {\n\tItems    []T\n\tNext     *string\n\tPrevious *string\n\tTotal    int\n}\ntype UniqueRoutes struct {\n\tAirline *Airline\n\tRoutes  []*Route\n}\ntype Route struct {\n\tA *Airport\n\tB *Airport\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 13, "text": "package schedules\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/golang-collections/collections/set\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n//go:generate mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (", "n_tokens": 68, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 13], "def_symbols": [], "symbols": ["package", "schedules", "import", "context", "time", "github", "com", "golang", "collections", "set", "impalastudios", "log", "uber", "org", "zap", "generate", "mockgen", "source", "service", "destination", "mocks", "service_mocks", "type"], "doc_head": "package schedules\nimport (\n\t\"context\"\n\t\"time\"\n\t\"github.com/golang-collections/collections/set\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n//go:generate mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 14, "end_line": 29, "text": "\trepository interface {\n\t\tSearch(context.Context, *FlightSearchQuery) (*Page[*Schedule], error)\n\t\tGet(context.Context, string) (*Flight, error)\n\t\tGetBatch(context.Context, []string) ([]*Flight, error)\n\t\tGetByFlightDesignator(context.Context, *FlightDesignatorQuery) (*Page[*Schedule], error)\n\t\tGetAirportFlightBoard(context.Context, *AirportFlightBoardQuery) (*Page[*Flight], error)\n\t\tGetAirlineFlightBoard(context.Context, *AirlineFlightBoardQuery) (*Page[*Flight], error)\n\t\tGetRandomFlight(context.Context, *RandomFlightQuery) (*Flight, error)\n\t\tGetAirlineUniqueRoutes(context.Context, string, time.Time) (*UniqueRoutes, error)\n\t}\n\n\tairlinesClient interface {\n\t\tGet(context.Context, string, time.Time) (*Airline, error)\n\t\tBatchGet(context.Context, []string, time.Time) ([]*Airline, error)\n\t}\n", "n_tokens": 198, "primary_symbol": "", "primary_kind": "", "primary_span": [14, 29], "def_symbols": [], "symbols": ["repository", "interface", "Search", "context", "Context", "FlightSearchQuery", "Page", "Schedule", "error", "Get", "string", "Flight", "GetBatch", "GetByFlightDesignator", "FlightDesignatorQuery", "GetAirportFlightBoard", "AirportFlightBoardQuery", "GetAirlineFlightBoard", "AirlineFlightBoardQuery", "GetRandomFlight", "RandomFlightQuery", "GetAirlineUniqueRoutes", "time", "Time", "UniqueRoutes", "airlinesClient", "Airline", "BatchGet"], "doc_head": "\trepository interface {\n\t\tSearch(context.Context, *FlightSearchQuery) (*Page[*Schedule], error)\n\t\tGet(context.Context, string) (*Flight, error)\n\t\tGetBatch(context.Context, []string) ([]*Flight, error)\n\t\tGetByFlightDesignator(context.Context, *FlightDesignatorQuery) (*Page[*Schedule], error)\n\t\tGetAirportFlightBoard(context.Context, *AirportFlightBoardQuery) (*Page[*Flight], error)\n\t\tGetAirlineFlightBoard(context.Context, *AirlineFlightBoardQuery) (*Page[*Flight], error)\n\t\tGetRandomFlight(context.Context, *RandomFlightQuery) (*Flight, error)\n\t\tGetAirlineUniqueRoutes(context.Context, string, time.Time) (*UniqueRoutes, error)\n\t}\n\tairlinesClient interface {\n\t\tGet(context.Context, string, time.Time) (*Airline, error)\n\t\tBatchGet(context.Context, []string, time.Time) ([]*Airline, error)\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 30, "end_line": 59, "text": "\tairportsClient interface {\n\t\tGet(context.Context, string, time.Time) (*Airport, error)\n\t\tGetByCity(context.Context, int64, time.Time) ([]*Airport, error)\n\t\tBatchGet(context.Context, []string, time.Time) ([]*Airport, error)\n\t}\n\n\taircraftClient interface {\n\t\tGet(context.Context, string) (*Aircraft, error)\n\t\tBatchGet(context.Context, []string) ([]*Aircraft, error)\n\t}\n)\n\n// Service is the schedules service\ntype Service struct {\n\trepo     repository\n\tairlines airlinesClient\n\tairports airportsClient\n\taircraft aircraftClient\n}\n\n// NewService creates a new schedules service\nfunc NewService(repo repository, airlines airlinesClient, airports airportsClient, aircraft aircraftClient) *Service {\n\treturn &Service{\n\t\trepo:     repo,\n\t\tairlines: airlines,\n\t\tairports: airports,\n\t\taircraft: aircraft,\n\t}\n}\n", "n_tokens": 200, "primary_symbol": "NewService", "primary_kind": "function", "primary_span": [51, 59], "def_symbols": ["NewService"], "symbols": ["NewService", "airportsClient", "interface", "Get", "context", "Context", "string", "time", "Time", "Airport", "error", "GetByCity", "int64", "BatchGet", "aircraftClient", "Aircraft", "Service", "the", "schedules", "service", "type", "struct", "repo", "repository", "airlines", "airlinesClient", "airports", "aircraft", "creates", "new", "func", "return"], "doc_head": "\tairportsClient interface {\n\t\tGet(context.Context, string, time.Time) (*Airport, error)\n\t\tGetByCity(context.Context, int64, time.Time) ([]*Airport, error)\n\t\tBatchGet(context.Context, []string, time.Time) ([]*Airport, error)\n\t}\n\taircraftClient interface {\n\t\tGet(context.Context, string) (*Aircraft, error)\n\t\tBatchGet(context.Context, []string) ([]*Aircraft, error)\n\t}\n)\n// Service is the schedules service\ntype Service struct {\n\trepo     repository\n\tairlines airlinesClient\n\tairports airportsClient\n\taircraft aircraftClient\n}\n// NewService creates a new schedules service\nfunc NewService(repo repository, airlines airlinesClient, airports airportsClient, aircraft aircraftClient) *Service {\n\treturn &Service{\n\t\trepo:     repo,\n\t\tairlines: airlines,\n\t\tairports: airports,\n\t\taircraft: aircraft,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 60, "end_line": 97, "text": "// FlightSearchQuery search for flights\ntype FlightSearchQuery struct {\n\tDepartureAirports []string\n\tArrivalAirports   []string\n\tDepartureCity     int64\n\tArrivalCity       int64\n\tDepartureDate     time.Time\n\tAirline           *string\n\tCursor            *string\n\tLimit             uint\n}\n\n// FlightDesignatorQuery search for flights\ntype FlightDesignatorQuery struct {\n\tAirline       string\n\tNumber        int\n\tDepartureDate time.Time\n\tCursor        *string\n\tLimit         uint\n}\n\n// AirportFlightBoardQuery search for flights\ntype AirportFlightBoardQuery struct {\n\tAirport string\n\tType    FlightBoardType\n\tDate    time.Time\n\tCursor  *string\n\tLimit   uint\n}\n\n// AirlineFlightBoardQuery search for flights\ntype AirlineFlightBoardQuery struct {\n\tAirline string\n\tDate    time.Time\n\tCursor  *string\n\tLimit   uint\n}\n", "n_tokens": 204, "primary_symbol": "", "primary_kind": "", "primary_span": [60, 97], "def_symbols": [], "symbols": ["FlightSearchQuery", "search", "for", "flights", "type", "struct", "DepartureAirports", "string", "ArrivalAirports", "DepartureCity", "int64", "ArrivalCity", "DepartureDate", "time", "Time", "Airline", "Cursor", "Limit", "uint", "FlightDesignatorQuery", "Number", "int", "AirportFlightBoardQuery", "Airport", "Type", "FlightBoardType", "Date", "AirlineFlightBoardQuery"], "doc_head": "// FlightSearchQuery search for flights\ntype FlightSearchQuery struct {\n\tDepartureAirports []string\n\tArrivalAirports   []string\n\tDepartureCity     int64\n\tArrivalCity       int64\n\tDepartureDate     time.Time\n\tAirline           *string\n\tCursor            *string\n\tLimit             uint\n}\n// FlightDesignatorQuery search for flights\ntype FlightDesignatorQuery struct {\n\tAirline       string\n\tNumber        int\n\tDepartureDate time.Time\n\tCursor        *string\n\tLimit         uint\n}\n// AirportFlightBoardQuery search for flights\ntype AirportFlightBoardQuery struct {\n\tAirport string\n\tType    FlightBoardType\n\tDate    time.Time\n\tCursor  *string\n\tLimit   uint\n}\n// AirlineFlightBoardQuery search for flights\ntype AirlineFlightBoardQuery struct {\n\tAirline string\n\tDate    time.Time\n\tCursor  *string\n\tLimit   uint\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 98, "end_line": 145, "text": "func (s *Service) Search(ctx context.Context, q *FlightSearchQuery) (*Page[*Schedule], error) {\n\tvar err error\n\tif q.DepartureCity > 0 {\n\t\tapts, err := s.getAirportDesignatorsForCity(ctx, q.DepartureCity, q.DepartureDate)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot retrieve  airports for departure city.\", zap.Int64(\"departure_city\", q.DepartureCity), zap.Error(err))\n\t\t\treturn nil, err\n\t\t}\n\t\tlog.Debug(ctx, \"Airport designators for departure city.\", zap.Int64(\"departure_city\", q.DepartureCity), zap.Strings(\"designators\", apts))\n\t\tq.DepartureAirports = apts\n\t}\n\n\tif q.ArrivalCity > 0 {\n\t\tapts, err := s.getAirportDesignatorsForCity(ctx, q.ArrivalCity, q.DepartureDate)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot retrieve  airports for arrival city.\", zap.Int64(\"arrival_city\", q.ArrivalCity), zap.Error(err))\n\t\t\treturn nil, err\n\t\t}\n\n\t\tlog.Debug(ctx, \"Airport designators for arrival city.\", zap.Int64(\"arrival_city\", q.ArrivalCity), zap.Strings(\"designators\", apts))\n\t\tq.ArrivalAirports = apts\n\t}\n\n\tlog.Debug(ctx, \"Search query.\", zap.Any(\"q\", q))\n\n\tpage, err := s.repo.Search(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar flights []*Flight\n\n\tfor sc := range page.Items {\n\t\tflights = append(flights, page.Items[sc].Flights...)\n\t}\n\n\tif len(flights) > 0 {\n\t\ts.enrichFlights(ctx, flights)\n\t}\n\n\tfor sc := range page.Items {\n\t\tpage.Items[sc].MainCarrier = page.Items[sc].Flights[0].Airline\n\t\tpage.Items[sc].DepartureAirport = page.Items[sc].Flights[0].DepartureAirport\n\t\tpage.Items[sc].ArrivalAirport = page.Items[sc].Flights[len(page.Items[sc].Flights)-1].ArrivalAirport\n\t}\n\n\treturn page, nil\n}\n", "n_tokens": 474, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [98, 145], "def_symbols": ["Search"], "symbols": ["Search", "func", "Service", "ctx", "context", "Context", "FlightSearchQuery", "Page", "Schedule", "error", "var", "err", "DepartureCity", "apts", "getAirportDesignatorsForCity", "DepartureDate", "nil", "log", "Error", "Cannot", "retrieve", "airports", "for", "departure", "city", "zap", "Int64", "departure_city", "return", "Debug", "Airport", "designators", "Strings", "DepartureAirports", "ArrivalCity", "arrival", "arrival_city", "ArrivalAirports", "query", "Any", "page", "repo", "flights", "Flight", "range", "Items", "append", "Flights", "len", "enrichFlights", "MainCarrier", "Airline", "DepartureAirport", "ArrivalAirport"], "doc_head": "func (s *Service) Search(ctx context.Context, q *FlightSearchQuery) (*Page[*Schedule], error) {\n\tvar err error\n\tif q.DepartureCity > 0 {\n\t\tapts, err := s.getAirportDesignatorsForCity(ctx, q.DepartureCity, q.DepartureDate)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot retrieve  airports for departure city.\", zap.Int64(\"departure_city\", q.DepartureCity), zap.Error(err))\n\t\t\treturn nil, err\n\t\t}\n\t\tlog.Debug(ctx, \"Airport designators for departure city.\", zap.Int64(\"departure_city\", q.DepartureCity), zap.Strings(\"designators\", apts))\n\t\tq.DepartureAirports = apts\n\t}\n\tif q.ArrivalCity > 0 {\n\t\tapts, err := s.getAirportDesignatorsForCity(ctx, q.ArrivalCity, q.DepartureDate)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot retrieve  airports for arrival city.\", zap.Int64(\"arrival_city\", q.ArrivalCity), zap.Error(err))\n\t\t\treturn nil, err\n\t\t}\n\t\tlog.Debug(ctx, \"Airport designators for arrival city.\", zap.Int64(\"arrival_city\", q.ArrivalCity), zap.Strings(\"designators\", apts))\n\t\tq.ArrivalAirports = apts\n\t}\n\tlog.Debug(ctx, \"Search query.\", zap.Any(\"q\", q))\n\tpage, err := s.repo.Search(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar flights []*Flight\n\tfor sc := range page.Items {\n\t\tflights = append(fligh"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 146, "end_line": 171, "text": "func (s *Service) Get(ctx context.Context, id string) (*Flight, error) {\n\tf, err := s.repo.Get(ctx, id)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot get flight.\", zap.String(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\ts.enrichFlights(ctx, []*Flight{f})\n\n\treturn f, nil\n}\n\nfunc (s *Service) GetBatch(ctx context.Context, ids []string) ([]*Flight, error) {\n\tfs, err := s.repo.GetBatch(ctx, ids)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot get batch of flights.\", zap.Strings(\"ids\", ids), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\tif len(fs) > 0 {\n\t\ts.enrichFlights(ctx, fs)\n\t}\n\n\treturn fs, nil\n}\n", "n_tokens": 180, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [146, 171], "def_symbols": ["Get", "GetBatch"], "symbols": ["Get", "GetBatch", "func", "Service", "ctx", "context", "Context", "string", "Flight", "error", "err", "repo", "nil", "log", "Error", "Cannot", "get", "flight", "zap", "String", "return", "enrichFlights", "ids", "batch", "flights", "Strings", "len"], "doc_head": "func (s *Service) Get(ctx context.Context, id string) (*Flight, error) {\n\tf, err := s.repo.Get(ctx, id)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot get flight.\", zap.String(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\ts.enrichFlights(ctx, []*Flight{f})\n\treturn f, nil\n}\nfunc (s *Service) GetBatch(ctx context.Context, ids []string) ([]*Flight, error) {\n\tfs, err := s.repo.GetBatch(ctx, ids)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot get batch of flights.\", zap.Strings(\"ids\", ids), zap.Error(err))\n\t\treturn nil, err\n\t}\n\tif len(fs) > 0 {\n\t\ts.enrichFlights(ctx, fs)\n\t}\n\treturn fs, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 172, "end_line": 189, "text": "type RandomFlightQuery struct {\n\tDepartureDate          time.Time\n\tMinDurationToDeparture time.Duration\n\tMaxDurationToDeparture time.Duration\n\tMaxFlightDuration      time.Duration\n}\n\nfunc (s *Service) GetRandomFlight(ctx context.Context, q *RandomFlightQuery) (*Flight, error) {\n\tf, err := s.repo.GetRandomFlight(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts.enrichFlights(ctx, []*Flight{f})\n\n\treturn f, nil\n}\n", "n_tokens": 110, "primary_symbol": "GetRandomFlight", "primary_kind": "function", "primary_span": [179, 189], "def_symbols": ["GetRandomFlight"], "symbols": ["GetRandomFlight", "type", "RandomFlightQuery", "struct", "DepartureDate", "time", "Time", "MinDurationToDeparture", "Duration", "MaxDurationToDeparture", "MaxFlightDuration", "func", "Service", "ctx", "context", "Context", "Flight", "error", "err", "repo", "nil", "return", "enrichFlights"], "doc_head": "type RandomFlightQuery struct {\n\tDepartureDate          time.Time\n\tMinDurationToDeparture time.Duration\n\tMaxDurationToDeparture time.Duration\n\tMaxFlightDuration      time.Duration\n}\nfunc (s *Service) GetRandomFlight(ctx context.Context, q *RandomFlightQuery) (*Flight, error) {\n\tf, err := s.repo.GetRandomFlight(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.enrichFlights(ctx, []*Flight{f})\n\treturn f, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 190, "end_line": 215, "text": "func (s *Service) GetByFlightDesignator(ctx context.Context, in *FlightDesignatorQuery) (*Page[*Schedule], error) {\n\tpage, err := s.repo.GetByFlightDesignator(ctx, in)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot get flight.\", zap.Any(\"query\", in), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\tvar flights []*Flight\n\n\tfor sc := range page.Items {\n\t\tflights = append(flights, page.Items[sc].Flights...)\n\t}\n\n\tif len(flights) > 0 {\n\t\ts.enrichFlights(ctx, flights)\n\t}\n\n\tfor sc := range page.Items {\n\t\tpage.Items[sc].MainCarrier = page.Items[sc].Flights[0].Airline\n\t\tpage.Items[sc].DepartureAirport = page.Items[sc].Flights[0].DepartureAirport\n\t\tpage.Items[sc].ArrivalAirport = page.Items[sc].Flights[len(page.Items[sc].Flights)-1].ArrivalAirport\n\t}\n\n\treturn page, nil\n}\n", "n_tokens": 223, "primary_symbol": "GetByFlightDesignator", "primary_kind": "function", "primary_span": [190, 215], "def_symbols": ["GetByFlightDesignator"], "symbols": ["GetByFlightDesignator", "func", "Service", "ctx", "context", "Context", "FlightDesignatorQuery", "Page", "Schedule", "error", "page", "err", "repo", "nil", "log", "Error", "Cannot", "get", "flight", "zap", "Any", "query", "return", "var", "flights", "Flight", "for", "range", "Items", "append", "Flights", "len", "enrichFlights", "MainCarrier", "Airline", "DepartureAirport", "ArrivalAirport"], "doc_head": "func (s *Service) GetByFlightDesignator(ctx context.Context, in *FlightDesignatorQuery) (*Page[*Schedule], error) {\n\tpage, err := s.repo.GetByFlightDesignator(ctx, in)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot get flight.\", zap.Any(\"query\", in), zap.Error(err))\n\t\treturn nil, err\n\t}\n\tvar flights []*Flight\n\tfor sc := range page.Items {\n\t\tflights = append(flights, page.Items[sc].Flights...)\n\t}\n\tif len(flights) > 0 {\n\t\ts.enrichFlights(ctx, flights)\n\t}\n\tfor sc := range page.Items {\n\t\tpage.Items[sc].MainCarrier = page.Items[sc].Flights[0].Airline\n\t\tpage.Items[sc].DepartureAirport = page.Items[sc].Flights[0].DepartureAirport\n\t\tpage.Items[sc].ArrivalAirport = page.Items[sc].Flights[len(page.Items[sc].Flights)-1].ArrivalAirport\n\t}\n\treturn page, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 216, "end_line": 231, "text": "// GetAirportFlightBoard returns a list of paginated direct flights from an airport for a specific date\nfunc (s *Service) GetAirportFlightBoard(ctx context.Context, q *AirportFlightBoardQuery) (*Page[*Flight], error) {\n\tpage, err := s.repo.GetAirportFlightBoard(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(page.Items) > 0 {\n\t\ts.enrichFlights(ctx, page.Items)\n\t}\n\n\tlog.Debug(ctx, \"flights retrieved successfully\", zap.Any(\"flights\", page))\n\n\treturn page, err\n}\n", "n_tokens": 123, "primary_symbol": "GetAirportFlightBoard", "primary_kind": "function", "primary_span": [217, 231], "def_symbols": ["GetAirportFlightBoard"], "symbols": ["GetAirportFlightBoard", "returns", "list", "paginated", "direct", "flights", "from", "airport", "for", "specific", "date", "func", "Service", "ctx", "context", "Context", "AirportFlightBoardQuery", "Page", "Flight", "error", "page", "err", "repo", "nil", "return", "len", "Items", "enrichFlights", "log", "Debug", "retrieved", "successfully", "zap", "Any"], "doc_head": "// GetAirportFlightBoard returns a list of paginated direct flights from an airport for a specific date\nfunc (s *Service) GetAirportFlightBoard(ctx context.Context, q *AirportFlightBoardQuery) (*Page[*Flight], error) {\n\tpage, err := s.repo.GetAirportFlightBoard(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(page.Items) > 0 {\n\t\ts.enrichFlights(ctx, page.Items)\n\t}\n\tlog.Debug(ctx, \"flights retrieved successfully\", zap.Any(\"flights\", page))\n\treturn page, err\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 232, "end_line": 247, "text": "// GetAirlineFlightBoard returns a list of paginated direct flights from an airport for a specific date\nfunc (s *Service) GetAirlineFlightBoard(ctx context.Context, q *AirlineFlightBoardQuery) (*Page[*Flight], error) {\n\tpage, err := s.repo.GetAirlineFlightBoard(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(page.Items) > 0 {\n\t\ts.enrichFlights(ctx, page.Items)\n\t}\n\n\tlog.Debug(ctx, \"flights retrieved successfully\", zap.Any(\"flights\", page))\n\n\treturn page, err\n}\n", "n_tokens": 127, "primary_symbol": "GetAirlineFlightBoard", "primary_kind": "function", "primary_span": [233, 247], "def_symbols": ["GetAirlineFlightBoard"], "symbols": ["GetAirlineFlightBoard", "returns", "list", "paginated", "direct", "flights", "from", "airport", "for", "specific", "date", "func", "Service", "ctx", "context", "Context", "AirlineFlightBoardQuery", "Page", "Flight", "error", "page", "err", "repo", "nil", "return", "len", "Items", "enrichFlights", "log", "Debug", "retrieved", "successfully", "zap", "Any"], "doc_head": "// GetAirlineFlightBoard returns a list of paginated direct flights from an airport for a specific date\nfunc (s *Service) GetAirlineFlightBoard(ctx context.Context, q *AirlineFlightBoardQuery) (*Page[*Flight], error) {\n\tpage, err := s.repo.GetAirlineFlightBoard(ctx, q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(page.Items) > 0 {\n\t\ts.enrichFlights(ctx, page.Items)\n\t}\n\tlog.Debug(ctx, \"flights retrieved successfully\", zap.Any(\"flights\", page))\n\treturn page, err\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 248, "end_line": 274, "text": "func (s *Service) GetAirlineUniqueRoutes(ctx context.Context, airline string, departureDate time.Time) (*UniqueRoutes, error) {\n\troutes, err := s.repo.GetAirlineUniqueRoutes(ctx, airline, departureDate)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts.enrichRoutes(ctx, routes, departureDate)\n\n\treturn routes, nil\n}\n\nfunc (s *Service) getAirportDesignatorsForCity(ctx context.Context, id int64, scheduledDepartureAt time.Time) ([]string, error) {\n\tairports, err := s.airports.GetByCity(ctx, id, scheduledDepartureAt)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdesignators := make([]string, 0, len(airports))\n\tfor _, a := range airports {\n\t\tif a.Designator != \"\" {\n\t\t\tdesignators = append(designators, a.Designator)\n\t\t}\n\t}\n\n\treturn designators, nil\n}\n", "n_tokens": 203, "primary_symbol": "GetAirlineUniqueRoutes", "primary_kind": "function", "primary_span": [248, 274], "def_symbols": ["GetAirlineUniqueRoutes", "getAirportDesignatorsForCity"], "symbols": ["GetAirlineUniqueRoutes", "getAirportDesignatorsForCity", "func", "Service", "ctx", "context", "Context", "airline", "string", "departureDate", "time", "Time", "UniqueRoutes", "error", "routes", "err", "repo", "nil", "return", "enrichRoutes", "int64", "scheduledDepartureAt", "airports", "GetByCity", "designators", "make", "len", "for", "range", "Designator", "append"], "doc_head": "func (s *Service) GetAirlineUniqueRoutes(ctx context.Context, airline string, departureDate time.Time) (*UniqueRoutes, error) {\n\troutes, err := s.repo.GetAirlineUniqueRoutes(ctx, airline, departureDate)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.enrichRoutes(ctx, routes, departureDate)\n\treturn routes, nil\n}\nfunc (s *Service) getAirportDesignatorsForCity(ctx context.Context, id int64, scheduledDepartureAt time.Time) ([]string, error) {\n\tairports, err := s.airports.GetByCity(ctx, id, scheduledDepartureAt)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdesignators := make([]string, 0, len(airports))\n\tfor _, a := range airports {\n\t\tif a.Designator != \"\" {\n\t\t\tdesignators = append(designators, a.Designator)\n\t\t}\n\t}\n\treturn designators, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 275, "end_line": 280, "text": "func (s *Service) getUTCDate(t time.Time) time.Time {\n\ttUTC := t.In(time.UTC)\n\tyear, month, day := tUTC.Date()\n\treturn time.Date(year, month, day, 0, 0, 0, 0, time.UTC)\n}\n", "n_tokens": 60, "primary_symbol": "getUTCDate", "primary_kind": "function", "primary_span": [275, 280], "def_symbols": ["getUTCDate"], "symbols": ["getUTCDate", "func", "Service", "time", "Time", "tUTC", "UTC", "year", "month", "day", "Date", "return"], "doc_head": "func (s *Service) getUTCDate(t time.Time) time.Time {\n\ttUTC := t.In(time.UTC)\n\tyear, month, day := tUTC.Date()\n\treturn time.Date(year, month, day, 0, 0, 0, 0, time.UTC)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 281, "end_line": 428, "text": "func (s *Service) enrichFlights(ctx context.Context, fs []*Flight) {\n\tairlineDesignatorsByDate := make(map[string]map[string]bool)\n\tairportDesignatorsByDate := make(map[string]map[string]bool)\n\taircraftDesignators := make(map[string]bool)\n\n\t// Collect all related entities' designators\n\tfor _, f := range fs {\n\t\tsch := s.getUTCDate(f.ScheduledDepartureAt).Format(time.DateOnly)\n\t\tif _, found := airlineDesignatorsByDate[sch]; !found {\n\t\t\tairlineDesignatorsByDate[sch] = make(map[string]bool)\n\t\t}\n\n\t\tif _, found := airportDesignatorsByDate[sch]; !found {\n\t\t\tairportDesignatorsByDate[sch] = make(map[string]bool)\n\t\t}\n\n\t\tairlineDesignatorsByDate[sch][f.Airline.Designator] = true\n\t\tairportDesignatorsByDate[sch][f.DepartureAirport.Designator] = true\n\t\tairportDesignatorsByDate[sch][f.ArrivalAirport.Designator] = true\n\t\tif f.Aircraft != nil {\n\t\t\taircraftDesignators[f.Aircraft.ID] = true\n\t\t}\n\n\t\tfor _, c := range f.Codeshare {\n\t\t\tif c.Airline.Designator != \"\" {\n\t\t\t\tairlineDesignatorsByDate[sch][c.Airline.Designator] = true\n\t\t\t}\n\t\t}\n\t}\n\n\tlog.Debug(ctx, \"Collected designators and IDs.\", zap.Any(\"airlines\", airlineDesignatorsByDate), zap.Any(\"airports\", airportDesignatorsByDate), zap.Any(\"aircraft\", aircraftDesignators))\n\n\t// Retrieve related entities from respective services.\n\tairportsByDateDesignators := make(map[string]map[string]*Airport)\n\tairlinesByDateDesignators := make(map[string]map[string]*Airline)\n\taircraftByDesignators := make(map[string]*Aircraft)\n\n\tfor sch, ds := range airportDesignatorsByDate {\n\t\tif _, found := airportsByDateDesignators[sch]; !found {\n\t\t\tairportsByDateDesignators[sch] = make(map[string]*Airport)\n\t\t}\n\n\t\tscheduledAt, _ := time.Parse(time.DateOnly, sch)\n\t\tvar designators []string\n\t\tfor k := range ds {\n\t\t\tdesignators = append(designators, k)\n\t\t}\n\n\t\tlog.Debug(ctx, \"Getting airports batch.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", scheduledAt))\n\t\tif airports, err := s.airports.BatchGet(ctx, designators, scheduledAt); err == nil {\n\t\t\tfor _, a := range airports {\n\t\t\t\tairportsByDateDesignators[sch][a.Designator] = a\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot retrieve airports.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", scheduledAt), zap.Error(err))\n\t\t}\n\t}\n\n\tfor sch, ds := range airlineDesignatorsByDate {\n\t\tif _, found := airlinesByDateDesignators[sch]; !found {\n\t\t\tairlinesByDateDesignators[sch] = make(map[string]*Airline)\n\t\t}\n\t\tscheduledAt, _ := time.Parse(time.DateOnly, sch)\n\t\tvar designators []string\n\t\tfor k := range ds {\n\t\t\tdesignators = append(designators, k)\n\t\t}\n\t\tlog.Debug(ctx, \"Getting airlines batch.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", scheduledAt))\n\t\tif airlines, err := s.airlines.BatchGet(ctx, designators, scheduledAt); err == nil {\n\t\t\tfor _, a := range airlines {\n\t\t\t\tairlinesByDateDesignators[sch][a.Designator] = a\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot retrieve airlines.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", scheduledAt), zap.Error(err))\n\t\t}\n\t}\n\n\tvar acrtDesignators []string\n\tfor k := range aircraftDesignators {\n\t\tacrtDesignators = append(acrtDesignators, k)\n\t}\n\tlog.Debug(ctx, \"Getting aircraft batch.\", zap.Strings(\"designators\", acrtDesignators))\n\tif aircraft, err := s.aircraft.BatchGet(ctx, acrtDesignators); err == nil {\n\t\tfor _, a := range aircraft {\n\t\t\taircraftByDesignators[a.ID] = a\n\t\t}\n\t} else {\n\t\tlog.Warn(ctx, \"Cannot retrieve aircraft.\", zap.Strings(\"designators\", acrtDesignators), zap.Error(err))\n\t}\n\n\t// Fill in related entity.\n\tfor _, f := range fs {\n\t\tsch := s.getUTCDate(f.ScheduledDepartureAt).Format(time.DateOnly)\n\n\t\tif _, found := airlinesByDateDesignators[sch]; found {\n\t\t\tif arl, found := airlinesByDateDesignators[sch][f.Airline.Designator]; found {\n\t\t\t\tf.Airline = arl\n\t\t\t} else {\n\t\t\t\tlog.Warn(ctx, \"Cannot find main carrier airline.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airline\", f.Airline))\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot find main carrier airline.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airline\", f.Airline))\n\t\t}\n\n\t\tif _, found := airportsByDateDesignators[sch]; found {\n\t\t\tif apt, found := airportsByDateDesignators[sch][f.DepartureAirport.Designator]; found {\n\t\t\t\tf.DepartureAirport = apt\n\t\t\t} else {\n\t\t\t\tlog.Warn(ctx, \"Cannot find departure airport.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airport\", f.DepartureAirport))\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot find departure airport.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airport\", f.DepartureAirport))\n\t\t}\n\n\t\tif _, found := airportsByDateDesignators[sch]; found {\n\t\t\tif apt, found := airportsByDateDesignators[sch][f.ArrivalAirport.Designator]; found {\n\t\t\t\tf.ArrivalAirport = apt\n\t\t\t} else {\n\t\t\t\tlog.Warn(ctx, \"Cannot find arrival airport.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airport\", f.ArrivalAirport))\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot find arrival airport.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airport\", f.ArrivalAirport))\n\t\t}\n\n\t\tfor _, c := range f.Codeshare {\n\t\t\tif c.Airline.Designator != \"\" {\n\t\t\t\tif _, found := airlinesByDateDesignators[sch]; found {\n\t\t\t\t\tif arl, found := airlinesByDateDesignators[sch][c.Airline.Designator]; found {\n\t\t\t\t\t\tc.Airline = arl\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.Warn(ctx, \"Cannot find codeshare carrier airline.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airline\", c.Airline))\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog.Warn(ctx, \"Cannot find codeshare carrier airline.\", zap.String(\"flight_id\", f.FlightID), zap.String(\"scheduled_departure_at\", sch), zap.Any(\"airline\", c.Airline))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif f.Aircraft != nil {\n\t\t\tif aircraft, found := aircraftByDesignators[f.Aircraft.ID]; found {\n\t\t\t\tf.Aircraft = aircraft\n\t\t\t} else {\n\t\t\t\tlog.Warn(ctx, \"Cannot find aircraft.\", zap.String(\"flight_id\", f.FlightID), zap.Any(\"aircraft\", f.Aircraft))\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 1715, "primary_symbol": "enrichFlights", "primary_kind": "function", "primary_span": [281, 428], "def_symbols": ["enrichFlights"], "symbols": ["enrichFlights", "func", "Service", "ctx", "context", "Context", "Flight", "airlineDesignatorsByDate", "make", "map", "string", "bool", "airportDesignatorsByDate", "aircraftDesignators", "Collect", "all", "related", "entities", "designators", "for", "range", "sch", "getUTCDate", "ScheduledDepartureAt", "Format", "time", "DateOnly", "found", "Airline", "Designator", "true", "DepartureAirport", "ArrivalAirport", "Aircraft", "nil", "Codeshare", "log", "Debug", "Collected", "and", "IDs", "zap", "Any", "airlines", "airports", "aircraft", "Retrieve", "from", "respective", "services", "airportsByDateDesignators", "Airport", "airlinesByDateDesignators", "aircraftByDesignators", "scheduledAt", "Parse", "var", "append", "Getting", "batch", "Strings", "Time", "for_date", "err", "BatchGet", "else", "Warn", "Cannot", "retrieve", "Error", "acrtDesignators", "Fill", "entity", "arl", "find", "main", "carrier", "airline", "String", "flight_id", "FlightID", "scheduled_departure_at", "apt", "departure", "airport", "arrival", "codeshare"], "doc_head": "func (s *Service) enrichFlights(ctx context.Context, fs []*Flight) {\n\tairlineDesignatorsByDate := make(map[string]map[string]bool)\n\tairportDesignatorsByDate := make(map[string]map[string]bool)\n\taircraftDesignators := make(map[string]bool)\n\t// Collect all related entities' designators\n\tfor _, f := range fs {\n\t\tsch := s.getUTCDate(f.ScheduledDepartureAt).Format(time.DateOnly)\n\t\tif _, found := airlineDesignatorsByDate[sch]; !found {\n\t\t\tairlineDesignatorsByDate[sch] = make(map[string]bool)\n\t\t}\n\t\tif _, found := airportDesignatorsByDate[sch]; !found {\n\t\t\tairportDesignatorsByDate[sch] = make(map[string]bool)\n\t\t}\n\t\tairlineDesignatorsByDate[sch][f.Airline.Designator] = true\n\t\tairportDesignatorsByDate[sch][f.DepartureAirport.Designator] = true\n\t\tairportDesignatorsByDate[sch][f.ArrivalAirport.Designator] = true\n\t\tif f.Aircraft != nil {\n\t\t\taircraftDesignators[f.Aircraft.ID] = true\n\t\t}\n\t\tfor _, c := range f.Codeshare {\n\t\t\tif c.Airline.Designator != \"\" {\n\t\t\t\tairlineDesignatorsByDate[sch][c.Airline.Designator] = true\n\t\t\t}\n\t\t}\n\t}\n\tlog.Debug(ctx, \"Collected designators and IDs.\", zap.Any(\"airlines\", airlineDesignatorsByDate), zap.Any(\"airports\", airportDesignatorsByDate), zap.Any(\"aircraft\", aircra"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 429, "end_line": 445, "text": "func (s *Service) enrichRoutes(ctx context.Context, routes *UniqueRoutes, departureDate time.Time) {\n\tif routes.Airline.Designator != \"\" {\n\t\tif airline, err := s.airlines.Get(ctx, routes.Airline.Designator, departureDate); err == nil {\n\t\t\troutes.Airline = airline\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot retrieve airline for routes.\", zap.String(\"airline\", routes.Airline.Designator), zap.Error(err))\n\t\t}\n\t}\n\n\tif len(routes.Routes) > 0 {\n\t\tairportDesignators := set.New()\n\t\tfor _, route := range routes.Routes {\n\t\t\tairportDesignators.Insert(route.A.Designator)\n\t\t\tairportDesignators.Insert(route.B.Designator)\n\t\t}\n\n\t\tvar designators []string", "n_tokens": 167, "primary_symbol": "enrichRoutes", "primary_kind": "function", "primary_span": [429, 445], "def_symbols": ["enrichRoutes"], "symbols": ["enrichRoutes", "func", "Service", "ctx", "context", "Context", "routes", "UniqueRoutes", "departureDate", "time", "Time", "Airline", "Designator", "airline", "err", "airlines", "Get", "nil", "else", "log", "Warn", "Cannot", "retrieve", "for", "zap", "String", "Error", "len", "Routes", "airportDesignators", "set", "New", "route", "range", "Insert", "var", "designators", "string"], "doc_head": "func (s *Service) enrichRoutes(ctx context.Context, routes *UniqueRoutes, departureDate time.Time) {\n\tif routes.Airline.Designator != \"\" {\n\t\tif airline, err := s.airlines.Get(ctx, routes.Airline.Designator, departureDate); err == nil {\n\t\t\troutes.Airline = airline\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot retrieve airline for routes.\", zap.String(\"airline\", routes.Airline.Designator), zap.Error(err))\n\t\t}\n\t}\n\tif len(routes.Routes) > 0 {\n\t\tairportDesignators := set.New()\n\t\tfor _, route := range routes.Routes {\n\t\t\tairportDesignators.Insert(route.A.Designator)\n\t\t\tairportDesignators.Insert(route.B.Designator)\n\t\t}\n\t\tvar designators []string"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service.go", "rel_path": "internal/schedules/service.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 446, "end_line": 470, "text": "\t\tairportDesignators.Do(func(k interface{}) {\n\t\t\tdesignators = append(designators, k.(string))\n\t\t})\n\n\t\tif airports, err := s.airports.BatchGet(ctx, designators, departureDate); err == nil {\n\t\t\tairportsHash := make(map[string]*Airport)\n\t\t\tfor _, airport := range airports {\n\t\t\t\tairportsHash[airport.Designator] = airport\n\t\t\t}\n\n\t\t\tfor _, route := range routes.Routes {\n\t\t\t\tif a, found := airportsHash[route.A.Designator]; found {\n\t\t\t\t\troute.A = a\n\t\t\t\t}\n\n\t\t\t\tif b, found := airportsHash[route.B.Designator]; found {\n\t\t\t\t\troute.B = b\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot retrieve airports for routes.\", zap.Strings(\"designators\", designators), zap.Error(err))\n\t\t}\n\t}\n}\n", "n_tokens": 188, "primary_symbol": "", "primary_kind": "", "primary_span": [446, 470], "def_symbols": [], "symbols": ["airportDesignators", "func", "interface", "designators", "append", "string", "airports", "err", "BatchGet", "ctx", "departureDate", "nil", "airportsHash", "make", "map", "Airport", "for", "airport", "range", "Designator", "route", "routes", "Routes", "found", "else", "log", "Warn", "Cannot", "retrieve", "zap", "Strings", "Error"], "doc_head": "\t\tairportDesignators.Do(func(k interface{}) {\n\t\t\tdesignators = append(designators, k.(string))\n\t\t})\n\t\tif airports, err := s.airports.BatchGet(ctx, designators, departureDate); err == nil {\n\t\t\tairportsHash := make(map[string]*Airport)\n\t\t\tfor _, airport := range airports {\n\t\t\t\tairportsHash[airport.Designator] = airport\n\t\t\t}\n\t\t\tfor _, route := range routes.Routes {\n\t\t\t\tif a, found := airportsHash[route.A.Designator]; found {\n\t\t\t\t\troute.A = a\n\t\t\t\t}\n\t\t\t\tif b, found := airportsHash[route.B.Designator]; found {\n\t\t\t\t\troute.B = b\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Cannot retrieve airports for routes.\", zap.Strings(\"designators\", designators), zap.Error(err))\n\t\t}\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go", "rel_path": "internal/schedules/service_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package schedules_test\n\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n\ntype serviceTestSuite struct {\n\tsuite.Suite\n}\n\nfunc TestServiceTestSuite(t *testing.T) {\n\tsuite.Run(t, &serviceTestSuite{})\n}\n", "n_tokens": 107, "primary_symbol": "TestServiceTestSuite", "primary_kind": "function", "primary_span": [19, 22], "def_symbols": ["TestServiceTestSuite"], "symbols": ["TestServiceTestSuite", "package", "schedules_test", "import", "context", "github", "com", "stretchr", "testify", "suite", "testing", "time", "assert", "impalastudios", "aviation", "schedules", "internal", "mocks", "uber", "org", "mock", "gomock", "type", "serviceTestSuite", "struct", "Suite", "func", "Run"], "doc_head": "package schedules_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n\t\"time\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\ntype serviceTestSuite struct {\n\tsuite.Suite\n}\nfunc TestServiceTestSuite(t *testing.T) {\n\tsuite.Run(t, &serviceTestSuite{})\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go", "rel_path": "internal/schedules/service_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 36, "text": "func (s *serviceTestSuite) TestSearch_FailedToFindFlights_ReturnErr() {\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tSearch(gomock.Any(), gomock.Any()).\n\t\tReturn(nil, assert.AnError)\n\n\tsvc := schedules.NewService(mockRepository, nil, nil, nil)\n\n\tpage, err := svc.Search(context.TODO(), &schedules.FlightSearchQuery{})\n\n\ts.Require().Error(err)\n\ts.Require().Nil(page)\n}\n", "n_tokens": 108, "primary_symbol": "TestSearch_FailedToFindFlights_ReturnErr", "primary_kind": "function", "primary_span": [23, 36], "def_symbols": ["TestSearch_FailedToFindFlights_ReturnErr"], "symbols": ["TestSearch_FailedToFindFlights_ReturnErr", "func", "serviceTestSuite", "mockRepository", "mocks", "NewMockrepository", "gomock", "NewController", "EXPECT", "Search", "Any", "Return", "nil", "assert", "AnError", "svc", "schedules", "NewService", "page", "err", "context", "TODO", "FlightSearchQuery", "Require", "Error", "Nil"], "doc_head": "func (s *serviceTestSuite) TestSearch_FailedToFindFlights_ReturnErr() {\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tSearch(gomock.Any(), gomock.Any()).\n\t\tReturn(nil, assert.AnError)\n\tsvc := schedules.NewService(mockRepository, nil, nil, nil)\n\tpage, err := svc.Search(context.TODO(), &schedules.FlightSearchQuery{})\n\ts.Require().Error(err)\n\ts.Require().Nil(page)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go", "rel_path": "internal/schedules/service_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 37, "end_line": 135, "text": "func (s *serviceTestSuite) TestSearch() {\n\texpectedFlightQuery := &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{\"AMS\"},\n\t\tArrivalAirports:   []string{\"CDG\"},\n\t\tLimit:             10,\n\t\tDepartureDate:     time.Date(2023, 12, 1, 0, 0, 0, 0, time.UTC),\n\t}\n\teuropeAmsterdamLocation, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\teuropeParisLocation, _ := time.LoadLocation(\"Europe/Paris\")\n\teuropeIstanbulLocation, _ := time.LoadLocation(\"Europe/Istanbul\")\n\n\texpectedSchedules := []*schedules.Schedule{\n\t\t{\n\t\t\tDepartureAirport: &schedules.Airport{Designator: \"AMS\"},\n\t\t\tArrivalAirport:   &schedules.Airport{Designator: \"CDG\"},\n\t\t\tMainCarrier:      &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:     1234,\n\t\t\tFlights: []*schedules.Flight{\n\t\t\t\t{\n\t\t\t\t\tID:                   1,\n\t\t\t\t\tFlightID:             \"20231201_KL_1234_AMS_CDG\",\n\t\t\t\t\tConnectingFlightID:   0,\n\t\t\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\t\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\t\t\tAircraft:             &schedules.Aircraft{ID: \"737\"},\n\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 12, 1, 10, 50, 0, 0, europeAmsterdamLocation),\n\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 12, 1, 11, 55, 0, 0, europeParisLocation),\n\t\t\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t\t\t{Airline: &schedules.Airline{Designator: \"AF\"}, FlightNumber: 55},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tDepartureAirport: &schedules.Airport{Designator: \"AMS\"},\n\t\t\tArrivalAirport:   &schedules.Airport{Designator: \"CDG\"},\n\t\t\tMainCarrier:      &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:     2222,\n\t\t\tFlights: []*schedules.Flight{\n\t\t\t\t{\n\t\t\t\t\tID:                   2,\n\t\t\t\t\tFlightID:             \"20231201_KL_2222_AMS_IST\",\n\t\t\t\t\tConnectingFlightID:   1,\n\t\t\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\t\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"IST\"},\n\t\t\t\t\tAircraft:             &schedules.Aircraft{ID: \"737\"},\n\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 12, 1, 9, 35, 0, 0, europeAmsterdamLocation),\n\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 12, 1, 12, 40, 0, 0, europeIstanbulLocation),\n\t\t\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:                   3,\n\t\t\t\t\tFlightID:             \"20231201_KL_2222_IST_CDG\",\n\t\t\t\t\tConnectingFlightID:   1,\n\t\t\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"IST\"},\n\t\t\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\t\t\tAircraft:             &schedules.Aircraft{ID: \"737\"},\n\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 12, 1, 12, 50, 0, 0, europeIstanbulLocation),\n\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 12, 1, 14, 10, 0, 0, europeParisLocation),\n\t\t\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockAirlinesService := mocks.NewMockairlinesClient(gomock.NewController(s.T()))\n\tmockAirportService := mocks.NewMockairportsClient(gomock.NewController(s.T()))\n\tmockAircraftService := mocks.NewMockaircraftClient(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tSearch(gomock.Any(), expectedFlightQuery).\n\t\tReturn(&schedules.Page[*schedules.Schedule]{\n\t\t\tItems: expectedSchedules,\n\t\t\tNext:  nil,\n\t\t}, nil)\n\tmockAirportService.EXPECT().\n\t\tBatchGet(gomock.Any(), gomock.Any(), gomock.Any()).\n\t\tReturn(nil, nil).\n\t\tTimes(1)\n\tmockAirlinesService.EXPECT().\n\t\tBatchGet(gomock.Any(), gomock.Any(), gomock.Any()).\n\t\tReturn(nil, nil).\n\t\tTimes(1)\n\tmockAircraftService.EXPECT().\n\t\tBatchGet(gomock.Any(), gomock.Any()).\n\t\tReturn(nil, nil).\n\t\tTimes(1)\n\n\tsvc := schedules.NewService(mockRepository, mockAirlinesService, mockAirportService, mockAircraftService)\n\n\tpage, err := svc.Search(context.TODO(), expectedFlightQuery)\n\n\ts.Require().NoError(err)\n\ts.Require().Equal(expectedSchedules, page.Items)\n}\n", "n_tokens": 1262, "primary_symbol": "TestSearch", "primary_kind": "function", "primary_span": [37, 135], "def_symbols": ["TestSearch"], "symbols": ["TestSearch", "func", "serviceTestSuite", "expectedFlightQuery", "schedules", "FlightSearchQuery", "DepartureAirports", "string", "AMS", "ArrivalAirports", "CDG", "Limit", "DepartureDate", "time", "Date", "UTC", "europeAmsterdamLocation", "LoadLocation", "Europe", "Amsterdam", "europeParisLocation", "Paris", "europeIstanbulLocation", "Istanbul", "expectedSchedules", "Schedule", "DepartureAirport", "Airport", "Designator", "ArrivalAirport", "MainCarrier", "Airline", "FlightNumber", "Flights", "Flight", "FlightID", "ConnectingFlightID", "Aircraft", "ScheduledDepartureAt", "ScheduledArrivalAt", "Codeshare", "IST", "make", "mockRepository", "mocks", "NewMockrepository", "gomock", "NewController", "mockAirlinesService", "NewMockairlinesClient", "mockAirportService", "NewMockairportsClient", "mockAircraftService", "NewMockaircraftClient", "EXPECT", "Search", "Any", "Return", "Page", "Items", "Next", "nil", "BatchGet", "Times", "svc", "NewService", "page", "err", "context", "TODO", "Require", "NoError", "Equal"], "doc_head": "func (s *serviceTestSuite) TestSearch() {\n\texpectedFlightQuery := &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{\"AMS\"},\n\t\tArrivalAirports:   []string{\"CDG\"},\n\t\tLimit:             10,\n\t\tDepartureDate:     time.Date(2023, 12, 1, 0, 0, 0, 0, time.UTC),\n\t}\n\teuropeAmsterdamLocation, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\teuropeParisLocation, _ := time.LoadLocation(\"Europe/Paris\")\n\teuropeIstanbulLocation, _ := time.LoadLocation(\"Europe/Istanbul\")\n\texpectedSchedules := []*schedules.Schedule{\n\t\t{\n\t\t\tDepartureAirport: &schedules.Airport{Designator: \"AMS\"},\n\t\t\tArrivalAirport:   &schedules.Airport{Designator: \"CDG\"},\n\t\t\tMainCarrier:      &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:     1234,\n\t\t\tFlights: []*schedules.Flight{\n\t\t\t\t{\n\t\t\t\t\tID:                   1,\n\t\t\t\t\tFlightID:             \"20231201_KL_1234_AMS_CDG\",\n\t\t\t\t\tConnectingFlightID:   0,\n\t\t\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\t\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\t\t\tAircraft:             &schedules.Aircraft{ID: \"737\"},\n\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 12, 1, 10, 50, 0, 0, europeA"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go", "rel_path": "internal/schedules/service_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 136, "end_line": 189, "text": "func (s *serviceTestSuite) TestGetRandomFlight() {\n\texpectedRandomFlightQuery := &schedules.RandomFlightQuery{\n\t\tDepartureDate:          time.Date(2024, 2, 5, 10, 0, 0, 0, time.UTC),\n\t\tMinDurationToDeparture: time.Hour + 5*time.Minute,\n\t\tMaxDurationToDeparture: 3*time.Hour + 5*time.Minute,\n\t\tMaxFlightDuration:      8 * time.Hour,\n\t}\n\n\texpectedFlight := &schedules.Flight{\n\t\tID:                   1,\n\t\tFlightID:             \"20240205_KL_1234_AMS_CDG\",\n\t\tConnectingFlightID:   0,\n\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\tAircraft:             &schedules.Aircraft{ID: \"737\"},\n\t\tScheduledDepartureAt: time.Date(2024, 2, 5, 10, 50, 0, 0, time.UTC),\n\t\tScheduledArrivalAt:   time.Date(2024, 2, 5, 11, 55, 0, 0, time.UTC),\n\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t{Airline: &schedules.Airline{Designator: \"AF\"}, FlightNumber: 55},\n\t\t},\n\t}\n\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tGetRandomFlight(gomock.Any(), expectedRandomFlightQuery).\n\t\tReturn(expectedFlight, nil)\n\n\tmockAirlinesClient := mocks.NewMockairlinesClient(gomock.NewController(s.T()))\n\tmockAirlinesClient.EXPECT().\n\t\tBatchGet(gomock.Any(), gomock.Any(), time.Date(2024, 2, 5, 0, 0, 0, 0, time.UTC)).\n\t\tReturn(nil, assert.AnError).\n\t\tTimes(1)\n\n\tmockAirportClient := mocks.NewMockairportsClient(gomock.NewController(s.T()))\n\tmockAirportClient.EXPECT().\n\t\tBatchGet(gomock.Any(), gomock.Any(), time.Date(2024, 2, 5, 0, 0, 0, 0, time.UTC)).\n\t\tReturn(nil, assert.AnError).\n\t\tTimes(1)\n\n\tmockAircraftClient := mocks.NewMockaircraftClient(gomock.NewController(s.T()))\n\tmockAircraftClient.EXPECT().\n\t\tBatchGet(gomock.Any(), gomock.Any()).\n\t\tReturn(nil, assert.AnError).\n\t\tTimes(1)\n\n\tsvc := schedules.NewService(mockRepository, mockAirlinesClient, mockAirportClient, mockAircraftClient)\n\n\tflight, err := svc.GetRandomFlight(context.TODO(), expectedRandomFlightQuery)\n\n\ts.Require().NoError(err)\n\ts.Require().Equal(expectedFlight, flight)\n}\n", "n_tokens": 655, "primary_symbol": "TestGetRandomFlight", "primary_kind": "function", "primary_span": [136, 189], "def_symbols": ["TestGetRandomFlight"], "symbols": ["TestGetRandomFlight", "func", "serviceTestSuite", "expectedRandomFlightQuery", "schedules", "RandomFlightQuery", "DepartureDate", "time", "Date", "UTC", "MinDurationToDeparture", "Hour", "Minute", "MaxDurationToDeparture", "MaxFlightDuration", "expectedFlight", "Flight", "FlightID", "ConnectingFlightID", "Airline", "Designator", "DepartureAirport", "Airport", "AMS", "ArrivalAirport", "CDG", "Aircraft", "ScheduledDepartureAt", "ScheduledArrivalAt", "Codeshare", "FlightNumber", "mockRepository", "mocks", "NewMockrepository", "gomock", "NewController", "EXPECT", "GetRandomFlight", "Any", "Return", "nil", "mockAirlinesClient", "NewMockairlinesClient", "BatchGet", "assert", "AnError", "Times", "mockAirportClient", "NewMockairportsClient", "mockAircraftClient", "NewMockaircraftClient", "svc", "NewService", "flight", "err", "context", "TODO", "Require", "NoError", "Equal"], "doc_head": "func (s *serviceTestSuite) TestGetRandomFlight() {\n\texpectedRandomFlightQuery := &schedules.RandomFlightQuery{\n\t\tDepartureDate:          time.Date(2024, 2, 5, 10, 0, 0, 0, time.UTC),\n\t\tMinDurationToDeparture: time.Hour + 5*time.Minute,\n\t\tMaxDurationToDeparture: 3*time.Hour + 5*time.Minute,\n\t\tMaxFlightDuration:      8 * time.Hour,\n\t}\n\texpectedFlight := &schedules.Flight{\n\t\tID:                   1,\n\t\tFlightID:             \"20240205_KL_1234_AMS_CDG\",\n\t\tConnectingFlightID:   0,\n\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\tAircraft:             &schedules.Aircraft{ID: \"737\"},\n\t\tScheduledDepartureAt: time.Date(2024, 2, 5, 10, 50, 0, 0, time.UTC),\n\t\tScheduledArrivalAt:   time.Date(2024, 2, 5, 11, 55, 0, 0, time.UTC),\n\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t{Airline: &schedules.Airline{Designator: \"AF\"}, FlightNumber: 55},\n\t\t},\n\t}\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tGetRandomFlight(gomock.Any(), expectedRandomFlightQuery).\n\t\tReturn(expectedFlight, nil)\n\tmockAirlinesClient := mocks.New"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/service_test.go", "rel_path": "internal/schedules/service_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 190, "end_line": 203, "text": "func (s *serviceTestSuite) TestGetRandomFlight_RepoErr_ReturnErr() {\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tGetRandomFlight(gomock.Any(), gomock.Any()).\n\t\tReturn(nil, assert.AnError)\n\n\tsvc := schedules.NewService(mockRepository, nil, nil, nil)\n\n\tflight, err := svc.GetRandomFlight(context.TODO(), &schedules.RandomFlightQuery{})\n\n\ts.Require().Error(err)\n\ts.Require().Nil(flight)\n}\n", "n_tokens": 111, "primary_symbol": "TestGetRandomFlight_RepoErr_ReturnErr", "primary_kind": "function", "primary_span": [190, 203], "def_symbols": ["TestGetRandomFlight_RepoErr_ReturnErr"], "symbols": ["TestGetRandomFlight_RepoErr_ReturnErr", "func", "serviceTestSuite", "mockRepository", "mocks", "NewMockrepository", "gomock", "NewController", "EXPECT", "GetRandomFlight", "Any", "Return", "nil", "assert", "AnError", "svc", "schedules", "NewService", "flight", "err", "context", "TODO", "RandomFlightQuery", "Require", "Error", "Nil"], "doc_head": "func (s *serviceTestSuite) TestGetRandomFlight_RepoErr_ReturnErr() {\n\tmockRepository := mocks.NewMockrepository(gomock.NewController(s.T()))\n\tmockRepository.EXPECT().\n\t\tGetRandomFlight(gomock.Any(), gomock.Any()).\n\t\tReturn(nil, assert.AnError)\n\tsvc := schedules.NewService(mockRepository, nil, nil, nil)\n\tflight, err := svc.GetRandomFlight(context.TODO(), &schedules.RandomFlightQuery{})\n\ts.Require().Error(err)\n\ts.Require().Nil(flight)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/errors.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/errors.go", "rel_path": "internal/schedules/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "package schedules\n\nimport \"github.com/cockroachdb/errors\"\n\nvar (\n\tErrFlightNotFound = errors.New(\"flight not found\")\n)\n", "n_tokens": 28, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["package", "schedules", "import", "github", "com", "cockroachdb", "errors", "var", "ErrFlightNotFound", "New", "flight", "not", "found"], "doc_head": "package schedules\nimport \"github.com/cockroachdb/errors\"\nvar (\n\tErrFlightNotFound = errors.New(\"flight not found\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tschedules \"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mockrepository is a mock of repository interface.\ntype Mockrepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrepositoryMockRecorder\n\tisgomock struct{}\n}\n\n// MockrepositoryMockRecorder is the mock recorder for Mockrepository.\ntype MockrepositoryMockRecorder struct {\n\tmock *Mockrepository\n}\n", "n_tokens": 171, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "time", "schedules", "impalastudios", "com", "aviation", "internal", "gomock", "uber", "org", "mock", "Mockrepository", "repository", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockrepositoryMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tschedules \"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mockrepository is a mock of repository interface.\ntype Mockrepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrepositoryMockRecorder\n\tisgomock struct{}\n}\n// MockrepositoryMockRecorder is the mock recorder for Mockrepository.\ntype MockrepositoryMockRecorder struct {\n\tmock *Mockrepository\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 53, "text": "// NewMockrepository creates a new mock instance.\nfunc NewMockrepository(ctrl *gomock.Controller) *Mockrepository {\n\tmock := &Mockrepository{ctrl: ctrl}\n\tmock.recorder = &MockrepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *Mockrepository) Get(arg0 context.Context, arg1 string) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 173, "primary_symbol": "NewMockrepository", "primary_kind": "function", "primary_span": [34, 53], "def_symbols": ["NewMockrepository", "EXPECT", "Get"], "symbols": ["NewMockrepository", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mockrepository", "recorder", "MockrepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "string", "schedules", "Flight", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockrepository creates a new mock instance.\nfunc NewMockrepository(ctrl *gomock.Controller) *Mockrepository {\n\tmock := &Mockrepository{ctrl: ctrl}\n\tmock.recorder = &MockrepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *Mockrepository) Get(arg0 context.Context, arg1 string) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 54, "end_line": 68, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockrepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockrepository)(nil).Get), arg0, arg1)\n}\n\n// GetAirlineFlightBoard mocks base method.\nfunc (m *Mockrepository) GetAirlineFlightBoard(arg0 context.Context, arg1 *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 187, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [55, 68], "def_symbols": ["Get", "GetAirlineFlightBoard"], "symbols": ["Get", "GetAirlineFlightBoard", "indicates", "expected", "call", "func", "MockrepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockrepository", "nil", "mocks", "base", "method", "context", "Context", "schedules", "AirlineFlightBoardQuery", "Page", "Flight", "error", "ret", "ret0", "ret1"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockrepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockrepository)(nil).Get), arg0, arg1)\n}\n// GetAirlineFlightBoard mocks base method.\nfunc (m *Mockrepository) GetAirlineFlightBoard(arg0 context.Context, arg1 *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 69, "end_line": 83, "text": "// GetAirlineFlightBoard indicates an expected call of GetAirlineFlightBoard.\nfunc (mr *MockrepositoryMockRecorder) GetAirlineFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineFlightBoard\", reflect.TypeOf((*Mockrepository)(nil).GetAirlineFlightBoard), arg0, arg1)\n}\n\n// GetAirlineUniqueRoutes mocks base method.\nfunc (m *Mockrepository) GetAirlineUniqueRoutes(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.UniqueRoutes, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineUniqueRoutes\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.UniqueRoutes)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 199, "primary_symbol": "GetAirlineFlightBoard", "primary_kind": "function", "primary_span": [70, 83], "def_symbols": ["GetAirlineFlightBoard", "GetAirlineUniqueRoutes"], "symbols": ["GetAirlineFlightBoard", "GetAirlineUniqueRoutes", "indicates", "expected", "call", "func", "MockrepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockrepository", "nil", "mocks", "base", "method", "context", "Context", "string", "arg2", "time", "Time", "schedules", "UniqueRoutes", "error", "ret", "ret0", "ret1"], "doc_head": "// GetAirlineFlightBoard indicates an expected call of GetAirlineFlightBoard.\nfunc (mr *MockrepositoryMockRecorder) GetAirlineFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineFlightBoard\", reflect.TypeOf((*Mockrepository)(nil).GetAirlineFlightBoard), arg0, arg1)\n}\n// GetAirlineUniqueRoutes mocks base method.\nfunc (m *Mockrepository) GetAirlineUniqueRoutes(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.UniqueRoutes, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineUniqueRoutes\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.UniqueRoutes)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 84, "end_line": 89, "text": "// GetAirlineUniqueRoutes indicates an expected call of GetAirlineUniqueRoutes.\nfunc (mr *MockrepositoryMockRecorder) GetAirlineUniqueRoutes(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineUniqueRoutes\", reflect.TypeOf((*Mockrepository)(nil).GetAirlineUniqueRoutes), arg0, arg1, arg2)\n}\n", "n_tokens": 97, "primary_symbol": "GetAirlineUniqueRoutes", "primary_kind": "function", "primary_span": [85, 89], "def_symbols": ["GetAirlineUniqueRoutes"], "symbols": ["GetAirlineUniqueRoutes", "indicates", "expected", "call", "func", "MockrepositoryMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockrepository", "nil"], "doc_head": "// GetAirlineUniqueRoutes indicates an expected call of GetAirlineUniqueRoutes.\nfunc (mr *MockrepositoryMockRecorder) GetAirlineUniqueRoutes(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineUniqueRoutes\", reflect.TypeOf((*Mockrepository)(nil).GetAirlineUniqueRoutes), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 90, "end_line": 104, "text": "// GetAirportFlightBoard mocks base method.\nfunc (m *Mockrepository) GetAirportFlightBoard(arg0 context.Context, arg1 *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirportFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetAirportFlightBoard indicates an expected call of GetAirportFlightBoard.\nfunc (mr *MockrepositoryMockRecorder) GetAirportFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirportFlightBoard\", reflect.TypeOf((*Mockrepository)(nil).GetAirportFlightBoard), arg0, arg1)\n}\n", "n_tokens": 199, "primary_symbol": "GetAirportFlightBoard", "primary_kind": "function", "primary_span": [91, 104], "def_symbols": ["GetAirportFlightBoard"], "symbols": ["GetAirportFlightBoard", "mocks", "base", "method", "func", "Mockrepository", "arg0", "context", "Context", "arg1", "schedules", "AirportFlightBoardQuery", "Page", "Flight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockrepositoryMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// GetAirportFlightBoard mocks base method.\nfunc (m *Mockrepository) GetAirportFlightBoard(arg0 context.Context, arg1 *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirportFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetAirportFlightBoard indicates an expected call of GetAirportFlightBoard.\nfunc (mr *MockrepositoryMockRecorder) GetAirportFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirportFlightBoard\", reflect.TypeOf((*Mockrepository)(nil).GetAirportFlightBoard), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 105, "end_line": 119, "text": "// GetBatch mocks base method.\nfunc (m *Mockrepository) GetBatch(arg0 context.Context, arg1 []string) ([]*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetBatch\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetBatch indicates an expected call of GetBatch.\nfunc (mr *MockrepositoryMockRecorder) GetBatch(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetBatch\", reflect.TypeOf((*Mockrepository)(nil).GetBatch), arg0, arg1)\n}\n", "n_tokens": 169, "primary_symbol": "GetBatch", "primary_kind": "function", "primary_span": [106, 119], "def_symbols": ["GetBatch"], "symbols": ["GetBatch", "mocks", "base", "method", "func", "Mockrepository", "arg0", "context", "Context", "arg1", "string", "schedules", "Flight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockrepositoryMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// GetBatch mocks base method.\nfunc (m *Mockrepository) GetBatch(arg0 context.Context, arg1 []string) ([]*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetBatch\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetBatch indicates an expected call of GetBatch.\nfunc (mr *MockrepositoryMockRecorder) GetBatch(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetBatch\", reflect.TypeOf((*Mockrepository)(nil).GetBatch), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 120, "end_line": 128, "text": "// GetByFlightDesignator mocks base method.\nfunc (m *Mockrepository) GetByFlightDesignator(arg0 context.Context, arg1 *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByFlightDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 113, "primary_symbol": "GetByFlightDesignator", "primary_kind": "function", "primary_span": [121, 128], "def_symbols": ["GetByFlightDesignator"], "symbols": ["GetByFlightDesignator", "mocks", "base", "method", "func", "Mockrepository", "arg0", "context", "Context", "arg1", "schedules", "FlightDesignatorQuery", "Page", "Schedule", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetByFlightDesignator mocks base method.\nfunc (m *Mockrepository) GetByFlightDesignator(arg0 context.Context, arg1 *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByFlightDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 129, "end_line": 143, "text": "// GetByFlightDesignator indicates an expected call of GetByFlightDesignator.\nfunc (mr *MockrepositoryMockRecorder) GetByFlightDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByFlightDesignator\", reflect.TypeOf((*Mockrepository)(nil).GetByFlightDesignator), arg0, arg1)\n}\n\n// GetRandomFlight mocks base method.\nfunc (m *Mockrepository) GetRandomFlight(arg0 context.Context, arg1 *schedules.RandomFlightQuery) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetRandomFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 190, "primary_symbol": "GetByFlightDesignator", "primary_kind": "function", "primary_span": [130, 143], "def_symbols": ["GetByFlightDesignator", "GetRandomFlight"], "symbols": ["GetByFlightDesignator", "GetRandomFlight", "indicates", "expected", "call", "func", "MockrepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockrepository", "nil", "mocks", "base", "method", "context", "Context", "schedules", "RandomFlightQuery", "Flight", "error", "ret", "ret0", "ret1"], "doc_head": "// GetByFlightDesignator indicates an expected call of GetByFlightDesignator.\nfunc (mr *MockrepositoryMockRecorder) GetByFlightDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByFlightDesignator\", reflect.TypeOf((*Mockrepository)(nil).GetByFlightDesignator), arg0, arg1)\n}\n// GetRandomFlight mocks base method.\nfunc (m *Mockrepository) GetRandomFlight(arg0 context.Context, arg1 *schedules.RandomFlightQuery) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetRandomFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 144, "end_line": 158, "text": "// GetRandomFlight indicates an expected call of GetRandomFlight.\nfunc (mr *MockrepositoryMockRecorder) GetRandomFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetRandomFlight\", reflect.TypeOf((*Mockrepository)(nil).GetRandomFlight), arg0, arg1)\n}\n\n// Search mocks base method.\nfunc (m *Mockrepository) Search(arg0 context.Context, arg1 *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Search\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 181, "primary_symbol": "GetRandomFlight", "primary_kind": "function", "primary_span": [145, 158], "def_symbols": ["GetRandomFlight", "Search"], "symbols": ["GetRandomFlight", "Search", "indicates", "expected", "call", "func", "MockrepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockrepository", "nil", "mocks", "base", "method", "context", "Context", "schedules", "FlightSearchQuery", "Page", "Schedule", "error", "ret", "ret0", "ret1"], "doc_head": "// GetRandomFlight indicates an expected call of GetRandomFlight.\nfunc (mr *MockrepositoryMockRecorder) GetRandomFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetRandomFlight\", reflect.TypeOf((*Mockrepository)(nil).GetRandomFlight), arg0, arg1)\n}\n// Search mocks base method.\nfunc (m *Mockrepository) Search(arg0 context.Context, arg1 *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Search\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 159, "end_line": 176, "text": "// Search indicates an expected call of Search.\nfunc (mr *MockrepositoryMockRecorder) Search(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Search\", reflect.TypeOf((*Mockrepository)(nil).Search), arg0, arg1)\n}\n\n// MockairlinesClient is a mock of airlinesClient interface.\ntype MockairlinesClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairlinesClientMockRecorder\n\tisgomock struct{}\n}\n\n// MockairlinesClientMockRecorder is the mock recorder for MockairlinesClient.\ntype MockairlinesClientMockRecorder struct {\n\tmock *MockairlinesClient\n}\n", "n_tokens": 148, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [160, 176], "def_symbols": ["Search"], "symbols": ["Search", "indicates", "expected", "call", "func", "MockrepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockrepository", "nil", "MockairlinesClient", "airlinesClient", "interface", "type", "struct", "Controller", "recorder", "MockairlinesClientMockRecorder", "isgomock", "the", "for"], "doc_head": "// Search indicates an expected call of Search.\nfunc (mr *MockrepositoryMockRecorder) Search(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Search\", reflect.TypeOf((*Mockrepository)(nil).Search), arg0, arg1)\n}\n// MockairlinesClient is a mock of airlinesClient interface.\ntype MockairlinesClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairlinesClientMockRecorder\n\tisgomock struct{}\n}\n// MockairlinesClientMockRecorder is the mock recorder for MockairlinesClient.\ntype MockairlinesClientMockRecorder struct {\n\tmock *MockairlinesClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 177, "end_line": 188, "text": "// NewMockairlinesClient creates a new mock instance.\nfunc NewMockairlinesClient(ctrl *gomock.Controller) *MockairlinesClient {\n\tmock := &MockairlinesClient{ctrl: ctrl}\n\tmock.recorder = &MockairlinesClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairlinesClient) EXPECT() *MockairlinesClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 99, "primary_symbol": "NewMockairlinesClient", "primary_kind": "function", "primary_span": [178, 188], "def_symbols": ["NewMockairlinesClient", "EXPECT"], "symbols": ["NewMockairlinesClient", "EXPECT", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockairlinesClient", "recorder", "MockairlinesClientMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use"], "doc_head": "// NewMockairlinesClient creates a new mock instance.\nfunc NewMockairlinesClient(ctrl *gomock.Controller) *MockairlinesClient {\n\tmock := &MockairlinesClient{ctrl: ctrl}\n\tmock.recorder = &MockairlinesClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairlinesClient) EXPECT() *MockairlinesClientMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 189, "end_line": 203, "text": "// BatchGet mocks base method.\nfunc (m *MockairlinesClient) BatchGet(arg0 context.Context, arg1 []string, arg2 time.Time) ([]*schedules.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"BatchGet\", arg0, arg1, arg2)\n\tret0, _ := ret[0].([]*schedules.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// BatchGet indicates an expected call of BatchGet.\nfunc (mr *MockairlinesClientMockRecorder) BatchGet(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"BatchGet\", reflect.TypeOf((*MockairlinesClient)(nil).BatchGet), arg0, arg1, arg2)\n}\n", "n_tokens": 191, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [190, 203], "def_symbols": ["BatchGet"], "symbols": ["BatchGet", "mocks", "base", "method", "func", "MockairlinesClient", "arg0", "context", "Context", "arg1", "string", "arg2", "time", "Time", "schedules", "Airline", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockairlinesClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// BatchGet mocks base method.\nfunc (m *MockairlinesClient) BatchGet(arg0 context.Context, arg1 []string, arg2 time.Time) ([]*schedules.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"BatchGet\", arg0, arg1, arg2)\n\tret0, _ := ret[0].([]*schedules.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// BatchGet indicates an expected call of BatchGet.\nfunc (mr *MockairlinesClientMockRecorder) BatchGet(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"BatchGet\", reflect.TypeOf((*MockairlinesClient)(nil).BatchGet), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 204, "end_line": 218, "text": "// Get mocks base method.\nfunc (m *MockairlinesClient) Get(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockairlinesClientMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockairlinesClient)(nil).Get), arg0, arg1, arg2)\n}\n", "n_tokens": 181, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [205, 218], "def_symbols": ["Get"], "symbols": ["Get", "mocks", "base", "method", "func", "MockairlinesClient", "arg0", "context", "Context", "arg1", "string", "arg2", "time", "Time", "schedules", "Airline", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockairlinesClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Get mocks base method.\nfunc (m *MockairlinesClient) Get(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockairlinesClientMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockairlinesClient)(nil).Get), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 219, "end_line": 242, "text": "// MockairportsClient is a mock of airportsClient interface.\ntype MockairportsClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairportsClientMockRecorder\n\tisgomock struct{}\n}\n\n// MockairportsClientMockRecorder is the mock recorder for MockairportsClient.\ntype MockairportsClientMockRecorder struct {\n\tmock *MockairportsClient\n}\n\n// NewMockairportsClient creates a new mock instance.\nfunc NewMockairportsClient(ctrl *gomock.Controller) *MockairportsClient {\n\tmock := &MockairportsClient{ctrl: ctrl}\n\tmock.recorder = &MockairportsClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairportsClient) EXPECT() *MockairportsClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 176, "primary_symbol": "NewMockairportsClient", "primary_kind": "function", "primary_span": [232, 242], "def_symbols": ["NewMockairportsClient", "EXPECT"], "symbols": ["NewMockairportsClient", "EXPECT", "MockairportsClient", "mock", "airportsClient", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockairportsClientMockRecorder", "isgomock", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// MockairportsClient is a mock of airportsClient interface.\ntype MockairportsClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairportsClientMockRecorder\n\tisgomock struct{}\n}\n// MockairportsClientMockRecorder is the mock recorder for MockairportsClient.\ntype MockairportsClientMockRecorder struct {\n\tmock *MockairportsClient\n}\n// NewMockairportsClient creates a new mock instance.\nfunc NewMockairportsClient(ctrl *gomock.Controller) *MockairportsClient {\n\tmock := &MockairportsClient{ctrl: ctrl}\n\tmock.recorder = &MockairportsClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairportsClient) EXPECT() *MockairportsClientMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 243, "end_line": 257, "text": "// BatchGet mocks base method.\nfunc (m *MockairportsClient) BatchGet(arg0 context.Context, arg1 []string, arg2 time.Time) ([]*schedules.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"BatchGet\", arg0, arg1, arg2)\n\tret0, _ := ret[0].([]*schedules.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// BatchGet indicates an expected call of BatchGet.\nfunc (mr *MockairportsClientMockRecorder) BatchGet(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"BatchGet\", reflect.TypeOf((*MockairportsClient)(nil).BatchGet), arg0, arg1, arg2)\n}\n", "n_tokens": 191, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [244, 257], "def_symbols": ["BatchGet"], "symbols": ["BatchGet", "mocks", "base", "method", "func", "MockairportsClient", "arg0", "context", "Context", "arg1", "string", "arg2", "time", "Time", "schedules", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockairportsClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// BatchGet mocks base method.\nfunc (m *MockairportsClient) BatchGet(arg0 context.Context, arg1 []string, arg2 time.Time) ([]*schedules.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"BatchGet\", arg0, arg1, arg2)\n\tret0, _ := ret[0].([]*schedules.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// BatchGet indicates an expected call of BatchGet.\nfunc (mr *MockairportsClientMockRecorder) BatchGet(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"BatchGet\", reflect.TypeOf((*MockairportsClient)(nil).BatchGet), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 258, "end_line": 272, "text": "// Get mocks base method.\nfunc (m *MockairportsClient) Get(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockairportsClientMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockairportsClient)(nil).Get), arg0, arg1, arg2)\n}\n", "n_tokens": 181, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [259, 272], "def_symbols": ["Get"], "symbols": ["Get", "mocks", "base", "method", "func", "MockairportsClient", "arg0", "context", "Context", "arg1", "string", "arg2", "time", "Time", "schedules", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockairportsClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Get mocks base method.\nfunc (m *MockairportsClient) Get(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockairportsClientMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockairportsClient)(nil).Get), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 273, "end_line": 287, "text": "// GetByCity mocks base method.\nfunc (m *MockairportsClient) GetByCity(arg0 context.Context, arg1 int64, arg2 time.Time) ([]*schedules.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByCity\", arg0, arg1, arg2)\n\tret0, _ := ret[0].([]*schedules.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetByCity indicates an expected call of GetByCity.\nfunc (mr *MockairportsClientMockRecorder) GetByCity(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByCity\", reflect.TypeOf((*MockairportsClient)(nil).GetByCity), arg0, arg1, arg2)\n}\n", "n_tokens": 199, "primary_symbol": "GetByCity", "primary_kind": "function", "primary_span": [274, 287], "def_symbols": ["GetByCity"], "symbols": ["GetByCity", "mocks", "base", "method", "func", "MockairportsClient", "arg0", "context", "Context", "arg1", "int64", "arg2", "time", "Time", "schedules", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockairportsClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// GetByCity mocks base method.\nfunc (m *MockairportsClient) GetByCity(arg0 context.Context, arg1 int64, arg2 time.Time) ([]*schedules.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByCity\", arg0, arg1, arg2)\n\tret0, _ := ret[0].([]*schedules.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetByCity indicates an expected call of GetByCity.\nfunc (mr *MockairportsClientMockRecorder) GetByCity(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByCity\", reflect.TypeOf((*MockairportsClient)(nil).GetByCity), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 288, "end_line": 311, "text": "// MockaircraftClient is a mock of aircraftClient interface.\ntype MockaircraftClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockaircraftClientMockRecorder\n\tisgomock struct{}\n}\n\n// MockaircraftClientMockRecorder is the mock recorder for MockaircraftClient.\ntype MockaircraftClientMockRecorder struct {\n\tmock *MockaircraftClient\n}\n\n// NewMockaircraftClient creates a new mock instance.\nfunc NewMockaircraftClient(ctrl *gomock.Controller) *MockaircraftClient {\n\tmock := &MockaircraftClient{ctrl: ctrl}\n\tmock.recorder = &MockaircraftClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockaircraftClient) EXPECT() *MockaircraftClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 176, "primary_symbol": "NewMockaircraftClient", "primary_kind": "function", "primary_span": [301, 311], "def_symbols": ["NewMockaircraftClient", "EXPECT"], "symbols": ["NewMockaircraftClient", "EXPECT", "MockaircraftClient", "mock", "aircraftClient", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockaircraftClientMockRecorder", "isgomock", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// MockaircraftClient is a mock of aircraftClient interface.\ntype MockaircraftClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockaircraftClientMockRecorder\n\tisgomock struct{}\n}\n// MockaircraftClientMockRecorder is the mock recorder for MockaircraftClient.\ntype MockaircraftClientMockRecorder struct {\n\tmock *MockaircraftClient\n}\n// NewMockaircraftClient creates a new mock instance.\nfunc NewMockaircraftClient(ctrl *gomock.Controller) *MockaircraftClient {\n\tmock := &MockaircraftClient{ctrl: ctrl}\n\tmock.recorder = &MockaircraftClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockaircraftClient) EXPECT() *MockaircraftClientMockRecorder {\n\treturn m.recorder\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 312, "end_line": 326, "text": "// BatchGet mocks base method.\nfunc (m *MockaircraftClient) BatchGet(arg0 context.Context, arg1 []string) ([]*schedules.Aircraft, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"BatchGet\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Aircraft)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// BatchGet indicates an expected call of BatchGet.\nfunc (mr *MockaircraftClientMockRecorder) BatchGet(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"BatchGet\", reflect.TypeOf((*MockaircraftClient)(nil).BatchGet), arg0, arg1)\n}\n", "n_tokens": 175, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [313, 326], "def_symbols": ["BatchGet"], "symbols": ["BatchGet", "mocks", "base", "method", "func", "MockaircraftClient", "arg0", "context", "Context", "arg1", "string", "schedules", "Aircraft", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockaircraftClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// BatchGet mocks base method.\nfunc (m *MockaircraftClient) BatchGet(arg0 context.Context, arg1 []string) ([]*schedules.Aircraft, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"BatchGet\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Aircraft)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// BatchGet indicates an expected call of BatchGet.\nfunc (mr *MockaircraftClientMockRecorder) BatchGet(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"BatchGet\", reflect.TypeOf((*MockaircraftClient)(nil).BatchGet), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/mocks/service_mocks.go", "rel_path": "internal/schedules/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 327, "end_line": 341, "text": "// Get mocks base method.\nfunc (m *MockaircraftClient) Get(arg0 context.Context, arg1 string) (*schedules.Aircraft, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Aircraft)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockaircraftClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockaircraftClient)(nil).Get), arg0, arg1)\n}\n", "n_tokens": 165, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [328, 341], "def_symbols": ["Get"], "symbols": ["Get", "mocks", "base", "method", "func", "MockaircraftClient", "arg0", "context", "Context", "arg1", "string", "schedules", "Aircraft", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockaircraftClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Get mocks base method.\nfunc (m *MockaircraftClient) Get(arg0 context.Context, arg1 string) (*schedules.Aircraft, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Aircraft)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockaircraftClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockaircraftClient)(nil).Get), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package adapter_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/mocks\"\n\n\t_ \"github.com/doug-martin/goqu/v9/dialect/postgres\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tpostgrestesting \"go.impalastudios.com/aviation/schedules/pkg/testing\"\n\t\"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 147, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 20], "def_symbols": [], "symbols": ["package", "adapter_test", "import", "context", "fmt", "strings", "testing", "time", "impalastudios", "com", "aviation", "schedules", "internal", "adapter", "mocks", "github", "doug", "martin", "goqu", "dialect", "postgres", "stretchr", "testify", "suite", "pkg", "pgsql", "postgrestesting", "uber", "org", "mock", "gomock"], "doc_head": "package adapter_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/mocks\"\n\t_ \"github.com/doug-martin/goqu/v9/dialect/postgres\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\tpostgrestesting \"go.impalastudios.com/aviation/schedules/pkg/testing\"\n\t\"go.uber.org/mock/gomock\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 21, "end_line": 38, "text": "func TestSchedulesPostgresSQLAdapter(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping schedules postgresql adapters test suite\")\n\t}\n\n\tsuite.Run(t, &schedulesPostgresSQLRepositoryTestSuite{\n\t\tPostgresSQLSuite: postgrestesting.NewPostgresSQLSuite(\n\t\t\tpostgrestesting.WithUserPassword(\"ro\", \"toor\"),\n\t\t\tpostgrestesting.WithDB(\"schedules\"),\n\t\t\tpostgrestesting.Migrate(),\n\t\t),\n\t})\n}\n\ntype schedulesPostgresSQLRepositoryTestSuite struct {\n\t*postgrestesting.PostgresSQLSuite\n}\n", "n_tokens": 127, "primary_symbol": "TestSchedulesPostgresSQLAdapter", "primary_kind": "function", "primary_span": [21, 38], "def_symbols": ["TestSchedulesPostgresSQLAdapter"], "symbols": ["TestSchedulesPostgresSQLAdapter", "func", "testing", "Short", "Skip", "skipping", "schedules", "postgresql", "adapters", "test", "suite", "Run", "schedulesPostgresSQLRepositoryTestSuite", "PostgresSQLSuite", "postgrestesting", "NewPostgresSQLSuite", "WithUserPassword", "toor", "WithDB", "Migrate", "type", "struct"], "doc_head": "func TestSchedulesPostgresSQLAdapter(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping schedules postgresql adapters test suite\")\n\t}\n\tsuite.Run(t, &schedulesPostgresSQLRepositoryTestSuite{\n\t\tPostgresSQLSuite: postgrestesting.NewPostgresSQLSuite(\n\t\t\tpostgrestesting.WithUserPassword(\"ro\", \"toor\"),\n\t\t\tpostgrestesting.WithDB(\"schedules\"),\n\t\t\tpostgrestesting.Migrate(),\n\t\t),\n\t})\n}\ntype schedulesPostgresSQLRepositoryTestSuite struct {\n\t*postgrestesting.PostgresSQLSuite\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 39, "end_line": 165, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_DirectFlights() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   11,\n\t\t\tFlightID:             \"20230820_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 20, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 20, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 20, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 20, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 20, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 20, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   12,\n\t\t\tFlightID:             \"20230821_CF_202_CDN_JFK\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"CF\"},\n\t\t\tFlightNumber:         202,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"JFK\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 21, 12, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 21, 12, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 21, 12, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 21, 16, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 21, 16, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 21, 16, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   13,\n\t\t\tFlightID:             \"20230820_TH_103_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"TH\"},\n\t\t\tFlightNumber:         103,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 20, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 20, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 20, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 20, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 20, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 20, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   14,\n\t\t\tFlightID:             \"20230820_KL_304_JFK_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         304,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"JFK\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 20, 20, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 20, 20, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 20, 20, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 21, 1, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 21, 1, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 21, 1, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   15,\n\t\t\tFlightID:             \"20230822_AA_105_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         105,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 22, 6, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 22, 6, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 22, 6, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 22, 9, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 22, 9, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 22, 9, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t}\n\ts.insertFlights(ctx, expectedFlights, nil)\n\n\tpage, err := repo.Search(ctx, &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{\"CDN\"},\n\t\tArrivalAirports:   []string{\"CDG\"},\n\t\tDepartureDate:     time.Date(2023, 8, 20, 0, 0, 0, 0, time.UTC),\n\t\tLimit:             10,\n\t})\n\n\ts.Require().NoError(err)\n\ts.Require().Len(page.Items, 2)\n\ts.Require().Nil(page.Next)\n\ts.Require().Equal(expectedFlights[0], page.Items[0].Flights[0])\n\ts.Require().Equal(expectedFlights[2], page.Items[1].Flights[0])\n}\n", "n_tokens": 2229, "primary_symbol": "TestSearch_DirectFlights", "primary_kind": "function", "primary_span": [39, 165], "def_symbols": ["TestSearch_DirectFlights"], "symbols": ["TestSearch_DirectFlights", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "expectedFlights", "schedules", "Flight", "FlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDN", "ArrivalAirport", "CDG", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "JFK", "make", "A10", "insertFlights", "nil", "page", "err", "Search", "FlightSearchQuery", "DepartureAirports", "string", "ArrivalAirports", "DepartureDate", "UTC", "Limit", "Require", "NoError", "Len", "Items", "Nil", "Next", "Equal", "Flights"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_DirectFlights() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   11,\n\t\t\tFlightID:             \"20230820_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 20, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 20, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 20, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 20, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 20, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 20, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatus"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 166, "end_line": 290, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_NoSchema() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   2,\n\t\t\tFlightID:             \"20230816_CF_202_CDN_JFK\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"CF\"},\n\t\t\tFlightNumber:         202,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"JFK\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   3,\n\t\t\tFlightID:             \"20230815_TH_103_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"TH\"},\n\t\t\tFlightNumber:         103,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   4,\n\t\t\tFlightID:             \"20230815_KL_304_JFK_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         304,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"JFK\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   5,\n\t\t\tFlightID:             \"20230817_AA_105_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         105,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t}\n\ts.insertFlights(ctx, expectedFlights, nil)\n\n\tpage, err := repo.Search(ctx, &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{\"CDN\"},\n\t\tArrivalAirports:   []string{\"CDG\"},\n\t\tDepartureDate:     time.Date(2023, 1, 1, 0, 0, 0, 0, time.Local),\n\t\tLimit:             10,\n\t})\n\n\ts.NoError(err)\n\ts.Len(page.Items, 0)\n\ts.Nil(page.Next)\n}\n", "n_tokens": 2180, "primary_symbol": "TestSearch_NoSchema", "primary_kind": "function", "primary_span": [166, 290], "def_symbols": ["TestSearch_NoSchema"], "symbols": ["TestSearch_NoSchema", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "expectedFlights", "schedules", "Flight", "FlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDN", "ArrivalAirport", "CDG", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "JFK", "make", "A10", "insertFlights", "nil", "page", "err", "Search", "FlightSearchQuery", "DepartureAirports", "string", "ArrivalAirports", "DepartureDate", "Limit", "NoError", "Len", "Items", "Nil", "Next"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_NoSchema() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStat"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 291, "end_line": 404, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_ConnectingFlights() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\tvar connectingFlightID int64 = 1\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tFlightID:             \"20230816_AA_101_CDN_IST\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tSequence:             1,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"IST\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   3,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tFlightID:             \"20230815_AA_101_IST_AMS\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tSequence:             2,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"IST\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"AMS\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   5,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightID:             \"20230817_AA_101_AMS_CDG\",\n\t\t\tFlightNumber:         101,\n\t\t\tSequence:             3,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 16, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 16, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 16, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 19, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 19, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 19, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\ts.insertFlights(ctx, expectedFlights, &connectingFlightID)\n\n\tpage, err := repo.Search(ctx, &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{\"CDN\"},\n\t\tArrivalAirports:   []string{\"CDG\"},\n\t\tDepartureDate:     time.Date(2023, 8, 15, 0, 0, 0, 0, time.UTC),\n\t\tLimit:             10,\n\t})\n\n\ts.NoError(err)\n\ts.Len(page.Items, 1)\n\ts.Equal(page.Items[0].Flights[0], expectedFlights[0])\n\ts.Equal(page.Items[0].Flights[1], expectedFlights[1])\n\ts.Equal(page.Items[0].Flights[2], expectedFlights[2])\n}\n", "n_tokens": 1655, "primary_symbol": "TestSearch_ConnectingFlights", "primary_kind": "function", "primary_span": [291, 404], "def_symbols": ["TestSearch_ConnectingFlights"], "symbols": ["TestSearch_ConnectingFlights", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "var", "connectingFlightID", "int64", "expectedFlights", "schedules", "Flight", "ConnectingFlightID", "FlightID", "Airline", "Designator", "FlightNumber", "Sequence", "DepartureAirport", "Airport", "CDN", "ArrivalAirport", "IST", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "AMS", "A10", "CDG", "insertFlights", "page", "err", "Search", "FlightSearchQuery", "DepartureAirports", "string", "ArrivalAirports", "DepartureDate", "UTC", "Limit", "NoError", "Len", "Items", "Equal", "Flights"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_ConnectingFlights() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\tvar connectingFlightID int64 = 1\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tFlightID:             \"20230816_AA_101_CDN_IST\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tSequence:             1,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"IST\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:  "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 405, "end_line": 488, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_TFT9691_ConnectingFlights() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\tvar connectingFlightID int64 = 1\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tFlightID:             \"20230815_KL_425_AMS_RUH\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         425,\n\t\t\tSequence:             1,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"RUH\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"AF\"},\n\t\t\t\t\tFlightNumber: 3123,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"SV\"},\n\t\t\t\t\tFlightNumber: 6301,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   2,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tFlightID:             \"20230816_KL_425_RUH_DMM\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         425,\n\t\t\tSequence:             2,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"RUH\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"DMM\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 16, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 16, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 16, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"AF\"},\n\t\t\t\t\tFlightNumber: 3123,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"SV\"},\n\t\t\t\t\tFlightNumber: 6301,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\ts.insertFlights(ctx, expectedFlights, &connectingFlightID)\n\n\t// Replicate SSIM import inconsistency by deleting the first flight of a connected flight\n\t// without updating the information of the connected flight row.\n\ts.deleteFlights(ctx, []int64{1})\n\n\tpage, err := repo.Search(ctx, &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{\"AMS\"},\n\t\tDepartureDate:     time.Date(2023, 8, 16, 0, 0, 0, 0, time.UTC),\n\t\tLimit:             10,\n\t})\n\n\ts.NoError(err)\n\ts.Len(page.Items, 0)\n}\n", "n_tokens": 1171, "primary_symbol": "TestSearch_TFT9691_ConnectingFlights", "primary_kind": "function", "primary_span": [405, 488], "def_symbols": ["TestSearch_TFT9691_ConnectingFlights"], "symbols": ["TestSearch_TFT9691_ConnectingFlights", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "var", "connectingFlightID", "int64", "expectedFlights", "schedules", "Flight", "ConnectingFlightID", "FlightID", "Airline", "Designator", "FlightNumber", "Sequence", "DepartureAirport", "Airport", "AMS", "ArrivalAirport", "RUH", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "DMM", "A10", "insertFlights", "Replicate", "SSIM", "import", "inconsistency", "deleting", "the", "first", "flight", "connected", "without", "updating", "information", "row", "deleteFlights", "page", "err", "Search", "FlightSearchQuery", "DepartureAirports", "string", "DepartureDate", "UTC", "Limit", "NoError", "Len", "Items"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestSearch_TFT9691_ConnectingFlights() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\tvar connectingFlightID int64 = 1\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tConnectingFlightID:   connectingFlightID,\n\t\t\tFlightID:             \"20230815_KL_425_AMS_RUH\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         425,\n\t\t\tSequence:             1,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"AMS\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"RUH\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tS"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 489, "end_line": 607, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestGet_NotFound() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   2,\n\t\t\tFlightID:             \"20230816_CF_202_CDN_JFK\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"CF\"},\n\t\t\tFlightNumber:         202,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"JFK\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   3,\n\t\t\tFlightID:             \"20230815_TH_103_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"TH\"},\n\t\t\tFlightNumber:         103,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   4,\n\t\t\tFlightID:             \"20230815_KL_304_JFK_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         304,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"JFK\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   5,\n\t\t\tFlightID:             \"20230817_AA_105_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         105,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t}\n\ts.insertFlights(ctx, expectedFlights, nil)\n\n\tflight, err := repo.Get(ctx, \"20230801_AA_101_AMS_JFK\")\n\n\ts.ErrorIs(err, schedules.ErrFlightNotFound)\n\ts.Nil(flight)\n}\n", "n_tokens": 2112, "primary_symbol": "TestGet_NotFound", "primary_kind": "function", "primary_span": [489, 607], "def_symbols": ["TestGet_NotFound"], "symbols": ["TestGet_NotFound", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "expectedFlights", "schedules", "Flight", "FlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDN", "ArrivalAirport", "CDG", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "JFK", "make", "A10", "insertFlights", "nil", "flight", "err", "Get", "ErrorIs", "ErrFlightNotFound", "Nil"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestGet_NotFound() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 608, "end_line": 726, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestGet_NoSchema() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   2,\n\t\t\tFlightID:             \"20230816_CF_202_CDN_JFK\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"CF\"},\n\t\t\tFlightNumber:         202,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"JFK\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   3,\n\t\t\tFlightID:             \"20230815_TH_103_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"TH\"},\n\t\t\tFlightNumber:         103,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   4,\n\t\t\tFlightID:             \"20230815_KL_304_JFK_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         304,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"JFK\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   5,\n\t\t\tFlightID:             \"20230817_AA_105_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         105,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t}\n\ts.insertFlights(ctx, expectedFlights, nil)\n\n\tflight, err := repo.Get(ctx, \"20230101_AA_101_AMS_JFK\")\n\n\ts.ErrorIs(err, schedules.ErrFlightNotFound)\n\ts.Nil(flight)\n}\n", "n_tokens": 2112, "primary_symbol": "TestGet_NoSchema", "primary_kind": "function", "primary_span": [608, 726], "def_symbols": ["TestGet_NoSchema"], "symbols": ["TestGet_NoSchema", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "expectedFlights", "schedules", "Flight", "FlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDN", "ArrivalAirport", "CDG", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "JFK", "make", "A10", "insertFlights", "nil", "flight", "err", "Get", "ErrorIs", "ErrFlightNotFound", "Nil"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestGet_NoSchema() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 727, "end_line": 845, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestGet_Success() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"CF\"},\n\t\t\t\t\tFlightNumber: 201,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"KL\"},\n\t\t\t\t\tFlightNumber: 1492,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tID:                   2,\n\t\t\tFlightID:             \"20230816_CF_202_CDN_JFK\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"CF\"},\n\t\t\tFlightNumber:         202,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"JFK\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 16, 12, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 16, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   3,\n\t\t\tFlightID:             \"20230815_TH_103_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"TH\"},\n\t\t\tFlightNumber:         103,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 14, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 17, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"A10\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   4,\n\t\t\tFlightID:             \"20230815_KL_304_JFK_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"KL\"},\n\t\t\tFlightNumber:         304,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"JFK\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 20, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 16, 1, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t\t{\n\t\t\tID:                   5,\n\t\t\tFlightID:             \"20230817_AA_105_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         105,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 17, 6, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 17, 9, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n\t\t\tArrivalStatus:        schedules.FlightTimingStatusNoStatus,\n\t\t\tCodeshare:            make([]*schedules.Codeshare, 0),\n\t\t},\n\t}\n\ts.insertFlights(ctx, expectedFlights, nil)\n\n\tflight, err := repo.Get(ctx, \"20230815_TH_103_CDN_CDG\")\n\n\ts.NoError(err)\n\ts.Equal(expectedFlights[2], flight)\n}\n", "n_tokens": 2110, "primary_symbol": "TestGet_Success", "primary_kind": "function", "primary_span": [727, 845], "def_symbols": ["TestGet_Success"], "symbols": ["TestGet_Success", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Background", "cipher", "mocks", "NewMockcipher", "gomock", "NewController", "repo", "adapter", "NewFlightsPostgresRepository", "expectedFlights", "schedules", "Flight", "FlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDN", "ArrivalAirport", "CDG", "ScheduledDepartureAt", "time", "Date", "Local", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft", "C30", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusNoStatus", "ArrivalStatus", "Codeshare", "JFK", "make", "A10", "insertFlights", "nil", "flight", "err", "Get", "NoError", "Equal"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) TestGet_Success() {\n\tctx := context.Background()\n\tcipher := mocks.NewMockcipher(gomock.NewController(s.T()))\n\trepo := adapter.NewFlightsPostgresRepository(s.DB(ctx), cipher)\n\texpectedFlights := []*schedules.Flight{\n\t\t{\n\t\t\tID:                   1,\n\t\t\tFlightID:             \"20230815_AA_101_CDN_CDG\",\n\t\t\tAirline:              &schedules.Airline{Designator: \"AA\"},\n\t\t\tFlightNumber:         101,\n\t\t\tDepartureAirport:     &schedules.Airport{Designator: \"CDN\"},\n\t\t\tArrivalAirport:       &schedules.Airport{Designator: \"CDG\"},\n\t\t\tScheduledDepartureAt: time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tExpectedDepartureAt:  time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tActualDepartureAt:    time.Date(2023, 8, 15, 8, 0, 0, 0, time.Local),\n\t\t\tScheduledArrivalAt:   time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tExpectedArrivalAt:    time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tActualArrivalAt:      time.Date(2023, 8, 15, 11, 0, 0, 0, time.Local),\n\t\t\tAircraft:             &schedules.Aircraft{ID: \"C30\"},\n\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\tDepartureStatus:      schedules.FlightTimingStatusNoStatus,\n"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 846, "end_line": 955, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) insertFlights(ctx context.Context, flights []*schedules.Flight, connectingFlightID *int64) {\n\t_, err := s.DB(ctx).Exec(ctx, \"CREATE SCHEMA IF NOT EXISTS period_2023_8\")\n\ts.Require().NoError(err)\n\n\terr = pgsql.MigrateUpWithSchema(s.PostgresSQLSuite.GetDBConfig(), \"period_2023_8\")\n\ts.Require().NoError(err)\n\n\tif connectingFlightID != nil {\n\t\tdepartureAirports := []string{}\n\t\tarrivalAirports := []string{}\n\t\tflightIDs := []string{}\n\t\tscheduledDepartureAts := []string{}\n\n\t\tfor _, flight := range flights {\n\t\t\tflightIDs = append(flightIDs, flight.FlightID)\n\t\t\tscheduledDepartureAts = append(scheduledDepartureAts, flight.ScheduledDepartureAt.Format(time.DateOnly))\n\t\t\tdepartureAirports = append(departureAirports, flight.DepartureAirport.Designator)\n\t\t\tarrivalAirports = append(arrivalAirports, flight.ArrivalAirport.Designator)\n\t\t}\n\n\t\t_, err = s.DB(ctx).Exec(\n\t\t\tctx,\n\t\t\t`INSERT INTO period_2023_8.connecting_flights (\n\t\t\t\t  \tid, \n\t\t\t\t\tconnecting_flight_id, \n\t\t\t\t\tnum_flights, \n\t\t\t\t\tarrival_airport,\n\t\t\t\t\tflight_ids,\n\t\t\t\t  \tscheduled_departure_ats,\n\t\t\t\t  \tdeparture_airports,\n\t\t\t\t  \tarrival_airports\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,\n\t\t\tconnectingFlightID, strings.Join(flightIDs, \"-\"), len(flights), flights[len(flights)-1].ArrivalAirport.Designator, pgsql.Array(flightIDs), pgsql.Array(scheduledDepartureAts), pgsql.Array(departureAirports), pgsql.Array(arrivalAirports),\n\t\t)\n\t\ts.Require().NoError(err)\n\t}\n\n\t// insert codeshares of a flight to the postgresql database for testing\n\t// insert flights to the postgresql database for testing\n\t// insert flights_codeshares to the postgresql database to link flights and codeshare for testing\n\tfor _, flight := range flights {\n\t\tcodeshareAirlines := []string{}\n\t\tcodeshareDesignators := []string{}\n\t\tcodeshares := [][]string{}\n\n\t\tfor _, codeshare := range flight.Codeshare {\n\t\t\tcodeshareAirlines = append(codeshareAirlines, codeshare.Airline.Designator)\n\t\t\tcodeshareDesignators = append(codeshareDesignators, fmt.Sprintf(\"%s%d\", codeshare.Airline.Designator, codeshare.FlightNumber))\n\t\t\tcodeshares = append(codeshares, []string{codeshare.Airline.Designator, fmt.Sprintf(\"%d\", codeshare.FlightNumber)})\n\t\t}\n\n\t\t_, err := s.DB(ctx).Exec(\n\t\t\tctx,\n\t\t\t`INSERT INTO period_2023_8.flights (\n\t\t\t\tid,\n\t\t\t\tflight_id,\n\t\t\t\tconnecting_flight_id,\n\t\t\t\tairline,\n\t\t\t\tflight_number,\n\t\t\t\tsequence,\n\t\t\t\titinerary,\n\t\t\t\tdeparture_airport, \n\t\t\t\tarrival_airport, \n\t\t\t\tscheduled_departure_at, \n\t\t\t\tscheduled_departure_time_tz,\n\t\t\t\texpected_departure_at, \n\t\t\t\texpected_departure_time_tz,\n\t\t\t\tactual_departure_at, \n\t\t\t\tactual_departure_time_tz,\n\t\t\t\tscheduled_arrival_at, \n\t\t\t\tscheduled_arrival_time_tz,\n\t\t\t\texpected_arrival_at, \n\t\t\t\texpected_arrival_time_tz,\n\t\t\t\tactual_arrival_at, \n\t\t\t\tactual_arrival_time_tz,\n\t\t\t\taircraft,\n\t\t\t\tcodeshare_airlines,\n            \tcodeshare_designators,\n            \tcodeshares\n\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25)`,\n\t\t\tflight.ID,\n\t\t\tflight.FlightID,\n\t\t\tconnectingFlightID,\n\t\t\tflight.Airline.Designator,\n\t\t\tflight.FlightNumber,\n\t\t\tflight.Sequence,\n\t\t\t1,\n\t\t\tflight.DepartureAirport.Designator,\n\t\t\tflight.ArrivalAirport.Designator,\n\t\t\tflight.ScheduledDepartureAt,\n\t\t\tflight.ScheduledDepartureAt.Format(\"1504\")+flight.ScheduledDepartureAt.Format(\"-0700\"),\n\t\t\tflight.ExpectedDepartureAt,\n\t\t\tflight.ExpectedDepartureAt.Format(\"1504\")+flight.ScheduledDepartureAt.Format(\"-0700\"),\n\t\t\tflight.ActualDepartureAt,\n\t\t\tflight.ActualDepartureAt.Format(\"1504\")+flight.ScheduledDepartureAt.Format(\"-0700\"),\n\t\t\tflight.ScheduledArrivalAt,\n\t\t\tflight.ScheduledArrivalAt.Format(\"1504\")+flight.ScheduledArrivalAt.Format(\"-0700\"),\n\t\t\tflight.ExpectedArrivalAt,\n\t\t\tflight.ExpectedArrivalAt.Format(\"1504\")+flight.ScheduledArrivalAt.Format(\"-0700\"),\n\t\t\tflight.ActualArrivalAt,\n\t\t\tflight.ActualArrivalAt.Format(\"1504\")+flight.ScheduledArrivalAt.Format(\"-0700\"),\n\t\t\tflight.Aircraft.ID,\n\t\t\tcodeshareAirlines,\n\t\t\tcodeshareDesignators,\n\t\t\tcodeshares,\n\t\t)\n\t\ts.Require().NoError(err)\n\t}\n}\n", "n_tokens": 1189, "primary_symbol": "insertFlights", "primary_kind": "function", "primary_span": [846, 955], "def_symbols": ["insertFlights"], "symbols": ["insertFlights", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Context", "flights", "schedules", "Flight", "connectingFlightID", "int64", "err", "Exec", "CREATE", "SCHEMA", "NOT", "EXISTS", "period_2023_8", "Require", "NoError", "pgsql", "MigrateUpWithSchema", "PostgresSQLSuite", "GetDBConfig", "nil", "departureAirports", "string", "arrivalAirports", "flightIDs", "scheduledDepartureAts", "for", "flight", "range", "append", "FlightID", "ScheduledDepartureAt", "Format", "time", "DateOnly", "DepartureAirport", "Designator", "ArrivalAirport", "INSERT", "INTO", "connecting_flights", "connecting_flight_id", "num_flights", "arrival_airport", "flight_ids", "scheduled_departure_ats", "departure_airports", "arrival_airports", "VALUES", "strings", "Join", "len", "Array", "insert", "codeshares", "the", "postgresql", "database", "testing", "flights_codeshares", "link", "and", "codeshare", "codeshareAirlines", "codeshareDesignators", "Codeshare", "Airline", "fmt", "Sprintf", "FlightNumber", "flight_id", "airline", "flight_number", "sequence", "itinerary", "departure_airport", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshare_airlines", "codeshare_designators", "Sequence", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Aircraft"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) insertFlights(ctx context.Context, flights []*schedules.Flight, connectingFlightID *int64) {\n\t_, err := s.DB(ctx).Exec(ctx, \"CREATE SCHEMA IF NOT EXISTS period_2023_8\")\n\ts.Require().NoError(err)\n\terr = pgsql.MigrateUpWithSchema(s.PostgresSQLSuite.GetDBConfig(), \"period_2023_8\")\n\ts.Require().NoError(err)\n\tif connectingFlightID != nil {\n\t\tdepartureAirports := []string{}\n\t\tarrivalAirports := []string{}\n\t\tflightIDs := []string{}\n\t\tscheduledDepartureAts := []string{}\n\t\tfor _, flight := range flights {\n\t\t\tflightIDs = append(flightIDs, flight.FlightID)\n\t\t\tscheduledDepartureAts = append(scheduledDepartureAts, flight.ScheduledDepartureAt.Format(time.DateOnly))\n\t\t\tdepartureAirports = append(departureAirports, flight.DepartureAirport.Designator)\n\t\t\tarrivalAirports = append(arrivalAirports, flight.ArrivalAirport.Designator)\n\t\t}\n\t\t_, err = s.DB(ctx).Exec(\n\t\t\tctx,\n\t\t\t`INSERT INTO period_2023_8.connecting_flights (\n\t\t\t\t  \tid, \n\t\t\t\t\tconnecting_flight_id, \n\t\t\t\t\tnum_flights, \n\t\t\t\t\tarrival_airport,\n\t\t\t\t\tflight_ids,\n\t\t\t\t  \tscheduled_departure_ats,\n\t\t\t\t  \tdeparture_airports,\n\t\t\t\t  \tarrival_airports\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,\n\t\t\tconn"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository_test.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository_test.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 956, "end_line": 971, "text": "func (s *schedulesPostgresSQLRepositoryTestSuite) deleteFlights(ctx context.Context, ids []int64) {\n\t_, err := s.DB(ctx).Exec(\n\t\tctx,\n\t\t`DELETE FROM period_2023_8.flights WHERE id = ANY($1::int[])`,\n\t\tpgsql.Array(ids),\n\t)\n\ts.Require().NoError(err)\n}\n\nfunc (s *schedulesPostgresSQLRepositoryTestSuite) TearDownTest() {\n\tctx := context.Background()\n\n\t_, err := s.DB(ctx).Exec(ctx, \"DROP SCHEMA IF EXISTS period_2023_8 CASCADE\")\n\ts.Require().NoError(err)\n}\n", "n_tokens": 135, "primary_symbol": "deleteFlights", "primary_kind": "function", "primary_span": [956, 971], "def_symbols": ["deleteFlights", "TearDownTest"], "symbols": ["deleteFlights", "TearDownTest", "func", "schedulesPostgresSQLRepositoryTestSuite", "ctx", "context", "Context", "ids", "int64", "err", "Exec", "DELETE", "FROM", "period_2023_8", "flights", "WHERE", "ANY", "int", "pgsql", "Array", "Require", "NoError", "Background", "DROP", "SCHEMA", "EXISTS", "CASCADE"], "doc_head": "func (s *schedulesPostgresSQLRepositoryTestSuite) deleteFlights(ctx context.Context, ids []int64) {\n\t_, err := s.DB(ctx).Exec(\n\t\tctx,\n\t\t`DELETE FROM period_2023_8.flights WHERE id = ANY($1::int[])`,\n\t\tpgsql.Array(ids),\n\t)\n\ts.Require().NoError(err)\n}\nfunc (s *schedulesPostgresSQLRepositoryTestSuite) TearDownTest() {\n\tctx := context.Background()\n\t_, err := s.DB(ctx).Exec(ctx, \"DROP SCHEMA IF EXISTS period_2023_8 CASCADE\")\n\ts.Require().NoError(err)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go", "rel_path": "internal/schedules/adapter/airline_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package adapter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/requestid\"\n\tgrpcrid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"time\"\n\n\tgrpc_clients \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airlines\"\n\t\"go.impalastudios.com/log\"\n)\n\n// AirlineGrpcClient is a wrapper around the grpc client for the airline service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AirlineGrpcClient struct {\n\tcache  *lru.Cache[string, *schedules.Airline]\n\tclient grpc_clients.AirlinesServiceClient\n}\n", "n_tokens": 195, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 25], "def_symbols": [], "symbols": ["package", "adapter", "import", "context", "fmt", "github", "com", "cockroachdb", "errors", "lru", "hashicorp", "golang", "impalastudios", "aviation", "schedules", "internal", "requestid", "grpcrid", "grpc", "uber", "org", "zap", "google", "metadata", "time", "grpc_clients", "airlines", "log", "AirlineGrpcClient", "wrapper", "around", "the", "client", "for", "airline", "service", "contains", "cache", "avoid", "unnecessary", "calls", "type", "struct", "Cache", "string", "Airline", "AirlinesServiceClient"], "doc_head": "package adapter\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/requestid\"\n\tgrpcrid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"time\"\n\tgrpc_clients \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airlines\"\n\t\"go.impalastudios.com/log\"\n)\n// AirlineGrpcClient is a wrapper around the grpc client for the airline service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AirlineGrpcClient struct {\n\tcache  *lru.Cache[string, *schedules.Airline]\n\tclient grpc_clients.AirlinesServiceClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go", "rel_path": "internal/schedules/adapter/airline_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 35, "text": "// NewAirlineGrpcClient creates a new AirlineGrpcClient.\nfunc NewAirlineGrpcClient(client grpc_clients.AirlinesServiceClient) *AirlineGrpcClient {\n\tcache, _ := lru.New[string, *schedules.Airline](lruCacheSize)\n\n\treturn &AirlineGrpcClient{\n\t\tcache:  cache,\n\t\tclient: client,\n\t}\n}\n", "n_tokens": 81, "primary_symbol": "NewAirlineGrpcClient", "primary_kind": "function", "primary_span": [27, 35], "def_symbols": ["NewAirlineGrpcClient"], "symbols": ["NewAirlineGrpcClient", "creates", "new", "AirlineGrpcClient", "func", "client", "grpc_clients", "AirlinesServiceClient", "cache", "lru", "New", "string", "schedules", "Airline", "lruCacheSize", "return"], "doc_head": "// NewAirlineGrpcClient creates a new AirlineGrpcClient.\nfunc NewAirlineGrpcClient(client grpc_clients.AirlinesServiceClient) *AirlineGrpcClient {\n\tcache, _ := lru.New[string, *schedules.Airline](lruCacheSize)\n\treturn &AirlineGrpcClient{\n\t\tcache:  cache,\n\t\tclient: client,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go", "rel_path": "internal/schedules/adapter/airline_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 36, "end_line": 61, "text": "// Get returns an airline by its ID.\nfunc (c *AirlineGrpcClient) Get(ctx context.Context, designator string, forDate time.Time) (*schedules.Airline, error) {\n\tlog.Debug(ctx, \"Getting airline details.\", zap.String(\"designator\", designator), zap.Time(\"for_date\", forDate))\n\n\tcacheKey := c.getCacheKey(designator, forDate)\n\tif airline, ok := c.cache.Get(cacheKey); ok {\n\t\tlog.Debug(ctx, \"Airline cache hit.\", zap.Any(\"airline\", airline))\n\t\treturn airline, nil\n\t}\n\n\td := forDate.Format(time.DateOnly)\n\treq := &grpc_clients.GetByDesignatorRequest{Designator: designator, ForDate: &d}\n\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get airline details\")\n\t}\n\n\tlog.Debug(ctx, \"fetched airline through gRPC\", zap.Any(\"airline\", resp.Airline))\n\n\tarl := c.toDomain(resp.Airline)\n\tc.cache.Add(cacheKey, arl)\n\treturn arl, nil\n}\n", "n_tokens": 264, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [37, 61], "def_symbols": ["Get"], "symbols": ["Get", "returns", "airline", "its", "func", "AirlineGrpcClient", "ctx", "context", "Context", "designator", "string", "forDate", "time", "Time", "schedules", "Airline", "error", "log", "Debug", "Getting", "details", "zap", "String", "for_date", "cacheKey", "getCacheKey", "cache", "hit", "Any", "return", "nil", "Format", "DateOnly", "req", "grpc_clients", "GetByDesignatorRequest", "Designator", "ForDate", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "resp", "err", "client", "GetByDesignator", "errors", "Wrap", "failed", "get", "fetched", "through", "gRPC", "arl", "toDomain", "Add"], "doc_head": "// Get returns an airline by its ID.\nfunc (c *AirlineGrpcClient) Get(ctx context.Context, designator string, forDate time.Time) (*schedules.Airline, error) {\n\tlog.Debug(ctx, \"Getting airline details.\", zap.String(\"designator\", designator), zap.Time(\"for_date\", forDate))\n\tcacheKey := c.getCacheKey(designator, forDate)\n\tif airline, ok := c.cache.Get(cacheKey); ok {\n\t\tlog.Debug(ctx, \"Airline cache hit.\", zap.Any(\"airline\", airline))\n\t\treturn airline, nil\n\t}\n\td := forDate.Format(time.DateOnly)\n\treq := &grpc_clients.GetByDesignatorRequest{Designator: designator, ForDate: &d}\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get airline details\")\n\t}\n\tlog.Debug(ctx, \"fetched airline through gRPC\", zap.Any(\"airline\", resp.Airline))\n\tarl := c.toDomain(resp.Airline)\n\tc.cache.Add(cacheKey, arl)\n\treturn arl, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go", "rel_path": "internal/schedules/adapter/airline_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 62, "end_line": 105, "text": "// BatchGet returns airlines by their designators.\nfunc (c *AirlineGrpcClient) BatchGet(ctx context.Context, designators []string, forDate time.Time) ([]*schedules.Airline, error) {\n\tlog.Debug(ctx, \"Getting batch of airports details.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate))\n\n\tvar result []*schedules.Airline\n\tvar cacheMisses []string\n\n\tfor _, designator := range designators {\n\t\tcacheKey := c.getCacheKey(designator, forDate)\n\n\t\tif airline, found := c.cache.Get(cacheKey); found {\n\t\t\tlog.Debug(ctx, \"Airline cache hit.\", zap.String(\"designator\", designator), zap.Time(\"for_date\", forDate), zap.Any(\"airline\", airline))\n\t\t\tresult = append(result, airline)\n\t\t\tcontinue\n\t\t}\n\n\t\tcacheMisses = append(cacheMisses, designator)\n\t}\n\n\tif len(cacheMisses) > 0 {\n\t\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\t\tfor _, batch := range chunkEvery(cacheMisses, 25) {\n\t\t\tlog.Debug(ctx, \"Retrieving airports batch.\", zap.Strings(\"designators\", batch), zap.Time(\"for_date\", forDate))\n\n\t\t\tfd := forDate.Format(time.DateOnly)\n\t\t\treq := &grpc_clients.BatchGetByDesignatorRequest{Designators: batch, ForDate: &fd}\n\t\t\tresp, err := c.client.BatchGetByDesignator(ctx, req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(ctx, \"Cannot retrieve airlines batch.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate), zap.Error(err))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor _, airline := range resp.Airlines {\n\t\t\t\tarl := c.toDomain(airline)\n\t\t\t\tcacheKey := c.getCacheKey(arl.Designator, forDate)\n\t\t\t\tc.cache.Add(cacheKey, arl)\n\t\t\t\tresult = append(result, arl)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result, nil\n}\n", "n_tokens": 438, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [63, 105], "def_symbols": ["BatchGet"], "symbols": ["BatchGet", "returns", "airlines", "their", "designators", "func", "AirlineGrpcClient", "ctx", "context", "Context", "string", "forDate", "time", "Time", "schedules", "Airline", "error", "log", "Debug", "Getting", "batch", "airports", "details", "zap", "Strings", "for_date", "var", "result", "cacheMisses", "for", "designator", "range", "cacheKey", "getCacheKey", "airline", "found", "cache", "Get", "hit", "String", "Any", "append", "continue", "len", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "chunkEvery", "Retrieving", "Format", "DateOnly", "req", "grpc_clients", "BatchGetByDesignatorRequest", "Designators", "ForDate", "resp", "err", "client", "BatchGetByDesignator", "nil", "Error", "Cannot", "retrieve", "Airlines", "arl", "toDomain", "Designator", "Add", "return"], "doc_head": "// BatchGet returns airlines by their designators.\nfunc (c *AirlineGrpcClient) BatchGet(ctx context.Context, designators []string, forDate time.Time) ([]*schedules.Airline, error) {\n\tlog.Debug(ctx, \"Getting batch of airports details.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate))\n\tvar result []*schedules.Airline\n\tvar cacheMisses []string\n\tfor _, designator := range designators {\n\t\tcacheKey := c.getCacheKey(designator, forDate)\n\t\tif airline, found := c.cache.Get(cacheKey); found {\n\t\t\tlog.Debug(ctx, \"Airline cache hit.\", zap.String(\"designator\", designator), zap.Time(\"for_date\", forDate), zap.Any(\"airline\", airline))\n\t\t\tresult = append(result, airline)\n\t\t\tcontinue\n\t\t}\n\t\tcacheMisses = append(cacheMisses, designator)\n\t}\n\tif len(cacheMisses) > 0 {\n\t\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\t\tfor _, batch := range chunkEvery(cacheMisses, 25) {\n\t\t\tlog.Debug(ctx, \"Retrieving airports batch.\", zap.Strings(\"designators\", batch), zap.Time(\"for_date\", forDate))\n\t\t\tfd := forDate.Format(time.DateOnly)\n\t\t\treq := &grpc_clients.BatchGetByDesignatorRequest{Designators: batch, ForDate: &fd}\n\t\t\tresp, err := c.client.BatchG"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go", "rel_path": "internal/schedules/adapter/airline_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 106, "end_line": 158, "text": "func (c *AirlineGrpcClient) toDomain(a *grpc_clients.Airline) *schedules.Airline {\n\tad := &schedules.Airline{}\n\n\tad.ID = &a.Id\n\tif a.Designator != nil {\n\t\tad.Designator = *a.Designator\n\t}\n\tad.IATA = a.Iata\n\tad.ICAO = a.Icao\n\tad.Classification = uint(a.Classification)\n\tad.Name = a.Name\n\tad.Description = a.GetDescription()\n\tad.WebsiteURL = a.WebsiteUrl\n\tad.WikipediaURL = a.GetWikipediaUrl()\n\tad.FacebookURL = a.FacebookUrl\n\tad.TwitterURL = a.TwitterUrl\n\tad.ReservationTelephoneNumber = a.ReservationTelephoneNumber\n\n\tif a.HubAirport != nil {\n\t\tad.HubAirport = &schedules.Airport{\n\t\t\tID:         &a.GetHubAirport().Id,\n\t\t\tDesignator: a.GetHubAirport().GetDesignator(),\n\t\t\tName:       a.GetHubAirport().Name,\n\t\t}\n\t\tif a.GetHubAirport().City != nil {\n\t\t\tad.HubAirport.City = &schedules.City{\n\t\t\t\tID:       int(a.GetHubAirport().GetCity().GetId()),\n\t\t\t\tName:     a.GetHubAirport().GetCity().GetName(),\n\t\t\t\tState:    a.GetHubAirport().GetCity().State,\n\t\t\t\tTimezone: a.GetHubAirport().GetCity().GetTimezone(),\n\t\t\t\tCountry: &schedules.Country{\n\t\t\t\t\tID:   a.GetHubAirport().GetCity().GetCountry().GetId(),\n\t\t\t\t\tName: a.GetHubAirport().GetCity().GetCountry().GetName(),\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\tad.Images = make(map[string]string)\n\tif a.GetAssets().Tail != nil {\n\t\tad.Images[\"tail\"] = a.GetAssets().GetTail()\n\t}\n\tif a.GetAssets().Square != nil {\n\t\tad.Images[\"square\"] = a.GetAssets().GetSquare()\n\t}\n\tif a.GetAssets().Rect != nil {\n\t\tad.Images[\"rect\"] = a.GetAssets().GetRect()\n\t}\n\tad.CreatedAt = a.CreatedAt.AsTime()\n\tad.UpdatedAt = a.UpdatedAt.AsTime()\n\n\treturn ad\n}\n", "n_tokens": 458, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [106, 158], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "AirlineGrpcClient", "grpc_clients", "Airline", "schedules", "Designator", "nil", "IATA", "Iata", "ICAO", "Icao", "Classification", "uint", "Name", "Description", "GetDescription", "WebsiteURL", "WebsiteUrl", "WikipediaURL", "GetWikipediaUrl", "FacebookURL", "FacebookUrl", "TwitterURL", "TwitterUrl", "ReservationTelephoneNumber", "HubAirport", "Airport", "GetHubAirport", "GetDesignator", "City", "int", "GetCity", "GetId", "GetName", "State", "Timezone", "GetTimezone", "Country", "GetCountry", "Images", "make", "map", "string", "GetAssets", "Tail", "tail", "GetTail", "Square", "square", "GetSquare", "Rect", "rect", "GetRect", "CreatedAt", "AsTime", "UpdatedAt", "return"], "doc_head": "func (c *AirlineGrpcClient) toDomain(a *grpc_clients.Airline) *schedules.Airline {\n\tad := &schedules.Airline{}\n\tad.ID = &a.Id\n\tif a.Designator != nil {\n\t\tad.Designator = *a.Designator\n\t}\n\tad.IATA = a.Iata\n\tad.ICAO = a.Icao\n\tad.Classification = uint(a.Classification)\n\tad.Name = a.Name\n\tad.Description = a.GetDescription()\n\tad.WebsiteURL = a.WebsiteUrl\n\tad.WikipediaURL = a.GetWikipediaUrl()\n\tad.FacebookURL = a.FacebookUrl\n\tad.TwitterURL = a.TwitterUrl\n\tad.ReservationTelephoneNumber = a.ReservationTelephoneNumber\n\tif a.HubAirport != nil {\n\t\tad.HubAirport = &schedules.Airport{\n\t\t\tID:         &a.GetHubAirport().Id,\n\t\t\tDesignator: a.GetHubAirport().GetDesignator(),\n\t\t\tName:       a.GetHubAirport().Name,\n\t\t}\n\t\tif a.GetHubAirport().City != nil {\n\t\t\tad.HubAirport.City = &schedules.City{\n\t\t\t\tID:       int(a.GetHubAirport().GetCity().GetId()),\n\t\t\t\tName:     a.GetHubAirport().GetCity().GetName(),\n\t\t\t\tState:    a.GetHubAirport().GetCity().State,\n\t\t\t\tTimezone: a.GetHubAirport().GetCity().GetTimezone(),\n\t\t\t\tCountry: &schedules.Country{\n\t\t\t\t\tID:   a.GetHubAirport().GetCity().GetCountry().GetId(),\n\t\t\t\t\tName: a.GetHubAirport().GetCity().GetCountry().GetName(),\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\tad.Images = make(map"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airline_grpc_client.go", "rel_path": "internal/schedules/adapter/airline_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 159, "end_line": 162, "text": "func (c *AirlineGrpcClient) getCacheKey(designator string, d time.Time) string {\n\treturn fmt.Sprintf(\"%s:%s\", d.Format(time.DateOnly), designator)\n}\n", "n_tokens": 42, "primary_symbol": "getCacheKey", "primary_kind": "function", "primary_span": [159, 162], "def_symbols": ["getCacheKey"], "symbols": ["getCacheKey", "func", "AirlineGrpcClient", "designator", "string", "time", "Time", "return", "fmt", "Sprintf", "Format", "DateOnly"], "doc_head": "func (c *AirlineGrpcClient) getCacheKey(designator string, d time.Time) string {\n\treturn fmt.Sprintf(\"%s:%s\", d.Format(time.DateOnly), designator)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go", "rel_path": "internal/schedules/adapter/aircraft_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 26, "text": "package adapter\n\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/requestid\"\n\tgrpcrid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"strings\"\n\n\tgrpc_clients \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/aircraft\"\n\t\"go.impalastudios.com/log\"\n)\n\nconst lruCacheSize = 5000\n\n// AircraftGrpcClient is a wrapper around the grpc client for the aircraft service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AircraftGrpcClient struct {\n\tcache  *lru.Cache[string, *schedules.Aircraft]\n\tclient grpc_clients.AircraftServiceClient\n}\n", "n_tokens": 199, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 26], "def_symbols": [], "symbols": ["package", "adapter", "import", "context", "github", "com", "cockroachdb", "errors", "lru", "hashicorp", "golang", "impalastudios", "aviation", "schedules", "internal", "requestid", "grpcrid", "grpc", "uber", "org", "zap", "google", "metadata", "strings", "grpc_clients", "aircraft", "log", "const", "lruCacheSize", "AircraftGrpcClient", "wrapper", "around", "the", "client", "for", "service", "contains", "cache", "avoid", "unnecessary", "calls", "type", "struct", "Cache", "string", "Aircraft", "AircraftServiceClient"], "doc_head": "package adapter\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/requestid\"\n\tgrpcrid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"strings\"\n\tgrpc_clients \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/aircraft\"\n\t\"go.impalastudios.com/log\"\n)\nconst lruCacheSize = 5000\n// AircraftGrpcClient is a wrapper around the grpc client for the aircraft service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AircraftGrpcClient struct {\n\tcache  *lru.Cache[string, *schedules.Aircraft]\n\tclient grpc_clients.AircraftServiceClient\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go", "rel_path": "internal/schedules/adapter/aircraft_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 27, "end_line": 36, "text": "// NewAircraftGrpcClient creates a new AircraftGrpcClient.\nfunc NewAircraftGrpcClient(client grpc_clients.AircraftServiceClient) *AircraftGrpcClient {\n\tcache, _ := lru.New[string, *schedules.Aircraft](lruCacheSize)\n\n\treturn &AircraftGrpcClient{\n\t\tcache:  cache,\n\t\tclient: client,\n\t}\n}\n", "n_tokens": 79, "primary_symbol": "NewAircraftGrpcClient", "primary_kind": "function", "primary_span": [28, 36], "def_symbols": ["NewAircraftGrpcClient"], "symbols": ["NewAircraftGrpcClient", "creates", "new", "AircraftGrpcClient", "func", "client", "grpc_clients", "AircraftServiceClient", "cache", "lru", "New", "string", "schedules", "Aircraft", "lruCacheSize", "return"], "doc_head": "// NewAircraftGrpcClient creates a new AircraftGrpcClient.\nfunc NewAircraftGrpcClient(client grpc_clients.AircraftServiceClient) *AircraftGrpcClient {\n\tcache, _ := lru.New[string, *schedules.Aircraft](lruCacheSize)\n\treturn &AircraftGrpcClient{\n\t\tcache:  cache,\n\t\tclient: client,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go", "rel_path": "internal/schedules/adapter/aircraft_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 37, "end_line": 59, "text": "// Get returns an aircraft by its IATA code.\nfunc (c *AircraftGrpcClient) Get(ctx context.Context, id string) (*schedules.Aircraft, error) {\n\tlog.Debug(ctx, \"getting aircraft details\", zap.String(\"id\", id))\n\n\tif aircraft, ok := c.cache.Get(id); ok {\n\t\tlog.Debug(ctx, \"found aircraft in cache\", zap.Any(\"aircraft\", aircraft))\n\t\treturn aircraft, nil\n\t}\n\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\tresp, err := c.client.Get(ctx, &grpc_clients.AircraftDetailsRequest{Id: id})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get aircraft details\")\n\t}\n\n\tlog.Debug(ctx, \"Fetched aircraft through gRPC.\", zap.Any(\"aircraft\", resp.Aircraft))\n\n\tarct := c.toDomain(resp.Aircraft)\n\n\tc.cache.Add(id, arct)\n\treturn arct, nil\n}\n", "n_tokens": 205, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [38, 59], "def_symbols": ["Get"], "symbols": ["Get", "returns", "aircraft", "its", "IATA", "code", "func", "AircraftGrpcClient", "ctx", "context", "Context", "string", "schedules", "Aircraft", "error", "log", "Debug", "getting", "details", "zap", "String", "cache", "found", "Any", "return", "nil", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "resp", "err", "client", "grpc_clients", "AircraftDetailsRequest", "errors", "Wrap", "failed", "get", "Fetched", "through", "gRPC", "arct", "toDomain", "Add"], "doc_head": "// Get returns an aircraft by its IATA code.\nfunc (c *AircraftGrpcClient) Get(ctx context.Context, id string) (*schedules.Aircraft, error) {\n\tlog.Debug(ctx, \"getting aircraft details\", zap.String(\"id\", id))\n\tif aircraft, ok := c.cache.Get(id); ok {\n\t\tlog.Debug(ctx, \"found aircraft in cache\", zap.Any(\"aircraft\", aircraft))\n\t\treturn aircraft, nil\n\t}\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\tresp, err := c.client.Get(ctx, &grpc_clients.AircraftDetailsRequest{Id: id})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get aircraft details\")\n\t}\n\tlog.Debug(ctx, \"Fetched aircraft through gRPC.\", zap.Any(\"aircraft\", resp.Aircraft))\n\tarct := c.toDomain(resp.Aircraft)\n\tc.cache.Add(id, arct)\n\treturn arct, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go", "rel_path": "internal/schedules/adapter/aircraft_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 60, "end_line": 99, "text": "// BatchGet returns airlines by their designators.\nfunc (c *AircraftGrpcClient) BatchGet(ctx context.Context, designators []string) ([]*schedules.Aircraft, error) {\n\tlog.Debug(ctx, \"Getting batch of aircraft details.\", zap.Strings(\"designators\", designators))\n\n\tvar result []*schedules.Aircraft\n\tvar cacheMisses []string\n\n\tfor _, designator := range designators {\n\t\tif aircraft, found := c.cache.Get(designator); found {\n\t\t\tlog.Debug(ctx, \"Airline cache hit.\", zap.String(\"designator\", designator), zap.Any(\"aircraft\", aircraft))\n\t\t\tresult = append(result, aircraft)\n\t\t\tcontinue\n\t\t}\n\n\t\tcacheMisses = append(cacheMisses, designator)\n\t}\n\n\tif len(cacheMisses) > 0 {\n\t\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\t\tfor _, batch := range chunkEvery(cacheMisses, 25) {\n\t\t\tlog.Debug(ctx, \"Retrieving airports batch.\", zap.Strings(\"designators\", batch))\n\n\t\t\treq := &grpc_clients.BatchGetRequest{Ids: batch}\n\t\t\tresp, err := c.client.BatchGet(ctx, req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(ctx, \"Cannot retrieve airlines batch.\", zap.Strings(\"designators\", designators), zap.Error(err))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor _, aircraft := range resp.Aircraft {\n\t\t\t\tarc := c.toDomain(aircraft)\n\t\t\t\tc.cache.Add(arc.ID, arc)\n\t\t\t\tresult = append(result, arc)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result, nil\n}\n", "n_tokens": 340, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [61, 99], "def_symbols": ["BatchGet"], "symbols": ["BatchGet", "returns", "airlines", "their", "designators", "func", "AircraftGrpcClient", "ctx", "context", "Context", "string", "schedules", "Aircraft", "error", "log", "Debug", "Getting", "batch", "aircraft", "details", "zap", "Strings", "var", "result", "cacheMisses", "for", "designator", "range", "found", "cache", "Get", "Airline", "hit", "String", "Any", "append", "continue", "len", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "chunkEvery", "Retrieving", "airports", "req", "grpc_clients", "BatchGetRequest", "Ids", "resp", "err", "client", "nil", "Error", "Cannot", "retrieve", "arc", "toDomain", "Add", "return"], "doc_head": "// BatchGet returns airlines by their designators.\nfunc (c *AircraftGrpcClient) BatchGet(ctx context.Context, designators []string) ([]*schedules.Aircraft, error) {\n\tlog.Debug(ctx, \"Getting batch of aircraft details.\", zap.Strings(\"designators\", designators))\n\tvar result []*schedules.Aircraft\n\tvar cacheMisses []string\n\tfor _, designator := range designators {\n\t\tif aircraft, found := c.cache.Get(designator); found {\n\t\t\tlog.Debug(ctx, \"Airline cache hit.\", zap.String(\"designator\", designator), zap.Any(\"aircraft\", aircraft))\n\t\t\tresult = append(result, aircraft)\n\t\t\tcontinue\n\t\t}\n\t\tcacheMisses = append(cacheMisses, designator)\n\t}\n\tif len(cacheMisses) > 0 {\n\t\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\t\tfor _, batch := range chunkEvery(cacheMisses, 25) {\n\t\t\tlog.Debug(ctx, \"Retrieving airports batch.\", zap.Strings(\"designators\", batch))\n\t\t\treq := &grpc_clients.BatchGetRequest{Ids: batch}\n\t\t\tresp, err := c.client.BatchGet(ctx, req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(ctx, \"Cannot retrieve airlines batch.\", zap.Strings(\"designators\", designators), zap.Error(err))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, aircraft := range resp.Aircraft {\n\t\t\t\tarc := c.toDomai"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/aircraft_grpc_client.go", "rel_path": "internal/schedules/adapter/aircraft_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 100, "end_line": 140, "text": "func (c *AircraftGrpcClient) toDomain(a *grpc_clients.Aircraft) *schedules.Aircraft {\n\tad := &schedules.Aircraft{}\n\n\tad.ID = a.Id\n\tad.Type = a.Type\n\tad.Name = a.Name\n\tad.Description = a.GetDescription()\n\tad.WikipediaURL = a.GetWikipediaUrl()\n\n\tad.Images = make(map[string]string)\n\tfor _, image := range a.GetImages() {\n\t\tk := strings.ToLower(image.Type.String())\n\t\tad.Images[k] = image.Url\n\t}\n\n\tad.Specification = &schedules.Specification{\n\t\tEngine:       a.GetSpecs().Engine,\n\t\tAverageSpeed: a.GetSpecs().AverageSpeed,\n\t\tWideBody:     a.GetSpecs().WideBody,\n\t\tWingspan:     a.GetSpecs().Wingspan,\n\t\tLength:       a.GetSpecs().Length,\n\t\tHeight:       a.GetSpecs().Height,\n\t\tFlightRange:  a.GetSpecs().FlightRange,\n\t}\n\n\tif a.GetSpecs().SeatingCapacity != nil {\n\t\tsc := int(a.GetSpecs().GetSeatingCapacity())\n\t\tad.Specification.SeatingCapacity = &sc\n\t}\n\n\tif a.GetSpecs().CrewSize != nil {\n\t\tcs := int(a.GetSpecs().GetCrewSize())\n\t\tad.Specification.CrewSize = &cs\n\t}\n\n\tad.CreatedAt = a.CreatedAt.AsTime()\n\tad.UpdatedAt = a.UpdatedAt.AsTime()\n\n\treturn ad\n}\n", "n_tokens": 313, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [100, 140], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "AircraftGrpcClient", "grpc_clients", "Aircraft", "schedules", "Type", "Name", "Description", "GetDescription", "WikipediaURL", "GetWikipediaUrl", "Images", "make", "map", "string", "for", "image", "range", "GetImages", "strings", "ToLower", "String", "Url", "Specification", "Engine", "GetSpecs", "AverageSpeed", "WideBody", "Wingspan", "Length", "Height", "FlightRange", "SeatingCapacity", "nil", "int", "GetSeatingCapacity", "CrewSize", "GetCrewSize", "CreatedAt", "AsTime", "UpdatedAt", "return"], "doc_head": "func (c *AircraftGrpcClient) toDomain(a *grpc_clients.Aircraft) *schedules.Aircraft {\n\tad := &schedules.Aircraft{}\n\tad.ID = a.Id\n\tad.Type = a.Type\n\tad.Name = a.Name\n\tad.Description = a.GetDescription()\n\tad.WikipediaURL = a.GetWikipediaUrl()\n\tad.Images = make(map[string]string)\n\tfor _, image := range a.GetImages() {\n\t\tk := strings.ToLower(image.Type.String())\n\t\tad.Images[k] = image.Url\n\t}\n\tad.Specification = &schedules.Specification{\n\t\tEngine:       a.GetSpecs().Engine,\n\t\tAverageSpeed: a.GetSpecs().AverageSpeed,\n\t\tWideBody:     a.GetSpecs().WideBody,\n\t\tWingspan:     a.GetSpecs().Wingspan,\n\t\tLength:       a.GetSpecs().Length,\n\t\tHeight:       a.GetSpecs().Height,\n\t\tFlightRange:  a.GetSpecs().FlightRange,\n\t}\n\tif a.GetSpecs().SeatingCapacity != nil {\n\t\tsc := int(a.GetSpecs().GetSeatingCapacity())\n\t\tad.Specification.SeatingCapacity = &sc\n\t}\n\tif a.GetSpecs().CrewSize != nil {\n\t\tcs := int(a.GetSpecs().GetCrewSize())\n\t\tad.Specification.CrewSize = &cs\n\t}\n\tad.CreatedAt = a.CreatedAt.AsTime()\n\tad.UpdatedAt = a.UpdatedAt.AsTime()\n\treturn ad\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/util.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/util.go", "rel_path": "internal/schedules/adapter/util.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package adapter\n\nfunc chunkEvery[T any](items []T, size int) (chunks [][]T) {\n\tfor size < len(items) {\n\t\titems, chunks = items[size:], append(chunks, items[0:size:size])\n\t}\n\treturn append(chunks, items)\n}\n", "n_tokens": 57, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "adapter", "func", "chunkEvery", "any", "items", "size", "int", "chunks", "for", "len", "append", "return"], "doc_head": "package adapter\nfunc chunkEvery[T any](items []T, size int) (chunks [][]T) {\n\tfor size < len(items) {\n\t\titems, chunks = items[size:], append(chunks, items[0:size:size])\n\t}\n\treturn append(chunks, items)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package adapter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/requestid\"\n\tgrpcrid \"go.impalastudios.com/requestid/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\tgrpc_clients \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airports\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 132, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 18], "def_symbols": [], "symbols": ["package", "adapter", "import", "context", "fmt", "impalastudios", "com", "aviation", "schedules", "internal", "requestid", "grpcrid", "grpc", "google", "golang", "org", "metadata", "time", "github", "cockroachdb", "errors", "lru", "hashicorp", "grpc_clients", "airports", "log", "uber", "zap"], "doc_head": "package adapter\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/requestid\"\n\tgrpcrid \"go.impalastudios.com/requestid/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\tgrpc_clients \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/grpc_clients/airports\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 19, "end_line": 38, "text": "// AirportGrpcClient is a wrapper around the grpc client for the airport service.\n// It contains an airport and cityCache to avoid unnecessary calls to the service.\ntype AirportGrpcClient struct {\n\tairportCache *lru.Cache[string, *schedules.Airport]\n\tcityCache    *lru.Cache[string, []string]\n\tclient       grpc_clients.AirportsServiceClient\n}\n\n// NewAirportGrpcClient creates a new AirportGrpcClient.\nfunc NewAirportGrpcClient(client grpc_clients.AirportsServiceClient) *AirportGrpcClient {\n\tairportCache, _ := lru.New[string, *schedules.Airport](lruCacheSize)\n\tcityCache, _ := lru.New[string, []string](lruCacheSize)\n\n\treturn &AirportGrpcClient{\n\t\tairportCache: airportCache,\n\t\tcityCache:    cityCache,\n\t\tclient:       client,\n\t}\n}\n", "n_tokens": 190, "primary_symbol": "NewAirportGrpcClient", "primary_kind": "function", "primary_span": [28, 38], "def_symbols": ["NewAirportGrpcClient"], "symbols": ["NewAirportGrpcClient", "AirportGrpcClient", "wrapper", "around", "the", "grpc", "client", "for", "airport", "service", "contains", "and", "cityCache", "avoid", "unnecessary", "calls", "type", "struct", "airportCache", "lru", "Cache", "string", "schedules", "Airport", "grpc_clients", "AirportsServiceClient", "creates", "new", "func", "New", "lruCacheSize", "return"], "doc_head": "// AirportGrpcClient is a wrapper around the grpc client for the airport service.\n// It contains an airport and cityCache to avoid unnecessary calls to the service.\ntype AirportGrpcClient struct {\n\tairportCache *lru.Cache[string, *schedules.Airport]\n\tcityCache    *lru.Cache[string, []string]\n\tclient       grpc_clients.AirportsServiceClient\n}\n// NewAirportGrpcClient creates a new AirportGrpcClient.\nfunc NewAirportGrpcClient(client grpc_clients.AirportsServiceClient) *AirportGrpcClient {\n\tairportCache, _ := lru.New[string, *schedules.Airport](lruCacheSize)\n\tcityCache, _ := lru.New[string, []string](lruCacheSize)\n\treturn &AirportGrpcClient{\n\t\tairportCache: airportCache,\n\t\tcityCache:    cityCache,\n\t\tclient:       client,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 39, "end_line": 71, "text": "// Get returns an airport by its designator.\nfunc (c *AirportGrpcClient) Get(ctx context.Context, designator string, forDate time.Time) (*schedules.Airport, error) {\n\tlog.Debug(ctx, \"Getting airport details.\", zap.String(\"designator\", designator), zap.Time(\"for_date\", forDate))\n\n\tcacheKey := designator\n\tif !forDate.IsZero() {\n\t\td := forDate.Format(time.DateOnly)\n\t\tcacheKey = fmt.Sprintf(\"%s:%s\", d, cacheKey)\n\t}\n\n\tif airport, ok := c.airportCache.Get(cacheKey); ok {\n\t\tlog.Debug(ctx, \"found airport in cache\", zap.Any(\"airport\", airport))\n\t\treturn airport, nil\n\t}\n\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\treq := &grpc_clients.GetByDesignatorRequest{Designator: designator}\n\tif !forDate.IsZero() {\n\t\td := forDate.Format(time.DateOnly)\n\t\treq.ForDate = &d\n\t}\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get airport details\")\n\t}\n\n\tlog.Debug(ctx, \"fetched airport through gRPC\", zap.Any(\"airport\", resp.Airport))\n\n\tapt := c.toDomain(resp.Airport)\n\tc.airportCache.Add(cacheKey, apt)\n\treturn apt, nil\n}\n", "n_tokens": 305, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [40, 71], "def_symbols": ["Get"], "symbols": ["Get", "returns", "airport", "its", "designator", "func", "AirportGrpcClient", "ctx", "context", "Context", "string", "forDate", "time", "Time", "schedules", "Airport", "error", "log", "Debug", "Getting", "details", "zap", "String", "for_date", "cacheKey", "IsZero", "Format", "DateOnly", "fmt", "Sprintf", "airportCache", "found", "cache", "Any", "return", "nil", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "req", "grpc_clients", "GetByDesignatorRequest", "Designator", "ForDate", "resp", "err", "client", "GetByDesignator", "errors", "Wrap", "failed", "get", "fetched", "through", "gRPC", "apt", "toDomain", "Add"], "doc_head": "// Get returns an airport by its designator.\nfunc (c *AirportGrpcClient) Get(ctx context.Context, designator string, forDate time.Time) (*schedules.Airport, error) {\n\tlog.Debug(ctx, \"Getting airport details.\", zap.String(\"designator\", designator), zap.Time(\"for_date\", forDate))\n\tcacheKey := designator\n\tif !forDate.IsZero() {\n\t\td := forDate.Format(time.DateOnly)\n\t\tcacheKey = fmt.Sprintf(\"%s:%s\", d, cacheKey)\n\t}\n\tif airport, ok := c.airportCache.Get(cacheKey); ok {\n\t\tlog.Debug(ctx, \"found airport in cache\", zap.Any(\"airport\", airport))\n\t\treturn airport, nil\n\t}\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\treq := &grpc_clients.GetByDesignatorRequest{Designator: designator}\n\tif !forDate.IsZero() {\n\t\td := forDate.Format(time.DateOnly)\n\t\treq.ForDate = &d\n\t}\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get airport details\")\n\t}\n\tlog.Debug(ctx, \"fetched airport through gRPC\", zap.Any(\"airport\", resp.Airport))\n\tapt := c.toDomain(resp.Airport)\n\tc.airportCache.Add(cacheKey, apt)\n\treturn apt, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 72, "end_line": 115, "text": "// BatchGet returns airports by their designators.\nfunc (c *AirportGrpcClient) BatchGet(ctx context.Context, designators []string, forDate time.Time) ([]*schedules.Airport, error) {\n\tlog.Debug(ctx, \"Getting batch of airports details.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate))\n\n\tvar result []*schedules.Airport\n\tvar cacheMisses []string\n\n\tfor _, designator := range designators {\n\t\tcacheKey := c.getCacheKey(designator, forDate)\n\n\t\tif airport, found := c.airportCache.Get(cacheKey); found {\n\t\t\tlog.Debug(ctx, \"Airport cache hit.\", zap.Any(\"airport\", airport))\n\t\t\tresult = append(result, airport)\n\t\t\tcontinue\n\t\t}\n\n\t\tcacheMisses = append(cacheMisses, designator)\n\t}\n\n\tif len(cacheMisses) > 0 {\n\t\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\t\tfor _, batch := range chunkEvery(cacheMisses, 25) {\n\t\t\tlog.Debug(ctx, \"Retrieving airports batch.\", zap.Strings(\"designators\", batch), zap.Time(\"for_date\", forDate))\n\n\t\t\tfd := forDate.Format(time.DateOnly)\n\t\t\treq := &grpc_clients.BatchGetByDesignatorRequest{Designators: batch, ForDate: &fd}\n\t\t\tresp, err := c.client.BatchGetByDesignator(ctx, req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(ctx, \"Cannot retrieve airports batch.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate), zap.Error(err))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor _, airport := range resp.Airports {\n\t\t\t\tapt := c.toDomain(airport)\n\t\t\t\tcacheKey := c.getCacheKey(apt.Designator, forDate)\n\t\t\t\tc.airportCache.Add(cacheKey, apt)\n\t\t\t\tresult = append(result, apt)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result, nil\n}\n", "n_tokens": 419, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [73, 115], "def_symbols": ["BatchGet"], "symbols": ["BatchGet", "returns", "airports", "their", "designators", "func", "AirportGrpcClient", "ctx", "context", "Context", "string", "forDate", "time", "Time", "schedules", "Airport", "error", "log", "Debug", "Getting", "batch", "details", "zap", "Strings", "for_date", "var", "result", "cacheMisses", "for", "designator", "range", "cacheKey", "getCacheKey", "airport", "found", "airportCache", "Get", "cache", "hit", "Any", "append", "continue", "len", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "chunkEvery", "Retrieving", "Format", "DateOnly", "req", "grpc_clients", "BatchGetByDesignatorRequest", "Designators", "ForDate", "resp", "err", "client", "BatchGetByDesignator", "nil", "Error", "Cannot", "retrieve", "Airports", "apt", "toDomain", "Designator", "Add", "return"], "doc_head": "// BatchGet returns airports by their designators.\nfunc (c *AirportGrpcClient) BatchGet(ctx context.Context, designators []string, forDate time.Time) ([]*schedules.Airport, error) {\n\tlog.Debug(ctx, \"Getting batch of airports details.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate))\n\tvar result []*schedules.Airport\n\tvar cacheMisses []string\n\tfor _, designator := range designators {\n\t\tcacheKey := c.getCacheKey(designator, forDate)\n\t\tif airport, found := c.airportCache.Get(cacheKey); found {\n\t\t\tlog.Debug(ctx, \"Airport cache hit.\", zap.Any(\"airport\", airport))\n\t\t\tresult = append(result, airport)\n\t\t\tcontinue\n\t\t}\n\t\tcacheMisses = append(cacheMisses, designator)\n\t}\n\tif len(cacheMisses) > 0 {\n\t\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\t\tfor _, batch := range chunkEvery(cacheMisses, 25) {\n\t\t\tlog.Debug(ctx, \"Retrieving airports batch.\", zap.Strings(\"designators\", batch), zap.Time(\"for_date\", forDate))\n\t\t\tfd := forDate.Format(time.DateOnly)\n\t\t\treq := &grpc_clients.BatchGetByDesignatorRequest{Designators: batch, ForDate: &fd}\n\t\t\tresp, err := c.client.BatchGetByDesignator(ctx, req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(ctx,"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 116, "end_line": 185, "text": "// GetByCity returns all airport by their city id.\nfunc (c *AirportGrpcClient) GetByCity(ctx context.Context, id int64, forDate time.Time) ([]*schedules.Airport, error) {\n\tlog.Debug(ctx, \"Getting airport by city.\", zap.Int64(\"city_id\", id), zap.Time(\"for_date\", forDate))\n\n\tcityCacheKey := fmt.Sprintf(\"%d\", id)\n\tif !forDate.IsZero() {\n\t\td := forDate.Format(time.DateOnly)\n\t\tcityCacheKey = fmt.Sprintf(\"%s:%s\", d, cityCacheKey)\n\t}\n\n\tif designators, found := c.cityCache.Get(cityCacheKey); found {\n\t\tlog.Debug(ctx, \"Found airport designators in cityCache.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate))\n\n\t\tairports := make([]*schedules.Airport, 0, len(designators))\n\n\t\tfor _, des := range designators {\n\t\t\taptCacheKey := des\n\t\t\tif !forDate.IsZero() {\n\t\t\t\td := forDate.Format(time.DateOnly)\n\t\t\t\taptCacheKey = fmt.Sprintf(\"%s:%s\", d, aptCacheKey)\n\t\t\t}\n\n\t\t\tif airport, found := c.airportCache.Get(aptCacheKey); found {\n\t\t\t\tairports = append(airports, airport)\n\t\t\t}\n\t\t}\n\n\t\tlog.Debug(ctx, \"Retrieved airports for city.\", zap.Int64(\"city_id\", id), zap.Time(\"for_date\", forDate), zap.Any(\"airports\", airports))\n\n\t\tif len(designators) == len(airports) {\n\t\t\treturn airports, nil\n\t\t}\n\t}\n\n\tctx = metadata.AppendToOutgoingContext(ctx, grpcrid.MetadataKey, requestid.GetRequestID(ctx))\n\tresp, err := c.client.GetByCity(ctx, &grpc_clients.AirportByCityRequest{Id: id})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get airport by city\")\n\t}\n\n\tlog.Debug(ctx, \"Fetched airports through gRPC.\", zap.Any(\"airports\", resp.Airports))\n\n\tdesignators := make([]string, 0, len(resp.Airports))\n\tairports := make([]*schedules.Airport, 0, len(resp.Airports))\n\n\tfor _, airport := range resp.Airports {\n\t\tif airport.Designator != nil {\n\t\t\ta := c.toDomain(airport)\n\t\t\tdesignators = append(designators, *airport.Designator)\n\n\t\t\taptCacheKey := *airport.Designator\n\t\t\tif !forDate.IsZero() {\n\t\t\t\td := forDate.Format(time.DateOnly)\n\t\t\t\taptCacheKey = fmt.Sprintf(\"%s:%s\", d, aptCacheKey)\n\t\t\t}\n\n\t\t\tlog.Debug(ctx, \"Caching airport.\", zap.Any(\"airport\", a), zap.String(\"cache_key\", aptCacheKey))\n\n\t\t\tairports = append(airports, a)\n\t\t\tc.airportCache.Add(aptCacheKey, a)\n\t\t}\n\t}\n\n\tc.cityCache.Add(cityCacheKey, designators)\n\n\tlog.Debug(ctx, \"Retrieved airports for city.\", zap.Int64(\"city_id\", id), zap.Any(\"airports\", airports))\n\n\treturn airports, nil\n}\n", "n_tokens": 680, "primary_symbol": "GetByCity", "primary_kind": "function", "primary_span": [117, 185], "def_symbols": ["GetByCity"], "symbols": ["GetByCity", "returns", "all", "airport", "their", "city", "func", "AirportGrpcClient", "ctx", "context", "Context", "int64", "forDate", "time", "Time", "schedules", "Airport", "error", "log", "Debug", "Getting", "zap", "Int64", "city_id", "for_date", "cityCacheKey", "fmt", "Sprintf", "IsZero", "Format", "DateOnly", "designators", "found", "cityCache", "Get", "Found", "Strings", "airports", "make", "len", "for", "des", "range", "aptCacheKey", "airportCache", "append", "Retrieved", "Any", "return", "nil", "metadata", "AppendToOutgoingContext", "grpcrid", "MetadataKey", "requestid", "GetRequestID", "resp", "err", "client", "grpc_clients", "AirportByCityRequest", "errors", "Wrap", "failed", "get", "Fetched", "through", "gRPC", "Airports", "string", "Designator", "toDomain", "Caching", "String", "cache_key", "Add"], "doc_head": "// GetByCity returns all airport by their city id.\nfunc (c *AirportGrpcClient) GetByCity(ctx context.Context, id int64, forDate time.Time) ([]*schedules.Airport, error) {\n\tlog.Debug(ctx, \"Getting airport by city.\", zap.Int64(\"city_id\", id), zap.Time(\"for_date\", forDate))\n\tcityCacheKey := fmt.Sprintf(\"%d\", id)\n\tif !forDate.IsZero() {\n\t\td := forDate.Format(time.DateOnly)\n\t\tcityCacheKey = fmt.Sprintf(\"%s:%s\", d, cityCacheKey)\n\t}\n\tif designators, found := c.cityCache.Get(cityCacheKey); found {\n\t\tlog.Debug(ctx, \"Found airport designators in cityCache.\", zap.Strings(\"designators\", designators), zap.Time(\"for_date\", forDate))\n\t\tairports := make([]*schedules.Airport, 0, len(designators))\n\t\tfor _, des := range designators {\n\t\t\taptCacheKey := des\n\t\t\tif !forDate.IsZero() {\n\t\t\t\td := forDate.Format(time.DateOnly)\n\t\t\t\taptCacheKey = fmt.Sprintf(\"%s:%s\", d, aptCacheKey)\n\t\t\t}\n\t\t\tif airport, found := c.airportCache.Get(aptCacheKey); found {\n\t\t\t\tairports = append(airports, airport)\n\t\t\t}\n\t\t}\n\t\tlog.Debug(ctx, \"Retrieved airports for city.\", zap.Int64(\"city_id\", id), zap.Time(\"for_date\", forDate), zap.Any(\"airports\", airports))\n\t\tif len(designators) == len(airports) {\n\t\t\treturn airports, nil\n\t\t}\n\t}\n\tctx"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 186, "end_line": 223, "text": "func (c *AirportGrpcClient) toDomain(a *grpc_clients.Airport) *schedules.Airport {\n\tad := &schedules.Airport{}\n\n\tad.ID = &a.Id\n\tif a.Designator != nil {\n\t\tad.Designator = *a.Designator\n\t}\n\tad.IATA = a.Iata\n\tad.ICAO = a.Icao\n\tad.FAA = a.Faa\n\tad.Classification = uint(a.Classification)\n\tad.Name = a.Name\n\tad.ShortName = a.ShortName\n\tad.Description = a.Description\n\tad.City = &schedules.City{\n\t\tID:       int(a.GetCity().GetId()),\n\t\tName:     a.GetCity().GetName(),\n\t\tState:    a.GetCity().State,\n\t\tTimezone: a.GetCity().GetTimezone(),\n\t\tCountry: &schedules.Country{\n\t\t\tID:   a.GetCity().GetCountry().GetId(),\n\t\t\tName: a.GetCity().GetCountry().GetName(),\n\t\t},\n\t}\n\tad.Latitude = float64(a.Latitude)\n\tad.Longitude = float64(a.Longitude)\n\tad.Elevation = int(a.Elevation)\n\tad.NumberOfRunways = uint(a.NumberOfRunways)\n\tad.WebsiteURL = a.WebsiteUrl\n\tad.WikipediaURL = a.GetWikipediaUrl()\n\tad.FacebookURL = a.FacebookUrl\n\tad.TwitterURL = a.TwitterUrl\n\tad.CreatedAt = a.CreatedAt.AsTime()\n\tad.UpdatedAt = a.UpdatedAt.AsTime()\n\n\treturn ad\n}\n", "n_tokens": 313, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [186, 223], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "AirportGrpcClient", "grpc_clients", "Airport", "schedules", "Designator", "nil", "IATA", "Iata", "ICAO", "Icao", "FAA", "Faa", "Classification", "uint", "Name", "ShortName", "Description", "City", "int", "GetCity", "GetId", "GetName", "State", "Timezone", "GetTimezone", "Country", "GetCountry", "Latitude", "float64", "Longitude", "Elevation", "NumberOfRunways", "WebsiteURL", "WebsiteUrl", "WikipediaURL", "GetWikipediaUrl", "FacebookURL", "FacebookUrl", "TwitterURL", "TwitterUrl", "CreatedAt", "AsTime", "UpdatedAt", "return"], "doc_head": "func (c *AirportGrpcClient) toDomain(a *grpc_clients.Airport) *schedules.Airport {\n\tad := &schedules.Airport{}\n\tad.ID = &a.Id\n\tif a.Designator != nil {\n\t\tad.Designator = *a.Designator\n\t}\n\tad.IATA = a.Iata\n\tad.ICAO = a.Icao\n\tad.FAA = a.Faa\n\tad.Classification = uint(a.Classification)\n\tad.Name = a.Name\n\tad.ShortName = a.ShortName\n\tad.Description = a.Description\n\tad.City = &schedules.City{\n\t\tID:       int(a.GetCity().GetId()),\n\t\tName:     a.GetCity().GetName(),\n\t\tState:    a.GetCity().State,\n\t\tTimezone: a.GetCity().GetTimezone(),\n\t\tCountry: &schedules.Country{\n\t\t\tID:   a.GetCity().GetCountry().GetId(),\n\t\t\tName: a.GetCity().GetCountry().GetName(),\n\t\t},\n\t}\n\tad.Latitude = float64(a.Latitude)\n\tad.Longitude = float64(a.Longitude)\n\tad.Elevation = int(a.Elevation)\n\tad.NumberOfRunways = uint(a.NumberOfRunways)\n\tad.WebsiteURL = a.WebsiteUrl\n\tad.WikipediaURL = a.GetWikipediaUrl()\n\tad.FacebookURL = a.FacebookUrl\n\tad.TwitterURL = a.TwitterUrl\n\tad.CreatedAt = a.CreatedAt.AsTime()\n\tad.UpdatedAt = a.UpdatedAt.AsTime()\n\treturn ad\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/airport_grpc_client.go", "rel_path": "internal/schedules/adapter/airport_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 224, "end_line": 227, "text": "func (c *AirportGrpcClient) getCacheKey(designator string, d time.Time) string {\n\treturn fmt.Sprintf(\"%s:%s\", d.Format(time.DateOnly), designator)\n}\n", "n_tokens": 41, "primary_symbol": "getCacheKey", "primary_kind": "function", "primary_span": [224, 227], "def_symbols": ["getCacheKey"], "symbols": ["getCacheKey", "func", "AirportGrpcClient", "designator", "string", "time", "Time", "return", "fmt", "Sprintf", "Format", "DateOnly"], "doc_head": "func (c *AirportGrpcClient) getCacheKey(designator string, d time.Time) string {\n\treturn fmt.Sprintf(\"%s:%s\", d.Format(time.DateOnly), designator)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package adapter\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"github.com/lib/pq\"\n\t\"regexp\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/doug-martin/goqu/v9\"\n\t_ \"github.com/doug-martin/goqu/v9/dialect/postgres\"\n\t\"github.com/doug-martin/goqu/v9/exp\"\n\t\"github.com/jackc/pgconn\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/cursor\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n//go:generate mockgen -source=schedules_postgres_repository.go -destination=mocks/schedules_postgres_repository_mocks.go -package=mocks\ntype (", "n_tokens": 202, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 27], "def_symbols": [], "symbols": ["package", "adapter", "import", "context", "database", "sql", "fmt", "github", "com", "lib", "regexp", "sort", "strconv", "strings", "time", "cockroachdb", "errors", "doug", "martin", "goqu", "dialect", "postgres", "exp", "jackc", "pgconn", "impalastudios", "aviation", "schedules", "internal", "pkg", "cursor", "pgsql", "log", "uber", "org", "zap", "generate", "mockgen", "source", "schedules_postgres_repository", "destination", "mocks", "schedules_postgres_repository_mocks", "type"], "doc_head": "package adapter\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"github.com/lib/pq\"\n\t\"regexp\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/doug-martin/goqu/v9\"\n\t_ \"github.com/doug-martin/goqu/v9/dialect/postgres\"\n\t\"github.com/doug-martin/goqu/v9/exp\"\n\t\"github.com/jackc/pgconn\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/cursor\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n//go:generate mockgen -source=schedules_postgres_repository.go -destination=mocks/schedules_postgres_repository_mocks.go -package=mocks\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 34, "text": "\tcipher interface {\n\t\tEncrypt(input []byte) ([]byte, error)\n\t\tDecrypt(input []byte) ([]byte, error)\n\t}\n)\n\ntype (", "n_tokens": 33, "primary_symbol": "", "primary_kind": "", "primary_span": [28, 34], "def_symbols": [], "symbols": ["cipher", "interface", "Encrypt", "input", "byte", "error", "Decrypt", "type"], "doc_head": "\tcipher interface {\n\t\tEncrypt(input []byte) ([]byte, error)\n\t\tDecrypt(input []byte) ([]byte, error)\n\t}\n)\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 35, "end_line": 64, "text": "\tflightPg struct {\n\t\tID                                 int64\n\t\tConnectingFlightID                 sql.NullInt64\n\t\tFlightID                           string\n\t\tMainCarrierDesignator              string\n\t\tFlightNumber                       int\n\t\tSequence                           int\n\t\tDepartureAirportDesignator         string\n\t\tStatus                             string\n\t\tDepartureStatus                    string\n\t\tArrivalStatus                      string\n\t\tScheduledDepartureDate             time.Time\n\t\tScheduledDepartureTimeTz           string\n\t\tExpectedDepartureDate              time.Time\n\t\tExpectedDepartureTimeTz            string\n\t\tActualDepartureDate                time.Time\n\t\tActualDepartureTimeTz              string\n\t\tArrivalAirportDesignator           string\n\t\tScheduledArrivalDate               time.Time\n\t\tScheduledArrivalTimeTz             string\n\t\tExpectedArrivalDate                time.Time\n\t\tExpectedArrivalTimeTz              string\n\t\tActualArrivalDate                  time.Time\n\t\tActualArrivalTimeTz                string\n\t\tAircraftID                         sql.NullString\n\t\tCodeshares                         [][]string\n\t\tConnectedScheduledDepartureTimeUtc time.Time\n\t\tScheduledDepartureTimeUtc          time.Time\n\t\tRowNumber                          int\n\t}", "n_tokens": 266, "primary_symbol": "", "primary_kind": "", "primary_span": [35, 64], "def_symbols": [], "symbols": ["flightPg", "struct", "int64", "ConnectingFlightID", "sql", "NullInt64", "FlightID", "string", "MainCarrierDesignator", "FlightNumber", "int", "Sequence", "DepartureAirportDesignator", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureDate", "time", "Time", "ScheduledDepartureTimeTz", "ExpectedDepartureDate", "ExpectedDepartureTimeTz", "ActualDepartureDate", "ActualDepartureTimeTz", "ArrivalAirportDesignator", "ScheduledArrivalDate", "ScheduledArrivalTimeTz", "ExpectedArrivalDate", "ExpectedArrivalTimeTz", "ActualArrivalDate", "ActualArrivalTimeTz", "AircraftID", "NullString", "Codeshares", "ConnectedScheduledDepartureTimeUtc", "ScheduledDepartureTimeUtc", "RowNumber"], "doc_head": "\tflightPg struct {\n\t\tID                                 int64\n\t\tConnectingFlightID                 sql.NullInt64\n\t\tFlightID                           string\n\t\tMainCarrierDesignator              string\n\t\tFlightNumber                       int\n\t\tSequence                           int\n\t\tDepartureAirportDesignator         string\n\t\tStatus                             string\n\t\tDepartureStatus                    string\n\t\tArrivalStatus                      string\n\t\tScheduledDepartureDate             time.Time\n\t\tScheduledDepartureTimeTz           string\n\t\tExpectedDepartureDate              time.Time\n\t\tExpectedDepartureTimeTz            string\n\t\tActualDepartureDate                time.Time\n\t\tActualDepartureTimeTz              string\n\t\tArrivalAirportDesignator           string\n\t\tScheduledArrivalDate               time.Time\n\t\tScheduledArrivalTimeTz             string\n\t\tExpectedArrivalDate                time.Time\n\t\tExpectedArrivalTimeTz              string\n\t\tActualArrivalDate                  time.Time\n\t\tActualArrivalTimeTz                string\n\t\tAircraftID                         sql.NullString\n\t\tCodeshares                         [][]string\n\t\tConnectedScheduledDepartureTimeUtc time.Time\n\t\tSc"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 65, "end_line": 92, "text": "\tflightBoardPg struct {\n\t\tID                         int64\n\t\tFlightID                   string\n\t\tMainCarrierDesignator      string\n\t\tFlightNumber               int\n\t\tSequence                   int\n\t\tDepartureAirportDesignator string\n\t\tStatus                     string\n\t\tDepartureStatus            string\n\t\tArrivalStatus              string\n\t\tScheduledDepartureDate     time.Time\n\t\tScheduledDepartureTimeTz   string\n\t\tExpectedDepartureDate      time.Time\n\t\tExpectedDepartureTimeTz    string\n\t\tActualDepartureDate        time.Time\n\t\tActualDepartureTimeTz      string\n\t\tArrivalAirportDesignator   string\n\t\tScheduledArrivalDate       time.Time\n\t\tScheduledArrivalTimeTz     string\n\t\tExpectedArrivalDate        time.Time\n\t\tExpectedArrivalTimeTz      string\n\t\tActualArrivalDate          time.Time\n\t\tActualArrivalTimeTz        string\n\t\tAircraftID                 sql.NullString\n\t\tCodeshares                 [][]string\n\t\tScheduledDepartureTimeUtc  time.Time\n\t\tScheduledArrivalTimeUtc    time.Time\n\t}", "n_tokens": 248, "primary_symbol": "", "primary_kind": "", "primary_span": [65, 92], "def_symbols": [], "symbols": ["flightBoardPg", "struct", "int64", "FlightID", "string", "MainCarrierDesignator", "FlightNumber", "int", "Sequence", "DepartureAirportDesignator", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureDate", "time", "Time", "ScheduledDepartureTimeTz", "ExpectedDepartureDate", "ExpectedDepartureTimeTz", "ActualDepartureDate", "ActualDepartureTimeTz", "ArrivalAirportDesignator", "ScheduledArrivalDate", "ScheduledArrivalTimeTz", "ExpectedArrivalDate", "ExpectedArrivalTimeTz", "ActualArrivalDate", "ActualArrivalTimeTz", "AircraftID", "sql", "NullString", "Codeshares", "ScheduledDepartureTimeUtc", "ScheduledArrivalTimeUtc"], "doc_head": "\tflightBoardPg struct {\n\t\tID                         int64\n\t\tFlightID                   string\n\t\tMainCarrierDesignator      string\n\t\tFlightNumber               int\n\t\tSequence                   int\n\t\tDepartureAirportDesignator string\n\t\tStatus                     string\n\t\tDepartureStatus            string\n\t\tArrivalStatus              string\n\t\tScheduledDepartureDate     time.Time\n\t\tScheduledDepartureTimeTz   string\n\t\tExpectedDepartureDate      time.Time\n\t\tExpectedDepartureTimeTz    string\n\t\tActualDepartureDate        time.Time\n\t\tActualDepartureTimeTz      string\n\t\tArrivalAirportDesignator   string\n\t\tScheduledArrivalDate       time.Time\n\t\tScheduledArrivalTimeTz     string\n\t\tExpectedArrivalDate        time.Time\n\t\tExpectedArrivalTimeTz      string\n\t\tActualArrivalDate          time.Time\n\t\tActualArrivalTimeTz        string\n\t\tAircraftID                 sql.NullString\n\t\tCodeshares                 [][]string\n\t\tScheduledDepartureTimeUtc  time.Time\n\t\tScheduledArrivalTimeUtc    time.Time\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 93, "end_line": 97, "text": "\troutePg struct {\n\t\tPoints []string\n\t}\n)\n", "n_tokens": 14, "primary_symbol": "", "primary_kind": "", "primary_span": [93, 97], "def_symbols": [], "symbols": ["routePg", "struct", "Points", "string"], "doc_head": "\troutePg struct {\n\t\tPoints []string\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 98, "end_line": 156, "text": "func (f *flightPg) toDomain() (*schedules.Flight, error) {\n\tfd := &schedules.Flight{}\n\n\tfd.ID = f.ID\n\tfd.FlightID = f.FlightID\n\tfd.ConnectingFlightID = f.ConnectingFlightID.Int64\n\tfd.Airline = &schedules.Airline{Designator: f.MainCarrierDesignator}\n\tfd.FlightNumber = f.FlightNumber\n\tfd.Sequence = f.Sequence\n\tfd.DepartureAirport = &schedules.Airport{Designator: f.DepartureAirportDesignator}\n\tfd.ArrivalAirport = &schedules.Airport{Designator: f.ArrivalAirportDesignator}\n\tfd.Status = schedules.FlightOperationalStatus(f.Status)\n\tfd.DepartureStatus = schedules.FlightTimingStatus(f.DepartureStatus)\n\tfd.ArrivalStatus = schedules.FlightTimingStatus(f.ArrivalStatus)\n\n\tif f.AircraftID.Valid {\n\t\tfd.Aircraft = &schedules.Aircraft{ID: f.AircraftID.String}\n\t}\n\n\tvar err error\n\tif fd.ScheduledDepartureAt, err = fromDateAndTimeWithTZ(f.ScheduledDepartureDate, f.ScheduledDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ExpectedDepartureAt, err = fromDateAndTimeWithTZ(f.ExpectedDepartureDate, f.ExpectedDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ActualDepartureAt, err = fromDateAndTimeWithTZ(f.ActualDepartureDate, f.ActualDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ScheduledArrivalAt, err = fromDateAndTimeWithTZ(f.ScheduledArrivalDate, f.ScheduledArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ExpectedArrivalAt, err = fromDateAndTimeWithTZ(f.ExpectedArrivalDate, f.ExpectedArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ActualArrivalAt, err = fromDateAndTimeWithTZ(f.ActualArrivalDate, f.ActualArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfd.Codeshare = make([]*schedules.Codeshare, 0, len(f.Codeshares))\n\tfor i := range f.Codeshares {\n\t\tfn, err := strconv.Atoi(f.Codeshares[i][1])\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tfd.Codeshare = append(fd.Codeshare, &schedules.Codeshare{\n\t\t\tAirline:      &schedules.Airline{Designator: f.Codeshares[i][0]},\n\t\t\tFlightNumber: fn,\n\t\t})\n\t}\n\n\treturn fd, nil\n}\n", "n_tokens": 601, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [98, 156], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "flightPg", "schedules", "Flight", "error", "FlightID", "ConnectingFlightID", "Int64", "Airline", "Designator", "MainCarrierDesignator", "FlightNumber", "Sequence", "DepartureAirport", "Airport", "DepartureAirportDesignator", "ArrivalAirport", "ArrivalAirportDesignator", "Status", "FlightOperationalStatus", "DepartureStatus", "FlightTimingStatus", "ArrivalStatus", "AircraftID", "Valid", "Aircraft", "String", "var", "err", "ScheduledDepartureAt", "fromDateAndTimeWithTZ", "ScheduledDepartureDate", "ScheduledDepartureTimeTz", "nil", "return", "ExpectedDepartureAt", "ExpectedDepartureDate", "ExpectedDepartureTimeTz", "ActualDepartureAt", "ActualDepartureDate", "ActualDepartureTimeTz", "ScheduledArrivalAt", "ScheduledArrivalDate", "ScheduledArrivalTimeTz", "ExpectedArrivalAt", "ExpectedArrivalDate", "ExpectedArrivalTimeTz", "ActualArrivalAt", "ActualArrivalDate", "ActualArrivalTimeTz", "Codeshare", "make", "len", "Codeshares", "for", "range", "strconv", "Atoi", "continue", "append"], "doc_head": "func (f *flightPg) toDomain() (*schedules.Flight, error) {\n\tfd := &schedules.Flight{}\n\tfd.ID = f.ID\n\tfd.FlightID = f.FlightID\n\tfd.ConnectingFlightID = f.ConnectingFlightID.Int64\n\tfd.Airline = &schedules.Airline{Designator: f.MainCarrierDesignator}\n\tfd.FlightNumber = f.FlightNumber\n\tfd.Sequence = f.Sequence\n\tfd.DepartureAirport = &schedules.Airport{Designator: f.DepartureAirportDesignator}\n\tfd.ArrivalAirport = &schedules.Airport{Designator: f.ArrivalAirportDesignator}\n\tfd.Status = schedules.FlightOperationalStatus(f.Status)\n\tfd.DepartureStatus = schedules.FlightTimingStatus(f.DepartureStatus)\n\tfd.ArrivalStatus = schedules.FlightTimingStatus(f.ArrivalStatus)\n\tif f.AircraftID.Valid {\n\t\tfd.Aircraft = &schedules.Aircraft{ID: f.AircraftID.String}\n\t}\n\tvar err error\n\tif fd.ScheduledDepartureAt, err = fromDateAndTimeWithTZ(f.ScheduledDepartureDate, f.ScheduledDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif fd.ExpectedDepartureAt, err = fromDateAndTimeWithTZ(f.ExpectedDepartureDate, f.ExpectedDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif fd.ActualDepartureAt, err = fromDateAndTimeWithTZ(f.ActualDepartureDate, f.ActualDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif f"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 157, "end_line": 214, "text": "func (f *flightBoardPg) toDomain() (*schedules.Flight, error) {\n\tfd := &schedules.Flight{}\n\n\tfd.ID = f.ID\n\tfd.FlightID = f.FlightID\n\tfd.Airline = &schedules.Airline{Designator: f.MainCarrierDesignator}\n\tfd.FlightNumber = f.FlightNumber\n\tfd.Sequence = f.Sequence\n\tfd.DepartureAirport = &schedules.Airport{Designator: f.DepartureAirportDesignator}\n\tfd.ArrivalAirport = &schedules.Airport{Designator: f.ArrivalAirportDesignator}\n\tfd.Status = schedules.FlightOperationalStatus(f.Status)\n\tfd.DepartureStatus = schedules.FlightTimingStatus(f.DepartureStatus)\n\tfd.ArrivalStatus = schedules.FlightTimingStatus(f.ArrivalStatus)\n\n\tif f.AircraftID.Valid {\n\t\tfd.Aircraft = &schedules.Aircraft{ID: f.AircraftID.String}\n\t}\n\n\tvar err error\n\tif fd.ScheduledDepartureAt, err = fromDateAndTimeWithTZ(f.ScheduledDepartureDate, f.ScheduledDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ExpectedDepartureAt, err = fromDateAndTimeWithTZ(f.ExpectedDepartureDate, f.ExpectedDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ActualDepartureAt, err = fromDateAndTimeWithTZ(f.ActualDepartureDate, f.ActualDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ScheduledArrivalAt, err = fromDateAndTimeWithTZ(f.ScheduledArrivalDate, f.ScheduledArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ExpectedArrivalAt, err = fromDateAndTimeWithTZ(f.ExpectedArrivalDate, f.ExpectedArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fd.ActualArrivalAt, err = fromDateAndTimeWithTZ(f.ActualArrivalDate, f.ActualArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfd.Codeshare = make([]*schedules.Codeshare, 0, len(f.Codeshares))\n\tfor i := range f.Codeshares {\n\t\tfn, err := strconv.Atoi(f.Codeshares[i][1])\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tfd.Codeshare = append(fd.Codeshare, &schedules.Codeshare{\n\t\t\tAirline:      &schedules.Airline{Designator: f.Codeshares[i][0]},\n\t\t\tFlightNumber: fn,\n\t\t})\n\t}\n\n\treturn fd, nil\n}\n", "n_tokens": 588, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [157, 214], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "flightBoardPg", "schedules", "Flight", "error", "FlightID", "Airline", "Designator", "MainCarrierDesignator", "FlightNumber", "Sequence", "DepartureAirport", "Airport", "DepartureAirportDesignator", "ArrivalAirport", "ArrivalAirportDesignator", "Status", "FlightOperationalStatus", "DepartureStatus", "FlightTimingStatus", "ArrivalStatus", "AircraftID", "Valid", "Aircraft", "String", "var", "err", "ScheduledDepartureAt", "fromDateAndTimeWithTZ", "ScheduledDepartureDate", "ScheduledDepartureTimeTz", "nil", "return", "ExpectedDepartureAt", "ExpectedDepartureDate", "ExpectedDepartureTimeTz", "ActualDepartureAt", "ActualDepartureDate", "ActualDepartureTimeTz", "ScheduledArrivalAt", "ScheduledArrivalDate", "ScheduledArrivalTimeTz", "ExpectedArrivalAt", "ExpectedArrivalDate", "ExpectedArrivalTimeTz", "ActualArrivalAt", "ActualArrivalDate", "ActualArrivalTimeTz", "Codeshare", "make", "len", "Codeshares", "for", "range", "strconv", "Atoi", "continue", "append"], "doc_head": "func (f *flightBoardPg) toDomain() (*schedules.Flight, error) {\n\tfd := &schedules.Flight{}\n\tfd.ID = f.ID\n\tfd.FlightID = f.FlightID\n\tfd.Airline = &schedules.Airline{Designator: f.MainCarrierDesignator}\n\tfd.FlightNumber = f.FlightNumber\n\tfd.Sequence = f.Sequence\n\tfd.DepartureAirport = &schedules.Airport{Designator: f.DepartureAirportDesignator}\n\tfd.ArrivalAirport = &schedules.Airport{Designator: f.ArrivalAirportDesignator}\n\tfd.Status = schedules.FlightOperationalStatus(f.Status)\n\tfd.DepartureStatus = schedules.FlightTimingStatus(f.DepartureStatus)\n\tfd.ArrivalStatus = schedules.FlightTimingStatus(f.ArrivalStatus)\n\tif f.AircraftID.Valid {\n\t\tfd.Aircraft = &schedules.Aircraft{ID: f.AircraftID.String}\n\t}\n\tvar err error\n\tif fd.ScheduledDepartureAt, err = fromDateAndTimeWithTZ(f.ScheduledDepartureDate, f.ScheduledDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif fd.ExpectedDepartureAt, err = fromDateAndTimeWithTZ(f.ExpectedDepartureDate, f.ExpectedDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif fd.ActualDepartureAt, err = fromDateAndTimeWithTZ(f.ActualDepartureDate, f.ActualDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif fd.ScheduledArrivalAt, err = fromDateAndTimeWith"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 215, "end_line": 233, "text": "func (r *routePg) toDomain() (*schedules.Route, error) {\n\trd := &schedules.Route{}\n\n\tif len(r.Points) != 2 {\n\t\treturn nil, fmt.Errorf(\"schedules postgresql repository: route points must be 2 elements\")\n\t}\n\n\trd.A = &schedules.Airport{Designator: r.Points[0]}\n\trd.B = &schedules.Airport{Designator: r.Points[1]}\n\n\treturn rd, nil\n}\n\n// FlightsPostgresRepository is the adapter for the flight postgres database\ntype FlightsPostgresRepository struct {\n\tdb        *pgsql.DB\n\tpaginator *cursor.Paginator[goqu.Expression, []exp.OrderedExpression]\n}\n", "n_tokens": 147, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [215, 233], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "routePg", "schedules", "Route", "error", "len", "Points", "return", "nil", "fmt", "Errorf", "postgresql", "repository", "route", "points", "must", "elements", "Airport", "Designator", "FlightsPostgresRepository", "the", "adapter", "for", "flight", "postgres", "database", "type", "struct", "pgsql", "paginator", "cursor", "Paginator", "goqu", "Expression", "exp", "OrderedExpression"], "doc_head": "func (r *routePg) toDomain() (*schedules.Route, error) {\n\trd := &schedules.Route{}\n\tif len(r.Points) != 2 {\n\t\treturn nil, fmt.Errorf(\"schedules postgresql repository: route points must be 2 elements\")\n\t}\n\trd.A = &schedules.Airport{Designator: r.Points[0]}\n\trd.B = &schedules.Airport{Designator: r.Points[1]}\n\treturn rd, nil\n}\n// FlightsPostgresRepository is the adapter for the flight postgres database\ntype FlightsPostgresRepository struct {\n\tdb        *pgsql.DB\n\tpaginator *cursor.Paginator[goqu.Expression, []exp.OrderedExpression]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 234, "end_line": 244, "text": "// NewFlightsPostgresRepository creates a new flight postgres adapter\nfunc NewFlightsPostgresRepository(db *pgsql.DB, cipher cipher) *FlightsPostgresRepository {\n\treturn &FlightsPostgresRepository{\n\t\tdb: db,\n\t\tpaginator: cursor.NewPaginator[goqu.Expression, []exp.OrderedExpression](\n\t\t\tcursor.WithEncryption[goqu.Expression, []exp.OrderedExpression](cipher),\n\t\t\tcursor.WithBuilder(cursor.NewGoquBuilder()),\n\t\t),\n\t}\n}\n", "n_tokens": 100, "primary_symbol": "NewFlightsPostgresRepository", "primary_kind": "function", "primary_span": [235, 244], "def_symbols": ["NewFlightsPostgresRepository"], "symbols": ["NewFlightsPostgresRepository", "creates", "new", "flight", "postgres", "adapter", "func", "pgsql", "cipher", "FlightsPostgresRepository", "return", "paginator", "cursor", "NewPaginator", "goqu", "Expression", "exp", "OrderedExpression", "WithEncryption", "WithBuilder", "NewGoquBuilder"], "doc_head": "// NewFlightsPostgresRepository creates a new flight postgres adapter\nfunc NewFlightsPostgresRepository(db *pgsql.DB, cipher cipher) *FlightsPostgresRepository {\n\treturn &FlightsPostgresRepository{\n\t\tdb: db,\n\t\tpaginator: cursor.NewPaginator[goqu.Expression, []exp.OrderedExpression](\n\t\t\tcursor.WithEncryption[goqu.Expression, []exp.OrderedExpression](cipher),\n\t\t\tcursor.WithBuilder(cursor.NewGoquBuilder()),\n\t\t),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 245, "end_line": 627, "text": "// Search returns a list paginated list of schedules matching the given criteria.\n// The result set consists of two types of items: directed flights and connected ones.\n// Direct flights are flights that take you from A to B in a single operation. For example, AMS (Amsterdam) to Venice (VCE).\n// Connected flights are flights that take you from A to B with more than one operation. For example,\n// AMS (Amsterdam) to NRT (Tokyo Narita) via FRA (Frankfurt). This results in two operations: AMS -> FRA, and FRA -> NRT.\n// To achieve this behaviour, we merge the result of two queries: the first one returns all the direct flights operations, while the\n// second one returns all connected operations. The result set is then ordered by scheduled departure timestamp ascending order.\n// To paginate the dataset, we leverage the DENSE_RANK function to assign a row number to each schedule. In the case of a\n// connected flight, the row number will be the same for all the operations in the very same connected flight.\nfunc (r *FlightsPostgresRepository) Search(ctx context.Context, in *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tvar c *cursor.Cursor\n\tvar err error\n\n\tschema := r.getSchemaFromTime(in.DepartureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\n\tif in.Cursor != nil {\n\t\tif c, err = r.paginator.Decode(*in.Cursor); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tc = cursor.NewForwardCursor(\n\t\t\tin.Limit,\n\t\t\tcursor.Field{Name: \"row_number\", Direction: cursor.DirectionAsc},\n\t\t)\n\t}\n\n\tvar upperBoundRowNumberClause goqu.Expression\n\tif c.Fields[0].Value != nil {\n\t\tupperBoundRowNumberClause = goqu.I(c.Fields[0].Name).Lte(int(c.Fields[0].Value.(float64)) + int(in.Limit) + 1)\n\t} else {\n\t\tupperBoundRowNumberClause = goqu.I(c.Fields[0].Name).Lte(int(in.Limit) + 1)\n\t}\n\n\taggregatedConnectedFlightsCTE := pg.Select(\n\t\tgoqu.I(\"connecting_flights.id\"),\n\t\tgoqu.I(\"connecting_flights.departure_airports\"),\n\t\tgoqu.I(\"connecting_flights.arrival_airports\"),\n\t\tgoqu.I(\"connecting_flights.scheduled_departure_ats\"),\n\t).\n\t\tFrom(goqu.S(schema).Table(\"connecting_flights\")).\n\t\tWhere(goqu.L(\"? <@ connecting_flights.scheduled_departure_ats\", pq.Array([]time.Time{in.DepartureDate})))\n\n\tvar connectedFlightsSearchDepartureAirportsCTE, connectedFlightsSearchArrivalAirportsCTE goqu.Expression\n\tif len(in.DepartureAirports) > 0 {\n\t\tconnectedFlightsSearchDepartureAirportsCTE = pg.Select(\n\t\t\tgoqu.L(\"UNNEST(?::varchar[])\", pq.Array(in.DepartureAirports)).As(\"departure_airport\"),\n\t\t)\n\t}\n\n\tif len(in.ArrivalAirports) > 0 {\n\t\tconnectedFlightsSearchArrivalAirportsCTE = pg.Select(\n\t\t\tgoqu.L(\"UNNEST(?::varchar[])\", pq.Array(in.ArrivalAirports)).As(\"arrival_airport\"),\n\t\t)\n\t}\n\n\tvar eligibleConnectedMinSequenceColumn, eligibleConnectedMaxSequenceColumn exp.LiteralExpression\n\tvar eligibleConnectedFlightsWhereConditions []exp.Expression\n\n\tconnectedFlightsJoinedCTE := pg.Select(goqu.Star()).From(\"aggregated_connected_flights\")\n\n\tif connectedFlightsSearchDepartureAirportsCTE != nil {\n\t\tconnectedFlightsJoinedCTE = connectedFlightsJoinedCTE.CrossJoin(goqu.T(\"connected_flights_search_departure_airports\"))\n\t\teligibleConnectedFlightsWhereConditions = append(eligibleConnectedFlightsWhereConditions,\n\t\t\tgoqu.L(\"ARRAY[connected_flights_joined.departure_airport]::varchar[] <@ connected_flights_joined.departure_airports\"),\n\t\t)\n\t\teligibleConnectedMinSequenceColumn = goqu.L(\"MIN(array_position(connected_flights_joined.departure_airports, connected_flights_joined.departure_airport))\")\n\t} else {\n\t\teligibleConnectedFlightsWhereConditions = append(eligibleConnectedFlightsWhereConditions, goqu.L(\"?::date[] <@ connected_flights_joined.scheduled_departure_ats\", pq.Array([]time.Time{in.DepartureDate})))\n\t\teligibleConnectedMinSequenceColumn = goqu.L(\"MIN(array_position(connected_flights_joined.scheduled_departure_ats, ?))\", in.DepartureDate)\n\t}\n\n\tif connectedFlightsSearchArrivalAirportsCTE != nil {\n\t\tconnectedFlightsJoinedCTE = connectedFlightsJoinedCTE.CrossJoin(goqu.T(\"connected_flights_search_arrival_airports\"))\n\t\teligibleConnectedFlightsWhereConditions = append(eligibleConnectedFlightsWhereConditions, goqu.L(\"ARRAY[connected_flights_joined.arrival_airport]::varchar[] <@ connected_flights_joined.arrival_airports\"))\n\t\teligibleConnectedMaxSequenceColumn = goqu.L(\"MAX(array_position(connected_flights_joined.arrival_airports, connected_flights_joined.arrival_airport))\")\n\t} else {\n\t\teligibleConnectedMaxSequenceColumn = goqu.L(\"9999::int\")\n\t}\n\n\teligibleConnectedFlightsCTE := pg.Select(\n\t\tgoqu.I(\"connected_flights_joined.id\"),\n\t\tgoqu.I(\"connected_flights_joined.scheduled_departure_ats\"),\n\t\teligibleConnectedMinSequenceColumn.As(\"min_sequence\"),\n\t\teligibleConnectedMaxSequenceColumn.As(\"max_sequence\"),\n\t).\n\t\tGroupBy(goqu.I(\"connected_flights_joined.id\"), goqu.I(\"connected_flights_joined.scheduled_departure_ats\")).\n\t\tFrom(\"connected_flights_joined\").\n\t\tWhere(eligibleConnectedFlightsWhereConditions...)\n\n\tconnectedFlightsCTE := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\"),\n\t\t\tgoqu.I(\"flights.id\"),\n\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\tgoqu.I(\"flights.status\"),\n\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\tgoqu.L(`eligible_connected_flights.scheduled_departure_ats[eligible_connected_flights.min_sequence]::date`).As(\"first_scheduled_departure_at\"),\n\t\t\tgoqu.L(`FIRST_VALUE((CONCAT(\"flights\".\"scheduled_departure_at\", ' ', REGEXP_REPLACE(\"flights\".\"scheduled_departure_time_tz\", '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz) OVER (PARTITION BY \"flights\".\"connecting_flight_id\" ORDER BY (\"flights\".\"sequence\"))`).As(\"connected_scheduled_departure_time_utc\"),\n\t\t\tgoqu.L(`(concat(\"flights\".\"scheduled_departure_at\", ' ', regexp_replace(\"flights\".\"scheduled_departure_time_tz\", '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz`).As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t).\n\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\tInnerJoin(goqu.T(\"eligible_connected_flights\"), goqu.On(goqu.And(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\").Eq(goqu.I(\"eligible_connected_flights.id\")),\n\t\t\tgoqu.I(\"flights.sequence\").Gte(goqu.I(\"eligible_connected_flights.min_sequence\")),\n\t\t\tgoqu.I(\"flights.sequence\").Lte(goqu.I(\"eligible_connected_flights.max_sequence\")),\n\t\t)))\n\n\tif in.Airline != nil {\n\t\tconnectedFlightsCTE = connectedFlightsCTE.Where(\n\t\t\tgoqu.Or(\n\t\t\t\tgoqu.I(\"flights.airline\").Eq(*in.Airline),\n\t\t\t\tgoqu.L(\"? <@ flights.codeshare_airlines\", pq.Array([]string{*in.Airline})),\n\t\t\t),\n\t\t)\n\t}\n\n\tdirectFlightsCTE := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\"),\n\t\t\tgoqu.I(\"flights.id\"),\n\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\tgoqu.I(\"flights.status\"),\n\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\").As(\"first_scheduled_departure_at\"),\n\t\t\tgoqu.L(\"(CONCAT(flights.scheduled_departure_at, ' ', REGEXP_REPLACE(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"connected_scheduled_departure_time_utc\"),\n\t\t\tgoqu.L(\"(CONCAT(flights.scheduled_departure_at, ' ', REGEXP_REPLACE(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t).\n\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\tWhere(goqu.L(\"flights.scheduled_departure_at::date = ?\", in.DepartureDate), goqu.I(\"flights.connecting_flight_id\").IsNull())\n\n\tif len(in.ArrivalAirports) > 0 {\n\t\tdirectFlightsCTE = directFlightsCTE.Where(goqu.I(\"flights.arrival_airport\").In(in.ArrivalAirports))\n\t}\n\n\tif len(in.DepartureAirports) > 0 {\n\t\tdirectFlightsCTE = directFlightsCTE.Where(goqu.I(\"flights.departure_airport\").In(in.DepartureAirports))\n\t}\n\n\tif in.Airline != nil {\n\t\tdirectFlightsCTE = directFlightsCTE.Where(\n\t\t\tgoqu.Or(\n\t\t\t\tgoqu.I(\"flights.airline\").Eq(*in.Airline),\n\t\t\t\tgoqu.L(\"? <@ flights.codeshare_airlines\", pq.Array([]string{*in.Airline})),\n\t\t\t),\n\t\t)\n\t}\n\n\tmergedCTE := pg.From(\"direct_flights\").Select(goqu.Star()).\n\t\tUnion(pg.From(\"connected_flights\").Select(goqu.Star()))\n\n\trankedCTE := pg.\n\t\tSelect(\n\t\t\tgoqu.L(`DENSE_RANK() OVER (ORDER BY \"merged\".\"connected_scheduled_departure_time_utc\", \"merged\".\"airline\", \"merged\".\"flight_number\")`).As(\"row_number\"),\n\t\t\tgoqu.Star(),\n\t\t).\n\t\tFrom(\"merged\").\n\t\tWhere(goqu.L(`\"merged\".\"first_scheduled_departure_at\"::date = ?`, in.DepartureDate)).\n\t\tOrder(\n\t\t\tgoqu.I(\"merged.connected_scheduled_departure_time_utc\").Asc(),\n\t\t\tgoqu.I(\"merged.scheduled_departure_time_utc\").Asc(),\n\t\t\tgoqu.I(\"merged.flight_id\").Asc(),\n\t\t)\n\n\tw := []goqu.Expression{r.paginator.GetWhere(c)}\n\tif upperBoundRowNumberClause != nil {\n\t\tw = append(w, upperBoundRowNumberClause)\n\t}\n\n\tq := pg.\n\t\tFrom(\"ranked\").\n\t\tWith(\"direct_flights\", directFlightsCTE).\n\t\tWith(\"aggregated_connected_flights\", aggregatedConnectedFlightsCTE)\n\n\tif len(in.DepartureAirports) > 0 {\n\t\tq = q.With(\"connected_flights_search_departure_airports\", connectedFlightsSearchDepartureAirportsCTE)\n\t}\n\n\tif len(in.ArrivalAirports) > 0 {\n\t\tq = q.With(\"connected_flights_search_arrival_airports\", connectedFlightsSearchArrivalAirportsCTE)\n\t}\n\n\tstmt, bindings, err := q.\n\t\tWith(\"connected_flights_joined\", connectedFlightsJoinedCTE).\n\t\tWith(\"eligible_connected_flights\", eligibleConnectedFlightsCTE).\n\t\tWith(\"connected_flights\", connectedFlightsCTE).\n\t\tWith(\"merged\", mergedCTE).\n\t\tWith(\"ranked\", rankedCTE).\n\t\tSelect(\n\t\t\tgoqu.I(\"ranked.connecting_flight_id\").As(\"connecting_flight_id\"),\n\t\t\tgoqu.I(\"ranked.id\").As(\"id\"),\n\t\t\tgoqu.I(\"ranked.flight_id\").As(\"flight_id\"),\n\t\t\tgoqu.I(\"ranked.airline\").As(\"airline\"),\n\t\t\tgoqu.I(\"ranked.flight_number\").As(\"flight_number\"),\n\t\t\tgoqu.I(\"ranked.sequence\").As(\"sequence\"),\n\t\t\tgoqu.I(\"ranked.departure_airport\").As(\"departure_airport\"),\n\t\t\tgoqu.I(\"ranked.status\").As(\"status\"),\n\t\t\tgoqu.I(\"ranked.departure_status\").As(\"departure_status\"),\n\t\t\tgoqu.I(\"ranked.arrival_status\").As(\"arrival_status\"),\n\t\t\tgoqu.I(\"ranked.scheduled_departure_at\").As(\"scheduled_departure_at\"),\n\t\t\tgoqu.I(\"ranked.scheduled_departure_time_tz\").As(\"scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"ranked.expected_departure_at\").As(\"expected_departure_at\"),\n\t\t\tgoqu.I(\"ranked.expected_departure_time_tz\").As(\"expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"ranked.actual_departure_at\").As(\"actual_departure_at\"),\n\t\t\tgoqu.I(\"ranked.actual_departure_time_tz\").As(\"actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"ranked.arrival_airport\").As(\"arrival_airport\"),\n\t\t\tgoqu.I(\"ranked.scheduled_arrival_at\").As(\"scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"ranked.scheduled_arrival_time_tz\").As(\"scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"ranked.expected_arrival_at\").As(\"expected_arrival_at\"),\n\t\t\tgoqu.I(\"ranked.expected_arrival_time_tz\").As(\"expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"ranked.actual_arrival_at\").As(\"actual_arrival_at\"),\n\t\t\tgoqu.I(\"ranked.actual_arrival_time_tz\").As(\"actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"ranked.aircraft\").As(\"aircraft\"),\n\t\t\tgoqu.I(\"ranked.codeshares\").As(\"codeshares\"),\n\t\t\tgoqu.I(\"ranked.connected_scheduled_departure_time_utc\").As(\"connected_scheduled_departure_time_utc\"),\n\t\t\tgoqu.I(\"ranked.scheduled_departure_time_utc\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.I(\"ranked.row_number\").As(\"row_number\"),\n\t\t).\n\t\tWhere(w...).\n\t\tPrepared(true).\n\t\tToSQL()\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"postgres repository: failed to prepare sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Prepared SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\n\trows, err := r.db.Query(ctx, stmt, bindings...)\n\tif err != nil {\n\t\tif e, ok := err.(*pgconn.PgError); ok && e.Code == \"42P01\" { // Missing Schema\n\t\t\tlog.Error(ctx, \"Schema not found.\", zap.Any(\"request\", in), zap.String(\"schema\", schema), zap.Error(err))\n\t\t\treturn &schedules.Page[*schedules.Schedule]{Items: make([]*schedules.Schedule, 0)}, nil\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot execute query.\",\n\t\t\tzap.Any(\"request\", in),\n\t\t\tzap.String(\"statement\", stmt),\n\t\t\tzap.Any(\"bindings\", bindings),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"postgres repository: failed to query database\")\n\t}\n\n\tvar result []flightPg\n\tvar distinctSchedules = make(map[int]bool)\n\tvar rowNumbers []int\n\n\tfor rows.Next() {\n\t\tvar fpg flightPg\n\t\tif err := r.scan(rows, &fpg); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"postgres repository: cannot scan row\")\n\t\t}\n\t\tresult = append(result, fpg)\n\t\tif _, found := distinctSchedules[fpg.RowNumber]; !found {\n\t\t\tdistinctSchedules[fpg.RowNumber] = true\n\t\t\trowNumbers = append(rowNumbers, fpg.RowNumber)\n\t\t}\n\t}\n\n\tsort.Ints(rowNumbers)\n\tlog.Debug(ctx, \"Retrieved row numbers.\", zap.Ints(\"list\", rowNumbers))\n\thasNextPage := len(rowNumbers) > int(in.Limit)\n\n\tvar upperBoundRowNumber int\n\tif hasNextPage {\n\t\tupperBoundRowNumber = rowNumbers[len(rowNumbers)-1] - 1\n\t} else {\n\t\tif len(rowNumbers) > 0 {\n\t\t\tupperBoundRowNumber = rowNumbers[len(rowNumbers)-1]\n\t\t}\n\t}\n\n\tvar nextCursor *string\n\tif hasNextPage {\n\t\tc = cursor.NewForwardCursor(\n\t\t\tc.Limit,\n\t\t\tcursor.Field{Name: \"row_number\", Value: upperBoundRowNumber, Direction: cursor.DirectionAsc},\n\t\t)\n\n\t\tif next, err := r.paginator.Encode(c); err == nil {\n\t\t\tnextCursor = &next\n\t\t\tlog.Debug(ctx, \"Next page available.\", zap.Uint(\"limit\", in.Limit), zap.Int(\"count\", len(result)), zap.String(\"next\", next))\n\t\t} else {\n\t\t\tlog.Error(ctx, \"Cannot create next cursor.\", zap.Uint(\"limit\", in.Limit), zap.Int(\"count\", len(result)), zap.Error(err))\n\t\t}\n\n\t\tresult = result[:len(result)-1]\n\t}\n\n\tvar sch []*schedules.Schedule\n\tvar connectedFlightsMap = make(map[int64]*schedules.Schedule)\n\n\tfor _, fpg := range result {\n\t\tif fpg.RowNumber > upperBoundRowNumber {\n\t\t\tcontinue\n\t\t}\n\n\t\tlog.Debug(ctx, \"converting flight db model.\", zap.Any(\"flight_db_model\", fpg))\n\n\t\tf, err := fpg.toDomain()\n\n\t\tlog.Debug(ctx, \"converted flight model.\", zap.Any(\"flight_domain_model\", f))\n\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"postgres repository: cannot adapt flight to domain model\")\n\t\t}\n\n\t\tif f.ConnectingFlightID > 0 {\n\t\t\tif sc, found := connectedFlightsMap[f.ConnectingFlightID]; found {\n\t\t\t\tsc.ArrivalAirport = f.ArrivalAirport\n\t\t\t\tsc.Flights = append(sc.Flights, f)\n\t\t\t} else {\n\t\t\t\tsc = &schedules.Schedule{\n\t\t\t\t\tDepartureAirport: f.DepartureAirport,\n\t\t\t\t\tArrivalAirport:   f.ArrivalAirport,\n\t\t\t\t\tMainCarrier:      f.Airline,\n\t\t\t\t\tFlightNumber:     f.FlightNumber,\n\t\t\t\t\tFlights:          []*schedules.Flight{f},\n\t\t\t\t}\n\t\t\t\tsch = append(sch, sc)\n\t\t\t\tconnectedFlightsMap[f.ConnectingFlightID] = sc\n\t\t\t}\n\t\t} else {\n\t\t\tsc := &schedules.Schedule{\n\t\t\t\tDepartureAirport: f.DepartureAirport,\n\t\t\t\tArrivalAirport:   f.ArrivalAirport,\n\t\t\t\tMainCarrier:      f.Airline,\n\t\t\t\tFlightNumber:     f.FlightNumber,\n\t\t\t\tFlights:          []*schedules.Flight{f},\n\t\t\t}\n\t\t\tsch = append(sch, sc)\n\t\t}\n\t}\n\n\tlog.Debug(ctx, \"Schedules.\", zap.Int(\"count\", len(sch)))\n\n\treturn &schedules.Page[*schedules.Schedule]{\n\t\tItems: sch,\n\t\tNext:  nextCursor,\n\t}, nil\n}\n", "n_tokens": 4735, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [254, 627], "def_symbols": ["Search"], "symbols": ["Search", "returns", "list", "paginated", "schedules", "matching", "the", "given", "criteria", "The", "result", "set", "consists", "two", "types", "items", "directed", "flights", "and", "connected", "ones", "Direct", "are", "that", "take", "you", "from", "single", "operation", "For", "example", "AMS", "Amsterdam", "Venice", "VCE", "Connected", "with", "more", "than", "one", "NRT", "Tokyo", "Narita", "via", "FRA", "Frankfurt", "This", "results", "operations", "achieve", "this", "behaviour", "merge", "queries", "first", "all", "direct", "while", "second", "then", "ordered", "scheduled", "departure", "timestamp", "ascending", "order", "paginate", "dataset", "leverage", "DENSE_RANK", "function", "assign", "row", "number", "each", "schedule", "case", "flight", "will", "same", "for", "very", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "FlightSearchQuery", "Page", "Schedule", "error", "var", "cursor", "Cursor", "err", "schema", "getSchemaFromTime", "DepartureDate", "goqu", "Dialect", "postgres", "nil", "paginator", "Decode", "return", "else", "NewForwardCursor", "Limit", "Field", "Name", "row_number", "Direction", "DirectionAsc", "upperBoundRowNumberClause", "Expression", "Fields", "Value", "Lte", "int", "float64", "aggregatedConnectedFlightsCTE", "Select", "connecting_flights", "departure_airports", "arrival_airports", "scheduled_departure_ats", "From", "Table", "Where", "Array", "time", "Time", "connectedFlightsSearchDepartureAirportsCTE", "connectedFlightsSearchArrivalAirportsCTE", "len", "DepartureAirports", "UNNEST", "varchar", "departure_airport", "ArrivalAirports", "arrival_airport", "eligibleConnectedMinSequenceColumn", "eligibleConnectedMaxSequenceColumn", "exp", "LiteralExpression", "eligibleConnectedFlightsWhereConditions", "connectedFlightsJoinedCTE", "Star", "aggregated_connected_flights", "CrossJoin", "connected_flights_search_departure_airports", "append", "ARRAY", "connected_flights_joined", "MIN", "array_position", "date", "connected_flights_search_arrival_airports", "MAX", "eligibleConnectedFlightsCTE", "min_sequence", "max_sequence", "GroupBy", "connectedFlightsCTE", "connecting_flight_id", "flight_id", "airline", "flight_number", "sequence", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "eligible_connected_flights", "first_scheduled_departure_at", "FIRST_VALUE", "CONCAT", "REGEXP_REPLACE", "timestamptz", "OVER", "PARTITION", "ORDER", "connected_scheduled_departure_time_utc", "concat", "regexp_replace", "scheduled_departure_time_utc", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshares", "InnerJoin", "And", "Gte", "Airline", "codeshare_airlines", "string", "directFlightsCTE", "IsNull", "mergedCTE", "direct_flights", "Union", "connected_flights", "rankedCTE", "merged", "Order", "Asc", "GetWhere", "ranked", "With", "stmt", "bindings", "Prepared", "true", "ToSQL", "errors", "Wrap", "repository", "failed", "prepare", "sql", "statement", "log", "Debug", "SQL", "zap", "String", "Any", "rows", "Query", "pgconn", "PgError", "Code", "Missing", "Schema", "Error", "not", "found", "request", "Items", "make", "Cannot", "execute", "query", "database", "flightPg", "distinctSchedules", "map"], "doc_head": "// Search returns a list paginated list of schedules matching the given criteria.\n// The result set consists of two types of items: directed flights and connected ones.\n// Direct flights are flights that take you from A to B in a single operation. For example, AMS (Amsterdam) to Venice (VCE).\n// Connected flights are flights that take you from A to B with more than one operation. For example,\n// AMS (Amsterdam) to NRT (Tokyo Narita) via FRA (Frankfurt). This results in two operations: AMS -> FRA, and FRA -> NRT.\n// To achieve this behaviour, we merge the result of two queries: the first one returns all the direct flights operations, while the\n// second one returns all connected operations. The result set is then ordered by scheduled departure timestamp ascending order.\n// To paginate the dataset, we leverage the DENSE_RANK function to assign a row number to each schedule. In the case of a\n// connected flight, the row number will be the same for all the operations in the very same connected flight.\nfunc (r *FlightsPostgresRepository) Search(ctx context.Context, in *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tvar c *cursor.Cursor\n\tvar err error\n\tsche"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 628, "end_line": 641, "text": "func (r *FlightsPostgresRepository) Get(ctx context.Context, id string) (*schedules.Flight, error) {\n\tflights, err := r.GetBatch(ctx, []string{id})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(flights) == 0 {\n\t\treturn nil, schedules.ErrFlightNotFound\n\t}\n\treturn flights[0], nil\n}\n\nfunc (r *FlightsPostgresRepository) GetBatch(ctx context.Context, ids []string) ([]*schedules.Flight, error) {\n\tuniqueIDs := make(map[string]struct{})\n\tfor _, id := range ids {", "n_tokens": 129, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [628, 641], "def_symbols": ["Get", "GetBatch"], "symbols": ["Get", "GetBatch", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "string", "schedules", "Flight", "error", "flights", "err", "nil", "return", "len", "ErrFlightNotFound", "ids", "uniqueIDs", "make", "map", "struct", "for", "range"], "doc_head": "func (r *FlightsPostgresRepository) Get(ctx context.Context, id string) (*schedules.Flight, error) {\n\tflights, err := r.GetBatch(ctx, []string{id})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(flights) == 0 {\n\t\treturn nil, schedules.ErrFlightNotFound\n\t}\n\treturn flights[0], nil\n}\nfunc (r *FlightsPostgresRepository) GetBatch(ctx context.Context, ids []string) ([]*schedules.Flight, error) {\n\tuniqueIDs := make(map[string]struct{})\n\tfor _, id := range ids {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 642, "end_line": 671, "text": "\t\tuniqueIDs[id] = struct{}{}\n\t}\n\n\tuniqueIDSlice := make([]string, 0, len(uniqueIDs))\n\tfor id := range uniqueIDs {\n\t\tuniqueIDSlice = append(uniqueIDSlice, id)\n\t}\n\n\tidsPerSchema := make(map[string][]string)\n\tfor _, id := range uniqueIDSlice {\n\t\tschema := r.getSchemaFromFlightID(id)\n\t\tidsPerSchema[schema] = append(idsPerSchema[schema], id)\n\t}\n\n\tfs := make([]*schedules.Flight, 0)\n\tfor schema, ids := range idsPerSchema {\n\t\tfsPerSchema, err := r.getBatchForSchema(ctx, schema, ids)\n\t\tif err != nil {\n\t\t\tlog.Warn(ctx, \"failed to get batch for schema\",\n\t\t\t\tzap.String(\"schema\", schema),\n\t\t\t\tzap.Error(err))\n\t\t\tcontinue\n\t\t}\n\n\t\tfs = append(fs, fsPerSchema...)\n\t}\n\n\treturn fs, nil\n}\n", "n_tokens": 200, "primary_symbol": "", "primary_kind": "", "primary_span": [642, 671], "def_symbols": [], "symbols": ["uniqueIDs", "struct", "uniqueIDSlice", "make", "string", "len", "for", "range", "append", "idsPerSchema", "map", "schema", "getSchemaFromFlightID", "schedules", "Flight", "ids", "fsPerSchema", "err", "getBatchForSchema", "ctx", "nil", "log", "Warn", "failed", "get", "batch", "zap", "String", "Error", "continue", "return"], "doc_head": "\t\tuniqueIDs[id] = struct{}{}\n\t}\n\tuniqueIDSlice := make([]string, 0, len(uniqueIDs))\n\tfor id := range uniqueIDs {\n\t\tuniqueIDSlice = append(uniqueIDSlice, id)\n\t}\n\tidsPerSchema := make(map[string][]string)\n\tfor _, id := range uniqueIDSlice {\n\t\tschema := r.getSchemaFromFlightID(id)\n\t\tidsPerSchema[schema] = append(idsPerSchema[schema], id)\n\t}\n\tfs := make([]*schedules.Flight, 0)\n\tfor schema, ids := range idsPerSchema {\n\t\tfsPerSchema, err := r.getBatchForSchema(ctx, schema, ids)\n\t\tif err != nil {\n\t\t\tlog.Warn(ctx, \"failed to get batch for schema\",\n\t\t\t\tzap.String(\"schema\", schema),\n\t\t\t\tzap.Error(err))\n\t\t\tcontinue\n\t\t}\n\t\tfs = append(fs, fsPerSchema...)\n\t}\n\treturn fs, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 672, "end_line": 742, "text": "func (r *FlightsPostgresRepository) getBatchForSchema(ctx context.Context, schema string, ids []string) ([]*schedules.Flight, error) {\n\tpg := goqu.Dialect(\"postgres\")\n\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\"),\n\t\t\tgoqu.I(\"flights.id\"),\n\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\tgoqu.I(\"flights.status\"),\n\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t\tgoqu.L(\"(concat(flights.scheduled_departure_at, ' ', regexp_replace(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"connected_scheduled_departure_time_utc\"),\n\t\t\tgoqu.L(\"(concat(flights.scheduled_departure_at, ' ', regexp_replace(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.V(1).As(\"row_number\"),\n\t\t).\n\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\tWhere(goqu.I(\"flights.flight_id\").In(ids)).\n\t\tToSQL()\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"schedules mysql repository: failed to build sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Get SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\n\trows, err := r.db.Query(ctx, stmt, bindings...)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to query database\")\n\t}\n\tdefer rows.Close()\n\n\tfs := make([]*schedules.Flight, 0)\n\n\tfor rows.Next() {\n\t\tvar fpg flightPg\n\t\tif err := r.scan(rows, &fpg); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot scan row\")\n\t\t}\n\t\tf, err := fpg.toDomain()\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot adapt flight to domain model\")\n\t\t}\n\t\tfs = append(fs, f)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, errors.Wrap(err, \"error encountered while iterating through rows\")\n\t}\n\n\treturn fs, nil\n}\n", "n_tokens": 800, "primary_symbol": "getBatchForSchema", "primary_kind": "function", "primary_span": [672, 742], "def_symbols": ["getBatchForSchema"], "symbols": ["getBatchForSchema", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "schema", "string", "ids", "schedules", "Flight", "error", "goqu", "Dialect", "postgres", "stmt", "bindings", "err", "Select", "flights", "connecting_flight_id", "flight_id", "airline", "flight_number", "sequence", "departure_airport", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "arrival_airport", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshares", "concat", "regexp_replace", "timestamptz", "connected_scheduled_departure_time_utc", "scheduled_departure_time_utc", "row_number", "From", "Table", "Where", "ToSQL", "nil", "return", "errors", "Wrap", "mysql", "repository", "failed", "build", "sql", "statement", "log", "Debug", "Get", "SQL", "zap", "String", "Any", "rows", "Query", "query", "database", "defer", "Close", "make", "for", "Next", "var", "fpg", "flightPg", "scan", "cannot", "row", "toDomain", "adapt", "flight", "domain", "model", "append", "Err", "encountered", "while", "iterating", "through"], "doc_head": "func (r *FlightsPostgresRepository) getBatchForSchema(ctx context.Context, schema string, ids []string) ([]*schedules.Flight, error) {\n\tpg := goqu.Dialect(\"postgres\")\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\"),\n\t\t\tgoqu.I(\"flights.id\"),\n\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\tgoqu.I(\"flights.status\"),\n\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t\tgoqu.L"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 743, "end_line": 821, "text": "func (r *FlightsPostgresRepository) GetRandomFlight(ctx context.Context, in *schedules.RandomFlightQuery) (*schedules.Flight, error) {\n\tschema := r.getSchemaFromTime(in.DepartureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\n\tcte := pg.Select(\n\t\tgoqu.I(\"*\"),\n\t\tgoqu.L(\"(flights.scheduled_departure_at + flights.scheduled_departure_time_tz::time) AS scheduled_departure_timestamp\"),\n\t\tgoqu.L(\"(flights.scheduled_arrival_at + flights.scheduled_arrival_time_tz::time) AS scheduled_arrival_timestamp\"),\n\t).From(goqu.S(schema).Table(\"flights\")).\n\t\tWhere(\n\t\t\tgoqu.L(\"flights.scheduled_departure_at::date = ?\", in.DepartureDate),\n\t\t\tgoqu.L(\"( (flights.scheduled_arrival_at + flights.scheduled_arrival_time_tz::time) - (flights.scheduled_departure_at + flights.scheduled_departure_time_tz::time) ) < (? * INTERVAL '1 hour')\", in.MaxFlightDuration.Hours()),\n\t\t\tgoqu.I(\"flights.status\").In(\n\t\t\t\tstring(schedules.FlightOperationalStatusScheduled),\n\t\t\t\tstring(schedules.FlightOperationalStatusAirborne),\n\t\t\t),\n\t\t)\n\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"f.connecting_flight_id\"),\n\t\t\tgoqu.I(\"f.id\"),\n\t\t\tgoqu.I(\"f.flight_id\"),\n\t\t\tgoqu.I(\"f.airline\"),\n\t\t\tgoqu.I(\"f.flight_number\"),\n\t\t\tgoqu.I(\"f.sequence\"),\n\t\t\tgoqu.I(\"f.departure_airport\"),\n\t\t\tgoqu.I(\"f.status\"),\n\t\t\tgoqu.I(\"f.departure_status\"),\n\t\t\tgoqu.I(\"f.arrival_status\"),\n\t\t\tgoqu.I(\"f.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"f.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"f.expected_departure_at\"),\n\t\t\tgoqu.I(\"f.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"f.actual_departure_at\"),\n\t\t\tgoqu.I(\"f.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"f.arrival_airport\"),\n\t\t\tgoqu.I(\"f.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"f.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"f.expected_arrival_at\"),\n\t\t\tgoqu.I(\"f.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"f.actual_arrival_at\"),\n\t\t\tgoqu.I(\"f.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"f.aircraft\"),\n\t\t\tgoqu.I(\"f.codeshares\"),\n\t\t\tgoqu.L(\"(f.scheduled_departure_at + f.scheduled_departure_time_tz::time)\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.L(\"(f.scheduled_arrival_at + f.scheduled_arrival_time_tz::time)\").As(\"scheduled_arrival_time_utc\"),\n\t\t\tgoqu.V(1).As(\"row_number\"),\n\t\t).\n\t\tWith(\"FlightWindow\", cte).\n\t\tFrom(goqu.S(schema).Table(\"flights\").As(\"f\")).\n\t\tInnerJoin(goqu.L(\"FlightWindow\").As(\"fw\"), goqu.On(goqu.Ex{\"f.id\": goqu.I(\"fw.id\")})).\n\t\tWhere(\n\t\t\tgoqu.I(\"fw.scheduled_departure_timestamp\").Between(\n\t\t\t\tgoqu.Range(\n\t\t\t\t\tin.DepartureDate.Add(in.MinDurationToDeparture),\n\t\t\t\t\tin.DepartureDate.Add(in.MaxDurationToDeparture),\n\t\t\t\t),\n\t\t\t),\n\t\t).\n\t\tOrder(goqu.L(\"RANDOM()\").Desc()).\n\t\tLimit(1).\n\t\tToSQL()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"schedules repository: failed to build sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Get SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\n\trow := r.db.QueryRow(ctx, stmt, bindings...)\n\n\tvar f flightPg\n\tif err := r.scan(row, &f); err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot scan row\")\n\t}\n\n\treturn f.toDomain()\n}\n", "n_tokens": 882, "primary_symbol": "GetRandomFlight", "primary_kind": "function", "primary_span": [743, 821], "def_symbols": ["GetRandomFlight"], "symbols": ["GetRandomFlight", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "schedules", "RandomFlightQuery", "Flight", "error", "schema", "getSchemaFromTime", "DepartureDate", "goqu", "Dialect", "postgres", "cte", "Select", "flights", "scheduled_departure_at", "scheduled_departure_time_tz", "time", "scheduled_departure_timestamp", "scheduled_arrival_at", "scheduled_arrival_time_tz", "scheduled_arrival_timestamp", "From", "Table", "Where", "date", "INTERVAL", "hour", "MaxFlightDuration", "Hours", "status", "string", "FlightOperationalStatusScheduled", "FlightOperationalStatusAirborne", "stmt", "bindings", "err", "connecting_flight_id", "flight_id", "airline", "flight_number", "sequence", "departure_airport", "departure_status", "arrival_status", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "arrival_airport", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshares", "scheduled_departure_time_utc", "scheduled_arrival_time_utc", "row_number", "With", "FlightWindow", "InnerJoin", "Between", "Range", "Add", "MinDurationToDeparture", "MaxDurationToDeparture", "Order", "RANDOM", "Desc", "Limit", "ToSQL", "nil", "return", "errors", "Wrap", "repository", "failed", "build", "sql", "statement", "log", "Debug", "Get", "SQL", "zap", "String", "Any", "row", "QueryRow", "var", "flightPg", "scan", "cannot", "toDomain"], "doc_head": "func (r *FlightsPostgresRepository) GetRandomFlight(ctx context.Context, in *schedules.RandomFlightQuery) (*schedules.Flight, error) {\n\tschema := r.getSchemaFromTime(in.DepartureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\tcte := pg.Select(\n\t\tgoqu.I(\"*\"),\n\t\tgoqu.L(\"(flights.scheduled_departure_at + flights.scheduled_departure_time_tz::time) AS scheduled_departure_timestamp\"),\n\t\tgoqu.L(\"(flights.scheduled_arrival_at + flights.scheduled_arrival_time_tz::time) AS scheduled_arrival_timestamp\"),\n\t).From(goqu.S(schema).Table(\"flights\")).\n\t\tWhere(\n\t\t\tgoqu.L(\"flights.scheduled_departure_at::date = ?\", in.DepartureDate),\n\t\t\tgoqu.L(\"( (flights.scheduled_arrival_at + flights.scheduled_arrival_time_tz::time) - (flights.scheduled_departure_at + flights.scheduled_departure_time_tz::time) ) < (? * INTERVAL '1 hour')\", in.MaxFlightDuration.Hours()),\n\t\t\tgoqu.I(\"flights.status\").In(\n\t\t\t\tstring(schedules.FlightOperationalStatusScheduled),\n\t\t\t\tstring(schedules.FlightOperationalStatusAirborne),\n\t\t\t),\n\t\t)\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"f.connecting_flight_id\"),\n\t\t\tgoqu.I(\"f.id\"),\n\t\t\tgoqu.I(\"f.flight_id\"),\n\t\t\tgoqu.I(\"f.airline\"),\n\t\t\tgoqu.I(\"f.flight_number\"),\n\t\t\tgoqu.I(\"f.sequence\"),\n\t\t\tgoqu."}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 822, "end_line": 942, "text": "func (r *FlightsPostgresRepository) GetByFlightDesignator(ctx context.Context, in *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tschema := r.getSchemaFromTime(in.DepartureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\n\tstmt, args, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\"),\n\t\t\tgoqu.I(\"flights.id\"),\n\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\tgoqu.I(\"flights.status\"),\n\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t\tgoqu.L(\"(concat(flights.scheduled_departure_at, ' ', regexp_replace(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"connected_scheduled_departure_time_utc\"),\n\t\t\tgoqu.L(\"(concat(flights.scheduled_departure_at, ' ', regexp_replace(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.L(\"1::int\").As(\"row_number\"),\n\t\t).\n\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\tWhere(\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\").Eq(in.DepartureDate),\n\t\t\tgoqu.Or(\n\t\t\t\tgoqu.And(\n\t\t\t\t\tgoqu.I(\"flights.airline\").Eq(in.Airline),\n\t\t\t\t\tgoqu.I(\"flights.flight_number\").Eq(in.Number),\n\t\t\t\t),\n\t\t\t\tgoqu.L(\"? <@ flights.codeshare_designators\", pgsql.Array([]string{fmt.Sprintf(\"%s%d\", in.Airline, in.Number)})),\n\t\t\t),\n\t\t).\n\t\tPrepared(true).\n\t\tToSQL()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to prepare sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Get SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", args))\n\n\trows, err := r.db.Query(ctx, stmt, args...)\n\tif err != nil {\n\t\tif e, ok := err.(*pgconn.PgError); ok && e.Code == \"42P01\" { // Missing Schema\n\t\t\tlog.Error(ctx, \"Schema not found.\", zap.Any(\"request\", in), zap.String(\"schema\", schema), zap.Error(err))\n\t\t\treturn &schedules.Page[*schedules.Schedule]{Items: make([]*schedules.Schedule, 0)}, nil\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"failed to query database\")\n\t}\n\n\tresult := make([]flightPg, 0)\n\tdistinctSchedules := make(map[int]bool)\n\n\tfor rows.Next() {\n\t\tvar fpg flightPg\n\t\tif err := r.scan(rows, &fpg); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot scan row\")\n\t\t}\n\t\tresult = append(result, fpg)\n\t\tif _, found := distinctSchedules[fpg.RowNumber]; !found {\n\t\t\tdistinctSchedules[fpg.RowNumber] = true\n\t\t}\n\t}\n\n\tvar sch []*schedules.Schedule\n\tvar connectedFlightsMap = make(map[int64]*schedules.Schedule)\n\n\tfor _, fpg := range result {\n\t\tf, err := fpg.toDomain()\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot adapt flight to domain model\")\n\t\t}\n\n\t\tif f.ConnectingFlightID > 0 {\n\t\t\tif sc, found := connectedFlightsMap[f.ConnectingFlightID]; found {\n\t\t\t\tsc.ArrivalAirport = f.ArrivalAirport\n\t\t\t\tsc.Flights = append(sc.Flights, f)\n\t\t\t} else {\n\t\t\t\tsc = &schedules.Schedule{\n\t\t\t\t\tDepartureAirport: f.DepartureAirport,\n\t\t\t\t\tArrivalAirport:   f.ArrivalAirport,\n\t\t\t\t\tMainCarrier:      f.Airline,\n\t\t\t\t\tFlightNumber:     f.FlightNumber,\n\t\t\t\t\tFlights:          []*schedules.Flight{f},\n\t\t\t\t}\n\t\t\t\tsch = append(sch, sc)\n\t\t\t\tconnectedFlightsMap[f.ConnectingFlightID] = sc\n\t\t\t}\n\t\t} else {\n\t\t\tsc := &schedules.Schedule{\n\t\t\t\tDepartureAirport: f.DepartureAirport,\n\t\t\t\tArrivalAirport:   f.ArrivalAirport,\n\t\t\t\tMainCarrier:      f.Airline,\n\t\t\t\tFlightNumber:     f.FlightNumber,\n\t\t\t\tFlights:          []*schedules.Flight{f},\n\t\t\t}\n\t\t\tsch = append(sch, sc)\n\t\t}\n\t}\n\n\tlog.Debug(ctx, \"Schedules.\", zap.Int(\"count\", len(sch)))\n\n\treturn &schedules.Page[*schedules.Schedule]{\n\t\tItems: sch,\n\t}, nil\n}\n", "n_tokens": 1320, "primary_symbol": "GetByFlightDesignator", "primary_kind": "function", "primary_span": [822, 942], "def_symbols": ["GetByFlightDesignator"], "symbols": ["GetByFlightDesignator", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "schedules", "FlightDesignatorQuery", "Page", "Schedule", "error", "schema", "getSchemaFromTime", "DepartureDate", "goqu", "Dialect", "postgres", "stmt", "args", "err", "Select", "flights", "connecting_flight_id", "flight_id", "airline", "flight_number", "sequence", "departure_airport", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "arrival_airport", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshares", "concat", "regexp_replace", "timestamptz", "connected_scheduled_departure_time_utc", "scheduled_departure_time_utc", "int", "row_number", "From", "Table", "Where", "And", "Airline", "Number", "codeshare_designators", "pgsql", "Array", "string", "fmt", "Sprintf", "Prepared", "true", "ToSQL", "nil", "return", "errors", "Wrap", "failed", "prepare", "sql", "statement", "log", "Debug", "Get", "SQL", "zap", "String", "Any", "bindings", "rows", "Query", "pgconn", "PgError", "Code", "Missing", "Schema", "Error", "not", "found", "request", "Items", "make", "query", "database", "result", "flightPg", "distinctSchedules", "map", "bool", "for", "Next", "var", "fpg", "scan", "cannot", "row", "append", "RowNumber", "sch", "connectedFlightsMap", "int64", "range", "toDomain", "adapt", "flight", "domain", "model", "ConnectingFlightID", "ArrivalAirport", "Flights", "else", "DepartureAirport", "MainCarrier", "FlightNumber", "Flight", "Schedules", "Int", "count", "len"], "doc_head": "func (r *FlightsPostgresRepository) GetByFlightDesignator(ctx context.Context, in *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tschema := r.getSchemaFromTime(in.DepartureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\tstmt, args, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"flights.connecting_flight_id\"),\n\t\t\tgoqu.I(\"flights.id\"),\n\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\tgoqu.I(\"flights.status\"),\n\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 943, "end_line": 1131, "text": "// GetAirportFlightBoard returns a list of paginated direct flights from *or* to an airport at the specified date\nfunc (r *FlightsPostgresRepository) GetAirportFlightBoard(ctx context.Context, in *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tvar (\n\t\tc               *cursor.Cursor\n\t\terr             error\n\t\tcursorFieldName string\n\t\tdateField       string\n\t\ttimezoneField   string\n\t\tboardType       string\n\t)\n\n\tswitch in.Type {\n\tcase schedules.FlightBoardTypeArrivals:\n\t\tcursorFieldName = \"scheduled_arrival_time_utc\"\n\t\tdateField = \"arrival_at\"\n\t\ttimezoneField = \"arrival_time_tz\"\n\t\tboardType = \"arrival_airport\"\n\tdefault:\n\t\tcursorFieldName = \"scheduled_departure_time_utc\"\n\t\tdateField = \"departure_at\"\n\t\ttimezoneField = \"departure_time_tz\"\n\t\tboardType = \"departure_airport\"\n\t}\n\n\tschema := r.getSchemaFromTime(in.Date)\n\tpg := goqu.Dialect(\"postgres\")\n\n\tif in.Cursor != nil {\n\t\tif c, err = r.paginator.Decode(*in.Cursor); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tc = cursor.NewForwardCursor(\n\t\t\tin.Limit,\n\t\t\tcursor.Field{Name: cursorFieldName, Direction: cursor.DirectionAsc},\n\t\t\tcursor.Field{Name: \"flight_id\", Direction: cursor.DirectionAsc},\n\t\t)\n\t}\n\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"result.id\"),\n\t\t\tgoqu.I(\"result.flight_id\"),\n\t\t\tgoqu.I(\"result.airline\"),\n\t\t\tgoqu.I(\"result.flight_number\"),\n\t\t\tgoqu.I(\"result.sequence\"),\n\t\t\tgoqu.I(\"result.departure_airport\"),\n\t\t\tgoqu.I(\"result.status\"),\n\t\t\tgoqu.I(\"result.departure_status\"),\n\t\t\tgoqu.I(\"result.arrival_status\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.expected_departure_at\"),\n\t\t\tgoqu.I(\"result.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.actual_departure_at\"),\n\t\t\tgoqu.I(\"result.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.arrival_airport\"),\n\t\t\tgoqu.I(\"result.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"result.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"result.expected_arrival_at\"),\n\t\t\tgoqu.I(\"result.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"result.actual_arrival_at\"),\n\t\t\tgoqu.I(\"result.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"result.aircraft\"),\n\t\t\tgoqu.I(\"result.codeshares\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_time_utc\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.I(\"result.scheduled_arrival_time_utc\").As(\"scheduled_arrival_time_utc\"),\n\t\t).\n\t\tWith(\n\t\t\t\"result\",\n\t\t\tpg.Select(\n\t\t\t\tgoqu.I(\"flights.id\"),\n\t\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\t\tgoqu.I(\"flights.status\"),\n\t\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t\t\tgoqu.L(\"(concat(flights.scheduled_departure_at, ' ', regexp_replace(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_departure_time_utc\"),\n\t\t\t\tgoqu.L(\"(concat(flights.scheduled_arrival_at, ' ', regexp_replace(scheduled_arrival_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_arrival_time_utc\"),\n\t\t\t\tgoqu.L(\n\t\t\t\t\tfmt.Sprintf(`COALESCE(\n                (CASE WHEN actual_%[1]s != '0001-01-01' THEN (CONCAT(actual_%[1]s, ' ', REGEXP_REPLACE(actual_%[2]s, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz END),\n                (CASE WHEN expected_%[1]s != '0001-01-01' THEN (CONCAT(expected_%[1]s, ' ', REGEXP_REPLACE(expected_%[2]s, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz END),\n                (CASE WHEN scheduled_%[1]s != '0001-01-01' THEN (CONCAT(scheduled_%[1]s, ' ', REGEXP_REPLACE(scheduled_%[2]s, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz END)\n            ) + interval '1' hour`, dateField, timezoneField),\n\t\t\t\t).As(\"expires_at\"),\n\t\t\t).\n\t\t\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\t\t\tWhere(\n\t\t\t\t\tgoqu.C(boardType).Table(\"flights\").Eq(in.Airport),\n\t\t\t\t\tgoqu.L(fmt.Sprintf(\"flights.scheduled_%s::date = ?\", dateField), in.Date),\n\t\t\t\t),\n\t\t).\n\t\tFrom(\"result\").\n\t\tWhere(goqu.I(\"result.expires_at\").Gt(goqu.L(\"now()\")), r.paginator.GetWhere(c)).\n\t\tOrder(r.paginator.GetOrderBy(c)...).\n\t\tLimit(c.Limit + 1).\n\t\tToSQL()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to prepare sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Prepared SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\n\trows, err := r.db.Query(ctx, stmt, bindings...)\n\tif err != nil {\n\t\tif e, ok := err.(*pgconn.PgError); ok && e.Code == \"42P01\" { // Missing Schema\n\t\t\tlog.Error(ctx, \"Schema not found.\", zap.Any(\"request\", in), zap.String(\"schema\", schema), zap.Error(err))\n\t\t\treturn &schedules.Page[*schedules.Flight]{Items: make([]*schedules.Flight, 0)}, nil\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"failed to query database\")\n\t}\n\n\tvar result []flightBoardPg\n\n\tfor rows.Next() {\n\t\tvar fpg flightBoardPg\n\t\tif err := r.scanFlightBoard(rows, &fpg); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot scan row\")\n\t\t}\n\t\tresult = append(result, fpg)\n\t}\n\n\thasNextPage := len(result) > int(in.Limit)\n\n\tvar nextCursor *string\n\tif hasNextPage {\n\t\tresult = result[:len(result)-1]\n\n\t\tvar cursorFieldValue time.Time\n\t\tswitch in.Type {\n\t\tcase schedules.FlightBoardTypeArrivals:\n\t\t\tcursorFieldValue = result[len(result)-1].ScheduledArrivalTimeUtc\n\t\tdefault:\n\t\t\tcursorFieldValue = result[len(result)-1].ScheduledDepartureTimeUtc\n\t\t}\n\n\t\tc = cursor.NewForwardCursor(\n\t\t\tc.Limit,\n\t\t\tcursor.Field{Name: cursorFieldName, Value: cursorFieldValue, Direction: cursor.DirectionAsc},\n\t\t\tcursor.Field{Name: \"flight_id\", Value: result[len(result)-1].FlightID, Direction: cursor.DirectionAsc},\n\t\t)\n\n\t\tif next, err := r.paginator.Encode(c); err == nil {\n\t\t\tnextCursor = &next\n\t\t\tlog.Debug(ctx, \"Next page available.\", zap.Uint(\"limit\", in.Limit), zap.Int(\"count\", len(result)), zap.String(\"next\", next))\n\t\t} else {\n\t\t\tlog.Error(ctx, \"Cannot create next cursor.\", zap.Uint(\"limit\", in.Limit), zap.Int(\"count\", len(result)), zap.Error(err))\n\t\t}\n\t}\n\n\tvar flights []*schedules.Flight\n\n\tfor _, fpg := range result {\n\t\tf, err := fpg.toDomain()\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot adapt flight to domain model\")\n\t\t}\n\n\t\tflights = append(flights, f)\n\t}\n\n\tlog.Debug(ctx, \"Schedules.\", zap.Int(\"count\", len(flights)))\n\n\treturn &schedules.Page[*schedules.Flight]{\n\t\tItems: flights,\n\t\tNext:  nextCursor,\n\t}, nil\n}\n", "n_tokens": 2134, "primary_symbol": "GetAirportFlightBoard", "primary_kind": "function", "primary_span": [944, 1131], "def_symbols": ["GetAirportFlightBoard"], "symbols": ["GetAirportFlightBoard", "returns", "list", "paginated", "direct", "flights", "from", "airport", "the", "specified", "date", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "schedules", "AirportFlightBoardQuery", "Page", "Flight", "error", "var", "cursor", "Cursor", "err", "cursorFieldName", "string", "dateField", "timezoneField", "boardType", "switch", "Type", "case", "FlightBoardTypeArrivals", "scheduled_arrival_time_utc", "arrival_at", "arrival_time_tz", "arrival_airport", "default", "scheduled_departure_time_utc", "departure_at", "departure_time_tz", "departure_airport", "schema", "getSchemaFromTime", "Date", "goqu", "Dialect", "postgres", "nil", "paginator", "Decode", "return", "else", "NewForwardCursor", "Limit", "Field", "Name", "Direction", "DirectionAsc", "flight_id", "stmt", "bindings", "Select", "result", "airline", "flight_number", "sequence", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshares", "With", "concat", "regexp_replace", "timestamptz", "fmt", "Sprintf", "COALESCE", "CASE", "WHEN", "actual_", "THEN", "CONCAT", "REGEXP_REPLACE", "END", "expected_", "scheduled_", "interval", "hour", "expires_at", "From", "Table", "Where", "Airport", "now", "GetWhere", "Order", "GetOrderBy", "ToSQL", "errors", "Wrap", "failed", "prepare", "sql", "statement", "log", "Debug", "Prepared", "SQL", "zap", "String", "Any", "rows", "Query", "pgconn", "PgError", "Code", "Missing", "Schema", "Error", "not", "found", "request", "Items", "make", "query", "database", "flightBoardPg", "for", "Next", "fpg", "scanFlightBoard", "cannot", "scan", "row", "append", "hasNextPage", "len", "int", "nextCursor", "cursorFieldValue", "time", "Time", "ScheduledArrivalTimeUtc", "ScheduledDepartureTimeUtc", "Value", "FlightID", "next", "Encode", "page", "available", "Uint", "limit", "Int", "count", "Cannot", "create", "range", "toDomain", "adapt", "flight", "domain", "model", "Schedules"], "doc_head": "// GetAirportFlightBoard returns a list of paginated direct flights from *or* to an airport at the specified date\nfunc (r *FlightsPostgresRepository) GetAirportFlightBoard(ctx context.Context, in *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tvar (\n\t\tc               *cursor.Cursor\n\t\terr             error\n\t\tcursorFieldName string\n\t\tdateField       string\n\t\ttimezoneField   string\n\t\tboardType       string\n\t)\n\tswitch in.Type {\n\tcase schedules.FlightBoardTypeArrivals:\n\t\tcursorFieldName = \"scheduled_arrival_time_utc\"\n\t\tdateField = \"arrival_at\"\n\t\ttimezoneField = \"arrival_time_tz\"\n\t\tboardType = \"arrival_airport\"\n\tdefault:\n\t\tcursorFieldName = \"scheduled_departure_time_utc\"\n\t\tdateField = \"departure_at\"\n\t\ttimezoneField = \"departure_time_tz\"\n\t\tboardType = \"departure_airport\"\n\t}\n\tschema := r.getSchemaFromTime(in.Date)\n\tpg := goqu.Dialect(\"postgres\")\n\tif in.Cursor != nil {\n\t\tif c, err = r.paginator.Decode(*in.Cursor); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tc = cursor.NewForwardCursor(\n\t\t\tin.Limit,\n\t\t\tcursor.Field{Name: cursorFieldName, Direction: cursor.DirectionAsc},\n\t\t\tcursor.Field{Name: \"flight_id\", Direction: cursor.DirectionAsc},\n\t\t)\n\t}\n\tstmt, bi"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 1132, "end_line": 1294, "text": "// GetAirlineFlightBoard returns a list of paginated direct flights operated by an airline at the specified date\nfunc (r *FlightsPostgresRepository) GetAirlineFlightBoard(ctx context.Context, in *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tvar (\n\t\tc   *cursor.Cursor\n\t\terr error\n\t)\n\n\tschema := r.getSchemaFromTime(in.Date)\n\tpg := goqu.Dialect(\"postgres\")\n\n\tif in.Cursor != nil {\n\t\tif c, err = r.paginator.Decode(*in.Cursor); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tc = cursor.NewForwardCursor(\n\t\t\tin.Limit,\n\t\t\tcursor.Field{Name: \"scheduled_departure_time_utc\", Direction: cursor.DirectionAsc},\n\t\t\tcursor.Field{Name: \"flight_id\", Direction: cursor.DirectionAsc},\n\t\t)\n\t}\n\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"result.id\"),\n\t\t\tgoqu.I(\"result.flight_id\"),\n\t\t\tgoqu.I(\"result.airline\"),\n\t\t\tgoqu.I(\"result.flight_number\"),\n\t\t\tgoqu.I(\"result.sequence\"),\n\t\t\tgoqu.I(\"result.departure_airport\"),\n\t\t\tgoqu.I(\"result.status\"),\n\t\t\tgoqu.I(\"result.departure_status\"),\n\t\t\tgoqu.I(\"result.arrival_status\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.expected_departure_at\"),\n\t\t\tgoqu.I(\"result.expected_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.actual_departure_at\"),\n\t\t\tgoqu.I(\"result.actual_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.arrival_airport\"),\n\t\t\tgoqu.I(\"result.scheduled_arrival_at\"),\n\t\t\tgoqu.I(\"result.scheduled_arrival_time_tz\"),\n\t\t\tgoqu.I(\"result.expected_arrival_at\"),\n\t\t\tgoqu.I(\"result.expected_arrival_time_tz\"),\n\t\t\tgoqu.I(\"result.actual_arrival_at\"),\n\t\t\tgoqu.I(\"result.actual_arrival_time_tz\"),\n\t\t\tgoqu.I(\"result.aircraft\"),\n\t\t\tgoqu.I(\"result.codeshares\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_time_utc\").As(\"scheduled_departure_time_utc\"),\n\t\t\tgoqu.I(\"result.scheduled_arrival_time_utc\").As(\"scheduled_arrival_time_utc\"),\n\t\t).\n\t\tWith(\n\t\t\t\"result\",\n\t\t\tpg.Select(\n\t\t\t\tgoqu.I(\"flights.id\"),\n\t\t\t\tgoqu.I(\"flights.flight_id\"),\n\t\t\t\tgoqu.I(\"flights.airline\"),\n\t\t\t\tgoqu.I(\"flights.flight_number\"),\n\t\t\t\tgoqu.I(\"flights.sequence\"),\n\t\t\t\tgoqu.I(\"flights.departure_airport\"),\n\t\t\t\tgoqu.I(\"flights.status\"),\n\t\t\t\tgoqu.I(\"flights.departure_status\"),\n\t\t\t\tgoqu.I(\"flights.arrival_status\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_departure_at\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_departure_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.expected_departure_at\"),\n\t\t\t\tgoqu.I(\"flights.expected_departure_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.actual_departure_at\"),\n\t\t\t\tgoqu.I(\"flights.actual_departure_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.arrival_airport\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_arrival_at\"),\n\t\t\t\tgoqu.I(\"flights.scheduled_arrival_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.expected_arrival_at\"),\n\t\t\t\tgoqu.I(\"flights.expected_arrival_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.actual_arrival_at\"),\n\t\t\t\tgoqu.I(\"flights.actual_arrival_time_tz\"),\n\t\t\t\tgoqu.I(\"flights.aircraft\"),\n\t\t\t\tgoqu.I(\"flights.codeshares\"),\n\t\t\t\tgoqu.L(\"(concat(flights.scheduled_departure_at, ' ', regexp_replace(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_departure_time_utc\"),\n\t\t\t\tgoqu.L(\"(concat(flights.scheduled_arrival_at, ' ', regexp_replace(scheduled_arrival_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\\\1:\\\\2\\\\3\\\\4:\\\\5')))::timestamptz\").As(\"scheduled_arrival_time_utc\"),\n\t\t\t\tgoqu.L(`COALESCE(\n\t\t\t\t\t(CASE WHEN actual_departure_at != '0001-01-01' THEN (CONCAT(actual_departure_at, ' ', REGEXP_REPLACE(actual_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz END),\n\t\t\t\t\t(CASE WHEN expected_departure_at != '0001-01-01' THEN (CONCAT(expected_departure_at, ' ', REGEXP_REPLACE(expected_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz END),\n\t\t\t\t\t(CASE WHEN scheduled_departure_at != '0001-01-01' THEN (CONCAT(scheduled_departure_at, ' ', REGEXP_REPLACE(scheduled_departure_time_tz, '([0-9]{2})([0-9]{2})([+-])([0-9]{2})([0-9]{2})', '\\1:\\2\\3\\4:\\5')))::timestamptz END)\n            \t) + interval '1' hour`,\n\t\t\t\t).As(\"expires_at\"),\n\t\t\t).\n\t\t\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\t\t\tWhere(\n\t\t\t\t\tgoqu.C(\"airline\").Table(\"flights\").Eq(in.Airline),\n\t\t\t\t\tgoqu.L(\"flights.scheduled_departure_at::date = ?\", in.Date),\n\t\t\t\t),\n\t\t).\n\t\tFrom(\"result\").\n\t\tWhere(goqu.I(\"result.expires_at\").Gt(goqu.L(\"now()\")), r.paginator.GetWhere(c)).\n\t\tOrder(r.paginator.GetOrderBy(c)...).\n\t\tLimit(c.Limit + 1).\n\t\tToSQL()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to prepare sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Prepared SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\n\trows, err := r.db.Query(ctx, stmt, bindings...)\n\tif err != nil {\n\t\tif e, ok := err.(*pgconn.PgError); ok && e.Code == \"42P01\" { // Missing Schema\n\t\t\tlog.Error(ctx, \"Schema not found.\", zap.Any(\"request\", in), zap.String(\"schema\", schema), zap.Error(err))\n\t\t\treturn &schedules.Page[*schedules.Flight]{Items: make([]*schedules.Flight, 0)}, nil\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"failed to query database\")\n\t}\n\n\tvar result []flightBoardPg\n\n\tfor rows.Next() {\n\t\tvar fpg flightBoardPg\n\t\tif err := r.scanFlightBoard(rows, &fpg); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot scan row\")\n\t\t}\n\t\tresult = append(result, fpg)\n\t}\n\n\thasNextPage := len(result) > int(in.Limit)\n\n\tvar nextCursor *string\n\tif hasNextPage {\n\t\tresult = result[:len(result)-1]\n\n\t\tc = cursor.NewForwardCursor(\n\t\t\tc.Limit,\n\t\t\tcursor.Field{Name: \"scheduled_departure_time_utc\", Value: result[len(result)-1].ScheduledDepartureTimeUtc, Direction: cursor.DirectionAsc},\n\t\t\tcursor.Field{Name: \"flight_id\", Value: result[len(result)-1].FlightID, Direction: cursor.DirectionAsc},\n\t\t)\n\n\t\tif next, err := r.paginator.Encode(c); err == nil {\n\t\t\tnextCursor = &next\n\t\t\tlog.Debug(ctx, \"Next page available.\", zap.Uint(\"limit\", in.Limit), zap.Int(\"count\", len(result)), zap.String(\"next\", next))\n\t\t} else {\n\t\t\tlog.Error(ctx, \"Cannot create next cursor.\", zap.Uint(\"limit\", in.Limit), zap.Int(\"count\", len(result)), zap.Error(err))\n\t\t}\n\t}\n\n\tvar flights []*schedules.Flight\n\n\tfor _, fpg := range result {\n\t\tf, err := fpg.toDomain()\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot adapt flight to domain model\")\n\t\t}\n\n\t\tflights = append(flights, f)\n\t}\n\n\tlog.Debug(ctx, \"Schedules.\", zap.Int(\"count\", len(flights)))\n\n\treturn &schedules.Page[*schedules.Flight]{\n\t\tItems: flights,\n\t\tNext:  nextCursor,\n\t}, nil\n}\n", "n_tokens": 1949, "primary_symbol": "GetAirlineFlightBoard", "primary_kind": "function", "primary_span": [1133, 1294], "def_symbols": ["GetAirlineFlightBoard"], "symbols": ["GetAirlineFlightBoard", "returns", "list", "paginated", "direct", "flights", "operated", "airline", "the", "specified", "date", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "schedules", "AirlineFlightBoardQuery", "Page", "Flight", "error", "var", "cursor", "Cursor", "err", "schema", "getSchemaFromTime", "Date", "goqu", "Dialect", "postgres", "nil", "paginator", "Decode", "return", "else", "NewForwardCursor", "Limit", "Field", "Name", "scheduled_departure_time_utc", "Direction", "DirectionAsc", "flight_id", "stmt", "bindings", "Select", "result", "flight_number", "sequence", "departure_airport", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "arrival_airport", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "aircraft", "codeshares", "scheduled_arrival_time_utc", "With", "concat", "regexp_replace", "timestamptz", "COALESCE", "CASE", "WHEN", "THEN", "CONCAT", "REGEXP_REPLACE", "END", "interval", "hour", "expires_at", "From", "Table", "Where", "Airline", "now", "GetWhere", "Order", "GetOrderBy", "ToSQL", "errors", "Wrap", "failed", "prepare", "sql", "statement", "log", "Debug", "Prepared", "SQL", "zap", "String", "Any", "rows", "Query", "pgconn", "PgError", "Code", "Missing", "Schema", "Error", "not", "found", "request", "Items", "make", "query", "database", "flightBoardPg", "for", "Next", "fpg", "scanFlightBoard", "cannot", "scan", "row", "append", "hasNextPage", "len", "int", "nextCursor", "string", "Value", "ScheduledDepartureTimeUtc", "FlightID", "next", "Encode", "page", "available", "Uint", "limit", "Int", "count", "Cannot", "create", "range", "toDomain", "adapt", "flight", "domain", "model", "Schedules"], "doc_head": "// GetAirlineFlightBoard returns a list of paginated direct flights operated by an airline at the specified date\nfunc (r *FlightsPostgresRepository) GetAirlineFlightBoard(ctx context.Context, in *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tvar (\n\t\tc   *cursor.Cursor\n\t\terr error\n\t)\n\tschema := r.getSchemaFromTime(in.Date)\n\tpg := goqu.Dialect(\"postgres\")\n\tif in.Cursor != nil {\n\t\tif c, err = r.paginator.Decode(*in.Cursor); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tc = cursor.NewForwardCursor(\n\t\t\tin.Limit,\n\t\t\tcursor.Field{Name: \"scheduled_departure_time_utc\", Direction: cursor.DirectionAsc},\n\t\t\tcursor.Field{Name: \"flight_id\", Direction: cursor.DirectionAsc},\n\t\t)\n\t}\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.I(\"result.id\"),\n\t\t\tgoqu.I(\"result.flight_id\"),\n\t\t\tgoqu.I(\"result.airline\"),\n\t\t\tgoqu.I(\"result.flight_number\"),\n\t\t\tgoqu.I(\"result.sequence\"),\n\t\t\tgoqu.I(\"result.departure_airport\"),\n\t\t\tgoqu.I(\"result.status\"),\n\t\t\tgoqu.I(\"result.departure_status\"),\n\t\t\tgoqu.I(\"result.arrival_status\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_at\"),\n\t\t\tgoqu.I(\"result.scheduled_departure_time_tz\"),\n\t\t\tgoqu.I(\"result.expected_departure_at\"),\n\t\t\tgoqu.I(\"result.expec"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 1295, "end_line": 1354, "text": "func (r *FlightsPostgresRepository) GetAirlineUniqueRoutes(ctx context.Context, airline string, departureDate time.Time) (*schedules.UniqueRoutes, error) {\n\tschema := r.getSchemaFromTime(departureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.L(\"public.akeys(routes.points)\"),\n\t\t).\n\t\tWith(\n\t\t\t\"routes\",\n\t\t\tpg.Select(\n\t\t\t\tgoqu.L(\"DISTINCT public.hstore(ARRAY[departure_airport, arrival_airport]::text[], ARRAY['true', 'true']::text[])\").As(\"points\"),\n\t\t\t).\n\t\t\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\t\t\tWhere(\n\t\t\t\t\tgoqu.And(\n\t\t\t\t\t\tgoqu.L(\"flights.scheduled_departure_at::date = ?\", departureDate),\n\t\t\t\t\t\tgoqu.I(\"flights.airline\").Eq(airline),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t).\n\t\tFrom(\"routes\").\n\t\tToSQL()\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"postgres repository: failed to prepare sql statement\")\n\t}\n\n\tlog.Debug(ctx, \"Prepared SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\n\trows, err := r.db.Query(ctx, stmt, bindings...)\n\tif err != nil {\n\t\tif e, ok := err.(*pgconn.PgError); ok && e.Code == \"42P01\" { // Missing Schema\n\t\t\tlog.Error(ctx, \"Schema not found.\", zap.Any(\"airline\", airline), zap.Time(\"departure_date\", departureDate), zap.String(\"schema\", schema), zap.Error(err))\n\t\t\treturn &schedules.UniqueRoutes{Airline: &schedules.Airline{Designator: airline}}, nil\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"postgres repository: failed to query database\")\n\t}\n\n\tresult := &schedules.UniqueRoutes{\n\t\tAirline: &schedules.Airline{Designator: airline},\n\t}\n\tfor rows.Next() {\n\t\tvar rpg routePg\n\t\tif err := r.scanRoute(rows, &rpg); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"postgres repository: cannot scan row\")\n\t\t}\n\n\t\tif rd, err := rpg.toDomain(); err == nil {\n\t\t\tresult.Routes = append(result.Routes, rd)\n\t\t} else {\n\t\t\tlog.Error(ctx, \"Cannot convert row to domain.\", zap.Any(\"pg_route\", rpg), zap.Any(\"airline\", airline), zap.Error(err))\n\t\t\tcontinue\n\t\t}\n\t}\n\n\treturn result, nil\n}\n", "n_tokens": 555, "primary_symbol": "GetAirlineUniqueRoutes", "primary_kind": "function", "primary_span": [1295, 1354], "def_symbols": ["GetAirlineUniqueRoutes"], "symbols": ["GetAirlineUniqueRoutes", "func", "FlightsPostgresRepository", "ctx", "context", "Context", "airline", "string", "departureDate", "time", "Time", "schedules", "UniqueRoutes", "error", "schema", "getSchemaFromTime", "goqu", "Dialect", "postgres", "stmt", "bindings", "err", "Select", "public", "akeys", "routes", "points", "With", "DISTINCT", "hstore", "ARRAY", "departure_airport", "arrival_airport", "text", "true", "From", "Table", "flights", "Where", "And", "scheduled_departure_at", "date", "ToSQL", "nil", "return", "errors", "Wrap", "repository", "failed", "prepare", "sql", "statement", "log", "Debug", "Prepared", "SQL", "zap", "String", "Any", "rows", "Query", "pgconn", "PgError", "Code", "Missing", "Schema", "Error", "not", "found", "departure_date", "Airline", "Designator", "query", "database", "result", "for", "Next", "var", "rpg", "routePg", "scanRoute", "cannot", "scan", "row", "toDomain", "Routes", "append", "else", "Cannot", "convert", "domain", "pg_route", "continue"], "doc_head": "func (r *FlightsPostgresRepository) GetAirlineUniqueRoutes(ctx context.Context, airline string, departureDate time.Time) (*schedules.UniqueRoutes, error) {\n\tschema := r.getSchemaFromTime(departureDate)\n\tpg := goqu.Dialect(\"postgres\")\n\tstmt, bindings, err := pg.\n\t\tSelect(\n\t\t\tgoqu.L(\"public.akeys(routes.points)\"),\n\t\t).\n\t\tWith(\n\t\t\t\"routes\",\n\t\t\tpg.Select(\n\t\t\t\tgoqu.L(\"DISTINCT public.hstore(ARRAY[departure_airport, arrival_airport]::text[], ARRAY['true', 'true']::text[])\").As(\"points\"),\n\t\t\t).\n\t\t\t\tFrom(goqu.S(schema).Table(\"flights\")).\n\t\t\t\tWhere(\n\t\t\t\t\tgoqu.And(\n\t\t\t\t\t\tgoqu.L(\"flights.scheduled_departure_at::date = ?\", departureDate),\n\t\t\t\t\t\tgoqu.I(\"flights.airline\").Eq(airline),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t).\n\t\tFrom(\"routes\").\n\t\tToSQL()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"postgres repository: failed to prepare sql statement\")\n\t}\n\tlog.Debug(ctx, \"Prepared SQL statement.\", zap.String(\"statement\", stmt), zap.Any(\"bindings\", bindings))\n\trows, err := r.db.Query(ctx, stmt, bindings...)\n\tif err != nil {\n\t\tif e, ok := err.(*pgconn.PgError); ok && e.Code == \"42P01\" { // Missing Schema\n\t\t\tlog.Error(ctx, \"Schema not found.\", zap.Any(\"airline\", airline), zap.Time(\"departure_date\", departureDate), za"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 1355, "end_line": 1358, "text": "type scanner interface {\n\tScan(dest ...interface{}) error\n}\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "", "primary_span": [1355, 1358], "def_symbols": [], "symbols": ["type", "scanner", "interface", "Scan", "dest", "error"], "doc_head": "type scanner interface {\n\tScan(dest ...interface{}) error\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 1359, "end_line": 1391, "text": "func (r *FlightsPostgresRepository) scan(rows scanner, f *flightPg) error {\n\treturn rows.Scan(\n\t\t&f.ConnectingFlightID,\n\t\t&f.ID,\n\t\t&f.FlightID,\n\t\t&f.MainCarrierDesignator,\n\t\t&f.FlightNumber,\n\t\t&f.Sequence,\n\t\t&f.DepartureAirportDesignator,\n\t\t&f.Status,\n\t\t&f.DepartureStatus,\n\t\t&f.ArrivalStatus,\n\t\t&f.ScheduledDepartureDate,\n\t\t&f.ScheduledDepartureTimeTz,\n\t\t&f.ExpectedDepartureDate,\n\t\t&f.ExpectedDepartureTimeTz,\n\t\t&f.ActualDepartureDate,\n\t\t&f.ActualDepartureTimeTz,\n\t\t&f.ArrivalAirportDesignator,\n\t\t&f.ScheduledArrivalDate,\n\t\t&f.ScheduledArrivalTimeTz,\n\t\t&f.ExpectedArrivalDate,\n\t\t&f.ExpectedArrivalTimeTz,\n\t\t&f.ActualArrivalDate,\n\t\t&f.ActualArrivalTimeTz,\n\t\t&f.AircraftID,\n\t\t&f.Codeshares,\n\t\t&f.ConnectedScheduledDepartureTimeUtc,\n\t\t&f.ScheduledDepartureTimeUtc,\n\t\t&f.RowNumber,\n\t)\n}\n", "n_tokens": 299, "primary_symbol": "scan", "primary_kind": "function", "primary_span": [1359, 1391], "def_symbols": ["scan"], "symbols": ["scan", "func", "FlightsPostgresRepository", "rows", "scanner", "flightPg", "error", "return", "Scan", "ConnectingFlightID", "FlightID", "MainCarrierDesignator", "FlightNumber", "Sequence", "DepartureAirportDesignator", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureDate", "ScheduledDepartureTimeTz", "ExpectedDepartureDate", "ExpectedDepartureTimeTz", "ActualDepartureDate", "ActualDepartureTimeTz", "ArrivalAirportDesignator", "ScheduledArrivalDate", "ScheduledArrivalTimeTz", "ExpectedArrivalDate", "ExpectedArrivalTimeTz", "ActualArrivalDate", "ActualArrivalTimeTz", "AircraftID", "Codeshares", "ConnectedScheduledDepartureTimeUtc", "ScheduledDepartureTimeUtc", "RowNumber"], "doc_head": "func (r *FlightsPostgresRepository) scan(rows scanner, f *flightPg) error {\n\treturn rows.Scan(\n\t\t&f.ConnectingFlightID,\n\t\t&f.ID,\n\t\t&f.FlightID,\n\t\t&f.MainCarrierDesignator,\n\t\t&f.FlightNumber,\n\t\t&f.Sequence,\n\t\t&f.DepartureAirportDesignator,\n\t\t&f.Status,\n\t\t&f.DepartureStatus,\n\t\t&f.ArrivalStatus,\n\t\t&f.ScheduledDepartureDate,\n\t\t&f.ScheduledDepartureTimeTz,\n\t\t&f.ExpectedDepartureDate,\n\t\t&f.ExpectedDepartureTimeTz,\n\t\t&f.ActualDepartureDate,\n\t\t&f.ActualDepartureTimeTz,\n\t\t&f.ArrivalAirportDesignator,\n\t\t&f.ScheduledArrivalDate,\n\t\t&f.ScheduledArrivalTimeTz,\n\t\t&f.ExpectedArrivalDate,\n\t\t&f.ExpectedArrivalTimeTz,\n\t\t&f.ActualArrivalDate,\n\t\t&f.ActualArrivalTimeTz,\n\t\t&f.AircraftID,\n\t\t&f.Codeshares,\n\t\t&f.ConnectedScheduledDepartureTimeUtc,\n\t\t&f.ScheduledDepartureTimeUtc,\n\t\t&f.RowNumber,\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 1392, "end_line": 1422, "text": "func (r *FlightsPostgresRepository) scanFlightBoard(rows scanner, f *flightBoardPg) error {\n\treturn rows.Scan(\n\t\t&f.ID,\n\t\t&f.FlightID,\n\t\t&f.MainCarrierDesignator,\n\t\t&f.FlightNumber,\n\t\t&f.Sequence,\n\t\t&f.DepartureAirportDesignator,\n\t\t&f.Status,\n\t\t&f.DepartureStatus,\n\t\t&f.ArrivalStatus,\n\t\t&f.ScheduledDepartureDate,\n\t\t&f.ScheduledDepartureTimeTz,\n\t\t&f.ExpectedDepartureDate,\n\t\t&f.ExpectedDepartureTimeTz,\n\t\t&f.ActualDepartureDate,\n\t\t&f.ActualDepartureTimeTz,\n\t\t&f.ArrivalAirportDesignator,\n\t\t&f.ScheduledArrivalDate,\n\t\t&f.ScheduledArrivalTimeTz,\n\t\t&f.ExpectedArrivalDate,\n\t\t&f.ExpectedArrivalTimeTz,\n\t\t&f.ActualArrivalDate,\n\t\t&f.ActualArrivalTimeTz,\n\t\t&f.AircraftID,\n\t\t&f.Codeshares,\n\t\t&f.ScheduledDepartureTimeUtc,\n\t\t&f.ScheduledArrivalTimeUtc,\n\t)\n}\n", "n_tokens": 285, "primary_symbol": "scanFlightBoard", "primary_kind": "function", "primary_span": [1392, 1422], "def_symbols": ["scanFlightBoard"], "symbols": ["scanFlightBoard", "func", "FlightsPostgresRepository", "rows", "scanner", "flightBoardPg", "error", "return", "Scan", "FlightID", "MainCarrierDesignator", "FlightNumber", "Sequence", "DepartureAirportDesignator", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureDate", "ScheduledDepartureTimeTz", "ExpectedDepartureDate", "ExpectedDepartureTimeTz", "ActualDepartureDate", "ActualDepartureTimeTz", "ArrivalAirportDesignator", "ScheduledArrivalDate", "ScheduledArrivalTimeTz", "ExpectedArrivalDate", "ExpectedArrivalTimeTz", "ActualArrivalDate", "ActualArrivalTimeTz", "AircraftID", "Codeshares", "ScheduledDepartureTimeUtc", "ScheduledArrivalTimeUtc"], "doc_head": "func (r *FlightsPostgresRepository) scanFlightBoard(rows scanner, f *flightBoardPg) error {\n\treturn rows.Scan(\n\t\t&f.ID,\n\t\t&f.FlightID,\n\t\t&f.MainCarrierDesignator,\n\t\t&f.FlightNumber,\n\t\t&f.Sequence,\n\t\t&f.DepartureAirportDesignator,\n\t\t&f.Status,\n\t\t&f.DepartureStatus,\n\t\t&f.ArrivalStatus,\n\t\t&f.ScheduledDepartureDate,\n\t\t&f.ScheduledDepartureTimeTz,\n\t\t&f.ExpectedDepartureDate,\n\t\t&f.ExpectedDepartureTimeTz,\n\t\t&f.ActualDepartureDate,\n\t\t&f.ActualDepartureTimeTz,\n\t\t&f.ArrivalAirportDesignator,\n\t\t&f.ScheduledArrivalDate,\n\t\t&f.ScheduledArrivalTimeTz,\n\t\t&f.ExpectedArrivalDate,\n\t\t&f.ExpectedArrivalTimeTz,\n\t\t&f.ActualArrivalDate,\n\t\t&f.ActualArrivalTimeTz,\n\t\t&f.AircraftID,\n\t\t&f.Codeshares,\n\t\t&f.ScheduledDepartureTimeUtc,\n\t\t&f.ScheduledArrivalTimeUtc,\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 1423, "end_line": 1436, "text": "func (r *FlightsPostgresRepository) scanRoute(rows scanner, fr *routePg) error {\n\treturn rows.Scan(\n\t\t&fr.Points,\n\t)\n}\n\nfunc fromDateAndTimeWithTZ(date time.Time, timeTZ string) (time.Time, error) {\n\treturn time.Parse(\"2006-01-02 1504-0700\", date.Format(\"2006-01-02\")+\" \"+timeTZ)\n}\n\nfunc (r *FlightsPostgresRepository) getSchemaFromTime(d time.Time) string {\n\treturn fmt.Sprintf(\"period_%s\", d.Format(\"2006_1\"))\n}\n", "n_tokens": 126, "primary_symbol": "scanRoute", "primary_kind": "function", "primary_span": [1423, 1436], "def_symbols": ["scanRoute", "fromDateAndTimeWithTZ", "getSchemaFromTime"], "symbols": ["scanRoute", "fromDateAndTimeWithTZ", "getSchemaFromTime", "func", "FlightsPostgresRepository", "rows", "scanner", "routePg", "error", "return", "Scan", "Points", "date", "time", "Time", "timeTZ", "string", "Parse", "Format", "fmt", "Sprintf", "period_"], "doc_head": "func (r *FlightsPostgresRepository) scanRoute(rows scanner, fr *routePg) error {\n\treturn rows.Scan(\n\t\t&fr.Points,\n\t)\n}\nfunc fromDateAndTimeWithTZ(date time.Time, timeTZ string) (time.Time, error) {\n\treturn time.Parse(\"2006-01-02 1504-0700\", date.Format(\"2006-01-02\")+\" \"+timeTZ)\n}\nfunc (r *FlightsPostgresRepository) getSchemaFromTime(d time.Time) string {\n\treturn fmt.Sprintf(\"period_%s\", d.Format(\"2006_1\"))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/schedules_postgres_repository.go", "rel_path": "internal/schedules/adapter/schedules_postgres_repository.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 1437, "end_line": 1446, "text": "func (r *FlightsPostgresRepository) getSchemaFromFlightID(id string) string {\n\trx := regexp.MustCompile(\"^([0-9]{4})([0-9]{2})\")\n\tif !rx.MatchString(id) {\n\t\treturn \"\"\n\t}\n\n\tgroups := rx.FindAllStringSubmatch(id, -1)\n\treturn fmt.Sprintf(\"period_%s_%s\", groups[0][1], strings.TrimLeft(groups[0][2], \"0\"))\n}\n", "n_tokens": 97, "primary_symbol": "getSchemaFromFlightID", "primary_kind": "function", "primary_span": [1437, 1446], "def_symbols": ["getSchemaFromFlightID"], "symbols": ["getSchemaFromFlightID", "func", "FlightsPostgresRepository", "string", "regexp", "MustCompile", "MatchString", "return", "groups", "FindAllStringSubmatch", "fmt", "Sprintf", "period_", "strings", "TrimLeft"], "doc_head": "func (r *FlightsPostgresRepository) getSchemaFromFlightID(id string) string {\n\trx := regexp.MustCompile(\"^([0-9]{4})([0-9]{2})\")\n\tif !rx.MatchString(id) {\n\t\treturn \"\"\n\t}\n\tgroups := rx.FindAllStringSubmatch(id, -1)\n\treturn fmt.Sprintf(\"period_%s_%s\", groups[0][1], strings.TrimLeft(groups[0][2], \"0\"))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "rel_path": "internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 36, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: schedules_postgres_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=schedules_postgres_repository.go -destination=mocks/schedules_postgres_repository_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\treflect \"reflect\"\n\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mockcipher is a mock of cipher interface.\ntype Mockcipher struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcipherMockRecorder\n\tisgomock struct{}\n}\n\n// MockcipherMockRecorder is the mock recorder for Mockcipher.\ntype MockcipherMockRecorder struct {\n\tmock *Mockcipher\n}\n\n// NewMockcipher creates a new mock instance.\nfunc NewMockcipher(ctrl *gomock.Controller) *Mockcipher {\n\tmock := &Mockcipher{ctrl: ctrl}\n\tmock.recorder = &MockcipherMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 205, "primary_symbol": "NewMockcipher", "primary_kind": "function", "primary_span": [31, 36], "def_symbols": ["NewMockcipher"], "symbols": ["NewMockcipher", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "schedules_postgres_repository", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "schedules_postgres_repository_mocks", "package", "Package", "GoMock", "import", "reflect", "gomock", "uber", "org", "mock", "Mockcipher", "cipher", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockcipherMockRecorder", "isgomock", "the", "for", "creates", "new", "instance", "func", "return"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: schedules_postgres_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=schedules_postgres_repository.go -destination=mocks/schedules_postgres_repository_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\treflect \"reflect\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mockcipher is a mock of cipher interface.\ntype Mockcipher struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcipherMockRecorder\n\tisgomock struct{}\n}\n// MockcipherMockRecorder is the mock recorder for Mockcipher.\ntype MockcipherMockRecorder struct {\n\tmock *Mockcipher\n}\n// NewMockcipher creates a new mock instance.\nfunc NewMockcipher(ctrl *gomock.Controller) *Mockcipher {\n\tmock := &Mockcipher{ctrl: ctrl}\n\tmock.recorder = &MockcipherMockRecorder{mock}\n\treturn mock\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "rel_path": "internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 37, "end_line": 56, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcipher) EXPECT() *MockcipherMockRecorder {\n\treturn m.recorder\n}\n\n// Decrypt mocks base method.\nfunc (m *Mockcipher) Decrypt(input []byte) ([]byte, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Decrypt\", input)\n\tret0, _ := ret[0].([]byte)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Decrypt indicates an expected call of Decrypt.\nfunc (mr *MockcipherMockRecorder) Decrypt(input any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Decrypt\", reflect.TypeOf((*Mockcipher)(nil).Decrypt), input)\n}\n", "n_tokens": 171, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [38, 56], "def_symbols": ["EXPECT", "Decrypt"], "symbols": ["EXPECT", "Decrypt", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "Mockcipher", "MockcipherMockRecorder", "return", "recorder", "mocks", "base", "method", "input", "byte", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcipher) EXPECT() *MockcipherMockRecorder {\n\treturn m.recorder\n}\n// Decrypt mocks base method.\nfunc (m *Mockcipher) Decrypt(input []byte) ([]byte, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Decrypt\", input)\n\tret0, _ := ret[0].([]byte)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Decrypt indicates an expected call of Decrypt.\nfunc (mr *MockcipherMockRecorder) Decrypt(input any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Decrypt\", reflect.TypeOf((*Mockcipher)(nil).Decrypt), input)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "rel_path": "internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 57, "end_line": 83, "text": "// Encrypt mocks base method.\nfunc (m *Mockcipher) Encrypt(input []byte) ([]byte, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Encrypt\", input)\n\tret0, _ := ret[0].([]byte)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Encrypt indicates an expected call of Encrypt.\nfunc (mr *MockcipherMockRecorder) Encrypt(input any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Encrypt\", reflect.TypeOf((*Mockcipher)(nil).Encrypt), input)\n}\n\n// Mockscanner is a mock of scanner interface.\ntype Mockscanner struct {\n\tctrl     *gomock.Controller\n\trecorder *MockscannerMockRecorder\n\tisgomock struct{}\n}\n\n// MockscannerMockRecorder is the mock recorder for Mockscanner.\ntype MockscannerMockRecorder struct {\n\tmock *Mockscanner\n}\n", "n_tokens": 198, "primary_symbol": "Encrypt", "primary_kind": "function", "primary_span": [58, 83], "def_symbols": ["Encrypt"], "symbols": ["Encrypt", "mocks", "base", "method", "func", "Mockcipher", "input", "byte", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockcipherMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "Mockscanner", "scanner", "interface", "type", "struct", "Controller", "recorder", "MockscannerMockRecorder", "isgomock", "the", "for"], "doc_head": "// Encrypt mocks base method.\nfunc (m *Mockcipher) Encrypt(input []byte) ([]byte, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Encrypt\", input)\n\tret0, _ := ret[0].([]byte)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Encrypt indicates an expected call of Encrypt.\nfunc (mr *MockcipherMockRecorder) Encrypt(input any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Encrypt\", reflect.TypeOf((*Mockcipher)(nil).Encrypt), input)\n}\n// Mockscanner is a mock of scanner interface.\ntype Mockscanner struct {\n\tctrl     *gomock.Controller\n\trecorder *MockscannerMockRecorder\n\tisgomock struct{}\n}\n// MockscannerMockRecorder is the mock recorder for Mockscanner.\ntype MockscannerMockRecorder struct {\n\tmock *Mockscanner\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "rel_path": "internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 84, "end_line": 107, "text": "// NewMockscanner creates a new mock instance.\nfunc NewMockscanner(ctrl *gomock.Controller) *Mockscanner {\n\tmock := &Mockscanner{ctrl: ctrl}\n\tmock.recorder = &MockscannerMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockscanner) EXPECT() *MockscannerMockRecorder {\n\treturn m.recorder\n}\n\n// Scan mocks base method.\nfunc (m *Mockscanner) Scan(dest ...any) error {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{}\n\tfor _, a := range dest {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"Scan\", varargs...)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 165, "primary_symbol": "NewMockscanner", "primary_kind": "function", "primary_span": [85, 107], "def_symbols": ["NewMockscanner", "EXPECT", "Scan"], "symbols": ["NewMockscanner", "EXPECT", "Scan", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mockscanner", "recorder", "MockscannerMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "dest", "any", "error", "Helper", "varargs", "for", "range", "append", "ret", "Call", "ret0"], "doc_head": "// NewMockscanner creates a new mock instance.\nfunc NewMockscanner(ctrl *gomock.Controller) *Mockscanner {\n\tmock := &Mockscanner{ctrl: ctrl}\n\tmock.recorder = &MockscannerMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockscanner) EXPECT() *MockscannerMockRecorder {\n\treturn m.recorder\n}\n// Scan mocks base method.\nfunc (m *Mockscanner) Scan(dest ...any) error {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{}\n\tfor _, a := range dest {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"Scan\", varargs...)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "rel_path": "internal/schedules/adapter/mocks/schedules_postgres_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 108, "end_line": 113, "text": "// Scan indicates an expected call of Scan.\nfunc (mr *MockscannerMockRecorder) Scan(dest ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Scan\", reflect.TypeOf((*Mockscanner)(nil).Scan), dest...)\n}\n", "n_tokens": 64, "primary_symbol": "Scan", "primary_kind": "function", "primary_span": [109, 113], "def_symbols": ["Scan"], "symbols": ["Scan", "indicates", "expected", "call", "func", "MockscannerMockRecorder", "dest", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockscanner", "nil"], "doc_head": "// Scan indicates an expected call of Scan.\nfunc (mr *MockscannerMockRecorder) Scan(dest ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Scan\", reflect.TypeOf((*Mockscanner)(nil).Scan), dest...)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 25, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/go-playground/validator/v10\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n)\n\n//go:generate mockgen -source=server.go -destination=mocks/server.go -package=mocks\ntype svc interface {\n\tSearch(context.Context, *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error)\n\tGet(context.Context, string) (*schedules.Flight, error)\n\tGetBatch(context.Context, []string) ([]*schedules.Flight, error)\n}\n\ntype server struct {\n\tpbv0.UnimplementedSchedulesServiceServer\n\tsvc       svc\n\tvalidator *validator.Validate\n}\n", "n_tokens": 188, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 25], "def_symbols": [], "symbols": ["package", "import", "context", "time", "github", "com", "playground", "validator", "v10", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "pbv0", "generate", "mockgen", "source", "server", "destination", "mocks", "type", "svc", "interface", "Search", "Context", "FlightSearchQuery", "Page", "Schedule", "error", "Get", "string", "Flight", "GetBatch", "struct", "UnimplementedSchedulesServiceServer", "Validate"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"time\"\n\t\"github.com/go-playground/validator/v10\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n)\n//go:generate mockgen -source=server.go -destination=mocks/server.go -package=mocks\ntype svc interface {\n\tSearch(context.Context, *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error)\n\tGet(context.Context, string) (*schedules.Flight, error)\n\tGetBatch(context.Context, []string) ([]*schedules.Flight, error)\n}\ntype server struct {\n\tpbv0.UnimplementedSchedulesServiceServer\n\tsvc       svc\n\tvalidator *validator.Validate\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 26, "end_line": 45, "text": "func NewServer(svc svc) *server {\n\tv := validator.New()\n\ti18n.Register(v)\n\n\treturn &server{\n\t\tsvc:       svc,\n\t\tvalidator: v,\n\t}\n}\n\nfunc (s *server) toScheduleResource(schedule *schedules.Schedule) *pbv0.Schedule {\n\treturn &pbv0.Schedule{\n\t\tDepartureAirport: s.toAirportResource(schedule.DepartureAirport),\n\t\tArrivalAirport:   s.toAirportResource(schedule.ArrivalAirport),\n\t\tAirline:          s.toAirlineResource(schedule.MainCarrier),\n\t\tFlightNumber:     int32(schedule.FlightNumber),\n\t\tFlights:          s.toFlightsResources(schedule.Flights),\n\t}\n}\n", "n_tokens": 148, "primary_symbol": "NewServer", "primary_kind": "function", "primary_span": [26, 45], "def_symbols": ["NewServer", "toScheduleResource"], "symbols": ["NewServer", "toScheduleResource", "func", "svc", "server", "validator", "New", "i18n", "Register", "return", "schedule", "schedules", "Schedule", "pbv0", "DepartureAirport", "toAirportResource", "ArrivalAirport", "Airline", "toAirlineResource", "MainCarrier", "FlightNumber", "int32", "Flights", "toFlightsResources"], "doc_head": "func NewServer(svc svc) *server {\n\tv := validator.New()\n\ti18n.Register(v)\n\treturn &server{\n\t\tsvc:       svc,\n\t\tvalidator: v,\n\t}\n}\nfunc (s *server) toScheduleResource(schedule *schedules.Schedule) *pbv0.Schedule {\n\treturn &pbv0.Schedule{\n\t\tDepartureAirport: s.toAirportResource(schedule.DepartureAirport),\n\t\tArrivalAirport:   s.toAirportResource(schedule.ArrivalAirport),\n\t\tAirline:          s.toAirlineResource(schedule.MainCarrier),\n\t\tFlightNumber:     int32(schedule.FlightNumber),\n\t\tFlights:          s.toFlightsResources(schedule.Flights),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 46, "end_line": 86, "text": "func (s *server) toFlightResources(f *schedules.Flight) *pbv0.Flight {\n\tif f == nil {\n\t\treturn nil\n\t}\n\n\tvar (\n\t\tactualDepartureAt *string\n\t\tactualArrivalAt   *string\n\t)\n\n\tif !f.ActualDepartureAt.IsZero() {\n\t\tad := f.ActualDepartureAt.Format(time.RFC3339)\n\t\tactualDepartureAt = &ad\n\t}\n\n\tif !f.ActualArrivalAt.IsZero() {\n\t\taa := f.ActualArrivalAt.Format(time.RFC3339)\n\t\tactualArrivalAt = &aa\n\t}\n\n\treturn &pbv0.Flight{\n\t\tId:                   f.FlightID,\n\t\tAirline:              s.toAirlineResource(f.Airline),\n\t\tFlightNumber:         int32(f.FlightNumber),\n\t\tSequence:             int32(f.Sequence),\n\t\tStatus:               string(f.Status),\n\t\tDepartureStatus:      string(f.DepartureStatus),\n\t\tArrivalStatus:        string(f.ArrivalStatus),\n\t\tDepartureAirport:     s.toAirportResource(f.DepartureAirport),\n\t\tArrivalAirport:       s.toAirportResource(f.ArrivalAirport),\n\t\tAircraft:             s.toAircraftResource(f.Aircraft),\n\t\tScheduledDepartureAt: f.ScheduledDepartureAt.Format(time.RFC3339),\n\t\tExpectedDepartureAt:  f.ExpectedDepartureAt.Format(time.RFC3339),\n\t\tActualDepartureAt:    actualDepartureAt,\n\t\tScheduledArrivalAt:   f.ScheduledArrivalAt.Format(time.RFC3339),\n\t\tExpectedArrivalAt:    f.ExpectedArrivalAt.Format(time.RFC3339),\n\t\tActualArrivalAt:      actualArrivalAt,\n\t\tCodeshare:            s.toCodeshareResource(f.Codeshare),\n\t}\n}\n", "n_tokens": 402, "primary_symbol": "toFlightResources", "primary_kind": "function", "primary_span": [46, 86], "def_symbols": ["toFlightResources"], "symbols": ["toFlightResources", "func", "server", "schedules", "Flight", "pbv0", "nil", "return", "var", "actualDepartureAt", "string", "actualArrivalAt", "ActualDepartureAt", "IsZero", "Format", "time", "RFC3339", "ActualArrivalAt", "FlightID", "Airline", "toAirlineResource", "FlightNumber", "int32", "Sequence", "Status", "DepartureStatus", "ArrivalStatus", "DepartureAirport", "toAirportResource", "ArrivalAirport", "Aircraft", "toAircraftResource", "ScheduledDepartureAt", "ExpectedDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "Codeshare", "toCodeshareResource"], "doc_head": "func (s *server) toFlightResources(f *schedules.Flight) *pbv0.Flight {\n\tif f == nil {\n\t\treturn nil\n\t}\n\tvar (\n\t\tactualDepartureAt *string\n\t\tactualArrivalAt   *string\n\t)\n\tif !f.ActualDepartureAt.IsZero() {\n\t\tad := f.ActualDepartureAt.Format(time.RFC3339)\n\t\tactualDepartureAt = &ad\n\t}\n\tif !f.ActualArrivalAt.IsZero() {\n\t\taa := f.ActualArrivalAt.Format(time.RFC3339)\n\t\tactualArrivalAt = &aa\n\t}\n\treturn &pbv0.Flight{\n\t\tId:                   f.FlightID,\n\t\tAirline:              s.toAirlineResource(f.Airline),\n\t\tFlightNumber:         int32(f.FlightNumber),\n\t\tSequence:             int32(f.Sequence),\n\t\tStatus:               string(f.Status),\n\t\tDepartureStatus:      string(f.DepartureStatus),\n\t\tArrivalStatus:        string(f.ArrivalStatus),\n\t\tDepartureAirport:     s.toAirportResource(f.DepartureAirport),\n\t\tArrivalAirport:       s.toAirportResource(f.ArrivalAirport),\n\t\tAircraft:             s.toAircraftResource(f.Aircraft),\n\t\tScheduledDepartureAt: f.ScheduledDepartureAt.Format(time.RFC3339),\n\t\tExpectedDepartureAt:  f.ExpectedDepartureAt.Format(time.RFC3339),\n\t\tActualDepartureAt:    actualDepartureAt,\n\t\tScheduledArrivalAt:   f.ScheduledArrivalAt.Format(time.RFC3339),\n\t\tExpectedArrivalAt:    f.Expec"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 87, "end_line": 99, "text": "func (s *server) toFlightsResources(flights []*schedules.Flight) []*pbv0.Flight {\n\tif flights == nil {\n\t\treturn nil\n\t}\n\n\tfs := make([]*pbv0.Flight, 0, len(flights))\n\tfor _, f := range flights {\n\t\tfs = append(fs, s.toFlightResources(f))\n\t}\n\n\treturn fs\n}\n", "n_tokens": 78, "primary_symbol": "toFlightsResources", "primary_kind": "function", "primary_span": [87, 99], "def_symbols": ["toFlightsResources"], "symbols": ["toFlightsResources", "func", "server", "flights", "schedules", "Flight", "pbv0", "nil", "return", "make", "len", "for", "range", "append", "toFlightResources"], "doc_head": "func (s *server) toFlightsResources(flights []*schedules.Flight) []*pbv0.Flight {\n\tif flights == nil {\n\t\treturn nil\n\t}\n\tfs := make([]*pbv0.Flight, 0, len(flights))\n\tfor _, f := range flights {\n\t\tfs = append(fs, s.toFlightResources(f))\n\t}\n\treturn fs\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 100, "end_line": 136, "text": "func (s *server) toAirlineResource(airline *schedules.Airline) *pbv0.Airline {\n\tif airline == nil {\n\t\treturn nil\n\t}\n\n\ta := &pbv0.Airline{\n\t\tId:                         airline.ID,\n\t\tDesignator:                 airline.Designator,\n\t\tIata:                       airline.IATA,\n\t\tIcao:                       airline.ICAO,\n\t\tClassification:             int64(airline.Classification),\n\t\tName:                       airline.Name,\n\t\tDescription:                airline.Description,\n\t\tWebsiteUrl:                 airline.WebsiteURL,\n\t\tWikipediaUrl:               airline.WikipediaURL,\n\t\tFacebookUrl:                airline.FacebookURL,\n\t\tTwitterUrl:                 airline.TwitterURL,\n\t\tReservationTelephoneNumber: airline.ReservationTelephoneNumber,\n\t}\n\n\tif len(airline.Images) == 0 {\n\t\treturn a\n\t}\n\n\tif rect, found := airline.Images[\"rect\"]; found {\n\t\ta.RectImageName = &rect\n\t}\n\tif square, found := airline.Images[\"square\"]; found {\n\t\ta.SquareImageName = &square\n\t}\n\tif tail, found := airline.Images[\"tail\"]; found {\n\t\ta.TailImageName = &tail\n\t}\n\n\treturn a\n}\n", "n_tokens": 261, "primary_symbol": "toAirlineResource", "primary_kind": "function", "primary_span": [100, 136], "def_symbols": ["toAirlineResource"], "symbols": ["toAirlineResource", "func", "server", "airline", "schedules", "Airline", "pbv0", "nil", "return", "Designator", "Iata", "IATA", "Icao", "ICAO", "Classification", "int64", "Name", "Description", "WebsiteUrl", "WebsiteURL", "WikipediaUrl", "WikipediaURL", "FacebookUrl", "FacebookURL", "TwitterUrl", "TwitterURL", "ReservationTelephoneNumber", "len", "Images", "rect", "found", "RectImageName", "square", "SquareImageName", "tail", "TailImageName"], "doc_head": "func (s *server) toAirlineResource(airline *schedules.Airline) *pbv0.Airline {\n\tif airline == nil {\n\t\treturn nil\n\t}\n\ta := &pbv0.Airline{\n\t\tId:                         airline.ID,\n\t\tDesignator:                 airline.Designator,\n\t\tIata:                       airline.IATA,\n\t\tIcao:                       airline.ICAO,\n\t\tClassification:             int64(airline.Classification),\n\t\tName:                       airline.Name,\n\t\tDescription:                airline.Description,\n\t\tWebsiteUrl:                 airline.WebsiteURL,\n\t\tWikipediaUrl:               airline.WikipediaURL,\n\t\tFacebookUrl:                airline.FacebookURL,\n\t\tTwitterUrl:                 airline.TwitterURL,\n\t\tReservationTelephoneNumber: airline.ReservationTelephoneNumber,\n\t}\n\tif len(airline.Images) == 0 {\n\t\treturn a\n\t}\n\tif rect, found := airline.Images[\"rect\"]; found {\n\t\ta.RectImageName = &rect\n\t}\n\tif square, found := airline.Images[\"square\"]; found {\n\t\ta.SquareImageName = &square\n\t}\n\tif tail, found := airline.Images[\"tail\"]; found {\n\t\ta.TailImageName = &tail\n\t}\n\treturn a\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 137, "end_line": 165, "text": "func (s *server) toAirportResource(airport *schedules.Airport) *pbv0.Airport {\n\tif airport == nil {\n\t\treturn nil\n\t}\n\n\ta := &pbv0.Airport{\n\t\tId:             airport.ID,\n\t\tDesignator:     airport.Designator,\n\t\tIata:           airport.IATA,\n\t\tIcao:           airport.ICAO,\n\t\tFaa:            airport.FAA,\n\t\tClassification: int64(airport.Classification),\n\t\tCity:           s.toCityResource(airport.City),\n\t\tName:           airport.Name,\n\t\tShortName:      airport.ShortName,\n\t\tDescription:    airport.Description,\n\t\tLatitude:       float32(airport.Latitude),\n\t\tLongitude:      float32(airport.Longitude),\n\t\tElevation:      int32(airport.Elevation),\n\t\tNumRunways:     int32(airport.NumberOfRunways),\n\t\tWebsiteUrl:     airport.WebsiteURL,\n\t\tWikipediaUrl:   airport.WikipediaURL,\n\t\tFacebookUrl:    airport.FacebookURL,\n\t\tTwitterUrl:     airport.TwitterURL,\n\t}\n\n\treturn a\n}\n", "n_tokens": 241, "primary_symbol": "toAirportResource", "primary_kind": "function", "primary_span": [137, 165], "def_symbols": ["toAirportResource"], "symbols": ["toAirportResource", "func", "server", "airport", "schedules", "Airport", "pbv0", "nil", "return", "Designator", "Iata", "IATA", "Icao", "ICAO", "Faa", "FAA", "Classification", "int64", "City", "toCityResource", "Name", "ShortName", "Description", "Latitude", "float32", "Longitude", "Elevation", "int32", "NumRunways", "NumberOfRunways", "WebsiteUrl", "WebsiteURL", "WikipediaUrl", "WikipediaURL", "FacebookUrl", "FacebookURL", "TwitterUrl", "TwitterURL"], "doc_head": "func (s *server) toAirportResource(airport *schedules.Airport) *pbv0.Airport {\n\tif airport == nil {\n\t\treturn nil\n\t}\n\ta := &pbv0.Airport{\n\t\tId:             airport.ID,\n\t\tDesignator:     airport.Designator,\n\t\tIata:           airport.IATA,\n\t\tIcao:           airport.ICAO,\n\t\tFaa:            airport.FAA,\n\t\tClassification: int64(airport.Classification),\n\t\tCity:           s.toCityResource(airport.City),\n\t\tName:           airport.Name,\n\t\tShortName:      airport.ShortName,\n\t\tDescription:    airport.Description,\n\t\tLatitude:       float32(airport.Latitude),\n\t\tLongitude:      float32(airport.Longitude),\n\t\tElevation:      int32(airport.Elevation),\n\t\tNumRunways:     int32(airport.NumberOfRunways),\n\t\tWebsiteUrl:     airport.WebsiteURL,\n\t\tWikipediaUrl:   airport.WikipediaURL,\n\t\tFacebookUrl:    airport.FacebookURL,\n\t\tTwitterUrl:     airport.TwitterURL,\n\t}\n\treturn a\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 166, "end_line": 190, "text": "func (s *server) toCityResource(city *schedules.City) *pbv0.City {\n\tif city == nil {\n\t\treturn nil\n\t}\n\n\treturn &pbv0.City{\n\t\tId:       int64(city.ID),\n\t\tName:     city.Name,\n\t\tTimezone: city.Timezone,\n\t\tState:    city.State,\n\t\tCountry:  s.toCountryResource(city.Country),\n\t}\n}\n\nfunc (s *server) toCountryResource(country *schedules.Country) *pbv0.Country {\n\tif country == nil {\n\t\treturn nil\n\t}\n\n\treturn &pbv0.Country{\n\t\tId:   country.ID,\n\t\tName: country.Name,\n\t}\n}\n", "n_tokens": 140, "primary_symbol": "toCityResource", "primary_kind": "function", "primary_span": [166, 190], "def_symbols": ["toCityResource", "toCountryResource"], "symbols": ["toCityResource", "toCountryResource", "func", "server", "city", "schedules", "City", "pbv0", "nil", "return", "int64", "Name", "Timezone", "State", "Country", "country"], "doc_head": "func (s *server) toCityResource(city *schedules.City) *pbv0.City {\n\tif city == nil {\n\t\treturn nil\n\t}\n\treturn &pbv0.City{\n\t\tId:       int64(city.ID),\n\t\tName:     city.Name,\n\t\tTimezone: city.Timezone,\n\t\tState:    city.State,\n\t\tCountry:  s.toCountryResource(city.Country),\n\t}\n}\nfunc (s *server) toCountryResource(country *schedules.Country) *pbv0.Country {\n\tif country == nil {\n\t\treturn nil\n\t}\n\treturn &pbv0.Country{\n\t\tId:   country.ID,\n\t\tName: country.Name,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 191, "end_line": 240, "text": "func (s *server) toAircraftResource(aircraft *schedules.Aircraft) *pbv0.Aircraft {\n\tif aircraft == nil {\n\t\treturn nil\n\t}\n\n\ta := &pbv0.Aircraft{\n\t\tId:           aircraft.ID,\n\t\tType:         aircraft.Type,\n\t\tName:         aircraft.Name,\n\t\tDescription:  aircraft.Description,\n\t\tWikipediaUrl: aircraft.WikipediaURL,\n\t}\n\n\tif aircraft.Specification == nil {\n\t\treturn a\n\t}\n\n\tif aircraft.Specification.Engine != nil {\n\t\ta.Engine = aircraft.Specification.Engine\n\t}\n\tif aircraft.Specification.AverageSpeed != nil {\n\t\ta.AverageSpeed = aircraft.Specification.AverageSpeed\n\t}\n\tif aircraft.Specification.WideBody != nil {\n\t\ta.WideBody = aircraft.Specification.WideBody\n\t}\n\tif aircraft.Specification.Wingspan != nil {\n\t\ta.Wingspan = aircraft.Specification.Wingspan\n\t}\n\tif aircraft.Specification.Length != nil {\n\t\ta.Length = aircraft.Specification.Length\n\t}\n\tif aircraft.Specification.Height != nil {\n\t\ta.Height = aircraft.Specification.Height\n\t}\n\tif aircraft.Specification.SeatingCapacity != nil {\n\t\tsc := int64(*aircraft.Specification.SeatingCapacity)\n\t\ta.SeatingCapacity = &sc\n\t}\n\tif aircraft.Specification.FlightRange != nil {\n\t\ta.FlightRange = aircraft.Specification.FlightRange\n\t}\n\tif aircraft.Specification.CrewSize != nil {\n\t\tcs := int64(*aircraft.Specification.CrewSize)\n\t\ta.CrewSize = &cs\n\t}\n\n\treturn a\n}\n", "n_tokens": 330, "primary_symbol": "toAircraftResource", "primary_kind": "function", "primary_span": [191, 240], "def_symbols": ["toAircraftResource"], "symbols": ["toAircraftResource", "func", "server", "aircraft", "schedules", "Aircraft", "pbv0", "nil", "return", "Type", "Name", "Description", "WikipediaUrl", "WikipediaURL", "Specification", "Engine", "AverageSpeed", "WideBody", "Wingspan", "Length", "Height", "SeatingCapacity", "int64", "FlightRange", "CrewSize"], "doc_head": "func (s *server) toAircraftResource(aircraft *schedules.Aircraft) *pbv0.Aircraft {\n\tif aircraft == nil {\n\t\treturn nil\n\t}\n\ta := &pbv0.Aircraft{\n\t\tId:           aircraft.ID,\n\t\tType:         aircraft.Type,\n\t\tName:         aircraft.Name,\n\t\tDescription:  aircraft.Description,\n\t\tWikipediaUrl: aircraft.WikipediaURL,\n\t}\n\tif aircraft.Specification == nil {\n\t\treturn a\n\t}\n\tif aircraft.Specification.Engine != nil {\n\t\ta.Engine = aircraft.Specification.Engine\n\t}\n\tif aircraft.Specification.AverageSpeed != nil {\n\t\ta.AverageSpeed = aircraft.Specification.AverageSpeed\n\t}\n\tif aircraft.Specification.WideBody != nil {\n\t\ta.WideBody = aircraft.Specification.WideBody\n\t}\n\tif aircraft.Specification.Wingspan != nil {\n\t\ta.Wingspan = aircraft.Specification.Wingspan\n\t}\n\tif aircraft.Specification.Length != nil {\n\t\ta.Length = aircraft.Specification.Length\n\t}\n\tif aircraft.Specification.Height != nil {\n\t\ta.Height = aircraft.Specification.Height\n\t}\n\tif aircraft.Specification.SeatingCapacity != nil {\n\t\tsc := int64(*aircraft.Specification.SeatingCapacity)\n\t\ta.SeatingCapacity = &sc\n\t}\n\tif aircraft.Specification.FlightRange != nil {\n\t\ta.FlightRange = aircraft.Specification.FlightRange\n\t}\n\tif aircraft.Specification.CrewS"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 241, "end_line": 256, "text": "func (s *server) toCodeshareResource(codeshare []*schedules.Codeshare) []*pbv0.Codeshare {\n\tif codeshare == nil {\n\t\treturn nil\n\t}\n\n\tcs := make([]*pbv0.Codeshare, 0, len(codeshare))\n\tfor _, c := range codeshare {\n\t\tcs = append(cs, &pbv0.Codeshare{\n\t\t\tAirline:      c.Airline.Designator,\n\t\t\tFlightNumber: int32(c.FlightNumber),\n\t\t})\n\t}\n\n\treturn cs\n}\n", "n_tokens": 115, "primary_symbol": "toCodeshareResource", "primary_kind": "function", "primary_span": [241, 256], "def_symbols": ["toCodeshareResource"], "symbols": ["toCodeshareResource", "func", "server", "codeshare", "schedules", "Codeshare", "pbv0", "nil", "return", "make", "len", "for", "range", "append", "Airline", "Designator", "FlightNumber", "int32"], "doc_head": "func (s *server) toCodeshareResource(codeshare []*schedules.Codeshare) []*pbv0.Codeshare {\n\tif codeshare == nil {\n\t\treturn nil\n\t}\n\tcs := make([]*pbv0.Codeshare, 0, len(codeshare))\n\tfor _, c := range codeshare {\n\t\tcs = append(cs, &pbv0.Codeshare{\n\t\t\tAirline:      c.Airline.Designator,\n\t\t\tFlightNumber: int32(c.FlightNumber),\n\t\t})\n\t}\n\treturn cs\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/search.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/search.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/search.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\t\"time\"\n)\n\ntype searchRequest struct {\n\tDepartureDate    string  `validate:\"required,datetime=2006-01-02\"`\n\tDepartureAirport string  `validate:\"required\"`\n\tArrivalAirport   string  `validate:\"required\"`\n\tLimit            uint    `validate:\"min=2,max=15\"`\n\tNextPage         *string `validate:\"omitempty,required,min=1\"`\n}\n", "n_tokens": 184, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 22], "def_symbols": [], "symbols": ["package", "import", "context", "impalastudios", "com", "aviation", "schedules", "internal", "pkg", "i18n", "pbv0", "log", "uber", "org", "zap", "google", "golang", "grpc", "codes", "status", "time", "type", "searchRequest", "struct", "DepartureDate", "string", "validate", "required", "datetime", "DepartureAirport", "ArrivalAirport", "Limit", "uint", "min", "max", "NextPage", "omitempty"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\t\"time\"\n)\ntype searchRequest struct {\n\tDepartureDate    string  `validate:\"required,datetime=2006-01-02\"`\n\tDepartureAirport string  `validate:\"required\"`\n\tArrivalAirport   string  `validate:\"required\"`\n\tLimit            uint    `validate:\"min=2,max=15\"`\n\tNextPage         *string `validate:\"omitempty,required,min=1\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/search.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/search.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/search.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 69, "text": "func (s *server) Search(ctx context.Context, in *pbv0.SearchRequest) (*pbv0.SearchResponse, error) {\n\treq := searchRequest{\n\t\tDepartureDate:    in.DepartureDate,\n\t\tDepartureAirport: in.DepartureAirport,\n\t\tArrivalAirport:   in.ArrivalAirport,\n\t\tLimit:            uint(in.Limit),\n\t\tNextPage:         in.Cursor,\n\t}\n\n\tif err := s.validator.Struct(req); err != nil {\n\t\tlog.Error(ctx, \"Validation error.\", zap.Any(\"request\", req), zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\treturn nil, status.Errorf(codes.InvalidArgument, message)\n\t}\n\n\tstart, err := time.Parse(time.DateOnly, in.DepartureDate)\n\tif err != nil {\n\t\treturn nil, status.Error(codes.InvalidArgument, \"Invalid departure date provided.\")\n\t}\n\n\tif req.NextPage != nil && *req.NextPage == \"\" {\n\t\treq.NextPage = nil\n\t}\n\n\tpage, err := s.svc.Search(ctx, &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{req.DepartureAirport},\n\t\tArrivalAirports:   []string{req.ArrivalAirport},\n\t\tDepartureDate:     start,\n\t\tLimit:             req.Limit,\n\t\tCursor:            req.NextPage,\n\t})\n\n\tif err != nil {\n\t\treturn nil, status.Error(codes.Internal, \"Failed to retrieve schedules\")\n\t}\n\n\trSchs := make([]*pbv0.Schedule, 0, len(page.Items))\n\tfor _, sc := range page.Items {\n\t\trSchs = append(rSchs, s.toScheduleResource(sc))\n\t}\n\n\treturn &pbv0.SearchResponse{\n\t\tSchedules: rSchs,\n\t\tNext:      page.Next,\n\t}, nil\n}\n", "n_tokens": 391, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [23, 69], "def_symbols": ["Search"], "symbols": ["Search", "func", "server", "ctx", "context", "Context", "pbv0", "SearchRequest", "SearchResponse", "error", "req", "searchRequest", "DepartureDate", "DepartureAirport", "ArrivalAirport", "Limit", "uint", "NextPage", "Cursor", "err", "validator", "Struct", "nil", "log", "Error", "Validation", "zap", "Any", "request", "message", "i18n", "GetFirstValidationErrorMessage", "return", "status", "Errorf", "codes", "InvalidArgument", "start", "time", "Parse", "DateOnly", "Invalid", "departure", "date", "provided", "page", "svc", "schedules", "FlightSearchQuery", "DepartureAirports", "string", "ArrivalAirports", "Internal", "Failed", "retrieve", "rSchs", "make", "Schedule", "len", "Items", "for", "range", "append", "toScheduleResource", "Schedules", "Next"], "doc_head": "func (s *server) Search(ctx context.Context, in *pbv0.SearchRequest) (*pbv0.SearchResponse, error) {\n\treq := searchRequest{\n\t\tDepartureDate:    in.DepartureDate,\n\t\tDepartureAirport: in.DepartureAirport,\n\t\tArrivalAirport:   in.ArrivalAirport,\n\t\tLimit:            uint(in.Limit),\n\t\tNextPage:         in.Cursor,\n\t}\n\tif err := s.validator.Struct(req); err != nil {\n\t\tlog.Error(ctx, \"Validation error.\", zap.Any(\"request\", req), zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\treturn nil, status.Errorf(codes.InvalidArgument, message)\n\t}\n\tstart, err := time.Parse(time.DateOnly, in.DepartureDate)\n\tif err != nil {\n\t\treturn nil, status.Error(codes.InvalidArgument, \"Invalid departure date provided.\")\n\t}\n\tif req.NextPage != nil && *req.NextPage == \"\" {\n\t\treq.NextPage = nil\n\t}\n\tpage, err := s.svc.Search(ctx, &schedules.FlightSearchQuery{\n\t\tDepartureAirports: []string{req.DepartureAirport},\n\t\tArrivalAirports:   []string{req.ArrivalAirport},\n\t\tDepartureDate:     start,\n\t\tLimit:             req.Limit,\n\t\tCursor:            req.NextPage,\n\t})\n\tif err != nil {\n\t\treturn nil, status.Error(codes.Internal, \"Failed to retrieve schedules\")\n\t}\n\trSchs := make([]*pbv0.Schedule, 0, len(page."}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/get_flight.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype getFlightRequest struct {\n\tID string `validate:\"required\"`\n}\n", "n_tokens": 123, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 18], "def_symbols": [], "symbols": ["package", "import", "context", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "pbv0", "log", "uber", "org", "zap", "google", "golang", "grpc", "codes", "status", "type", "getFlightRequest", "struct", "string", "validate", "required"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\ntype getFlightRequest struct {\n\tID string `validate:\"required\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/get_flight.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 19, "end_line": 43, "text": "func (s *server) GetFlight(ctx context.Context, in *pbv0.GetFlightRequest) (*pbv0.GetFlightResponse, error) {\n\treq := getFlightRequest{ID: in.GetId()}\n\n\tif err := s.validator.Struct(req); err != nil {\n\t\tlog.Error(ctx, \"Validation error.\", zap.Any(\"request\", req), zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\treturn nil, status.Errorf(codes.InvalidArgument, message)\n\t}\n\n\tf, err := s.svc.Get(ctx, req.ID)\n\tif err != nil {\n\t\tif errors.Is(err, schedules.ErrFlightNotFound) {\n\t\t\treturn nil, status.Errorf(codes.NotFound, \"Flight with ID %s cannot be found.\", req.ID)\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get flight details.\", zap.Any(\"request\", req), zap.Error(err))\n\n\t\treturn nil, status.Error(codes.Internal, \"We cannot serve your request now. Please try again later.\")\n\t}\n\n\treturn &pbv0.GetFlightResponse{\n\t\tFlight: s.toFlightResources(f),\n\t}, nil\n}\n", "n_tokens": 231, "primary_symbol": "GetFlight", "primary_kind": "function", "primary_span": [19, 43], "def_symbols": ["GetFlight"], "symbols": ["GetFlight", "func", "server", "ctx", "context", "Context", "pbv0", "GetFlightRequest", "GetFlightResponse", "error", "req", "getFlightRequest", "GetId", "err", "validator", "Struct", "nil", "log", "Error", "Validation", "zap", "Any", "request", "message", "i18n", "GetFirstValidationErrorMessage", "return", "status", "Errorf", "codes", "InvalidArgument", "svc", "Get", "errors", "schedules", "ErrFlightNotFound", "NotFound", "Flight", "with", "cannot", "found", "Cannot", "get", "flight", "details", "Internal", "serve", "your", "now", "Please", "try", "again", "later", "toFlightResources"], "doc_head": "func (s *server) GetFlight(ctx context.Context, in *pbv0.GetFlightRequest) (*pbv0.GetFlightResponse, error) {\n\treq := getFlightRequest{ID: in.GetId()}\n\tif err := s.validator.Struct(req); err != nil {\n\t\tlog.Error(ctx, \"Validation error.\", zap.Any(\"request\", req), zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\treturn nil, status.Errorf(codes.InvalidArgument, message)\n\t}\n\tf, err := s.svc.Get(ctx, req.ID)\n\tif err != nil {\n\t\tif errors.Is(err, schedules.ErrFlightNotFound) {\n\t\t\treturn nil, status.Errorf(codes.NotFound, \"Flight with ID %s cannot be found.\", req.ID)\n\t\t}\n\t\tlog.Error(ctx, \"Cannot get flight details.\", zap.Any(\"request\", req), zap.Error(err))\n\t\treturn nil, status.Error(codes.Internal, \"We cannot serve your request now. Please try again later.\")\n\t}\n\treturn &pbv0.GetFlightResponse{\n\t\tFlight: s.toFlightResources(f),\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight_batch.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight_batch.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/get_flight_batch.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype getBatchGetRequest struct {\n\tIDs []string `validate:\"required,min=1,max=15,unique,dive,gt=0\"`\n}\n", "n_tokens": 115, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 16], "def_symbols": [], "symbols": ["package", "import", "context", "impalastudios", "com", "aviation", "schedules", "pkg", "i18n", "pbv0", "log", "uber", "org", "zap", "google", "golang", "grpc", "codes", "status", "type", "getBatchGetRequest", "struct", "IDs", "string", "validate", "required", "min", "max", "unique", "dive"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\tpbv0 \"go.impalastudios.com/aviation/schedules/pkg/pb/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\ntype getBatchGetRequest struct {\n\tIDs []string `validate:\"required,min=1,max=15,unique,dive,gt=0\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight_batch.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/get_flight_batch.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/get_flight_batch.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 17, "end_line": 38, "text": "func (s *server) BatchGetFlight(ctx context.Context, in *pbv0.BatchGetFlightRequest) (*pbv0.BatchGetFlightResponse, error) {\n\treq := getBatchGetRequest{\n\t\tIDs: in.GetIds(),\n\t}\n\n\tif err := s.validator.Struct(req); err != nil {\n\t\tlog.Error(ctx, \"Validation error.\", zap.Any(\"request\", req), zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\treturn nil, status.Errorf(codes.InvalidArgument, message)\n\t}\n\n\tfs, err := s.svc.GetBatch(ctx, req.IDs)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Error occurred while service BatchGetFlight request.\", zap.Strings(\"ids\", req.IDs), zap.Error(err))\n\t\treturn nil, status.Errorf(codes.Internal, \"We cannot serve your request now. Please try again later.\")\n\t}\n\n\treturn &pbv0.BatchGetFlightResponse{\n\t\tFlights: s.toFlightsResources(fs),\n\t}, nil\n}\n", "n_tokens": 211, "primary_symbol": "BatchGetFlight", "primary_kind": "function", "primary_span": [17, 38], "def_symbols": ["BatchGetFlight"], "symbols": ["BatchGetFlight", "func", "server", "ctx", "context", "Context", "pbv0", "BatchGetFlightRequest", "BatchGetFlightResponse", "error", "req", "getBatchGetRequest", "IDs", "GetIds", "err", "validator", "Struct", "nil", "log", "Error", "Validation", "zap", "Any", "request", "message", "i18n", "GetFirstValidationErrorMessage", "return", "status", "Errorf", "codes", "InvalidArgument", "svc", "GetBatch", "occurred", "while", "service", "Strings", "ids", "Internal", "cannot", "serve", "your", "now", "Please", "try", "again", "later", "Flights", "toFlightsResources"], "doc_head": "func (s *server) BatchGetFlight(ctx context.Context, in *pbv0.BatchGetFlightRequest) (*pbv0.BatchGetFlightResponse, error) {\n\treq := getBatchGetRequest{\n\t\tIDs: in.GetIds(),\n\t}\n\tif err := s.validator.Struct(req); err != nil {\n\t\tlog.Error(ctx, \"Validation error.\", zap.Any(\"request\", req), zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\treturn nil, status.Errorf(codes.InvalidArgument, message)\n\t}\n\tfs, err := s.svc.GetBatch(ctx, req.IDs)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Error occurred while service BatchGetFlight request.\", zap.Strings(\"ids\", req.IDs), zap.Error(err))\n\t\treturn nil, status.Errorf(codes.Internal, \"We cannot serve your request now. Please try again later.\")\n\t}\n\treturn &pbv0.BatchGetFlightResponse{\n\t\tFlights: s.toFlightsResources(fs),\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: server.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=server.go -destination=mocks/server.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tschedules \"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mocksvc is a mock of svc interface.\ntype Mocksvc struct {\n\tctrl     *gomock.Controller\n\trecorder *MocksvcMockRecorder\n\tisgomock struct{}\n}\n\n// MocksvcMockRecorder is the mock recorder for Mocksvc.\ntype MocksvcMockRecorder struct {\n\tmock *Mocksvc\n}\n", "n_tokens": 165, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "server", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "package", "Package", "GoMock", "import", "context", "reflect", "schedules", "impalastudios", "com", "aviation", "internal", "gomock", "uber", "org", "mock", "Mocksvc", "svc", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MocksvcMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: server.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=server.go -destination=mocks/server.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tschedules \"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mocksvc is a mock of svc interface.\ntype Mocksvc struct {\n\tctrl     *gomock.Controller\n\trecorder *MocksvcMockRecorder\n\tisgomock struct{}\n}\n// MocksvcMockRecorder is the mock recorder for Mocksvc.\ntype MocksvcMockRecorder struct {\n\tmock *Mocksvc\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 52, "text": "// NewMocksvc creates a new mock instance.\nfunc NewMocksvc(ctrl *gomock.Controller) *Mocksvc {\n\tmock := &Mocksvc{ctrl: ctrl}\n\tmock.recorder = &MocksvcMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocksvc) EXPECT() *MocksvcMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *Mocksvc) Get(arg0 context.Context, arg1 string) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 173, "primary_symbol": "NewMocksvc", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": ["NewMocksvc", "EXPECT", "Get"], "symbols": ["NewMocksvc", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mocksvc", "recorder", "MocksvcMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "string", "schedules", "Flight", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMocksvc creates a new mock instance.\nfunc NewMocksvc(ctrl *gomock.Controller) *Mocksvc {\n\tmock := &Mocksvc{ctrl: ctrl}\n\tmock.recorder = &MocksvcMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocksvc) EXPECT() *MocksvcMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *Mocksvc) Get(arg0 context.Context, arg1 string) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 67, "text": "// Get indicates an expected call of Get.\nfunc (mr *MocksvcMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mocksvc)(nil).Get), arg0, arg1)\n}\n\n// GetBatch mocks base method.\nfunc (m *Mocksvc) GetBatch(arg0 context.Context, arg1 []string) ([]*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetBatch\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 164, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [54, 67], "def_symbols": ["Get", "GetBatch"], "symbols": ["Get", "GetBatch", "indicates", "expected", "call", "func", "MocksvcMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocksvc", "nil", "mocks", "base", "method", "context", "Context", "string", "schedules", "Flight", "error", "ret", "ret0", "ret1"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MocksvcMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mocksvc)(nil).Get), arg0, arg1)\n}\n// GetBatch mocks base method.\nfunc (m *Mocksvc) GetBatch(arg0 context.Context, arg1 []string) ([]*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetBatch\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 68, "end_line": 82, "text": "// GetBatch indicates an expected call of GetBatch.\nfunc (mr *MocksvcMockRecorder) GetBatch(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetBatch\", reflect.TypeOf((*Mocksvc)(nil).GetBatch), arg0, arg1)\n}\n\n// Search mocks base method.\nfunc (m *Mocksvc) Search(arg0 context.Context, arg1 *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Search\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 176, "primary_symbol": "GetBatch", "primary_kind": "function", "primary_span": [69, 82], "def_symbols": ["GetBatch", "Search"], "symbols": ["GetBatch", "Search", "indicates", "expected", "call", "func", "MocksvcMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocksvc", "nil", "mocks", "base", "method", "context", "Context", "schedules", "FlightSearchQuery", "Page", "Schedule", "error", "ret", "ret0", "ret1"], "doc_head": "// GetBatch indicates an expected call of GetBatch.\nfunc (mr *MocksvcMockRecorder) GetBatch(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetBatch\", reflect.TypeOf((*Mocksvc)(nil).GetBatch), arg0, arg1)\n}\n// Search mocks base method.\nfunc (m *Mocksvc) Search(arg0 context.Context, arg1 *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Search\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "rel_path": "internal/schedules/adapter/handler/grpc/v0/mocks/server.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 83, "end_line": 88, "text": "// Search indicates an expected call of Search.\nfunc (mr *MocksvcMockRecorder) Search(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Search\", reflect.TypeOf((*Mocksvc)(nil).Search), arg0, arg1)\n}\n", "n_tokens": 71, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [84, 88], "def_symbols": ["Search"], "symbols": ["Search", "indicates", "expected", "call", "func", "MocksvcMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocksvc", "nil"], "doc_head": "// Search indicates an expected call of Search.\nfunc (mr *MocksvcMockRecorder) Search(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Search\", reflect.TypeOf((*Mocksvc)(nil).Search), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/health.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/health.go", "rel_path": "internal/schedules/adapter/handler/http/health.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 30, "text": "package http\n\nimport (\n\t\"context\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype dbClient interface {\n\tPing(ctx context.Context) error\n}\n\ntype HealthHandler struct {\n\tdb dbClient\n}\n\nfunc NewHealthHandler(db dbClient) *HealthHandler {\n\treturn &HealthHandler{\n\t\tdb: db,\n\t}\n}\n\nfunc (h *HealthHandler) Register(g *gin.RouterGroup) {\n\tg.GET(\"/health\", h.health)\n}\n", "n_tokens": 130, "primary_symbol": "NewHealthHandler", "primary_kind": "function", "primary_span": [21, 30], "def_symbols": ["NewHealthHandler", "Register"], "symbols": ["NewHealthHandler", "Register", "package", "http", "import", "context", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "pkg", "xhttp", "log", "uber", "org", "zap", "net", "time", "type", "dbClient", "interface", "Ping", "ctx", "Context", "error", "HealthHandler", "struct", "func", "return", "RouterGroup", "GET", "health"], "doc_head": "package http\nimport (\n\t\"context\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\ntype dbClient interface {\n\tPing(ctx context.Context) error\n}\ntype HealthHandler struct {\n\tdb dbClient\n}\nfunc NewHealthHandler(db dbClient) *HealthHandler {\n\treturn &HealthHandler{\n\t\tdb: db,\n\t}\n}\nfunc (h *HealthHandler) Register(g *gin.RouterGroup) {\n\tg.GET(\"/health\", h.health)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/health.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/health.go", "rel_path": "internal/schedules/adapter/handler/http/health.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 31, "end_line": 49, "text": "func (h *HealthHandler) health(c *gin.Context) {\n\tif err := h.db.Ping(c); err != nil {\n\t\tlog.Error(c, \"Cannot ping the database.\", zap.Error(err))\n\n\t\tc.PureJSON(\n\t\t\thttp.StatusInternalServerError,\n\t\t\txhttp.NewErrorResponse[string](\"ko\", \"I'm not feeling well.\"),\n\t\t)\n\n\t\treturn\n\t}\n\n\tnow := time.Now().UTC().Format(time.RFC3339)\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse[string](now, \"ok\", \"I'm healthy.\"),\n\t)\n}\n", "n_tokens": 119, "primary_symbol": "health", "primary_kind": "function", "primary_span": [31, 49], "def_symbols": ["health"], "symbols": ["health", "func", "HealthHandler", "gin", "Context", "err", "Ping", "nil", "log", "Error", "Cannot", "ping", "the", "database", "zap", "PureJSON", "http", "StatusInternalServerError", "xhttp", "NewErrorResponse", "string", "not", "feeling", "well", "return", "now", "time", "Now", "UTC", "Format", "RFC3339", "StatusOK", "NewResponse", "healthy"], "doc_head": "func (h *HealthHandler) health(c *gin.Context) {\n\tif err := h.db.Ping(c); err != nil {\n\t\tlog.Error(c, \"Cannot ping the database.\", zap.Error(err))\n\t\tc.PureJSON(\n\t\t\thttp.StatusInternalServerError,\n\t\t\txhttp.NewErrorResponse[string](\"ko\", \"I'm not feeling well.\"),\n\t\t)\n\t\treturn\n\t}\n\tnow := time.Now().UTC().Format(time.RFC3339)\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse[string](now, \"ok\", \"I'm healthy.\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n)\n", "n_tokens": 102, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 18], "def_symbols": [], "symbols": ["package", "import", "context", "errors", "impalastudios", "com", "log", "uber", "org", "zap", "net", "http", "time", "aviation", "schedules", "pkg", "i18n", "golang", "text", "language", "github", "gin", "gonic", "internal", "xhttp"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"golang.org/x/text/language\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 19, "end_line": 30, "text": "//go:generate mockgen -source=handler.go -destination=mocks/handler_mocks.go -package=mocks\ntype service interface {\n\tSearch(context.Context, *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error)\n\tGet(context.Context, string) (*schedules.Flight, error)\n\tGetBatch(context.Context, []string) ([]*schedules.Flight, error)\n\tGetByFlightDesignator(context.Context, *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error)\n\tGetAirportFlightBoard(context.Context, *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error)\n\tGetAirlineFlightBoard(context.Context, *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error)\n\tGetRandomFlight(context.Context, *schedules.RandomFlightQuery) (*schedules.Flight, error)\n\tGetAirlineUniqueRoutes(context.Context, string, time.Time) (*schedules.UniqueRoutes, error)\n}\n", "n_tokens": 216, "primary_symbol": "", "primary_kind": "", "primary_span": [19, 30], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "handler", "destination", "mocks", "handler_mocks", "package", "type", "service", "interface", "Search", "context", "Context", "schedules", "FlightSearchQuery", "Page", "Schedule", "error", "Get", "string", "Flight", "GetBatch", "GetByFlightDesignator", "FlightDesignatorQuery", "GetAirportFlightBoard", "AirportFlightBoardQuery", "GetAirlineFlightBoard", "AirlineFlightBoardQuery", "GetRandomFlight", "RandomFlightQuery", "GetAirlineUniqueRoutes", "time", "Time", "UniqueRoutes"], "doc_head": "//go:generate mockgen -source=handler.go -destination=mocks/handler_mocks.go -package=mocks\ntype service interface {\n\tSearch(context.Context, *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error)\n\tGet(context.Context, string) (*schedules.Flight, error)\n\tGetBatch(context.Context, []string) ([]*schedules.Flight, error)\n\tGetByFlightDesignator(context.Context, *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error)\n\tGetAirportFlightBoard(context.Context, *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error)\n\tGetAirlineFlightBoard(context.Context, *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error)\n\tGetRandomFlight(context.Context, *schedules.RandomFlightQuery) (*schedules.Flight, error)\n\tGetAirlineUniqueRoutes(context.Context, string, time.Time) (*schedules.UniqueRoutes, error)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 31, "end_line": 40, "text": "// RestHandler is the rest handler\ntype RestHandler struct {\n\tsvc service\n}\n\n// NewHandler creates a new rest handler\nfunc NewHandler(svc service) *RestHandler {\n\treturn &RestHandler{svc: svc}\n}\n", "n_tokens": 48, "primary_symbol": "NewHandler", "primary_kind": "function", "primary_span": [37, 40], "def_symbols": ["NewHandler"], "symbols": ["NewHandler", "RestHandler", "the", "rest", "handler", "type", "struct", "svc", "service", "creates", "new", "func", "return"], "doc_head": "// RestHandler is the rest handler\ntype RestHandler struct {\n\tsvc service\n}\n// NewHandler creates a new rest handler\nfunc NewHandler(svc service) *RestHandler {\n\treturn &RestHandler{svc: svc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 41, "end_line": 58, "text": "// Register registers the rest handler\nfunc (h *RestHandler) Register(router *gin.RouterGroup) {\n\trouter.GET(\"/v0/search\", h.search, h.handleErrors)\n\trouter.GET(\"/v0/search/flight-designator\", h.getByFlightCode, h.handleErrors)\n\trouter.GET(\"/v0/flights/single/:id\", h.getFlight, h.handleErrors)\n\trouter.GET(\"/v0/flights/batch\", h.getFlightBatch, h.handleErrors)\n\trouter.GET(\"/v0/flights/random/single\", h.getRandomFlight, h.handleErrors)\n\trouter.GET(\"/v0/airport-flight-board\", h.airportFlightBoard, h.handleErrors)\n\trouter.GET(\"/v0/airline-flight-board\", h.airlineFlightBoard, h.handleErrors)\n\trouter.GET(\"/v0/airlines/:id/routes\", h.getAirlineRoutes, h.handleErrors)\n}\n\nvar (\n\tErrRequestBindingFailed = errors.New(\"request binding failed\")\n\tErrParsingDate          = errors.New(\"error parsing date\")\n\tErrFlightNotFound       = errors.New(\"flight not found\")\n)\n", "n_tokens": 218, "primary_symbol": "Register", "primary_kind": "function", "primary_span": [42, 58], "def_symbols": ["Register"], "symbols": ["Register", "registers", "the", "rest", "handler", "func", "RestHandler", "router", "gin", "RouterGroup", "GET", "search", "handleErrors", "flight", "designator", "getByFlightCode", "flights", "single", "getFlight", "batch", "getFlightBatch", "random", "getRandomFlight", "airport", "board", "airportFlightBoard", "airline", "airlineFlightBoard", "airlines", "routes", "getAirlineRoutes", "var", "ErrRequestBindingFailed", "errors", "New", "request", "binding", "failed", "ErrParsingDate", "error", "parsing", "date", "ErrFlightNotFound", "not", "found"], "doc_head": "// Register registers the rest handler\nfunc (h *RestHandler) Register(router *gin.RouterGroup) {\n\trouter.GET(\"/v0/search\", h.search, h.handleErrors)\n\trouter.GET(\"/v0/search/flight-designator\", h.getByFlightCode, h.handleErrors)\n\trouter.GET(\"/v0/flights/single/:id\", h.getFlight, h.handleErrors)\n\trouter.GET(\"/v0/flights/batch\", h.getFlightBatch, h.handleErrors)\n\trouter.GET(\"/v0/flights/random/single\", h.getRandomFlight, h.handleErrors)\n\trouter.GET(\"/v0/airport-flight-board\", h.airportFlightBoard, h.handleErrors)\n\trouter.GET(\"/v0/airline-flight-board\", h.airlineFlightBoard, h.handleErrors)\n\trouter.GET(\"/v0/airlines/:id/routes\", h.getAirlineRoutes, h.handleErrors)\n}\nvar (\n\tErrRequestBindingFailed = errors.New(\"request binding failed\")\n\tErrParsingDate          = errors.New(\"error parsing date\")\n\tErrFlightNotFound       = errors.New(\"flight not found\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 59, "end_line": 98, "text": "func (h *RestHandler) handleErrors(c *gin.Context) {\n\tc.Next()\n\n\tif len(c.Errors) == 0 {\n\t\treturn\n\t}\n\n\terr := c.Errors[0]\n\tif errors.Is(err, ErrRequestBindingFailed) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse[any](\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The provided parameters are invalid.\",\n\t\t))\n\t} else if errors.Is(err, ErrParsingDate) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse[any](\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The provided dates are invalid. Please use the format YYYY-MM-DD.\",\n\t\t))\n\t} else if errors.Is(err, ErrFlightNotFound) {\n\t\tc.PureJSON(http.StatusNotFound, xhttp.NewErrorResponse[any](\n\t\t\t\"not_found\",\n\t\t\t\"The flight cannot be found.\",\n\t\t))\n\t} else {\n\t\tlog.Error(\n\t\t\tc,\n\t\t\t\"http request failed with an internal error\",\n\t\t\tzap.Error(err),\n\t\t\tzap.String(\"path\", c.FullPath()),\n\t\t\tzap.String(\"method\", c.Request.Method),\n\t\t\tzap.Any(\"headers\", c.Request.Header),\n\t\t)\n\n\t\tc.PureJSON(http.StatusInternalServerError, xhttp.NewErrorResponse[any](\n\t\t\t\"internal_error\",\n\t\t\t\"Something went wrong, please try again later.\",\n\t\t))\n\t}\n}\n", "n_tokens": 279, "primary_symbol": "handleErrors", "primary_kind": "function", "primary_span": [59, 98], "def_symbols": ["handleErrors"], "symbols": ["handleErrors", "func", "RestHandler", "gin", "Context", "Next", "len", "Errors", "return", "err", "errors", "ErrRequestBindingFailed", "PureJSON", "http", "StatusBadRequest", "xhttp", "NewErrorResponse", "any", "invalid_parameters", "The", "provided", "parameters", "are", "invalid", "else", "ErrParsingDate", "dates", "Please", "use", "the", "format", "YYYY", "ErrFlightNotFound", "StatusNotFound", "not_found", "flight", "cannot", "found", "log", "Error", "request", "failed", "with", "internal", "error", "zap", "String", "path", "FullPath", "method", "Request", "Method", "Any", "headers", "Header", "StatusInternalServerError", "internal_error", "Something", "went", "wrong", "please", "try", "again", "later"], "doc_head": "func (h *RestHandler) handleErrors(c *gin.Context) {\n\tc.Next()\n\tif len(c.Errors) == 0 {\n\t\treturn\n\t}\n\terr := c.Errors[0]\n\tif errors.Is(err, ErrRequestBindingFailed) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse[any](\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The provided parameters are invalid.\",\n\t\t))\n\t} else if errors.Is(err, ErrParsingDate) {\n\t\tc.PureJSON(http.StatusBadRequest, xhttp.NewErrorResponse[any](\n\t\t\t\"invalid_parameters\",\n\t\t\t\"The provided dates are invalid. Please use the format YYYY-MM-DD.\",\n\t\t))\n\t} else if errors.Is(err, ErrFlightNotFound) {\n\t\tc.PureJSON(http.StatusNotFound, xhttp.NewErrorResponse[any](\n\t\t\t\"not_found\",\n\t\t\t\"The flight cannot be found.\",\n\t\t))\n\t} else {\n\t\tlog.Error(\n\t\t\tc,\n\t\t\t\"http request failed with an internal error\",\n\t\t\tzap.Error(err),\n\t\t\tzap.String(\"path\", c.FullPath()),\n\t\t\tzap.String(\"method\", c.Request.Method),\n\t\t\tzap.Any(\"headers\", c.Request.Header),\n\t\t)\n\t\tc.PureJSON(http.StatusInternalServerError, xhttp.NewErrorResponse[any](\n\t\t\t\"internal_error\",\n\t\t\t\"Something went wrong, please try again later.\",\n\t\t))\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 99, "end_line": 113, "text": "func (h *RestHandler) toSchedule(sch *schedules.Schedule, locale language.Tag) *Schedule {\n\tvar flights []*Flight\n\tfor _, f := range sch.Flights {\n\t\tflights = append(flights, h.toFlight(f, locale, false))\n\t}\n\n\treturn &Schedule{\n\t\tDepartureAirport: h.toAirport(sch.DepartureAirport, locale),\n\t\tArrivalAirport:   h.toAirport(sch.ArrivalAirport, locale),\n\t\tAirline:          h.toAirline(sch.MainCarrier, locale),\n\t\tFlightNumber:     sch.FlightNumber,\n\t\tFlights:          flights,\n\t}\n}\n", "n_tokens": 136, "primary_symbol": "toSchedule", "primary_kind": "function", "primary_span": [99, 113], "def_symbols": ["toSchedule"], "symbols": ["toSchedule", "func", "RestHandler", "sch", "schedules", "Schedule", "locale", "language", "Tag", "var", "flights", "Flight", "for", "range", "Flights", "append", "toFlight", "false", "return", "DepartureAirport", "toAirport", "ArrivalAirport", "Airline", "toAirline", "MainCarrier", "FlightNumber"], "doc_head": "func (h *RestHandler) toSchedule(sch *schedules.Schedule, locale language.Tag) *Schedule {\n\tvar flights []*Flight\n\tfor _, f := range sch.Flights {\n\t\tflights = append(flights, h.toFlight(f, locale, false))\n\t}\n\treturn &Schedule{\n\t\tDepartureAirport: h.toAirport(sch.DepartureAirport, locale),\n\t\tArrivalAirport:   h.toAirport(sch.ArrivalAirport, locale),\n\t\tAirline:          h.toAirline(sch.MainCarrier, locale),\n\t\tFlightNumber:     sch.FlightNumber,\n\t\tFlights:          flights,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 114, "end_line": 171, "text": "func (h *RestHandler) toFlight(f *schedules.Flight, locale language.Tag, includeCompleteModels bool) *Flight {\n\tcodeshare := make([]Codeshare, len(f.Codeshare))\n\tfor i, c := range f.Codeshare {\n\t\tairline := &CodeshareAirline{Designator: c.Airline.Designator}\n\t\tif c.Airline.ID != nil {\n\t\t\tairline.ID = *c.Airline.ID\n\t\t\tairline.Name = c.Airline.Name\n\t\t\tairline.Images = c.Airline.Images\n\t\t}\n\n\t\tcodeshare[i] = Codeshare{\n\t\t\tAirline:      airline,\n\t\t\tFlightNumber: c.FlightNumber,\n\t\t}\n\t}\n\n\tvar expectedDepartureAt *time.Time\n\tif !f.ExpectedDepartureAt.IsZero() {\n\t\texpectedDepartureAt = &f.ExpectedDepartureAt\n\t}\n\n\tvar actualDepartureAtPtr *time.Time\n\tif !f.ActualDepartureAt.IsZero() {\n\t\tactualDepartureAtPtr = &f.ActualDepartureAt\n\t}\n\n\tvar actualArrivalAtPtr *time.Time\n\tif !f.ActualArrivalAt.IsZero() {\n\t\tactualArrivalAtPtr = &f.ActualArrivalAt\n\t}\n\n\tvar expectedArrivalAt *time.Time\n\tif !f.ExpectedArrivalAt.IsZero() {\n\t\texpectedArrivalAt = &f.ExpectedArrivalAt\n\t}\n\n\treturn &Flight{\n\t\tID:                   f.ID,\n\t\tFlightID:             f.FlightID,\n\t\tConnectingFlightID:   f.ConnectingFlightID,\n\t\tStatus:               string(f.Status),\n\t\tDepartureStatus:      string(f.DepartureStatus),\n\t\tArrivalStatus:        string(f.ArrivalStatus),\n\t\tAirline:              h.toAirline(f.Airline, locale),\n\t\tFlightNumber:         f.FlightNumber,\n\t\tDepartureAirport:     h.toAirport(f.DepartureAirport, locale),\n\t\tArrivalAirport:       h.toAirport(f.ArrivalAirport, locale),\n\t\tAircraft:             h.toAircraft(f.Aircraft, locale, includeCompleteModels),\n\t\tScheduledDepartureAt: f.ScheduledDepartureAt,\n\t\tExpectedDepartureAt:  expectedDepartureAt,\n\t\tActualDepartureAt:    actualDepartureAtPtr,\n\t\tScheduledArrivalAt:   f.ScheduledArrivalAt,\n\t\tExpectedArrivalAt:    expectedArrivalAt,\n\t\tActualArrivalAt:      actualArrivalAtPtr,\n\t\tCodeshare:            codeshare,\n\t}\n}\n", "n_tokens": 559, "primary_symbol": "toFlight", "primary_kind": "function", "primary_span": [114, 171], "def_symbols": ["toFlight"], "symbols": ["toFlight", "func", "RestHandler", "schedules", "Flight", "locale", "language", "Tag", "includeCompleteModels", "bool", "codeshare", "make", "Codeshare", "len", "for", "range", "airline", "CodeshareAirline", "Designator", "Airline", "nil", "Name", "Images", "FlightNumber", "var", "expectedDepartureAt", "time", "Time", "ExpectedDepartureAt", "IsZero", "actualDepartureAtPtr", "ActualDepartureAt", "actualArrivalAtPtr", "ActualArrivalAt", "expectedArrivalAt", "ExpectedArrivalAt", "return", "FlightID", "ConnectingFlightID", "Status", "string", "DepartureStatus", "ArrivalStatus", "toAirline", "DepartureAirport", "toAirport", "ArrivalAirport", "Aircraft", "toAircraft", "ScheduledDepartureAt", "ScheduledArrivalAt"], "doc_head": "func (h *RestHandler) toFlight(f *schedules.Flight, locale language.Tag, includeCompleteModels bool) *Flight {\n\tcodeshare := make([]Codeshare, len(f.Codeshare))\n\tfor i, c := range f.Codeshare {\n\t\tairline := &CodeshareAirline{Designator: c.Airline.Designator}\n\t\tif c.Airline.ID != nil {\n\t\t\tairline.ID = *c.Airline.ID\n\t\t\tairline.Name = c.Airline.Name\n\t\t\tairline.Images = c.Airline.Images\n\t\t}\n\t\tcodeshare[i] = Codeshare{\n\t\t\tAirline:      airline,\n\t\t\tFlightNumber: c.FlightNumber,\n\t\t}\n\t}\n\tvar expectedDepartureAt *time.Time\n\tif !f.ExpectedDepartureAt.IsZero() {\n\t\texpectedDepartureAt = &f.ExpectedDepartureAt\n\t}\n\tvar actualDepartureAtPtr *time.Time\n\tif !f.ActualDepartureAt.IsZero() {\n\t\tactualDepartureAtPtr = &f.ActualDepartureAt\n\t}\n\tvar actualArrivalAtPtr *time.Time\n\tif !f.ActualArrivalAt.IsZero() {\n\t\tactualArrivalAtPtr = &f.ActualArrivalAt\n\t}\n\tvar expectedArrivalAt *time.Time\n\tif !f.ExpectedArrivalAt.IsZero() {\n\t\texpectedArrivalAt = &f.ExpectedArrivalAt\n\t}\n\treturn &Flight{\n\t\tID:                   f.ID,\n\t\tFlightID:             f.FlightID,\n\t\tConnectingFlightID:   f.ConnectingFlightID,\n\t\tStatus:               string(f.Status),\n\t\tDepartureStatus:      string(f.DepartureStatus),\n\t\tArrivalStatus:  "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 172, "end_line": 207, "text": "func (h *RestHandler) toAircraft(a *schedules.Aircraft, locale language.Tag, includeCompleteModels bool) *Aircraft {\n\tif a == nil {\n\t\treturn nil\n\t}\n\n\tat := &Aircraft{\n\t\tID:   a.ID,\n\t\tType: a.Type,\n\t\tName: a.Name,\n\t}\n\n\tif includeCompleteModels {\n\t\tat.Description = i18n.Localise(a.Description, locale)\n\t\tat.WikipediaURL = i18n.Localise(a.WikipediaURL, locale)\n\t\tat.Images = a.Images\n\n\t\tif a.Specification != nil {\n\t\t\tat.Specification = &Specification{\n\t\t\t\tEngine:          a.Specification.Engine,\n\t\t\t\tAverageSpeed:    a.Specification.AverageSpeed,\n\t\t\t\tWideBody:        a.Specification.WideBody,\n\t\t\t\tWingspan:        a.Specification.Wingspan,\n\t\t\t\tLength:          a.Specification.Length,\n\t\t\t\tHeight:          a.Specification.Height,\n\t\t\t\tSeatingCapacity: a.Specification.SeatingCapacity,\n\t\t\t\tFlightRange:     a.Specification.FlightRange,\n\t\t\t\tCrewSize:        a.Specification.CrewSize,\n\t\t\t}\n\t\t}\n\n\t\tat.UpdatedAt = &a.UpdatedAt\n\t}\n\n\treturn at\n}\n", "n_tokens": 258, "primary_symbol": "toAircraft", "primary_kind": "function", "primary_span": [172, 207], "def_symbols": ["toAircraft"], "symbols": ["toAircraft", "func", "RestHandler", "schedules", "Aircraft", "locale", "language", "Tag", "includeCompleteModels", "bool", "nil", "return", "Type", "Name", "Description", "i18n", "Localise", "WikipediaURL", "Images", "Specification", "Engine", "AverageSpeed", "WideBody", "Wingspan", "Length", "Height", "SeatingCapacity", "FlightRange", "CrewSize", "UpdatedAt"], "doc_head": "func (h *RestHandler) toAircraft(a *schedules.Aircraft, locale language.Tag, includeCompleteModels bool) *Aircraft {\n\tif a == nil {\n\t\treturn nil\n\t}\n\tat := &Aircraft{\n\t\tID:   a.ID,\n\t\tType: a.Type,\n\t\tName: a.Name,\n\t}\n\tif includeCompleteModels {\n\t\tat.Description = i18n.Localise(a.Description, locale)\n\t\tat.WikipediaURL = i18n.Localise(a.WikipediaURL, locale)\n\t\tat.Images = a.Images\n\t\tif a.Specification != nil {\n\t\t\tat.Specification = &Specification{\n\t\t\t\tEngine:          a.Specification.Engine,\n\t\t\t\tAverageSpeed:    a.Specification.AverageSpeed,\n\t\t\t\tWideBody:        a.Specification.WideBody,\n\t\t\t\tWingspan:        a.Specification.Wingspan,\n\t\t\t\tLength:          a.Specification.Length,\n\t\t\t\tHeight:          a.Specification.Height,\n\t\t\t\tSeatingCapacity: a.Specification.SeatingCapacity,\n\t\t\t\tFlightRange:     a.Specification.FlightRange,\n\t\t\t\tCrewSize:        a.Specification.CrewSize,\n\t\t\t}\n\t\t}\n\t\tat.UpdatedAt = &a.UpdatedAt\n\t}\n\treturn at\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 208, "end_line": 229, "text": "func (h *RestHandler) toAirline(a *schedules.Airline, locale language.Tag) *Airline {\n\tif a == nil {\n\t\treturn nil\n\t}\n\n\tarl := &Airline{\n\t\tDesignator:     a.Designator,\n\t\tIATA:           a.IATA,\n\t\tICAO:           a.ICAO,\n\t\tClassification: int(a.Classification),\n\t\tName:           a.Name,\n\t\tImages:         a.Images,\n\t\tWebsiteURL:     a.WebsiteURL,\n\t}\n\n\tif a.ID != nil {\n\t\tarl.ID = *a.ID\n\t}\n\n\treturn arl\n}\n", "n_tokens": 132, "primary_symbol": "toAirline", "primary_kind": "function", "primary_span": [208, 229], "def_symbols": ["toAirline"], "symbols": ["toAirline", "func", "RestHandler", "schedules", "Airline", "locale", "language", "Tag", "nil", "return", "arl", "Designator", "IATA", "ICAO", "Classification", "int", "Name", "Images", "WebsiteURL"], "doc_head": "func (h *RestHandler) toAirline(a *schedules.Airline, locale language.Tag) *Airline {\n\tif a == nil {\n\t\treturn nil\n\t}\n\tarl := &Airline{\n\t\tDesignator:     a.Designator,\n\t\tIATA:           a.IATA,\n\t\tICAO:           a.ICAO,\n\t\tClassification: int(a.Classification),\n\t\tName:           a.Name,\n\t\tImages:         a.Images,\n\t\tWebsiteURL:     a.WebsiteURL,\n\t}\n\tif a.ID != nil {\n\t\tarl.ID = *a.ID\n\t}\n\treturn arl\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 230, "end_line": 269, "text": "func (h *RestHandler) toAirport(a *schedules.Airport, locale language.Tag) *Airport {\n\tif a == nil {\n\t\treturn nil\n\t}\n\n\tapt := &Airport{\n\t\tDesignator:     a.Designator,\n\t\tIATA:           a.IATA,\n\t\tICAO:           a.ICAO,\n\t\tFAA:            a.FAA,\n\t\tClassification: int(a.Classification),\n\t\tName:           i18n.Localise(a.Name, locale),\n\t\tShortName:      i18n.Localise(a.ShortName, locale),\n\t\tLatitude:       a.Latitude,\n\t\tLongitude:      a.Longitude,\n\t}\n\n\tif a.ID != nil {\n\t\tapt.ID = *a.ID\n\t}\n\n\tif a.City != nil {\n\t\tapt.City = &City{\n\t\t\tID:       a.City.ID,\n\t\t\tName:     i18n.Localise(a.City.Name, locale),\n\t\t\tTimezone: a.City.Timezone,\n\t\t\tState:    a.City.State,\n\t\t}\n\n\t\tif a.City.Country != nil {\n\t\t\tapt.City.Country = &Country{\n\t\t\t\tID:   a.City.Country.ID,\n\t\t\t\tName: i18n.Localise(a.City.Country.Name, locale),\n\t\t\t}\n\t\t}\n\t}\n\n\treturn apt\n}\n", "n_tokens": 267, "primary_symbol": "toAirport", "primary_kind": "function", "primary_span": [230, 269], "def_symbols": ["toAirport"], "symbols": ["toAirport", "func", "RestHandler", "schedules", "Airport", "locale", "language", "Tag", "nil", "return", "apt", "Designator", "IATA", "ICAO", "FAA", "Classification", "int", "Name", "i18n", "Localise", "ShortName", "Latitude", "Longitude", "City", "Timezone", "State", "Country"], "doc_head": "func (h *RestHandler) toAirport(a *schedules.Airport, locale language.Tag) *Airport {\n\tif a == nil {\n\t\treturn nil\n\t}\n\tapt := &Airport{\n\t\tDesignator:     a.Designator,\n\t\tIATA:           a.IATA,\n\t\tICAO:           a.ICAO,\n\t\tFAA:            a.FAA,\n\t\tClassification: int(a.Classification),\n\t\tName:           i18n.Localise(a.Name, locale),\n\t\tShortName:      i18n.Localise(a.ShortName, locale),\n\t\tLatitude:       a.Latitude,\n\t\tLongitude:      a.Longitude,\n\t}\n\tif a.ID != nil {\n\t\tapt.ID = *a.ID\n\t}\n\tif a.City != nil {\n\t\tapt.City = &City{\n\t\t\tID:       a.City.ID,\n\t\t\tName:     i18n.Localise(a.City.Name, locale),\n\t\t\tTimezone: a.City.Timezone,\n\t\t\tState:    a.City.State,\n\t\t}\n\t\tif a.City.Country != nil {\n\t\t\tapt.City.Country = &Country{\n\t\t\t\tID:   a.City.Country.ID,\n\t\t\t\tName: i18n.Localise(a.City.Country.Name, locale),\n\t\t\t}\n\t\t}\n\t}\n\treturn apt\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight_batch_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "//go:build test\n// +build test\n\npackage v0_test\n\nimport (\n\t\"encoding/json\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestGetFlightBatch(t *testing.T) {", "n_tokens": 135, "primary_symbol": "TestGetFlightBatch", "primary_kind": "function", "primary_span": [20, 20], "def_symbols": ["TestGetFlightBatch"], "symbols": ["TestGetFlightBatch", "build", "test", "package", "v0_test", "import", "encoding", "json", "github", "com", "cockroachdb", "errors", "stretchr", "testify", "assert", "require", "impalastudios", "aviation", "schedules", "internal", "adapter", "handler", "http", "pkg", "xhttp", "uber", "org", "mock", "gomock", "net", "testing", "time", "func"], "doc_head": "//go:build test\n// +build test\npackage v0_test\nimport (\n\t\"encoding/json\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\nfunc TestGetFlightBatch(t *testing.T) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch_test.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight_batch_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 21, "end_line": 147, "text": "\ttestCases := []struct {\n\t\tdescription        string\n\t\tpath               string\n\t\tmockFlights        []*schedules.Flight\n\t\tmockErr            error\n\t\texpectedIDs        []string\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdescription:        \"it should return 500 when when an unexpected error occures\",\n\t\t\tpath:               \"/v0/flights/batch?ids[]=20231113_AA_2301_CDG_AMS\",\n\t\t\tmockErr:            errors.New(\"boooom\"),\n\t\t\texpectedIDs:        []string{\"20231113_AA_2301_CDG_AMS\"},\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 500,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdescription:        \"it should return an empty array if flight(s) cannot be found\",\n\t\t\tpath:               \"/v0/flights/batch?ids[]=20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedIDs:        []string{\"20231113_AA_2301_CDG_AMS\"},\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 200,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"ok\",\n\t\t\t\tMessage: \"Here are the details of the requested batch of flights.\",\n\t\t\t},\n\t\t\texpectedData: `[]`,\n\t\t},\n\t\t{\n\t\t\tdescription: \"it should return the flight details\",\n\t\t\tpath:        \"/v0/flights/batch?ids[]=20231113_AA_2301_CDG_AMS\",\n\t\t\tmockFlights: []*schedules.Flight{{\n\t\t\t\tID:                 1,\n\t\t\t\tFlightID:           \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\tConnectingFlightID: 0,\n\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t},\n\t\t\t\tFlightNumber: 1234,\n\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t},\n\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t},\n\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\tID:        \"320\",\n\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t},\n\t\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\t\tDepartureStatus:      schedules.FlightTimingStatusOnTime,\n\t\t\t\tArrivalStatus:        schedules.FlightTimingStatusOnTime,\n\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t\t{\n\t\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"AF\"},\n\t\t\t\t\t\tFlightNumber: 5678,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}},\n\t\t\texpectedIDs:        []string{\"20231113_AA_2301_CDG_AMS\"},\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 200,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"ok\",\n\t\t\t\tMessage: \"Here are the details of the requested batch of flights.\",\n\t\t\t},\n\t\t\texpectedData: `[{\n\t\t\t\t\"id\": \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\"flight_number\": 1234,\n\t\t\t\t\"aircraft\": {\"id\": \"320\", \"updated_at\": \"2020-01-01T15:00:00Z\"},\n\t\t\t\t\"status\": \"SCHEDULED\",\n\t\t\t\t\"departure_status\": \"ON_TIME\",\n\t\t\t\t\"arrival_status\": \"ON_TIME\",\n\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"expected_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"actual_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"scheduled_arrival_at\":\"2023-11-13T12:00:00Z\",\n\t\t\t\t\"expected_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\"actual_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\"codeshare\": [{\"airline\": {\"designator\": \"AF\"}, \"flight_number\": 5678}]\n\t\t\t}]`,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.description, func(t *testing.T) {\n\t\t\tsrv, mockSvc := startTestServer(t)\n\t\t\tdefer srv.Close()\n\n\t\t\tmockSvc.EXPECT().\n\t\t\t\tGetBatch(gomock.Any(), tc.expectedIDs).\n\t\t\t\tReturn(tc.mockFlights, tc.mockErr).\n\t\t\t\tTimes(tc.expectedCallTimes)\n\n\t\t\tresp, err := http.Get(srv.URL + tc.path)\n\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.Equal(t, tc.expectedStatusCode, resp.StatusCode)\n\n\t\t\tvar res xhttp.Response[*[]v0.Flight]\n\t\t\trequire.NoError(t, json.NewDecoder(resp.Body).Decode(&res))\n\t\t\tassert.Equal(t, tc.expectedMetadata, res.Metadata)\n\n\t\t\tresBytes, err := json.Marshal(res.Data)\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.JSONEq(t, tc.expectedData, string(resBytes))\n\t\t})\n\t}\n}\n", "n_tokens": 1411, "primary_symbol": "", "primary_kind": "", "primary_span": [21, 147], "def_symbols": [], "symbols": ["testCases", "struct", "description", "string", "path", "mockFlights", "schedules", "Flight", "mockErr", "error", "expectedIDs", "expectedStatusCode", "int", "expectedMetadata", "xhttp", "Metadata", "expectedData", "expectedCallTimes", "should", "return", "when", "unexpected", "occures", "flights", "batch", "ids", "errors", "New", "boooom", "Code", "internal_error", "Message", "Something", "went", "wrong", "please", "try", "again", "later", "null", "empty", "array", "flight", "cannot", "found", "Here", "are", "the", "details", "requested", "FlightID", "ConnectingFlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDG", "ArrivalAirport", "AMS", "Aircraft", "UpdatedAt", "time", "Date", "UTC", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusOnTime", "ArrivalStatus", "ScheduledDepartureAt", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Codeshare", "flight_number", "aircraft", "updated_at", "status", "SCHEDULED", "departure_status", "ON_TIME", "arrival_status", "airline", "designator", "departure_airport", "arrival_airport", "scheduled_departure_at", "expected_departure_at", "actual_departure_at", "scheduled_arrival_at", "expected_arrival_at", "actual_arrival_at", "codeshare", "for", "range", "Run", "func", "testing", "srv", "mockSvc", "startTestServer", "defer", "Close", "EXPECT", "GetBatch", "gomock", "Any", "Return", "Times", "resp", "err", "http", "Get", "URL", "require", "NoError", "assert", "Equal", "StatusCode", "var", "res", "Response", "json", "NewDecoder", "Body", "Decode", "resBytes", "Marshal", "Data", "JSONEq"], "doc_head": "\ttestCases := []struct {\n\t\tdescription        string\n\t\tpath               string\n\t\tmockFlights        []*schedules.Flight\n\t\tmockErr            error\n\t\texpectedIDs        []string\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdescription:        \"it should return 500 when when an unexpected error occures\",\n\t\t\tpath:               \"/v0/flights/batch?ids[]=20231113_AA_2301_CDG_AMS\",\n\t\t\tmockErr:            errors.New(\"boooom\"),\n\t\t\texpectedIDs:        []string{\"20231113_AA_2301_CDG_AMS\"},\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 500,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdescription:        \"it should return an empty array if flight(s) cannot be found\",\n\t\t\tpath:               \"/v0/flights/batch?ids[]=20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedIDs:        []string{\"20231113_AA_2301_CDG_AMS\"},\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 200,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"ok\",\n\t\t\t\tMessage: \"Here are the details of the requested batch of flights.\",\n\t\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airport_flight_board.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airport_flight_board.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airport_flight_board.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package v0\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype (\n\tairportFlightBoardType    string", "n_tokens": 97, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "import", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap", "net", "http", "time", "type", "airportFlightBoardType", "string"], "doc_head": "package v0\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\ntype (\n\tairportFlightBoardType    string"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airport_flight_board.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airport_flight_board.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airport_flight_board.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 16, "end_line": 33, "text": "\tairportFlightBoardRequest struct {\n\t\tAirport  string                 `form:\"filter[airport]\" binding:\"required\"`\n\t\tType     airportFlightBoardType `form:\"filter[type]\" binding:\"required,oneof=departures arrivals\"`\n\t\tDate     string                 `form:\"filter[date]\" binding:\"required\"`\n\t\tLimit    uint                   `form:\"page[size],default=10\" binding:\"min=2,max=15\"`\n\t\tNextPage *string                `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)\n\nfunc (t airportFlightBoardType) toDomain() schedules.FlightBoardType {\n\tswitch t {\n\tcase \"arrivals\":\n\t\treturn schedules.FlightBoardTypeArrivals\n\tdefault:\n\t\treturn schedules.FlightBoardTypeDepartures\n\t}\n}\n", "n_tokens": 164, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [25, 33], "def_symbols": ["toDomain"], "symbols": ["toDomain", "airportFlightBoardRequest", "struct", "Airport", "string", "form", "filter", "airport", "binding", "required", "Type", "airportFlightBoardType", "type", "oneof", "departures", "arrivals", "Date", "date", "Limit", "uint", "page", "size", "default", "min", "max", "NextPage", "next", "omitempty", "func", "schedules", "FlightBoardType", "switch", "case", "return", "FlightBoardTypeArrivals", "FlightBoardTypeDepartures"], "doc_head": "\tairportFlightBoardRequest struct {\n\t\tAirport  string                 `form:\"filter[airport]\" binding:\"required\"`\n\t\tType     airportFlightBoardType `form:\"filter[type]\" binding:\"required,oneof=departures arrivals\"`\n\t\tDate     string                 `form:\"filter[date]\" binding:\"required\"`\n\t\tLimit    uint                   `form:\"page[size],default=10\" binding:\"min=2,max=15\"`\n\t\tNextPage *string                `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)\nfunc (t airportFlightBoardType) toDomain() schedules.FlightBoardType {\n\tswitch t {\n\tcase \"arrivals\":\n\t\treturn schedules.FlightBoardTypeArrivals\n\tdefault:\n\t\treturn schedules.FlightBoardTypeDepartures\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airport_flight_board.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airport_flight_board.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airport_flight_board.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 34, "end_line": 73, "text": "func (h *RestHandler) airportFlightBoard(c *gin.Context) {\n\tvar query airportFlightBoardRequest\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\n\tstart, err := time.Parse(time.DateOnly, query.Date)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\n\tq := &schedules.AirportFlightBoardQuery{\n\t\tAirport: query.Airport,\n\t\tDate:    start,\n\t\tType:    query.Type.toDomain(),\n\t\tCursor:  query.NextPage,\n\t\tLimit:   query.Limit,\n\t}\n\n\tpage, err := h.svc.GetAirportFlightBoard(c, q)\n\tif err != nil {\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tvar items []*Flight\n\tfor _, f := range page.Items {\n\t\titems = append(items, h.toFlight(f, locale, false))\n\t}\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Flights retrieved successfully.\", query.Limit, page.Next),\n\t)\n}\n", "n_tokens": 276, "primary_symbol": "airportFlightBoard", "primary_kind": "function", "primary_span": [34, 73], "def_symbols": ["airportFlightBoard"], "symbols": ["airportFlightBoard", "func", "RestHandler", "gin", "Context", "var", "query", "airportFlightBoardRequest", "err", "ShouldBindQuery", "nil", "log", "Error", "Cannot", "bind", "request", "zap", "ErrRequestBindingFailed", "return", "start", "time", "Parse", "DateOnly", "Date", "ErrParsingDate", "schedules", "AirportFlightBoardQuery", "Airport", "Type", "toDomain", "Cursor", "NextPage", "Limit", "page", "svc", "GetAirportFlightBoard", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "items", "Flight", "for", "range", "Items", "append", "toFlight", "false", "PureJSON", "http", "StatusOK", "xhttp", "NewPaginatedResponse", "Flights", "retrieved", "successfully", "Next"], "doc_head": "func (h *RestHandler) airportFlightBoard(c *gin.Context) {\n\tvar query airportFlightBoardRequest\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\tstart, err := time.Parse(time.DateOnly, query.Date)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\tq := &schedules.AirportFlightBoardQuery{\n\t\tAirport: query.Airport,\n\t\tDate:    start,\n\t\tType:    query.Type.toDomain(),\n\t\tCursor:  query.NextPage,\n\t\tLimit:   query.Limit,\n\t}\n\tpage, err := h.svc.GetAirportFlightBoard(c, q)\n\tif err != nil {\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tvar items []*Flight\n\tfor _, f := range page.Items {\n\t\titems = append(items, h.toFlight(f, locale, false))\n\t}\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Flights retrieved successfully.\", query.Limit, page.Next),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight.go", "rel_path": "internal/schedules/adapter/handler/http/v0/random_flight.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 14, "text": "package v0\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 88, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 14], "def_symbols": [], "symbols": ["package", "import", "net", "http", "time", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap"], "doc_head": "package v0\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight.go", "rel_path": "internal/schedules/adapter/handler/http/v0/random_flight.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 15, "end_line": 37, "text": "func (h *RestHandler) getRandomFlight(c *gin.Context) {\n\tq := &schedules.RandomFlightQuery{\n\t\tDepartureDate:          time.Now(),\n\t\tMinDurationToDeparture: time.Hour + 5*time.Minute,\n\t\tMaxDurationToDeparture: 3*time.Hour + 5*time.Minute,\n\t\tMaxFlightDuration:      8 * time.Hour,\n\t}\n\tf, err := h.svc.GetRandomFlight(c, q)\n\tif err != nil {\n\t\tlog.Error(c, \"An error occurred while retrieving a random flight.\", zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tfr := h.toFlight(f, locale, true)\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse(fr, \"ok\", \"Here are the details of a random flight.\"),\n\t)\n}\n", "n_tokens": 194, "primary_symbol": "getRandomFlight", "primary_kind": "function", "primary_span": [15, 37], "def_symbols": ["getRandomFlight"], "symbols": ["getRandomFlight", "func", "RestHandler", "gin", "Context", "schedules", "RandomFlightQuery", "DepartureDate", "time", "Now", "MinDurationToDeparture", "Hour", "Minute", "MaxDurationToDeparture", "MaxFlightDuration", "err", "svc", "GetRandomFlight", "nil", "log", "Error", "error", "occurred", "while", "retrieving", "random", "flight", "zap", "return", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "toFlight", "true", "PureJSON", "http", "StatusOK", "xhttp", "NewResponse", "Here", "are", "the", "details"], "doc_head": "func (h *RestHandler) getRandomFlight(c *gin.Context) {\n\tq := &schedules.RandomFlightQuery{\n\t\tDepartureDate:          time.Now(),\n\t\tMinDurationToDeparture: time.Hour + 5*time.Minute,\n\t\tMaxDurationToDeparture: 3*time.Hour + 5*time.Minute,\n\t\tMaxFlightDuration:      8 * time.Hour,\n\t}\n\tf, err := h.svc.GetRandomFlight(c, q)\n\tif err != nil {\n\t\tlog.Error(c, \"An error occurred while retrieving a random flight.\", zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tfr := h.toFlight(f, locale, true)\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse(fr, \"ok\", \"Here are the details of a random flight.\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package v0\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\ntype (", "n_tokens": 90, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "import", "net", "http", "time", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap", "type"], "doc_head": "package v0\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 16, "end_line": 24, "text": "\tflightDesignatorQuery struct {\n\t\tAirline       string  `form:\"filter[airline]\" binding:\"required,gte=1,lte=3\"`\n\t\tNumber        int     `form:\"filter[number]\" binding:\"required,gte=1,lte=9999\"`\n\t\tDepartureDate string  `form:\"filter[departure_date]\" binding:\"required\"`\n\t\tLimit         uint    `form:\"page[size],default=15\" binding:\"min=2,max=15\"`\n\t\tNextPage      *string `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)\n", "n_tokens": 128, "primary_symbol": "", "primary_kind": "", "primary_span": [16, 24], "def_symbols": [], "symbols": ["flightDesignatorQuery", "struct", "Airline", "string", "form", "filter", "airline", "binding", "required", "gte", "lte", "Number", "int", "number", "DepartureDate", "departure_date", "Limit", "uint", "page", "size", "default", "min", "max", "NextPage", "next", "omitempty"], "doc_head": "\tflightDesignatorQuery struct {\n\t\tAirline       string  `form:\"filter[airline]\" binding:\"required,gte=1,lte=3\"`\n\t\tNumber        int     `form:\"filter[number]\" binding:\"required,gte=1,lte=9999\"`\n\t\tDepartureDate string  `form:\"filter[departure_date]\" binding:\"required\"`\n\t\tLimit         uint    `form:\"page[size],default=15\" binding:\"min=2,max=15\"`\n\t\tNextPage      *string `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_by_flight_designator.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 25, "end_line": 65, "text": "func (h *RestHandler) getByFlightCode(c *gin.Context) {\n\tvar query flightDesignatorQuery\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\n\tstart, err := time.Parse(time.DateOnly, query.DepartureDate)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\n\treq := &schedules.FlightDesignatorQuery{\n\t\tAirline:       query.Airline,\n\t\tNumber:        query.Number,\n\t\tDepartureDate: start,\n\t\tCursor:        query.NextPage,\n\t\tLimit:         query.Limit,\n\t}\n\n\tpage, err := h.svc.GetByFlightDesignator(c, req)\n\tif err != nil {\n\t\tlog.Error(c, \"An error occurred while retrieving a flight.\", zap.Any(\"req\", req), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\titems := make([]*Schedule, 0)\n\tfor _, s := range page.Items {\n\t\titems = append(items, h.toSchedule(s, locale))\n\t}\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Here are the schedules matching the given criteria.\", req.Limit, page.Next),\n\t)\n}\n", "n_tokens": 312, "primary_symbol": "getByFlightCode", "primary_kind": "function", "primary_span": [25, 65], "def_symbols": ["getByFlightCode"], "symbols": ["getByFlightCode", "func", "RestHandler", "gin", "Context", "var", "query", "flightDesignatorQuery", "err", "ShouldBindQuery", "nil", "log", "Error", "Cannot", "bind", "request", "zap", "ErrRequestBindingFailed", "return", "start", "time", "Parse", "DateOnly", "DepartureDate", "ErrParsingDate", "req", "schedules", "FlightDesignatorQuery", "Airline", "Number", "Cursor", "NextPage", "Limit", "page", "svc", "GetByFlightDesignator", "error", "occurred", "while", "retrieving", "flight", "Any", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "items", "make", "Schedule", "for", "range", "Items", "append", "toSchedule", "PureJSON", "http", "StatusOK", "xhttp", "NewPaginatedResponse", "Here", "are", "the", "matching", "given", "criteria", "Next"], "doc_head": "func (h *RestHandler) getByFlightCode(c *gin.Context) {\n\tvar query flightDesignatorQuery\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\tstart, err := time.Parse(time.DateOnly, query.DepartureDate)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\treq := &schedules.FlightDesignatorQuery{\n\t\tAirline:       query.Airline,\n\t\tNumber:        query.Number,\n\t\tDepartureDate: start,\n\t\tCursor:        query.NextPage,\n\t\tLimit:         query.Limit,\n\t}\n\tpage, err := h.svc.GetByFlightDesignator(c, req)\n\tif err != nil {\n\t\tlog.Error(c, \"An error occurred while retrieving a flight.\", zap.Any(\"req\", req), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\titems := make([]*Schedule, 0)\n\tfor _, s := range page.Items {\n\t\titems = append(items, h.toSchedule(s, locale))\n\t}\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Here are the schedules matching the given criteria.\", req.Limit, page.Next),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_flight_board.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_flight_board.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airline_flight_board.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package v0\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype (\n\tairlineFlightBoardRequest struct {\n\t\tAirline  string  `form:\"filter[airline]\" binding:\"required\"`\n\t\tDate     string  `form:\"filter[date]\" binding:\"required\"`\n\t\tLimit    uint    `form:\"page[size],default=10\" binding:\"min=2,max=15\"`\n\t\tNextPage *string `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)\n", "n_tokens": 181, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 22], "def_symbols": [], "symbols": ["package", "import", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap", "net", "http", "time", "type", "airlineFlightBoardRequest", "struct", "Airline", "string", "form", "filter", "airline", "binding", "required", "Date", "date", "Limit", "uint", "page", "size", "default", "min", "max", "NextPage", "next", "omitempty"], "doc_head": "package v0\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\ntype (\n\tairlineFlightBoardRequest struct {\n\t\tAirline  string  `form:\"filter[airline]\" binding:\"required\"`\n\t\tDate     string  `form:\"filter[date]\" binding:\"required\"`\n\t\tLimit    uint    `form:\"page[size],default=10\" binding:\"min=2,max=15\"`\n\t\tNextPage *string `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_flight_board.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_flight_board.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airline_flight_board.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 61, "text": "func (h *RestHandler) airlineFlightBoard(c *gin.Context) {\n\tvar query airlineFlightBoardRequest\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\n\tstart, err := time.Parse(time.DateOnly, query.Date)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\n\tq := &schedules.AirlineFlightBoardQuery{\n\t\tAirline: query.Airline,\n\t\tDate:    start,\n\t\tCursor:  query.NextPage,\n\t\tLimit:   query.Limit,\n\t}\n\n\tpage, err := h.svc.GetAirlineFlightBoard(c, q)\n\tif err != nil {\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tvar items []*Flight\n\tfor _, f := range page.Items {\n\t\titems = append(items, h.toFlight(f, locale, false))\n\t}\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Flights retrieved successfully.\", query.Limit, page.Next),\n\t)\n}\n", "n_tokens": 268, "primary_symbol": "airlineFlightBoard", "primary_kind": "function", "primary_span": [23, 61], "def_symbols": ["airlineFlightBoard"], "symbols": ["airlineFlightBoard", "func", "RestHandler", "gin", "Context", "var", "query", "airlineFlightBoardRequest", "err", "ShouldBindQuery", "nil", "log", "Error", "Cannot", "bind", "request", "zap", "ErrRequestBindingFailed", "return", "start", "time", "Parse", "DateOnly", "Date", "ErrParsingDate", "schedules", "AirlineFlightBoardQuery", "Airline", "Cursor", "NextPage", "Limit", "page", "svc", "GetAirlineFlightBoard", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "items", "Flight", "for", "range", "Items", "append", "toFlight", "false", "PureJSON", "http", "StatusOK", "xhttp", "NewPaginatedResponse", "Flights", "retrieved", "successfully", "Next"], "doc_head": "func (h *RestHandler) airlineFlightBoard(c *gin.Context) {\n\tvar query airlineFlightBoardRequest\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\tstart, err := time.Parse(time.DateOnly, query.Date)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\tq := &schedules.AirlineFlightBoardQuery{\n\t\tAirline: query.Airline,\n\t\tDate:    start,\n\t\tCursor:  query.NextPage,\n\t\tLimit:   query.Limit,\n\t}\n\tpage, err := h.svc.GetAirlineFlightBoard(c, q)\n\tif err != nil {\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tvar items []*Flight\n\tfor _, f := range page.Items {\n\t\titems = append(items, h.toFlight(f, locale, false))\n\t}\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Flights retrieved successfully.\", query.Limit, page.Next),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search.go", "rel_path": "internal/schedules/adapter/handler/http/v0/search.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package v0\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\ntype (", "n_tokens": 90, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 16], "def_symbols": [], "symbols": ["package", "import", "net", "http", "time", "impalastudios", "com", "aviation", "schedules", "pkg", "i18n", "github", "gin", "gonic", "internal", "xhttp", "log", "uber", "org", "zap", "type"], "doc_head": "package v0\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\ntype ("}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search.go", "rel_path": "internal/schedules/adapter/handler/http/v0/search.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 17, "end_line": 28, "text": "\tflightSearchQuery struct {\n\t\tDepartureAirport string  `form:\"filter[departure_airport]\" binding:\"required_without_all=ArrivalAirport DepartureCity ArrivalCity,excluded_with=DepartureCity\"`\n\t\tArrivalAirport   string  `form:\"filter[arrival_airport]\" binding:\"required_without_all=DepartureAirport DepartureCity ArrivalCity,excluded_with=ArrivalCity\"`\n\t\tDepartureCity    int64   `form:\"filter[departure_city]\" binding:\"required_without_all=DepartureAirport ArrivalAirport ArrivalCity,excluded_with=DepartureAirport\"`\n\t\tArrivalCity      int64   `form:\"filter[arrival_city]\" binding:\"required_without_all=DepartureAirport ArrivalAirport DepartureCity,excluded_with=ArrivalAirport\"`\n\t\tDepartureDate    string  `form:\"filter[departure_date]\" binding:\"required\"`\n\t\tAirline          string  `form:\"filter[airline]\"`\n\t\tLimit            uint    `form:\"page[size],default=10\" binding:\"min=2,max=15\"`\n\t\tNextPage         *string `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)\n", "n_tokens": 250, "primary_symbol": "", "primary_kind": "", "primary_span": [17, 28], "def_symbols": [], "symbols": ["flightSearchQuery", "struct", "DepartureAirport", "string", "form", "filter", "departure_airport", "binding", "required_without_all", "ArrivalAirport", "DepartureCity", "ArrivalCity", "excluded_with", "arrival_airport", "int64", "departure_city", "arrival_city", "DepartureDate", "departure_date", "required", "Airline", "airline", "Limit", "uint", "page", "size", "default", "min", "max", "NextPage", "next", "omitempty"], "doc_head": "\tflightSearchQuery struct {\n\t\tDepartureAirport string  `form:\"filter[departure_airport]\" binding:\"required_without_all=ArrivalAirport DepartureCity ArrivalCity,excluded_with=DepartureCity\"`\n\t\tArrivalAirport   string  `form:\"filter[arrival_airport]\" binding:\"required_without_all=DepartureAirport DepartureCity ArrivalCity,excluded_with=ArrivalCity\"`\n\t\tDepartureCity    int64   `form:\"filter[departure_city]\" binding:\"required_without_all=DepartureAirport ArrivalAirport ArrivalCity,excluded_with=DepartureAirport\"`\n\t\tArrivalCity      int64   `form:\"filter[arrival_city]\" binding:\"required_without_all=DepartureAirport ArrivalAirport DepartureCity,excluded_with=ArrivalAirport\"`\n\t\tDepartureDate    string  `form:\"filter[departure_date]\" binding:\"required\"`\n\t\tAirline          string  `form:\"filter[airline]\"`\n\t\tLimit            uint    `form:\"page[size],default=10\" binding:\"min=2,max=15\"`\n\t\tNextPage         *string `form:\"page[next]\" binding:\"omitempty,required,min=1\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search.go", "rel_path": "internal/schedules/adapter/handler/http/v0/search.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 29, "end_line": 86, "text": "func (h *RestHandler) search(c *gin.Context) {\n\tvar query flightSearchQuery\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\n\tstart, err := time.Parse(time.DateOnly, query.DepartureDate)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\n\treq := &schedules.FlightSearchQuery{\n\t\tDepartureDate: start,\n\t\tLimit:         query.Limit,\n\t\tCursor:        query.NextPage,\n\t}\n\n\tif query.DepartureCity > 0 {\n\t\treq.DepartureCity = query.DepartureCity\n\t} else if query.DepartureAirport != \"\" {\n\t\treq.DepartureAirports = []string{query.DepartureAirport}\n\t}\n\n\tif query.ArrivalCity > 0 {\n\t\treq.ArrivalCity = query.ArrivalCity\n\t} else if query.ArrivalAirport != \"\" {\n\t\treq.ArrivalAirports = []string{query.ArrivalAirport}\n\t}\n\n\tif query.Airline != \"\" {\n\t\treq.Airline = &query.Airline\n\t}\n\n\tlog.Debug(c, \"New incoming search request.\", zap.Any(\"request\", req))\n\n\tpage, err := h.svc.Search(c, req)\n\n\tif err != nil {\n\t\tlog.Error(c, \"Cannot search schedules.\", zap.Any(\"request\", req), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tvar items []*Schedule\n\tfor _, s := range page.Items {\n\t\titems = append(items, h.toSchedule(s, locale))\n\t}\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewPaginatedResponse(items, \"ok\", \"Here are the schedules matching the given criteria.\", req.Limit, page.Next),\n\t)\n}\n", "n_tokens": 424, "primary_symbol": "search", "primary_kind": "function", "primary_span": [29, 86], "def_symbols": ["search"], "symbols": ["search", "func", "RestHandler", "gin", "Context", "var", "query", "flightSearchQuery", "err", "ShouldBindQuery", "nil", "log", "Error", "Cannot", "bind", "request", "zap", "ErrRequestBindingFailed", "return", "start", "time", "Parse", "DateOnly", "DepartureDate", "ErrParsingDate", "req", "schedules", "FlightSearchQuery", "Limit", "Cursor", "NextPage", "DepartureCity", "else", "DepartureAirport", "DepartureAirports", "string", "ArrivalCity", "ArrivalAirport", "ArrivalAirports", "Airline", "Debug", "New", "incoming", "Any", "page", "svc", "Search", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "items", "Schedule", "for", "range", "Items", "append", "toSchedule", "PureJSON", "http", "StatusOK", "xhttp", "NewPaginatedResponse", "Here", "are", "the", "matching", "given", "criteria", "Next"], "doc_head": "func (h *RestHandler) search(c *gin.Context) {\n\tvar query flightSearchQuery\n\tif err := c.ShouldBindQuery(&query); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\tstart, err := time.Parse(time.DateOnly, query.DepartureDate)\n\tif err != nil {\n\t\t_ = c.Error(ErrParsingDate)\n\t\treturn\n\t}\n\treq := &schedules.FlightSearchQuery{\n\t\tDepartureDate: start,\n\t\tLimit:         query.Limit,\n\t\tCursor:        query.NextPage,\n\t}\n\tif query.DepartureCity > 0 {\n\t\treq.DepartureCity = query.DepartureCity\n\t} else if query.DepartureAirport != \"\" {\n\t\treq.DepartureAirports = []string{query.DepartureAirport}\n\t}\n\tif query.ArrivalCity > 0 {\n\t\treq.ArrivalCity = query.ArrivalCity\n\t} else if query.ArrivalAirport != \"\" {\n\t\treq.ArrivalAirports = []string{query.ArrivalAirport}\n\t}\n\tif query.Airline != \"\" {\n\t\treq.Airline = &query.Airline\n\t}\n\tlog.Debug(c, \"New incoming search request.\", zap.Any(\"request\", req))\n\tpage, err := h.svc.Search(c, req)\n\tif err != nil {\n\t\tlog.Error(c, \"Cannot search schedules.\", zap.Any(\"request\", req), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tvar items ["}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 13, "text": "package v0\n\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n)\n", "n_tokens": 94, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 13], "def_symbols": [], "symbols": ["package", "import", "github", "com", "cockroachdb", "errors", "gin", "gonic", "impalastudios", "aviation", "schedules", "internal", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap", "net", "http"], "doc_head": "package v0\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 14, "end_line": 38, "text": "func (h *RestHandler) getFlight(c *gin.Context) {\n\tid := c.Param(\"id\")\n\n\tf, err := h.svc.Get(c, id)\n\tif err != nil {\n\t\tif errors.Is(err, schedules.ErrFlightNotFound) {\n\t\t\tlog.Debug(c, \"Flight cannot be found.\", zap.String(\"id\", id))\n\t\t\t_ = c.Error(ErrFlightNotFound)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Error(c, \"An error occurred while retrieving a flight.\", zap.String(\"id\", id), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tfr := h.toFlight(f, locale, true)\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse(fr, \"ok\", \"Here are the details of the requested flight.\"),\n\t)\n}\n", "n_tokens": 184, "primary_symbol": "getFlight", "primary_kind": "function", "primary_span": [14, 38], "def_symbols": ["getFlight"], "symbols": ["getFlight", "func", "RestHandler", "gin", "Context", "Param", "err", "svc", "Get", "nil", "errors", "schedules", "ErrFlightNotFound", "log", "Debug", "Flight", "cannot", "found", "zap", "String", "Error", "return", "error", "occurred", "while", "retrieving", "flight", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "toFlight", "true", "PureJSON", "http", "StatusOK", "xhttp", "NewResponse", "Here", "are", "the", "details", "requested"], "doc_head": "func (h *RestHandler) getFlight(c *gin.Context) {\n\tid := c.Param(\"id\")\n\tf, err := h.svc.Get(c, id)\n\tif err != nil {\n\t\tif errors.Is(err, schedules.ErrFlightNotFound) {\n\t\t\tlog.Debug(c, \"Flight cannot be found.\", zap.String(\"id\", id))\n\t\t\t_ = c.Error(ErrFlightNotFound)\n\t\t\treturn\n\t\t}\n\t\tlog.Error(c, \"An error occurred while retrieving a flight.\", zap.String(\"id\", id), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tfr := h.toFlight(f, locale, true)\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse(fr, \"ok\", \"Here are the details of the requested flight.\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 29, "text": "package v0\n\nimport \"time\"\n\ntype (\n\tCodeshareAirline struct {\n\t\tID         string            `json:\"id,omitempty\"`\n\t\tDesignator string            `json:\"designator\"`\n\t\tName       string            `json:\"name,omitempty\"`\n\t\tImages     map[string]string `json:\"images,omitempty\"`\n\t}\n\tCodeshare struct {\n\t\tAirline      *CodeshareAirline `json:\"airline\"`\n\t\tFlightNumber int               `json:\"flight_number\"`\n\t}\n\n\tCountry struct {\n\t\tID   string `json:\"id,omitempty\"`\n\t\tName string `json:\"name,omitempty\"`\n\t}\n\n\tCity struct {\n\t\tID       int      `json:\"id,omitempty\"`\n\t\tName     string   `json:\"name,omitempty\"`\n\t\tTimezone string   `json:\"timezone,omitempty\"`\n\t\tState    *string  `json:\"state,omitempty\"`\n\t\tCountry  *Country `json:\"country,omitempty\"`\n\t}\n", "n_tokens": 189, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 29], "def_symbols": [], "symbols": ["package", "import", "time", "type", "CodeshareAirline", "struct", "string", "json", "omitempty", "Designator", "designator", "Name", "name", "Images", "map", "images", "Codeshare", "Airline", "airline", "FlightNumber", "int", "flight_number", "Country", "City", "Timezone", "timezone", "State", "state", "country"], "doc_head": "package v0\nimport \"time\"\ntype (\n\tCodeshareAirline struct {\n\t\tID         string            `json:\"id,omitempty\"`\n\t\tDesignator string            `json:\"designator\"`\n\t\tName       string            `json:\"name,omitempty\"`\n\t\tImages     map[string]string `json:\"images,omitempty\"`\n\t}\n\tCodeshare struct {\n\t\tAirline      *CodeshareAirline `json:\"airline\"`\n\t\tFlightNumber int               `json:\"flight_number\"`\n\t}\n\tCountry struct {\n\t\tID   string `json:\"id,omitempty\"`\n\t\tName string `json:\"name,omitempty\"`\n\t}\n\tCity struct {\n\t\tID       int      `json:\"id,omitempty\"`\n\t\tName     string   `json:\"name,omitempty\"`\n\t\tTimezone string   `json:\"timezone,omitempty\"`\n\t\tState    *string  `json:\"state,omitempty\"`\n\t\tCountry  *Country `json:\"country,omitempty\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 30, "end_line": 43, "text": "\tAirport struct {\n\t\tID             string  `json:\"id,omitempty\"`\n\t\tDesignator     string  `json:\"designator\"`\n\t\tIATA           *string `json:\"iata,omitempty\"`\n\t\tICAO           *string `json:\"icao,omitempty\"`\n\t\tFAA            *string `json:\"faa,omitempty\"`\n\t\tClassification int     `json:\"classification,omitempty\"`\n\t\tCity           *City   `json:\"city,omitempty\"`\n\t\tName           string  `json:\"name,omitempty\"`\n\t\tShortName      string  `json:\"short_name,omitempty\"`\n\t\tLatitude       float64 `json:\"latitude,omitempty\"`\n\t\tLongitude      float64 `json:\"longitude,omitempty\"`\n\t}\n", "n_tokens": 144, "primary_symbol": "", "primary_kind": "", "primary_span": [30, 43], "def_symbols": [], "symbols": ["Airport", "struct", "string", "json", "omitempty", "Designator", "designator", "IATA", "iata", "ICAO", "icao", "FAA", "faa", "Classification", "int", "classification", "City", "city", "Name", "name", "ShortName", "short_name", "Latitude", "float64", "latitude", "Longitude", "longitude"], "doc_head": "\tAirport struct {\n\t\tID             string  `json:\"id,omitempty\"`\n\t\tDesignator     string  `json:\"designator\"`\n\t\tIATA           *string `json:\"iata,omitempty\"`\n\t\tICAO           *string `json:\"icao,omitempty\"`\n\t\tFAA            *string `json:\"faa,omitempty\"`\n\t\tClassification int     `json:\"classification,omitempty\"`\n\t\tCity           *City   `json:\"city,omitempty\"`\n\t\tName           string  `json:\"name,omitempty\"`\n\t\tShortName      string  `json:\"short_name,omitempty\"`\n\t\tLatitude       float64 `json:\"latitude,omitempty\"`\n\t\tLongitude      float64 `json:\"longitude,omitempty\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 44, "end_line": 54, "text": "\tAirline struct {\n\t\tID             string            `json:\"id,omitempty\"`\n\t\tDesignator     string            `json:\"designator\"`\n\t\tIATA           *string           `json:\"iata,omitempty\"`\n\t\tICAO           *string           `json:\"icao,omitempty\"`\n\t\tClassification int               `json:\"classification,omitempty\"`\n\t\tName           string            `json:\"name,omitempty\"`\n\t\tImages         map[string]string `json:\"images,omitempty\"`\n\t\tWebsiteURL     *string           `json:\"website_url,omitempty\"`\n\t}\n", "n_tokens": 109, "primary_symbol": "", "primary_kind": "", "primary_span": [44, 54], "def_symbols": [], "symbols": ["Airline", "struct", "string", "json", "omitempty", "Designator", "designator", "IATA", "iata", "ICAO", "icao", "Classification", "int", "classification", "Name", "name", "Images", "map", "images", "WebsiteURL", "website_url"], "doc_head": "\tAirline struct {\n\t\tID             string            `json:\"id,omitempty\"`\n\t\tDesignator     string            `json:\"designator\"`\n\t\tIATA           *string           `json:\"iata,omitempty\"`\n\t\tICAO           *string           `json:\"icao,omitempty\"`\n\t\tClassification int               `json:\"classification,omitempty\"`\n\t\tName           string            `json:\"name,omitempty\"`\n\t\tImages         map[string]string `json:\"images,omitempty\"`\n\t\tWebsiteURL     *string           `json:\"website_url,omitempty\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 55, "end_line": 66, "text": "\tSpecification struct {\n\t\tEngine          *string  `json:\"engine,omitempty\"`\n\t\tAverageSpeed    *float32 `json:\"average_speed,omitempty\"`\n\t\tWideBody        *float32 `json:\"wide_body,omitempty\"`\n\t\tWingspan        *float32 `json:\"wingspan,omitempty\"`\n\t\tLength          *float32 `json:\"length,omitempty\"`\n\t\tHeight          *float32 `json:\"height,omitempty\"`\n\t\tSeatingCapacity *int     `json:\"seating_capacity,omitempty\"`\n\t\tFlightRange     *float32 `json:\"flight_range,omitempty\"`\n\t\tCrewSize        *int     `json:\"crew_size,omitempty\"`\n\t}\n", "n_tokens": 138, "primary_symbol": "", "primary_kind": "", "primary_span": [55, 66], "def_symbols": [], "symbols": ["Specification", "struct", "Engine", "string", "json", "engine", "omitempty", "AverageSpeed", "float32", "average_speed", "WideBody", "wide_body", "Wingspan", "wingspan", "Length", "length", "Height", "height", "SeatingCapacity", "int", "seating_capacity", "FlightRange", "flight_range", "CrewSize", "crew_size"], "doc_head": "\tSpecification struct {\n\t\tEngine          *string  `json:\"engine,omitempty\"`\n\t\tAverageSpeed    *float32 `json:\"average_speed,omitempty\"`\n\t\tWideBody        *float32 `json:\"wide_body,omitempty\"`\n\t\tWingspan        *float32 `json:\"wingspan,omitempty\"`\n\t\tLength          *float32 `json:\"length,omitempty\"`\n\t\tHeight          *float32 `json:\"height,omitempty\"`\n\t\tSeatingCapacity *int     `json:\"seating_capacity,omitempty\"`\n\t\tFlightRange     *float32 `json:\"flight_range,omitempty\"`\n\t\tCrewSize        *int     `json:\"crew_size,omitempty\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 67, "end_line": 77, "text": "\tAircraft struct {\n\t\tID            string            `json:\"id\"`\n\t\tType          string            `json:\"type,omitempty\"`\n\t\tName          string            `json:\"name,omitempty\"`\n\t\tDescription   string            `json:\"description,omitempty\"`\n\t\tWikipediaURL  string            `json:\"wikipedia_url,omitempty\"`\n\t\tImages        map[string]string `json:\"images,omitempty\"`\n\t\tSpecification *Specification    `json:\"specs,omitempty\"`\n\t\tUpdatedAt     *time.Time        `json:\"updated_at,omitempty\"`\n\t}\n", "n_tokens": 105, "primary_symbol": "", "primary_kind": "", "primary_span": [67, 77], "def_symbols": [], "symbols": ["Aircraft", "struct", "string", "json", "Type", "type", "omitempty", "Name", "name", "Description", "description", "WikipediaURL", "wikipedia_url", "Images", "map", "images", "Specification", "specs", "UpdatedAt", "time", "Time", "updated_at"], "doc_head": "\tAircraft struct {\n\t\tID            string            `json:\"id\"`\n\t\tType          string            `json:\"type,omitempty\"`\n\t\tName          string            `json:\"name,omitempty\"`\n\t\tDescription   string            `json:\"description,omitempty\"`\n\t\tWikipediaURL  string            `json:\"wikipedia_url,omitempty\"`\n\t\tImages        map[string]string `json:\"images,omitempty\"`\n\t\tSpecification *Specification    `json:\"specs,omitempty\"`\n\t\tUpdatedAt     *time.Time        `json:\"updated_at,omitempty\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 78, "end_line": 98, "text": "\tFlight struct {\n\t\tID                   int64       `json:\"-\"`\n\t\tFlightID             string      `json:\"id\"`\n\t\tConnectingFlightID   int64       `json:\"-\"`\n\t\tStatus               string      `json:\"status\"`\n\t\tDepartureStatus      string      `json:\"departure_status\"`\n\t\tArrivalStatus        string      `json:\"arrival_status\"`\n\t\tAirline              *Airline    `json:\"airline\"`\n\t\tFlightNumber         int         `json:\"flight_number\"`\n\t\tDepartureAirport     *Airport    `json:\"departure_airport\"`\n\t\tArrivalAirport       *Airport    `json:\"arrival_airport\"`\n\t\tAircraft             *Aircraft   `json:\"aircraft\"`\n\t\tScheduledDepartureAt time.Time   `json:\"scheduled_departure_at\"`\n\t\tExpectedDepartureAt  *time.Time  `json:\"expected_departure_at\"`\n\t\tActualDepartureAt    *time.Time  `json:\"actual_departure_at\"`\n\t\tScheduledArrivalAt   time.Time   `json:\"scheduled_arrival_at\"`\n\t\tExpectedArrivalAt    *time.Time  `json:\"expected_arrival_at\"`\n\t\tActualArrivalAt      *time.Time  `json:\"actual_arrival_at\"`\n\t\tCodeshare            []Codeshare `json:\"codeshare,omitempty\"`\n\t}\n", "n_tokens": 277, "primary_symbol": "", "primary_kind": "", "primary_span": [78, 98], "def_symbols": [], "symbols": ["Flight", "struct", "int64", "json", "FlightID", "string", "ConnectingFlightID", "Status", "status", "DepartureStatus", "departure_status", "ArrivalStatus", "arrival_status", "Airline", "airline", "FlightNumber", "int", "flight_number", "DepartureAirport", "Airport", "departure_airport", "ArrivalAirport", "arrival_airport", "Aircraft", "aircraft", "ScheduledDepartureAt", "time", "Time", "scheduled_departure_at", "ExpectedDepartureAt", "expected_departure_at", "ActualDepartureAt", "actual_departure_at", "ScheduledArrivalAt", "scheduled_arrival_at", "ExpectedArrivalAt", "expected_arrival_at", "ActualArrivalAt", "actual_arrival_at", "Codeshare", "codeshare", "omitempty"], "doc_head": "\tFlight struct {\n\t\tID                   int64       `json:\"-\"`\n\t\tFlightID             string      `json:\"id\"`\n\t\tConnectingFlightID   int64       `json:\"-\"`\n\t\tStatus               string      `json:\"status\"`\n\t\tDepartureStatus      string      `json:\"departure_status\"`\n\t\tArrivalStatus        string      `json:\"arrival_status\"`\n\t\tAirline              *Airline    `json:\"airline\"`\n\t\tFlightNumber         int         `json:\"flight_number\"`\n\t\tDepartureAirport     *Airport    `json:\"departure_airport\"`\n\t\tArrivalAirport       *Airport    `json:\"arrival_airport\"`\n\t\tAircraft             *Aircraft   `json:\"aircraft\"`\n\t\tScheduledDepartureAt time.Time   `json:\"scheduled_departure_at\"`\n\t\tExpectedDepartureAt  *time.Time  `json:\"expected_departure_at\"`\n\t\tActualDepartureAt    *time.Time  `json:\"actual_departure_at\"`\n\t\tScheduledArrivalAt   time.Time   `json:\"scheduled_arrival_at\"`\n\t\tExpectedArrivalAt    *time.Time  `json:\"expected_arrival_at\"`\n\t\tActualArrivalAt      *time.Time  `json:\"actual_arrival_at\"`\n\t\tCodeshare            []Codeshare `json:\"codeshare,omitempty\"`\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/resources.go", "rel_path": "internal/schedules/adapter/handler/http/v0/resources.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 99, "end_line": 117, "text": "\tSchedule struct {\n\t\tDepartureAirport *Airport  `json:\"departure_airport\"`\n\t\tArrivalAirport   *Airport  `json:\"arrival_airport\"`\n\t\tAirline          *Airline  `json:\"airline\"`\n\t\tFlightNumber     int       `json:\"flight_number\"`\n\t\tFlights          []*Flight `json:\"flights\"`\n\t}\n\n\tUniqueRoutes struct {\n\t\tAirline *Airline `json:\"airline\"`\n\t\tRoutes  []*Route `json:\"routes\"`\n\t}\n\n\tRoute struct {\n\t\tA *Airport `json:\"a\"`\n\t\tB *Airport `json:\"b\"`\n\t}\n)\n", "n_tokens": 133, "primary_symbol": "", "primary_kind": "", "primary_span": [99, 117], "def_symbols": [], "symbols": ["Schedule", "struct", "DepartureAirport", "Airport", "json", "departure_airport", "ArrivalAirport", "arrival_airport", "Airline", "airline", "FlightNumber", "int", "flight_number", "Flights", "Flight", "flights", "UniqueRoutes", "Routes", "Route", "routes"], "doc_head": "\tSchedule struct {\n\t\tDepartureAirport *Airport  `json:\"departure_airport\"`\n\t\tArrivalAirport   *Airport  `json:\"arrival_airport\"`\n\t\tAirline          *Airline  `json:\"airline\"`\n\t\tFlightNumber     int       `json:\"flight_number\"`\n\t\tFlights          []*Flight `json:\"flights\"`\n\t}\n\tUniqueRoutes struct {\n\t\tAirline *Airline `json:\"airline\"`\n\t\tRoutes  []*Route `json:\"routes\"`\n\t}\n\tRoute struct {\n\t\tA *Airport `json:\"a\"`\n\t\tB *Airport `json:\"b\"`\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/search_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 19, "text": "package v0_test\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n)\n\nfunc TestSearch(t *testing.T) {", "n_tokens": 116, "primary_symbol": "TestSearch", "primary_kind": "function", "primary_span": [19, 19], "def_symbols": ["TestSearch"], "symbols": ["TestSearch", "package", "v0_test", "import", "encoding", "json", "errors", "net", "http", "testing", "time", "impalastudios", "com", "aviation", "schedules", "internal", "adapter", "handler", "github", "stretchr", "testify", "assert", "require", "pkg", "xhttp", "uber", "org", "mock", "gomock", "func"], "doc_head": "package v0_test\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n)\nfunc TestSearch(t *testing.T) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search_test.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/search_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/search_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 20, "end_line": 393, "text": "\ttestCases := []struct {\n\t\tdesc               string\n\t\treqPath            string\n\t\tmockSchedules      []*schedules.Schedule\n\t\tmockErr            error\n\t\texpectedQuery      *schedules.FlightSearchQuery\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdesc:               \"Invalid request, it should return a 400\",\n\t\t\treqPath:            \"/v0/search\",\n\t\t\texpectedQuery:      &schedules.FlightSearchQuery{},\n\t\t\texpectedStatusCode: http.StatusBadRequest,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"invalid_parameters\",\n\t\t\t\tMessage: \"The provided parameters are invalid.\",\n\t\t\t},\n\t\t\texpectedData: `null`,\n\t\t},\n\t\t{\n\t\t\tdesc:    \"Invalid start date format, it should return a 400\",\n\t\t\treqPath: \"/v0/search?filter[departure_airport]=AMS&filter[arrival_airport]=CDG&filter[departure_date]=2023-15-13\",\n\t\t\texpectedQuery: &schedules.FlightSearchQuery{\n\t\t\t\tDepartureAirports: []string{\"AMS\"},\n\t\t\t\tArrivalAirports:   []string{\"CDG\"},\n\t\t\t\tLimit:             10,\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusBadRequest,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"invalid_parameters\",\n\t\t\t\tMessage: \"The provided dates are invalid. Please use the format YYYY-MM-DD.\",\n\t\t\t},\n\t\t\texpectedData: `null`,\n\t\t},\n\t\t{\n\t\t\tdesc:    \"Something went wrong with the service, it should return a 500\",\n\t\t\treqPath: \"/v0/search?filter[departure_airport]=AMS&filter[arrival_airport]=CDG&filter[departure_date]=2023-11-13\",\n\t\t\tmockErr: errors.New(\"something went wrong\"),\n\t\t\texpectedQuery: &schedules.FlightSearchQuery{\n\t\t\t\tDepartureAirports: []string{\"AMS\"},\n\t\t\t\tArrivalAirports:   []string{\"CDG\"},\n\t\t\t\tDepartureDate:     time.Date(2023, 11, 13, 0, 0, 0, 0, time.UTC),\n\t\t\t\tLimit:             10,\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusInternalServerError,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later.\",\n\t\t\t},\n\t\t\texpectedData:      `null`,\n\t\t\texpectedCallTimes: 1,\n\t\t},\n\t\t{\n\t\t\tdesc:    \"Schedules found, it should return a 200\",\n\t\t\treqPath: \"/v0/search?filter[departure_airport]=CDG&filter[arrival_airport]=AMS&filter[departure_date]=2023-11-13\",\n\t\t\tmockSchedules: []*schedules.Schedule{\n\t\t\t\t{\n\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t},\n\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t},\n\t\t\t\t\tMainCarrier: &schedules.Airline{\n\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t},\n\t\t\t\t\tFlightNumber: 1234,\n\t\t\t\t\tFlights: []*schedules.Flight{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tID:                 1,\n\t\t\t\t\t\t\tFlightID:           \"20231113_KL_1234_CDG_AMS\",\n\t\t\t\t\t\t\tConnectingFlightID: 0,\n\t\t\t\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tStatus:          schedules.FlightOperationalStatusAirborne,\n\t\t\t\t\t\t\tDepartureStatus: schedules.FlightTimingStatusEarly,\n\t\t\t\t\t\t\tArrivalStatus:   schedules.FlightTimingStatusNoStatus,\n\t\t\t\t\t\t\tFlightNumber:    1234,\n\t\t\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\t\t\t\tID:        \"320\",\n\t\t\t\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"AF\"},\n\t\t\t\t\t\t\t\t\tFlightNumber: 5678,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t},\n\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t},\n\t\t\t\t\tMainCarrier: &schedules.Airline{\n\t\t\t\t\t\tDesignator: \"AA\",\n\t\t\t\t\t},\n\t\t\t\t\tFlightNumber: 2301,\n\t\t\t\t\tFlights: []*schedules.Flight{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tID:                 2,\n\t\t\t\t\t\t\tFlightID:           \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\t\t\tConnectingFlightID: 0,\n\t\t\t\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\t\t\t\tDesignator: \"AA\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tStatus:          schedules.FlightOperationalStatusDiverted,\n\t\t\t\t\t\t\tDepartureStatus: schedules.FlightTimingStatusNoStatus,\n\t\t\t\t\t\t\tArrivalStatus:   schedules.FlightTimingStatusNoStatus,\n\t\t\t\t\t\t\tFlightNumber:    2301,\n\t\t\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\t\t\t\tID:        \"B32\",\n\t\t\t\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 11, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 11, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 11, 15, 0, 0, time.UTC),\n\t\t\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 12, 10, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 12, 10, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 12, 25, 0, 0, time.UTC),\n\t\t\t\t\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"TH\"},\n\t\t\t\t\t\t\t\t\tFlightNumber: 1111,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t},\n\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t},\n\t\t\t\t\tMainCarrier: &schedules.Airline{\n\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t},\n\t\t\t\t\tFlightNumber: 2143,\n\t\t\t\t\tFlights: []*schedules.Flight{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tID:                 12,\n\t\t\t\t\t\t\tFlightID:           \"20231113_KL_2143_CDG_IST\",\n\t\t\t\t\t\t\tConnectingFlightID: 1,\n\t\t\t\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tStatus:          schedules.FlightOperationalStatusLanded,\n\t\t\t\t\t\t\tDepartureStatus: schedules.FlightTimingStatusDelayed,\n\t\t\t\t\t\t\tArrivalStatus:   schedules.FlightTimingStatusOnTime,\n\t\t\t\t\t\t\tFlightNumber:    2143,\n\t\t\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"IST\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\t\t\t\tID:        \"A320\",\n\t\t\t\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 15, 15, 0, 0, time.UTC),\n\t\t\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 17, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 17, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 17, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tID:                 21,\n\t\t\t\t\t\t\tFlightID:           \"20231113_KL_2143_IST_AMS\",\n\t\t\t\t\t\t\tConnectingFlightID: 1,\n\t\t\t\t\t\t\tStatus:             schedules.FlightOperationalStatusLanded,\n\t\t\t\t\t\t\tDepartureStatus:    schedules.FlightTimingStatusOnTime,\n\t\t\t\t\t\t\tArrivalStatus:      schedules.FlightTimingStatusEarly,\n\t\t\t\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFlightNumber: 2143,\n\t\t\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"IST\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\t\t\t\tID:        \"A320\",\n\t\t\t\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 17, 30, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 17, 30, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 17, 35, 0, 0, time.UTC),\n\t\t\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 19, 10, 0, 0, time.UTC),\n\t\t\t\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 19, 10, 0, 0, time.UTC),\n\t\t\t\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 19, 10, 0, 0, time.UTC),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectedQuery: &schedules.FlightSearchQuery{\n\t\t\t\tDepartureAirports: []string{\"CDG\"},\n\t\t\t\tArrivalAirports:   []string{\"AMS\"},\n\t\t\t\tDepartureDate:     time.Date(2023, 11, 13, 0, 0, 0, 0, time.UTC),\n\t\t\t\tLimit:             10,\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:       \"ok\",\n\t\t\t\tMessage:    \"Here are the schedules matching the given criteria.\",\n\t\t\t\tPagination: &xhttp.Pagination{Limit: 10, Next: nil},\n\t\t\t},\n\t\t\texpectedData: `[\n\t\t\t\t{\n\t\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\t\"flight_number\": 1234,\n\t\t\t\t\t\"flights\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\":\"20231113_KL_1234_CDG_AMS\",\n\t\t\t\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\t\t\t\"flight_number\": 1234,\n\t\t\t\t\t\t\t\"aircraft\": {\"id\": \"320\"},\n\t\t\t\t\t\t\t\"status\": \"AIRBORNE\",\n\t\t\t\t\t\t\t\"departure_status\": \"EARLY\",\n\t\t\t\t\t\t\t\"arrival_status\": \"NO_STATUS\",\n\t\t\t\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\t\t\t\"expected_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\t\t\t\"actual_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\t\t\t\"scheduled_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\t\t\t\"expected_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\t\t\t\"actual_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\t\t\t\"codeshare\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"airline\": {\"designator\": \"AF\"},\n\t\t\t\t\t\t\t\t\t\"flight_number\": 5678\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\t\"airline\": {\"designator\": \"AA\"},\n\t\t\t\t\t\"flight_number\": 2301,\n\t\t\t\t\t\"flights\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\":\"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\t\t\t\"airline\": {\"designator\": \"AA\"},\n\t\t\t\t\t\t\t\"flight_number\": 2301,\n\t\t\t\t\t\t\t\"aircraft\": {\"id\": \"B32\"},\n\t\t\t\t\t\t\t\"status\": \"DIVERTED\",\n\t\t\t\t\t\t\t\"departure_status\": \"NO_STATUS\",\n\t\t\t\t\t\t\t\"arrival_status\": \"NO_STATUS\",\n\t\t\t\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T11:00:00Z\",\n\t\t\t\t\t\t\t\"expected_departure_at\": \"2023-11-13T11:00:00Z\",\n\t\t\t\t\t\t\t\"actual_departure_at\": \"2023-11-13T11:15:00Z\",\n\t\t\t\t\t\t\t\"scheduled_arrival_at\": \"2023-11-13T12:10:00Z\",\n\t\t\t\t\t\t\t\"expected_arrival_at\": \"2023-11-13T12:10:00Z\",\n\t\t\t\t\t\t\t\"actual_arrival_at\": \"2023-11-13T12:25:00Z\",\n\t\t\t\t\t\t\t\"codeshare\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"airline\": {\"designator\": \"TH\"},\n\t\t\t\t\t\t\t\t\t\"flight_number\": 1111\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\t\"flight_number\": 2143,\n\t\t\t\t\t\"flights\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\":\"20231113_KL_2143_CDG_IST\",\n\t\t\t\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\t\t\t\"arrival_airport\": {\"designator\": \"IST\"},\n\t\t\t\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\t\t\t\"flight_number\": 2143,\n\t\t\t\t\t\t\t\"aircraft\": {\"id\": \"A320\"},\n\t\t\t\t\t\t\t\"status\": \"LANDED\",\n\t\t\t\t\t\t\t\"departure_status\": \"DELAYED\",\n\t\t\t\t\t\t\t\"arrival_status\": \"ON_TIME\",\n\t\t\t\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T15:00:00Z\",\n\t\t\t\t\t\t\t\"expected_departure_at\": \"2023-11-13T15:00:00Z\",\n\t\t\t\t\t\t\t\"actual_departure_at\": \"2023-11-13T15:15:00Z\",\n\t\t\t\t\t\t\t\"scheduled_arrival_at\": \"2023-11-13T17:00:00Z\",\n\t\t\t\t\t\t\t\"expected_arrival_at\": \"2023-11-13T17:00:00Z\",\n\t\t\t\t\t\t\t\"actual_arrival_at\": \"2023-11-13T17:00:00Z\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\":\"20231113_KL_2143_IST_AMS\",\n\t\t\t\t\t\t\t\"departure_airport\": {\"designator\": \"IST\"},\n\t\t\t\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\t\t\t\"flight_number\": 2143,\n\t\t\t\t\t\t\t\"aircraft\": {\"id\": \"A320\"},\n\t\t\t\t\t\t\t\"status\": \"LANDED\",\n\t\t\t\t\t\t\t\"departure_status\": \"ON_TIME\",\n\t\t\t\t\t\t\t\"arrival_status\": \"EARLY\",\n\t\t\t\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T17:30:00Z\",\n\t\t\t\t\t\t\t\"expected_departure_at\": \"2023-11-13T17:30:00Z\",\n\t\t\t\t\t\t\t\"actual_departure_at\": \"2023-11-13T17:35:00Z\",\n\t\t\t\t\t\t\t\"scheduled_arrival_at\": \"2023-11-13T19:10:00Z\",\n\t\t\t\t\t\t\t\"expected_arrival_at\": \"2023-11-13T19:10:00Z\",\n\t\t\t\t\t\t\t\"actual_arrival_at\": \"2023-11-13T19:10:00Z\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]`,\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\tsrv, mockSvc := startTestServer(t)\n\t\t\tdefer srv.Close()\n\n\t\t\tmockSvc.EXPECT().\n\t\t\t\tSearch(gomock.Any(), tC.expectedQuery).\n\t\t\t\tReturn(&schedules.Page[*schedules.Schedule]{Items: tC.mockSchedules}, tC.mockErr).\n\t\t\t\tTimes(tC.expectedCallTimes)\n\n\t\t\tresp, err := http.Get(srv.URL + tC.reqPath)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.Equal(t, tC.expectedStatusCode, resp.StatusCode)\n\n\t\t\tvar res xhttp.Response[[]*v0.Schedule]\n\t\t\trequire.NoError(t, json.NewDecoder(resp.Body).Decode(&res))\n\n\t\t\tresBytes, err := json.Marshal(res.Data)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.Equal(t, tC.expectedMetadata, res.Metadata)\n\t\t\tassert.JSONEq(t, tC.expectedData, string(resBytes))\n\t\t})\n\t}\n}\n", "n_tokens": 4372, "primary_symbol": "", "primary_kind": "", "primary_span": [20, 393], "def_symbols": [], "symbols": ["testCases", "struct", "desc", "string", "reqPath", "mockSchedules", "schedules", "Schedule", "mockErr", "error", "expectedQuery", "FlightSearchQuery", "expectedStatusCode", "int", "expectedMetadata", "xhttp", "Metadata", "expectedData", "expectedCallTimes", "Invalid", "request", "should", "return", "search", "http", "StatusBadRequest", "Code", "invalid_parameters", "Message", "The", "provided", "parameters", "are", "invalid", "null", "start", "date", "format", "filter", "departure_airport", "AMS", "arrival_airport", "CDG", "departure_date", "DepartureAirports", "ArrivalAirports", "Limit", "dates", "Please", "use", "the", "YYYY", "Something", "went", "wrong", "with", "service", "errors", "New", "something", "DepartureDate", "time", "Date", "UTC", "StatusInternalServerError", "internal_error", "please", "try", "again", "later", "Schedules", "found", "DepartureAirport", "Airport", "Designator", "ArrivalAirport", "MainCarrier", "Airline", "FlightNumber", "Flights", "Flight", "FlightID", "ConnectingFlightID", "Status", "FlightOperationalStatusAirborne", "DepartureStatus", "FlightTimingStatusEarly", "ArrivalStatus", "FlightTimingStatusNoStatus", "Aircraft", "UpdatedAt", "ScheduledDepartureAt", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Codeshare", "FlightOperationalStatusDiverted", "B32", "FlightOperationalStatusLanded", "FlightTimingStatusDelayed", "FlightTimingStatusOnTime", "IST", "A320", "StatusOK", "Here", "matching", "given", "criteria", "Pagination", "Next", "nil", "designator", "airline", "flight_number", "flights", "aircraft", "status", "AIRBORNE", "departure_status", "EARLY", "arrival_status", "NO_STATUS", "scheduled_departure_at", "expected_departure_at", "actual_departure_at", "scheduled_arrival_at", "expected_arrival_at", "actual_arrival_at", "codeshare", "DIVERTED", "LANDED", "DELAYED", "ON_TIME", "for", "range", "Run", "func", "testing", "srv", "mockSvc", "startTestServer", "defer", "Close", "EXPECT", "Search", "gomock", "Any", "Return", "Page", "Items", "Times", "resp", "err", "Get", "URL", "require", "NoError", "assert", "Equal", "StatusCode", "var", "res", "Response", "json", "NewDecoder", "Body", "Decode", "resBytes", "Marshal", "Data", "JSONEq"], "doc_head": "\ttestCases := []struct {\n\t\tdesc               string\n\t\treqPath            string\n\t\tmockSchedules      []*schedules.Schedule\n\t\tmockErr            error\n\t\texpectedQuery      *schedules.FlightSearchQuery\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdesc:               \"Invalid request, it should return a 400\",\n\t\t\treqPath:            \"/v0/search\",\n\t\t\texpectedQuery:      &schedules.FlightSearchQuery{},\n\t\t\texpectedStatusCode: http.StatusBadRequest,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"invalid_parameters\",\n\t\t\t\tMessage: \"The provided parameters are invalid.\",\n\t\t\t},\n\t\t\texpectedData: `null`,\n\t\t},\n\t\t{\n\t\t\tdesc:    \"Invalid start date format, it should return a 400\",\n\t\t\treqPath: \"/v0/search?filter[departure_airport]=AMS&filter[arrival_airport]=CDG&filter[departure_date]=2023-15-13\",\n\t\t\texpectedQuery: &schedules.FlightSearchQuery{\n\t\t\t\tDepartureAirports: []string{\"AMS\"},\n\t\t\t\tArrivalAirports:   []string{\"CDG\"},\n\t\t\t\tLimit:             10,\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusBadRequest,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"invalid_parameters\",\n\t\t\t\tMessage: \"The provided dates are invalid. "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/random_flight_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package v0_test\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0/mocks\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n)\n\nfunc TestRandomFlight(t *testing.T) {", "n_tokens": 139, "primary_symbol": "TestRandomFlight", "primary_kind": "function", "primary_span": [18, 18], "def_symbols": ["TestRandomFlight"], "symbols": ["TestRandomFlight", "package", "v0_test", "import", "encoding", "json", "net", "http", "testing", "time", "github", "com", "stretchr", "testify", "assert", "require", "impalastudios", "aviation", "schedules", "internal", "adapter", "handler", "mocks", "pkg", "xhttp", "uber", "org", "mock", "gomock", "func"], "doc_head": "package v0_test\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0/mocks\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n)\nfunc TestRandomFlight(t *testing.T) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight_test.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/random_flight_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/random_flight_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 19, "end_line": 131, "text": "\ttestCases := []struct {\n\t\tdesc               string\n\t\tprepareMockSvc     func(*mocks.Mockservice)\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdesc: \"should return an error when the service fails to get a random flight\",\n\t\t\tprepareMockSvc: func(mockSvc *mocks.Mockservice) {\n\t\t\t\tmockSvc.EXPECT().\n\t\t\t\t\tGetRandomFlight(gomock.Any(), gomock.Any()).\n\t\t\t\t\tReturn(nil, assert.AnError)\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusInternalServerError,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdesc: \"should return a random flight\",\n\t\t\tprepareMockSvc: func(mockSvc *mocks.Mockservice) {\n\t\t\t\tmockSvc.EXPECT().\n\t\t\t\t\tGetRandomFlight(gomock.Any(), gomock.Any()).\n\t\t\t\t\tReturn(&schedules.Flight{\n\t\t\t\t\t\tID:                 1,\n\t\t\t\t\t\tFlightID:           \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\t\tConnectingFlightID: 0,\n\t\t\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tFlightNumber: 1234,\n\t\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\t\t\tID:        \"320\",\n\t\t\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\t\t\t\tDepartureStatus:      schedules.FlightTimingStatusOnTime,\n\t\t\t\t\t\tArrivalStatus:        schedules.FlightTimingStatusOnTime,\n\t\t\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"AF\"},\n\t\t\t\t\t\t\t\tFlightNumber: 5678,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"ok\",\n\t\t\t\tMessage: \"Here are the details of a random flight.\",\n\t\t\t},\n\t\t\texpectedData: `{\n\t\t\t\t\"id\": \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\"flight_number\": 1234,\n\t\t\t\t\"aircraft\": {\"id\": \"320\", \"updated_at\": \"2020-01-01T15:00:00Z\"},\n\t\t\t\t\"status\": \"SCHEDULED\",\n\t\t\t\t\"departure_status\": \"ON_TIME\",\n\t\t\t\t\"arrival_status\": \"ON_TIME\",\n\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"expected_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"actual_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"scheduled_arrival_at\":\"2023-11-13T12:00:00Z\",\n\t\t\t\t\"expected_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\"actual_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\"codeshare\": [{\"airline\": {\"designator\": \"AF\"}, \"flight_number\": 5678}]\n\t\t\t}`,\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t// Arrange\n\t\t\tsrv, mockSvc := startTestServer(t)\n\t\t\tdefer srv.Close()\n\n\t\t\ttC.prepareMockSvc(mockSvc)\n\n\t\t\thttpRes, err := http.DefaultClient.Get(srv.URL + \"/v0/flights/random/single\")\n\t\t\trequire.NoError(t, err)\n\n\t\t\t// Assert\n\t\t\tassert.Equal(t, tC.expectedStatusCode, httpRes.StatusCode)\n\n\t\t\tvar res xhttp.Response[*v0.Flight]\n\t\t\trequire.NoError(t, json.NewDecoder(httpRes.Body).Decode(&res))\n\n\t\t\tresBytes, err := json.Marshal(res.Data)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.Equal(t, tC.expectedMetadata, res.Metadata)\n\t\t\tassert.JSONEq(t, tC.expectedData, string(resBytes))\n\t\t})\n\t}\n}\n", "n_tokens": 1225, "primary_symbol": "", "primary_kind": "", "primary_span": [19, 131], "def_symbols": [], "symbols": ["testCases", "struct", "desc", "string", "prepareMockSvc", "func", "mocks", "Mockservice", "expectedStatusCode", "int", "expectedMetadata", "xhttp", "Metadata", "expectedData", "expectedCallTimes", "should", "return", "error", "when", "the", "service", "fails", "get", "random", "flight", "mockSvc", "EXPECT", "GetRandomFlight", "gomock", "Any", "Return", "nil", "assert", "AnError", "http", "StatusInternalServerError", "Code", "internal_error", "Message", "Something", "went", "wrong", "please", "try", "again", "later", "null", "schedules", "Flight", "FlightID", "ConnectingFlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDG", "ArrivalAirport", "AMS", "Aircraft", "UpdatedAt", "time", "Date", "UTC", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusOnTime", "ArrivalStatus", "ScheduledDepartureAt", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Codeshare", "StatusOK", "Here", "are", "details", "flight_number", "aircraft", "updated_at", "status", "SCHEDULED", "departure_status", "ON_TIME", "arrival_status", "airline", "designator", "departure_airport", "arrival_airport", "scheduled_departure_at", "expected_departure_at", "actual_departure_at", "scheduled_arrival_at", "expected_arrival_at", "actual_arrival_at", "codeshare", "for", "range", "Run", "testing", "Arrange", "srv", "startTestServer", "defer", "Close", "httpRes", "err", "DefaultClient", "Get", "URL", "flights", "single", "require", "NoError", "Assert", "Equal", "StatusCode", "var", "res", "Response", "json", "NewDecoder", "Body", "Decode", "resBytes", "Marshal", "Data", "JSONEq"], "doc_head": "\ttestCases := []struct {\n\t\tdesc               string\n\t\tprepareMockSvc     func(*mocks.Mockservice)\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdesc: \"should return an error when the service fails to get a random flight\",\n\t\t\tprepareMockSvc: func(mockSvc *mocks.Mockservice) {\n\t\t\t\tmockSvc.EXPECT().\n\t\t\t\t\tGetRandomFlight(gomock.Any(), gomock.Any()).\n\t\t\t\t\tReturn(nil, assert.AnError)\n\t\t\t},\n\t\t\texpectedStatusCode: http.StatusInternalServerError,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdesc: \"should return a random flight\",\n\t\t\tprepareMockSvc: func(mockSvc *mocks.Mockservice) {\n\t\t\t\tmockSvc.EXPECT().\n\t\t\t\t\tGetRandomFlight(gomock.Any(), gomock.Any()).\n\t\t\t\t\tReturn(&schedules.Flight{\n\t\t\t\t\t\tID:                 1,\n\t\t\t\t\t\tFlightID:           \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\t\tConnectingFlightID: 0,\n\t\t\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tFlightNumber: 1234,\n\t\t\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tArrivalAirport: &"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/handler_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/handler_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 24, "text": "package v0_test\n\nimport (\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/gin-gonic/gin\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n\nfunc startTestServer(t *testing.T) (*httptest.Server, *mocks.Mockservice) {\n\tg := gin.Default()\n\n\tmockService := mocks.NewMockservice(gomock.NewController(t))\n\n\trestHandler := v0.NewHandler(mockService)\n\trestHandler.Register(&g.RouterGroup)\n\n\tsrv := httptest.NewServer(g)\n\treturn srv, mockService\n}\n", "n_tokens": 162, "primary_symbol": "startTestServer", "primary_kind": "function", "primary_span": [13, 24], "def_symbols": ["startTestServer"], "symbols": ["startTestServer", "package", "v0_test", "import", "net", "http", "httptest", "testing", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "internal", "adapter", "handler", "mocks", "uber", "org", "mock", "gomock", "func", "Server", "Mockservice", "Default", "mockService", "NewMockservice", "NewController", "restHandler", "NewHandler", "Register", "RouterGroup", "srv", "NewServer", "return"], "doc_head": "package v0_test\nimport (\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"github.com/gin-gonic/gin\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\nfunc startTestServer(t *testing.T) (*httptest.Server, *mocks.Mockservice) {\n\tg := gin.Default()\n\tmockService := mocks.NewMockservice(gomock.NewController(t))\n\trestHandler := v0.NewHandler(mockService)\n\trestHandler.Register(&g.RouterGroup)\n\tsrv := httptest.NewServer(g)\n\treturn srv, mockService\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight_batch.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package v0\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n)\n\ntype batchFlightIdsRequest struct {\n\tIDs []string `form:\"ids[]\" binding:\"required,unique,min=1,max=15,dive,gt=0\"`\n}\n", "n_tokens": 104, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "import", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap", "net", "http", "type", "batchFlightIdsRequest", "struct", "IDs", "string", "form", "ids", "binding", "required", "unique", "min", "max", "dive"], "doc_head": "package v0\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n)\ntype batchFlightIdsRequest struct {\n\tIDs []string `form:\"ids[]\" binding:\"required,unique,min=1,max=15,dive,gt=0\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_batch.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight_batch.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 16, "end_line": 47, "text": "func (h *RestHandler) getFlightBatch(c *gin.Context) {\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\n\tlog.Debug(c, \"Request detected locale.\", zap.String(\"locale\", locale.String()))\n\n\trequest := batchFlightIdsRequest{}\n\n\tif err := c.ShouldBind(&request); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\n\tfs, err := h.svc.GetBatch(c, request.IDs)\n\tif err != nil {\n\t\tlog.Error(c, \"An error occurred while retrieving the flights.\", zap.Strings(\"ids\", request.IDs), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tfrs := make([]*Flight, 0)\n\tfor _, f := range fs {\n\t\tfr := h.toFlight(f, locale, true)\n\t\tfrs = append(frs, fr)\n\t}\n\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse(frs, \"ok\", \"Here are the details of the requested batch of flights.\"),\n\t)\n}\n", "n_tokens": 237, "primary_symbol": "getFlightBatch", "primary_kind": "function", "primary_span": [16, 47], "def_symbols": ["getFlightBatch"], "symbols": ["getFlightBatch", "func", "RestHandler", "gin", "Context", "locale", "i18n", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "log", "Debug", "Request", "detected", "zap", "String", "request", "batchFlightIdsRequest", "err", "ShouldBind", "nil", "Error", "Cannot", "bind", "ErrRequestBindingFailed", "return", "svc", "GetBatch", "IDs", "error", "occurred", "while", "retrieving", "the", "flights", "Strings", "ids", "frs", "make", "Flight", "for", "range", "toFlight", "true", "append", "PureJSON", "http", "StatusOK", "xhttp", "NewResponse", "Here", "are", "details", "requested", "batch"], "doc_head": "func (h *RestHandler) getFlightBatch(c *gin.Context) {\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tlog.Debug(c, \"Request detected locale.\", zap.String(\"locale\", locale.String()))\n\trequest := batchFlightIdsRequest{}\n\tif err := c.ShouldBind(&request); err != nil {\n\t\tlog.Error(c, \"Cannot bind request.\", zap.Error(err))\n\t\t_ = c.Error(ErrRequestBindingFailed)\n\t\treturn\n\t}\n\tfs, err := h.svc.GetBatch(c, request.IDs)\n\tif err != nil {\n\t\tlog.Error(c, \"An error occurred while retrieving the flights.\", zap.Strings(\"ids\", request.IDs), zap.Error(err))\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tfrs := make([]*Flight, 0)\n\tfor _, f := range fs {\n\t\tfr := h.toFlight(f, locale, true)\n\t\tfrs = append(frs, fr)\n\t}\n\tc.PureJSON(\n\t\thttp.StatusOK,\n\t\txhttp.NewResponse(frs, \"ok\", \"Here are the details of the requested batch of flights.\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_test.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package v0_test\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n)\n\nfunc TestGetFlight(t *testing.T) {", "n_tokens": 123, "primary_symbol": "TestGetFlight", "primary_kind": "function", "primary_span": [18, 18], "def_symbols": ["TestGetFlight"], "symbols": ["TestGetFlight", "package", "v0_test", "import", "encoding", "json", "net", "http", "testing", "time", "github", "com", "cockroachdb", "errors", "stretchr", "testify", "assert", "require", "impalastudios", "aviation", "schedules", "internal", "adapter", "handler", "pkg", "xhttp", "uber", "org", "mock", "gomock", "func"], "doc_head": "package v0_test\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tv0 \"go.impalastudios.com/aviation/schedules/internal/schedules/adapter/handler/http/v0\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.uber.org/mock/gomock\"\n)\nfunc TestGetFlight(t *testing.T) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_test.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/get_flight_test.go", "rel_path": "internal/schedules/adapter/handler/http/v0/get_flight_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 19, "end_line": 145, "text": "\ttestCases := []struct {\n\t\tdescription        string\n\t\tpath               string\n\t\tmockFlight         *schedules.Flight\n\t\tmockErr            error\n\t\texpectedID         string\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdescription:        \"it should return 404 when a flight with the provided ID cannot be found\",\n\t\t\tpath:               \"/v0/flights/single/20231113_AA_2301_CDG_AMS\",\n\t\t\tmockErr:            schedules.ErrFlightNotFound,\n\t\t\texpectedID:         \"20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 404,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"not_found\",\n\t\t\t\tMessage: \"The flight cannot be found.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdescription:        \"it should return 500 when when an unexpected error occures\",\n\t\t\tpath:               \"/v0/flights/single/20231113_AA_2301_CDG_AMS\",\n\t\t\tmockErr:            errors.New(\"boooom\"),\n\t\t\texpectedID:         \"20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 500,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdescription: \"it should return the flight details\",\n\t\t\tpath:        \"/v0/flights/single/20231113_AA_2301_CDG_AMS\",\n\t\t\tmockFlight: &schedules.Flight{\n\t\t\t\tID:                 1,\n\t\t\t\tFlightID:           \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\tConnectingFlightID: 0,\n\t\t\t\tAirline: &schedules.Airline{\n\t\t\t\t\tDesignator: \"KL\",\n\t\t\t\t},\n\t\t\t\tFlightNumber: 1234,\n\t\t\t\tDepartureAirport: &schedules.Airport{\n\t\t\t\t\tDesignator: \"CDG\",\n\t\t\t\t},\n\t\t\t\tArrivalAirport: &schedules.Airport{\n\t\t\t\t\tDesignator: \"AMS\",\n\t\t\t\t},\n\t\t\t\tAircraft: &schedules.Aircraft{\n\t\t\t\t\tID:        \"320\",\n\t\t\t\t\tUpdatedAt: time.Date(2020, 01, 01, 15, 0, 0, 0, time.UTC),\n\t\t\t\t},\n\t\t\t\tStatus:               schedules.FlightOperationalStatusScheduled,\n\t\t\t\tDepartureStatus:      schedules.FlightTimingStatusOnTime,\n\t\t\t\tArrivalStatus:        schedules.FlightTimingStatusOnTime,\n\t\t\t\tScheduledDepartureAt: time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\tExpectedDepartureAt:  time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\tActualDepartureAt:    time.Date(2023, 11, 13, 10, 0, 0, 0, time.UTC),\n\t\t\t\tScheduledArrivalAt:   time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\tExpectedArrivalAt:    time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\tActualArrivalAt:      time.Date(2023, 11, 13, 12, 0, 0, 0, time.UTC),\n\t\t\t\tCodeshare: []*schedules.Codeshare{\n\t\t\t\t\t{\n\t\t\t\t\t\tAirline:      &schedules.Airline{Designator: \"AF\"},\n\t\t\t\t\t\tFlightNumber: 5678,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectedID:         \"20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 200,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"ok\",\n\t\t\t\tMessage: \"Here are the details of the requested flight.\",\n\t\t\t},\n\t\t\texpectedData: `{\n\t\t\t\t\"id\": \"20231113_AA_2301_CDG_AMS\",\n\t\t\t\t\"flight_number\": 1234,\n\t\t\t\t\"aircraft\": {\"id\": \"320\", \"updated_at\": \"2020-01-01T15:00:00Z\"},\n\t\t\t\t\"status\": \"SCHEDULED\",\n\t\t\t\t\"departure_status\": \"ON_TIME\",\n\t\t\t\t\"arrival_status\": \"ON_TIME\",\n\t\t\t\t\"airline\": {\"designator\": \"KL\"},\n\t\t\t\t\"departure_airport\": {\"designator\": \"CDG\"},\n\t\t\t\t\"arrival_airport\": {\"designator\": \"AMS\"},\n\t\t\t\t\"scheduled_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"expected_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"actual_departure_at\": \"2023-11-13T10:00:00Z\",\n\t\t\t\t\"scheduled_arrival_at\":\"2023-11-13T12:00:00Z\",\n\t\t\t\t\"expected_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\"actual_arrival_at\": \"2023-11-13T12:00:00Z\",\n\t\t\t\t\"codeshare\": [{\"airline\": {\"designator\": \"AF\"}, \"flight_number\": 5678}]\n\t\t\t}`,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.description, func(t *testing.T) {\n\t\t\tsrv, mockSvc := startTestServer(t)\n\t\t\tdefer srv.Close()\n\n\t\t\tmockSvc.EXPECT().\n\t\t\t\tGet(gomock.Any(), tc.expectedID).\n\t\t\t\tReturn(tc.mockFlight, tc.mockErr).\n\t\t\t\tTimes(tc.expectedCallTimes)\n\n\t\t\tresp, err := http.Get(srv.URL + tc.path)\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.Equal(t, tc.expectedStatusCode, resp.StatusCode)\n\n\t\t\tvar res xhttp.Response[*v0.Flight]\n\t\t\trequire.NoError(t, json.NewDecoder(resp.Body).Decode(&res))\n\t\t\tassert.Equal(t, tc.expectedMetadata, res.Metadata)\n\n\t\t\tresBytes, err := json.Marshal(res.Data)\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.JSONEq(t, tc.expectedData, string(resBytes))\n\t\t})\n\t}\n}\n", "n_tokens": 1394, "primary_symbol": "", "primary_kind": "", "primary_span": [19, 145], "def_symbols": [], "symbols": ["testCases", "struct", "description", "string", "path", "mockFlight", "schedules", "Flight", "mockErr", "error", "expectedID", "expectedStatusCode", "int", "expectedMetadata", "xhttp", "Metadata", "expectedData", "expectedCallTimes", "should", "return", "when", "flight", "with", "the", "provided", "cannot", "found", "flights", "single", "ErrFlightNotFound", "Code", "not_found", "Message", "The", "null", "unexpected", "occures", "errors", "New", "boooom", "internal_error", "Something", "went", "wrong", "please", "try", "again", "later", "details", "FlightID", "ConnectingFlightID", "Airline", "Designator", "FlightNumber", "DepartureAirport", "Airport", "CDG", "ArrivalAirport", "AMS", "Aircraft", "UpdatedAt", "time", "Date", "UTC", "Status", "FlightOperationalStatusScheduled", "DepartureStatus", "FlightTimingStatusOnTime", "ArrivalStatus", "ScheduledDepartureAt", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "Codeshare", "Here", "are", "requested", "flight_number", "aircraft", "updated_at", "status", "SCHEDULED", "departure_status", "ON_TIME", "arrival_status", "airline", "designator", "departure_airport", "arrival_airport", "scheduled_departure_at", "expected_departure_at", "actual_departure_at", "scheduled_arrival_at", "expected_arrival_at", "actual_arrival_at", "codeshare", "for", "range", "Run", "func", "testing", "srv", "mockSvc", "startTestServer", "defer", "Close", "EXPECT", "Get", "gomock", "Any", "Return", "Times", "resp", "err", "http", "URL", "require", "NoError", "assert", "Equal", "StatusCode", "var", "res", "Response", "json", "NewDecoder", "Body", "Decode", "resBytes", "Marshal", "Data", "JSONEq"], "doc_head": "\ttestCases := []struct {\n\t\tdescription        string\n\t\tpath               string\n\t\tmockFlight         *schedules.Flight\n\t\tmockErr            error\n\t\texpectedID         string\n\t\texpectedStatusCode int\n\t\texpectedMetadata   xhttp.Metadata\n\t\texpectedData       string\n\t\texpectedCallTimes  int\n\t}{\n\t\t{\n\t\t\tdescription:        \"it should return 404 when a flight with the provided ID cannot be found\",\n\t\t\tpath:               \"/v0/flights/single/20231113_AA_2301_CDG_AMS\",\n\t\t\tmockErr:            schedules.ErrFlightNotFound,\n\t\t\texpectedID:         \"20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 404,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"not_found\",\n\t\t\t\tMessage: \"The flight cannot be found.\",\n\t\t\t},\n\t\t\texpectedData: \"null\",\n\t\t},\n\t\t{\n\t\t\tdescription:        \"it should return 500 when when an unexpected error occures\",\n\t\t\tpath:               \"/v0/flights/single/20231113_AA_2301_CDG_AMS\",\n\t\t\tmockErr:            errors.New(\"boooom\"),\n\t\t\texpectedID:         \"20231113_AA_2301_CDG_AMS\",\n\t\t\texpectedCallTimes:  1,\n\t\t\texpectedStatusCode: 500,\n\t\t\texpectedMetadata: xhttp.Metadata{\n\t\t\t\tCode:    \"internal_error\",\n\t\t\t\tMessage: \"Something went wrong, please try again later"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_routes.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_routes.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airline_routes.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package v0\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype getAirlineRoutesUriRequest struct {\n\tID string `uri:\"id\" binding:\"required\"`\n}\n", "n_tokens": 93, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 16], "def_symbols": [], "symbols": ["package", "import", "github", "com", "gin", "gonic", "impalastudios", "aviation", "schedules", "pkg", "i18n", "xhttp", "log", "uber", "org", "zap", "net", "http", "time", "type", "getAirlineRoutesUriRequest", "struct", "string", "uri", "binding", "required"], "doc_head": "package v0\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/xhttp\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"net/http\"\n\t\"time\"\n)\ntype getAirlineRoutesUriRequest struct {\n\tID string `uri:\"id\" binding:\"required\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_routes.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/airline_routes.go", "rel_path": "internal/schedules/adapter/handler/http/v0/airline_routes.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 17, "end_line": 52, "text": "func (h *RestHandler) getAirlineRoutes(c *gin.Context) {\n\tvar uri getAirlineRoutesUriRequest\n\tif err := c.ShouldBindUri(&uri); err != nil {\n\t\tlog.Error(c, \"Cannot bind URI parameters.\", zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\n\t\tif message == \"\" {\n\t\t\tmessage = \"The provided request is invalid.\"\n\t\t}\n\n\t\tc.JSON(http.StatusBadRequest, xhttp.NewErrorResponse[*UniqueRoutes](\"invalid_parameters\", message))\n\t\treturn\n\t}\n\n\troutes, err := h.svc.GetAirlineUniqueRoutes(c, uri.ID, time.Now().UTC())\n\tif err != nil {\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\n\tresp := &UniqueRoutes{\n\t\tAirline: h.toAirline(routes.Airline, locale),\n\t}\n\n\tfor _, route := range routes.Routes {\n\t\tresp.Routes = append(resp.Routes, &Route{\n\t\t\tA: h.toAirport(route.A, locale),\n\t\t\tB: h.toAirport(route.B, locale),\n\t\t})\n\t}\n\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse[*UniqueRoutes](resp, \"ok\", \"Here are the unique routes for the requested airline.\"))\n}\n", "n_tokens": 272, "primary_symbol": "getAirlineRoutes", "primary_kind": "function", "primary_span": [17, 52], "def_symbols": ["getAirlineRoutes"], "symbols": ["getAirlineRoutes", "func", "RestHandler", "gin", "Context", "var", "uri", "getAirlineRoutesUriRequest", "err", "ShouldBindUri", "nil", "log", "Error", "Cannot", "bind", "URI", "parameters", "zap", "message", "i18n", "GetFirstValidationErrorMessage", "The", "provided", "request", "invalid", "JSON", "http", "StatusBadRequest", "xhttp", "NewErrorResponse", "UniqueRoutes", "invalid_parameters", "return", "routes", "svc", "GetAirlineUniqueRoutes", "time", "Now", "UTC", "locale", "GetLocaleFromHeader", "GetHeader", "Accept", "Language", "resp", "Airline", "toAirline", "for", "route", "range", "Routes", "append", "Route", "toAirport", "PureJSON", "StatusOK", "NewResponse", "Here", "are", "the", "unique", "requested", "airline"], "doc_head": "func (h *RestHandler) getAirlineRoutes(c *gin.Context) {\n\tvar uri getAirlineRoutesUriRequest\n\tif err := c.ShouldBindUri(&uri); err != nil {\n\t\tlog.Error(c, \"Cannot bind URI parameters.\", zap.Error(err))\n\t\tmessage := i18n.GetFirstValidationErrorMessage(err)\n\t\tif message == \"\" {\n\t\t\tmessage = \"The provided request is invalid.\"\n\t\t}\n\t\tc.JSON(http.StatusBadRequest, xhttp.NewErrorResponse[*UniqueRoutes](\"invalid_parameters\", message))\n\t\treturn\n\t}\n\troutes, err := h.svc.GetAirlineUniqueRoutes(c, uri.ID, time.Now().UTC())\n\tif err != nil {\n\t\t_ = c.Error(err)\n\t\treturn\n\t}\n\tlocale := i18n.GetLocaleFromHeader(c.GetHeader(\"Accept-Language\"))\n\tresp := &UniqueRoutes{\n\t\tAirline: h.toAirline(routes.Airline, locale),\n\t}\n\tfor _, route := range routes.Routes {\n\t\tresp.Routes = append(resp.Routes, &Route{\n\t\t\tA: h.toAirport(route.A, locale),\n\t\t\tB: h.toAirport(route.B, locale),\n\t\t})\n\t}\n\tc.PureJSON(http.StatusOK, xhttp.NewResponse[*UniqueRoutes](resp, \"ok\", \"Here are the unique routes for the requested airline.\"))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: handler.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=handler.go -destination=mocks/handler_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tschedules \"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mockservice is a mock of service interface.\ntype Mockservice struct {\n\tctrl     *gomock.Controller\n\trecorder *MockserviceMockRecorder\n\tisgomock struct{}\n}\n\n// MockserviceMockRecorder is the mock recorder for Mockservice.\ntype MockserviceMockRecorder struct {\n\tmock *Mockservice\n}\n", "n_tokens": 172, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "handler", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "handler_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "time", "schedules", "impalastudios", "com", "aviation", "internal", "gomock", "uber", "org", "mock", "Mockservice", "service", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockserviceMockRecorder", "isgomock", "the", "for"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: handler.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=handler.go -destination=mocks/handler_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tschedules \"go.impalastudios.com/aviation/schedules/internal/schedules\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mockservice is a mock of service interface.\ntype Mockservice struct {\n\tctrl     *gomock.Controller\n\trecorder *MockserviceMockRecorder\n\tisgomock struct{}\n}\n// MockserviceMockRecorder is the mock recorder for Mockservice.\ntype MockserviceMockRecorder struct {\n\tmock *Mockservice\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 53, "text": "// NewMockservice creates a new mock instance.\nfunc NewMockservice(ctrl *gomock.Controller) *Mockservice {\n\tmock := &Mockservice{ctrl: ctrl}\n\tmock.recorder = &MockserviceMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockservice) EXPECT() *MockserviceMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *Mockservice) Get(arg0 context.Context, arg1 string) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 173, "primary_symbol": "NewMockservice", "primary_kind": "function", "primary_span": [34, 53], "def_symbols": ["NewMockservice", "EXPECT", "Get"], "symbols": ["NewMockservice", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mockservice", "recorder", "MockserviceMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "context", "Context", "arg1", "string", "schedules", "Flight", "error", "Helper", "ret", "Call", "ret0", "ret1"], "doc_head": "// NewMockservice creates a new mock instance.\nfunc NewMockservice(ctrl *gomock.Controller) *Mockservice {\n\tmock := &Mockservice{ctrl: ctrl}\n\tmock.recorder = &MockserviceMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockservice) EXPECT() *MockserviceMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *Mockservice) Get(arg0 context.Context, arg1 string) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 54, "end_line": 68, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockserviceMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockservice)(nil).Get), arg0, arg1)\n}\n\n// GetAirlineFlightBoard mocks base method.\nfunc (m *Mockservice) GetAirlineFlightBoard(arg0 context.Context, arg1 *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 187, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [55, 68], "def_symbols": ["Get", "GetAirlineFlightBoard"], "symbols": ["Get", "GetAirlineFlightBoard", "indicates", "expected", "call", "func", "MockserviceMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockservice", "nil", "mocks", "base", "method", "context", "Context", "schedules", "AirlineFlightBoardQuery", "Page", "Flight", "error", "ret", "ret0", "ret1"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockserviceMockRecorder) Get(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockservice)(nil).Get), arg0, arg1)\n}\n// GetAirlineFlightBoard mocks base method.\nfunc (m *Mockservice) GetAirlineFlightBoard(arg0 context.Context, arg1 *schedules.AirlineFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 69, "end_line": 83, "text": "// GetAirlineFlightBoard indicates an expected call of GetAirlineFlightBoard.\nfunc (mr *MockserviceMockRecorder) GetAirlineFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineFlightBoard\", reflect.TypeOf((*Mockservice)(nil).GetAirlineFlightBoard), arg0, arg1)\n}\n\n// GetAirlineUniqueRoutes mocks base method.\nfunc (m *Mockservice) GetAirlineUniqueRoutes(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.UniqueRoutes, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineUniqueRoutes\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.UniqueRoutes)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 199, "primary_symbol": "GetAirlineFlightBoard", "primary_kind": "function", "primary_span": [70, 83], "def_symbols": ["GetAirlineFlightBoard", "GetAirlineUniqueRoutes"], "symbols": ["GetAirlineFlightBoard", "GetAirlineUniqueRoutes", "indicates", "expected", "call", "func", "MockserviceMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockservice", "nil", "mocks", "base", "method", "context", "Context", "string", "arg2", "time", "Time", "schedules", "UniqueRoutes", "error", "ret", "ret0", "ret1"], "doc_head": "// GetAirlineFlightBoard indicates an expected call of GetAirlineFlightBoard.\nfunc (mr *MockserviceMockRecorder) GetAirlineFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineFlightBoard\", reflect.TypeOf((*Mockservice)(nil).GetAirlineFlightBoard), arg0, arg1)\n}\n// GetAirlineUniqueRoutes mocks base method.\nfunc (m *Mockservice) GetAirlineUniqueRoutes(arg0 context.Context, arg1 string, arg2 time.Time) (*schedules.UniqueRoutes, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirlineUniqueRoutes\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*schedules.UniqueRoutes)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 84, "end_line": 89, "text": "// GetAirlineUniqueRoutes indicates an expected call of GetAirlineUniqueRoutes.\nfunc (mr *MockserviceMockRecorder) GetAirlineUniqueRoutes(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineUniqueRoutes\", reflect.TypeOf((*Mockservice)(nil).GetAirlineUniqueRoutes), arg0, arg1, arg2)\n}\n", "n_tokens": 97, "primary_symbol": "GetAirlineUniqueRoutes", "primary_kind": "function", "primary_span": [85, 89], "def_symbols": ["GetAirlineUniqueRoutes"], "symbols": ["GetAirlineUniqueRoutes", "indicates", "expected", "call", "func", "MockserviceMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockservice", "nil"], "doc_head": "// GetAirlineUniqueRoutes indicates an expected call of GetAirlineUniqueRoutes.\nfunc (mr *MockserviceMockRecorder) GetAirlineUniqueRoutes(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirlineUniqueRoutes\", reflect.TypeOf((*Mockservice)(nil).GetAirlineUniqueRoutes), arg0, arg1, arg2)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 90, "end_line": 104, "text": "// GetAirportFlightBoard mocks base method.\nfunc (m *Mockservice) GetAirportFlightBoard(arg0 context.Context, arg1 *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirportFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetAirportFlightBoard indicates an expected call of GetAirportFlightBoard.\nfunc (mr *MockserviceMockRecorder) GetAirportFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirportFlightBoard\", reflect.TypeOf((*Mockservice)(nil).GetAirportFlightBoard), arg0, arg1)\n}\n", "n_tokens": 199, "primary_symbol": "GetAirportFlightBoard", "primary_kind": "function", "primary_span": [91, 104], "def_symbols": ["GetAirportFlightBoard"], "symbols": ["GetAirportFlightBoard", "mocks", "base", "method", "func", "Mockservice", "arg0", "context", "Context", "arg1", "schedules", "AirportFlightBoardQuery", "Page", "Flight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockserviceMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// GetAirportFlightBoard mocks base method.\nfunc (m *Mockservice) GetAirportFlightBoard(arg0 context.Context, arg1 *schedules.AirportFlightBoardQuery) (*schedules.Page[*schedules.Flight], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAirportFlightBoard\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Flight])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetAirportFlightBoard indicates an expected call of GetAirportFlightBoard.\nfunc (mr *MockserviceMockRecorder) GetAirportFlightBoard(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAirportFlightBoard\", reflect.TypeOf((*Mockservice)(nil).GetAirportFlightBoard), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 105, "end_line": 119, "text": "// GetBatch mocks base method.\nfunc (m *Mockservice) GetBatch(arg0 context.Context, arg1 []string) ([]*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetBatch\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetBatch indicates an expected call of GetBatch.\nfunc (mr *MockserviceMockRecorder) GetBatch(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetBatch\", reflect.TypeOf((*Mockservice)(nil).GetBatch), arg0, arg1)\n}\n", "n_tokens": 169, "primary_symbol": "GetBatch", "primary_kind": "function", "primary_span": [106, 119], "def_symbols": ["GetBatch"], "symbols": ["GetBatch", "mocks", "base", "method", "func", "Mockservice", "arg0", "context", "Context", "arg1", "string", "schedules", "Flight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockserviceMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// GetBatch mocks base method.\nfunc (m *Mockservice) GetBatch(arg0 context.Context, arg1 []string) ([]*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetBatch\", arg0, arg1)\n\tret0, _ := ret[0].([]*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetBatch indicates an expected call of GetBatch.\nfunc (mr *MockserviceMockRecorder) GetBatch(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetBatch\", reflect.TypeOf((*Mockservice)(nil).GetBatch), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 120, "end_line": 128, "text": "// GetByFlightDesignator mocks base method.\nfunc (m *Mockservice) GetByFlightDesignator(arg0 context.Context, arg1 *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByFlightDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 113, "primary_symbol": "GetByFlightDesignator", "primary_kind": "function", "primary_span": [121, 128], "def_symbols": ["GetByFlightDesignator"], "symbols": ["GetByFlightDesignator", "mocks", "base", "method", "func", "Mockservice", "arg0", "context", "Context", "arg1", "schedules", "FlightDesignatorQuery", "Page", "Schedule", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetByFlightDesignator mocks base method.\nfunc (m *Mockservice) GetByFlightDesignator(arg0 context.Context, arg1 *schedules.FlightDesignatorQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByFlightDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 129, "end_line": 143, "text": "// GetByFlightDesignator indicates an expected call of GetByFlightDesignator.\nfunc (mr *MockserviceMockRecorder) GetByFlightDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByFlightDesignator\", reflect.TypeOf((*Mockservice)(nil).GetByFlightDesignator), arg0, arg1)\n}\n\n// GetRandomFlight mocks base method.\nfunc (m *Mockservice) GetRandomFlight(arg0 context.Context, arg1 *schedules.RandomFlightQuery) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetRandomFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 190, "primary_symbol": "GetByFlightDesignator", "primary_kind": "function", "primary_span": [130, 143], "def_symbols": ["GetByFlightDesignator", "GetRandomFlight"], "symbols": ["GetByFlightDesignator", "GetRandomFlight", "indicates", "expected", "call", "func", "MockserviceMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockservice", "nil", "mocks", "base", "method", "context", "Context", "schedules", "RandomFlightQuery", "Flight", "error", "ret", "ret0", "ret1"], "doc_head": "// GetByFlightDesignator indicates an expected call of GetByFlightDesignator.\nfunc (mr *MockserviceMockRecorder) GetByFlightDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByFlightDesignator\", reflect.TypeOf((*Mockservice)(nil).GetByFlightDesignator), arg0, arg1)\n}\n// GetRandomFlight mocks base method.\nfunc (m *Mockservice) GetRandomFlight(arg0 context.Context, arg1 *schedules.RandomFlightQuery) (*schedules.Flight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetRandomFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Flight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 144, "end_line": 158, "text": "// GetRandomFlight indicates an expected call of GetRandomFlight.\nfunc (mr *MockserviceMockRecorder) GetRandomFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetRandomFlight\", reflect.TypeOf((*Mockservice)(nil).GetRandomFlight), arg0, arg1)\n}\n\n// Search mocks base method.\nfunc (m *Mockservice) Search(arg0 context.Context, arg1 *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Search\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 181, "primary_symbol": "GetRandomFlight", "primary_kind": "function", "primary_span": [145, 158], "def_symbols": ["GetRandomFlight", "Search"], "symbols": ["GetRandomFlight", "Search", "indicates", "expected", "call", "func", "MockserviceMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockservice", "nil", "mocks", "base", "method", "context", "Context", "schedules", "FlightSearchQuery", "Page", "Schedule", "error", "ret", "ret0", "ret1"], "doc_head": "// GetRandomFlight indicates an expected call of GetRandomFlight.\nfunc (mr *MockserviceMockRecorder) GetRandomFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetRandomFlight\", reflect.TypeOf((*Mockservice)(nil).GetRandomFlight), arg0, arg1)\n}\n// Search mocks base method.\nfunc (m *Mockservice) Search(arg0 context.Context, arg1 *schedules.FlightSearchQuery) (*schedules.Page[*schedules.Schedule], error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Search\", arg0, arg1)\n\tret0, _ := ret[0].(*schedules.Page[*schedules.Schedule])\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "rel_path": "internal/schedules/adapter/handler/http/v0/mocks/handler_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 159, "end_line": 164, "text": "// Search indicates an expected call of Search.\nfunc (mr *MockserviceMockRecorder) Search(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Search\", reflect.TypeOf((*Mockservice)(nil).Search), arg0, arg1)\n}\n", "n_tokens": 71, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [160, 164], "def_symbols": ["Search"], "symbols": ["Search", "indicates", "expected", "call", "func", "MockserviceMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockservice", "nil"], "doc_head": "// Search indicates an expected call of Search.\nfunc (mr *MockserviceMockRecorder) Search(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Search\", reflect.TypeOf((*Mockservice)(nil).Search), arg0, arg1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package aircraft\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Maircraft.proto=.;aircraft aircraft.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Maircraft.proto=.;aircraft aircraft.proto\n", "n_tokens": 74, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "aircraft", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "Maircraft", "proto", "grpc_out", "grpc_opt"], "doc_head": "package aircraft\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Maircraft.proto=.;aircraft aircraft.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Maircraft.proto=.;aircraft aircraft.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: aircraft.proto\n\npackage aircraft\n", "n_tokens": 54, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "aircraft", "proto", "package"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: aircraft.proto\npackage aircraft"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 29, "text": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\n\nconst (\n\tAircraftService_Get_FullMethodName         = \"/aviation.aircraft.v0.AircraftService/Get\"\n\tAircraftService_BatchGet_FullMethodName    = \"/aviation.aircraft.v0.AircraftService/BatchGet\"\n\tAircraftService_Create_FullMethodName      = \"/aviation.aircraft.v0.AircraftService/Create\"\n\tAircraftService_Update_FullMethodName      = \"/aviation.aircraft.v0.AircraftService/Update\"\n\tAircraftService_UploadImage_FullMethodName = \"/aviation.aircraft.v0.AircraftService/UploadImage\"\n\tAircraftService_Search_FullMethodName      = \"/aviation.aircraft.v0.AircraftService/Search\"\n)\n", "n_tokens": 226, "primary_symbol": "", "primary_kind": "", "primary_span": [9, 29], "def_symbols": [], "symbols": ["import", "context", "grpc", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "generated", "file", "compatible", "with", "the", "package", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion9", "AircraftService_Get_FullMethodName", "aviation", "aircraft", "AircraftService", "Get", "AircraftService_BatchGet_FullMethodName", "BatchGet", "AircraftService_Create_FullMethodName", "Create", "AircraftService_Update_FullMethodName", "Update", "AircraftService_UploadImage_FullMethodName", "UploadImage", "AircraftService_Search_FullMethodName", "Search"], "doc_head": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\nconst (\n\tAircraftService_Get_FullMethodName         = \"/aviation.aircraft.v0.AircraftService/Get\"\n\tAircraftService_BatchGet_FullMethodName    = \"/aviation.aircraft.v0.AircraftService/BatchGet\"\n\tAircraftService_Create_FullMethodName      = \"/aviation.aircraft.v0.AircraftService/Create\"\n\tAircraftService_Update_FullMethodName      = \"/aviation.aircraft.v0.AircraftService/Update\"\n\tAircraftService_UploadImage_FullMethodName = \"/aviation.aircraft.v0.AircraftService/UploadImage\"\n\tAircraftService_Search_FullMethodName      = \"/aviation.aircraft.v0.AircraftService/Search\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 30, "end_line": 41, "text": "// AircraftServiceClient is the client API for AircraftService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AircraftServiceClient interface {\n\tGet(ctx context.Context, in *AircraftDetailsRequest, opts ...grpc.CallOption) (*AircraftDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tCreate(ctx context.Context, in *CreateAircraftRequest, opts ...grpc.CallOption) (*CreateAircraftResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAircraftRequest, opts ...grpc.CallOption) (*UpdateAircraftResponse, error)\n\tUploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)\n\tSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)\n}\n", "n_tokens": 214, "primary_symbol": "", "primary_kind": "", "primary_span": [30, 41], "def_symbols": [], "symbols": ["AircraftServiceClient", "the", "client", "API", "for", "AircraftService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Get", "context", "Context", "AircraftDetailsRequest", "opts", "CallOption", "AircraftDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "Create", "CreateAircraftRequest", "CreateAircraftResponse", "Update", "UpdateAircraftRequest", "UpdateAircraftResponse", "UploadImage", "ClientStreamingClient", "UploadImageRequest", "UploadImageResponse", "Search", "SearchRequest", "SearchResponse"], "doc_head": "// AircraftServiceClient is the client API for AircraftService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AircraftServiceClient interface {\n\tGet(ctx context.Context, in *AircraftDetailsRequest, opts ...grpc.CallOption) (*AircraftDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tCreate(ctx context.Context, in *CreateAircraftRequest, opts ...grpc.CallOption) (*CreateAircraftResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAircraftRequest, opts ...grpc.CallOption) (*UpdateAircraftResponse, error)\n\tUploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)\n\tSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 42, "end_line": 59, "text": "type aircraftServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewAircraftServiceClient(cc grpc.ClientConnInterface) AircraftServiceClient {\n\treturn &aircraftServiceClient{cc}\n}\n\nfunc (c *aircraftServiceClient) Get(ctx context.Context, in *AircraftDetailsRequest, opts ...grpc.CallOption) (*AircraftDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AircraftDetailsResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 138, "primary_symbol": "NewAircraftServiceClient", "primary_kind": "function", "primary_span": [46, 59], "def_symbols": ["NewAircraftServiceClient", "Get"], "symbols": ["NewAircraftServiceClient", "Get", "type", "aircraftServiceClient", "struct", "grpc", "ClientConnInterface", "func", "AircraftServiceClient", "return", "ctx", "context", "Context", "AircraftDetailsRequest", "opts", "CallOption", "AircraftDetailsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AircraftService_Get_FullMethodName", "nil"], "doc_head": "type aircraftServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewAircraftServiceClient(cc grpc.ClientConnInterface) AircraftServiceClient {\n\treturn &aircraftServiceClient{cc}\n}\nfunc (c *aircraftServiceClient) Get(ctx context.Context, in *AircraftDetailsRequest, opts ...grpc.CallOption) (*AircraftDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AircraftDetailsResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 60, "end_line": 79, "text": "func (c *aircraftServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *aircraftServiceClient) Create(ctx context.Context, in *CreateAircraftRequest, opts ...grpc.CallOption) (*CreateAircraftResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAircraftResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 199, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [60, 79], "def_symbols": ["BatchGet", "Create"], "symbols": ["BatchGet", "Create", "func", "aircraftServiceClient", "ctx", "context", "Context", "BatchGetRequest", "opts", "grpc", "CallOption", "BatchGetResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AircraftService_BatchGet_FullMethodName", "nil", "return", "CreateAircraftRequest", "CreateAircraftResponse", "AircraftService_Create_FullMethodName"], "doc_head": "func (c *aircraftServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *aircraftServiceClient) Create(ctx context.Context, in *CreateAircraftRequest, opts ...grpc.CallOption) (*CreateAircraftResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAircraftResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 80, "end_line": 89, "text": "func (c *aircraftServiceClient) Update(ctx context.Context, in *UpdateAircraftRequest, opts ...grpc.CallOption) (*UpdateAircraftResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAircraftResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 100, "primary_symbol": "Update", "primary_kind": "function", "primary_span": [80, 89], "def_symbols": ["Update"], "symbols": ["Update", "func", "aircraftServiceClient", "ctx", "context", "Context", "UpdateAircraftRequest", "opts", "grpc", "CallOption", "UpdateAircraftResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AircraftService_Update_FullMethodName", "nil", "return"], "doc_head": "func (c *aircraftServiceClient) Update(ctx context.Context, in *UpdateAircraftRequest, opts ...grpc.CallOption) (*UpdateAircraftResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAircraftResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 90, "end_line": 102, "text": "func (c *aircraftServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AircraftService_ServiceDesc.Streams[0], AircraftService_UploadImage_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}\n\treturn x, nil\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AircraftService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]\n", "n_tokens": 170, "primary_symbol": "UploadImage", "primary_kind": "function", "primary_span": [90, 102], "def_symbols": ["UploadImage"], "symbols": ["UploadImage", "func", "aircraftServiceClient", "ctx", "context", "Context", "opts", "grpc", "CallOption", "ClientStreamingClient", "UploadImageRequest", "UploadImageResponse", "error", "cOpts", "append", "StaticMethod", "stream", "err", "NewStream", "AircraftService_ServiceDesc", "Streams", "AircraftService_UploadImage_FullMethodName", "nil", "return", "GenericClientStream", "ClientStream", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AircraftService_UploadImageClient"], "doc_head": "func (c *aircraftServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AircraftService_ServiceDesc.Streams[0], AircraftService_UploadImage_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}\n\treturn x, nil\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AircraftService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 103, "end_line": 112, "text": "func (c *aircraftServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 93, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [103, 112], "def_symbols": ["Search"], "symbols": ["Search", "func", "aircraftServiceClient", "ctx", "context", "Context", "SearchRequest", "opts", "grpc", "CallOption", "SearchResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AircraftService_Search_FullMethodName", "nil", "return"], "doc_head": "func (c *aircraftServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchResponse)\n\terr := c.cc.Invoke(ctx, AircraftService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 113, "end_line": 125, "text": "// AircraftServiceServer is the server API for AircraftService service.\n// All implementations must embed UnimplementedAircraftServiceServer\n// for forward compatibility.\ntype AircraftServiceServer interface {\n\tGet(context.Context, *AircraftDetailsRequest) (*AircraftDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tCreate(context.Context, *CreateAircraftRequest) (*CreateAircraftResponse, error)\n\tUpdate(context.Context, *UpdateAircraftRequest) (*UpdateAircraftResponse, error)\n\tUploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error\n\tSearch(context.Context, *SearchRequest) (*SearchResponse, error)\n\tmustEmbedUnimplementedAircraftServiceServer()\n}\n", "n_tokens": 153, "primary_symbol": "", "primary_kind": "", "primary_span": [113, 125], "def_symbols": [], "symbols": ["AircraftServiceServer", "the", "server", "API", "for", "AircraftService", "service", "All", "implementations", "must", "embed", "UnimplementedAircraftServiceServer", "forward", "compatibility", "type", "interface", "Get", "context", "Context", "AircraftDetailsRequest", "AircraftDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "Create", "CreateAircraftRequest", "CreateAircraftResponse", "Update", "UpdateAircraftRequest", "UpdateAircraftResponse", "UploadImage", "grpc", "ClientStreamingServer", "UploadImageRequest", "UploadImageResponse", "Search", "SearchRequest", "SearchResponse", "mustEmbedUnimplementedAircraftServiceServer"], "doc_head": "// AircraftServiceServer is the server API for AircraftService service.\n// All implementations must embed UnimplementedAircraftServiceServer\n// for forward compatibility.\ntype AircraftServiceServer interface {\n\tGet(context.Context, *AircraftDetailsRequest) (*AircraftDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tCreate(context.Context, *CreateAircraftRequest) (*CreateAircraftResponse, error)\n\tUpdate(context.Context, *UpdateAircraftRequest) (*UpdateAircraftResponse, error)\n\tUploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error\n\tSearch(context.Context, *SearchRequest) (*SearchResponse, error)\n\tmustEmbedUnimplementedAircraftServiceServer()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 126, "end_line": 141, "text": "// UnimplementedAircraftServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAircraftServiceServer struct{}\n\nfunc (UnimplementedAircraftServiceServer) Get(context.Context, *AircraftDetailsRequest) (*AircraftDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) Create(context.Context, *CreateAircraftRequest) (*CreateAircraftResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}", "n_tokens": 189, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [133, 141], "def_symbols": ["Get", "BatchGet", "Create"], "symbols": ["Get", "BatchGet", "Create", "UnimplementedAircraftServiceServer", "must", "embedded", "have", "forward", "compatible", "implementations", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "type", "struct", "func", "context", "Context", "AircraftDetailsRequest", "AircraftDetailsResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetRequest", "BatchGetResponse", "CreateAircraftRequest", "CreateAircraftResponse"], "doc_head": "// UnimplementedAircraftServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAircraftServiceServer struct{}\nfunc (UnimplementedAircraftServiceServer) Get(context.Context, *AircraftDetailsRequest) (*AircraftDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) Create(context.Context, *CreateAircraftRequest) (*CreateAircraftResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 142, "end_line": 153, "text": "func (UnimplementedAircraftServiceServer) Update(context.Context, *UpdateAircraftRequest) (*UpdateAircraftResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method UploadImage not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) mustEmbedUnimplementedAircraftServiceServer() {}\nfunc (UnimplementedAircraftServiceServer) testEmbeddedByValue()                         {}\n", "n_tokens": 164, "primary_symbol": "Update", "primary_kind": "function", "primary_span": [142, 153], "def_symbols": ["Update", "UploadImage", "Search", "mustEmbedUnimplementedAircraftServiceServer", "testEmbeddedByValue"], "symbols": ["Update", "UploadImage", "Search", "mustEmbedUnimplementedAircraftServiceServer", "testEmbeddedByValue", "func", "UnimplementedAircraftServiceServer", "context", "Context", "UpdateAircraftRequest", "UpdateAircraftResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "grpc", "ClientStreamingServer", "UploadImageRequest", "UploadImageResponse", "SearchRequest", "SearchResponse"], "doc_head": "func (UnimplementedAircraftServiceServer) Update(context.Context, *UpdateAircraftRequest) (*UpdateAircraftResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method UploadImage not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedAircraftServiceServer) mustEmbedUnimplementedAircraftServiceServer() {}\nfunc (UnimplementedAircraftServiceServer) testEmbeddedByValue()                         {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 154, "end_line": 171, "text": "// UnsafeAircraftServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AircraftServiceServer will\n// result in compilation errors.\ntype UnsafeAircraftServiceServer interface {\n\tmustEmbedUnimplementedAircraftServiceServer()\n}\n\nfunc RegisterAircraftServiceServer(s grpc.ServiceRegistrar, srv AircraftServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAircraftServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AircraftService_ServiceDesc, srv)\n}\n", "n_tokens": 187, "primary_symbol": "RegisterAircraftServiceServer", "primary_kind": "function", "primary_span": [161, 171], "def_symbols": ["RegisterAircraftServiceServer"], "symbols": ["RegisterAircraftServiceServer", "UnsafeAircraftServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "AircraftServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedAircraftServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedAircraftServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "AircraftService_ServiceDesc"], "doc_head": "// UnsafeAircraftServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AircraftServiceServer will\n// result in compilation errors.\ntype UnsafeAircraftServiceServer interface {\n\tmustEmbedUnimplementedAircraftServiceServer()\n}\nfunc RegisterAircraftServiceServer(s grpc.ServiceRegistrar, srv AircraftServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAircraftServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AircraftService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 172, "end_line": 189, "text": "func _AircraftService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AircraftDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Get(ctx, req.(*AircraftDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AircraftService_Get_Handler", "primary_kind": "function", "primary_span": [172, 189], "def_symbols": ["_AircraftService_Get_Handler"], "symbols": ["_AircraftService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AircraftDetailsRequest", "err", "nil", "return", "AircraftServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "AircraftService_Get_FullMethodName", "handler", "req"], "doc_head": "func _AircraftService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AircraftDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Get(ctx, req.(*AircraftDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 190, "end_line": 207, "text": "func _AircraftService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 163, "primary_symbol": "_AircraftService_BatchGet_Handler", "primary_kind": "function", "primary_span": [190, 207], "def_symbols": ["_AircraftService_BatchGet_Handler"], "symbols": ["_AircraftService_BatchGet_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetRequest", "err", "nil", "return", "AircraftServiceServer", "BatchGet", "info", "UnaryServerInfo", "Server", "FullMethod", "AircraftService_BatchGet_FullMethodName", "handler", "req"], "doc_head": "func _AircraftService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 208, "end_line": 225, "text": "func _AircraftService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAircraftRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Create(ctx, req.(*CreateAircraftRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AircraftService_Create_Handler", "primary_kind": "function", "primary_span": [208, 225], "def_symbols": ["_AircraftService_Create_Handler"], "symbols": ["_AircraftService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateAircraftRequest", "err", "nil", "return", "AircraftServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "AircraftService_Create_FullMethodName", "handler", "req"], "doc_head": "func _AircraftService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAircraftRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Create(ctx, req.(*CreateAircraftRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 226, "end_line": 243, "text": "func _AircraftService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAircraftRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Update(ctx, req.(*UpdateAircraftRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AircraftService_Update_Handler", "primary_kind": "function", "primary_span": [226, 243], "def_symbols": ["_AircraftService_Update_Handler"], "symbols": ["_AircraftService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateAircraftRequest", "err", "nil", "return", "AircraftServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "AircraftService_Update_FullMethodName", "handler", "req"], "doc_head": "func _AircraftService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAircraftRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Update(ctx, req.(*UpdateAircraftRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 244, "end_line": 250, "text": "func _AircraftService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {\n\treturn srv.(AircraftServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AircraftService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]\n", "n_tokens": 94, "primary_symbol": "_AircraftService_UploadImage_Handler", "primary_kind": "function", "primary_span": [244, 250], "def_symbols": ["_AircraftService_UploadImage_Handler"], "symbols": ["_AircraftService_UploadImage_Handler", "func", "srv", "interface", "stream", "grpc", "ServerStream", "error", "return", "AircraftServiceServer", "UploadImage", "GenericServerStream", "UploadImageRequest", "UploadImageResponse", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AircraftService_UploadImageServer", "ClientStreamingServer"], "doc_head": "func _AircraftService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {\n\treturn srv.(AircraftServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AircraftService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 251, "end_line": 262, "text": "func _AircraftService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Search_FullMethodName,\n\t}", "n_tokens": 108, "primary_symbol": "_AircraftService_Search_Handler", "primary_kind": "function", "primary_span": [251, 262], "def_symbols": ["_AircraftService_Search_Handler"], "symbols": ["_AircraftService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchRequest", "err", "nil", "return", "AircraftServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "AircraftService_Search_FullMethodName"], "doc_head": "func _AircraftService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AircraftServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AircraftService_Search_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 263, "end_line": 306, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Search(ctx, req.(*SearchRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// AircraftService_ServiceDesc is the grpc.ServiceDesc for AircraftService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AircraftService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.aircraft.v0.AircraftService\",\n\tHandlerType: (*AircraftServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AircraftService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AircraftService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AircraftService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AircraftService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AircraftService_Search_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{\n\t\t{\n\t\t\tStreamName:    \"UploadImage\",\n\t\t\tHandler:       _AircraftService_UploadImage_Handler,\n\t\t\tClientStreams: true,\n\t\t},\n\t},\n\tMetadata: \"aircraft.proto\",\n}\n", "n_tokens": 318, "primary_symbol": "", "primary_kind": "", "primary_span": [263, 306], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "AircraftServiceServer", "Search", "SearchRequest", "interceptor", "info", "AircraftService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "AircraftService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "aircraft", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Get", "Handler", "_AircraftService_Get_Handler", "BatchGet", "_AircraftService_BatchGet_Handler", "Create", "_AircraftService_Create_Handler", "Update", "_AircraftService_Update_Handler", "_AircraftService_Search_Handler", "Streams", "StreamDesc", "StreamName", "UploadImage", "_AircraftService_UploadImage_Handler", "ClientStreams", "true", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AircraftServiceServer).Search(ctx, req.(*SearchRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// AircraftService_ServiceDesc is the grpc.ServiceDesc for AircraftService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AircraftService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.aircraft.v0.AircraftService\",\n\tHandlerType: (*AircraftServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AircraftService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AircraftService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AircraftService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AircraftService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AircraftService_Search_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{\n\t\t{\n\t\t\tStreamName:    \"UploadImage\",\n\t\t\tHandler:       _AircraftService_UploadImage_Handler,\n\t\t\tClientStreams: true,\n\t\t},\n\t},\n\tMetadata: \"aircraft.proto\",\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: aircraft.proto\n\npackage aircraft\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "aircraft", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "timestamppb", "types", "known", "sync", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: aircraft.proto\npackage aircraft\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 61, "text": "type ImageType int32\n\nconst (\n\tImageType_OVERVIEW ImageType = 0\n)\n\n// Enum value maps for ImageType.\nvar (\n\tImageType_name = map[int32]string{\n\t\t0: \"OVERVIEW\",\n\t}\n\tImageType_value = map[string]int32{\n\t\t\"OVERVIEW\": 0,\n\t}\n)\n\nfunc (x ImageType) Enum() *ImageType {\n\tp := new(ImageType)\n\t*p = x\n\treturn p\n}\n\nfunc (x ImageType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (ImageType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_aircraft_proto_enumTypes[0].Descriptor()\n}\n\nfunc (ImageType) Type() protoreflect.EnumType {\n\treturn &file_aircraft_proto_enumTypes[0]\n}\n\nfunc (x ImageType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n", "n_tokens": 199, "primary_symbol": "Enum", "primary_kind": "function", "primary_span": [40, 61], "def_symbols": ["Enum", "String", "Descriptor", "Type", "Number"], "symbols": ["Enum", "String", "Descriptor", "Type", "Number", "type", "ImageType", "int32", "const", "ImageType_OVERVIEW", "value", "maps", "for", "var", "ImageType_name", "map", "string", "OVERVIEW", "ImageType_value", "func", "new", "return", "protoimpl", "EnumStringOf", "protoreflect", "EnumNumber", "EnumDescriptor", "file_aircraft_proto_enumTypes", "EnumType"], "doc_head": "type ImageType int32\nconst (\n\tImageType_OVERVIEW ImageType = 0\n)\n// Enum value maps for ImageType.\nvar (\n\tImageType_name = map[int32]string{\n\t\t0: \"OVERVIEW\",\n\t}\n\tImageType_value = map[string]int32{\n\t\t\"OVERVIEW\": 0,\n\t}\n)\nfunc (x ImageType) Enum() *ImageType {\n\tp := new(ImageType)\n\t*p = x\n\treturn p\n}\nfunc (x ImageType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\nfunc (ImageType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_aircraft_proto_enumTypes[0].Descriptor()\n}\nfunc (ImageType) Type() protoreflect.EnumType {\n\treturn &file_aircraft_proto_enumTypes[0]\n}\nfunc (x ImageType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 62, "end_line": 66, "text": "// Deprecated: Use ImageType.Descriptor instead.\nfunc (ImageType) EnumDescriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{0}\n}\n", "n_tokens": 41, "primary_symbol": "EnumDescriptor", "primary_kind": "function", "primary_span": [63, 66], "def_symbols": ["EnumDescriptor"], "symbols": ["EnumDescriptor", "Deprecated", "Use", "ImageType", "Descriptor", "instead", "func", "byte", "int", "return", "file_aircraft_proto_rawDescGZIP"], "doc_head": "// Deprecated: Use ImageType.Descriptor instead.\nfunc (ImageType) EnumDescriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{0}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 88, "text": "type UploadImageRequest_Scale int32\n\nconst (\n\tUploadImageRequest_SCALE_1X UploadImageRequest_Scale = 0\n\tUploadImageRequest_SCALE_2X UploadImageRequest_Scale = 1\n\tUploadImageRequest_SCALE_3X UploadImageRequest_Scale = 2\n)\n\n// Enum value maps for UploadImageRequest_Scale.\nvar (\n\tUploadImageRequest_Scale_name = map[int32]string{\n\t\t0: \"SCALE_1X\",\n\t\t1: \"SCALE_2X\",\n\t\t2: \"SCALE_3X\",\n\t}\n\tUploadImageRequest_Scale_value = map[string]int32{\n\t\t\"SCALE_1X\": 0,\n\t\t\"SCALE_2X\": 1,\n\t\t\"SCALE_3X\": 2,\n\t}\n)\n", "n_tokens": 170, "primary_symbol": "", "primary_kind": "", "primary_span": [67, 88], "def_symbols": [], "symbols": ["type", "UploadImageRequest_Scale", "int32", "const", "UploadImageRequest_SCALE_1X", "UploadImageRequest_SCALE_2X", "UploadImageRequest_SCALE_3X", "Enum", "value", "maps", "for", "var", "UploadImageRequest_Scale_name", "map", "string", "SCALE_1X", "SCALE_2X", "SCALE_3X", "UploadImageRequest_Scale_value"], "doc_head": "type UploadImageRequest_Scale int32\nconst (\n\tUploadImageRequest_SCALE_1X UploadImageRequest_Scale = 0\n\tUploadImageRequest_SCALE_2X UploadImageRequest_Scale = 1\n\tUploadImageRequest_SCALE_3X UploadImageRequest_Scale = 2\n)\n// Enum value maps for UploadImageRequest_Scale.\nvar (\n\tUploadImageRequest_Scale_name = map[int32]string{\n\t\t0: \"SCALE_1X\",\n\t\t1: \"SCALE_2X\",\n\t\t2: \"SCALE_3X\",\n\t}\n\tUploadImageRequest_Scale_value = map[string]int32{\n\t\t\"SCALE_1X\": 0,\n\t\t\"SCALE_2X\": 1,\n\t\t\"SCALE_3X\": 2,\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 89, "end_line": 115, "text": "func (x UploadImageRequest_Scale) Enum() *UploadImageRequest_Scale {\n\tp := new(UploadImageRequest_Scale)\n\t*p = x\n\treturn p\n}\n\nfunc (x UploadImageRequest_Scale) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (UploadImageRequest_Scale) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_aircraft_proto_enumTypes[1].Descriptor()\n}\n\nfunc (UploadImageRequest_Scale) Type() protoreflect.EnumType {\n\treturn &file_aircraft_proto_enumTypes[1]\n}\n\nfunc (x UploadImageRequest_Scale) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use UploadImageRequest_Scale.Descriptor instead.\nfunc (UploadImageRequest_Scale) EnumDescriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{9, 0}\n}\n", "n_tokens": 202, "primary_symbol": "Enum", "primary_kind": "function", "primary_span": [89, 115], "def_symbols": ["Enum", "String", "Descriptor", "Type", "Number", "EnumDescriptor"], "symbols": ["Enum", "String", "Descriptor", "Type", "Number", "EnumDescriptor", "func", "UploadImageRequest_Scale", "new", "return", "string", "protoimpl", "EnumStringOf", "protoreflect", "EnumNumber", "file_aircraft_proto_enumTypes", "EnumType", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP"], "doc_head": "func (x UploadImageRequest_Scale) Enum() *UploadImageRequest_Scale {\n\tp := new(UploadImageRequest_Scale)\n\t*p = x\n\treturn p\n}\nfunc (x UploadImageRequest_Scale) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\nfunc (UploadImageRequest_Scale) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_aircraft_proto_enumTypes[1].Descriptor()\n}\nfunc (UploadImageRequest_Scale) Type() protoreflect.EnumType {\n\treturn &file_aircraft_proto_enumTypes[1]\n}\nfunc (x UploadImageRequest_Scale) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n// Deprecated: Use UploadImageRequest_Scale.Descriptor instead.\nfunc (UploadImageRequest_Scale) EnumDescriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{9, 0}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 116, "end_line": 136, "text": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tIds []string `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n}\n\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_aircraft_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetRequest) ProtoMessage() {}\n", "n_tokens": 136, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [124, 136], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Ids", "string", "protobuf", "bytes", "rep", "name", "ids", "proto3", "json", "omitempty", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tIds []string `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n}\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_aircraft_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 137, "end_line": 160, "text": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\n", "n_tokens": 157, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [137, 160], "def_symbols": ["ProtoReflect", "Descriptor", "GetIds"], "symbols": ["ProtoReflect", "Descriptor", "GetIds", "func", "BatchGetRequest", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "string", "Ids"], "doc_head": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 161, "end_line": 181, "text": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAircraft []*Aircraft `protobuf:\"bytes,1,rep,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\n\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_aircraft_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetResponse) ProtoMessage() {}\n", "n_tokens": 139, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [169, 181], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Aircraft", "protobuf", "bytes", "rep", "name", "aircraft", "proto3", "json", "omitempty", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAircraft []*Aircraft `protobuf:\"bytes,1,rep,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_aircraft_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 182, "end_line": 205, "text": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *BatchGetResponse) GetAircraft() []*Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}\n", "n_tokens": 159, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [182, 205], "def_symbols": ["ProtoReflect", "Descriptor", "GetAircraft"], "symbols": ["ProtoReflect", "Descriptor", "GetAircraft", "func", "BatchGetResponse", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "Aircraft"], "doc_head": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *BatchGetResponse) GetAircraft() []*Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 206, "end_line": 226, "text": "type AircraftDetailsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *AircraftDetailsRequest) Reset() {\n\t*x = AircraftDetailsRequest{}\n\tmi := &file_aircraft_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AircraftDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AircraftDetailsRequest) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [214, 226], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AircraftDetailsRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type AircraftDetailsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *AircraftDetailsRequest) Reset() {\n\t*x = AircraftDetailsRequest{}\n\tmi := &file_aircraft_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AircraftDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AircraftDetailsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 227, "end_line": 250, "text": "func (x *AircraftDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AircraftDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AircraftDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *AircraftDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 157, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [227, 250], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "AircraftDetailsRequest", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "string"], "doc_head": "func (x *AircraftDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AircraftDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AircraftDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{2}\n}\nfunc (x *AircraftDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 251, "end_line": 271, "text": "type AircraftDetailsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAircraft *Aircraft `protobuf:\"bytes,1,opt,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\n\nfunc (x *AircraftDetailsResponse) Reset() {\n\t*x = AircraftDetailsResponse{}\n\tmi := &file_aircraft_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AircraftDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AircraftDetailsResponse) ProtoMessage() {}\n", "n_tokens": 141, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [259, 271], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AircraftDetailsResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Aircraft", "protobuf", "bytes", "opt", "name", "aircraft", "proto3", "json", "omitempty", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AircraftDetailsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAircraft *Aircraft `protobuf:\"bytes,1,opt,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\nfunc (x *AircraftDetailsResponse) Reset() {\n\t*x = AircraftDetailsResponse{}\n\tmi := &file_aircraft_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AircraftDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AircraftDetailsResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 272, "end_line": 295, "text": "func (x *AircraftDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AircraftDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AircraftDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *AircraftDetailsResponse) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}\n", "n_tokens": 162, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [272, 295], "def_symbols": ["ProtoReflect", "Descriptor", "GetAircraft"], "symbols": ["ProtoReflect", "Descriptor", "GetAircraft", "func", "AircraftDetailsResponse", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "Aircraft"], "doc_head": "func (x *AircraftDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AircraftDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AircraftDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{3}\n}\nfunc (x *AircraftDetailsResponse) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 296, "end_line": 316, "text": "type CreateAircraftRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType            string            `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName            string            `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,4,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,5,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tEngine          *string           `protobuf:\"bytes,6,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32          `protobuf:\"fixed32,7,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32          `protobuf:\"fixed32,8,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspan        *float32          `protobuf:\"fixed32,9,opt,name=wingspan,proto3,oneof\" json:\"wingspan,omitempty\"`\n\tLength          *float32          `protobuf:\"fixed32,10,opt,name=length,proto3,oneof\" json:\"length,omitempty\"`\n\tHeight          *float32          `protobuf:\"fixed32,11,opt,name=height,proto3,oneof\" json:\"height,omitempty\"`\n\tSeatingCapacity *int64            `protobuf:\"varint,12,opt,name=seatingCapacity,proto3,oneof\" json:\"seatingCapacity,omitempty\"`\n\tFlightRange     *float32          `protobuf:\"fixed32,13,opt,name=flightRange,proto3,oneof\" json:\"flightRange,omitempty\"`\n\tCrewSize        *int64            `protobuf:\"varint,14,opt,name=crewSize,proto3,oneof\" json:\"crewSize,omitempty\"`\n}\n", "n_tokens": 475, "primary_symbol": "", "primary_kind": "", "primary_span": [296, 316], "def_symbols": [], "symbols": ["type", "CreateAircraftRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Type", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WikipediaUrl", "wikipediaUrl", "Engine", "engine", "oneof", "AverageSpeed", "float32", "fixed32", "averageSpeed", "WideBody", "wideBody", "Wingspan", "wingspan", "Length", "length", "Height", "height", "SeatingCapacity", "int64", "varint", "seatingCapacity", "FlightRange", "flightRange", "CrewSize", "crewSize"], "doc_head": "type CreateAircraftRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType            string            `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName            string            `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,4,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,5,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tEngine          *string           `protobuf:\"bytes,6,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32          `protobuf:\"fixed32,7,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32          `protobuf:\"fixed32,8,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspa"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 317, "end_line": 341, "text": "func (x *CreateAircraftRequest) Reset() {\n\t*x = CreateAircraftRequest{}\n\tmi := &file_aircraft_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAircraftRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAircraftRequest) ProtoMessage() {}\n\nfunc (x *CreateAircraftRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [317, 341], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateAircraftRequest", "file_aircraft_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateAircraftRequest) Reset() {\n\t*x = CreateAircraftRequest{}\n\tmi := &file_aircraft_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAircraftRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAircraftRequest) ProtoMessage() {}\nfunc (x *CreateAircraftRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 342, "end_line": 381, "text": "// Deprecated: Use CreateAircraftRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAircraftRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *CreateAircraftRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAircraftRequest) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAircraftRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAircraftRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAircraftRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n", "n_tokens": 200, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [343, 381], "def_symbols": ["Descriptor", "GetId", "GetType", "GetName", "GetDescription", "GetWikipediaUrl"], "symbols": ["Descriptor", "GetId", "GetType", "GetName", "GetDescription", "GetWikipediaUrl", "Deprecated", "Use", "CreateAircraftRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_aircraft_proto_rawDescGZIP", "string", "nil", "Type", "Name", "map", "Description", "WikipediaUrl"], "doc_head": "// Deprecated: Use CreateAircraftRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAircraftRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{4}\n}\nfunc (x *CreateAircraftRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAircraftRequest) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAircraftRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAircraftRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *CreateAircraftRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 382, "end_line": 416, "text": "func (x *CreateAircraftRequest) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAircraftRequest) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAircraftRequest) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAircraftRequest) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAircraftRequest) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}\n", "n_tokens": 203, "primary_symbol": "GetEngine", "primary_kind": "function", "primary_span": [382, 416], "def_symbols": ["GetEngine", "GetAverageSpeed", "GetWideBody", "GetWingspan", "GetLength"], "symbols": ["GetEngine", "GetAverageSpeed", "GetWideBody", "GetWingspan", "GetLength", "func", "CreateAircraftRequest", "string", "nil", "Engine", "return", "float32", "AverageSpeed", "WideBody", "Wingspan", "Length"], "doc_head": "func (x *CreateAircraftRequest) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAircraftRequest) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\nfunc (x *CreateAircraftRequest) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\nfunc (x *CreateAircraftRequest) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\nfunc (x *CreateAircraftRequest) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 417, "end_line": 444, "text": "func (x *CreateAircraftRequest) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAircraftRequest) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAircraftRequest) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAircraftRequest) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}\n", "n_tokens": 169, "primary_symbol": "GetHeight", "primary_kind": "function", "primary_span": [417, 444], "def_symbols": ["GetHeight", "GetSeatingCapacity", "GetFlightRange", "GetCrewSize"], "symbols": ["GetHeight", "GetSeatingCapacity", "GetFlightRange", "GetCrewSize", "func", "CreateAircraftRequest", "float32", "nil", "Height", "return", "int64", "SeatingCapacity", "FlightRange", "CrewSize"], "doc_head": "func (x *CreateAircraftRequest) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\nfunc (x *CreateAircraftRequest) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\nfunc (x *CreateAircraftRequest) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\nfunc (x *CreateAircraftRequest) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 445, "end_line": 465, "text": "type CreateAircraftResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAircraft *Aircraft `protobuf:\"bytes,1,opt,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\n\nfunc (x *CreateAircraftResponse) Reset() {\n\t*x = CreateAircraftResponse{}\n\tmi := &file_aircraft_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAircraftResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAircraftResponse) ProtoMessage() {}\n", "n_tokens": 143, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [453, 465], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateAircraftResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Aircraft", "protobuf", "bytes", "opt", "name", "aircraft", "proto3", "json", "omitempty", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreateAircraftResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAircraft *Aircraft `protobuf:\"bytes,1,opt,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\nfunc (x *CreateAircraftResponse) Reset() {\n\t*x = CreateAircraftResponse{}\n\tmi := &file_aircraft_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAircraftResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAircraftResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 466, "end_line": 489, "text": "func (x *CreateAircraftResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateAircraftResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAircraftResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *CreateAircraftResponse) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [466, 489], "def_symbols": ["ProtoReflect", "Descriptor", "GetAircraft"], "symbols": ["ProtoReflect", "Descriptor", "GetAircraft", "func", "CreateAircraftResponse", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "Aircraft"], "doc_head": "func (x *CreateAircraftResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateAircraftResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAircraftResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{5}\n}\nfunc (x *CreateAircraftResponse) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 490, "end_line": 505, "text": "type Aircraft struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId           string                   `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType         string                   `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName         string                   `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tImages       []*Aircraft_Image        `protobuf:\"bytes,4,rep,name=images,proto3\" json:\"images,omitempty\"`\n\tDescription  map[string]string        `protobuf:\"bytes,5,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl map[string]string        `protobuf:\"bytes,6,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tSpecs        *Aircraft_Specifications `protobuf:\"bytes,7,opt,name=specs,proto3,oneof\" json:\"specs,omitempty\"`\n\tCreatedAt    *timestamppb.Timestamp   `protobuf:\"bytes,8,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt    *timestamppb.Timestamp   `protobuf:\"bytes,9,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n}\n", "n_tokens": 308, "primary_symbol": "", "primary_kind": "", "primary_span": [490, 505], "def_symbols": [], "symbols": ["type", "Aircraft", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Type", "Name", "Images", "Aircraft_Image", "rep", "images", "Description", "map", "description", "protobuf_key", "key", "protobuf_val", "value", "WikipediaUrl", "wikipediaUrl", "Specs", "Aircraft_Specifications", "specs", "oneof", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt"], "doc_head": "type Aircraft struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId           string                   `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType         string                   `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName         string                   `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tImages       []*Aircraft_Image        `protobuf:\"bytes,4,rep,name=images,proto3\" json:\"images,omitempty\"`\n\tDescription  map[string]string        `protobuf:\"bytes,5,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl map[string]string        `protobuf:\"bytes,6,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tSpecs        *Aircraft_Specifications `protobuf:\"bytes,7,opt,name=specs,proto3,oneof\" json:\"specs,omitempty\"`\n\tCreatedAt    *timestamppb.Timestamp   `protobuf:\"bytes,8,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt    *ti"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 506, "end_line": 535, "text": "func (x *Aircraft) Reset() {\n\t*x = Aircraft{}\n\tmi := &file_aircraft_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Aircraft) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Aircraft) ProtoMessage() {}\n\nfunc (x *Aircraft) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Aircraft.ProtoReflect.Descriptor instead.\nfunc (*Aircraft) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{6}\n}\n", "n_tokens": 200, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [506, 535], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Aircraft", "file_aircraft_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP"], "doc_head": "func (x *Aircraft) Reset() {\n\t*x = Aircraft{}\n\tmi := &file_aircraft_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Aircraft) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Aircraft) ProtoMessage() {}\nfunc (x *Aircraft) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Aircraft.ProtoReflect.Descriptor instead.\nfunc (*Aircraft) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{6}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 536, "end_line": 584, "text": "func (x *Aircraft) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft) GetImages() []*Aircraft_Image {\n\tif x != nil {\n\t\treturn x.Images\n\t}\n\treturn nil\n}\n\nfunc (x *Aircraft) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Aircraft) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Aircraft) GetSpecs() *Aircraft_Specifications {\n\tif x != nil {\n\t\treturn x.Specs\n\t}\n\treturn nil\n}\n", "n_tokens": 209, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [536, 584], "def_symbols": ["GetId", "GetType", "GetName", "GetImages", "GetDescription", "GetWikipediaUrl", "GetSpecs"], "symbols": ["GetId", "GetType", "GetName", "GetImages", "GetDescription", "GetWikipediaUrl", "GetSpecs", "func", "Aircraft", "string", "nil", "return", "Type", "Name", "Aircraft_Image", "Images", "map", "Description", "WikipediaUrl", "Aircraft_Specifications", "Specs"], "doc_head": "func (x *Aircraft) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft) GetImages() []*Aircraft_Image {\n\tif x != nil {\n\t\treturn x.Images\n\t}\n\treturn nil\n}\nfunc (x *Aircraft) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Aircraft) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Aircraft) GetSpecs() *Aircraft_Specifications {\n\tif x != nil {\n\t\treturn x.Specs\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#24", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 585, "end_line": 598, "text": "func (x *Aircraft) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Aircraft) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n", "n_tokens": 68, "primary_symbol": "GetCreatedAt", "primary_kind": "function", "primary_span": [585, 598], "def_symbols": ["GetCreatedAt", "GetUpdatedAt"], "symbols": ["GetCreatedAt", "GetUpdatedAt", "func", "Aircraft", "timestamppb", "Timestamp", "nil", "return", "CreatedAt", "UpdatedAt"], "doc_head": "func (x *Aircraft) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Aircraft) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#25", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 599, "end_line": 619, "text": "type UpdateAircraftRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType            string            `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName            string            `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,4,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,5,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tEngine          *string           `protobuf:\"bytes,6,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32          `protobuf:\"fixed32,7,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32          `protobuf:\"fixed32,8,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspan        *float32          `protobuf:\"fixed32,9,opt,name=wingspan,proto3,oneof\" json:\"wingspan,omitempty\"`\n\tLength          *float32          `protobuf:\"fixed32,10,opt,name=length,proto3,oneof\" json:\"length,omitempty\"`\n\tHeight          *float32          `protobuf:\"fixed32,11,opt,name=height,proto3,oneof\" json:\"height,omitempty\"`\n\tSeatingCapacity *int64            `protobuf:\"varint,12,opt,name=seatingCapacity,proto3,oneof\" json:\"seatingCapacity,omitempty\"`\n\tFlightRange     *float32          `protobuf:\"fixed32,13,opt,name=flightRange,proto3,oneof\" json:\"flightRange,omitempty\"`\n\tCrewSize        *int64            `protobuf:\"varint,14,opt,name=crewSize,proto3,oneof\" json:\"crewSize,omitempty\"`\n}\n", "n_tokens": 475, "primary_symbol": "", "primary_kind": "", "primary_span": [599, 619], "def_symbols": [], "symbols": ["type", "UpdateAircraftRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Type", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WikipediaUrl", "wikipediaUrl", "Engine", "engine", "oneof", "AverageSpeed", "float32", "fixed32", "averageSpeed", "WideBody", "wideBody", "Wingspan", "wingspan", "Length", "length", "Height", "height", "SeatingCapacity", "int64", "varint", "seatingCapacity", "FlightRange", "flightRange", "CrewSize", "crewSize"], "doc_head": "type UpdateAircraftRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType            string            `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName            string            `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,4,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,5,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tEngine          *string           `protobuf:\"bytes,6,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32          `protobuf:\"fixed32,7,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32          `protobuf:\"fixed32,8,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspa"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#26", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 620, "end_line": 644, "text": "func (x *UpdateAircraftRequest) Reset() {\n\t*x = UpdateAircraftRequest{}\n\tmi := &file_aircraft_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAircraftRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAircraftRequest) ProtoMessage() {}\n\nfunc (x *UpdateAircraftRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [620, 644], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAircraftRequest", "file_aircraft_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAircraftRequest) Reset() {\n\t*x = UpdateAircraftRequest{}\n\tmi := &file_aircraft_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAircraftRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAircraftRequest) ProtoMessage() {}\nfunc (x *UpdateAircraftRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#27", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 645, "end_line": 684, "text": "// Deprecated: Use UpdateAircraftRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAircraftRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{7}\n}\n\nfunc (x *UpdateAircraftRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAircraftRequest) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAircraftRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAircraftRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAircraftRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n", "n_tokens": 200, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [646, 684], "def_symbols": ["Descriptor", "GetId", "GetType", "GetName", "GetDescription", "GetWikipediaUrl"], "symbols": ["Descriptor", "GetId", "GetType", "GetName", "GetDescription", "GetWikipediaUrl", "Deprecated", "Use", "UpdateAircraftRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_aircraft_proto_rawDescGZIP", "string", "nil", "Type", "Name", "map", "Description", "WikipediaUrl"], "doc_head": "// Deprecated: Use UpdateAircraftRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAircraftRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{7}\n}\nfunc (x *UpdateAircraftRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAircraftRequest) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAircraftRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAircraftRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *UpdateAircraftRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#28", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 685, "end_line": 719, "text": "func (x *UpdateAircraftRequest) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAircraftRequest) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAircraftRequest) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAircraftRequest) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAircraftRequest) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}\n", "n_tokens": 203, "primary_symbol": "GetEngine", "primary_kind": "function", "primary_span": [685, 719], "def_symbols": ["GetEngine", "GetAverageSpeed", "GetWideBody", "GetWingspan", "GetLength"], "symbols": ["GetEngine", "GetAverageSpeed", "GetWideBody", "GetWingspan", "GetLength", "func", "UpdateAircraftRequest", "string", "nil", "Engine", "return", "float32", "AverageSpeed", "WideBody", "Wingspan", "Length"], "doc_head": "func (x *UpdateAircraftRequest) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAircraftRequest) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\nfunc (x *UpdateAircraftRequest) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\nfunc (x *UpdateAircraftRequest) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\nfunc (x *UpdateAircraftRequest) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#29", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 720, "end_line": 747, "text": "func (x *UpdateAircraftRequest) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAircraftRequest) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAircraftRequest) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAircraftRequest) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}\n", "n_tokens": 169, "primary_symbol": "GetHeight", "primary_kind": "function", "primary_span": [720, 747], "def_symbols": ["GetHeight", "GetSeatingCapacity", "GetFlightRange", "GetCrewSize"], "symbols": ["GetHeight", "GetSeatingCapacity", "GetFlightRange", "GetCrewSize", "func", "UpdateAircraftRequest", "float32", "nil", "Height", "return", "int64", "SeatingCapacity", "FlightRange", "CrewSize"], "doc_head": "func (x *UpdateAircraftRequest) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\nfunc (x *UpdateAircraftRequest) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\nfunc (x *UpdateAircraftRequest) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\nfunc (x *UpdateAircraftRequest) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#30", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 748, "end_line": 768, "text": "type UpdateAircraftResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAircraft *Aircraft `protobuf:\"bytes,1,opt,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\n\nfunc (x *UpdateAircraftResponse) Reset() {\n\t*x = UpdateAircraftResponse{}\n\tmi := &file_aircraft_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAircraftResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAircraftResponse) ProtoMessage() {}\n", "n_tokens": 143, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [756, 768], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateAircraftResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Aircraft", "protobuf", "bytes", "opt", "name", "aircraft", "proto3", "json", "omitempty", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateAircraftResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAircraft *Aircraft `protobuf:\"bytes,1,opt,name=aircraft,proto3\" json:\"aircraft,omitempty\"`\n}\nfunc (x *UpdateAircraftResponse) Reset() {\n\t*x = UpdateAircraftResponse{}\n\tmi := &file_aircraft_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAircraftResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAircraftResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#31", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 769, "end_line": 792, "text": "func (x *UpdateAircraftResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateAircraftResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAircraftResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *UpdateAircraftResponse) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [769, 792], "def_symbols": ["ProtoReflect", "Descriptor", "GetAircraft"], "symbols": ["ProtoReflect", "Descriptor", "GetAircraft", "func", "UpdateAircraftResponse", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "Aircraft"], "doc_head": "func (x *UpdateAircraftResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateAircraftResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAircraftResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{8}\n}\nfunc (x *UpdateAircraftResponse) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#32", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 793, "end_line": 817, "text": "type UploadImageRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\t// Types that are assignable to Data:\n\t//\n\t//\t*UploadImageRequest_Metadata_\n\t//\t*UploadImageRequest_Chunk\n\tData isUploadImageRequest_Data `protobuf_oneof:\"data\"`\n}\n\nfunc (x *UploadImageRequest) Reset() {\n\t*x = UploadImageRequest{}\n\tmi := &file_aircraft_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageRequest) ProtoMessage() {}\n", "n_tokens": 156, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [805, 817], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UploadImageRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Types", "that", "are", "assignable", "Data", "UploadImageRequest_Metadata_", "UploadImageRequest_Chunk", "isUploadImageRequest_Data", "protobuf_oneof", "data", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UploadImageRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\t// Types that are assignable to Data:\n\t//\n\t//\t*UploadImageRequest_Metadata_\n\t//\t*UploadImageRequest_Chunk\n\tData isUploadImageRequest_Data `protobuf_oneof:\"data\"`\n}\nfunc (x *UploadImageRequest) Reset() {\n\t*x = UploadImageRequest{}\n\tmi := &file_aircraft_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#33", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 818, "end_line": 848, "text": "func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{9}\n}\n\nfunc (m *UploadImageRequest) GetData() isUploadImageRequest_Data {\n\tif m != nil {\n\t\treturn m.Data\n\t}\n\treturn nil\n}\n\nfunc (x *UploadImageRequest) GetMetadata() *UploadImageRequest_Metadata {\n\tif x, ok := x.GetData().(*UploadImageRequest_Metadata_); ok {\n\t\treturn x.Metadata\n\t}\n\treturn nil\n}\n", "n_tokens": 203, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [818, 848], "def_symbols": ["ProtoReflect", "Descriptor", "GetData", "GetMetadata"], "symbols": ["ProtoReflect", "Descriptor", "GetData", "GetMetadata", "func", "UploadImageRequest", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "isUploadImageRequest_Data", "Data", "UploadImageRequest_Metadata", "UploadImageRequest_Metadata_", "Metadata"], "doc_head": "func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{9}\n}\nfunc (m *UploadImageRequest) GetData() isUploadImageRequest_Data {\n\tif m != nil {\n\t\treturn m.Data\n\t}\n\treturn nil\n}\nfunc (x *UploadImageRequest) GetMetadata() *UploadImageRequest_Metadata {\n\tif x, ok := x.GetData().(*UploadImageRequest_Metadata_); ok {\n\t\treturn x.Metadata\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#34", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 849, "end_line": 879, "text": "func (x *UploadImageRequest) GetChunk() []byte {\n\tif x, ok := x.GetData().(*UploadImageRequest_Chunk); ok {\n\t\treturn x.Chunk\n\t}\n\treturn nil\n}\n\ntype isUploadImageRequest_Data interface {\n\tisUploadImageRequest_Data()\n}\n\ntype UploadImageRequest_Metadata_ struct {\n\tMetadata *UploadImageRequest_Metadata `protobuf:\"bytes,1,opt,name=metadata,proto3,oneof\"`\n}\n\ntype UploadImageRequest_Chunk struct {\n\tChunk []byte `protobuf:\"bytes,2,opt,name=chunk,proto3,oneof\"`\n}\n\nfunc (*UploadImageRequest_Metadata_) isUploadImageRequest_Data() {}\n\nfunc (*UploadImageRequest_Chunk) isUploadImageRequest_Data() {}\n\ntype UploadImageResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tSize int64 `protobuf:\"varint,1,opt,name=size,proto3\" json:\"size,omitempty\"`\n}\n", "n_tokens": 199, "primary_symbol": "GetChunk", "primary_kind": "function", "primary_span": [849, 879], "def_symbols": ["GetChunk", "isUploadImageRequest_Data"], "symbols": ["GetChunk", "isUploadImageRequest_Data", "func", "UploadImageRequest", "byte", "GetData", "UploadImageRequest_Chunk", "return", "Chunk", "nil", "type", "interface", "UploadImageRequest_Metadata_", "struct", "Metadata", "UploadImageRequest_Metadata", "protobuf", "bytes", "opt", "name", "metadata", "proto3", "oneof", "chunk", "UploadImageResponse", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Size", "int64", "varint", "size", "json", "omitempty"], "doc_head": "func (x *UploadImageRequest) GetChunk() []byte {\n\tif x, ok := x.GetData().(*UploadImageRequest_Chunk); ok {\n\t\treturn x.Chunk\n\t}\n\treturn nil\n}\ntype isUploadImageRequest_Data interface {\n\tisUploadImageRequest_Data()\n}\ntype UploadImageRequest_Metadata_ struct {\n\tMetadata *UploadImageRequest_Metadata `protobuf:\"bytes,1,opt,name=metadata,proto3,oneof\"`\n}\ntype UploadImageRequest_Chunk struct {\n\tChunk []byte `protobuf:\"bytes,2,opt,name=chunk,proto3,oneof\"`\n}\nfunc (*UploadImageRequest_Metadata_) isUploadImageRequest_Data() {}\nfunc (*UploadImageRequest_Chunk) isUploadImageRequest_Data() {}\ntype UploadImageResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tSize int64 `protobuf:\"varint,1,opt,name=size,proto3\" json:\"size,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#35", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 880, "end_line": 904, "text": "func (x *UploadImageResponse) Reset() {\n\t*x = UploadImageResponse{}\n\tmi := &file_aircraft_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageResponse) ProtoMessage() {}\n\nfunc (x *UploadImageResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [880, 904], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UploadImageResponse", "file_aircraft_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UploadImageResponse) Reset() {\n\t*x = UploadImageResponse{}\n\tmi := &file_aircraft_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageResponse) ProtoMessage() {}\nfunc (x *UploadImageResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#36", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 905, "end_line": 926, "text": "// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.\nfunc (*UploadImageResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{10}\n}\n\nfunc (x *UploadImageResponse) GetSize() int64 {\n\tif x != nil {\n\t\treturn x.Size\n\t}\n\treturn 0\n}\n\ntype SearchRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  int64   `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\n", "n_tokens": 176, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [906, 926], "def_symbols": ["Descriptor", "GetSize"], "symbols": ["Descriptor", "GetSize", "Deprecated", "Use", "UploadImageResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_aircraft_proto_rawDescGZIP", "int64", "nil", "Size", "type", "SearchRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "varint", "limit", "Cursor", "cursor", "oneof"], "doc_head": "// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.\nfunc (*UploadImageResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{10}\n}\nfunc (x *UploadImageResponse) GetSize() int64 {\n\tif x != nil {\n\t\treturn x.Size\n\t}\n\treturn 0\n}\ntype SearchRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  int64   `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#37", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 927, "end_line": 951, "text": "func (x *SearchRequest) Reset() {\n\t*x = SearchRequest{}\n\tmi := &file_aircraft_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchRequest) ProtoMessage() {}\n\nfunc (x *SearchRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [927, 951], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchRequest", "file_aircraft_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchRequest) Reset() {\n\t*x = SearchRequest{}\n\tmi := &file_aircraft_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchRequest) ProtoMessage() {}\nfunc (x *SearchRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#38", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 952, "end_line": 977, "text": "// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{11}\n}\n\nfunc (x *SearchRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchRequest) GetLimit() int64 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n\nfunc (x *SearchRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n", "n_tokens": 134, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [953, 977], "def_symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor"], "symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor", "Deprecated", "Use", "SearchRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_aircraft_proto_rawDescGZIP", "string", "nil", "int64", "Limit", "Cursor"], "doc_head": "// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchRequest) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{11}\n}\nfunc (x *SearchRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchRequest) GetLimit() int64 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\nfunc (x *SearchRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#39", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 978, "end_line": 999, "text": "type SearchResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tResult []*Aircraft `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext   *string     `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n}\n\nfunc (x *SearchResponse) Reset() {\n\t*x = SearchResponse{}\n\tmi := &file_aircraft_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchResponse) ProtoMessage() {}\n", "n_tokens": 157, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [987, 999], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Result", "Aircraft", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "string", "opt", "next", "oneof", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tResult []*Aircraft `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext   *string     `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n}\nfunc (x *SearchResponse) Reset() {\n\t*x = SearchResponse{}\n\tmi := &file_aircraft_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#40", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 1000, "end_line": 1030, "text": "func (x *SearchResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{12}\n}\n\nfunc (x *SearchResponse) GetResult() []*Aircraft {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n\nfunc (x *SearchResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1000, 1030], "def_symbols": ["ProtoReflect", "Descriptor", "GetResult", "GetNext"], "symbols": ["ProtoReflect", "Descriptor", "GetResult", "GetNext", "func", "SearchResponse", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "Aircraft", "Result", "string", "Next"], "doc_head": "func (x *SearchResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchResponse) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{12}\n}\nfunc (x *SearchResponse) GetResult() []*Aircraft {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\nfunc (x *SearchResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#41", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 1031, "end_line": 1052, "text": "type Aircraft_Image struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tType ImageType `protobuf:\"varint,1,opt,name=type,proto3,enum=aviation.aircraft.v0.ImageType\" json:\"type,omitempty\"`\n\tUrl  string    `protobuf:\"bytes,2,opt,name=url,proto3\" json:\"url,omitempty\"`\n}\n\nfunc (x *Aircraft_Image) Reset() {\n\t*x = Aircraft_Image{}\n\tmi := &file_aircraft_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Aircraft_Image) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Aircraft_Image) ProtoMessage() {}\n", "n_tokens": 166, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1040, 1052], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Aircraft_Image", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Type", "ImageType", "protobuf", "varint", "opt", "name", "proto3", "enum", "aviation", "aircraft", "json", "omitempty", "Url", "string", "bytes", "url", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Aircraft_Image struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tType ImageType `protobuf:\"varint,1,opt,name=type,proto3,enum=aviation.aircraft.v0.ImageType\" json:\"type,omitempty\"`\n\tUrl  string    `protobuf:\"bytes,2,opt,name=url,proto3\" json:\"url,omitempty\"`\n}\nfunc (x *Aircraft_Image) Reset() {\n\t*x = Aircraft_Image{}\n\tmi := &file_aircraft_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Aircraft_Image) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Aircraft_Image) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#42", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 1053, "end_line": 1083, "text": "func (x *Aircraft_Image) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Aircraft_Image.ProtoReflect.Descriptor instead.\nfunc (*Aircraft_Image) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{6, 0}\n}\n\nfunc (x *Aircraft_Image) GetType() ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn ImageType_OVERVIEW\n}\n\nfunc (x *Aircraft_Image) GetUrl() string {\n\tif x != nil {\n\t\treturn x.Url\n\t}\n\treturn \"\"\n}\n", "n_tokens": 188, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1053, 1083], "def_symbols": ["ProtoReflect", "Descriptor", "GetType", "GetUrl"], "symbols": ["ProtoReflect", "Descriptor", "GetType", "GetUrl", "func", "Aircraft_Image", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "ImageType", "Type", "ImageType_OVERVIEW", "string", "Url"], "doc_head": "func (x *Aircraft_Image) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Aircraft_Image.ProtoReflect.Descriptor instead.\nfunc (*Aircraft_Image) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{6, 0}\n}\nfunc (x *Aircraft_Image) GetType() ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn ImageType_OVERVIEW\n}\nfunc (x *Aircraft_Image) GetUrl() string {\n\tif x != nil {\n\t\treturn x.Url\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#43", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1084, "end_line": 1099, "text": "type Aircraft_Specifications struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEngine          *string  `protobuf:\"bytes,1,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32 `protobuf:\"fixed32,2,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32 `protobuf:\"fixed32,3,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspan        *float32 `protobuf:\"fixed32,4,opt,name=wingspan,proto3,oneof\" json:\"wingspan,omitempty\"`\n\tLength          *float32 `protobuf:\"fixed32,5,opt,name=length,proto3,oneof\" json:\"length,omitempty\"`\n\tHeight          *float32 `protobuf:\"fixed32,6,opt,name=height,proto3,oneof\" json:\"height,omitempty\"`\n\tSeatingCapacity *int64   `protobuf:\"varint,7,opt,name=seatingCapacity,proto3,oneof\" json:\"seatingCapacity,omitempty\"`\n\tFlightRange     *float32 `protobuf:\"fixed32,8,opt,name=flightRange,proto3,oneof\" json:\"flightRange,omitempty\"`\n\tCrewSize        *int64   `protobuf:\"varint,9,opt,name=crewSize,proto3,oneof\" json:\"crewSize,omitempty\"`\n}\n", "n_tokens": 304, "primary_symbol": "", "primary_kind": "", "primary_span": [1084, 1099], "def_symbols": [], "symbols": ["type", "Aircraft_Specifications", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Engine", "string", "protobuf", "bytes", "opt", "name", "engine", "proto3", "oneof", "json", "omitempty", "AverageSpeed", "float32", "fixed32", "averageSpeed", "WideBody", "wideBody", "Wingspan", "wingspan", "Length", "length", "Height", "height", "SeatingCapacity", "int64", "varint", "seatingCapacity", "FlightRange", "flightRange", "CrewSize", "crewSize"], "doc_head": "type Aircraft_Specifications struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEngine          *string  `protobuf:\"bytes,1,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32 `protobuf:\"fixed32,2,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32 `protobuf:\"fixed32,3,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspan        *float32 `protobuf:\"fixed32,4,opt,name=wingspan,proto3,oneof\" json:\"wingspan,omitempty\"`\n\tLength          *float32 `protobuf:\"fixed32,5,opt,name=length,proto3,oneof\" json:\"length,omitempty\"`\n\tHeight          *float32 `protobuf:\"fixed32,6,opt,name=height,proto3,oneof\" json:\"height,omitempty\"`\n\tSeatingCapacity *int64   `protobuf:\"varint,7,opt,name=seatingCapacity,proto3,oneof\" json:\"seatingCapacity,omitempty\"`\n\tFlightRange     *float32 `protobuf:\"fixed32,8,opt,name=flightRange,proto3,oneof\" json:\"flightRange,omitempty\"`\n\tCrewSize        *int64   `protobuf:\"varint,9,opt,name=crewSize,proto3,oneof\" json:\"crewSize,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#44", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1100, "end_line": 1124, "text": "func (x *Aircraft_Specifications) Reset() {\n\t*x = Aircraft_Specifications{}\n\tmi := &file_aircraft_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Aircraft_Specifications) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Aircraft_Specifications) ProtoMessage() {}\n\nfunc (x *Aircraft_Specifications) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 173, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1100, 1124], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Aircraft_Specifications", "file_aircraft_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Aircraft_Specifications) Reset() {\n\t*x = Aircraft_Specifications{}\n\tmi := &file_aircraft_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Aircraft_Specifications) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Aircraft_Specifications) ProtoMessage() {}\nfunc (x *Aircraft_Specifications) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#45", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1125, "end_line": 1150, "text": "// Deprecated: Use Aircraft_Specifications.ProtoReflect.Descriptor instead.\nfunc (*Aircraft_Specifications) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{6, 1}\n}\n\nfunc (x *Aircraft_Specifications) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft_Specifications) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft_Specifications) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\n", "n_tokens": 175, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1126, 1150], "def_symbols": ["Descriptor", "GetEngine", "GetAverageSpeed", "GetWideBody"], "symbols": ["Descriptor", "GetEngine", "GetAverageSpeed", "GetWideBody", "Deprecated", "Use", "Aircraft_Specifications", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_aircraft_proto_rawDescGZIP", "string", "nil", "Engine", "float32", "AverageSpeed", "WideBody"], "doc_head": "// Deprecated: Use Aircraft_Specifications.ProtoReflect.Descriptor instead.\nfunc (*Aircraft_Specifications) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{6, 1}\n}\nfunc (x *Aircraft_Specifications) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft_Specifications) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\nfunc (x *Aircraft_Specifications) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#46", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 1151, "end_line": 1178, "text": "func (x *Aircraft_Specifications) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft_Specifications) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft_Specifications) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft_Specifications) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\n", "n_tokens": 168, "primary_symbol": "GetWingspan", "primary_kind": "function", "primary_span": [1151, 1178], "def_symbols": ["GetWingspan", "GetLength", "GetHeight", "GetSeatingCapacity"], "symbols": ["GetWingspan", "GetLength", "GetHeight", "GetSeatingCapacity", "func", "Aircraft_Specifications", "float32", "nil", "Wingspan", "return", "Length", "Height", "int64", "SeatingCapacity"], "doc_head": "func (x *Aircraft_Specifications) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\nfunc (x *Aircraft_Specifications) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}\nfunc (x *Aircraft_Specifications) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\nfunc (x *Aircraft_Specifications) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#47", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 1179, "end_line": 1192, "text": "func (x *Aircraft_Specifications) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft_Specifications) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}\n", "n_tokens": 89, "primary_symbol": "GetFlightRange", "primary_kind": "function", "primary_span": [1179, 1192], "def_symbols": ["GetFlightRange", "GetCrewSize"], "symbols": ["GetFlightRange", "GetCrewSize", "func", "Aircraft_Specifications", "float32", "nil", "FlightRange", "return", "int64", "CrewSize"], "doc_head": "func (x *Aircraft_Specifications) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\nfunc (x *Aircraft_Specifications) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#48", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 1193, "end_line": 1209, "text": "type UploadImageRequest_Metadata struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAircraftId string                   `protobuf:\"bytes,1,opt,name=aircraftId,proto3\" json:\"aircraftId,omitempty\"`\n\tType       ImageType                `protobuf:\"varint,2,opt,name=type,proto3,enum=aviation.aircraft.v0.ImageType\" json:\"type,omitempty\"`\n\tScale      UploadImageRequest_Scale `protobuf:\"varint,3,opt,name=scale,proto3,enum=aviation.aircraft.v0.UploadImageRequest_Scale\" json:\"scale,omitempty\"`\n}\n\nfunc (x *UploadImageRequest_Metadata) Reset() {\n\t*x = UploadImageRequest_Metadata{}\n\tmi := &file_aircraft_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 187, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1203, 1209], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "UploadImageRequest_Metadata", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "AircraftId", "string", "protobuf", "bytes", "opt", "name", "aircraftId", "proto3", "json", "omitempty", "Type", "ImageType", "varint", "enum", "aviation", "aircraft", "Scale", "UploadImageRequest_Scale", "scale", "func", "file_aircraft_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type UploadImageRequest_Metadata struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAircraftId string                   `protobuf:\"bytes,1,opt,name=aircraftId,proto3\" json:\"aircraftId,omitempty\"`\n\tType       ImageType                `protobuf:\"varint,2,opt,name=type,proto3,enum=aviation.aircraft.v0.ImageType\" json:\"type,omitempty\"`\n\tScale      UploadImageRequest_Scale `protobuf:\"varint,3,opt,name=scale,proto3,enum=aviation.aircraft.v0.UploadImageRequest_Scale\" json:\"scale,omitempty\"`\n}\nfunc (x *UploadImageRequest_Metadata) Reset() {\n\t*x = UploadImageRequest_Metadata{}\n\tmi := &file_aircraft_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#49", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 1210, "end_line": 1239, "text": "func (x *UploadImageRequest_Metadata) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageRequest_Metadata) ProtoMessage() {}\n\nfunc (x *UploadImageRequest_Metadata) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageRequest_Metadata.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest_Metadata) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{9, 0}\n}\n\nfunc (x *UploadImageRequest_Metadata) GetAircraftId() string {\n\tif x != nil {\n\t\treturn x.AircraftId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 199, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1210, 1239], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAircraftId"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAircraftId", "func", "UploadImageRequest_Metadata", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_aircraft_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_aircraft_proto_rawDescGZIP", "AircraftId"], "doc_head": "func (x *UploadImageRequest_Metadata) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageRequest_Metadata) ProtoMessage() {}\nfunc (x *UploadImageRequest_Metadata) ProtoReflect() protoreflect.Message {\n\tmi := &file_aircraft_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageRequest_Metadata.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest_Metadata) Descriptor() ([]byte, []int) {\n\treturn file_aircraft_proto_rawDescGZIP(), []int{9, 0}\n}\nfunc (x *UploadImageRequest_Metadata) GetAircraftId() string {\n\tif x != nil {\n\t\treturn x.AircraftId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#50", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 1240, "end_line": 1246, "text": "func (x *UploadImageRequest_Metadata) GetType() ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn ImageType_OVERVIEW\n}\n", "n_tokens": 33, "primary_symbol": "GetType", "primary_kind": "function", "primary_span": [1240, 1246], "def_symbols": ["GetType"], "symbols": ["GetType", "func", "UploadImageRequest_Metadata", "ImageType", "nil", "return", "Type", "ImageType_OVERVIEW"], "doc_head": "func (x *UploadImageRequest_Metadata) GetType() ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn ImageType_OVERVIEW\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#51", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 1247, "end_line": 1550, "text": "func (x *UploadImageRequest_Metadata) GetScale() UploadImageRequest_Scale {\n\tif x != nil {\n\t\treturn x.Scale\n\t}\n\treturn UploadImageRequest_SCALE_1X\n}\n\nvar File_aircraft_proto protoreflect.FileDescriptor\n\nvar file_aircraft_proto_rawDesc = []byte{\n\t0x0a, 0x0e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x12, 0x14, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72,\n\t0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,\n\t0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,\n\t0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x10,\n\t0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x12, 0x3a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18, 0x01, 0x20, 0x03,\n\t0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61,\n\t0x66, 0x74, 0x52, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x22, 0x28, 0x0a, 0x16,\n\t0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x17, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61,\n\t0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72,\n\t0x61, 0x66, 0x74, 0x52, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x22, 0xc9, 0x06,\n\t0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,\n\t0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,\n\t0x5e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61,\n\t0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,\n\t0x61, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18,\n\t0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65,\n\t0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55,\n\t0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,\n\t0x27, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,\n\t0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,\n\t0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x65,\n\t0x42, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x77, 0x69,\n\t0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x6e,\n\t0x67, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x08, 0x77,\n\t0x69, 0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65,\n\t0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x6c, 0x65,\n\t0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,\n\t0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,\n\t0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,\n\t0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52,\n\t0x0f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,\n\t0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e,\n\t0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67,\n\t0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x72,\n\t0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x08,\n\t0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,\n\t0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,\n\t0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x65, 0x72,\n\t0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x64,\n\t0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70,\n\t0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x09, 0x0a,\n\t0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x61,\n\t0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c,\n\t0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,\n\t0x5f, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x43, 0x72, 0x65,\n\t0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72,\n\t0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x22,\n\t0x8b, 0x09, 0x0a, 0x08, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x12, 0x0e, 0x0a, 0x02,\n\t0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,\n\t0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,\n\t0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,\n\t0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63,\n\t0x72, 0x61, 0x66, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,\n\t0x65, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,\n\t0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x41,\n\t0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n\t0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,\n\t0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64,\n\t0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x76,\n\t0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e,\n\t0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69,\n\t0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x05, 0x73,\n\t0x70, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76,\n\t0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,\n\t0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65,\n\t0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,\n\t0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,\n\t0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,\n\t0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,\n\t0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01,\n\t0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,\n\t0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,\n\t0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x4e, 0x0a, 0x05, 0x49, 0x6d, 0x61,\n\t0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,\n\t0x32, 0x1f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63,\n\t0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,\n\t0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xc6, 0x03, 0x0a, 0x0e, 0x53, 0x70,\n\t0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x06,\n\t0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,\n\t0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x76, 0x65,\n\t0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48,\n\t0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88,\n\t0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03,\n\t0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x77, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79,\n\t0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x18,\n\t0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70, 0x61,\n\t0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05,\n\t0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01,\n\t0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,\n\t0x02, 0x48, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,\n\t0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,\n\t0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x69,\n\t0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,\n\t0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,\n\t0x28, 0x02, 0x48, 0x07, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67,\n\t0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65,\n\t0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x08, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69,\n\t0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,\n\t0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65,\n\t0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0b,\n\t0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,\n\t0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,\n\t0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70,\n\t0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,\n\t0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69,\n\t0x7a, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,\n\t0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,\n\t0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,\n\t0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55,\n\t0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,\n\t0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0xc9, 0x06,\n\t0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,\n\t0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,\n\t0x5e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61,\n\t0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,\n\t0x61, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18,\n\t0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55,\n\t0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,\n\t0x27, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,\n\t0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,\n\t0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x65,\n\t0x42, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x77, 0x69,\n\t0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x6e,\n\t0x67, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x08, 0x77,\n\t0x69, 0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65,\n\t0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x6c, 0x65,\n\t0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,\n\t0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,\n\t0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,\n\t0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52,\n\t0x0f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,\n\t0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e,\n\t0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67,\n\t0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x72,\n\t0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x08,\n\t0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,\n\t0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,\n\t0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x65, 0x72,\n\t0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x64,\n\t0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70,\n\t0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x09, 0x0a,\n\t0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x61,\n\t0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c,\n\t0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,\n\t0x5f, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72,\n\t0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x22,\n\t0xe0, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,\n\t0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e,\n\t0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d,\n\t0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a,\n\t0xa5, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,\n\t0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x0a, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04,\n\t0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76,\n\t0x30, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,\n\t0x65, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,\n\t0x32, 0x2e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63,\n\t0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d,\n\t0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65,\n\t0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65,\n\t0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x31, 0x58, 0x10, 0x00, 0x12, 0x0c,\n\t0x0a, 0x08, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x32, 0x58, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,\n\t0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x33, 0x58, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,\n\t0x74, 0x61, 0x22, 0x29, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67,\n\t0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,\n\t0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a,\n\t0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c,\n\t0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14, 0x0a, 0x05,\n\t0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,\n\t0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,\n\t0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x0e, 0x53, 0x65,\n\t0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06,\n\t0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,\n\t0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x06, 0x72, 0x65,\n\t0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,\n\t0x05, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x2a, 0x19, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,\n\t0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10,\n\t0x00, 0x32, 0xe1, 0x04, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65,\n\t0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,\n\t0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61,\n\t0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76,\n\t0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,\n\t0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x42,\n\t0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x42,\n\t0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61,\n\t0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,\n\t0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,\n\t0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72,\n\t0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72,\n\t0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,\n\t0x65, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30,\n\t0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70,\n\t0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x6c,\n\t0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,\n\t0x29, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72,\n\t0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61,\n\t0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x55,\n\t0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x2e,\n\t0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66,\n\t0x74, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_aircraft_proto_rawDescOnce sync.Once\n\tfile_aircraft_proto_rawDescData = file_aircraft_proto_rawDesc\n)\n", "n_tokens": 23913, "primary_symbol": "GetScale", "primary_kind": "function", "primary_span": [1247, 1550], "def_symbols": ["GetScale"], "symbols": ["GetScale", "func", "UploadImageRequest_Metadata", "UploadImageRequest_Scale", "nil", "return", "Scale", "UploadImageRequest_SCALE_1X", "var", "File_aircraft_proto", "protoreflect", "FileDescriptor", "file_aircraft_proto_rawDesc", "byte", "file_aircraft_proto_rawDescOnce", "sync", "Once", "file_aircraft_proto_rawDescData"], "doc_head": "func (x *UploadImageRequest_Metadata) GetScale() UploadImageRequest_Scale {\n\tif x != nil {\n\t\treturn x.Scale\n\t}\n\treturn UploadImageRequest_SCALE_1X\n}\nvar File_aircraft_proto protoreflect.FileDescriptor\nvar file_aircraft_proto_rawDesc = []byte{\n\t0x0a, 0x0e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x12, 0x14, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x72,\n\t0x61, 0x66, 0x74, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,\n\t0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,\n\t0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x10,\n\t0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x12, 0x3a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18, 0x01, 0x20, 0x03,\n\t0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#52", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 1551, "end_line": 1625, "text": "func file_aircraft_proto_rawDescGZIP() []byte {\n\tfile_aircraft_proto_rawDescOnce.Do(func() {\n\t\tfile_aircraft_proto_rawDescData = protoimpl.X.CompressGZIP(file_aircraft_proto_rawDescData)\n\t})\n\treturn file_aircraft_proto_rawDescData\n}\n\nvar file_aircraft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_aircraft_proto_msgTypes = make([]protoimpl.MessageInfo, 22)\nvar file_aircraft_proto_goTypes = []any{\n\t(ImageType)(0),                      // 0: aviation.aircraft.v0.ImageType\n\t(UploadImageRequest_Scale)(0),       // 1: aviation.aircraft.v0.UploadImageRequest.Scale\n\t(*BatchGetRequest)(nil),             // 2: aviation.aircraft.v0.BatchGetRequest\n\t(*BatchGetResponse)(nil),            // 3: aviation.aircraft.v0.BatchGetResponse\n\t(*AircraftDetailsRequest)(nil),      // 4: aviation.aircraft.v0.AircraftDetailsRequest\n\t(*AircraftDetailsResponse)(nil),     // 5: aviation.aircraft.v0.AircraftDetailsResponse\n\t(*CreateAircraftRequest)(nil),       // 6: aviation.aircraft.v0.CreateAircraftRequest\n\t(*CreateAircraftResponse)(nil),      // 7: aviation.aircraft.v0.CreateAircraftResponse\n\t(*Aircraft)(nil),                    // 8: aviation.aircraft.v0.Aircraft\n\t(*UpdateAircraftRequest)(nil),       // 9: aviation.aircraft.v0.UpdateAircraftRequest\n\t(*UpdateAircraftResponse)(nil),      // 10: aviation.aircraft.v0.UpdateAircraftResponse\n\t(*UploadImageRequest)(nil),          // 11: aviation.aircraft.v0.UploadImageRequest\n\t(*UploadImageResponse)(nil),         // 12: aviation.aircraft.v0.UploadImageResponse\n\t(*SearchRequest)(nil),               // 13: aviation.aircraft.v0.SearchRequest\n\t(*SearchResponse)(nil),              // 14: aviation.aircraft.v0.SearchResponse\n\tnil,                                 // 15: aviation.aircraft.v0.CreateAircraftRequest.DescriptionEntry\n\tnil,                                 // 16: aviation.aircraft.v0.CreateAircraftRequest.WikipediaUrlEntry\n\t(*Aircraft_Image)(nil),              // 17: aviation.aircraft.v0.Aircraft.Image\n\t(*Aircraft_Specifications)(nil),     // 18: aviation.aircraft.v0.Aircraft.Specifications\n\tnil,                                 // 19: aviation.aircraft.v0.Aircraft.DescriptionEntry\n\tnil,                                 // 20: aviation.aircraft.v0.Aircraft.WikipediaUrlEntry\n\tnil,                                 // 21: aviation.aircraft.v0.UpdateAircraftRequest.DescriptionEntry\n\tnil,                                 // 22: aviation.aircraft.v0.UpdateAircraftRequest.WikipediaUrlEntry\n\t(*UploadImageRequest_Metadata)(nil), // 23: aviation.aircraft.v0.UploadImageRequest.Metadata\n\t(*timestamppb.Timestamp)(nil),       // 24: google.protobuf.Timestamp\n}\nvar file_aircraft_proto_depIdxs = []int32{\n\t8,  // 0: aviation.aircraft.v0.BatchGetResponse.aircraft:type_name -> aviation.aircraft.v0.Aircraft\n\t8,  // 1: aviation.aircraft.v0.AircraftDetailsResponse.aircraft:type_name -> aviation.aircraft.v0.Aircraft\n\t15, // 2: aviation.aircraft.v0.CreateAircraftRequest.description:type_name -> aviation.aircraft.v0.CreateAircraftRequest.DescriptionEntry\n\t16, // 3: aviation.aircraft.v0.CreateAircraftRequest.wikipediaUrl:type_name -> aviation.aircraft.v0.CreateAircraftRequest.WikipediaUrlEntry\n\t8,  // 4: aviation.aircraft.v0.CreateAircraftResponse.aircraft:type_name -> aviation.aircraft.v0.Aircraft\n\t17, // 5: aviation.aircraft.v0.Aircraft.images:type_name -> aviation.aircraft.v0.Aircraft.Image\n\t19, // 6: aviation.aircraft.v0.Aircraft.description:type_name -> aviation.aircraft.v0.Aircraft.DescriptionEntry\n\t20, // 7: aviation.aircraft.v0.Aircraft.wikipediaUrl:type_name -> aviation.aircraft.v0.Aircraft.WikipediaUrlEntry\n\t18, // 8: aviation.aircraft.v0.Aircraft.specs:type_name -> aviation.aircraft.v0.Aircraft.Specifications\n\t24, // 9: aviation.aircraft.v0.Aircraft.createdAt:type_name -> google.protobuf.Timestamp\n\t24, // 10: aviation.aircraft.v0.Aircraft.updatedAt:type_name -> google.protobuf.Timestamp\n\t21, // 11: aviation.aircraft.v0.UpdateAircraftRequest.description:type_name -> aviation.aircraft.v0.UpdateAircraftRequest.DescriptionEntry\n\t22, // 12: aviation.aircraft.v0.UpdateAircraftRequest.wikipediaUrl:type_name -> aviation.aircraft.v0.UpdateAircraftRequest.WikipediaUrlEntry\n\t8,  // 13: aviation.aircraft.v0.UpdateAircraftResponse.aircraft:type_name -> aviation.aircraft.v0.Aircraft\n\t23, // 14: aviation.aircraft.v0.UploadImageRequest.metadata:type_name -> aviation.aircraft.v0.UploadImageRequest.Metadata\n\t8,  // 15: aviation.aircraft.v0.SearchResponse.result:type_name -> aviation.aircraft.v0.Aircraft\n\t0,  // 16: aviation.aircraft.v0.Aircraft.Image.type:type_name -> aviation.aircraft.v0.ImageType\n\t0,  // 17: aviation.aircraft.v0.UploadImageRequest.Metadata.type:type_name -> aviation.aircraft.v0.ImageType\n\t1,  // 18: aviation.aircraft.v0.UploadImageRequest.Metadata.scale:type_name -> aviation.aircraft.v0.UploadImageRequest.Scale\n\t4,  // 19: aviation.aircraft.v0.AircraftService.Get:input_type -> aviation.aircraft.v0.AircraftDetailsRequest\n\t2,  // 20: aviation.aircraft.v0.AircraftService.BatchGet:input_type -> aviation.aircraft.v0.BatchGetRequest\n\t6,  // 21: aviation.aircraft.v0.AircraftService.Create:input_type -> aviation.aircraft.v0.CreateAircraftRequest\n\t9,  // 22: aviation.aircraft.v0.AircraftService.Update:input_type -> aviation.aircraft.v0.UpdateAircraftRequest\n\t11, // 23: aviation.aircraft.v0.AircraftService.UploadImage:input_type -> aviation.aircraft.v0.UploadImageRequest\n\t13, // 24: aviation.aircraft.v0.AircraftService.Search:input_type -> aviation.aircraft.v0.SearchRequest\n\t5,  // 25: aviation.aircraft.v0.AircraftService.Get:output_type -> aviation.aircraft.v0.AircraftDetailsResponse\n\t3,  // 26: aviation.aircraft.v0.AircraftService.BatchGet:output_type -> aviation.aircraft.v0.BatchGetResponse\n\t7,  // 27: aviation.aircraft.v0.AircraftService.Create:output_type -> aviation.aircraft.v0.CreateAircraftResponse\n\t10, // 28: aviation.aircraft.v0.AircraftService.Update:output_type -> aviation.aircraft.v0.UpdateAircraftResponse\n\t12, // 29: aviation.aircraft.v0.AircraftService.UploadImage:output_type -> aviation.aircraft.v0.UploadImageResponse\n\t14, // 30: aviation.aircraft.v0.AircraftService.Search:output_type -> aviation.aircraft.v0.SearchResponse\n\t25, // [25:31] is the sub-list for method output_type\n\t19, // [19:25] is the sub-list for method input_type\n\t19, // [19:19] is the sub-list for extension type_name\n\t19, // [19:19] is the sub-list for extension extendee\n\t0,  // [0:19] is the sub-list for field type_name\n}\n", "n_tokens": 1674, "primary_symbol": "file_aircraft_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [1551, 1625], "def_symbols": ["file_aircraft_proto_rawDescGZIP"], "symbols": ["file_aircraft_proto_rawDescGZIP", "func", "byte", "file_aircraft_proto_rawDescOnce", "file_aircraft_proto_rawDescData", "protoimpl", "CompressGZIP", "return", "var", "file_aircraft_proto_enumTypes", "make", "EnumInfo", "file_aircraft_proto_msgTypes", "MessageInfo", "file_aircraft_proto_goTypes", "any", "ImageType", "aviation", "aircraft", "UploadImageRequest_Scale", "UploadImageRequest", "Scale", "BatchGetRequest", "nil", "BatchGetResponse", "AircraftDetailsRequest", "AircraftDetailsResponse", "CreateAircraftRequest", "CreateAircraftResponse", "Aircraft", "UpdateAircraftRequest", "UpdateAircraftResponse", "UploadImageResponse", "SearchRequest", "SearchResponse", "DescriptionEntry", "WikipediaUrlEntry", "Aircraft_Image", "Image", "Aircraft_Specifications", "Specifications", "UploadImageRequest_Metadata", "Metadata", "timestamppb", "Timestamp", "google", "protobuf", "file_aircraft_proto_depIdxs", "int32", "type_name", "description", "wikipediaUrl", "images", "specs", "createdAt", "updatedAt", "metadata", "result", "type", "scale", "AircraftService", "Get", "input_type", "BatchGet", "Create", "Update", "UploadImage", "Search", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "func file_aircraft_proto_rawDescGZIP() []byte {\n\tfile_aircraft_proto_rawDescOnce.Do(func() {\n\t\tfile_aircraft_proto_rawDescData = protoimpl.X.CompressGZIP(file_aircraft_proto_rawDescData)\n\t})\n\treturn file_aircraft_proto_rawDescData\n}\nvar file_aircraft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_aircraft_proto_msgTypes = make([]protoimpl.MessageInfo, 22)\nvar file_aircraft_proto_goTypes = []any{\n\t(ImageType)(0),                      // 0: aviation.aircraft.v0.ImageType\n\t(UploadImageRequest_Scale)(0),       // 1: aviation.aircraft.v0.UploadImageRequest.Scale\n\t(*BatchGetRequest)(nil),             // 2: aviation.aircraft.v0.BatchGetRequest\n\t(*BatchGetResponse)(nil),            // 3: aviation.aircraft.v0.BatchGetResponse\n\t(*AircraftDetailsRequest)(nil),      // 4: aviation.aircraft.v0.AircraftDetailsRequest\n\t(*AircraftDetailsResponse)(nil),     // 5: aviation.aircraft.v0.AircraftDetailsResponse\n\t(*CreateAircraftRequest)(nil),       // 6: aviation.aircraft.v0.CreateAircraftRequest\n\t(*CreateAircraftResponse)(nil),      // 7: aviation.aircraft.v0.CreateAircraftResponse\n\t(*Aircraft)(nil),                    // 8: aviation.aircraft.v0.Aircraft\n\t(*UpdateAircraftRequest)(nil),      "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#53", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 1626, "end_line": 1640, "text": "func init() { file_aircraft_proto_init() }\nfunc file_aircraft_proto_init() {\n\tif File_aircraft_proto != nil {\n\t\treturn\n\t}\n\tfile_aircraft_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[7].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[9].OneofWrappers = []any{\n\t\t(*UploadImageRequest_Metadata_)(nil),\n\t\t(*UploadImageRequest_Chunk)(nil),\n\t}\n\tfile_aircraft_proto_msgTypes[11].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[16].OneofWrappers = []any{}", "n_tokens": 175, "primary_symbol": "init", "primary_kind": "function", "primary_span": [1626, 1640], "def_symbols": ["init", "file_aircraft_proto_init"], "symbols": ["init", "file_aircraft_proto_init", "func", "File_aircraft_proto", "nil", "return", "file_aircraft_proto_msgTypes", "OneofWrappers", "any", "UploadImageRequest_Metadata_", "UploadImageRequest_Chunk"], "doc_head": "func init() { file_aircraft_proto_init() }\nfunc file_aircraft_proto_init() {\n\tif File_aircraft_proto != nil {\n\t\treturn\n\t}\n\tfile_aircraft_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[7].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[9].OneofWrappers = []any{\n\t\t(*UploadImageRequest_Metadata_)(nil),\n\t\t(*UploadImageRequest_Chunk)(nil),\n\t}\n\tfile_aircraft_proto_msgTypes[11].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_aircraft_proto_msgTypes[16].OneofWrappers = []any{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go#54", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/aircraft/aircraft.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 1641, "end_line": 1661, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_aircraft_proto_rawDesc,\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   22,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_aircraft_proto_goTypes,\n\t\tDependencyIndexes: file_aircraft_proto_depIdxs,\n\t\tEnumInfos:         file_aircraft_proto_enumTypes,\n\t\tMessageInfos:      file_aircraft_proto_msgTypes,\n\t}.Build()\n\tFile_aircraft_proto = out.File\n\tfile_aircraft_proto_rawDesc = nil\n\tfile_aircraft_proto_goTypes = nil\n\tfile_aircraft_proto_depIdxs = nil\n}\n", "n_tokens": 176, "primary_symbol": "", "primary_kind": "", "primary_span": [1641, 1661], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "file_aircraft_proto_rawDesc", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_aircraft_proto_goTypes", "DependencyIndexes", "file_aircraft_proto_depIdxs", "EnumInfos", "file_aircraft_proto_enumTypes", "MessageInfos", "file_aircraft_proto_msgTypes", "Build", "File_aircraft_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_aircraft_proto_rawDesc,\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   22,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_aircraft_proto_goTypes,\n\t\tDependencyIndexes: file_aircraft_proto_depIdxs,\n\t\tEnumInfos:         file_aircraft_proto_enumTypes,\n\t\tMessageInfos:      file_aircraft_proto_msgTypes,\n\t}.Build()\n\tFile_aircraft_proto = out.File\n\tfile_aircraft_proto_rawDesc = nil\n\tfile_aircraft_proto_goTypes = nil\n\tfile_aircraft_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package airlines\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairlines.proto=.;airlines airlines.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairlines.proto=.;airlines airlines.proto\n", "n_tokens": 74, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "airlines", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "Mairlines", "proto", "grpc_out", "grpc_opt"], "doc_head": "package airlines\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairlines.proto=.;airlines airlines.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairlines.proto=.;airlines airlines.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: airlines.proto\n\npackage airlines\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "airlines", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "timestamppb", "types", "known", "sync", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: airlines.proto\npackage airlines\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 46, "text": "type SearchAirlinesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\n\nfunc (x *SearchAirlinesRequest) Reset() {\n\t*x = SearchAirlinesRequest{}\n\tmi := &file_airlines_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchAirlinesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirlinesRequest) ProtoMessage() {}\n", "n_tokens": 189, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [34, 46], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchAirlinesRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchAirlinesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\nfunc (x *SearchAirlinesRequest) Reset() {\n\t*x = SearchAirlinesRequest{}\n\tmi := &file_airlines_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchAirlinesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirlinesRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 47, "end_line": 77, "text": "func (x *SearchAirlinesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchAirlinesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *SearchAirlinesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirlinesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 191, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [47, 77], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchAirlinesRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchAirlinesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchAirlinesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *SearchAirlinesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirlinesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 78, "end_line": 101, "text": "func (x *SearchAirlinesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchAirlinesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tResult   []*SlimAirline `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext     *string        `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious *string        `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\n\nfunc (x *SearchAirlinesResponse) Reset() {\n\t*x = SearchAirlinesResponse{}\n\tmi := &file_airlines_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 196, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [78, 101], "def_symbols": ["GetCursor", "Reset"], "symbols": ["GetCursor", "Reset", "func", "SearchAirlinesRequest", "string", "nil", "Cursor", "return", "type", "SearchAirlinesResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Result", "SlimAirline", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "opt", "next", "oneof", "Previous", "previous", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *SearchAirlinesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchAirlinesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tResult   []*SlimAirline `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext     *string        `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious *string        `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\nfunc (x *SearchAirlinesResponse) Reset() {\n\t*x = SearchAirlinesResponse{}\n\tmi := &file_airlines_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 102, "end_line": 131, "text": "func (x *SearchAirlinesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirlinesResponse) ProtoMessage() {}\n\nfunc (x *SearchAirlinesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchAirlinesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *SearchAirlinesResponse) GetResult() []*SlimAirline {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 196, "primary_symbol": "String", "primary_kind": "function", "primary_span": [102, 131], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchAirlinesResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "SlimAirline", "Result"], "doc_head": "func (x *SearchAirlinesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirlinesResponse) ProtoMessage() {}\nfunc (x *SearchAirlinesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchAirlinesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirlinesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *SearchAirlinesResponse) GetResult() []*SlimAirline {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 132, "end_line": 164, "text": "func (x *SearchAirlinesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirlinesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\ntype DeleteAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *DeleteAirlineRequest) Reset() {\n\t*x = DeleteAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *DeleteAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 198, "primary_symbol": "GetNext", "primary_kind": "function", "primary_span": [132, 164], "def_symbols": ["GetNext", "GetPrevious", "Reset", "String"], "symbols": ["GetNext", "GetPrevious", "Reset", "String", "func", "SearchAirlinesResponse", "string", "nil", "Next", "return", "Previous", "type", "DeleteAirlineRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *SearchAirlinesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirlinesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\ntype DeleteAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *DeleteAirlineRequest) Reset() {\n\t*x = DeleteAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *DeleteAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 165, "end_line": 190, "text": "func (*DeleteAirlineRequest) ProtoMessage() {}\n\nfunc (x *DeleteAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DeleteAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *DeleteAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 169, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [165, 190], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetId", "func", "DeleteAirlineRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string"], "doc_head": "func (*DeleteAirlineRequest) ProtoMessage() {}\nfunc (x *DeleteAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use DeleteAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{2}\n}\nfunc (x *DeleteAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 191, "end_line": 211, "text": "type DeleteAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\n\nfunc (x *DeleteAirlineResponse) Reset() {\n\t*x = DeleteAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *DeleteAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*DeleteAirlineResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [199, 211], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "DeleteAirlineResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type DeleteAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\nfunc (x *DeleteAirlineResponse) Reset() {\n\t*x = DeleteAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *DeleteAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*DeleteAirlineResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 212, "end_line": 235, "text": "func (x *DeleteAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DeleteAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *DeleteAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 164, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [212, 235], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "func", "DeleteAirlineResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *DeleteAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use DeleteAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*DeleteAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{3}\n}\nfunc (x *DeleteAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 236, "end_line": 254, "text": "type UpdateAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                         string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string           `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string           `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64             `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string            `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWebsiteUrl                 *string           `protobuf:\"bytes,7,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string `protobuf:\"bytes,8,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl                *string           `protobuf:\"bytes,9,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string           `protobuf:\"bytes,10,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string           `protobuf:\"bytes,11,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tHubAirportId               *string           `protobuf:\"bytes,12,opt,name=hubAirportId,proto3,oneof\" json:\"hubAirportId,omitempty\"`\n}\n", "n_tokens": 409, "primary_symbol": "", "primary_kind": "", "primary_span": [236, 254], "def_symbols": [], "symbols": ["type", "UpdateAirlineRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "HubAirportId", "hubAirportId"], "doc_head": "type UpdateAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId                         string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string           `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string           `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64             `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string            `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWebsiteUrl                 *string           `protobuf:\"bytes,7,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string `protobuf:\"bytes,8,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 255, "end_line": 279, "text": "func (x *UpdateAirlineRequest) Reset() {\n\t*x = UpdateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirlineRequest) ProtoMessage() {}\n\nfunc (x *UpdateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [255, 279], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAirlineRequest", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAirlineRequest) Reset() {\n\t*x = UpdateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirlineRequest) ProtoMessage() {}\nfunc (x *UpdateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 280, "end_line": 312, "text": "// Deprecated: Use UpdateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *UpdateAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n", "n_tokens": 185, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [281, 312], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "Deprecated", "Use", "UpdateAirlineRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification"], "doc_head": "// Deprecated: Use UpdateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{4}\n}\nfunc (x *UpdateAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 313, "end_line": 347, "text": "func (x *UpdateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 176, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [313, 347], "def_symbols": ["GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl"], "symbols": ["GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "func", "UpdateAirlineRequest", "string", "nil", "return", "Name", "map", "Description", "WebsiteUrl", "WikipediaUrl", "FacebookUrl"], "doc_head": "func (x *UpdateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 348, "end_line": 376, "text": "func (x *UpdateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirlineRequest) GetHubAirportId() string {\n\tif x != nil && x.HubAirportId != nil {\n\t\treturn *x.HubAirportId\n\t}\n\treturn \"\"\n}\n\ntype UpdateAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\n", "n_tokens": 183, "primary_symbol": "GetTwitterUrl", "primary_kind": "function", "primary_span": [348, 376], "def_symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetHubAirportId"], "symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetHubAirportId", "func", "UpdateAirlineRequest", "string", "nil", "TwitterUrl", "return", "ReservationTelephoneNumber", "HubAirportId", "type", "UpdateAirlineResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty"], "doc_head": "func (x *UpdateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirlineRequest) GetHubAirportId() string {\n\tif x != nil && x.HubAirportId != nil {\n\t\treturn *x.HubAirportId\n\t}\n\treturn \"\"\n}\ntype UpdateAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 377, "end_line": 401, "text": "func (x *UpdateAirlineResponse) Reset() {\n\t*x = UpdateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirlineResponse) ProtoMessage() {}\n\nfunc (x *UpdateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [377, 401], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAirlineResponse", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAirlineResponse) Reset() {\n\t*x = UpdateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirlineResponse) ProtoMessage() {}\nfunc (x *UpdateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 402, "end_line": 413, "text": "// Deprecated: Use UpdateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *UpdateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 82, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [403, 413], "def_symbols": ["Descriptor", "GetAirline"], "symbols": ["Descriptor", "GetAirline", "Deprecated", "Use", "UpdateAirlineResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "Airline", "nil"], "doc_head": "// Deprecated: Use UpdateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{5}\n}\nfunc (x *UpdateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 414, "end_line": 432, "text": "type CreateAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                         string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string           `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string           `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64             `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string            `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWebsiteUrl                 *string           `protobuf:\"bytes,7,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string `protobuf:\"bytes,8,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl                *string           `protobuf:\"bytes,9,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string           `protobuf:\"bytes,10,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string           `protobuf:\"bytes,11,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tHubAirportId               string            `protobuf:\"bytes,12,opt,name=hubAirportId,proto3\" json:\"hubAirportId,omitempty\"`\n}\n", "n_tokens": 405, "primary_symbol": "", "primary_kind": "", "primary_span": [414, 432], "def_symbols": [], "symbols": ["type", "CreateAirlineRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "HubAirportId", "hubAirportId"], "doc_head": "type CreateAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId                         string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string           `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string           `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64             `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string            `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWebsiteUrl                 *string           `protobuf:\"bytes,7,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string `protobuf:\"bytes,8,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 433, "end_line": 457, "text": "func (x *CreateAirlineRequest) Reset() {\n\t*x = CreateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirlineRequest) ProtoMessage() {}\n\nfunc (x *CreateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [433, 457], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateAirlineRequest", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateAirlineRequest) Reset() {\n\t*x = CreateAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirlineRequest) ProtoMessage() {}\nfunc (x *CreateAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 458, "end_line": 490, "text": "// Deprecated: Use CreateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{6}\n}\n\nfunc (x *CreateAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n", "n_tokens": 185, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [459, 490], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "Deprecated", "Use", "CreateAirlineRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification"], "doc_head": "// Deprecated: Use CreateAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{6}\n}\nfunc (x *CreateAirlineRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 491, "end_line": 525, "text": "func (x *CreateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 176, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [491, 525], "def_symbols": ["GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl"], "symbols": ["GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "func", "CreateAirlineRequest", "string", "nil", "return", "Name", "map", "Description", "WebsiteUrl", "WikipediaUrl", "FacebookUrl"], "doc_head": "func (x *CreateAirlineRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *CreateAirlineRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *CreateAirlineRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 526, "end_line": 554, "text": "func (x *CreateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirlineRequest) GetHubAirportId() string {\n\tif x != nil {\n\t\treturn x.HubAirportId\n\t}\n\treturn \"\"\n}\n\ntype CreateAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\n", "n_tokens": 174, "primary_symbol": "GetTwitterUrl", "primary_kind": "function", "primary_span": [526, 554], "def_symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetHubAirportId"], "symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetHubAirportId", "func", "CreateAirlineRequest", "string", "nil", "TwitterUrl", "return", "ReservationTelephoneNumber", "HubAirportId", "type", "CreateAirlineResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty"], "doc_head": "func (x *CreateAirlineRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirlineRequest) GetHubAirportId() string {\n\tif x != nil {\n\t\treturn x.HubAirportId\n\t}\n\treturn \"\"\n}\ntype CreateAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 555, "end_line": 579, "text": "func (x *CreateAirlineResponse) Reset() {\n\t*x = CreateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirlineResponse) ProtoMessage() {}\n\nfunc (x *CreateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [555, 579], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateAirlineResponse", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateAirlineResponse) Reset() {\n\t*x = CreateAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirlineResponse) ProtoMessage() {}\nfunc (x *CreateAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 580, "end_line": 606, "text": "// Deprecated: Use CreateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{7}\n}\n\nfunc (x *CreateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n\ntype AirlineDetailsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *AirlineDetailsRequest) Reset() {\n\t*x = AirlineDetailsRequest{}\n\tmi := &file_airlines_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 185, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [581, 606], "def_symbols": ["Descriptor", "GetAirline", "Reset"], "symbols": ["Descriptor", "GetAirline", "Reset", "Deprecated", "Use", "CreateAirlineResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "Airline", "nil", "type", "AirlineDetailsRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "// Deprecated: Use CreateAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{7}\n}\nfunc (x *CreateAirlineResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\ntype AirlineDetailsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *AirlineDetailsRequest) Reset() {\n\t*x = AirlineDetailsRequest{}\n\tmi := &file_airlines_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#24", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 607, "end_line": 636, "text": "func (x *AirlineDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirlineDetailsRequest) ProtoMessage() {}\n\nfunc (x *AirlineDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirlineDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *AirlineDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 192, "primary_symbol": "String", "primary_kind": "function", "primary_span": [607, 636], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetId"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetId", "func", "AirlineDetailsRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP"], "doc_head": "func (x *AirlineDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirlineDetailsRequest) ProtoMessage() {}\nfunc (x *AirlineDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirlineDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{8}\n}\nfunc (x *AirlineDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#25", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 637, "end_line": 657, "text": "type AirlineDetailsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\n\nfunc (x *AirlineDetailsResponse) Reset() {\n\t*x = AirlineDetailsResponse{}\n\tmi := &file_airlines_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirlineDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirlineDetailsResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [645, 657], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirlineDetailsResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AirlineDetailsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\nfunc (x *AirlineDetailsResponse) Reset() {\n\t*x = AirlineDetailsResponse{}\n\tmi := &file_airlines_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirlineDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirlineDetailsResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#26", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 658, "end_line": 681, "text": "func (x *AirlineDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirlineDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{9}\n}\n\nfunc (x *AirlineDetailsResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 164, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [658, 681], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "func", "AirlineDetailsResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *AirlineDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirlineDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirlineDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{9}\n}\nfunc (x *AirlineDetailsResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#27", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 682, "end_line": 702, "text": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tIds []string `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n}\n\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airlines_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetRequest) ProtoMessage() {}\n", "n_tokens": 136, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [690, 702], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Ids", "string", "protobuf", "bytes", "rep", "name", "ids", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tIds []string `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n}\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airlines_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#28", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 703, "end_line": 726, "text": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{10}\n}\n\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\n", "n_tokens": 157, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [703, 726], "def_symbols": ["ProtoReflect", "Descriptor", "GetIds"], "symbols": ["ProtoReflect", "Descriptor", "GetIds", "func", "BatchGetRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Ids"], "doc_head": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{10}\n}\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#29", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 727, "end_line": 747, "text": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirlines []*Airline `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n}\n\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airlines_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetResponse) ProtoMessage() {}\n", "n_tokens": 139, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [735, 747], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airlines", "Airline", "protobuf", "bytes", "rep", "name", "airlines", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirlines []*Airline `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n}\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airlines_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#30", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 748, "end_line": 771, "text": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{11}\n}\n\nfunc (x *BatchGetResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}\n", "n_tokens": 159, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [748, 771], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirlines"], "symbols": ["ProtoReflect", "Descriptor", "GetAirlines", "func", "BatchGetResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline", "Airlines"], "doc_head": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{11}\n}\nfunc (x *BatchGetResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#31", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 772, "end_line": 792, "text": "type StreamDesignatorMappingsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tOptions *StreamDesignatorMappingsRequest_Options `protobuf:\"bytes,1,opt,name=options,proto3\" json:\"options,omitempty\"`\n}\n\nfunc (x *StreamDesignatorMappingsRequest) Reset() {\n\t*x = StreamDesignatorMappingsRequest{}\n\tmi := &file_airlines_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *StreamDesignatorMappingsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*StreamDesignatorMappingsRequest) ProtoMessage() {}\n", "n_tokens": 149, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [780, 792], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "StreamDesignatorMappingsRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Options", "StreamDesignatorMappingsRequest_Options", "protobuf", "bytes", "opt", "name", "options", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type StreamDesignatorMappingsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tOptions *StreamDesignatorMappingsRequest_Options `protobuf:\"bytes,1,opt,name=options,proto3\" json:\"options,omitempty\"`\n}\nfunc (x *StreamDesignatorMappingsRequest) Reset() {\n\t*x = StreamDesignatorMappingsRequest{}\n\tmi := &file_airlines_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *StreamDesignatorMappingsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*StreamDesignatorMappingsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#32", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 793, "end_line": 816, "text": "func (x *StreamDesignatorMappingsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use StreamDesignatorMappingsRequest.ProtoReflect.Descriptor instead.\nfunc (*StreamDesignatorMappingsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{12}\n}\n\nfunc (x *StreamDesignatorMappingsRequest) GetOptions() *StreamDesignatorMappingsRequest_Options {\n\tif x != nil {\n\t\treturn x.Options\n\t}\n\treturn nil\n}\n", "n_tokens": 169, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [793, 816], "def_symbols": ["ProtoReflect", "Descriptor", "GetOptions"], "symbols": ["ProtoReflect", "Descriptor", "GetOptions", "func", "StreamDesignatorMappingsRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "StreamDesignatorMappingsRequest_Options", "Options"], "doc_head": "func (x *StreamDesignatorMappingsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use StreamDesignatorMappingsRequest.ProtoReflect.Descriptor instead.\nfunc (*StreamDesignatorMappingsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{12}\n}\nfunc (x *StreamDesignatorMappingsRequest) GetOptions() *StreamDesignatorMappingsRequest_Options {\n\tif x != nil {\n\t\treturn x.Options\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#33", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 817, "end_line": 837, "text": "type CreatePristineAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator string `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}\n\nfunc (x *CreatePristineAirlineRequest) Reset() {\n\t*x = CreatePristineAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreatePristineAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreatePristineAirlineRequest) ProtoMessage() {}\n", "n_tokens": 157, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [825, 837], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreatePristineAirlineRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type CreatePristineAirlineRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator string `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}\nfunc (x *CreatePristineAirlineRequest) Reset() {\n\t*x = CreatePristineAirlineRequest{}\n\tmi := &file_airlines_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreatePristineAirlineRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreatePristineAirlineRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#34", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 838, "end_line": 861, "text": "func (x *CreatePristineAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreatePristineAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*CreatePristineAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{13}\n}\n\nfunc (x *CreatePristineAirlineRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n", "n_tokens": 172, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [838, 861], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "CreatePristineAirlineRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Designator"], "doc_head": "func (x *CreatePristineAirlineRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreatePristineAirlineRequest.ProtoReflect.Descriptor instead.\nfunc (*CreatePristineAirlineRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{13}\n}\nfunc (x *CreatePristineAirlineRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#35", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 862, "end_line": 882, "text": "type CreatePristineAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMapping *DesignatorMapping `protobuf:\"bytes,1,opt,name=mapping,proto3\" json:\"mapping,omitempty\"`\n}\n\nfunc (x *CreatePristineAirlineResponse) Reset() {\n\t*x = CreatePristineAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreatePristineAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreatePristineAirlineResponse) ProtoMessage() {}\n", "n_tokens": 157, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [870, 882], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreatePristineAirlineResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Mapping", "DesignatorMapping", "protobuf", "bytes", "opt", "name", "mapping", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreatePristineAirlineResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tMapping *DesignatorMapping `protobuf:\"bytes,1,opt,name=mapping,proto3\" json:\"mapping,omitempty\"`\n}\nfunc (x *CreatePristineAirlineResponse) Reset() {\n\t*x = CreatePristineAirlineResponse{}\n\tmi := &file_airlines_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreatePristineAirlineResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreatePristineAirlineResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#36", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 883, "end_line": 906, "text": "func (x *CreatePristineAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreatePristineAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*CreatePristineAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{14}\n}\n\nfunc (x *CreatePristineAirlineResponse) GetMapping() *DesignatorMapping {\n\tif x != nil {\n\t\treturn x.Mapping\n\t}\n\treturn nil\n}\n", "n_tokens": 174, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [883, 906], "def_symbols": ["ProtoReflect", "Descriptor", "GetMapping"], "symbols": ["ProtoReflect", "Descriptor", "GetMapping", "func", "CreatePristineAirlineResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "DesignatorMapping", "Mapping"], "doc_head": "func (x *CreatePristineAirlineResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreatePristineAirlineResponse.ProtoReflect.Descriptor instead.\nfunc (*CreatePristineAirlineResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{14}\n}\nfunc (x *CreatePristineAirlineResponse) GetMapping() *DesignatorMapping {\n\tif x != nil {\n\t\treturn x.Mapping\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#37", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 907, "end_line": 928, "text": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignators []string `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate     *string  `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n}\n\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}\n", "n_tokens": 184, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [916, 928], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designators", "string", "protobuf", "bytes", "rep", "name", "designators", "proto3", "json", "omitempty", "ForDate", "opt", "forDate", "oneof", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignators []string `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate     *string  `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n}\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#38", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 929, "end_line": 952, "text": "func (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{15}\n}\n\nfunc (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\n", "n_tokens": 170, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [929, 952], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignators"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignators", "func", "BatchGetByDesignatorRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Designators"], "doc_head": "func (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{15}\n}\nfunc (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#39", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 953, "end_line": 980, "text": "func (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirlines []*Airline `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n}\n\nfunc (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 194, "primary_symbol": "GetForDate", "primary_kind": "function", "primary_span": [953, 980], "def_symbols": ["GetForDate", "Reset", "String", "ProtoMessage"], "symbols": ["GetForDate", "Reset", "String", "ProtoMessage", "func", "BatchGetByDesignatorRequest", "string", "nil", "ForDate", "return", "type", "BatchGetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airlines", "Airline", "protobuf", "bytes", "rep", "name", "airlines", "proto3", "json", "omitempty", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirlines []*Airline `protobuf:\"bytes,1,rep,name=airlines,proto3\" json:\"airlines,omitempty\"`\n}\nfunc (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#40", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 981, "end_line": 1004, "text": "func (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{16}\n}\n\nfunc (x *BatchGetByDesignatorResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}\n", "n_tokens": 171, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [981, 1004], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirlines"], "symbols": ["ProtoReflect", "Descriptor", "GetAirlines", "func", "BatchGetByDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline", "Airlines"], "doc_head": "func (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{16}\n}\nfunc (x *BatchGetByDesignatorResponse) GetAirlines() []*Airline {\n\tif x != nil {\n\t\treturn x.Airlines\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#41", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 1005, "end_line": 1026, "text": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator string  `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate    *string `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n}\n\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetByDesignatorRequest) ProtoMessage() {}\n", "n_tokens": 177, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1014, 1026], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "ForDate", "forDate", "oneof", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator string  `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate    *string `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n}\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airlines_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetByDesignatorRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#42", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 1027, "end_line": 1057, "text": "func (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{17}\n}\n\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n", "n_tokens": 203, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1027, 1057], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "GetForDate"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "GetForDate", "func", "GetByDesignatorRequest", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Designator", "ForDate"], "doc_head": "func (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{17}\n}\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#43", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1058, "end_line": 1078, "text": "type GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\n\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetByDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 149, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1066, 1078], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airline", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirline *Airline `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n}\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airlines_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetByDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#44", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1079, "end_line": 1102, "text": "func (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{18}\n}\n\nfunc (x *GetByDesignatorResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n", "n_tokens": 168, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1079, 1102], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "func", "GetByDesignatorResponse", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "Airline"], "doc_head": "func (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{18}\n}\nfunc (x *GetByDesignatorResponse) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#45", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1103, "end_line": 1124, "text": "type DesignatorMapping struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator string `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tId         string `protobuf:\"bytes,2,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *DesignatorMapping) Reset() {\n\t*x = DesignatorMapping{}\n\tmi := &file_airlines_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *DesignatorMapping) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*DesignatorMapping) ProtoMessage() {}\n", "n_tokens": 157, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1112, 1124], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "DesignatorMapping", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "func", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type DesignatorMapping struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator string `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tId         string `protobuf:\"bytes,2,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *DesignatorMapping) Reset() {\n\t*x = DesignatorMapping{}\n\tmi := &file_airlines_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *DesignatorMapping) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*DesignatorMapping) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#46", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 1125, "end_line": 1155, "text": "func (x *DesignatorMapping) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DesignatorMapping.ProtoReflect.Descriptor instead.\nfunc (*DesignatorMapping) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{19}\n}\n\nfunc (x *DesignatorMapping) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *DesignatorMapping) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1125, 1155], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "GetId", "func", "DesignatorMapping", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Designator"], "doc_head": "func (x *DesignatorMapping) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use DesignatorMapping.ProtoReflect.Descriptor instead.\nfunc (*DesignatorMapping) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{19}\n}\nfunc (x *DesignatorMapping) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *DesignatorMapping) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#47", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 1156, "end_line": 1172, "text": "type SlimAirline struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId             string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata           *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao           *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName           string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tAssets         *Assets                `protobuf:\"bytes,6,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tCreatedAt      *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt      *timestamppb.Timestamp `protobuf:\"bytes,8,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator     *string                `protobuf:\"bytes,9,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine       bool                   `protobuf:\"varint,10,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n}\n", "n_tokens": 286, "primary_symbol": "", "primary_kind": "", "primary_span": [1156, 1172], "def_symbols": [], "symbols": ["type", "SlimAirline", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Assets", "assets", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "Designator", "designator", "Pristine", "bool", "pristine"], "doc_head": "type SlimAirline struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId             string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata           *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao           *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName           string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tAssets         *Assets                `protobuf:\"bytes,6,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tCreatedAt      *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt      *timestamppb.Timestamp `protobuf:\"bytes,8,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator     *string                `protobuf:\"bytes,9,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine       bool                   `protobuf:\"varint,10,opt,"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#48", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 1173, "end_line": 1197, "text": "func (x *SlimAirline) Reset() {\n\t*x = SlimAirline{}\n\tmi := &file_airlines_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SlimAirline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SlimAirline) ProtoMessage() {}\n\nfunc (x *SlimAirline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1173, 1197], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SlimAirline", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SlimAirline) Reset() {\n\t*x = SlimAirline{}\n\tmi := &file_airlines_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SlimAirline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SlimAirline) ProtoMessage() {}\nfunc (x *SlimAirline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#49", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 1198, "end_line": 1237, "text": "// Deprecated: Use SlimAirline.ProtoReflect.Descriptor instead.\nfunc (*SlimAirline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20}\n}\n\nfunc (x *SlimAirline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *SlimAirline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n", "n_tokens": 206, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1199, 1237], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "SlimAirline", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "Name"], "doc_head": "// Deprecated: Use SlimAirline.ProtoReflect.Descriptor instead.\nfunc (*SlimAirline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{20}\n}\nfunc (x *SlimAirline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *SlimAirline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#50", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 1238, "end_line": 1272, "text": "func (x *SlimAirline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\n\nfunc (x *SlimAirline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *SlimAirline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *SlimAirline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *SlimAirline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\n", "n_tokens": 171, "primary_symbol": "GetAssets", "primary_kind": "function", "primary_span": [1238, 1272], "def_symbols": ["GetAssets", "GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine"], "symbols": ["GetAssets", "GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine", "func", "SlimAirline", "Assets", "nil", "return", "timestamppb", "Timestamp", "CreatedAt", "UpdatedAt", "string", "Designator", "bool", "Pristine", "false"], "doc_head": "func (x *SlimAirline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\nfunc (x *SlimAirline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *SlimAirline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *SlimAirline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *SlimAirline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#51", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 1273, "end_line": 1296, "text": "type Airline struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                         string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tAssets                     *Assets                `protobuf:\"bytes,7,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,8,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string      `protobuf:\"bytes,9,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl                *string                `protobuf:\"bytes,10,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string                `protobuf:\"bytes,11,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string                `protobuf:\"bytes,12,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tHubAirport                 *Airline_Airport       `protobuf:\"bytes,13,opt,name=hubAirport,proto3,oneof\" json:\"hubAirport,omitempty\"`\n\tCreatedAt                  *timestamppb.Timestamp `protobuf:\"bytes,14,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt                  *timestamppb.Timestamp `protobuf:\"bytes,15,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator                 *string                `protobuf:\"bytes,16,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine                   bool                   `protobuf:\"varint,17,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n}\n", "n_tokens": 545, "primary_symbol": "", "primary_kind": "", "primary_span": [1273, 1296], "def_symbols": [], "symbols": ["type", "Airline", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "Assets", "assets", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "HubAirport", "Airline_Airport", "hubAirport", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "Designator", "designator", "Pristine", "bool", "pristine"], "doc_head": "type Airline struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId                         string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata                       *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string                 `protobuf:\"bytes,5,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string      `protobuf:\"bytes,6,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tAssets                     *Assets                `protobuf:\"bytes,7,opt,name=assets,proto3\" json:\"assets,omitempty\"`\n\tWebsiteUrl                 *string                `protobuf:\"bytes,8,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omite"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#52", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 1297, "end_line": 1321, "text": "func (x *Airline) Reset() {\n\t*x = Airline{}\n\tmi := &file_airlines_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline) ProtoMessage() {}\n\nfunc (x *Airline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1297, 1321], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline) Reset() {\n\t*x = Airline{}\n\tmi := &file_airlines_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline) ProtoMessage() {}\nfunc (x *Airline) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#53", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 1322, "end_line": 1361, "text": "// Deprecated: Use Airline.ProtoReflect.Descriptor instead.\nfunc (*Airline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21}\n}\n\nfunc (x *Airline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *Airline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n", "n_tokens": 199, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1323, 1361], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "Airline", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "Name"], "doc_head": "// Deprecated: Use Airline.ProtoReflect.Descriptor instead.\nfunc (*Airline) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21}\n}\nfunc (x *Airline) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *Airline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#54", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 1362, "end_line": 1403, "text": "func (x *Airline) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 208, "primary_symbol": "GetDescription", "primary_kind": "function", "primary_span": [1362, 1403], "def_symbols": ["GetDescription", "GetAssets", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl"], "symbols": ["GetDescription", "GetAssets", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "func", "Airline", "map", "string", "nil", "return", "Description", "Assets", "WebsiteUrl", "WikipediaUrl", "FacebookUrl", "TwitterUrl"], "doc_head": "func (x *Airline) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetAssets() *Assets {\n\tif x != nil {\n\t\treturn x.Assets\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#55", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 55, "start_line": 1404, "end_line": 1438, "text": "func (x *Airline) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetHubAirport() *Airline_Airport {\n\tif x != nil {\n\t\treturn x.HubAirport\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n", "n_tokens": 181, "primary_symbol": "GetReservationTelephoneNumber", "primary_kind": "function", "primary_span": [1404, 1438], "def_symbols": ["GetReservationTelephoneNumber", "GetHubAirport", "GetCreatedAt", "GetUpdatedAt", "GetDesignator"], "symbols": ["GetReservationTelephoneNumber", "GetHubAirport", "GetCreatedAt", "GetUpdatedAt", "GetDesignator", "func", "Airline", "string", "nil", "ReservationTelephoneNumber", "return", "Airline_Airport", "HubAirport", "timestamppb", "Timestamp", "CreatedAt", "UpdatedAt", "Designator"], "doc_head": "func (x *Airline) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetHubAirport() *Airline_Airport {\n\tif x != nil {\n\t\treturn x.HubAirport\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#56", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 56, "start_line": 1439, "end_line": 1466, "text": "func (x *Airline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\n\ntype Assets struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tRect   *string `protobuf:\"bytes,1,opt,name=rect,proto3,oneof\" json:\"rect,omitempty\"`\n\tSquare *string `protobuf:\"bytes,2,opt,name=square,proto3,oneof\" json:\"square,omitempty\"`\n\tTail   *string `protobuf:\"bytes,3,opt,name=tail,proto3,oneof\" json:\"tail,omitempty\"`\n}\n\nfunc (x *Assets) Reset() {\n\t*x = Assets{}\n\tmi := &file_airlines_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Assets) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 203, "primary_symbol": "GetPristine", "primary_kind": "function", "primary_span": [1439, 1466], "def_symbols": ["GetPristine", "Reset", "String"], "symbols": ["GetPristine", "Reset", "String", "func", "Airline", "bool", "nil", "return", "Pristine", "false", "type", "Assets", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Rect", "string", "protobuf", "bytes", "opt", "name", "rect", "proto3", "oneof", "json", "omitempty", "Square", "square", "Tail", "tail", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *Airline) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\ntype Assets struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tRect   *string `protobuf:\"bytes,1,opt,name=rect,proto3,oneof\" json:\"rect,omitempty\"`\n\tSquare *string `protobuf:\"bytes,2,opt,name=square,proto3,oneof\" json:\"square,omitempty\"`\n\tTail   *string `protobuf:\"bytes,3,opt,name=tail,proto3,oneof\" json:\"tail,omitempty\"`\n}\nfunc (x *Assets) Reset() {\n\t*x = Assets{}\n\tmi := &file_airlines_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Assets) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#57", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 57, "start_line": 1467, "end_line": 1499, "text": "func (*Assets) ProtoMessage() {}\n\nfunc (x *Assets) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Assets.ProtoReflect.Descriptor instead.\nfunc (*Assets) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{22}\n}\n\nfunc (x *Assets) GetRect() string {\n\tif x != nil && x.Rect != nil {\n\t\treturn *x.Rect\n\t}\n\treturn \"\"\n}\n\nfunc (x *Assets) GetSquare() string {\n\tif x != nil && x.Square != nil {\n\t\treturn *x.Square\n\t}\n\treturn \"\"\n}\n", "n_tokens": 194, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [1467, 1499], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetRect", "GetSquare"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetRect", "GetSquare", "func", "Assets", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "Rect", "Square"], "doc_head": "func (*Assets) ProtoMessage() {}\nfunc (x *Assets) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Assets.ProtoReflect.Descriptor instead.\nfunc (*Assets) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{22}\n}\nfunc (x *Assets) GetRect() string {\n\tif x != nil && x.Rect != nil {\n\t\treturn *x.Rect\n\t}\n\treturn \"\"\n}\nfunc (x *Assets) GetSquare() string {\n\tif x != nil && x.Square != nil {\n\t\treturn *x.Square\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#58", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 58, "start_line": 1500, "end_line": 1527, "text": "func (x *Assets) GetTail() string {\n\tif x != nil && x.Tail != nil {\n\t\treturn *x.Tail\n\t}\n\treturn \"\"\n}\n\ntype StreamDesignatorMappingsRequest_Options struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tForDate *string `protobuf:\"bytes,1,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n}\n\nfunc (x *StreamDesignatorMappingsRequest_Options) Reset() {\n\t*x = StreamDesignatorMappingsRequest_Options{}\n\tmi := &file_airlines_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *StreamDesignatorMappingsRequest_Options) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*StreamDesignatorMappingsRequest_Options) ProtoMessage() {}\n", "n_tokens": 190, "primary_symbol": "GetTail", "primary_kind": "function", "primary_span": [1500, 1527], "def_symbols": ["GetTail", "Reset", "String", "ProtoMessage"], "symbols": ["GetTail", "Reset", "String", "ProtoMessage", "func", "Assets", "string", "nil", "Tail", "return", "type", "StreamDesignatorMappingsRequest_Options", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "ForDate", "protobuf", "bytes", "opt", "name", "forDate", "proto3", "oneof", "json", "omitempty", "file_airlines_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *Assets) GetTail() string {\n\tif x != nil && x.Tail != nil {\n\t\treturn *x.Tail\n\t}\n\treturn \"\"\n}\ntype StreamDesignatorMappingsRequest_Options struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tForDate *string `protobuf:\"bytes,1,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n}\nfunc (x *StreamDesignatorMappingsRequest_Options) Reset() {\n\t*x = StreamDesignatorMappingsRequest_Options{}\n\tmi := &file_airlines_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *StreamDesignatorMappingsRequest_Options) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*StreamDesignatorMappingsRequest_Options) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#59", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 59, "start_line": 1528, "end_line": 1551, "text": "func (x *StreamDesignatorMappingsRequest_Options) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use StreamDesignatorMappingsRequest_Options.ProtoReflect.Descriptor instead.\nfunc (*StreamDesignatorMappingsRequest_Options) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{12, 0}\n}\n\nfunc (x *StreamDesignatorMappingsRequest_Options) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n", "n_tokens": 178, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1528, 1551], "def_symbols": ["ProtoReflect", "Descriptor", "GetForDate"], "symbols": ["ProtoReflect", "Descriptor", "GetForDate", "func", "StreamDesignatorMappingsRequest_Options", "protoreflect", "Message", "file_airlines_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airlines_proto_rawDescGZIP", "string", "ForDate"], "doc_head": "func (x *StreamDesignatorMappingsRequest_Options) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use StreamDesignatorMappingsRequest_Options.ProtoReflect.Descriptor instead.\nfunc (*StreamDesignatorMappingsRequest_Options) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{12, 0}\n}\nfunc (x *StreamDesignatorMappingsRequest_Options) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#60", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 60, "start_line": 1552, "end_line": 1562, "text": "type Airline_Airport struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId         string                `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tDesignator *string               `protobuf:\"bytes,2,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tName       map[string]string     `protobuf:\"bytes,3,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCity       *Airline_Airport_City `protobuf:\"bytes,4,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\n", "n_tokens": 159, "primary_symbol": "", "primary_kind": "", "primary_span": [1552, 1562], "def_symbols": [], "symbols": ["type", "Airline_Airport", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Designator", "designator", "oneof", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "City", "Airline_Airport_City", "city"], "doc_head": "type Airline_Airport struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId         string                `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tDesignator *string               `protobuf:\"bytes,2,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tName       map[string]string     `protobuf:\"bytes,3,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCity       *Airline_Airport_City `protobuf:\"bytes,4,opt,name=city,proto3\" json:\"city,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#61", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 61, "start_line": 1563, "end_line": 1587, "text": "func (x *Airline_Airport) Reset() {\n\t*x = Airline_Airport{}\n\tmi := &file_airlines_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline_Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline_Airport) ProtoMessage() {}\n\nfunc (x *Airline_Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 174, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1563, 1587], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline_Airport", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline_Airport) Reset() {\n\t*x = Airline_Airport{}\n\tmi := &file_airlines_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline_Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline_Airport) ProtoMessage() {}\nfunc (x *Airline_Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#62", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 62, "start_line": 1588, "end_line": 1620, "text": "// Deprecated: Use Airline_Airport.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21, 0}\n}\n\nfunc (x *Airline_Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline_Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline_Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airline_Airport) GetCity() *Airline_Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 191, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1589, 1620], "def_symbols": ["Descriptor", "GetId", "GetDesignator", "GetName", "GetCity"], "symbols": ["Descriptor", "GetId", "GetDesignator", "GetName", "GetCity", "Deprecated", "Use", "Airline_Airport", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil", "Designator", "map", "Name", "Airline_Airport_City", "City"], "doc_head": "// Deprecated: Use Airline_Airport.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21, 0}\n}\nfunc (x *Airline_Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airline_Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Airline_Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airline_Airport) GetCity() *Airline_Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#63", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 63, "start_line": 1621, "end_line": 1632, "text": "type Airline_Airport_City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId       int64                         `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string             `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tTimezone string                        `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tState    *string                       `protobuf:\"bytes,4,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tCountry  *Airline_Airport_City_Country `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\n", "n_tokens": 184, "primary_symbol": "", "primary_kind": "", "primary_span": [1621, 1632], "def_symbols": [], "symbols": ["type", "Airline_Airport_City", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "Timezone", "timezone", "State", "oneof", "Country", "Airline_Airport_City_Country", "country"], "doc_head": "type Airline_Airport_City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId       int64                         `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string             `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tTimezone string                        `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tState    *string                       `protobuf:\"bytes,4,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tCountry  *Airline_Airport_City_Country `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#64", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 64, "start_line": 1633, "end_line": 1657, "text": "func (x *Airline_Airport_City) Reset() {\n\t*x = Airline_Airport_City{}\n\tmi := &file_airlines_proto_msgTypes[32]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline_Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline_Airport_City) ProtoMessage() {}\n\nfunc (x *Airline_Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[32]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 184, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1633, 1657], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline_Airport_City", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline_Airport_City) Reset() {\n\t*x = Airline_Airport_City{}\n\tmi := &file_airlines_proto_msgTypes[32]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline_Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline_Airport_City) ProtoMessage() {}\nfunc (x *Airline_Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[32]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#65", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 65, "start_line": 1658, "end_line": 1690, "text": "// Deprecated: Use Airline_Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21, 0, 1}\n}\n\nfunc (x *Airline_Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *Airline_Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airline_Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline_Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n", "n_tokens": 200, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1659, 1690], "def_symbols": ["Descriptor", "GetId", "GetName", "GetTimezone", "GetState"], "symbols": ["Descriptor", "GetId", "GetName", "GetTimezone", "GetState", "Deprecated", "Use", "Airline_Airport_City", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "Timezone", "State"], "doc_head": "// Deprecated: Use Airline_Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21, 0, 1}\n}\nfunc (x *Airline_Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *Airline_Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airline_Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *Airline_Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#66", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 66, "start_line": 1691, "end_line": 1706, "text": "func (x *Airline_Airport_City) GetCountry() *Airline_Airport_City_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n\ntype Airline_Airport_City_Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\n", "n_tokens": 145, "primary_symbol": "GetCountry", "primary_kind": "function", "primary_span": [1691, 1706], "def_symbols": ["GetCountry"], "symbols": ["GetCountry", "func", "Airline_Airport_City", "Airline_Airport_City_Country", "nil", "return", "Country", "type", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value"], "doc_head": "func (x *Airline_Airport_City) GetCountry() *Airline_Airport_City_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\ntype Airline_Airport_City_Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#67", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 67, "start_line": 1707, "end_line": 1731, "text": "func (x *Airline_Airport_City_Country) Reset() {\n\t*x = Airline_Airport_City_Country{}\n\tmi := &file_airlines_proto_msgTypes[34]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline_Airport_City_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline_Airport_City_Country) ProtoMessage() {}\n\nfunc (x *Airline_Airport_City_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[34]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1707, 1731], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline_Airport_City_Country", "file_airlines_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline_Airport_City_Country) Reset() {\n\t*x = Airline_Airport_City_Country{}\n\tmi := &file_airlines_proto_msgTypes[34]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline_Airport_City_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline_Airport_City_Country) ProtoMessage() {}\nfunc (x *Airline_Airport_City_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airlines_proto_msgTypes[34]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#68", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 68, "start_line": 1732, "end_line": 1743, "text": "// Deprecated: Use Airline_Airport_City_Country.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City_Country) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21, 0, 1, 1}\n}\n\nfunc (x *Airline_Airport_City_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 100, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1733, 1743], "def_symbols": ["Descriptor", "GetId"], "symbols": ["Descriptor", "GetId", "Deprecated", "Use", "Airline_Airport_City_Country", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airlines_proto_rawDescGZIP", "string", "nil"], "doc_head": "// Deprecated: Use Airline_Airport_City_Country.ProtoReflect.Descriptor instead.\nfunc (*Airline_Airport_City_Country) Descriptor() ([]byte, []int) {\n\treturn file_airlines_proto_rawDescGZIP(), []int{21, 0, 1, 1}\n}\nfunc (x *Airline_Airport_City_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#69", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 69, "start_line": 1744, "end_line": 2179, "text": "func (x *Airline_Airport_City_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nvar File_airlines_proto protoreflect.FileDescriptor\n\nvar file_airlines_proto_rawDesc = []byte{\n\t0x0a, 0x0e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x12, 0x14, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,\n\t0x68, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14,\n\t0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,\n\t0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01,\n\t0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xa3, 0x01, 0x0a,\n\t0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,\n\t0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,\n\t0x6c, 0x69, 0x6d, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,\n\t0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,\n\t0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,\n\t0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,\n\t0x5f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,\n\t0x75, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x65,\n\t0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x52, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa5, 0x06, 0x0a,\n\t0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17,\n\t0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,\n\t0x69, 0x63, 0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,\n\t0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,\n\t0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,\n\t0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,\n\t0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,\n\t0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,\n\t0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,\n\t0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,\n\t0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,\n\t0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70,\n\t0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65,\n\t0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b,\n\t0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x63,\n\t0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,\n\t0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,\n\t0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0a,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55,\n\t0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,\n\t0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x73,\n\t0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,\n\t0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x68, 0x75,\n\t0x62, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,\n\t0x48, 0x06, 0x52, 0x0c, 0x68, 0x75, 0x62, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,\n\t0x88, 0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,\n\t0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,\n\t0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61,\n\t0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,\n\t0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,\n\t0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a,\n\t0x05, 0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69,\n\t0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,\n\t0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,\n\t0x72, 0x55, 0x72, 0x6c, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,\n\t0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x75, 0x62, 0x41, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,\n\t0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x61,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x8f, 0x06, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,\n\t0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,\n\t0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,\n\t0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f,\n\t0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x88, 0x01,\n\t0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,\n\t0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,\n\t0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a,\n\t0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,\n\t0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,\n\t0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a,\n\t0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,\n\t0x48, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01,\n\t0x01, 0x12, 0x60, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72,\n\t0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43,\n\t0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,\n\t0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61,\n\t0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55,\n\t0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65,\n\t0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77,\n\t0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,\n\t0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,\n\t0x43, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,\n\t0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,\n\t0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x75, 0x62, 0x41, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x75, 0x62, 0x41,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63,\n\t0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,\n\t0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,\n\t0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69,\n\t0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,\n\t0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,\n\t0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61,\n\t0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,\n\t0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66,\n\t0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,\n\t0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65,\n\t0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,\n\t0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,\n\t0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x52, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x41, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x16, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65,\n\t0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,\n\t0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x61,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x23, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,\n\t0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,\n\t0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x10, 0x42,\n\t0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,\n\t0x39, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x52, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x53,\n\t0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d,\n\t0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57,\n\t0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,\n\t0x3d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73,\n\t0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,\n\t0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x34, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,\n\t0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,\n\t0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a,\n\t0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x41,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,\n\t0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x62, 0x0a,\n\t0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x41,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,\n\t0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,\n\t0x27, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,\n\t0x67, 0x22, 0x6a, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44,\n\t0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,\n\t0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,\n\t0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x22, 0x59, 0x0a,\n\t0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,\n\t0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,\n\t0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,\n\t0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,\n\t0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,\n\t0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a,\n\t0x17, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d,\n\t0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,\n\t0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x97, 0x03, 0x0a, 0x0b, 0x53, 0x6c, 0x69, 0x6d, 0x41,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,\n\t0x17, 0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,\n\t0x04, 0x69, 0x63, 0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73,\n\t0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,\n\t0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,\n\t0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x65,\n\t0x74, 0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,\n\t0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,\n\t0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,\n\t0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,\n\t0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,\n\t0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,\n\t0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23,\n\t0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x18,\n\t0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x42,\n\t0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61,\n\t0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x22, 0xf9, 0x0d, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02,\n\t0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04,\n\t0x69, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x61,\n\t0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x03, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,\n\t0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65,\n\t0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,\n\t0x2e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,\n\t0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06,\n\t0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73,\n\t0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,\n\t0x74, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,\n\t0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70,\n\t0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x69, 0x6b,\n\t0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,\n\t0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0b,\n\t0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,\n\t0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72,\n\t0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74,\n\t0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65,\n\t0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,\n\t0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x1a,\n\t0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70,\n\t0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,\n\t0x0a, 0x68, 0x75, 0x62, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,\n\t0x0b, 0x32, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x06, 0x52, 0x0a, 0x68, 0x75, 0x62, 0x41,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,\n\t0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,\n\t0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,\n\t0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,\n\t0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,\n\t0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,\n\t0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a,\n\t0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88,\n\t0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x11,\n\t0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x1a, 0xdd,\n\t0x05, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65,\n\t0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,\n\t0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,\n\t0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,\n\t0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,\n\t0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04,\n\t0x63, 0x69, 0x74, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,\n\t0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,\n\t0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcf, 0x03,\n\t0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x79,\n\t0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,\n\t0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x05,\n\t0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73,\n\t0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,\n\t0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e,\n\t0x43, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,\n\t0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa4,\n\t0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61,\n\t0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e,\n\t0x43, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d,\n\t0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09,\n\t0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,\n\t0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,\n\t0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x3e,\n\t0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,\n\t0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e,\n\t0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,\n\t0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61,\n\t0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,\n\t0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,\n\t0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42,\n\t0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,\n\t0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d,\n\t0x0a, 0x0b, 0x5f, 0x68, 0x75, 0x62, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a,\n\t0x0b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x06,\n\t0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,\n\t0x1b, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,\n\t0x01, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,\n\t0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x61,\n\t0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x42, 0x09,\n\t0x0a, 0x07, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61,\n\t0x69, 0x6c, 0x32, 0xd8, 0x08, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53,\n\t0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61,\n\t0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x42, 0x61,\n\t0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61,\n\t0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,\n\t0x68, 0x12, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,\n\t0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,\n\t0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61,\n\t0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,\n\t0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,\n\t0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,\n\t0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x1a, 0x27, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7b, 0x0a,\n\t0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x12,\n\t0x32, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,\n\t0x73, 0x74, 0x69, 0x6e, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x50, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x42, 0x61,\n\t0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x12, 0x31, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,\n\t0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74,\n\t0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x47,\n\t0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73,\n\t0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,\n\t0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_airlines_proto_rawDescOnce sync.Once\n\tfile_airlines_proto_rawDescData = file_airlines_proto_rawDesc\n)\n", "n_tokens": 35120, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [1744, 2179], "def_symbols": ["GetName"], "symbols": ["GetName", "func", "Airline_Airport_City_Country", "map", "string", "nil", "return", "Name", "var", "File_airlines_proto", "protoreflect", "FileDescriptor", "file_airlines_proto_rawDesc", "byte", "file_airlines_proto_rawDescOnce", "sync", "Once", "file_airlines_proto_rawDescData"], "doc_head": "func (x *Airline_Airport_City_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nvar File_airlines_proto protoreflect.FileDescriptor\nvar file_airlines_proto_rawDesc = []byte{\n\t0x0a, 0x0e, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x12, 0x14, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x6c, 0x69,\n\t0x6e, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,\n\t0x68, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14,\n\t0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,\n\t0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01,\n\t0x01, 0x42, 0x09, "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#70", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 70, "start_line": 2180, "end_line": 2282, "text": "func file_airlines_proto_rawDescGZIP() []byte {\n\tfile_airlines_proto_rawDescOnce.Do(func() {\n\t\tfile_airlines_proto_rawDescData = protoimpl.X.CompressGZIP(file_airlines_proto_rawDescData)\n\t})\n\treturn file_airlines_proto_rawDescData\n}\n\nvar file_airlines_proto_msgTypes = make([]protoimpl.MessageInfo, 36)\nvar file_airlines_proto_goTypes = []any{\n\t(*SearchAirlinesRequest)(nil),                   // 0: aviation.airlines.v0.SearchAirlinesRequest\n\t(*SearchAirlinesResponse)(nil),                  // 1: aviation.airlines.v0.SearchAirlinesResponse\n\t(*DeleteAirlineRequest)(nil),                    // 2: aviation.airlines.v0.DeleteAirlineRequest\n\t(*DeleteAirlineResponse)(nil),                   // 3: aviation.airlines.v0.DeleteAirlineResponse\n\t(*UpdateAirlineRequest)(nil),                    // 4: aviation.airlines.v0.UpdateAirlineRequest\n\t(*UpdateAirlineResponse)(nil),                   // 5: aviation.airlines.v0.UpdateAirlineResponse\n\t(*CreateAirlineRequest)(nil),                    // 6: aviation.airlines.v0.CreateAirlineRequest\n\t(*CreateAirlineResponse)(nil),                   // 7: aviation.airlines.v0.CreateAirlineResponse\n\t(*AirlineDetailsRequest)(nil),                   // 8: aviation.airlines.v0.AirlineDetailsRequest\n\t(*AirlineDetailsResponse)(nil),                  // 9: aviation.airlines.v0.AirlineDetailsResponse\n\t(*BatchGetRequest)(nil),                         // 10: aviation.airlines.v0.BatchGetRequest\n\t(*BatchGetResponse)(nil),                        // 11: aviation.airlines.v0.BatchGetResponse\n\t(*StreamDesignatorMappingsRequest)(nil),         // 12: aviation.airlines.v0.StreamDesignatorMappingsRequest\n\t(*CreatePristineAirlineRequest)(nil),            // 13: aviation.airlines.v0.CreatePristineAirlineRequest\n\t(*CreatePristineAirlineResponse)(nil),           // 14: aviation.airlines.v0.CreatePristineAirlineResponse\n\t(*BatchGetByDesignatorRequest)(nil),             // 15: aviation.airlines.v0.BatchGetByDesignatorRequest\n\t(*BatchGetByDesignatorResponse)(nil),            // 16: aviation.airlines.v0.BatchGetByDesignatorResponse\n\t(*GetByDesignatorRequest)(nil),                  // 17: aviation.airlines.v0.GetByDesignatorRequest\n\t(*GetByDesignatorResponse)(nil),                 // 18: aviation.airlines.v0.GetByDesignatorResponse\n\t(*DesignatorMapping)(nil),                       // 19: aviation.airlines.v0.DesignatorMapping\n\t(*SlimAirline)(nil),                             // 20: aviation.airlines.v0.SlimAirline\n\t(*Airline)(nil),                                 // 21: aviation.airlines.v0.Airline\n\t(*Assets)(nil),                                  // 22: aviation.airlines.v0.Assets\n\tnil,                                             // 23: aviation.airlines.v0.UpdateAirlineRequest.DescriptionEntry\n\tnil,                                             // 24: aviation.airlines.v0.UpdateAirlineRequest.WikipediaUrlEntry\n\tnil,                                             // 25: aviation.airlines.v0.CreateAirlineRequest.DescriptionEntry\n\tnil,                                             // 26: aviation.airlines.v0.CreateAirlineRequest.WikipediaUrlEntry\n\t(*StreamDesignatorMappingsRequest_Options)(nil), // 27: aviation.airlines.v0.StreamDesignatorMappingsRequest.Options\n\t(*Airline_Airport)(nil),                         // 28: aviation.airlines.v0.Airline.Airport\n\tnil,                                             // 29: aviation.airlines.v0.Airline.DescriptionEntry\n\tnil,                                             // 30: aviation.airlines.v0.Airline.WikipediaUrlEntry\n\tnil,                                             // 31: aviation.airlines.v0.Airline.Airport.NameEntry\n\t(*Airline_Airport_City)(nil),                    // 32: aviation.airlines.v0.Airline.Airport.City\n\tnil,                                             // 33: aviation.airlines.v0.Airline.Airport.City.NameEntry\n\t(*Airline_Airport_City_Country)(nil),            // 34: aviation.airlines.v0.Airline.Airport.City.Country\n\tnil,                                             // 35: aviation.airlines.v0.Airline.Airport.City.Country.NameEntry\n\t(*timestamppb.Timestamp)(nil),                   // 36: google.protobuf.Timestamp\n}\nvar file_airlines_proto_depIdxs = []int32{\n\t20, // 0: aviation.airlines.v0.SearchAirlinesResponse.result:type_name -> aviation.airlines.v0.SlimAirline\n\t21, // 1: aviation.airlines.v0.DeleteAirlineResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t23, // 2: aviation.airlines.v0.UpdateAirlineRequest.description:type_name -> aviation.airlines.v0.UpdateAirlineRequest.DescriptionEntry\n\t24, // 3: aviation.airlines.v0.UpdateAirlineRequest.wikipediaUrl:type_name -> aviation.airlines.v0.UpdateAirlineRequest.WikipediaUrlEntry\n\t21, // 4: aviation.airlines.v0.UpdateAirlineResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t25, // 5: aviation.airlines.v0.CreateAirlineRequest.description:type_name -> aviation.airlines.v0.CreateAirlineRequest.DescriptionEntry\n\t26, // 6: aviation.airlines.v0.CreateAirlineRequest.wikipediaUrl:type_name -> aviation.airlines.v0.CreateAirlineRequest.WikipediaUrlEntry\n\t21, // 7: aviation.airlines.v0.CreateAirlineResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t21, // 8: aviation.airlines.v0.AirlineDetailsResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t21, // 9: aviation.airlines.v0.BatchGetResponse.airlines:type_name -> aviation.airlines.v0.Airline\n\t27, // 10: aviation.airlines.v0.StreamDesignatorMappingsRequest.options:type_name -> aviation.airlines.v0.StreamDesignatorMappingsRequest.Options\n\t19, // 11: aviation.airlines.v0.CreatePristineAirlineResponse.mapping:type_name -> aviation.airlines.v0.DesignatorMapping\n\t21, // 12: aviation.airlines.v0.BatchGetByDesignatorResponse.airlines:type_name -> aviation.airlines.v0.Airline\n\t21, // 13: aviation.airlines.v0.GetByDesignatorResponse.airline:type_name -> aviation.airlines.v0.Airline\n\t22, // 14: aviation.airlines.v0.SlimAirline.assets:type_name -> aviation.airlines.v0.Assets\n\t36, // 15: aviation.airlines.v0.SlimAirline.createdAt:type_name -> google.protobuf.Timestamp\n\t36, // 16: aviation.airlines.v0.SlimAirline.updatedAt:type_name -> google.protobuf.Timestamp\n\t29, // 17: aviation.airlines.v0.Airline.description:type_name -> aviation.airlines.v0.Airline.DescriptionEntry\n\t22, // 18: aviation.airlines.v0.Airline.assets:type_name -> aviation.airlines.v0.Assets\n\t30, // 19: aviation.airlines.v0.Airline.wikipediaUrl:type_name -> aviation.airlines.v0.Airline.WikipediaUrlEntry\n\t28, // 20: aviation.airlines.v0.Airline.hubAirport:type_name -> aviation.airlines.v0.Airline.Airport\n\t36, // 21: aviation.airlines.v0.Airline.createdAt:type_name -> google.protobuf.Timestamp\n\t36, // 22: aviation.airlines.v0.Airline.updatedAt:type_name -> google.protobuf.Timestamp\n\t31, // 23: aviation.airlines.v0.Airline.Airport.name:type_name -> aviation.airlines.v0.Airline.Airport.NameEntry\n\t32, // 24: aviation.airlines.v0.Airline.Airport.city:type_name -> aviation.airlines.v0.Airline.Airport.City\n\t33, // 25: aviation.airlines.v0.Airline.Airport.City.name:type_name -> aviation.airlines.v0.Airline.Airport.City.NameEntry\n\t34, // 26: aviation.airlines.v0.Airline.Airport.City.country:type_name -> aviation.airlines.v0.Airline.Airport.City.Country\n\t35, // 27: aviation.airlines.v0.Airline.Airport.City.Country.name:type_name -> aviation.airlines.v0.Airline.Airport.City.Country.NameEntry\n\t8,  // 28: aviation.airlines.v0.AirlinesService.Get:input_type -> aviation.airlines.v0.AirlineDetailsRequest\n\t10, // 29: aviation.airlines.v0.AirlinesService.BatchGet:input_type -> aviation.airlines.v0.BatchGetRequest\n\t0,  // 30: aviation.airlines.v0.AirlinesService.Search:input_type -> aviation.airlines.v0.SearchAirlinesRequest\n\t6,  // 31: aviation.airlines.v0.AirlinesService.Create:input_type -> aviation.airlines.v0.CreateAirlineRequest\n\t4,  // 32: aviation.airlines.v0.AirlinesService.Update:input_type -> aviation.airlines.v0.UpdateAirlineRequest\n\t2,  // 33: aviation.airlines.v0.AirlinesService.Delete:input_type -> aviation.airlines.v0.DeleteAirlineRequest\n\t12, // 34: aviation.airlines.v0.AirlinesService.StreamDesignatorMappings:input_type -> aviation.airlines.v0.StreamDesignatorMappingsRequest\n\t13, // 35: aviation.airlines.v0.AirlinesService.CreatePristine:input_type -> aviation.airlines.v0.CreatePristineAirlineRequest\n\t15, // 36: aviation.airlines.v0.AirlinesService.BatchGetByDesignator:input_type -> aviation.airlines.v0.BatchGetByDesignatorRequest\n\t17, // 37: aviation.airlines.v0.AirlinesService.GetByDesignator:input_type -> aviation.airlines.v0.GetByDesignatorRequest\n\t9,  // 38: aviation.airlines.v0.AirlinesService.Get:output_type -> aviation.airlines.v0.AirlineDetailsResponse\n\t11, // 39: aviation.airlines.v0.AirlinesService.BatchGet:output_type -> aviation.airlines.v0.BatchGetResponse\n\t1,  // 40: aviation.airlines.v0.AirlinesService.Search:output_type -> aviation.airlines.v0.SearchAirlinesResponse\n\t7,  // 41: aviation.airlines.v0.AirlinesService.Create:output_type -> aviation.airlines.v0.CreateAirlineResponse\n\t5,  // 42: aviation.airlines.v0.AirlinesService.Update:output_type -> aviation.airlines.v0.UpdateAirlineResponse\n\t3,  // 43: aviation.airlines.v0.AirlinesService.Delete:output_type -> aviation.airlines.v0.DeleteAirlineResponse\n\t19, // 44: aviation.airlines.v0.AirlinesService.StreamDesignatorMappings:output_type -> aviation.airlines.v0.DesignatorMapping\n\t14, // 45: aviation.airlines.v0.AirlinesService.CreatePristine:output_type -> aviation.airlines.v0.CreatePristineAirlineResponse\n\t16, // 46: aviation.airlines.v0.AirlinesService.BatchGetByDesignator:output_type -> aviation.airlines.v0.BatchGetByDesignatorResponse\n\t18, // 47: aviation.airlines.v0.AirlinesService.GetByDesignator:output_type -> aviation.airlines.v0.GetByDesignatorResponse\n\t38, // [38:48] is the sub-list for method output_type\n\t28, // [28:38] is the sub-list for method input_type\n\t28, // [28:28] is the sub-list for extension type_name\n\t28, // [28:28] is the sub-list for extension extendee\n\t0,  // [0:28] is the sub-list for field type_name\n}\n", "n_tokens": 2605, "primary_symbol": "file_airlines_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [2180, 2282], "def_symbols": ["file_airlines_proto_rawDescGZIP"], "symbols": ["file_airlines_proto_rawDescGZIP", "func", "byte", "file_airlines_proto_rawDescOnce", "file_airlines_proto_rawDescData", "protoimpl", "CompressGZIP", "return", "var", "file_airlines_proto_msgTypes", "make", "MessageInfo", "file_airlines_proto_goTypes", "any", "SearchAirlinesRequest", "nil", "aviation", "airlines", "SearchAirlinesResponse", "DeleteAirlineRequest", "DeleteAirlineResponse", "UpdateAirlineRequest", "UpdateAirlineResponse", "CreateAirlineRequest", "CreateAirlineResponse", "AirlineDetailsRequest", "AirlineDetailsResponse", "BatchGetRequest", "BatchGetResponse", "StreamDesignatorMappingsRequest", "CreatePristineAirlineRequest", "CreatePristineAirlineResponse", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignatorRequest", "GetByDesignatorResponse", "DesignatorMapping", "SlimAirline", "Airline", "Assets", "DescriptionEntry", "WikipediaUrlEntry", "StreamDesignatorMappingsRequest_Options", "Options", "Airline_Airport", "Airport", "NameEntry", "Airline_Airport_City", "City", "Airline_Airport_City_Country", "Country", "timestamppb", "Timestamp", "google", "protobuf", "file_airlines_proto_depIdxs", "int32", "result", "type_name", "airline", "description", "wikipediaUrl", "options", "mapping", "assets", "createdAt", "updatedAt", "hubAirport", "name", "city", "country", "AirlinesService", "Get", "input_type", "BatchGet", "Search", "Create", "Update", "Delete", "StreamDesignatorMappings", "CreatePristine", "BatchGetByDesignator", "GetByDesignator", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "func file_airlines_proto_rawDescGZIP() []byte {\n\tfile_airlines_proto_rawDescOnce.Do(func() {\n\t\tfile_airlines_proto_rawDescData = protoimpl.X.CompressGZIP(file_airlines_proto_rawDescData)\n\t})\n\treturn file_airlines_proto_rawDescData\n}\nvar file_airlines_proto_msgTypes = make([]protoimpl.MessageInfo, 36)\nvar file_airlines_proto_goTypes = []any{\n\t(*SearchAirlinesRequest)(nil),                   // 0: aviation.airlines.v0.SearchAirlinesRequest\n\t(*SearchAirlinesResponse)(nil),                  // 1: aviation.airlines.v0.SearchAirlinesResponse\n\t(*DeleteAirlineRequest)(nil),                    // 2: aviation.airlines.v0.DeleteAirlineRequest\n\t(*DeleteAirlineResponse)(nil),                   // 3: aviation.airlines.v0.DeleteAirlineResponse\n\t(*UpdateAirlineRequest)(nil),                    // 4: aviation.airlines.v0.UpdateAirlineRequest\n\t(*UpdateAirlineResponse)(nil),                   // 5: aviation.airlines.v0.UpdateAirlineResponse\n\t(*CreateAirlineRequest)(nil),                    // 6: aviation.airlines.v0.CreateAirlineRequest\n\t(*CreateAirlineResponse)(nil),                   // 7: aviation.airlines.v0.CreateAirlineResponse\n\t(*AirlineDetailsRequest)(nil),                   // 8: aviation.ai"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#71", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 71, "start_line": 2283, "end_line": 2283, "text": "func init() { file_airlines_proto_init() }", "n_tokens": 11, "primary_symbol": "init", "primary_kind": "function", "primary_span": [2283, 2283], "def_symbols": ["init"], "symbols": ["init", "func", "file_airlines_proto_init"], "doc_head": "func init() { file_airlines_proto_init() }"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#72", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 72, "start_line": 2284, "end_line": 2299, "text": "func file_airlines_proto_init() {\n\tif File_airlines_proto != nil {\n\t\treturn\n\t}\n\tfile_airlines_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[1].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[15].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[17].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[20].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[22].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[27].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[28].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[32].OneofWrappers = []any{}", "n_tokens": 225, "primary_symbol": "file_airlines_proto_init", "primary_kind": "function", "primary_span": [2284, 2299], "def_symbols": ["file_airlines_proto_init"], "symbols": ["file_airlines_proto_init", "func", "File_airlines_proto", "nil", "return", "file_airlines_proto_msgTypes", "OneofWrappers", "any"], "doc_head": "func file_airlines_proto_init() {\n\tif File_airlines_proto != nil {\n\t\treturn\n\t}\n\tfile_airlines_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[1].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[15].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[17].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[20].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[22].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[27].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[28].OneofWrappers = []any{}\n\tfile_airlines_proto_msgTypes[32].OneofWrappers = []any{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go#73", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines.pb.go", "ext": "go", "language": "go", "chunk_number": 73, "start_line": 2300, "end_line": 2319, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_airlines_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   36,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_airlines_proto_goTypes,\n\t\tDependencyIndexes: file_airlines_proto_depIdxs,\n\t\tMessageInfos:      file_airlines_proto_msgTypes,\n\t}.Build()\n\tFile_airlines_proto = out.File\n\tfile_airlines_proto_rawDesc = nil\n\tfile_airlines_proto_goTypes = nil\n\tfile_airlines_proto_depIdxs = nil\n}\n", "n_tokens": 163, "primary_symbol": "", "primary_kind": "", "primary_span": [2300, 2319], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "file_airlines_proto_rawDesc", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_airlines_proto_goTypes", "DependencyIndexes", "file_airlines_proto_depIdxs", "MessageInfos", "file_airlines_proto_msgTypes", "Build", "File_airlines_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_airlines_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   36,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_airlines_proto_goTypes,\n\t\tDependencyIndexes: file_airlines_proto_depIdxs,\n\t\tMessageInfos:      file_airlines_proto_msgTypes,\n\t}.Build()\n\tFile_airlines_proto = out.File\n\tfile_airlines_proto_rawDesc = nil\n\tfile_airlines_proto_goTypes = nil\n\tfile_airlines_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airlines.proto\n\npackage airlines\n", "n_tokens": 54, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "airlines", "proto", "package"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airlines.proto\npackage airlines"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 33, "text": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\n\nconst (\n\tAirlinesService_Get_FullMethodName                      = \"/aviation.airlines.v0.AirlinesService/Get\"\n\tAirlinesService_BatchGet_FullMethodName                 = \"/aviation.airlines.v0.AirlinesService/BatchGet\"\n\tAirlinesService_Search_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Search\"\n\tAirlinesService_Create_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Create\"\n\tAirlinesService_Update_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Update\"\n\tAirlinesService_Delete_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Delete\"\n\tAirlinesService_StreamDesignatorMappings_FullMethodName = \"/aviation.airlines.v0.AirlinesService/StreamDesignatorMappings\"\n\tAirlinesService_CreatePristine_FullMethodName           = \"/aviation.airlines.v0.AirlinesService/CreatePristine\"\n\tAirlinesService_BatchGetByDesignator_FullMethodName     = \"/aviation.airlines.v0.AirlinesService/BatchGetByDesignator\"\n\tAirlinesService_GetByDesignator_FullMethodName          = \"/aviation.airlines.v0.AirlinesService/GetByDesignator\"\n)\n", "n_tokens": 336, "primary_symbol": "", "primary_kind": "", "primary_span": [9, 33], "def_symbols": [], "symbols": ["import", "context", "grpc", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "generated", "file", "compatible", "with", "the", "package", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion9", "AirlinesService_Get_FullMethodName", "aviation", "airlines", "AirlinesService", "Get", "AirlinesService_BatchGet_FullMethodName", "BatchGet", "AirlinesService_Search_FullMethodName", "Search", "AirlinesService_Create_FullMethodName", "Create", "AirlinesService_Update_FullMethodName", "Update", "AirlinesService_Delete_FullMethodName", "Delete", "AirlinesService_StreamDesignatorMappings_FullMethodName", "StreamDesignatorMappings", "AirlinesService_CreatePristine_FullMethodName", "CreatePristine", "AirlinesService_BatchGetByDesignator_FullMethodName", "BatchGetByDesignator", "AirlinesService_GetByDesignator_FullMethodName", "GetByDesignator"], "doc_head": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\nconst (\n\tAirlinesService_Get_FullMethodName                      = \"/aviation.airlines.v0.AirlinesService/Get\"\n\tAirlinesService_BatchGet_FullMethodName                 = \"/aviation.airlines.v0.AirlinesService/BatchGet\"\n\tAirlinesService_Search_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Search\"\n\tAirlinesService_Create_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Create\"\n\tAirlinesService_Update_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Update\"\n\tAirlinesService_Delete_FullMethodName                   = \"/aviation.airlines.v0.AirlinesService/Delete\"\n\tAirlinesService_StreamDesignatorMappings_FullMethodName = \"/aviation.airlines.v0.AirlinesService/StreamDesignatorMappings\"\n\tAirlinesService_CreatePristine_FullMethodName           = \"/aviation.airlin"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 34, "end_line": 49, "text": "// AirlinesServiceClient is the client API for AirlinesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirlinesServiceClient interface {\n\tGet(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tSearch(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error)\n\tCreate(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error)\n\tDelete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error)\n\tStreamDesignatorMappings(ctx context.Context, in *StreamDesignatorMappingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DesignatorMapping], error)\n\tCreatePristine(ctx context.Context, in *CreatePristineAirlineRequest, opts ...grpc.CallOption) (*CreatePristineAirlineResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error)\n}\n", "n_tokens": 351, "primary_symbol": "", "primary_kind": "", "primary_span": [34, 49], "def_symbols": [], "symbols": ["AirlinesServiceClient", "the", "client", "API", "for", "AirlinesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Get", "context", "Context", "AirlineDetailsRequest", "opts", "CallOption", "AirlineDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "Search", "SearchAirlinesRequest", "SearchAirlinesResponse", "Create", "CreateAirlineRequest", "CreateAirlineResponse", "Update", "UpdateAirlineRequest", "UpdateAirlineResponse", "Delete", "DeleteAirlineRequest", "DeleteAirlineResponse", "StreamDesignatorMappings", "StreamDesignatorMappingsRequest", "ServerStreamingClient", "DesignatorMapping", "CreatePristine", "CreatePristineAirlineRequest", "CreatePristineAirlineResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse"], "doc_head": "// AirlinesServiceClient is the client API for AirlinesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirlinesServiceClient interface {\n\tGet(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tSearch(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error)\n\tCreate(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error)\n\tDelete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error)\n\tStreamDesignatorMappings(ctx context.Context, in *StreamDesignatorMappingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DesignatorMapping], error)\n\tCreatePristine(ctx context.Context, in *CreatePristineAirlineRequest, opts ...grpc.CallOption) (*Cre"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 50, "end_line": 67, "text": "type airlinesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewAirlinesServiceClient(cc grpc.ClientConnInterface) AirlinesServiceClient {\n\treturn &airlinesServiceClient{cc}\n}\n\nfunc (c *airlinesServiceClient) Get(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirlineDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 139, "primary_symbol": "NewAirlinesServiceClient", "primary_kind": "function", "primary_span": [54, 67], "def_symbols": ["NewAirlinesServiceClient", "Get"], "symbols": ["NewAirlinesServiceClient", "Get", "type", "airlinesServiceClient", "struct", "grpc", "ClientConnInterface", "func", "AirlinesServiceClient", "return", "ctx", "context", "Context", "AirlineDetailsRequest", "opts", "CallOption", "AirlineDetailsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_Get_FullMethodName", "nil"], "doc_head": "type airlinesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewAirlinesServiceClient(cc grpc.ClientConnInterface) AirlinesServiceClient {\n\treturn &airlinesServiceClient{cc}\n}\nfunc (c *airlinesServiceClient) Get(ctx context.Context, in *AirlineDetailsRequest, opts ...grpc.CallOption) (*AirlineDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirlineDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 68, "end_line": 87, "text": "func (c *airlinesServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airlinesServiceClient) Search(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirlinesResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 199, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [68, 87], "def_symbols": ["BatchGet", "Search"], "symbols": ["BatchGet", "Search", "func", "airlinesServiceClient", "ctx", "context", "Context", "BatchGetRequest", "opts", "grpc", "CallOption", "BatchGetResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_BatchGet_FullMethodName", "nil", "return", "SearchAirlinesRequest", "SearchAirlinesResponse", "AirlinesService_Search_FullMethodName"], "doc_head": "func (c *airlinesServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airlinesServiceClient) Search(ctx context.Context, in *SearchAirlinesRequest, opts ...grpc.CallOption) (*SearchAirlinesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirlinesResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 88, "end_line": 107, "text": "func (c *airlinesServiceClient) Create(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airlinesServiceClient) Update(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 199, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [88, 107], "def_symbols": ["Create", "Update"], "symbols": ["Create", "Update", "func", "airlinesServiceClient", "ctx", "context", "Context", "CreateAirlineRequest", "opts", "grpc", "CallOption", "CreateAirlineResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_Create_FullMethodName", "nil", "return", "UpdateAirlineRequest", "UpdateAirlineResponse", "AirlinesService_Update_FullMethodName"], "doc_head": "func (c *airlinesServiceClient) Create(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*CreateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airlinesServiceClient) Update(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*UpdateAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 108, "end_line": 117, "text": "func (c *airlinesServiceClient) Delete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(DeleteAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Delete_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 100, "primary_symbol": "Delete", "primary_kind": "function", "primary_span": [108, 117], "def_symbols": ["Delete"], "symbols": ["Delete", "func", "airlinesServiceClient", "ctx", "context", "Context", "DeleteAirlineRequest", "opts", "grpc", "CallOption", "DeleteAirlineResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_Delete_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) Delete(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*DeleteAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(DeleteAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_Delete_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 118, "end_line": 133, "text": "func (c *airlinesServiceClient) StreamDesignatorMappings(ctx context.Context, in *StreamDesignatorMappingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DesignatorMapping], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AirlinesService_ServiceDesc.Streams[0], AirlinesService_StreamDesignatorMappings_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[StreamDesignatorMappingsRequest, DesignatorMapping]{ClientStream: stream}\n\tif err := x.ClientStream.SendMsg(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := x.ClientStream.CloseSend(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn x, nil\n}\n", "n_tokens": 178, "primary_symbol": "StreamDesignatorMappings", "primary_kind": "function", "primary_span": [118, 133], "def_symbols": ["StreamDesignatorMappings"], "symbols": ["StreamDesignatorMappings", "func", "airlinesServiceClient", "ctx", "context", "Context", "StreamDesignatorMappingsRequest", "opts", "grpc", "CallOption", "ServerStreamingClient", "DesignatorMapping", "error", "cOpts", "append", "StaticMethod", "stream", "err", "NewStream", "AirlinesService_ServiceDesc", "Streams", "AirlinesService_StreamDesignatorMappings_FullMethodName", "nil", "return", "GenericClientStream", "ClientStream", "SendMsg", "CloseSend"], "doc_head": "func (c *airlinesServiceClient) StreamDesignatorMappings(ctx context.Context, in *StreamDesignatorMappingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DesignatorMapping], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AirlinesService_ServiceDesc.Streams[0], AirlinesService_StreamDesignatorMappings_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[StreamDesignatorMappingsRequest, DesignatorMapping]{ClientStream: stream}\n\tif err := x.ClientStream.SendMsg(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := x.ClientStream.CloseSend(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn x, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 134, "end_line": 146, "text": "// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirlinesService_StreamDesignatorMappingsClient = grpc.ServerStreamingClient[DesignatorMapping]\n\nfunc (c *airlinesServiceClient) CreatePristine(ctx context.Context, in *CreatePristineAirlineRequest, opts ...grpc.CallOption) (*CreatePristineAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreatePristineAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_CreatePristine_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 155, "primary_symbol": "CreatePristine", "primary_kind": "function", "primary_span": [137, 146], "def_symbols": ["CreatePristine"], "symbols": ["CreatePristine", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "stream", "name", "AirlinesService_StreamDesignatorMappingsClient", "grpc", "ServerStreamingClient", "DesignatorMapping", "func", "airlinesServiceClient", "ctx", "context", "Context", "CreatePristineAirlineRequest", "opts", "CallOption", "CreatePristineAirlineResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_CreatePristine_FullMethodName", "nil", "return"], "doc_head": "// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirlinesService_StreamDesignatorMappingsClient = grpc.ServerStreamingClient[DesignatorMapping]\nfunc (c *airlinesServiceClient) CreatePristine(ctx context.Context, in *CreatePristineAirlineRequest, opts ...grpc.CallOption) (*CreatePristineAirlineResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreatePristineAirlineResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_CreatePristine_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 147, "end_line": 156, "text": "func (c *airlinesServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 115, "primary_symbol": "BatchGetByDesignator", "primary_kind": "function", "primary_span": [147, 156], "def_symbols": ["BatchGetByDesignator"], "symbols": ["BatchGetByDesignator", "func", "airlinesServiceClient", "ctx", "context", "Context", "BatchGetByDesignatorRequest", "opts", "grpc", "CallOption", "BatchGetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_BatchGetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 157, "end_line": 166, "text": "func (c *airlinesServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 108, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [157, 166], "def_symbols": ["GetByDesignator"], "symbols": ["GetByDesignator", "func", "airlinesServiceClient", "ctx", "context", "Context", "GetByDesignatorRequest", "opts", "grpc", "CallOption", "GetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirlinesService_GetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airlinesServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirlinesService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 167, "end_line": 183, "text": "// AirlinesServiceServer is the server API for AirlinesService service.\n// All implementations must embed UnimplementedAirlinesServiceServer\n// for forward compatibility.\ntype AirlinesServiceServer interface {\n\tGet(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tSearch(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error)\n\tCreate(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error)\n\tUpdate(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error)\n\tDelete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error)\n\tStreamDesignatorMappings(*StreamDesignatorMappingsRequest, grpc.ServerStreamingServer[DesignatorMapping]) error\n\tCreatePristine(context.Context, *CreatePristineAirlineRequest) (*CreatePristineAirlineResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}\n", "n_tokens": 256, "primary_symbol": "", "primary_kind": "", "primary_span": [167, 183], "def_symbols": [], "symbols": ["AirlinesServiceServer", "the", "server", "API", "for", "AirlinesService", "service", "All", "implementations", "must", "embed", "UnimplementedAirlinesServiceServer", "forward", "compatibility", "type", "interface", "Get", "context", "Context", "AirlineDetailsRequest", "AirlineDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "Search", "SearchAirlinesRequest", "SearchAirlinesResponse", "Create", "CreateAirlineRequest", "CreateAirlineResponse", "Update", "UpdateAirlineRequest", "UpdateAirlineResponse", "Delete", "DeleteAirlineRequest", "DeleteAirlineResponse", "StreamDesignatorMappings", "StreamDesignatorMappingsRequest", "grpc", "ServerStreamingServer", "DesignatorMapping", "CreatePristine", "CreatePristineAirlineRequest", "CreatePristineAirlineResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse", "mustEmbedUnimplementedAirlinesServiceServer"], "doc_head": "// AirlinesServiceServer is the server API for AirlinesService service.\n// All implementations must embed UnimplementedAirlinesServiceServer\n// for forward compatibility.\ntype AirlinesServiceServer interface {\n\tGet(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tSearch(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error)\n\tCreate(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error)\n\tUpdate(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error)\n\tDelete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error)\n\tStreamDesignatorMappings(*StreamDesignatorMappingsRequest, grpc.ServerStreamingServer[DesignatorMapping]) error\n\tCreatePristine(context.Context, *CreatePristineAirlineRequest) (*CreatePristineAirlineResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 184, "end_line": 199, "text": "// UnimplementedAirlinesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirlinesServiceServer struct{}\n\nfunc (UnimplementedAirlinesServiceServer) Get(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Search(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}", "n_tokens": 189, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [191, 199], "def_symbols": ["Get", "BatchGet", "Search"], "symbols": ["Get", "BatchGet", "Search", "UnimplementedAirlinesServiceServer", "must", "embedded", "have", "forward", "compatible", "implementations", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "type", "struct", "func", "context", "Context", "AirlineDetailsRequest", "AirlineDetailsResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetRequest", "BatchGetResponse", "SearchAirlinesRequest", "SearchAirlinesResponse"], "doc_head": "// UnimplementedAirlinesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirlinesServiceServer struct{}\nfunc (UnimplementedAirlinesServiceServer) Get(context.Context, *AirlineDetailsRequest) (*AirlineDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Search(context.Context, *SearchAirlinesRequest) (*SearchAirlinesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 200, "end_line": 211, "text": "func (UnimplementedAirlinesServiceServer) Create(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Update(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Delete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Delete not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) StreamDesignatorMappings(*StreamDesignatorMappingsRequest, grpc.ServerStreamingServer[DesignatorMapping]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method StreamDesignatorMappings not implemented\")\n}", "n_tokens": 184, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [200, 211], "def_symbols": ["Create", "Update", "Delete", "StreamDesignatorMappings"], "symbols": ["Create", "Update", "Delete", "StreamDesignatorMappings", "func", "UnimplementedAirlinesServiceServer", "context", "Context", "CreateAirlineRequest", "CreateAirlineResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "UpdateAirlineRequest", "UpdateAirlineResponse", "DeleteAirlineRequest", "DeleteAirlineResponse", "StreamDesignatorMappingsRequest", "grpc", "ServerStreamingServer", "DesignatorMapping"], "doc_head": "func (UnimplementedAirlinesServiceServer) Create(context.Context, *CreateAirlineRequest) (*CreateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Update(context.Context, *UpdateAirlineRequest) (*UpdateAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) Delete(context.Context, *DeleteAirlineRequest) (*DeleteAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Delete not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) StreamDesignatorMappings(*StreamDesignatorMappingsRequest, grpc.ServerStreamingServer[DesignatorMapping]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method StreamDesignatorMappings not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 212, "end_line": 221, "text": "func (UnimplementedAirlinesServiceServer) CreatePristine(context.Context, *CreatePristineAirlineRequest) (*CreatePristineAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method CreatePristine not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) mustEmbedUnimplementedAirlinesServiceServer() {}", "n_tokens": 186, "primary_symbol": "CreatePristine", "primary_kind": "function", "primary_span": [212, 221], "def_symbols": ["CreatePristine", "BatchGetByDesignator", "GetByDesignator", "mustEmbedUnimplementedAirlinesServiceServer"], "symbols": ["CreatePristine", "BatchGetByDesignator", "GetByDesignator", "mustEmbedUnimplementedAirlinesServiceServer", "func", "UnimplementedAirlinesServiceServer", "context", "Context", "CreatePristineAirlineRequest", "CreatePristineAirlineResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignatorRequest", "GetByDesignatorResponse"], "doc_head": "func (UnimplementedAirlinesServiceServer) CreatePristine(context.Context, *CreatePristineAirlineRequest) (*CreatePristineAirlineResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method CreatePristine not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirlinesServiceServer) mustEmbedUnimplementedAirlinesServiceServer() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 222, "end_line": 241, "text": "func (UnimplementedAirlinesServiceServer) testEmbeddedByValue()                         {}\n\n// UnsafeAirlinesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirlinesServiceServer will\n// result in compilation errors.\ntype UnsafeAirlinesServiceServer interface {\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}\n\nfunc RegisterAirlinesServiceServer(s grpc.ServiceRegistrar, srv AirlinesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirlinesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirlinesService_ServiceDesc, srv)\n}\n", "n_tokens": 203, "primary_symbol": "testEmbeddedByValue", "primary_kind": "function", "primary_span": [222, 241], "def_symbols": ["testEmbeddedByValue", "RegisterAirlinesServiceServer"], "symbols": ["testEmbeddedByValue", "RegisterAirlinesServiceServer", "func", "UnimplementedAirlinesServiceServer", "UnsafeAirlinesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "AirlinesServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedAirlinesServiceServer", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "RegisterService", "AirlinesService_ServiceDesc"], "doc_head": "func (UnimplementedAirlinesServiceServer) testEmbeddedByValue()                         {}\n// UnsafeAirlinesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirlinesServiceServer will\n// result in compilation errors.\ntype UnsafeAirlinesServiceServer interface {\n\tmustEmbedUnimplementedAirlinesServiceServer()\n}\nfunc RegisterAirlinesServiceServer(s grpc.ServiceRegistrar, srv AirlinesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirlinesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirlinesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 242, "end_line": 259, "text": "func _AirlinesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirlineDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, req.(*AirlineDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirlinesService_Get_Handler", "primary_kind": "function", "primary_span": [242, 259], "def_symbols": ["_AirlinesService_Get_Handler"], "symbols": ["_AirlinesService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AirlineDetailsRequest", "err", "nil", "return", "AirlinesServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Get_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirlineDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Get(ctx, req.(*AirlineDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 260, "end_line": 277, "text": "func _AirlinesService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 163, "primary_symbol": "_AirlinesService_BatchGet_Handler", "primary_kind": "function", "primary_span": [260, 277], "def_symbols": ["_AirlinesService_BatchGet_Handler"], "symbols": ["_AirlinesService_BatchGet_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetRequest", "err", "nil", "return", "AirlinesServiceServer", "BatchGet", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_BatchGet_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 278, "end_line": 295, "text": "func _AirlinesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirlinesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, req.(*SearchAirlinesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AirlinesService_Search_Handler", "primary_kind": "function", "primary_span": [278, 295], "def_symbols": ["_AirlinesService_Search_Handler"], "symbols": ["_AirlinesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchAirlinesRequest", "err", "nil", "return", "AirlinesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirlinesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Search(ctx, req.(*SearchAirlinesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 296, "end_line": 313, "text": "func _AirlinesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, req.(*CreateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AirlinesService_Create_Handler", "primary_kind": "function", "primary_span": [296, 313], "def_symbols": ["_AirlinesService_Create_Handler"], "symbols": ["_AirlinesService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Create_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Create(ctx, req.(*CreateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 314, "end_line": 331, "text": "func _AirlinesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, req.(*UpdateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirlinesService_Update_Handler", "primary_kind": "function", "primary_span": [314, 331], "def_symbols": ["_AirlinesService_Update_Handler"], "symbols": ["_AirlinesService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Update_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Update(ctx, req.(*UpdateAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 332, "end_line": 349, "text": "func _AirlinesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(DeleteAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Delete_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, req.(*DeleteAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirlinesService_Delete_Handler", "primary_kind": "function", "primary_span": [332, 349], "def_symbols": ["_AirlinesService_Delete_Handler"], "symbols": ["_AirlinesService_Delete_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "DeleteAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "Delete", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_Delete_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(DeleteAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_Delete_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).Delete(ctx, req.(*DeleteAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 350, "end_line": 360, "text": "func _AirlinesService_StreamDesignatorMappings_Handler(srv interface{}, stream grpc.ServerStream) error {\n\tm := new(StreamDesignatorMappingsRequest)\n\tif err := stream.RecvMsg(m); err != nil {\n\t\treturn err\n\t}\n\treturn srv.(AirlinesServiceServer).StreamDesignatorMappings(m, &grpc.GenericServerStream[StreamDesignatorMappingsRequest, DesignatorMapping]{ServerStream: stream})\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirlinesService_StreamDesignatorMappingsServer = grpc.ServerStreamingServer[DesignatorMapping]\n", "n_tokens": 126, "primary_symbol": "_AirlinesService_StreamDesignatorMappings_Handler", "primary_kind": "function", "primary_span": [350, 360], "def_symbols": ["_AirlinesService_StreamDesignatorMappings_Handler"], "symbols": ["_AirlinesService_StreamDesignatorMappings_Handler", "func", "srv", "interface", "stream", "grpc", "ServerStream", "error", "new", "StreamDesignatorMappingsRequest", "err", "RecvMsg", "nil", "return", "AirlinesServiceServer", "StreamDesignatorMappings", "GenericServerStream", "DesignatorMapping", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AirlinesService_StreamDesignatorMappingsServer", "ServerStreamingServer"], "doc_head": "func _AirlinesService_StreamDesignatorMappings_Handler(srv interface{}, stream grpc.ServerStream) error {\n\tm := new(StreamDesignatorMappingsRequest)\n\tif err := stream.RecvMsg(m); err != nil {\n\t\treturn err\n\t}\n\treturn srv.(AirlinesServiceServer).StreamDesignatorMappings(m, &grpc.GenericServerStream[StreamDesignatorMappingsRequest, DesignatorMapping]{ServerStream: stream})\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirlinesService_StreamDesignatorMappingsServer = grpc.ServerStreamingServer[DesignatorMapping]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#24", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 361, "end_line": 378, "text": "func _AirlinesService_CreatePristine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreatePristineAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).CreatePristine(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_CreatePristine_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).CreatePristine(ctx, req.(*CreatePristineAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 176, "primary_symbol": "_AirlinesService_CreatePristine_Handler", "primary_kind": "function", "primary_span": [361, 378], "def_symbols": ["_AirlinesService_CreatePristine_Handler"], "symbols": ["_AirlinesService_CreatePristine_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreatePristineAirlineRequest", "err", "nil", "return", "AirlinesServiceServer", "CreatePristine", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_CreatePristine_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_CreatePristine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreatePristineAirlineRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).CreatePristine(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_CreatePristine_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).CreatePristine(ctx, req.(*CreatePristineAirlineRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#25", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 379, "end_line": 396, "text": "func _AirlinesService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 181, "primary_symbol": "_AirlinesService_BatchGetByDesignator_Handler", "primary_kind": "function", "primary_span": [379, 396], "def_symbols": ["_AirlinesService_BatchGetByDesignator_Handler"], "symbols": ["_AirlinesService_BatchGetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetByDesignatorRequest", "err", "nil", "return", "AirlinesServiceServer", "BatchGetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_BatchGetByDesignator_FullMethodName", "handler", "req"], "doc_head": "func _AirlinesService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#26", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 397, "end_line": 408, "text": "func _AirlinesService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_GetByDesignator_FullMethodName,\n\t}", "n_tokens": 120, "primary_symbol": "_AirlinesService_GetByDesignator_Handler", "primary_kind": "function", "primary_span": [397, 408], "def_symbols": ["_AirlinesService_GetByDesignator_Handler"], "symbols": ["_AirlinesService_GetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetByDesignatorRequest", "err", "nil", "return", "AirlinesServiceServer", "GetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirlinesService_GetByDesignator_FullMethodName"], "doc_head": "func _AirlinesService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirlinesService_GetByDesignator_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go#27", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airlines/airlines_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 409, "end_line": 468, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// AirlinesService_ServiceDesc is the grpc.ServiceDesc for AirlinesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirlinesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airlines.v0.AirlinesService\",\n\tHandlerType: (*AirlinesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirlinesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirlinesService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirlinesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirlinesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirlinesService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Delete\",\n\t\t\tHandler:    _AirlinesService_Delete_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"CreatePristine\",\n\t\t\tHandler:    _AirlinesService_CreatePristine_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirlinesService_BatchGetByDesignator_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByDesignator\",\n\t\t\tHandler:    _AirlinesService_GetByDesignator_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{\n\t\t{\n\t\t\tStreamName:    \"StreamDesignatorMappings\",\n\t\t\tHandler:       _AirlinesService_StreamDesignatorMappings_Handler,\n\t\t\tServerStreams: true,\n\t\t},\n\t},\n\tMetadata: \"airlines.proto\",\n}\n", "n_tokens": 448, "primary_symbol": "", "primary_kind": "", "primary_span": [409, 468], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "AirlinesServiceServer", "GetByDesignator", "GetByDesignatorRequest", "interceptor", "info", "AirlinesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "AirlinesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airlines", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Get", "Handler", "_AirlinesService_Get_Handler", "BatchGet", "_AirlinesService_BatchGet_Handler", "Search", "_AirlinesService_Search_Handler", "Create", "_AirlinesService_Create_Handler", "Update", "_AirlinesService_Update_Handler", "Delete", "_AirlinesService_Delete_Handler", "CreatePristine", "_AirlinesService_CreatePristine_Handler", "BatchGetByDesignator", "_AirlinesService_BatchGetByDesignator_Handler", "_AirlinesService_GetByDesignator_Handler", "Streams", "StreamDesc", "StreamName", "StreamDesignatorMappings", "_AirlinesService_StreamDesignatorMappings_Handler", "ServerStreams", "true", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirlinesServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// AirlinesService_ServiceDesc is the grpc.ServiceDesc for AirlinesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirlinesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airlines.v0.AirlinesService\",\n\tHandlerType: (*AirlinesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirlinesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirlinesService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirlinesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirlinesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirlinesService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Delete\",\n\t\t\tHandler:    _AirlinesService_Delete_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"CreatePristine\",\n\t\t\tHandler:    _AirlinesService_CreatePristine_Handler,\n\t\t},\n\t\t{\n\t\t\tMe"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package airports\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairports.proto=.;airports airports.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairports.proto=.;airports airports.proto\n", "n_tokens": 74, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "airports", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "Mairports", "proto", "grpc_out", "grpc_opt"], "doc_head": "package airports\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mairports.proto=.;airports airports.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mairports.proto=.;airports airports.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airports.proto\n\npackage airports\n", "n_tokens": 54, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "airports", "proto", "package"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: airports.proto\npackage airports"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 32, "text": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\n\nconst (\n\tAirportsService_Get_FullMethodName                  = \"/aviation.airports.v0.AirportsService/Get\"\n\tAirportsService_BatchGet_FullMethodName             = \"/aviation.airports.v0.AirportsService/BatchGet\"\n\tAirportsService_GetByCity_FullMethodName            = \"/aviation.airports.v0.AirportsService/GetByCity\"\n\tAirportsService_UploadImage_FullMethodName          = \"/aviation.airports.v0.AirportsService/UploadImage\"\n\tAirportsService_Search_FullMethodName               = \"/aviation.airports.v0.AirportsService/Search\"\n\tAirportsService_Create_FullMethodName               = \"/aviation.airports.v0.AirportsService/Create\"\n\tAirportsService_Update_FullMethodName               = \"/aviation.airports.v0.AirportsService/Update\"\n\tAirportsService_BatchGetByDesignator_FullMethodName = \"/aviation.airports.v0.AirportsService/BatchGetByDesignator\"\n\tAirportsService_GetByDesignator_FullMethodName      = \"/aviation.airports.v0.AirportsService/GetByDesignator\"\n)\n", "n_tokens": 329, "primary_symbol": "", "primary_kind": "", "primary_span": [9, 32], "def_symbols": [], "symbols": ["import", "context", "grpc", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "generated", "file", "compatible", "with", "the", "package", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion9", "AirportsService_Get_FullMethodName", "aviation", "airports", "AirportsService", "Get", "AirportsService_BatchGet_FullMethodName", "BatchGet", "AirportsService_GetByCity_FullMethodName", "GetByCity", "AirportsService_UploadImage_FullMethodName", "UploadImage", "AirportsService_Search_FullMethodName", "Search", "AirportsService_Create_FullMethodName", "Create", "AirportsService_Update_FullMethodName", "Update", "AirportsService_BatchGetByDesignator_FullMethodName", "BatchGetByDesignator", "AirportsService_GetByDesignator_FullMethodName", "GetByDesignator"], "doc_head": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\nconst (\n\tAirportsService_Get_FullMethodName                  = \"/aviation.airports.v0.AirportsService/Get\"\n\tAirportsService_BatchGet_FullMethodName             = \"/aviation.airports.v0.AirportsService/BatchGet\"\n\tAirportsService_GetByCity_FullMethodName            = \"/aviation.airports.v0.AirportsService/GetByCity\"\n\tAirportsService_UploadImage_FullMethodName          = \"/aviation.airports.v0.AirportsService/UploadImage\"\n\tAirportsService_Search_FullMethodName               = \"/aviation.airports.v0.AirportsService/Search\"\n\tAirportsService_Create_FullMethodName               = \"/aviation.airports.v0.AirportsService/Create\"\n\tAirportsService_Update_FullMethodName               = \"/aviation.airports.v0.AirportsService/Update\"\n\tAirportsService_BatchGetByDesignator_FullMethodName = \"/aviation.airports.v0.AirportsService/BatchGetByDesignator"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 33, "end_line": 47, "text": "// AirportsServiceClient is the client API for AirportsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirportsServiceClient interface {\n\tGet(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tGetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tUploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)\n\tSearch(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error)\n\tCreate(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error)\n}\n", "n_tokens": 308, "primary_symbol": "", "primary_kind": "", "primary_span": [33, 47], "def_symbols": [], "symbols": ["AirportsServiceClient", "the", "client", "API", "for", "AirportsService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Get", "context", "Context", "AirportDetailsRequest", "opts", "CallOption", "AirportDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "GetByCity", "AirportByCityRequest", "UploadImage", "ClientStreamingClient", "UploadImageRequest", "UploadImageResponse", "Search", "SearchAirportsRequest", "SearchAirportsResponse", "Create", "CreateAirportRequest", "CreateAirportResponse", "Update", "UpdateAirportRequest", "UpdateAirportResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse"], "doc_head": "// AirportsServiceClient is the client API for AirportsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype AirportsServiceClient interface {\n\tGet(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error)\n\tBatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tGetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)\n\tUploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)\n\tSearch(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error)\n\tCreate(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error)\n\tUpdate(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 48, "end_line": 65, "text": "type airportsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewAirportsServiceClient(cc grpc.ClientConnInterface) AirportsServiceClient {\n\treturn &airportsServiceClient{cc}\n}\n\nfunc (c *airportsServiceClient) Get(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirportDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 139, "primary_symbol": "NewAirportsServiceClient", "primary_kind": "function", "primary_span": [52, 65], "def_symbols": ["NewAirportsServiceClient", "Get"], "symbols": ["NewAirportsServiceClient", "Get", "type", "airportsServiceClient", "struct", "grpc", "ClientConnInterface", "func", "AirportsServiceClient", "return", "ctx", "context", "Context", "AirportDetailsRequest", "opts", "CallOption", "AirportDetailsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_Get_FullMethodName", "nil"], "doc_head": "type airportsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewAirportsServiceClient(cc grpc.ClientConnInterface) AirportsServiceClient {\n\treturn &airportsServiceClient{cc}\n}\nfunc (c *airportsServiceClient) Get(ctx context.Context, in *AirportDetailsRequest, opts ...grpc.CallOption) (*AirportDetailsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(AirportDetailsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 66, "end_line": 85, "text": "func (c *airportsServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airportsServiceClient) GetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByCity_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 204, "primary_symbol": "BatchGet", "primary_kind": "function", "primary_span": [66, 85], "def_symbols": ["BatchGet", "GetByCity"], "symbols": ["BatchGet", "GetByCity", "func", "airportsServiceClient", "ctx", "context", "Context", "BatchGetRequest", "opts", "grpc", "CallOption", "BatchGetResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_BatchGet_FullMethodName", "nil", "return", "AirportByCityRequest", "AirportsService_GetByCity_FullMethodName"], "doc_head": "func (c *airportsServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGet_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airportsServiceClient) GetByCity(ctx context.Context, in *AirportByCityRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByCity_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 86, "end_line": 98, "text": "func (c *airportsServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AirportsService_ServiceDesc.Streams[0], AirportsService_UploadImage_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}\n\treturn x, nil\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]\n", "n_tokens": 172, "primary_symbol": "UploadImage", "primary_kind": "function", "primary_span": [86, 98], "def_symbols": ["UploadImage"], "symbols": ["UploadImage", "func", "airportsServiceClient", "ctx", "context", "Context", "opts", "grpc", "CallOption", "ClientStreamingClient", "UploadImageRequest", "UploadImageResponse", "error", "cOpts", "append", "StaticMethod", "stream", "err", "NewStream", "AirportsService_ServiceDesc", "Streams", "AirportsService_UploadImage_FullMethodName", "nil", "return", "GenericClientStream", "ClientStream", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AirportsService_UploadImageClient"], "doc_head": "func (c *airportsServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tstream, err := c.cc.NewStream(ctx, &AirportsService_ServiceDesc.Streams[0], AirportsService_UploadImage_FullMethodName, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}\n\treturn x, nil\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 99, "end_line": 118, "text": "func (c *airportsServiceClient) Search(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirportsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *airportsServiceClient) Create(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 197, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [99, 118], "def_symbols": ["Search", "Create"], "symbols": ["Search", "Create", "func", "airportsServiceClient", "ctx", "context", "Context", "SearchAirportsRequest", "opts", "grpc", "CallOption", "SearchAirportsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_Search_FullMethodName", "nil", "return", "CreateAirportRequest", "CreateAirportResponse", "AirportsService_Create_FullMethodName"], "doc_head": "func (c *airportsServiceClient) Search(ctx context.Context, in *SearchAirportsRequest, opts ...grpc.CallOption) (*SearchAirportsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchAirportsResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *airportsServiceClient) Create(ctx context.Context, in *CreateAirportRequest, opts ...grpc.CallOption) (*CreateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 119, "end_line": 128, "text": "func (c *airportsServiceClient) Update(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 98, "primary_symbol": "Update", "primary_kind": "function", "primary_span": [119, 128], "def_symbols": ["Update"], "symbols": ["Update", "func", "airportsServiceClient", "ctx", "context", "Context", "UpdateAirportRequest", "opts", "grpc", "CallOption", "UpdateAirportResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_Update_FullMethodName", "nil", "return"], "doc_head": "func (c *airportsServiceClient) Update(ctx context.Context, in *UpdateAirportRequest, opts ...grpc.CallOption) (*UpdateAirportResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateAirportResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 129, "end_line": 138, "text": "func (c *airportsServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 116, "primary_symbol": "BatchGetByDesignator", "primary_kind": "function", "primary_span": [129, 138], "def_symbols": ["BatchGetByDesignator"], "symbols": ["BatchGetByDesignator", "func", "airportsServiceClient", "ctx", "context", "Context", "BatchGetByDesignatorRequest", "opts", "grpc", "CallOption", "BatchGetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_BatchGetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airportsServiceClient) BatchGetByDesignator(ctx context.Context, in *BatchGetByDesignatorRequest, opts ...grpc.CallOption) (*BatchGetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_BatchGetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 139, "end_line": 148, "text": "func (c *airportsServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 109, "primary_symbol": "GetByDesignator", "primary_kind": "function", "primary_span": [139, 148], "def_symbols": ["GetByDesignator"], "symbols": ["GetByDesignator", "func", "airportsServiceClient", "ctx", "context", "Context", "GetByDesignatorRequest", "opts", "grpc", "CallOption", "GetByDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "AirportsService_GetByDesignator_FullMethodName", "nil", "return"], "doc_head": "func (c *airportsServiceClient) GetByDesignator(ctx context.Context, in *GetByDesignatorRequest, opts ...grpc.CallOption) (*GetByDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetByDesignatorResponse)\n\terr := c.cc.Invoke(ctx, AirportsService_GetByDesignator_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 149, "end_line": 164, "text": "// AirportsServiceServer is the server API for AirportsService service.\n// All implementations must embed UnimplementedAirportsServiceServer\n// for forward compatibility.\ntype AirportsServiceServer interface {\n\tGet(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tGetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error)\n\tUploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error\n\tSearch(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error)\n\tCreate(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error)\n\tUpdate(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tmustEmbedUnimplementedAirportsServiceServer()\n}\n", "n_tokens": 223, "primary_symbol": "", "primary_kind": "", "primary_span": [149, 164], "def_symbols": [], "symbols": ["AirportsServiceServer", "the", "server", "API", "for", "AirportsService", "service", "All", "implementations", "must", "embed", "UnimplementedAirportsServiceServer", "forward", "compatibility", "type", "interface", "Get", "context", "Context", "AirportDetailsRequest", "AirportDetailsResponse", "error", "BatchGet", "BatchGetRequest", "BatchGetResponse", "GetByCity", "AirportByCityRequest", "UploadImage", "grpc", "ClientStreamingServer", "UploadImageRequest", "UploadImageResponse", "Search", "SearchAirportsRequest", "SearchAirportsResponse", "Create", "CreateAirportRequest", "CreateAirportResponse", "Update", "UpdateAirportRequest", "UpdateAirportResponse", "BatchGetByDesignator", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignator", "GetByDesignatorRequest", "GetByDesignatorResponse", "mustEmbedUnimplementedAirportsServiceServer"], "doc_head": "// AirportsServiceServer is the server API for AirportsService service.\n// All implementations must embed UnimplementedAirportsServiceServer\n// for forward compatibility.\ntype AirportsServiceServer interface {\n\tGet(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error)\n\tBatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)\n\tGetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error)\n\tUploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error\n\tSearch(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error)\n\tCreate(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error)\n\tUpdate(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error)\n\tBatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error)\n\tGetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error)\n\tmustEmbedUnimplementedAirportsServiceServer()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 165, "end_line": 180, "text": "// UnimplementedAirportsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirportsServiceServer struct{}\n\nfunc (UnimplementedAirportsServiceServer) Get(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByCity not implemented\")\n}", "n_tokens": 190, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [172, 180], "def_symbols": ["Get", "BatchGet", "GetByCity"], "symbols": ["Get", "BatchGet", "GetByCity", "UnimplementedAirportsServiceServer", "must", "embedded", "have", "forward", "compatible", "implementations", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "type", "struct", "func", "context", "Context", "AirportDetailsRequest", "AirportDetailsResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetRequest", "BatchGetResponse", "AirportByCityRequest"], "doc_head": "// UnimplementedAirportsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedAirportsServiceServer struct{}\nfunc (UnimplementedAirportsServiceServer) Get(context.Context, *AirportDetailsRequest) (*AirportDetailsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGet not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByCity(context.Context, *AirportByCityRequest) (*BatchGetResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByCity not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 181, "end_line": 192, "text": "func (UnimplementedAirportsServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method UploadImage not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Search(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Create(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Update(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}", "n_tokens": 174, "primary_symbol": "UploadImage", "primary_kind": "function", "primary_span": [181, 192], "def_symbols": ["UploadImage", "Search", "Create", "Update"], "symbols": ["UploadImage", "Search", "Create", "Update", "func", "UnimplementedAirportsServiceServer", "grpc", "ClientStreamingServer", "UploadImageRequest", "UploadImageResponse", "error", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "context", "Context", "SearchAirportsRequest", "SearchAirportsResponse", "nil", "CreateAirportRequest", "CreateAirportResponse", "UpdateAirportRequest", "UpdateAirportResponse"], "doc_head": "func (UnimplementedAirportsServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {\n\treturn status.Errorf(codes.Unimplemented, \"method UploadImage not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Search(context.Context, *SearchAirportsRequest) (*SearchAirportsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Create(context.Context, *CreateAirportRequest) (*CreateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) Update(context.Context, *UpdateAirportRequest) (*UpdateAirportResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 193, "end_line": 201, "text": "func (UnimplementedAirportsServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) mustEmbedUnimplementedAirportsServiceServer() {}\nfunc (UnimplementedAirportsServiceServer) testEmbeddedByValue()                         {}\n", "n_tokens": 145, "primary_symbol": "BatchGetByDesignator", "primary_kind": "function", "primary_span": [193, 201], "def_symbols": ["BatchGetByDesignator", "GetByDesignator", "mustEmbedUnimplementedAirportsServiceServer", "testEmbeddedByValue"], "symbols": ["BatchGetByDesignator", "GetByDesignator", "mustEmbedUnimplementedAirportsServiceServer", "testEmbeddedByValue", "func", "UnimplementedAirportsServiceServer", "context", "Context", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetByDesignatorRequest", "GetByDesignatorResponse"], "doc_head": "func (UnimplementedAirportsServiceServer) BatchGetByDesignator(context.Context, *BatchGetByDesignatorRequest) (*BatchGetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) GetByDesignator(context.Context, *GetByDesignatorRequest) (*GetByDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetByDesignator not implemented\")\n}\nfunc (UnimplementedAirportsServiceServer) mustEmbedUnimplementedAirportsServiceServer() {}\nfunc (UnimplementedAirportsServiceServer) testEmbeddedByValue()                         {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 202, "end_line": 219, "text": "// UnsafeAirportsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirportsServiceServer will\n// result in compilation errors.\ntype UnsafeAirportsServiceServer interface {\n\tmustEmbedUnimplementedAirportsServiceServer()\n}\n\nfunc RegisterAirportsServiceServer(s grpc.ServiceRegistrar, srv AirportsServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirportsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirportsService_ServiceDesc, srv)\n}\n", "n_tokens": 189, "primary_symbol": "RegisterAirportsServiceServer", "primary_kind": "function", "primary_span": [209, 219], "def_symbols": ["RegisterAirportsServiceServer"], "symbols": ["RegisterAirportsServiceServer", "UnsafeAirportsServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "AirportsServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedAirportsServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedAirportsServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "AirportsService_ServiceDesc"], "doc_head": "// UnsafeAirportsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to AirportsServiceServer will\n// result in compilation errors.\ntype UnsafeAirportsServiceServer interface {\n\tmustEmbedUnimplementedAirportsServiceServer()\n}\nfunc RegisterAirportsServiceServer(s grpc.ServiceRegistrar, srv AirportsServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedAirportsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&AirportsService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 220, "end_line": 237, "text": "func _AirportsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, req.(*AirportDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirportsService_Get_Handler", "primary_kind": "function", "primary_span": [220, 237], "def_symbols": ["_AirportsService_Get_Handler"], "symbols": ["_AirportsService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AirportDetailsRequest", "err", "nil", "return", "AirportsServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Get_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportDetailsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Get(ctx, req.(*AirportDetailsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 238, "end_line": 255, "text": "func _AirportsService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 164, "primary_symbol": "_AirportsService_BatchGet_Handler", "primary_kind": "function", "primary_span": [238, 255], "def_symbols": ["_AirportsService_BatchGet_Handler"], "symbols": ["_AirportsService_BatchGet_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetRequest", "err", "nil", "return", "AirportsServiceServer", "BatchGet", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_BatchGet_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGet_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGet(ctx, req.(*BatchGetRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 256, "end_line": 273, "text": "func _AirportsService_GetByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportByCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByCity_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, req.(*AirportByCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 169, "primary_symbol": "_AirportsService_GetByCity_Handler", "primary_kind": "function", "primary_span": [256, 273], "def_symbols": ["_AirportsService_GetByCity_Handler"], "symbols": ["_AirportsService_GetByCity_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "AirportByCityRequest", "err", "nil", "return", "AirportsServiceServer", "GetByCity", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_GetByCity_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_GetByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AirportByCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByCity_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByCity(ctx, req.(*AirportByCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 274, "end_line": 280, "text": "func _AirportsService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {\n\treturn srv.(AirportsServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})\n}\n\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]\n", "n_tokens": 95, "primary_symbol": "_AirportsService_UploadImage_Handler", "primary_kind": "function", "primary_span": [274, 280], "def_symbols": ["_AirportsService_UploadImage_Handler"], "symbols": ["_AirportsService_UploadImage_Handler", "func", "srv", "interface", "stream", "grpc", "ServerStream", "error", "return", "AirportsServiceServer", "UploadImage", "GenericServerStream", "UploadImageRequest", "UploadImageResponse", "This", "type", "alias", "provided", "for", "backwards", "compatibility", "with", "existing", "code", "that", "references", "the", "prior", "non", "generic", "name", "AirportsService_UploadImageServer", "ClientStreamingServer"], "doc_head": "func _AirportsService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {\n\treturn srv.(AirportsServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})\n}\n// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.\ntype AirportsService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 281, "end_line": 298, "text": "func _AirportsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirportsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, req.(*SearchAirportsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_AirportsService_Search_Handler", "primary_kind": "function", "primary_span": [281, 298], "def_symbols": ["_AirportsService_Search_Handler"], "symbols": ["_AirportsService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchAirportsRequest", "err", "nil", "return", "AirportsServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Search_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchAirportsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Search(ctx, req.(*SearchAirportsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 299, "end_line": 316, "text": "func _AirportsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, req.(*CreateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 157, "primary_symbol": "_AirportsService_Create_Handler", "primary_kind": "function", "primary_span": [299, 316], "def_symbols": ["_AirportsService_Create_Handler"], "symbols": ["_AirportsService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateAirportRequest", "err", "nil", "return", "AirportsServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Create_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Create(ctx, req.(*CreateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 317, "end_line": 334, "text": "func _AirportsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, req.(*UpdateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 158, "primary_symbol": "_AirportsService_Update_Handler", "primary_kind": "function", "primary_span": [317, 334], "def_symbols": ["_AirportsService_Update_Handler"], "symbols": ["_AirportsService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateAirportRequest", "err", "nil", "return", "AirportsServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_Update_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateAirportRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).Update(ctx, req.(*UpdateAirportRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 335, "end_line": 352, "text": "func _AirportsService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 182, "primary_symbol": "_AirportsService_BatchGetByDesignator_Handler", "primary_kind": "function", "primary_span": [335, 352], "def_symbols": ["_AirportsService_BatchGetByDesignator_Handler"], "symbols": ["_AirportsService_BatchGetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetByDesignatorRequest", "err", "nil", "return", "AirportsServiceServer", "BatchGetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_BatchGetByDesignator_FullMethodName", "handler", "req"], "doc_head": "func _AirportsService_BatchGetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_BatchGetByDesignator_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).BatchGetByDesignator(ctx, req.(*BatchGetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#24", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 353, "end_line": 364, "text": "func _AirportsService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByDesignator_FullMethodName,\n\t}", "n_tokens": 121, "primary_symbol": "_AirportsService_GetByDesignator_Handler", "primary_kind": "function", "primary_span": [353, 364], "def_symbols": ["_AirportsService_GetByDesignator_Handler"], "symbols": ["_AirportsService_GetByDesignator_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetByDesignatorRequest", "err", "nil", "return", "AirportsServiceServer", "GetByDesignator", "info", "UnaryServerInfo", "Server", "FullMethod", "AirportsService_GetByDesignator_FullMethodName"], "doc_head": "func _AirportsService_GetByDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetByDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: AirportsService_GetByDesignator_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#25", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 365, "end_line": 427, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// AirportsService_ServiceDesc is the grpc.ServiceDesc for AirportsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirportsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.AirportsService\",\n\tHandlerType: (*AirportsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirportsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirportsService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByCity\",\n\t\t\tHandler:    _AirportsService_GetByCity_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirportsService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirportsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirportsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirportsService_BatchGetByDesignator_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByDesignator\",\n\t\t\tHandler:    _AirportsService_GetByDesignator_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{\n\t\t{\n\t\t\tStreamName:    \"UploadImage\",\n\t\t\tHandler:       _AirportsService_UploadImage_Handler,\n\t\t\tClientStreams: true,\n\t\t},\n\t},\n\tMetadata: \"airports.proto\",\n}\n\nconst (\n\tCitiesService_Search_FullMethodName = \"/aviation.airports.v0.CitiesService/Search\"\n\tCitiesService_Get_FullMethodName    = \"/aviation.airports.v0.CitiesService/Get\"\n\tCitiesService_Create_FullMethodName = \"/aviation.airports.v0.CitiesService/Create\"\n\tCitiesService_Update_FullMethodName = \"/aviation.airports.v0.CitiesService/Update\"\n)\n", "n_tokens": 508, "primary_symbol": "", "primary_kind": "", "primary_span": [365, 427], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "AirportsServiceServer", "GetByDesignator", "GetByDesignatorRequest", "interceptor", "info", "AirportsService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "AirportsService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Get", "Handler", "_AirportsService_Get_Handler", "BatchGet", "_AirportsService_BatchGet_Handler", "GetByCity", "_AirportsService_GetByCity_Handler", "Search", "_AirportsService_Search_Handler", "Create", "_AirportsService_Create_Handler", "Update", "_AirportsService_Update_Handler", "BatchGetByDesignator", "_AirportsService_BatchGetByDesignator_Handler", "_AirportsService_GetByDesignator_Handler", "Streams", "StreamDesc", "StreamName", "UploadImage", "_AirportsService_UploadImage_Handler", "ClientStreams", "true", "Metadata", "proto", "const", "CitiesService_Search_FullMethodName", "CitiesService", "CitiesService_Get_FullMethodName", "CitiesService_Create_FullMethodName", "CitiesService_Update_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(AirportsServiceServer).GetByDesignator(ctx, req.(*GetByDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// AirportsService_ServiceDesc is the grpc.ServiceDesc for AirportsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar AirportsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.AirportsService\",\n\tHandlerType: (*AirportsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _AirportsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGet\",\n\t\t\tHandler:    _AirportsService_BatchGet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetByCity\",\n\t\t\tHandler:    _AirportsService_GetByCity_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _AirportsService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _AirportsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _AirportsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetByDesignator\",\n\t\t\tHandler:    _AirportsService_BatchGetByDesignator_Handl"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#26", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 428, "end_line": 445, "text": "// CitiesServiceClient is the client API for CitiesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CitiesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error)\n\tGet(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error)\n\tCreate(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error)\n}\n\ntype citiesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewCitiesServiceClient(cc grpc.ClientConnInterface) CitiesServiceClient {\n\treturn &citiesServiceClient{cc}\n}\n", "n_tokens": 192, "primary_symbol": "NewCitiesServiceClient", "primary_kind": "function", "primary_span": [442, 445], "def_symbols": ["NewCitiesServiceClient"], "symbols": ["NewCitiesServiceClient", "CitiesServiceClient", "the", "client", "API", "for", "CitiesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Search", "context", "Context", "SearchCitiesRequest", "opts", "CallOption", "SearchCitiesResponse", "error", "Get", "GetCityRequest", "GetCityResponse", "Create", "CreateCityRequest", "CreateCityResponse", "Update", "UpdateCityRequest", "UpdateCityResponse", "citiesServiceClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// CitiesServiceClient is the client API for CitiesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CitiesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error)\n\tGet(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error)\n\tCreate(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error)\n}\ntype citiesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewCitiesServiceClient(cc grpc.ClientConnInterface) CitiesServiceClient {\n\treturn &citiesServiceClient{cc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#27", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 446, "end_line": 465, "text": "func (c *citiesServiceClient) Search(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCitiesResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *citiesServiceClient) Get(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 190, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [446, 465], "def_symbols": ["Search", "Get"], "symbols": ["Search", "Get", "func", "citiesServiceClient", "ctx", "context", "Context", "SearchCitiesRequest", "opts", "grpc", "CallOption", "SearchCitiesResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CitiesService_Search_FullMethodName", "nil", "return", "GetCityRequest", "GetCityResponse", "CitiesService_Get_FullMethodName"], "doc_head": "func (c *citiesServiceClient) Search(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCitiesResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *citiesServiceClient) Get(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#28", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 466, "end_line": 485, "text": "func (c *citiesServiceClient) Create(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *citiesServiceClient) Update(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 191, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [466, 485], "def_symbols": ["Create", "Update"], "symbols": ["Create", "Update", "func", "citiesServiceClient", "ctx", "context", "Context", "CreateCityRequest", "opts", "grpc", "CallOption", "CreateCityResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CitiesService_Create_FullMethodName", "nil", "return", "UpdateCityRequest", "UpdateCityResponse", "CitiesService_Update_FullMethodName"], "doc_head": "func (c *citiesServiceClient) Create(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *citiesServiceClient) Update(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCityResponse)\n\terr := c.cc.Invoke(ctx, CitiesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#29", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 486, "end_line": 503, "text": "// CitiesServiceServer is the server API for CitiesService service.\n// All implementations must embed UnimplementedCitiesServiceServer\n// for forward compatibility.\ntype CitiesServiceServer interface {\n\tSearch(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error)\n\tGet(context.Context, *GetCityRequest) (*GetCityResponse, error)\n\tCreate(context.Context, *CreateCityRequest) (*CreateCityResponse, error)\n\tUpdate(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error)\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\n\n// UnimplementedCitiesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCitiesServiceServer struct{}\n", "n_tokens": 162, "primary_symbol": "", "primary_kind": "", "primary_span": [486, 503], "def_symbols": [], "symbols": ["CitiesServiceServer", "the", "server", "API", "for", "CitiesService", "service", "All", "implementations", "must", "embed", "UnimplementedCitiesServiceServer", "forward", "compatibility", "type", "interface", "Search", "context", "Context", "SearchCitiesRequest", "SearchCitiesResponse", "error", "Get", "GetCityRequest", "GetCityResponse", "Create", "CreateCityRequest", "CreateCityResponse", "Update", "UpdateCityRequest", "UpdateCityResponse", "mustEmbedUnimplementedCitiesServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// CitiesServiceServer is the server API for CitiesService service.\n// All implementations must embed UnimplementedCitiesServiceServer\n// for forward compatibility.\ntype CitiesServiceServer interface {\n\tSearch(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error)\n\tGet(context.Context, *GetCityRequest) (*GetCityResponse, error)\n\tCreate(context.Context, *CreateCityRequest) (*CreateCityResponse, error)\n\tUpdate(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error)\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\n// UnimplementedCitiesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCitiesServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#30", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 504, "end_line": 518, "text": "func (UnimplementedCitiesServiceServer) Search(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Get(context.Context, *GetCityRequest) (*GetCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Create(context.Context, *CreateCityRequest) (*CreateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Update(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) mustEmbedUnimplementedCitiesServiceServer() {}\nfunc (UnimplementedCitiesServiceServer) testEmbeddedByValue()                       {}\n", "n_tokens": 200, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [504, 518], "def_symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCitiesServiceServer", "testEmbeddedByValue"], "symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCitiesServiceServer", "testEmbeddedByValue", "func", "UnimplementedCitiesServiceServer", "context", "Context", "SearchCitiesRequest", "SearchCitiesResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetCityRequest", "GetCityResponse", "CreateCityRequest", "CreateCityResponse", "UpdateCityRequest", "UpdateCityResponse"], "doc_head": "func (UnimplementedCitiesServiceServer) Search(context.Context, *SearchCitiesRequest) (*SearchCitiesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Get(context.Context, *GetCityRequest) (*GetCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Create(context.Context, *CreateCityRequest) (*CreateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) Update(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCitiesServiceServer) mustEmbedUnimplementedCitiesServiceServer() {}\nfunc (UnimplementedCitiesServiceServer) testEmbeddedByValue()                       {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#31", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 519, "end_line": 536, "text": "// UnsafeCitiesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CitiesServiceServer will\n// result in compilation errors.\ntype UnsafeCitiesServiceServer interface {\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\n\nfunc RegisterCitiesServiceServer(s grpc.ServiceRegistrar, srv CitiesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCitiesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CitiesService_ServiceDesc, srv)\n}\n", "n_tokens": 181, "primary_symbol": "RegisterCitiesServiceServer", "primary_kind": "function", "primary_span": [526, 536], "def_symbols": ["RegisterCitiesServiceServer"], "symbols": ["RegisterCitiesServiceServer", "UnsafeCitiesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "CitiesServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedCitiesServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedCitiesServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "CitiesService_ServiceDesc"], "doc_head": "// UnsafeCitiesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CitiesServiceServer will\n// result in compilation errors.\ntype UnsafeCitiesServiceServer interface {\n\tmustEmbedUnimplementedCitiesServiceServer()\n}\nfunc RegisterCitiesServiceServer(s grpc.ServiceRegistrar, srv CitiesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCitiesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CitiesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#32", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 537, "end_line": 554, "text": "func _CitiesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCitiesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, req.(*SearchCitiesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CitiesService_Search_Handler", "primary_kind": "function", "primary_span": [537, 554], "def_symbols": ["_CitiesService_Search_Handler"], "symbols": ["_CitiesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchCitiesRequest", "err", "nil", "return", "CitiesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _CitiesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCitiesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Search(ctx, req.(*SearchCitiesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#33", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 555, "end_line": 572, "text": "func _CitiesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, req.(*GetCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CitiesService_Get_Handler", "primary_kind": "function", "primary_span": [555, 572], "def_symbols": ["_CitiesService_Get_Handler"], "symbols": ["_CitiesService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetCityRequest", "err", "nil", "return", "CitiesServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Get_FullMethodName", "handler", "req"], "doc_head": "func _CitiesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Get(ctx, req.(*GetCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#34", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 573, "end_line": 590, "text": "func _CitiesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, req.(*CreateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CitiesService_Create_Handler", "primary_kind": "function", "primary_span": [573, 590], "def_symbols": ["_CitiesService_Create_Handler"], "symbols": ["_CitiesService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateCityRequest", "err", "nil", "return", "CitiesServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Create_FullMethodName", "handler", "req"], "doc_head": "func _CitiesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Create(ctx, req.(*CreateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#35", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 591, "end_line": 602, "text": "func _CitiesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Update_FullMethodName,\n\t}", "n_tokens": 108, "primary_symbol": "_CitiesService_Update_Handler", "primary_kind": "function", "primary_span": [591, 602], "def_symbols": ["_CitiesService_Update_Handler"], "symbols": ["_CitiesService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateCityRequest", "err", "nil", "return", "CitiesServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "CitiesService_Update_FullMethodName"], "doc_head": "func _CitiesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCityRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CitiesService_Update_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#36", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 603, "end_line": 643, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, req.(*UpdateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// CitiesService_ServiceDesc is the grpc.ServiceDesc for CitiesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CitiesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CitiesService\",\n\tHandlerType: (*CitiesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CitiesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CitiesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CitiesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CitiesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\n\nconst (\n\tCountriesService_Search_FullMethodName = \"/aviation.airports.v0.CountriesService/Search\"\n\tCountriesService_Get_FullMethodName    = \"/aviation.airports.v0.CountriesService/Get\"\n\tCountriesService_Create_FullMethodName = \"/aviation.airports.v0.CountriesService/Create\"\n\tCountriesService_Update_FullMethodName = \"/aviation.airports.v0.CountriesService/Update\"\n)\n", "n_tokens": 334, "primary_symbol": "", "primary_kind": "", "primary_span": [603, 643], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "CitiesServiceServer", "Update", "UpdateCityRequest", "interceptor", "info", "CitiesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "CitiesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Search", "Handler", "_CitiesService_Search_Handler", "Get", "_CitiesService_Get_Handler", "Create", "_CitiesService_Create_Handler", "_CitiesService_Update_Handler", "Streams", "StreamDesc", "Metadata", "proto", "const", "CountriesService_Search_FullMethodName", "CountriesService", "CountriesService_Get_FullMethodName", "CountriesService_Create_FullMethodName", "CountriesService_Update_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CitiesServiceServer).Update(ctx, req.(*UpdateCityRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// CitiesService_ServiceDesc is the grpc.ServiceDesc for CitiesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CitiesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CitiesService\",\n\tHandlerType: (*CitiesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CitiesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CitiesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CitiesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CitiesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\nconst (\n\tCountriesService_Search_FullMethodName = \"/aviation.airports.v0.CountriesService/Search\"\n\tCountriesService_Get_FullMethodName    = \"/aviation.airports.v0.CountriesService/Get\"\n\tCountriesService_Create_FullMethodName = \"/aviation.airp"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#37", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 644, "end_line": 661, "text": "// CountriesServiceClient is the client API for CountriesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CountriesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error)\n\tGet(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)\n\tCreate(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error)\n}\n\ntype countriesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewCountriesServiceClient(cc grpc.ClientConnInterface) CountriesServiceClient {\n\treturn &countriesServiceClient{cc}\n}\n", "n_tokens": 192, "primary_symbol": "NewCountriesServiceClient", "primary_kind": "function", "primary_span": [658, 661], "def_symbols": ["NewCountriesServiceClient"], "symbols": ["NewCountriesServiceClient", "CountriesServiceClient", "the", "client", "API", "for", "CountriesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Search", "context", "Context", "SearchCountriesRequest", "opts", "CallOption", "SearchCountriesResponse", "error", "Get", "GetCountryRequest", "GetCountryResponse", "Create", "CreateCountryRequest", "CreateCountryResponse", "Update", "UpdateCountryRequest", "UpdateCountryResponse", "countriesServiceClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// CountriesServiceClient is the client API for CountriesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype CountriesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error)\n\tGet(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)\n\tCreate(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)\n\tUpdate(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error)\n}\ntype countriesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewCountriesServiceClient(cc grpc.ClientConnInterface) CountriesServiceClient {\n\treturn &countriesServiceClient{cc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#38", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 662, "end_line": 681, "text": "func (c *countriesServiceClient) Search(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCountriesResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *countriesServiceClient) Get(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 190, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [662, 681], "def_symbols": ["Search", "Get"], "symbols": ["Search", "Get", "func", "countriesServiceClient", "ctx", "context", "Context", "SearchCountriesRequest", "opts", "grpc", "CallOption", "SearchCountriesResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CountriesService_Search_FullMethodName", "nil", "return", "GetCountryRequest", "GetCountryResponse", "CountriesService_Get_FullMethodName"], "doc_head": "func (c *countriesServiceClient) Search(ctx context.Context, in *SearchCountriesRequest, opts ...grpc.CallOption) (*SearchCountriesResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchCountriesResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *countriesServiceClient) Get(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#39", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 682, "end_line": 701, "text": "func (c *countriesServiceClient) Create(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *countriesServiceClient) Update(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 191, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [682, 701], "def_symbols": ["Create", "Update"], "symbols": ["Create", "Update", "func", "countriesServiceClient", "ctx", "context", "Context", "CreateCountryRequest", "opts", "grpc", "CallOption", "CreateCountryResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "CountriesService_Create_FullMethodName", "nil", "return", "UpdateCountryRequest", "UpdateCountryResponse", "CountriesService_Update_FullMethodName"], "doc_head": "func (c *countriesServiceClient) Create(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *countriesServiceClient) Update(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateCountryResponse)\n\terr := c.cc.Invoke(ctx, CountriesService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#40", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 702, "end_line": 719, "text": "// CountriesServiceServer is the server API for CountriesService service.\n// All implementations must embed UnimplementedCountriesServiceServer\n// for forward compatibility.\ntype CountriesServiceServer interface {\n\tSearch(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error)\n\tGet(context.Context, *GetCountryRequest) (*GetCountryResponse, error)\n\tCreate(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)\n\tUpdate(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error)\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\n\n// UnimplementedCountriesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCountriesServiceServer struct{}\n", "n_tokens": 162, "primary_symbol": "", "primary_kind": "", "primary_span": [702, 719], "def_symbols": [], "symbols": ["CountriesServiceServer", "the", "server", "API", "for", "CountriesService", "service", "All", "implementations", "must", "embed", "UnimplementedCountriesServiceServer", "forward", "compatibility", "type", "interface", "Search", "context", "Context", "SearchCountriesRequest", "SearchCountriesResponse", "error", "Get", "GetCountryRequest", "GetCountryResponse", "Create", "CreateCountryRequest", "CreateCountryResponse", "Update", "UpdateCountryRequest", "UpdateCountryResponse", "mustEmbedUnimplementedCountriesServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// CountriesServiceServer is the server API for CountriesService service.\n// All implementations must embed UnimplementedCountriesServiceServer\n// for forward compatibility.\ntype CountriesServiceServer interface {\n\tSearch(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error)\n\tGet(context.Context, *GetCountryRequest) (*GetCountryResponse, error)\n\tCreate(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)\n\tUpdate(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error)\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\n// UnimplementedCountriesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedCountriesServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#41", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 720, "end_line": 734, "text": "func (UnimplementedCountriesServiceServer) Search(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Get(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Create(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Update(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) mustEmbedUnimplementedCountriesServiceServer() {}\nfunc (UnimplementedCountriesServiceServer) testEmbeddedByValue()                          {}\n", "n_tokens": 200, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [720, 734], "def_symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCountriesServiceServer", "testEmbeddedByValue"], "symbols": ["Search", "Get", "Create", "Update", "mustEmbedUnimplementedCountriesServiceServer", "testEmbeddedByValue", "func", "UnimplementedCountriesServiceServer", "context", "Context", "SearchCountriesRequest", "SearchCountriesResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetCountryRequest", "GetCountryResponse", "CreateCountryRequest", "CreateCountryResponse", "UpdateCountryRequest", "UpdateCountryResponse"], "doc_head": "func (UnimplementedCountriesServiceServer) Search(context.Context, *SearchCountriesRequest) (*SearchCountriesResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Get(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Create(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) Update(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedCountriesServiceServer) mustEmbedUnimplementedCountriesServiceServer() {}\nfunc (UnimplementedCountriesServiceServer) testEmbeddedByValue()                          {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#42", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 735, "end_line": 752, "text": "// UnsafeCountriesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CountriesServiceServer will\n// result in compilation errors.\ntype UnsafeCountriesServiceServer interface {\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\n\nfunc RegisterCountriesServiceServer(s grpc.ServiceRegistrar, srv CountriesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCountriesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CountriesService_ServiceDesc, srv)\n}\n", "n_tokens": 181, "primary_symbol": "RegisterCountriesServiceServer", "primary_kind": "function", "primary_span": [742, 752], "def_symbols": ["RegisterCountriesServiceServer"], "symbols": ["RegisterCountriesServiceServer", "UnsafeCountriesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "CountriesServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedCountriesServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "the", "following", "call", "pancis", "indicates", "UnimplementedCountriesServiceServer", "was", "pointer", "and", "nil", "This", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "testEmbeddedByValue", "RegisterService", "CountriesService_ServiceDesc"], "doc_head": "// UnsafeCountriesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to CountriesServiceServer will\n// result in compilation errors.\ntype UnsafeCountriesServiceServer interface {\n\tmustEmbedUnimplementedCountriesServiceServer()\n}\nfunc RegisterCountriesServiceServer(s grpc.ServiceRegistrar, srv CountriesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedCountriesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&CountriesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#43", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 753, "end_line": 770, "text": "func _CountriesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCountriesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, req.(*SearchCountriesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CountriesService_Search_Handler", "primary_kind": "function", "primary_span": [753, 770], "def_symbols": ["_CountriesService_Search_Handler"], "symbols": ["_CountriesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchCountriesRequest", "err", "nil", "return", "CountriesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _CountriesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchCountriesRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Search(ctx, req.(*SearchCountriesRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#44", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 771, "end_line": 788, "text": "func _CountriesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, req.(*GetCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CountriesService_Get_Handler", "primary_kind": "function", "primary_span": [771, 788], "def_symbols": ["_CountriesService_Get_Handler"], "symbols": ["_CountriesService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetCountryRequest", "err", "nil", "return", "CountriesServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Get_FullMethodName", "handler", "req"], "doc_head": "func _CountriesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Get(ctx, req.(*GetCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#45", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 789, "end_line": 806, "text": "func _CountriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, req.(*CreateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 153, "primary_symbol": "_CountriesService_Create_Handler", "primary_kind": "function", "primary_span": [789, 806], "def_symbols": ["_CountriesService_Create_Handler"], "symbols": ["_CountriesService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateCountryRequest", "err", "nil", "return", "CountriesServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Create_FullMethodName", "handler", "req"], "doc_head": "func _CountriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Create(ctx, req.(*CreateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#46", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 807, "end_line": 818, "text": "func _CountriesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Update_FullMethodName,\n\t}", "n_tokens": 108, "primary_symbol": "_CountriesService_Update_Handler", "primary_kind": "function", "primary_span": [807, 818], "def_symbols": ["_CountriesService_Update_Handler"], "symbols": ["_CountriesService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateCountryRequest", "err", "nil", "return", "CountriesServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "CountriesService_Update_FullMethodName"], "doc_head": "func _CountriesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateCountryRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: CountriesService_Update_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#47", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 819, "end_line": 859, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, req.(*UpdateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// CountriesService_ServiceDesc is the grpc.ServiceDesc for CountriesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CountriesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CountriesService\",\n\tHandlerType: (*CountriesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CountriesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CountriesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CountriesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CountriesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\n\nconst (\n\tDesignatorsService_Create_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Create\"\n\tDesignatorsService_Get_FullMethodName    = \"/aviation.airports.v0.DesignatorsService/Get\"\n\tDesignatorsService_Update_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Update\"\n\tDesignatorsService_Search_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Search\"\n)\n", "n_tokens": 338, "primary_symbol": "", "primary_kind": "", "primary_span": [819, 859], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "CountriesServiceServer", "Update", "UpdateCountryRequest", "interceptor", "info", "CountriesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "CountriesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Search", "Handler", "_CountriesService_Search_Handler", "Get", "_CountriesService_Get_Handler", "Create", "_CountriesService_Create_Handler", "_CountriesService_Update_Handler", "Streams", "StreamDesc", "Metadata", "proto", "const", "DesignatorsService_Create_FullMethodName", "DesignatorsService", "DesignatorsService_Get_FullMethodName", "DesignatorsService_Update_FullMethodName", "DesignatorsService_Search_FullMethodName"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(CountriesServiceServer).Update(ctx, req.(*UpdateCountryRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// CountriesService_ServiceDesc is the grpc.ServiceDesc for CountriesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar CountriesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.CountriesService\",\n\tHandlerType: (*CountriesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _CountriesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _CountriesService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _CountriesService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _CountriesService_Update_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\nconst (\n\tDesignatorsService_Create_FullMethodName = \"/aviation.airports.v0.DesignatorsService/Create\"\n\tDesignatorsService_Get_FullMethodName    = \"/aviation.airports.v0.DesignatorsService/Get\"\n\tDesignatorsServ"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#48", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 860, "end_line": 873, "text": "// DesignatorsServiceClient is the client API for DesignatorsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype DesignatorsServiceClient interface {\n\tCreate(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error)\n\tGet(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error)\n\tUpdate(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error)\n\tSearch(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error)\n}\n\ntype designatorsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n", "n_tokens": 180, "primary_symbol": "", "primary_kind": "", "primary_span": [860, 873], "def_symbols": [], "symbols": ["DesignatorsServiceClient", "the", "client", "API", "for", "DesignatorsService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Create", "context", "Context", "CreateDesignatorRequest", "opts", "CallOption", "CreateDesignatorResponse", "error", "Get", "GetDesignatorRequest", "GetDesignatorResponse", "Update", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Search", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "designatorsServiceClient", "struct", "ClientConnInterface"], "doc_head": "// DesignatorsServiceClient is the client API for DesignatorsService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype DesignatorsServiceClient interface {\n\tCreate(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error)\n\tGet(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error)\n\tUpdate(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error)\n\tSearch(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error)\n}\ntype designatorsServiceClient struct {\n\tcc grpc.ClientConnInterface\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#49", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 874, "end_line": 887, "text": "func NewDesignatorsServiceClient(cc grpc.ClientConnInterface) DesignatorsServiceClient {\n\treturn &designatorsServiceClient{cc}\n}\n\nfunc (c *designatorsServiceClient) Create(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 127, "primary_symbol": "NewDesignatorsServiceClient", "primary_kind": "function", "primary_span": [874, 887], "def_symbols": ["NewDesignatorsServiceClient", "Create"], "symbols": ["NewDesignatorsServiceClient", "Create", "func", "grpc", "ClientConnInterface", "DesignatorsServiceClient", "return", "designatorsServiceClient", "ctx", "context", "Context", "CreateDesignatorRequest", "opts", "CallOption", "CreateDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Create_FullMethodName", "nil"], "doc_head": "func NewDesignatorsServiceClient(cc grpc.ClientConnInterface) DesignatorsServiceClient {\n\treturn &designatorsServiceClient{cc}\n}\nfunc (c *designatorsServiceClient) Create(ctx context.Context, in *CreateDesignatorRequest, opts ...grpc.CallOption) (*CreateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(CreateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Create_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#50", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 888, "end_line": 907, "text": "func (c *designatorsServiceClient) Get(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *designatorsServiceClient) Update(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 201, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [888, 907], "def_symbols": ["Get", "Update"], "symbols": ["Get", "Update", "func", "designatorsServiceClient", "ctx", "context", "Context", "GetDesignatorRequest", "opts", "grpc", "CallOption", "GetDesignatorResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Get_FullMethodName", "nil", "return", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "DesignatorsService_Update_FullMethodName"], "doc_head": "func (c *designatorsServiceClient) Get(ctx context.Context, in *GetDesignatorRequest, opts ...grpc.CallOption) (*GetDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Get_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *designatorsServiceClient) Update(ctx context.Context, in *UpdateDesignatorRequest, opts ...grpc.CallOption) (*UpdateDesignatorResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(UpdateDesignatorResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Update_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#51", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 908, "end_line": 917, "text": "func (c *designatorsServiceClient) Search(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchDesignatorsResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 100, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [908, 917], "def_symbols": ["Search"], "symbols": ["Search", "func", "designatorsServiceClient", "ctx", "context", "Context", "SearchDesignatorsRequest", "opts", "grpc", "CallOption", "SearchDesignatorsResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "DesignatorsService_Search_FullMethodName", "nil", "return"], "doc_head": "func (c *designatorsServiceClient) Search(ctx context.Context, in *SearchDesignatorsRequest, opts ...grpc.CallOption) (*SearchDesignatorsResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchDesignatorsResponse)\n\terr := c.cc.Invoke(ctx, DesignatorsService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#52", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 918, "end_line": 935, "text": "// DesignatorsServiceServer is the server API for DesignatorsService service.\n// All implementations must embed UnimplementedDesignatorsServiceServer\n// for forward compatibility.\ntype DesignatorsServiceServer interface {\n\tCreate(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error)\n\tGet(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error)\n\tUpdate(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error)\n\tSearch(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error)\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n\n// UnimplementedDesignatorsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedDesignatorsServiceServer struct{}\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [918, 935], "def_symbols": [], "symbols": ["DesignatorsServiceServer", "the", "server", "API", "for", "DesignatorsService", "service", "All", "implementations", "must", "embed", "UnimplementedDesignatorsServiceServer", "forward", "compatibility", "type", "interface", "Create", "context", "Context", "CreateDesignatorRequest", "CreateDesignatorResponse", "error", "Get", "GetDesignatorRequest", "GetDesignatorResponse", "Update", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Search", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "mustEmbedUnimplementedDesignatorsServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct"], "doc_head": "// DesignatorsServiceServer is the server API for DesignatorsService service.\n// All implementations must embed UnimplementedDesignatorsServiceServer\n// for forward compatibility.\ntype DesignatorsServiceServer interface {\n\tCreate(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error)\n\tGet(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error)\n\tUpdate(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error)\n\tSearch(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error)\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n// UnimplementedDesignatorsServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedDesignatorsServiceServer struct{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#53", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 936, "end_line": 948, "text": "func (UnimplementedDesignatorsServiceServer) Create(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Get(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Update(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Search(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) mustEmbedUnimplementedDesignatorsServiceServer() {}", "n_tokens": 199, "primary_symbol": "Create", "primary_kind": "function", "primary_span": [936, 948], "def_symbols": ["Create", "Get", "Update", "Search", "mustEmbedUnimplementedDesignatorsServiceServer"], "symbols": ["Create", "Get", "Update", "Search", "mustEmbedUnimplementedDesignatorsServiceServer", "func", "UnimplementedDesignatorsServiceServer", "context", "Context", "CreateDesignatorRequest", "CreateDesignatorResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "GetDesignatorRequest", "GetDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "SearchDesignatorsRequest", "SearchDesignatorsResponse"], "doc_head": "func (UnimplementedDesignatorsServiceServer) Create(context.Context, *CreateDesignatorRequest) (*CreateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Create not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Get(context.Context, *GetDesignatorRequest) (*GetDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Get not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Update(context.Context, *UpdateDesignatorRequest) (*UpdateDesignatorResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Update not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) Search(context.Context, *SearchDesignatorsRequest) (*SearchDesignatorsResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}\nfunc (UnimplementedDesignatorsServiceServer) mustEmbedUnimplementedDesignatorsServiceServer() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#54", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 949, "end_line": 958, "text": "func (UnimplementedDesignatorsServiceServer) testEmbeddedByValue()                            {}\n\n// UnsafeDesignatorsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DesignatorsServiceServer will\n// result in compilation errors.\ntype UnsafeDesignatorsServiceServer interface {\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\n\nfunc RegisterDesignatorsServiceServer(s grpc.ServiceRegistrar, srv DesignatorsServiceServer) {", "n_tokens": 97, "primary_symbol": "testEmbeddedByValue", "primary_kind": "function", "primary_span": [949, 958], "def_symbols": ["testEmbeddedByValue", "RegisterDesignatorsServiceServer"], "symbols": ["testEmbeddedByValue", "RegisterDesignatorsServiceServer", "func", "UnimplementedDesignatorsServiceServer", "UnsafeDesignatorsServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "not", "recommended", "added", "methods", "DesignatorsServiceServer", "will", "result", "compilation", "errors", "type", "mustEmbedUnimplementedDesignatorsServiceServer", "grpc", "ServiceRegistrar", "srv"], "doc_head": "func (UnimplementedDesignatorsServiceServer) testEmbeddedByValue()                            {}\n// UnsafeDesignatorsServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DesignatorsServiceServer will\n// result in compilation errors.\ntype UnsafeDesignatorsServiceServer interface {\n\tmustEmbedUnimplementedDesignatorsServiceServer()\n}\nfunc RegisterDesignatorsServiceServer(s grpc.ServiceRegistrar, srv DesignatorsServiceServer) {"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#55", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 55, "start_line": 959, "end_line": 968, "text": "\t// If the following call pancis, it indicates UnimplementedDesignatorsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&DesignatorsService_ServiceDesc, srv)\n}\n", "n_tokens": 108, "primary_symbol": "", "primary_kind": "", "primary_span": [959, 968], "def_symbols": [], "symbols": ["the", "following", "call", "pancis", "indicates", "UnimplementedDesignatorsServiceServer", "was", "embedded", "pointer", "and", "nil", "This", "will", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "this", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "srv", "interface", "testEmbeddedByValue", "RegisterService", "DesignatorsService_ServiceDesc"], "doc_head": "\t// If the following call pancis, it indicates UnimplementedDesignatorsServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&DesignatorsService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#56", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 56, "start_line": 969, "end_line": 986, "text": "func _DesignatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, req.(*CreateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_DesignatorsService_Create_Handler", "primary_kind": "function", "primary_span": [969, 986], "def_symbols": ["_DesignatorsService_Create_Handler"], "symbols": ["_DesignatorsService_Create_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "CreateDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Create", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Create_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(CreateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Create_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Create(ctx, req.(*CreateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#57", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 57, "start_line": 987, "end_line": 1004, "text": "func _DesignatorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, req.(*GetDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 159, "primary_symbol": "_DesignatorsService_Get_Handler", "primary_kind": "function", "primary_span": [987, 1004], "def_symbols": ["_DesignatorsService_Get_Handler"], "symbols": ["_DesignatorsService_Get_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Get", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Get_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Get_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Get(ctx, req.(*GetDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#58", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 58, "start_line": 1005, "end_line": 1022, "text": "func _DesignatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, req.(*UpdateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 160, "primary_symbol": "_DesignatorsService_Update_Handler", "primary_kind": "function", "primary_span": [1005, 1022], "def_symbols": ["_DesignatorsService_Update_Handler"], "symbols": ["_DesignatorsService_Update_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "UpdateDesignatorRequest", "err", "nil", "return", "DesignatorsServiceServer", "Update", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Update_FullMethodName", "handler", "req"], "doc_head": "func _DesignatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UpdateDesignatorRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Update_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Update(ctx, req.(*UpdateDesignatorRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#59", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 59, "start_line": 1023, "end_line": 1034, "text": "func _DesignatorsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchDesignatorsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Search_FullMethodName,\n\t}", "n_tokens": 111, "primary_symbol": "_DesignatorsService_Search_Handler", "primary_kind": "function", "primary_span": [1023, 1034], "def_symbols": ["_DesignatorsService_Search_Handler"], "symbols": ["_DesignatorsService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchDesignatorsRequest", "err", "nil", "return", "DesignatorsServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "DesignatorsService_Search_FullMethodName"], "doc_head": "func _DesignatorsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchDesignatorsRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: DesignatorsService_Search_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go#60", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 60, "start_line": 1035, "end_line": 1068, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, req.(*SearchDesignatorsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// DesignatorsService_ServiceDesc is the grpc.ServiceDesc for DesignatorsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar DesignatorsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.DesignatorsService\",\n\tHandlerType: (*DesignatorsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _DesignatorsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _DesignatorsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _DesignatorsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _DesignatorsService_Search_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}\n", "n_tokens": 258, "primary_symbol": "", "primary_kind": "", "primary_span": [1035, 1068], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "DesignatorsServiceServer", "Search", "SearchDesignatorsRequest", "interceptor", "info", "DesignatorsService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "DesignatorsService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "airports", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Create", "Handler", "_DesignatorsService_Create_Handler", "Get", "_DesignatorsService_Get_Handler", "Update", "_DesignatorsService_Update_Handler", "_DesignatorsService_Search_Handler", "Streams", "StreamDesc", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DesignatorsServiceServer).Search(ctx, req.(*SearchDesignatorsRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// DesignatorsService_ServiceDesc is the grpc.ServiceDesc for DesignatorsService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar DesignatorsService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.airports.v0.DesignatorsService\",\n\tHandlerType: (*DesignatorsServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Create\",\n\t\t\tHandler:    _DesignatorsService_Create_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Get\",\n\t\t\tHandler:    _DesignatorsService_Get_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Update\",\n\t\t\tHandler:    _DesignatorsService_Update_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _DesignatorsService_Search_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"airports.proto\",\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: airports.proto\n\npackage airports\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 177, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "airports", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "timestamppb", "types", "known", "sync", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: airports.proto\npackage airports\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 60, "text": "type Include int32\n\nconst (\n\tInclude_UNKNOWN       Include = 0\n\tInclude_TERMINAL_MAPS Include = 1\n)\n\n// Enum value maps for Include.\nvar (\n\tInclude_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"TERMINAL_MAPS\",\n\t}\n\tInclude_value = map[string]int32{\n\t\t\"UNKNOWN\":       0,\n\t\t\"TERMINAL_MAPS\": 1,\n\t}\n)\n\nfunc (x Include) Enum() *Include {\n\tp := new(Include)\n\t*p = x\n\treturn p\n}\n\nfunc (x Include) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (Include) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[0].Descriptor()\n}\n\nfunc (Include) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[0]\n}\n", "n_tokens": 201, "primary_symbol": "Enum", "primary_kind": "function", "primary_span": [43, 60], "def_symbols": ["Enum", "String", "Descriptor", "Type"], "symbols": ["Enum", "String", "Descriptor", "Type", "type", "Include", "int32", "const", "Include_UNKNOWN", "Include_TERMINAL_MAPS", "value", "maps", "for", "var", "Include_name", "map", "string", "UNKNOWN", "TERMINAL_MAPS", "Include_value", "func", "new", "return", "protoimpl", "EnumStringOf", "protoreflect", "EnumNumber", "EnumDescriptor", "file_airports_proto_enumTypes", "EnumType"], "doc_head": "type Include int32\nconst (\n\tInclude_UNKNOWN       Include = 0\n\tInclude_TERMINAL_MAPS Include = 1\n)\n// Enum value maps for Include.\nvar (\n\tInclude_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"TERMINAL_MAPS\",\n\t}\n\tInclude_value = map[string]int32{\n\t\t\"UNKNOWN\":       0,\n\t\t\"TERMINAL_MAPS\": 1,\n\t}\n)\nfunc (x Include) Enum() *Include {\n\tp := new(Include)\n\t*p = x\n\treturn p\n}\nfunc (x Include) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\nfunc (Include) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[0].Descriptor()\n}\nfunc (Include) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[0]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 61, "end_line": 88, "text": "func (x Include) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use Include.Descriptor instead.\nfunc (Include) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\n\ntype UploadImageRequest_ImageType int32\n\nconst (\n\tUploadImageRequest_UNKNOWN  UploadImageRequest_ImageType = 0\n\tUploadImageRequest_OVERVIEW UploadImageRequest_ImageType = 1\n)\n\n// Enum value maps for UploadImageRequest_ImageType.\nvar (\n\tUploadImageRequest_ImageType_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"OVERVIEW\",\n\t}\n\tUploadImageRequest_ImageType_value = map[string]int32{\n\t\t\"UNKNOWN\":  0,\n\t\t\"OVERVIEW\": 1,\n\t}\n)\n", "n_tokens": 180, "primary_symbol": "Number", "primary_kind": "function", "primary_span": [61, 88], "def_symbols": ["Number", "EnumDescriptor"], "symbols": ["Number", "EnumDescriptor", "func", "Include", "protoreflect", "EnumNumber", "return", "Deprecated", "Use", "Descriptor", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "type", "UploadImageRequest_ImageType", "int32", "const", "UploadImageRequest_UNKNOWN", "UploadImageRequest_OVERVIEW", "Enum", "value", "maps", "for", "var", "UploadImageRequest_ImageType_name", "map", "string", "UNKNOWN", "OVERVIEW", "UploadImageRequest_ImageType_value"], "doc_head": "func (x Include) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n// Deprecated: Use Include.Descriptor instead.\nfunc (Include) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\ntype UploadImageRequest_ImageType int32\nconst (\n\tUploadImageRequest_UNKNOWN  UploadImageRequest_ImageType = 0\n\tUploadImageRequest_OVERVIEW UploadImageRequest_ImageType = 1\n)\n// Enum value maps for UploadImageRequest_ImageType.\nvar (\n\tUploadImageRequest_ImageType_name = map[int32]string{\n\t\t0: \"UNKNOWN\",\n\t\t1: \"OVERVIEW\",\n\t}\n\tUploadImageRequest_ImageType_value = map[string]int32{\n\t\t\"UNKNOWN\":  0,\n\t\t\"OVERVIEW\": 1,\n\t}\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 89, "end_line": 115, "text": "func (x UploadImageRequest_ImageType) Enum() *UploadImageRequest_ImageType {\n\tp := new(UploadImageRequest_ImageType)\n\t*p = x\n\treturn p\n}\n\nfunc (x UploadImageRequest_ImageType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (UploadImageRequest_ImageType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[1].Descriptor()\n}\n\nfunc (UploadImageRequest_ImageType) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[1]\n}\n\nfunc (x UploadImageRequest_ImageType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use UploadImageRequest_ImageType.Descriptor instead.\nfunc (UploadImageRequest_ImageType) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}\n", "n_tokens": 202, "primary_symbol": "Enum", "primary_kind": "function", "primary_span": [89, 115], "def_symbols": ["Enum", "String", "Descriptor", "Type", "Number", "EnumDescriptor"], "symbols": ["Enum", "String", "Descriptor", "Type", "Number", "EnumDescriptor", "func", "UploadImageRequest_ImageType", "new", "return", "string", "protoimpl", "EnumStringOf", "protoreflect", "EnumNumber", "file_airports_proto_enumTypes", "EnumType", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x UploadImageRequest_ImageType) Enum() *UploadImageRequest_ImageType {\n\tp := new(UploadImageRequest_ImageType)\n\t*p = x\n\treturn p\n}\nfunc (x UploadImageRequest_ImageType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\nfunc (UploadImageRequest_ImageType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_airports_proto_enumTypes[1].Descriptor()\n}\nfunc (UploadImageRequest_ImageType) Type() protoreflect.EnumType {\n\treturn &file_airports_proto_enumTypes[1]\n}\nfunc (x UploadImageRequest_ImageType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n// Deprecated: Use UploadImageRequest_ImageType.Descriptor instead.\nfunc (UploadImageRequest_ImageType) EnumDescriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 116, "end_line": 139, "text": "type UpdateAirportRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string           `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string           `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64             `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName       map[string]string `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCityId          int64             `protobuf:\"varint,7,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tLatitude        float32           `protobuf:\"fixed32,9,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude       float32           `protobuf:\"fixed32,10,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation       int32             `protobuf:\"varint,11,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumberOfRunways int32             `protobuf:\"varint,12,opt,name=numberOfRunways,proto3\" json:\"numberOfRunways,omitempty\"`\n\tWebsiteUrl      *string           `protobuf:\"bytes,13,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,14,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl     *string           `protobuf:\"bytes,15,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl      *string           `protobuf:\"bytes,16,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tFaa             *string           `protobuf:\"bytes,17,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n}\n", "n_tokens": 584, "primary_symbol": "", "primary_kind": "", "primary_span": [116, 139], "def_symbols": [], "symbols": ["type", "UpdateAirportRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "CityId", "cityId", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumberOfRunways", "numberOfRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Faa", "faa"], "doc_head": "type UpdateAirportRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string           `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string           `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64             `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName       map[string]string `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCityId          int64             `protobuf:\"varint,7,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,na"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 140, "end_line": 164, "text": "func (x *UpdateAirportRequest) Reset() {\n\t*x = UpdateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateAirportRequest) ProtoMessage() {}\n\nfunc (x *UpdateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [140, 164], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateAirportRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateAirportRequest) Reset() {\n\t*x = UpdateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateAirportRequest) ProtoMessage() {}\nfunc (x *UpdateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 165, "end_line": 197, "text": "// Deprecated: Use UpdateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *UpdateAirportRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n", "n_tokens": 179, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [166, 197], "def_symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification"], "symbols": ["Descriptor", "GetId", "GetIata", "GetIcao", "GetClassification", "Deprecated", "Use", "UpdateAirportRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification"], "doc_head": "// Deprecated: Use UpdateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *UpdateAirportRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 198, "end_line": 239, "text": "func (x *UpdateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n", "n_tokens": 191, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [198, 239], "def_symbols": ["GetName", "GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude"], "symbols": ["GetName", "GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude", "func", "UpdateAirportRequest", "map", "string", "nil", "return", "Name", "ShortName", "int64", "CityId", "Description", "float32", "Latitude", "Longitude"], "doc_head": "func (x *UpdateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 240, "end_line": 274, "text": "func (x *UpdateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 182, "primary_symbol": "GetElevation", "primary_kind": "function", "primary_span": [240, 274], "def_symbols": ["GetElevation", "GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl"], "symbols": ["GetElevation", "GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "func", "UpdateAirportRequest", "int32", "nil", "return", "Elevation", "NumberOfRunways", "string", "WebsiteUrl", "map", "WikipediaUrl", "FacebookUrl"], "doc_head": "func (x *UpdateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\nfunc (x *UpdateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *UpdateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 275, "end_line": 307, "text": "func (x *UpdateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n\ntype UpdateAirportResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\n\nfunc (x *UpdateAirportResponse) Reset() {\n\t*x = UpdateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 202, "primary_symbol": "GetTwitterUrl", "primary_kind": "function", "primary_span": [275, 307], "def_symbols": ["GetTwitterUrl", "GetFaa", "Reset", "String"], "symbols": ["GetTwitterUrl", "GetFaa", "Reset", "String", "func", "UpdateAirportRequest", "string", "nil", "TwitterUrl", "return", "Faa", "type", "UpdateAirportResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *UpdateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\ntype UpdateAirportResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\nfunc (x *UpdateAirportResponse) Reset() {\n\t*x = UpdateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 308, "end_line": 333, "text": "func (*UpdateAirportResponse) ProtoMessage() {}\n\nfunc (x *UpdateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *UpdateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 168, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [308, 333], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport", "func", "UpdateAirportResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (*UpdateAirportResponse) ProtoMessage() {}\nfunc (x *UpdateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *UpdateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 334, "end_line": 356, "text": "type CreateAirportRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tIata            *string           `protobuf:\"bytes,1,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string           `protobuf:\"bytes,2,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64             `protobuf:\"varint,3,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string `protobuf:\"bytes,4,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName       map[string]string `protobuf:\"bytes,5,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCityId          int64             `protobuf:\"varint,6,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,7,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tLatitude        float32           `protobuf:\"fixed32,8,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude       float32           `protobuf:\"fixed32,9,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation       int32             `protobuf:\"varint,10,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumberOfRunways int32             `protobuf:\"varint,11,opt,name=numberOfRunways,proto3\" json:\"numberOfRunways,omitempty\"`\n\tWebsiteUrl      *string           `protobuf:\"bytes,12,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,13,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl     *string           `protobuf:\"bytes,14,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl      *string           `protobuf:\"bytes,15,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tFaa             *string           `protobuf:\"bytes,16,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n}\n", "n_tokens": 563, "primary_symbol": "", "primary_kind": "", "primary_span": [334, 356], "def_symbols": [], "symbols": ["type", "CreateAirportRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Iata", "string", "protobuf", "bytes", "opt", "name", "iata", "proto3", "oneof", "json", "omitempty", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "CityId", "cityId", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumberOfRunways", "numberOfRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Faa", "faa"], "doc_head": "type CreateAirportRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tIata            *string           `protobuf:\"bytes,1,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string           `protobuf:\"bytes,2,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64             `protobuf:\"varint,3,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string `protobuf:\"bytes,4,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName       map[string]string `protobuf:\"bytes,5,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCityId          int64             `protobuf:\"varint,6,opt,name=cityId,proto3\" json:\"cityId,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,7,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tLatitude        float32          "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 357, "end_line": 381, "text": "func (x *CreateAirportRequest) Reset() {\n\t*x = CreateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirportRequest) ProtoMessage() {}\n\nfunc (x *CreateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [357, 381], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateAirportRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateAirportRequest) Reset() {\n\t*x = CreateAirportRequest{}\n\tmi := &file_airports_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirportRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirportRequest) ProtoMessage() {}\nfunc (x *CreateAirportRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 382, "end_line": 414, "text": "// Deprecated: Use CreateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *CreateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 181, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [383, 414], "def_symbols": ["Descriptor", "GetIata", "GetIcao", "GetClassification", "GetName"], "symbols": ["Descriptor", "GetIata", "GetIcao", "GetClassification", "GetName", "Deprecated", "Use", "CreateAirportRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "Iata", "Icao", "int64", "Classification", "map", "Name"], "doc_head": "// Deprecated: Use CreateAirportRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{2}\n}\nfunc (x *CreateAirportRequest) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 415, "end_line": 456, "text": "func (x *CreateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n", "n_tokens": 194, "primary_symbol": "GetShortName", "primary_kind": "function", "primary_span": [415, 456], "def_symbols": ["GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation"], "symbols": ["GetShortName", "GetCityId", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "func", "CreateAirportRequest", "map", "string", "nil", "return", "ShortName", "int64", "CityId", "Description", "float32", "Latitude", "Longitude", "int32", "Elevation"], "doc_head": "func (x *CreateAirportRequest) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\nfunc (x *CreateAirportRequest) GetCityId() int64 {\n\tif x != nil {\n\t\treturn x.CityId\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *CreateAirportRequest) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 457, "end_line": 491, "text": "func (x *CreateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\n\nfunc (x *CreateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *CreateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 188, "primary_symbol": "GetNumberOfRunways", "primary_kind": "function", "primary_span": [457, 491], "def_symbols": ["GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl"], "symbols": ["GetNumberOfRunways", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "func", "CreateAirportRequest", "int32", "nil", "return", "NumberOfRunways", "string", "WebsiteUrl", "map", "WikipediaUrl", "FacebookUrl", "TwitterUrl"], "doc_head": "func (x *CreateAirportRequest) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\nfunc (x *CreateAirportRequest) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *CreateAirportRequest) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *CreateAirportRequest) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 492, "end_line": 519, "text": "func (x *CreateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n\ntype CreateAirportResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\n\nfunc (x *CreateAirportResponse) Reset() {\n\t*x = CreateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateAirportResponse) ProtoMessage() {}\n", "n_tokens": 173, "primary_symbol": "GetFaa", "primary_kind": "function", "primary_span": [492, 519], "def_symbols": ["GetFaa", "Reset", "String", "ProtoMessage"], "symbols": ["GetFaa", "Reset", "String", "ProtoMessage", "func", "CreateAirportRequest", "string", "nil", "Faa", "return", "type", "CreateAirportResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *CreateAirportRequest) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\ntype CreateAirportResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\nfunc (x *CreateAirportResponse) Reset() {\n\t*x = CreateAirportResponse{}\n\tmi := &file_airports_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateAirportResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateAirportResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 520, "end_line": 543, "text": "func (x *CreateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *CreateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [520, 543], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["ProtoReflect", "Descriptor", "GetAirport", "func", "CreateAirportResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (x *CreateAirportResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateAirportResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateAirportResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{3}\n}\nfunc (x *CreateAirportResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 544, "end_line": 565, "text": "type AirportDetailsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId      string    `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tInclude []Include `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\n\nfunc (x *AirportDetailsRequest) Reset() {\n\t*x = AirportDetailsRequest{}\n\tmi := &file_airports_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirportDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirportDetailsRequest) ProtoMessage() {}\n", "n_tokens": 170, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [553, 565], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirportDetailsRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Include", "varint", "rep", "packed", "include", "enum", "aviation", "airports", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type AirportDetailsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId      string    `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tInclude []Include `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\nfunc (x *AirportDetailsRequest) Reset() {\n\t*x = AirportDetailsRequest{}\n\tmi := &file_airports_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirportDetailsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirportDetailsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 566, "end_line": 596, "text": "func (x *AirportDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirportDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *AirportDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *AirportDetailsRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [566, 596], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetInclude"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetInclude", "func", "AirportDetailsRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Include"], "doc_head": "func (x *AirportDetailsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirportDetailsRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{4}\n}\nfunc (x *AirportDetailsRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *AirportDetailsRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 597, "end_line": 617, "text": "type AirportDetailsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\n\nfunc (x *AirportDetailsResponse) Reset() {\n\t*x = AirportDetailsResponse{}\n\tmi := &file_airports_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirportDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirportDetailsResponse) ProtoMessage() {}\n", "n_tokens": 136, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [605, 617], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirportDetailsResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AirportDetailsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\nfunc (x *AirportDetailsResponse) Reset() {\n\t*x = AirportDetailsResponse{}\n\tmi := &file_airports_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirportDetailsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirportDetailsResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 618, "end_line": 641, "text": "func (x *AirportDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirportDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *AirportDetailsResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 158, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [618, 641], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["ProtoReflect", "Descriptor", "GetAirport", "func", "AirportDetailsResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (x *AirportDetailsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirportDetailsResponse.ProtoReflect.Descriptor instead.\nfunc (*AirportDetailsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{5}\n}\nfunc (x *AirportDetailsResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 642, "end_line": 663, "text": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tIds     []string  `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n\tInclude []Include `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\n\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airports_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetRequest) ProtoMessage() {}\n", "n_tokens": 174, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [651, 663], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Ids", "string", "protobuf", "bytes", "rep", "name", "ids", "proto3", "json", "omitempty", "Include", "varint", "packed", "include", "enum", "aviation", "airports", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tIds     []string  `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n\tInclude []Include `protobuf:\"varint,2,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\nfunc (x *BatchGetRequest) Reset() {\n\t*x = BatchGetRequest{}\n\tmi := &file_airports_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#24", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 664, "end_line": 694, "text": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{6}\n}\n\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\n\nfunc (x *BatchGetRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [664, 694], "def_symbols": ["ProtoReflect", "Descriptor", "GetIds", "GetInclude"], "symbols": ["ProtoReflect", "Descriptor", "GetIds", "GetInclude", "func", "BatchGetRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Ids", "Include"], "doc_head": "func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{6}\n}\nfunc (x *BatchGetRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\nfunc (x *BatchGetRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#25", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 695, "end_line": 715, "text": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirports []*Airport `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n}\n\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airports_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetResponse) ProtoMessage() {}\n", "n_tokens": 139, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [703, 715], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airports", "Airport", "protobuf", "bytes", "rep", "name", "airports", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type BatchGetResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirports []*Airport `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n}\nfunc (x *BatchGetResponse) Reset() {\n\t*x = BatchGetResponse{}\n\tmi := &file_airports_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#26", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 716, "end_line": 739, "text": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{7}\n}\n\nfunc (x *BatchGetResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}\n", "n_tokens": 159, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [716, 739], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirports"], "symbols": ["ProtoReflect", "Descriptor", "GetAirports", "func", "BatchGetResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport", "Airports"], "doc_head": "func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{7}\n}\nfunc (x *BatchGetResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#27", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 740, "end_line": 760, "text": "type AirportByCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId int64 `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *AirportByCityRequest) Reset() {\n\t*x = AirportByCityRequest{}\n\tmi := &file_airports_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *AirportByCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*AirportByCityRequest) ProtoMessage() {}\n", "n_tokens": 139, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [748, 760], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "AirportByCityRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type AirportByCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId int64 `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *AirportByCityRequest) Reset() {\n\t*x = AirportByCityRequest{}\n\tmi := &file_airports_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *AirportByCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*AirportByCityRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#28", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 761, "end_line": 784, "text": "func (x *AirportByCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use AirportByCityRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportByCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *AirportByCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n", "n_tokens": 161, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [761, 784], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "AirportByCityRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "int64"], "doc_head": "func (x *AirportByCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use AirportByCityRequest.ProtoReflect.Descriptor instead.\nfunc (*AirportByCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{8}\n}\nfunc (x *AirportByCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#29", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 785, "end_line": 814, "text": "type Airport struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId              string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName       map[string]string      `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCity            *Airport_City          `protobuf:\"bytes,7,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tLatitude        float32                `protobuf:\"fixed32,9,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude       float32                `protobuf:\"fixed32,10,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation       int32                  `protobuf:\"varint,11,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumberOfRunways int32                  `protobuf:\"varint,12,opt,name=numberOfRunways,proto3\" json:\"numberOfRunways,omitempty\"`\n\tWebsiteUrl      *string                `protobuf:\"bytes,13,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl    map[string]string      `protobuf:\"bytes,14,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl     *string                `protobuf:\"bytes,15,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl      *string                `protobuf:\"bytes,16,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tImages          map[string]string      `protobuf:\"bytes,17,rep,name=images,proto3\" json:\"images,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tTerminalMaps    []*Airport_TerminalMap `protobuf:\"bytes,18,rep,name=terminalMaps,proto3\" json:\"terminalMaps,omitempty\"`\n\tCreatedAt       *timestamppb.Timestamp `protobuf:\"bytes,19,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt       *timestamppb.Timestamp `protobuf:\"bytes,20,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tDesignator      *string                `protobuf:\"bytes,21,opt,name=designator,proto3,oneof\" json:\"designator,omitempty\"`\n\tPristine        bool                   `protobuf:\"varint,22,opt,name=pristine,proto3\" json:\"pristine,omitempty\"`\n\tFaa             *string                `protobuf:\"bytes,23,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n}\n", "n_tokens": 777, "primary_symbol": "", "primary_kind": "", "primary_span": [785, 814], "def_symbols": [], "symbols": ["type", "Airport", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Iata", "iata", "oneof", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "City", "Airport_City", "city", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumberOfRunways", "numberOfRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Images", "images", "TerminalMaps", "Airport_TerminalMap", "terminalMaps", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt", "Designator", "designator", "Pristine", "bool", "pristine", "Faa", "faa"], "doc_head": "type Airport struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId              string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tIata            *string                `protobuf:\"bytes,2,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao            *string                `protobuf:\"bytes,3,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification  int64                  `protobuf:\"varint,4,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName            map[string]string      `protobuf:\"bytes,5,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName       map[string]string      `protobuf:\"bytes,6,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCity            *Airport_City          `protobuf:\"bytes,7,opt,name=city,proto3\" json:\"city,omitempty\"`\n\tDescription     map[string]string      `protobuf:\"bytes,8,rep,name=description,proto3\" json:\"description,omitempty\" protob"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#30", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 815, "end_line": 844, "text": "func (x *Airport) Reset() {\n\t*x = Airport{}\n\tmi := &file_airports_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport) ProtoMessage() {}\n\nfunc (x *Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Airport.ProtoReflect.Descriptor instead.\nfunc (*Airport) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [815, 844], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Airport", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *Airport) Reset() {\n\t*x = Airport{}\n\tmi := &file_airports_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport) ProtoMessage() {}\nfunc (x *Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Airport.ProtoReflect.Descriptor instead.\nfunc (*Airport) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#31", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 845, "end_line": 886, "text": "func (x *Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n", "n_tokens": 185, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [845, 886], "def_symbols": ["GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "GetShortName"], "symbols": ["GetId", "GetIata", "GetIcao", "GetClassification", "GetName", "GetShortName", "func", "Airport", "string", "nil", "return", "Iata", "Icao", "int64", "Classification", "map", "Name", "ShortName"], "doc_head": "func (x *Airport) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#32", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 887, "end_line": 928, "text": "func (x *Airport) GetCity() *Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}\n", "n_tokens": 184, "primary_symbol": "GetCity", "primary_kind": "function", "primary_span": [887, 928], "def_symbols": ["GetCity", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "GetNumberOfRunways"], "symbols": ["GetCity", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "GetNumberOfRunways", "func", "Airport", "Airport_City", "nil", "return", "City", "map", "string", "Description", "float32", "Latitude", "Longitude", "int32", "Elevation", "NumberOfRunways"], "doc_head": "func (x *Airport) GetCity() *Airport_City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetNumberOfRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumberOfRunways\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#33", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 929, "end_line": 970, "text": "func (x *Airport) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetImages() map[string]string {\n\tif x != nil {\n\t\treturn x.Images\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetTerminalMaps() []*Airport_TerminalMap {\n\tif x != nil {\n\t\treturn x.TerminalMaps\n\t}\n\treturn nil\n}\n", "n_tokens": 208, "primary_symbol": "GetWebsiteUrl", "primary_kind": "function", "primary_span": [929, 970], "def_symbols": ["GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "GetImages", "GetTerminalMaps"], "symbols": ["GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "GetImages", "GetTerminalMaps", "func", "Airport", "string", "nil", "WebsiteUrl", "return", "map", "WikipediaUrl", "FacebookUrl", "TwitterUrl", "Images", "Airport_TerminalMap", "TerminalMaps"], "doc_head": "func (x *Airport) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetImages() map[string]string {\n\tif x != nil {\n\t\treturn x.Images\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetTerminalMaps() []*Airport_TerminalMap {\n\tif x != nil {\n\t\treturn x.TerminalMaps\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#34", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 971, "end_line": 1005, "text": "func (x *Airport) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\n\nfunc (x *Airport) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n", "n_tokens": 167, "primary_symbol": "GetCreatedAt", "primary_kind": "function", "primary_span": [971, 1005], "def_symbols": ["GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine", "GetFaa"], "symbols": ["GetCreatedAt", "GetUpdatedAt", "GetDesignator", "GetPristine", "GetFaa", "func", "Airport", "timestamppb", "Timestamp", "nil", "return", "CreatedAt", "UpdatedAt", "string", "Designator", "bool", "Pristine", "false", "Faa"], "doc_head": "func (x *Airport) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetDesignator() string {\n\tif x != nil && x.Designator != nil {\n\t\treturn *x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetPristine() bool {\n\tif x != nil {\n\t\treturn x.Pristine\n\t}\n\treturn false\n}\nfunc (x *Airport) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#35", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 1006, "end_line": 1030, "text": "type UploadImageRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\t// Types that are assignable to Data:\n\t//\n\t//\t*UploadImageRequest_Metadata_\n\t//\t*UploadImageRequest_Chunk\n\tData isUploadImageRequest_Data `protobuf_oneof:\"data\"`\n}\n\nfunc (x *UploadImageRequest) Reset() {\n\t*x = UploadImageRequest{}\n\tmi := &file_airports_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageRequest) ProtoMessage() {}\n", "n_tokens": 156, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1018, 1030], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UploadImageRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Types", "that", "are", "assignable", "Data", "UploadImageRequest_Metadata_", "UploadImageRequest_Chunk", "isUploadImageRequest_Data", "protobuf_oneof", "data", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UploadImageRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\t// Types that are assignable to Data:\n\t//\n\t//\t*UploadImageRequest_Metadata_\n\t//\t*UploadImageRequest_Chunk\n\tData isUploadImageRequest_Data `protobuf_oneof:\"data\"`\n}\nfunc (x *UploadImageRequest) Reset() {\n\t*x = UploadImageRequest{}\n\tmi := &file_airports_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#36", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 1031, "end_line": 1061, "text": "func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10}\n}\n\nfunc (m *UploadImageRequest) GetData() isUploadImageRequest_Data {\n\tif m != nil {\n\t\treturn m.Data\n\t}\n\treturn nil\n}\n\nfunc (x *UploadImageRequest) GetMetadata() *UploadImageRequest_Metadata {\n\tif x, ok := x.GetData().(*UploadImageRequest_Metadata_); ok {\n\t\treturn x.Metadata\n\t}\n\treturn nil\n}\n", "n_tokens": 203, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1031, 1061], "def_symbols": ["ProtoReflect", "Descriptor", "GetData", "GetMetadata"], "symbols": ["ProtoReflect", "Descriptor", "GetData", "GetMetadata", "func", "UploadImageRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "isUploadImageRequest_Data", "Data", "UploadImageRequest_Metadata", "UploadImageRequest_Metadata_", "Metadata"], "doc_head": "func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10}\n}\nfunc (m *UploadImageRequest) GetData() isUploadImageRequest_Data {\n\tif m != nil {\n\t\treturn m.Data\n\t}\n\treturn nil\n}\nfunc (x *UploadImageRequest) GetMetadata() *UploadImageRequest_Metadata {\n\tif x, ok := x.GetData().(*UploadImageRequest_Metadata_); ok {\n\t\treturn x.Metadata\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#37", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 1062, "end_line": 1084, "text": "func (x *UploadImageRequest) GetChunk() []byte {\n\tif x, ok := x.GetData().(*UploadImageRequest_Chunk); ok {\n\t\treturn x.Chunk\n\t}\n\treturn nil\n}\n\ntype isUploadImageRequest_Data interface {\n\tisUploadImageRequest_Data()\n}\n\ntype UploadImageRequest_Metadata_ struct {\n\tMetadata *UploadImageRequest_Metadata `protobuf:\"bytes,1,opt,name=metadata,proto3,oneof\"`\n}\n\ntype UploadImageRequest_Chunk struct {\n\tChunk []byte `protobuf:\"bytes,2,opt,name=chunk,proto3,oneof\"`\n}\n\nfunc (*UploadImageRequest_Metadata_) isUploadImageRequest_Data() {}\n\nfunc (*UploadImageRequest_Chunk) isUploadImageRequest_Data() {}\n", "n_tokens": 148, "primary_symbol": "GetChunk", "primary_kind": "function", "primary_span": [1062, 1084], "def_symbols": ["GetChunk", "isUploadImageRequest_Data"], "symbols": ["GetChunk", "isUploadImageRequest_Data", "func", "UploadImageRequest", "byte", "GetData", "UploadImageRequest_Chunk", "return", "Chunk", "nil", "type", "interface", "UploadImageRequest_Metadata_", "struct", "Metadata", "UploadImageRequest_Metadata", "protobuf", "bytes", "opt", "name", "metadata", "proto3", "oneof", "chunk"], "doc_head": "func (x *UploadImageRequest) GetChunk() []byte {\n\tif x, ok := x.GetData().(*UploadImageRequest_Chunk); ok {\n\t\treturn x.Chunk\n\t}\n\treturn nil\n}\ntype isUploadImageRequest_Data interface {\n\tisUploadImageRequest_Data()\n}\ntype UploadImageRequest_Metadata_ struct {\n\tMetadata *UploadImageRequest_Metadata `protobuf:\"bytes,1,opt,name=metadata,proto3,oneof\"`\n}\ntype UploadImageRequest_Chunk struct {\n\tChunk []byte `protobuf:\"bytes,2,opt,name=chunk,proto3,oneof\"`\n}\nfunc (*UploadImageRequest_Metadata_) isUploadImageRequest_Data() {}\nfunc (*UploadImageRequest_Chunk) isUploadImageRequest_Data() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#38", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 1085, "end_line": 1102, "text": "type SearchAirportsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tQ                        string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit                    uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor                   *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tIncludeWithoutDesignator bool    `protobuf:\"varint,4,opt,name=includeWithoutDesignator,proto3\" json:\"includeWithoutDesignator,omitempty\"`\n}\n\nfunc (x *SearchAirportsRequest) Reset() {\n\t*x = SearchAirportsRequest{}\n\tmi := &file_airports_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 188, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1096, 1102], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "SearchAirportsRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "IncludeWithoutDesignator", "bool", "includeWithoutDesignator", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type SearchAirportsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tQ                        string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit                    uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor                   *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n\tIncludeWithoutDesignator bool    `protobuf:\"varint,4,opt,name=includeWithoutDesignator,proto3\" json:\"includeWithoutDesignator,omitempty\"`\n}\nfunc (x *SearchAirportsRequest) Reset() {\n\t*x = SearchAirportsRequest{}\n\tmi := &file_airports_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#39", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 1103, "end_line": 1132, "text": "func (x *SearchAirportsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirportsRequest) ProtoMessage() {}\n\nfunc (x *SearchAirportsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchAirportsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{11}\n}\n\nfunc (x *SearchAirportsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n", "n_tokens": 192, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1103, 1132], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetQ"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetQ", "func", "SearchAirportsRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *SearchAirportsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirportsRequest) ProtoMessage() {}\nfunc (x *SearchAirportsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchAirportsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{11}\n}\nfunc (x *SearchAirportsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#40", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 1133, "end_line": 1153, "text": "func (x *SearchAirportsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n\nfunc (x *SearchAirportsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsRequest) GetIncludeWithoutDesignator() bool {\n\tif x != nil {\n\t\treturn x.IncludeWithoutDesignator\n\t}\n\treturn false\n}\n", "n_tokens": 104, "primary_symbol": "GetLimit", "primary_kind": "function", "primary_span": [1133, 1153], "def_symbols": ["GetLimit", "GetCursor", "GetIncludeWithoutDesignator"], "symbols": ["GetLimit", "GetCursor", "GetIncludeWithoutDesignator", "func", "SearchAirportsRequest", "uint32", "nil", "return", "Limit", "string", "Cursor", "bool", "IncludeWithoutDesignator", "false"], "doc_head": "func (x *SearchAirportsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\nfunc (x *SearchAirportsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsRequest) GetIncludeWithoutDesignator() bool {\n\tif x != nil {\n\t\treturn x.IncludeWithoutDesignator\n\t}\n\treturn false\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#41", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 1154, "end_line": 1171, "text": "type SearchAirportsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tResult     []*Airport `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext       *string    `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious   *string    `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tTotalCount uint32     `protobuf:\"varint,4,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n}\n\nfunc (x *SearchAirportsResponse) Reset() {\n\t*x = SearchAirportsResponse{}\n\tmi := &file_airports_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 185, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1165, 1171], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "SearchAirportsResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Result", "Airport", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "string", "opt", "next", "oneof", "Previous", "previous", "TotalCount", "uint32", "varint", "totalCount", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type SearchAirportsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tResult     []*Airport `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext       *string    `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious   *string    `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n\tTotalCount uint32     `protobuf:\"varint,4,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n}\nfunc (x *SearchAirportsResponse) Reset() {\n\t*x = SearchAirportsResponse{}\n\tmi := &file_airports_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#42", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 1172, "end_line": 1201, "text": "func (x *SearchAirportsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchAirportsResponse) ProtoMessage() {}\n\nfunc (x *SearchAirportsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchAirportsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{12}\n}\n\nfunc (x *SearchAirportsResponse) GetResult() []*Airport {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 194, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1172, 1201], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchAirportsResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport", "Result"], "doc_head": "func (x *SearchAirportsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchAirportsResponse) ProtoMessage() {}\nfunc (x *SearchAirportsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchAirportsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchAirportsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{12}\n}\nfunc (x *SearchAirportsResponse) GetResult() []*Airport {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#43", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1202, "end_line": 1232, "text": "func (x *SearchAirportsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchAirportsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\n\ntype SearchCitiesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\n", "n_tokens": 207, "primary_symbol": "GetNext", "primary_kind": "function", "primary_span": [1202, 1232], "def_symbols": ["GetNext", "GetPrevious", "GetTotalCount"], "symbols": ["GetNext", "GetPrevious", "GetTotalCount", "func", "SearchAirportsResponse", "string", "nil", "Next", "return", "Previous", "uint32", "TotalCount", "type", "SearchCitiesRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "varint", "limit", "Cursor", "cursor", "oneof"], "doc_head": "func (x *SearchAirportsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\nfunc (x *SearchAirportsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\ntype SearchCitiesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#44", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1233, "end_line": 1257, "text": "func (x *SearchCitiesRequest) Reset() {\n\t*x = SearchCitiesRequest{}\n\tmi := &file_airports_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchCitiesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCitiesRequest) ProtoMessage() {}\n\nfunc (x *SearchCitiesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1233, 1257], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchCitiesRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchCitiesRequest) Reset() {\n\t*x = SearchCitiesRequest{}\n\tmi := &file_airports_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchCitiesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCitiesRequest) ProtoMessage() {}\nfunc (x *SearchCitiesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#45", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1258, "end_line": 1283, "text": "// Deprecated: Use SearchCitiesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{13}\n}\n\nfunc (x *SearchCitiesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCitiesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n\nfunc (x *SearchCitiesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n", "n_tokens": 139, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1259, 1283], "def_symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor"], "symbols": ["Descriptor", "GetQ", "GetLimit", "GetCursor", "Deprecated", "Use", "SearchCitiesRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "uint32", "Limit", "Cursor"], "doc_head": "// Deprecated: Use SearchCitiesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{13}\n}\nfunc (x *SearchCitiesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCitiesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\nfunc (x *SearchCitiesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#46", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 1284, "end_line": 1306, "text": "type SearchCitiesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tResult   []*City `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext     *string `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious *string `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\n\nfunc (x *SearchCitiesResponse) Reset() {\n\t*x = SearchCitiesResponse{}\n\tmi := &file_airports_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchCitiesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCitiesResponse) ProtoMessage() {}\n", "n_tokens": 186, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1294, 1306], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchCitiesResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Result", "City", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "string", "opt", "next", "oneof", "Previous", "previous", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchCitiesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tResult   []*City `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext     *string `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious *string `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\nfunc (x *SearchCitiesResponse) Reset() {\n\t*x = SearchCitiesResponse{}\n\tmi := &file_airports_proto_msgTypes[14]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchCitiesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCitiesResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#47", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 1307, "end_line": 1337, "text": "func (x *SearchCitiesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCitiesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{14}\n}\n\nfunc (x *SearchCitiesResponse) GetResult() []*City {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n\nfunc (x *SearchCitiesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n", "n_tokens": 190, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1307, 1337], "def_symbols": ["ProtoReflect", "Descriptor", "GetResult", "GetNext"], "symbols": ["ProtoReflect", "Descriptor", "GetResult", "GetNext", "func", "SearchCitiesResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City", "Result", "string", "Next"], "doc_head": "func (x *SearchCitiesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[14]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCitiesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCitiesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{14}\n}\nfunc (x *SearchCitiesResponse) GetResult() []*City {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\nfunc (x *SearchCitiesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#48", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 1338, "end_line": 1365, "text": "func (x *SearchCitiesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\ntype GetCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId int64 `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *GetCityRequest) Reset() {\n\t*x = GetCityRequest{}\n\tmi := &file_airports_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetCityRequest) ProtoMessage() {}\n", "n_tokens": 170, "primary_symbol": "GetPrevious", "primary_kind": "function", "primary_span": [1338, 1365], "def_symbols": ["GetPrevious", "Reset", "String", "ProtoMessage"], "symbols": ["GetPrevious", "Reset", "String", "ProtoMessage", "func", "SearchCitiesResponse", "string", "nil", "Previous", "return", "type", "GetCityRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *SearchCitiesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\ntype GetCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId int64 `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *GetCityRequest) Reset() {\n\t*x = GetCityRequest{}\n\tmi := &file_airports_proto_msgTypes[15]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetCityRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#49", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 49, "start_line": 1366, "end_line": 1389, "text": "func (x *GetCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCityRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{15}\n}\n\nfunc (x *GetCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n", "n_tokens": 157, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1366, 1389], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "GetCityRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "int64"], "doc_head": "func (x *GetCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[15]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCityRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{15}\n}\nfunc (x *GetCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#50", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 50, "start_line": 1390, "end_line": 1410, "text": "type GetCityResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCity *City `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\n\nfunc (x *GetCityResponse) Reset() {\n\t*x = GetCityResponse{}\n\tmi := &file_airports_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetCityResponse) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1398, 1410], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetCityResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "City", "protobuf", "bytes", "opt", "name", "city", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetCityResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCity *City `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\nfunc (x *GetCityResponse) Reset() {\n\t*x = GetCityResponse{}\n\tmi := &file_airports_proto_msgTypes[16]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetCityResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#51", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 51, "start_line": 1411, "end_line": 1434, "text": "func (x *GetCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCityResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{16}\n}\n\nfunc (x *GetCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1411, 1434], "def_symbols": ["ProtoReflect", "Descriptor", "GetCity"], "symbols": ["ProtoReflect", "Descriptor", "GetCity", "func", "GetCityResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City"], "doc_head": "func (x *GetCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[16]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCityResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{16}\n}\nfunc (x *GetCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#52", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 52, "start_line": 1435, "end_line": 1452, "text": "type CreateCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tName      map[string]string `protobuf:\"bytes,1,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState     *string           `protobuf:\"bytes,2,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone  string            `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId string            `protobuf:\"bytes,4,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n}\n\nfunc (x *CreateCityRequest) Reset() {\n\t*x = CreateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 202, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1446, 1452], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "CreateCityRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Name", "map", "string", "protobuf", "bytes", "rep", "name", "proto3", "json", "omitempty", "protobuf_key", "opt", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "CountryId", "countryId", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type CreateCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tName      map[string]string `protobuf:\"bytes,1,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState     *string           `protobuf:\"bytes,2,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone  string            `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId string            `protobuf:\"bytes,4,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n}\nfunc (x *CreateCityRequest) Reset() {\n\t*x = CreateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[17]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#53", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 53, "start_line": 1453, "end_line": 1482, "text": "func (x *CreateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCityRequest) ProtoMessage() {}\n\nfunc (x *CreateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{17}\n}\n\nfunc (x *CreateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1453, 1482], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetName"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetName", "func", "CreateCityRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "map", "Name"], "doc_head": "func (x *CreateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCityRequest) ProtoMessage() {}\nfunc (x *CreateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[17]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{17}\n}\nfunc (x *CreateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#54", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 54, "start_line": 1483, "end_line": 1518, "text": "func (x *CreateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}\n\ntype CreateCityResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCity *City `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\n\nfunc (x *CreateCityResponse) Reset() {\n\t*x = CreateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 197, "primary_symbol": "GetState", "primary_kind": "function", "primary_span": [1483, 1518], "def_symbols": ["GetState", "GetTimezone", "GetCountryId", "Reset"], "symbols": ["GetState", "GetTimezone", "GetCountryId", "Reset", "func", "CreateCityRequest", "string", "nil", "State", "return", "Timezone", "CountryId", "type", "CreateCityResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "City", "protobuf", "bytes", "opt", "name", "city", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *CreateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *CreateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *CreateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}\ntype CreateCityResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCity *City `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\nfunc (x *CreateCityResponse) Reset() {\n\t*x = CreateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[18]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#55", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 55, "start_line": 1519, "end_line": 1548, "text": "func (x *CreateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCityResponse) ProtoMessage() {}\n\nfunc (x *CreateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{18}\n}\n\nfunc (x *CreateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1519, 1548], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCity"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCity", "func", "CreateCityResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City"], "doc_head": "func (x *CreateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCityResponse) ProtoMessage() {}\nfunc (x *CreateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[18]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{18}\n}\nfunc (x *CreateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#56", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 56, "start_line": 1549, "end_line": 1560, "text": "type UpdateCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId        int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName      map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState     *string           `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone  string            `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId string            `protobuf:\"bytes,5,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n}\n", "n_tokens": 174, "primary_symbol": "", "primary_kind": "", "primary_span": [1549, 1560], "def_symbols": [], "symbols": ["type", "UpdateCityRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "CountryId", "countryId"], "doc_head": "type UpdateCityRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId        int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName      map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState     *string           `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone  string            `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountryId string            `protobuf:\"bytes,5,opt,name=countryId,proto3\" json:\"countryId,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#57", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 57, "start_line": 1561, "end_line": 1585, "text": "func (x *UpdateCityRequest) Reset() {\n\t*x = UpdateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCityRequest) ProtoMessage() {}\n\nfunc (x *UpdateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1561, 1585], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateCityRequest", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateCityRequest) Reset() {\n\t*x = UpdateCityRequest{}\n\tmi := &file_airports_proto_msgTypes[19]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCityRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCityRequest) ProtoMessage() {}\nfunc (x *UpdateCityRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[19]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#58", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 58, "start_line": 1586, "end_line": 1625, "text": "// Deprecated: Use UpdateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{19}\n}\n\nfunc (x *UpdateCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *UpdateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 200, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [1587, 1625], "def_symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountryId"], "symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountryId", "Deprecated", "Use", "UpdateCityRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "State", "Timezone", "CountryId"], "doc_head": "// Deprecated: Use UpdateCityRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{19}\n}\nfunc (x *UpdateCityRequest) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *UpdateCityRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *UpdateCityRequest) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateCityRequest) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateCityRequest) GetCountryId() string {\n\tif x != nil {\n\t\treturn x.CountryId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#59", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 59, "start_line": 1626, "end_line": 1646, "text": "type UpdateCityResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCity *City `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\n\nfunc (x *UpdateCityResponse) Reset() {\n\t*x = UpdateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCityResponse) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1634, 1646], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateCityResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "City", "protobuf", "bytes", "opt", "name", "city", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateCityResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCity *City `protobuf:\"bytes,1,opt,name=city,proto3\" json:\"city,omitempty\"`\n}\nfunc (x *UpdateCityResponse) Reset() {\n\t*x = UpdateCityResponse{}\n\tmi := &file_airports_proto_msgTypes[20]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCityResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCityResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#60", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 60, "start_line": 1647, "end_line": 1670, "text": "func (x *UpdateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{20}\n}\n\nfunc (x *UpdateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1647, 1670], "def_symbols": ["ProtoReflect", "Descriptor", "GetCity"], "symbols": ["ProtoReflect", "Descriptor", "GetCity", "func", "UpdateCityResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "City"], "doc_head": "func (x *UpdateCityResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[20]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateCityResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCityResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{20}\n}\nfunc (x *UpdateCityResponse) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#61", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 61, "start_line": 1671, "end_line": 1693, "text": "type SearchCountriesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\n\nfunc (x *SearchCountriesRequest) Reset() {\n\t*x = SearchCountriesRequest{}\n\tmi := &file_airports_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchCountriesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCountriesRequest) ProtoMessage() {}\n", "n_tokens": 184, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1681, 1693], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchCountriesRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchCountriesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\nfunc (x *SearchCountriesRequest) Reset() {\n\t*x = SearchCountriesRequest{}\n\tmi := &file_airports_proto_msgTypes[21]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchCountriesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCountriesRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#62", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 62, "start_line": 1694, "end_line": 1724, "text": "func (x *SearchCountriesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCountriesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{21}\n}\n\nfunc (x *SearchCountriesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCountriesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1694, 1724], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchCountriesRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchCountriesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[21]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCountriesRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{21}\n}\nfunc (x *SearchCountriesRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCountriesRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#63", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 63, "start_line": 1725, "end_line": 1748, "text": "func (x *SearchCountriesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchCountriesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tResult   []*Country `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext     *string    `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious *string    `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\n\nfunc (x *SearchCountriesResponse) Reset() {\n\t*x = SearchCountriesResponse{}\n\tmi := &file_airports_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 190, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [1725, 1748], "def_symbols": ["GetCursor", "Reset"], "symbols": ["GetCursor", "Reset", "func", "SearchCountriesRequest", "string", "nil", "Cursor", "return", "type", "SearchCountriesResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Result", "Country", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "Next", "opt", "next", "oneof", "Previous", "previous", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *SearchCountriesRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchCountriesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tResult   []*Country `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tNext     *string    `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious *string    `protobuf:\"bytes,3,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\nfunc (x *SearchCountriesResponse) Reset() {\n\t*x = SearchCountriesResponse{}\n\tmi := &file_airports_proto_msgTypes[22]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#64", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 64, "start_line": 1749, "end_line": 1778, "text": "func (x *SearchCountriesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchCountriesResponse) ProtoMessage() {}\n\nfunc (x *SearchCountriesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchCountriesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{22}\n}\n\nfunc (x *SearchCountriesResponse) GetResult() []*Country {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "String", "primary_kind": "function", "primary_span": [1749, 1778], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetResult", "func", "SearchCountriesResponse", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country", "Result"], "doc_head": "func (x *SearchCountriesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchCountriesResponse) ProtoMessage() {}\nfunc (x *SearchCountriesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[22]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchCountriesResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchCountriesResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{22}\n}\nfunc (x *SearchCountriesResponse) GetResult() []*Country {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#65", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 65, "start_line": 1779, "end_line": 1813, "text": "func (x *SearchCountriesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchCountriesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n\ntype GetCountryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *GetCountryRequest) Reset() {\n\t*x = GetCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[23]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetCountryRequest) ProtoMessage() {}\n", "n_tokens": 202, "primary_symbol": "GetNext", "primary_kind": "function", "primary_span": [1779, 1813], "def_symbols": ["GetNext", "GetPrevious", "Reset", "String", "ProtoMessage"], "symbols": ["GetNext", "GetPrevious", "Reset", "String", "ProtoMessage", "func", "SearchCountriesResponse", "string", "nil", "Next", "return", "Previous", "type", "GetCountryRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *SearchCountriesResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchCountriesResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\ntype GetCountryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *GetCountryRequest) Reset() {\n\t*x = GetCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[23]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetCountryRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#66", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 66, "start_line": 1814, "end_line": 1837, "text": "func (x *GetCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[23]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{23}\n}\n\nfunc (x *GetCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 154, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1814, 1837], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "GetCountryRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string"], "doc_head": "func (x *GetCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[23]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*GetCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{23}\n}\nfunc (x *GetCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#67", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 67, "start_line": 1838, "end_line": 1858, "text": "type GetCountryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCountry *Country `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\n\nfunc (x *GetCountryResponse) Reset() {\n\t*x = GetCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[24]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetCountryResponse) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1846, 1858], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetCountryResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Country", "protobuf", "bytes", "opt", "name", "country", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetCountryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCountry *Country `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\nfunc (x *GetCountryResponse) Reset() {\n\t*x = GetCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[24]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetCountryResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#68", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 68, "start_line": 1859, "end_line": 1882, "text": "func (x *GetCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[24]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{24}\n}\n\nfunc (x *GetCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1859, 1882], "def_symbols": ["ProtoReflect", "Descriptor", "GetCountry"], "symbols": ["ProtoReflect", "Descriptor", "GetCountry", "func", "GetCountryResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country"], "doc_head": "func (x *GetCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[24]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*GetCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{24}\n}\nfunc (x *GetCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#69", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 69, "start_line": 1883, "end_line": 1904, "text": "type CreateCountryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\n\nfunc (x *CreateCountryRequest) Reset() {\n\t*x = CreateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[25]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCountryRequest) ProtoMessage() {}\n", "n_tokens": 180, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1892, 1904], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateCountryRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type CreateCountryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\nfunc (x *CreateCountryRequest) Reset() {\n\t*x = CreateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[25]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCountryRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#70", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 70, "start_line": 1905, "end_line": 1935, "text": "func (x *CreateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[25]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{25}\n}\n\nfunc (x *CreateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1905, 1935], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "CreateCountryRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *CreateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[25]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{25}\n}\nfunc (x *CreateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *CreateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#71", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 71, "start_line": 1936, "end_line": 1956, "text": "type CreateCountryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCountry *Country `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\n\nfunc (x *CreateCountryResponse) Reset() {\n\t*x = CreateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[26]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateCountryResponse) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1944, 1956], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "CreateCountryResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Country", "protobuf", "bytes", "opt", "name", "country", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type CreateCountryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCountry *Country `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\nfunc (x *CreateCountryResponse) Reset() {\n\t*x = CreateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[26]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateCountryResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#72", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 72, "start_line": 1957, "end_line": 1980, "text": "func (x *CreateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[26]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{26}\n}\n\nfunc (x *CreateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1957, 1980], "def_symbols": ["ProtoReflect", "Descriptor", "GetCountry"], "symbols": ["ProtoReflect", "Descriptor", "GetCountry", "func", "CreateCountryResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country"], "doc_head": "func (x *CreateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[26]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{26}\n}\nfunc (x *CreateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#73", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 73, "start_line": 1981, "end_line": 2002, "text": "type UpdateCountryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\n\nfunc (x *UpdateCountryRequest) Reset() {\n\t*x = UpdateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCountryRequest) ProtoMessage() {}\n", "n_tokens": 180, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1990, 2002], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateCountryRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type UpdateCountryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\nfunc (x *UpdateCountryRequest) Reset() {\n\t*x = UpdateCountryRequest{}\n\tmi := &file_airports_proto_msgTypes[27]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCountryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCountryRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#74", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 74, "start_line": 2003, "end_line": 2033, "text": "func (x *UpdateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{27}\n}\n\nfunc (x *UpdateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 184, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2003, 2033], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "UpdateCountryRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *UpdateCountryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[27]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateCountryRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{27}\n}\nfunc (x *UpdateCountryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateCountryRequest) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#75", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 75, "start_line": 2034, "end_line": 2054, "text": "type UpdateCountryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCountry *Country `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\n\nfunc (x *UpdateCountryResponse) Reset() {\n\t*x = UpdateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateCountryResponse) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2042, 2054], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UpdateCountryResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Country", "protobuf", "bytes", "opt", "name", "country", "proto3", "json", "omitempty", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type UpdateCountryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCountry *Country `protobuf:\"bytes,1,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\nfunc (x *UpdateCountryResponse) Reset() {\n\t*x = UpdateCountryResponse{}\n\tmi := &file_airports_proto_msgTypes[28]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateCountryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateCountryResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#76", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 76, "start_line": 2055, "end_line": 2078, "text": "func (x *UpdateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{28}\n}\n\nfunc (x *UpdateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 156, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2055, 2078], "def_symbols": ["ProtoReflect", "Descriptor", "GetCountry"], "symbols": ["ProtoReflect", "Descriptor", "GetCountry", "func", "UpdateCountryResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Country"], "doc_head": "func (x *UpdateCountryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[28]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateCountryResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateCountryResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{28}\n}\nfunc (x *UpdateCountryResponse) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#77", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 77, "start_line": 2079, "end_line": 2100, "text": "type UploadImageResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tImageUrl string `protobuf:\"bytes,1,opt,name=imageUrl,proto3\" json:\"imageUrl,omitempty\"`\n\tSize     int64  `protobuf:\"varint,2,opt,name=size,proto3\" json:\"size,omitempty\"`\n}\n\nfunc (x *UploadImageResponse) Reset() {\n\t*x = UploadImageResponse{}\n\tmi := &file_airports_proto_msgTypes[29]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UploadImageResponse) ProtoMessage() {}\n", "n_tokens": 157, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2088, 2100], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "UploadImageResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "ImageUrl", "string", "protobuf", "bytes", "opt", "name", "imageUrl", "proto3", "json", "omitempty", "Size", "int64", "varint", "size", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type UploadImageResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tImageUrl string `protobuf:\"bytes,1,opt,name=imageUrl,proto3\" json:\"imageUrl,omitempty\"`\n\tSize     int64  `protobuf:\"varint,2,opt,name=size,proto3\" json:\"size,omitempty\"`\n}\nfunc (x *UploadImageResponse) Reset() {\n\t*x = UploadImageResponse{}\n\tmi := &file_airports_proto_msgTypes[29]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UploadImageResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#78", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 78, "start_line": 2101, "end_line": 2131, "text": "func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[29]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.\nfunc (*UploadImageResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{29}\n}\n\nfunc (x *UploadImageResponse) GetImageUrl() string {\n\tif x != nil {\n\t\treturn x.ImageUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *UploadImageResponse) GetSize() int64 {\n\tif x != nil {\n\t\treturn x.Size\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2101, 2131], "def_symbols": ["ProtoReflect", "Descriptor", "GetImageUrl", "GetSize"], "symbols": ["ProtoReflect", "Descriptor", "GetImageUrl", "GetSize", "func", "UploadImageResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "ImageUrl", "int64", "Size"], "doc_head": "func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[29]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.\nfunc (*UploadImageResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{29}\n}\nfunc (x *UploadImageResponse) GetImageUrl() string {\n\tif x != nil {\n\t\treturn x.ImageUrl\n\t}\n\treturn \"\"\n}\nfunc (x *UploadImageResponse) GetSize() int64 {\n\tif x != nil {\n\t\treturn x.Size\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#79", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 79, "start_line": 2132, "end_line": 2148, "text": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignators []string  `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate     *string   `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude     []Include `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\n\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[30]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 184, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2142, 2148], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "BatchGetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designators", "string", "protobuf", "bytes", "rep", "name", "designators", "proto3", "json", "omitempty", "ForDate", "opt", "forDate", "oneof", "Include", "varint", "packed", "include", "enum", "aviation", "airports", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type BatchGetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignators []string  `protobuf:\"bytes,1,rep,name=designators,proto3\" json:\"designators,omitempty\"`\n\tForDate     *string   `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude     []Include `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\nfunc (x *BatchGetByDesignatorRequest) Reset() {\n\t*x = BatchGetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[30]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#80", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 80, "start_line": 2149, "end_line": 2171, "text": "func (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}\n\nfunc (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[30]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{30}\n}\n", "n_tokens": 173, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2149, 2171], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "BatchGetByDesignatorRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *BatchGetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorRequest) ProtoMessage() {}\nfunc (x *BatchGetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[30]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{30}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#81", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 81, "start_line": 2172, "end_line": 2200, "text": "func (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\n\nfunc (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n\nfunc (x *BatchGetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirports []*Airport `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n}\n", "n_tokens": 167, "primary_symbol": "GetDesignators", "primary_kind": "function", "primary_span": [2172, 2200], "def_symbols": ["GetDesignators", "GetForDate", "GetInclude"], "symbols": ["GetDesignators", "GetForDate", "GetInclude", "func", "BatchGetByDesignatorRequest", "string", "nil", "return", "Designators", "ForDate", "Include", "type", "BatchGetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airports", "Airport", "protobuf", "bytes", "rep", "name", "airports", "proto3", "json", "omitempty"], "doc_head": "func (x *BatchGetByDesignatorRequest) GetDesignators() []string {\n\tif x != nil {\n\t\treturn x.Designators\n\t}\n\treturn nil\n}\nfunc (x *BatchGetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\nfunc (x *BatchGetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\ntype BatchGetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirports []*Airport `protobuf:\"bytes,1,rep,name=airports,proto3\" json:\"airports,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#82", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 82, "start_line": 2201, "end_line": 2225, "text": "func (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[31]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}\n\nfunc (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[31]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 179, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2201, 2225], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "BatchGetByDesignatorResponse", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *BatchGetByDesignatorResponse) Reset() {\n\t*x = BatchGetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[31]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetByDesignatorResponse) ProtoMessage() {}\nfunc (x *BatchGetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[31]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#83", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 83, "start_line": 2226, "end_line": 2237, "text": "// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{31}\n}\n\nfunc (x *BatchGetByDesignatorResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}\n", "n_tokens": 87, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2227, 2237], "def_symbols": ["Descriptor", "GetAirports"], "symbols": ["Descriptor", "GetAirports", "Deprecated", "Use", "BatchGetByDesignatorResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "Airport", "nil", "Airports"], "doc_head": "// Deprecated: Use BatchGetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{31}\n}\nfunc (x *BatchGetByDesignatorResponse) GetAirports() []*Airport {\n\tif x != nil {\n\t\treturn x.Airports\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#84", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 84, "start_line": 2238, "end_line": 2258, "text": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator string    `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate    *string   `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude    []Include `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\n\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[32]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 203, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2248, 2258], "def_symbols": ["Reset", "String"], "symbols": ["Reset", "String", "type", "GetByDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "string", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "ForDate", "forDate", "oneof", "Include", "varint", "rep", "packed", "include", "enum", "aviation", "airports", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type GetByDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator string    `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tForDate    *string   `protobuf:\"bytes,2,opt,name=forDate,proto3,oneof\" json:\"forDate,omitempty\"`\n\tInclude    []Include `protobuf:\"varint,3,rep,packed,name=include,proto3,enum=aviation.airports.v0.Include\" json:\"include,omitempty\"`\n}\nfunc (x *GetByDesignatorRequest) Reset() {\n\t*x = GetByDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[32]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetByDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#85", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 85, "start_line": 2259, "end_line": 2284, "text": "func (*GetByDesignatorRequest) ProtoMessage() {}\n\nfunc (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[32]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{32}\n}\n\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n", "n_tokens": 176, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [2259, 2284], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignator", "func", "GetByDesignatorRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Designator"], "doc_head": "func (*GetByDesignatorRequest) ProtoMessage() {}\nfunc (x *GetByDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[32]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{32}\n}\nfunc (x *GetByDesignatorRequest) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#86", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 86, "start_line": 2285, "end_line": 2317, "text": "func (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\n\ntype GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\n\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[33]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 205, "primary_symbol": "GetForDate", "primary_kind": "function", "primary_span": [2285, 2317], "def_symbols": ["GetForDate", "GetInclude", "Reset", "String"], "symbols": ["GetForDate", "GetInclude", "Reset", "String", "func", "GetByDesignatorRequest", "string", "nil", "ForDate", "return", "Include", "type", "GetByDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airport", "protobuf", "bytes", "opt", "name", "airport", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *GetByDesignatorRequest) GetForDate() string {\n\tif x != nil && x.ForDate != nil {\n\t\treturn *x.ForDate\n\t}\n\treturn \"\"\n}\nfunc (x *GetByDesignatorRequest) GetInclude() []Include {\n\tif x != nil {\n\t\treturn x.Include\n\t}\n\treturn nil\n}\ntype GetByDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirport *Airport `protobuf:\"bytes,1,opt,name=airport,proto3\" json:\"airport,omitempty\"`\n}\nfunc (x *GetByDesignatorResponse) Reset() {\n\t*x = GetByDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[33]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetByDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#87", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 87, "start_line": 2318, "end_line": 2343, "text": "func (*GetByDesignatorResponse) ProtoMessage() {}\n\nfunc (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[33]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{33}\n}\n\nfunc (x *GetByDesignatorResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}\n", "n_tokens": 178, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [2318, 2343], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetAirport", "func", "GetByDesignatorResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Airport"], "doc_head": "func (*GetByDesignatorResponse) ProtoMessage() {}\nfunc (x *GetByDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[33]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetByDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetByDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{33}\n}\nfunc (x *GetByDesignatorResponse) GetAirport() *Airport {\n\tif x != nil {\n\t\treturn x.Airport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#88", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 88, "start_line": 2344, "end_line": 2365, "text": "type Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\n\nfunc (x *Country) Reset() {\n\t*x = Country{}\n\tmi := &file_airports_proto_msgTypes[34]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Country) ProtoMessage() {}\n", "n_tokens": 170, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2353, 2365], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Country", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\nfunc (x *Country) Reset() {\n\t*x = Country{}\n\tmi := &file_airports_proto_msgTypes[34]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Country) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#89", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 89, "start_line": 2366, "end_line": 2396, "text": "func (x *Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[34]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Country.ProtoReflect.Descriptor instead.\nfunc (*Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{34}\n}\n\nfunc (x *Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 174, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2366, 2396], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "Country", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[34]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Country.ProtoReflect.Descriptor instead.\nfunc (*Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{34}\n}\nfunc (x *Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#90", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 90, "start_line": 2397, "end_line": 2408, "text": "type City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId       int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState    *string           `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone string            `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry  *Country          `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\n", "n_tokens": 170, "primary_symbol": "", "primary_kind": "", "primary_span": [2397, 2408], "def_symbols": [], "symbols": ["type", "City", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "Country", "country"], "doc_head": "type City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId       int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState    *string           `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone string            `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry  *Country          `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#91", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 91, "start_line": 2409, "end_line": 2438, "text": "func (x *City) Reset() {\n\t*x = City{}\n\tmi := &file_airports_proto_msgTypes[35]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*City) ProtoMessage() {}\n\nfunc (x *City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[35]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use City.ProtoReflect.Descriptor instead.\nfunc (*City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{35}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2409, 2438], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "City", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP"], "doc_head": "func (x *City) Reset() {\n\t*x = City{}\n\tmi := &file_airports_proto_msgTypes[35]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*City) ProtoMessage() {}\nfunc (x *City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[35]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use City.ProtoReflect.Descriptor instead.\nfunc (*City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{35}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#92", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 92, "start_line": 2439, "end_line": 2473, "text": "func (x *City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *City) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 145, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [2439, 2473], "def_symbols": ["GetId", "GetName", "GetState", "GetTimezone", "GetCountry"], "symbols": ["GetId", "GetName", "GetState", "GetTimezone", "GetCountry", "func", "City", "int64", "nil", "return", "map", "string", "Name", "State", "Timezone", "Country"], "doc_head": "func (x *City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *City) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#93", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 93, "start_line": 2474, "end_line": 2495, "text": "type Error struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCode    string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tMessage string `protobuf:\"bytes,2,opt,name=message,proto3\" json:\"message,omitempty\"`\n}\n\nfunc (x *Error) Reset() {\n\t*x = Error{}\n\tmi := &file_airports_proto_msgTypes[36]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Error) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Error) ProtoMessage() {}\n", "n_tokens": 143, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2483, 2495], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Error", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Code", "string", "protobuf", "bytes", "opt", "name", "code", "proto3", "json", "omitempty", "Message", "message", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Error struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCode    string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tMessage string `protobuf:\"bytes,2,opt,name=message,proto3\" json:\"message,omitempty\"`\n}\nfunc (x *Error) Reset() {\n\t*x = Error{}\n\tmi := &file_airports_proto_msgTypes[36]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Error) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Error) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#94", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 94, "start_line": 2496, "end_line": 2526, "text": "func (x *Error) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[36]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Error.ProtoReflect.Descriptor instead.\nfunc (*Error) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{36}\n}\n\nfunc (x *Error) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\n\nfunc (x *Error) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}\n", "n_tokens": 171, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2496, 2526], "def_symbols": ["ProtoReflect", "Descriptor", "GetCode", "GetMessage"], "symbols": ["ProtoReflect", "Descriptor", "GetCode", "GetMessage", "func", "Error", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "Code"], "doc_head": "func (x *Error) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[36]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Error.ProtoReflect.Descriptor instead.\nfunc (*Error) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{36}\n}\nfunc (x *Error) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\nfunc (x *Error) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#95", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 95, "start_line": 2527, "end_line": 2544, "text": "type CreateDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n}\n\nfunc (x *CreateDesignatorRequest) Reset() {\n\t*x = CreateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[37]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 199, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2538, 2544], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "CreateDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirportId", "airportId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type CreateDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignatorCode string                 `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n}\nfunc (x *CreateDesignatorRequest) Reset() {\n\t*x = CreateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[37]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#96", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 96, "start_line": 2545, "end_line": 2574, "text": "func (x *CreateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateDesignatorRequest) ProtoMessage() {}\n\nfunc (x *CreateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[37]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{37}\n}\n\nfunc (x *CreateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n", "n_tokens": 196, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2545, 2574], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignatorCode"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignatorCode", "func", "CreateDesignatorRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "DesignatorCode"], "doc_head": "func (x *CreateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateDesignatorRequest) ProtoMessage() {}\nfunc (x *CreateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[37]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use CreateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{37}\n}\nfunc (x *CreateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#97", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 97, "start_line": 2575, "end_line": 2603, "text": "func (x *CreateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *CreateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n\ntype CreateDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator *Designator `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}\n", "n_tokens": 164, "primary_symbol": "GetAirportId", "primary_kind": "function", "primary_span": [2575, 2603], "def_symbols": ["GetAirportId", "GetValidFrom", "GetValidTo"], "symbols": ["GetAirportId", "GetValidFrom", "GetValidTo", "func", "CreateDesignatorRequest", "string", "nil", "return", "AirportId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo", "type", "CreateDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty"], "doc_head": "func (x *CreateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\nfunc (x *CreateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *CreateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\ntype CreateDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator *Designator `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#98", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 98, "start_line": 2604, "end_line": 2628, "text": "func (x *CreateDesignatorResponse) Reset() {\n\t*x = CreateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[38]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *CreateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateDesignatorResponse) ProtoMessage() {}\n\nfunc (x *CreateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[38]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2604, 2628], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "CreateDesignatorResponse", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *CreateDesignatorResponse) Reset() {\n\t*x = CreateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[38]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *CreateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*CreateDesignatorResponse) ProtoMessage() {}\nfunc (x *CreateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[38]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#99", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 99, "start_line": 2629, "end_line": 2640, "text": "// Deprecated: Use CreateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{38}\n}\n\nfunc (x *CreateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 81, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2630, 2640], "def_symbols": ["Descriptor", "GetDesignator"], "symbols": ["Descriptor", "GetDesignator", "Deprecated", "Use", "CreateDesignatorResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "Designator", "nil"], "doc_head": "// Deprecated: Use CreateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{38}\n}\nfunc (x *CreateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#100", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 100, "start_line": 2641, "end_line": 2658, "text": "type UpdateDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignatorCode string                 `protobuf:\"bytes,2,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,3,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n}\n\nfunc (x *UpdateDesignatorRequest) Reset() {\n\t*x = UpdateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[39]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 199, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2652, 2658], "def_symbols": ["Reset"], "symbols": ["Reset", "type", "UpdateDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "DesignatorCode", "string", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirportId", "airportId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "type UpdateDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignatorCode string                 `protobuf:\"bytes,2,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string                 `protobuf:\"bytes,3,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom      *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo        *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n}\nfunc (x *UpdateDesignatorRequest) Reset() {\n\t*x = UpdateDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[39]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#101", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 101, "start_line": 2659, "end_line": 2688, "text": "func (x *UpdateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDesignatorRequest) ProtoMessage() {}\n\nfunc (x *UpdateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[39]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{39}\n}\n\nfunc (x *UpdateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n", "n_tokens": 196, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2659, 2688], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignatorCode"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignatorCode", "func", "UpdateDesignatorRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "DesignatorCode"], "doc_head": "func (x *UpdateDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateDesignatorRequest) ProtoMessage() {}\nfunc (x *UpdateDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[39]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UpdateDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{39}\n}\nfunc (x *UpdateDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#102", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 102, "start_line": 2689, "end_line": 2717, "text": "func (x *UpdateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n\ntype UpdateDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator *Designator `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}\n", "n_tokens": 164, "primary_symbol": "GetAirportId", "primary_kind": "function", "primary_span": [2689, 2717], "def_symbols": ["GetAirportId", "GetValidFrom", "GetValidTo"], "symbols": ["GetAirportId", "GetValidFrom", "GetValidTo", "func", "UpdateDesignatorRequest", "string", "nil", "return", "AirportId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo", "type", "UpdateDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty"], "doc_head": "func (x *UpdateDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\nfunc (x *UpdateDesignatorRequest) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *UpdateDesignatorRequest) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\ntype UpdateDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator *Designator `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#103", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 103, "start_line": 2718, "end_line": 2742, "text": "func (x *UpdateDesignatorResponse) Reset() {\n\t*x = UpdateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[40]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UpdateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDesignatorResponse) ProtoMessage() {}\n\nfunc (x *UpdateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[40]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2718, 2742], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "UpdateDesignatorResponse", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *UpdateDesignatorResponse) Reset() {\n\t*x = UpdateDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[40]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UpdateDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*UpdateDesignatorResponse) ProtoMessage() {}\nfunc (x *UpdateDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[40]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#104", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 104, "start_line": 2743, "end_line": 2754, "text": "// Deprecated: Use UpdateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{40}\n}\n\nfunc (x *UpdateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 81, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2744, 2754], "def_symbols": ["Descriptor", "GetDesignator"], "symbols": ["Descriptor", "GetDesignator", "Deprecated", "Use", "UpdateDesignatorResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "Designator", "nil"], "doc_head": "// Deprecated: Use UpdateDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{40}\n}\nfunc (x *UpdateDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#105", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 105, "start_line": 2755, "end_line": 2768, "text": "type Designator struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId          string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tAirportId   string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom   *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo     *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tCreatedAt   *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt   *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tAirportName string                 `protobuf:\"bytes,7,opt,name=airportName,proto3\" json:\"airportName,omitempty\"`\n}\n", "n_tokens": 217, "primary_symbol": "", "primary_kind": "", "primary_span": [2755, 2768], "def_symbols": [], "symbols": ["type", "Designator", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "AirportId", "airportId", "ValidFrom", "timestamppb", "Timestamp", "validFrom", "ValidTo", "validTo", "CreatedAt", "createdAt", "UpdatedAt", "updatedAt", "AirportName", "airportName"], "doc_head": "type Designator struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId          string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tAirportId   string                 `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tValidFrom   *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=validFrom,proto3\" json:\"validFrom,omitempty\"`\n\tValidTo     *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=validTo,proto3\" json:\"validTo,omitempty\"`\n\tCreatedAt   *timestamppb.Timestamp `protobuf:\"bytes,5,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt   *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n\tAirportName string                 `protobuf:\"bytes,7,opt,name=airportName,proto3\" json:\"airportName,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#106", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 106, "start_line": 2769, "end_line": 2793, "text": "func (x *Designator) Reset() {\n\t*x = Designator{}\n\tmi := &file_airports_proto_msgTypes[41]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Designator) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Designator) ProtoMessage() {}\n\nfunc (x *Designator) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[41]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2769, 2793], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Designator", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Designator) Reset() {\n\t*x = Designator{}\n\tmi := &file_airports_proto_msgTypes[41]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Designator) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Designator) ProtoMessage() {}\nfunc (x *Designator) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[41]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#107", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 107, "start_line": 2794, "end_line": 2833, "text": "// Deprecated: Use Designator.ProtoReflect.Descriptor instead.\nfunc (*Designator) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{41}\n}\n\nfunc (x *Designator) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Designator) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Designator) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [2795, 2833], "def_symbols": ["Descriptor", "GetId", "GetAirportId", "GetValidFrom", "GetValidTo", "GetCreatedAt"], "symbols": ["Descriptor", "GetId", "GetAirportId", "GetValidFrom", "GetValidTo", "GetCreatedAt", "Deprecated", "Use", "Designator", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "string", "nil", "AirportId", "timestamppb", "Timestamp", "ValidFrom", "ValidTo", "CreatedAt"], "doc_head": "// Deprecated: Use Designator.ProtoReflect.Descriptor instead.\nfunc (*Designator) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{41}\n}\nfunc (x *Designator) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Designator) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\nfunc (x *Designator) GetValidFrom() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidFrom\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetValidTo() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ValidTo\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#108", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 108, "start_line": 2834, "end_line": 2863, "text": "func (x *Designator) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Designator) GetAirportName() string {\n\tif x != nil {\n\t\treturn x.AirportName\n\t}\n\treturn \"\"\n}\n\ntype GetDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignatorCode string `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n}\n\nfunc (x *GetDesignatorRequest) Reset() {\n\t*x = GetDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[42]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n", "n_tokens": 202, "primary_symbol": "GetUpdatedAt", "primary_kind": "function", "primary_span": [2834, 2863], "def_symbols": ["GetUpdatedAt", "GetAirportName", "Reset"], "symbols": ["GetUpdatedAt", "GetAirportName", "Reset", "func", "Designator", "timestamppb", "Timestamp", "nil", "return", "UpdatedAt", "string", "AirportName", "type", "GetDesignatorRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "DesignatorCode", "protobuf", "bytes", "opt", "name", "designatorCode", "proto3", "json", "omitempty", "AirportId", "airportId", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo"], "doc_head": "func (x *Designator) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\nfunc (x *Designator) GetAirportName() string {\n\tif x != nil {\n\t\treturn x.AirportName\n\t}\n\treturn \"\"\n}\ntype GetDesignatorRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignatorCode string `protobuf:\"bytes,1,opt,name=designatorCode,proto3\" json:\"designatorCode,omitempty\"`\n\tAirportId      string `protobuf:\"bytes,2,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n}\nfunc (x *GetDesignatorRequest) Reset() {\n\t*x = GetDesignatorRequest{}\n\tmi := &file_airports_proto_msgTypes[42]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#109", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 109, "start_line": 2864, "end_line": 2893, "text": "func (x *GetDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorRequest) ProtoMessage() {}\n\nfunc (x *GetDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[42]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{42}\n}\n\nfunc (x *GetDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}\n", "n_tokens": 196, "primary_symbol": "String", "primary_kind": "function", "primary_span": [2864, 2893], "def_symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignatorCode"], "symbols": ["String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetDesignatorCode", "func", "GetDesignatorRequest", "string", "return", "protoimpl", "MessageStringOf", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "DesignatorCode"], "doc_head": "func (x *GetDesignatorRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorRequest) ProtoMessage() {}\nfunc (x *GetDesignatorRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[42]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetDesignatorRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{42}\n}\nfunc (x *GetDesignatorRequest) GetDesignatorCode() string {\n\tif x != nil {\n\t\treturn x.DesignatorCode\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#110", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 110, "start_line": 2894, "end_line": 2921, "text": "func (x *GetDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n\ntype GetDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDesignator *Designator `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}\n\nfunc (x *GetDesignatorResponse) Reset() {\n\t*x = GetDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[43]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDesignatorResponse) ProtoMessage() {}\n", "n_tokens": 177, "primary_symbol": "GetAirportId", "primary_kind": "function", "primary_span": [2894, 2921], "def_symbols": ["GetAirportId", "Reset", "String", "ProtoMessage"], "symbols": ["GetAirportId", "Reset", "String", "ProtoMessage", "func", "GetDesignatorRequest", "string", "nil", "return", "AirportId", "type", "GetDesignatorResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Designator", "protobuf", "bytes", "opt", "name", "designator", "proto3", "json", "omitempty", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *GetDesignatorRequest) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\ntype GetDesignatorResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDesignator *Designator `protobuf:\"bytes,1,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n}\nfunc (x *GetDesignatorResponse) Reset() {\n\t*x = GetDesignatorResponse{}\n\tmi := &file_airports_proto_msgTypes[43]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetDesignatorResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetDesignatorResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#111", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 111, "start_line": 2922, "end_line": 2945, "text": "func (x *GetDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[43]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{43}\n}\n\nfunc (x *GetDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}\n", "n_tokens": 163, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2922, 2945], "def_symbols": ["ProtoReflect", "Descriptor", "GetDesignator"], "symbols": ["ProtoReflect", "Descriptor", "GetDesignator", "func", "GetDesignatorResponse", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "Designator"], "doc_head": "func (x *GetDesignatorResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[43]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetDesignatorResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDesignatorResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{43}\n}\nfunc (x *GetDesignatorResponse) GetDesignator() *Designator {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#112", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 112, "start_line": 2946, "end_line": 2968, "text": "type SearchDesignatorsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\n\nfunc (x *SearchDesignatorsRequest) Reset() {\n\t*x = SearchDesignatorsRequest{}\n\tmi := &file_airports_proto_msgTypes[44]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchDesignatorsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchDesignatorsRequest) ProtoMessage() {}\n", "n_tokens": 189, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [2956, 2968], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchDesignatorsRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchDesignatorsRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tQ      string  `protobuf:\"bytes,1,opt,name=q,proto3\" json:\"q,omitempty\"`\n\tLimit  uint32  `protobuf:\"varint,2,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor *string `protobuf:\"bytes,3,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\nfunc (x *SearchDesignatorsRequest) Reset() {\n\t*x = SearchDesignatorsRequest{}\n\tmi := &file_airports_proto_msgTypes[44]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchDesignatorsRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchDesignatorsRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#113", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 113, "start_line": 2969, "end_line": 2999, "text": "func (x *SearchDesignatorsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[44]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchDesignatorsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{44}\n}\n\nfunc (x *SearchDesignatorsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchDesignatorsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n", "n_tokens": 191, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [2969, 2999], "def_symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit"], "symbols": ["ProtoReflect", "Descriptor", "GetQ", "GetLimit", "func", "SearchDesignatorsRequest", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "uint32", "Limit"], "doc_head": "func (x *SearchDesignatorsRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[44]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchDesignatorsRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsRequest) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{44}\n}\nfunc (x *SearchDesignatorsRequest) GetQ() string {\n\tif x != nil {\n\t\treturn x.Q\n\t}\n\treturn \"\"\n}\nfunc (x *SearchDesignatorsRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#114", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 114, "start_line": 3000, "end_line": 3017, "text": "func (x *SearchDesignatorsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n\ntype SearchDesignatorsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tResult     []*Designator `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tTotalCount uint32        `protobuf:\"varint,2,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tNext       *string       `protobuf:\"bytes,3,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious   *string       `protobuf:\"bytes,4,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}\n", "n_tokens": 168, "primary_symbol": "GetCursor", "primary_kind": "function", "primary_span": [3000, 3017], "def_symbols": ["GetCursor"], "symbols": ["GetCursor", "func", "SearchDesignatorsRequest", "string", "nil", "Cursor", "return", "type", "SearchDesignatorsResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Result", "Designator", "protobuf", "bytes", "rep", "name", "result", "proto3", "json", "omitempty", "TotalCount", "uint32", "varint", "opt", "totalCount", "Next", "next", "oneof", "Previous", "previous"], "doc_head": "func (x *SearchDesignatorsRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\ntype SearchDesignatorsResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tResult     []*Designator `protobuf:\"bytes,1,rep,name=result,proto3\" json:\"result,omitempty\"`\n\tTotalCount uint32        `protobuf:\"varint,2,opt,name=totalCount,proto3\" json:\"totalCount,omitempty\"`\n\tNext       *string       `protobuf:\"bytes,3,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n\tPrevious   *string       `protobuf:\"bytes,4,opt,name=previous,proto3,oneof\" json:\"previous,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#115", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 115, "start_line": 3018, "end_line": 3042, "text": "func (x *SearchDesignatorsResponse) Reset() {\n\t*x = SearchDesignatorsResponse{}\n\tmi := &file_airports_proto_msgTypes[45]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchDesignatorsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchDesignatorsResponse) ProtoMessage() {}\n\nfunc (x *SearchDesignatorsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[45]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 169, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3018, 3042], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchDesignatorsResponse", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchDesignatorsResponse) Reset() {\n\t*x = SearchDesignatorsResponse{}\n\tmi := &file_airports_proto_msgTypes[45]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchDesignatorsResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchDesignatorsResponse) ProtoMessage() {}\nfunc (x *SearchDesignatorsResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[45]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#116", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 116, "start_line": 3043, "end_line": 3075, "text": "// Deprecated: Use SearchDesignatorsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{45}\n}\n\nfunc (x *SearchDesignatorsResponse) GetResult() []*Designator {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\n\nfunc (x *SearchDesignatorsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\n\nfunc (x *SearchDesignatorsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchDesignatorsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}\n", "n_tokens": 185, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [3044, 3075], "def_symbols": ["Descriptor", "GetResult", "GetTotalCount", "GetNext", "GetPrevious"], "symbols": ["Descriptor", "GetResult", "GetTotalCount", "GetNext", "GetPrevious", "Deprecated", "Use", "SearchDesignatorsResponse", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "Designator", "nil", "Result", "uint32", "TotalCount", "string", "Next", "Previous"], "doc_head": "// Deprecated: Use SearchDesignatorsResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchDesignatorsResponse) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{45}\n}\nfunc (x *SearchDesignatorsResponse) GetResult() []*Designator {\n\tif x != nil {\n\t\treturn x.Result\n\t}\n\treturn nil\n}\nfunc (x *SearchDesignatorsResponse) GetTotalCount() uint32 {\n\tif x != nil {\n\t\treturn x.TotalCount\n\t}\n\treturn 0\n}\nfunc (x *SearchDesignatorsResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\nfunc (x *SearchDesignatorsResponse) GetPrevious() string {\n\tif x != nil && x.Previous != nil {\n\t\treturn *x.Previous\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#117", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 117, "start_line": 3076, "end_line": 3097, "text": "type Airport_Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\n\nfunc (x *Airport_Country) Reset() {\n\t*x = Airport_Country{}\n\tmi := &file_airports_proto_msgTypes[54]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport_Country) ProtoMessage() {}\n", "n_tokens": 180, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3085, 3097], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Airport_Country", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Airport_Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\nfunc (x *Airport_Country) Reset() {\n\t*x = Airport_Country{}\n\tmi := &file_airports_proto_msgTypes[54]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport_Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport_Country) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#118", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 118, "start_line": 3098, "end_line": 3128, "text": "func (x *Airport_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[54]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Airport_Country.ProtoReflect.Descriptor instead.\nfunc (*Airport_Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 0}\n}\n\nfunc (x *Airport_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 187, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [3098, 3128], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "Airport_Country", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *Airport_Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[54]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Airport_Country.ProtoReflect.Descriptor instead.\nfunc (*Airport_Country) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 0}\n}\nfunc (x *Airport_Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#119", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 119, "start_line": 3129, "end_line": 3140, "text": "type Airport_City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId       int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState    *string           `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone string            `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry  *Airport_Country  `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n}\n", "n_tokens": 174, "primary_symbol": "", "primary_kind": "", "primary_span": [3129, 3140], "def_symbols": [], "symbols": ["type", "Airport_City", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "State", "oneof", "Timezone", "timezone", "Country", "Airport_Country", "country"], "doc_head": "type Airport_City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId       int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tState    *string           `protobuf:\"bytes,3,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tTimezone string            `protobuf:\"bytes,4,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tCountry  *Airport_Country  `protobuf:\"bytes,5,opt,name=country,proto3\" json:\"country,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#120", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 120, "start_line": 3141, "end_line": 3165, "text": "func (x *Airport_City) Reset() {\n\t*x = Airport_City{}\n\tmi := &file_airports_proto_msgTypes[55]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport_City) ProtoMessage() {}\n\nfunc (x *Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[55]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 164, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3141, 3165], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airport_City", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airport_City) Reset() {\n\t*x = Airport_City{}\n\tmi := &file_airports_proto_msgTypes[55]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport_City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport_City) ProtoMessage() {}\nfunc (x *Airport_City) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[55]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#121", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 121, "start_line": 3166, "end_line": 3205, "text": "// Deprecated: Use Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 1}\n}\n\nfunc (x *Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_City) GetCountry() *Airport_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 205, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [3167, 3205], "def_symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountry"], "symbols": ["Descriptor", "GetId", "GetName", "GetState", "GetTimezone", "GetCountry", "Deprecated", "Use", "Airport_City", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "State", "Timezone", "Airport_Country", "Country"], "doc_head": "// Deprecated: Use Airport_City.ProtoReflect.Descriptor instead.\nfunc (*Airport_City) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 1}\n}\nfunc (x *Airport_City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *Airport_City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport_City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_City) GetCountry() *Airport_Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#122", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 122, "start_line": 3206, "end_line": 3219, "text": "type Airport_TerminalMap struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId          int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName        map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tUrl         string                 `protobuf:\"bytes,3,opt,name=url,proto3\" json:\"url,omitempty\"`\n\tThumbnail   string                 `protobuf:\"bytes,4,opt,name=thumbnail,proto3\" json:\"thumbnail,omitempty\"`\n\tContentType *string                `protobuf:\"bytes,5,opt,name=contentType,proto3,oneof\" json:\"contentType,omitempty\"`\n\tCreatedAt   *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt   *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n}\n", "n_tokens": 228, "primary_symbol": "", "primary_kind": "", "primary_span": [3206, 3219], "def_symbols": [], "symbols": ["type", "Airport_TerminalMap", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "Url", "url", "Thumbnail", "thumbnail", "ContentType", "contentType", "oneof", "CreatedAt", "timestamppb", "Timestamp", "createdAt", "UpdatedAt", "updatedAt"], "doc_head": "type Airport_TerminalMap struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId          int64                  `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName        map[string]string      `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tUrl         string                 `protobuf:\"bytes,3,opt,name=url,proto3\" json:\"url,omitempty\"`\n\tThumbnail   string                 `protobuf:\"bytes,4,opt,name=thumbnail,proto3\" json:\"thumbnail,omitempty\"`\n\tContentType *string                `protobuf:\"bytes,5,opt,name=contentType,proto3,oneof\" json:\"contentType,omitempty\"`\n\tCreatedAt   *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=createdAt,proto3\" json:\"createdAt,omitempty\"`\n\tUpdatedAt   *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=updatedAt,proto3\" json:\"updatedAt,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#123", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 123, "start_line": 3220, "end_line": 3244, "text": "func (x *Airport_TerminalMap) Reset() {\n\t*x = Airport_TerminalMap{}\n\tmi := &file_airports_proto_msgTypes[56]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport_TerminalMap) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport_TerminalMap) ProtoMessage() {}\n\nfunc (x *Airport_TerminalMap) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[56]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 174, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3220, 3244], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airport_TerminalMap", "file_airports_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airport_TerminalMap) Reset() {\n\t*x = Airport_TerminalMap{}\n\tmi := &file_airports_proto_msgTypes[56]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport_TerminalMap) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport_TerminalMap) ProtoMessage() {}\nfunc (x *Airport_TerminalMap) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[56]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#124", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 124, "start_line": 3245, "end_line": 3277, "text": "// Deprecated: Use Airport_TerminalMap.ProtoReflect.Descriptor instead.\nfunc (*Airport_TerminalMap) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 2}\n}\n\nfunc (x *Airport_TerminalMap) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *Airport_TerminalMap) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport_TerminalMap) GetUrl() string {\n\tif x != nil {\n\t\treturn x.Url\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_TerminalMap) GetThumbnail() string {\n\tif x != nil {\n\t\treturn x.Thumbnail\n\t}\n\treturn \"\"\n}\n", "n_tokens": 178, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [3246, 3277], "def_symbols": ["Descriptor", "GetId", "GetName", "GetUrl", "GetThumbnail"], "symbols": ["Descriptor", "GetId", "GetName", "GetUrl", "GetThumbnail", "Deprecated", "Use", "Airport_TerminalMap", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_airports_proto_rawDescGZIP", "int64", "nil", "map", "string", "Name", "Url", "Thumbnail"], "doc_head": "// Deprecated: Use Airport_TerminalMap.ProtoReflect.Descriptor instead.\nfunc (*Airport_TerminalMap) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{9, 2}\n}\nfunc (x *Airport_TerminalMap) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *Airport_TerminalMap) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport_TerminalMap) GetUrl() string {\n\tif x != nil {\n\t\treturn x.Url\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_TerminalMap) GetThumbnail() string {\n\tif x != nil {\n\t\treturn x.Thumbnail\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#125", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 125, "start_line": 3278, "end_line": 3298, "text": "func (x *Airport_TerminalMap) GetContentType() string {\n\tif x != nil && x.ContentType != nil {\n\t\treturn *x.ContentType\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport_TerminalMap) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nfunc (x *Airport_TerminalMap) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}\n", "n_tokens": 110, "primary_symbol": "GetContentType", "primary_kind": "function", "primary_span": [3278, 3298], "def_symbols": ["GetContentType", "GetCreatedAt", "GetUpdatedAt"], "symbols": ["GetContentType", "GetCreatedAt", "GetUpdatedAt", "func", "Airport_TerminalMap", "string", "nil", "ContentType", "return", "timestamppb", "Timestamp", "CreatedAt", "UpdatedAt"], "doc_head": "func (x *Airport_TerminalMap) GetContentType() string {\n\tif x != nil && x.ContentType != nil {\n\t\treturn *x.ContentType\n\t}\n\treturn \"\"\n}\nfunc (x *Airport_TerminalMap) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\nfunc (x *Airport_TerminalMap) GetUpdatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.UpdatedAt\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#126", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 126, "start_line": 3299, "end_line": 3319, "text": "type UploadImageRequest_Metadata struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirportId string                       `protobuf:\"bytes,1,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tType      UploadImageRequest_ImageType `protobuf:\"varint,2,opt,name=type,proto3,enum=aviation.airports.v0.UploadImageRequest_ImageType\" json:\"type,omitempty\"`\n\tName      string                       `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n}\n\nfunc (x *UploadImageRequest_Metadata) Reset() {\n\t*x = UploadImageRequest_Metadata{}\n\tmi := &file_airports_proto_msgTypes[65]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *UploadImageRequest_Metadata) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 194, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [3309, 3319], "def_symbols": ["Reset", "String"], "symbols": ["Reset", "String", "type", "UploadImageRequest_Metadata", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "AirportId", "string", "protobuf", "bytes", "opt", "name", "airportId", "proto3", "json", "omitempty", "Type", "UploadImageRequest_ImageType", "varint", "enum", "aviation", "airports", "Name", "func", "file_airports_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type UploadImageRequest_Metadata struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirportId string                       `protobuf:\"bytes,1,opt,name=airportId,proto3\" json:\"airportId,omitempty\"`\n\tType      UploadImageRequest_ImageType `protobuf:\"varint,2,opt,name=type,proto3,enum=aviation.airports.v0.UploadImageRequest_ImageType\" json:\"type,omitempty\"`\n\tName      string                       `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n}\nfunc (x *UploadImageRequest_Metadata) Reset() {\n\t*x = UploadImageRequest_Metadata{}\n\tmi := &file_airports_proto_msgTypes[65]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *UploadImageRequest_Metadata) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#127", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 127, "start_line": 3320, "end_line": 3345, "text": "func (*UploadImageRequest_Metadata) ProtoMessage() {}\n\nfunc (x *UploadImageRequest_Metadata) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[65]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UploadImageRequest_Metadata.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest_Metadata) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}\n\nfunc (x *UploadImageRequest_Metadata) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}\n", "n_tokens": 176, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [3320, 3345], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetAirportId"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetAirportId", "func", "UploadImageRequest_Metadata", "protoreflect", "Message", "file_airports_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_airports_proto_rawDescGZIP", "string", "AirportId"], "doc_head": "func (*UploadImageRequest_Metadata) ProtoMessage() {}\nfunc (x *UploadImageRequest_Metadata) ProtoReflect() protoreflect.Message {\n\tmi := &file_airports_proto_msgTypes[65]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use UploadImageRequest_Metadata.ProtoReflect.Descriptor instead.\nfunc (*UploadImageRequest_Metadata) Descriptor() ([]byte, []int) {\n\treturn file_airports_proto_rawDescGZIP(), []int{10, 0}\n}\nfunc (x *UploadImageRequest_Metadata) GetAirportId() string {\n\tif x != nil {\n\t\treturn x.AirportId\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#128", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 128, "start_line": 3346, "end_line": 3352, "text": "func (x *UploadImageRequest_Metadata) GetType() UploadImageRequest_ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn UploadImageRequest_UNKNOWN\n}\n", "n_tokens": 36, "primary_symbol": "GetType", "primary_kind": "function", "primary_span": [3346, 3352], "def_symbols": ["GetType"], "symbols": ["GetType", "func", "UploadImageRequest_Metadata", "UploadImageRequest_ImageType", "nil", "return", "Type", "UploadImageRequest_UNKNOWN"], "doc_head": "func (x *UploadImageRequest_Metadata) GetType() UploadImageRequest_ImageType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn UploadImageRequest_UNKNOWN\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#129", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 129, "start_line": 3353, "end_line": 4143, "text": "func (x *UploadImageRequest_Metadata) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nvar File_airports_proto protoreflect.FileDescriptor\n\nvar file_airports_proto_rawDesc = []byte{\n\t0x0a, 0x0e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x12, 0x14, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x08, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,\n\t0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,\n\t0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,\n\t0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x61,\n\t0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x88,\n\t0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,\n\t0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61,\n\t0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,\n\t0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,\n\t0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,\n\t0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55,\n\t0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,\n\t0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,\n\t0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,\n\t0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,\n\t0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,\n\t0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,\n\t0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,\n\t0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20,\n\t0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,\n\t0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,\n\t0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,\n\t0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x75, 0x6e, 0x77, 0x61, 0x79, 0x73, 0x18,\n\t0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52,\n\t0x75, 0x6e, 0x77, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65,\n\t0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0c, 0x77,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69,\n\t0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,\n\t0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a,\n\t0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72,\n\t0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55,\n\t0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74,\n\t0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x61, 0x61,\n\t0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x66, 0x61, 0x61, 0x88, 0x01, 0x01,\n\t0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,\n\t0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,\n\t0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x68, 0x6f,\n\t0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,\n\t0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,\n\t0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,\n\t0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72,\n\t0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,\n\t0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,\n\t0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,\n\t0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70,\n\t0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,\n\t0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,\n\t0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74,\n\t0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,\n\t0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61,\n\t0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x77,\n\t0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x61,\n\t0x22, 0x50, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x22, 0xb6, 0x08, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x69,\n\t0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x61, 0x74,\n\t0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x02, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,\n\t0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,\n\t0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,\n\t0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,\n\t0x57, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03,\n\t0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,\n\t0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73,\n\t0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79,\n\t0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64,\n\t0x12, 0x5d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65,\n\t0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,\n\t0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,\n\t0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,\n\t0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65,\n\t0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c,\n\t0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65,\n\t0x72, 0x4f, 0x66, 0x52, 0x75, 0x6e, 0x77, 0x61, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,\n\t0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x75, 0x6e, 0x77, 0x61, 0x79,\n\t0x73, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18,\n\t0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,\n\t0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65,\n\t0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,\n\t0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64,\n\t0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69,\n\t0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65,\n\t0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,\n\t0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,\n\t0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72,\n\t0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x61, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x05, 0x52, 0x03, 0x66, 0x61, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4e,\n\t0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,\n\t0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,\n\t0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,\n\t0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,\n\t0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,\n\t0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,\n\t0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,\n\t0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,\n\t0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55,\n\t0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,\n\t0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05,\n\t0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,\n\t0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,\n\t0x55, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x61, 0x22, 0x50, 0x0a, 0x15, 0x43,\n\t0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x60, 0x0a,\n\t0x15, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,\n\t0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49,\n\t0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22,\n\t0x51, 0x0a, 0x16, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,\n\t0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x22, 0x5c, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,\n\t0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75,\n\t0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,\n\t0x22, 0x4d, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,\n\t0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22,\n\t0x26, 0x0a, 0x14, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe3, 0x11, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,\n\t0x69, 0x63, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63,\n\t0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,\n\t0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,\n\t0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,\n\t0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x76,\n\t0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,\n\t0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x68,\n\t0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x68, 0x6f,\n\t0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x68, 0x6f,\n\t0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50,\n\t0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,\n\t0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,\n\t0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,\n\t0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,\n\t0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,\n\t0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,\n\t0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,\n\t0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62,\n\t0x65, 0x72, 0x4f, 0x66, 0x52, 0x75, 0x6e, 0x77, 0x61, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,\n\t0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x75, 0x6e, 0x77, 0x61,\n\t0x79, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,\n\t0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70,\n\t0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x57, 0x69, 0x6b,\n\t0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,\n\t0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0b,\n\t0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,\n\t0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72,\n\t0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74,\n\t0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,\n\t0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x74,\n\t0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x29, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x0c, 0x74, 0x65,\n\t0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,\n\t0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,\n\t0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,\n\t0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,\n\t0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,\n\t0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,\n\t0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23,\n\t0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x18,\n\t0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x12,\n\t0x15, 0x0a, 0x03, 0x66, 0x61, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03,\n\t0x66, 0x61, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x97, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,\n\t0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,\n\t0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,\n\t0x32, 0x2f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e,\n\t0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,\n\t0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,\n\t0x1a, 0x93, 0x02, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d,\n\t0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65,\n\t0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73,\n\t0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,\n\t0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,\n\t0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,\n\t0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20,\n\t0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,\n\t0x74, 0x72, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,\n\t0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x69,\n\t0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x2e,\n\t0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,\n\t0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,\n\t0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,\n\t0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,\n\t0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,\n\t0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,\n\t0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,\n\t0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,\n\t0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,\n\t0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61,\n\t0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,\n\t0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,\n\t0x79, 0x70, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,\n\t0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,\n\t0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,\n\t0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65,\n\t0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,\n\t0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,\n\t0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69,\n\t0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,\n\t0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x49,\n\t0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,\n\t0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42,\n\t0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62,\n\t0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x63, 0x65,\n\t0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x77, 0x69, 0x74,\n\t0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x61, 0x22, 0xb4, 0x02,\n\t0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,\n\t0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70,\n\t0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,\n\t0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x84, 0x01,\n\t0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70,\n\t0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,\n\t0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,\n\t0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,\n\t0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,\n\t0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04,\n\t0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c,\n\t0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14, 0x0a, 0x05,\n\t0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,\n\t0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,\n\t0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,\n\t0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,\n\t0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,\n\t0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f,\n\t0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63,\n\t0x68, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01,\n\t0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x88,\n\t0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,\n\t0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,\n\t0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,\n\t0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,\n\t0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,\n\t0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14, 0x0a,\n\t0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69,\n\t0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01,\n\t0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x14,\n\t0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x69, 0x74, 0x79,\n\t0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01,\n\t0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x88,\n\t0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,\n\t0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,\n\t0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65,\n\t0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,\n\t0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x76,\n\t0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,\n\t0x76, 0x30, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0xf2, 0x01,\n\t0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x31, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,\n\t0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74,\n\t0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,\n\t0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,\n\t0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,\n\t0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x1a,\n\t0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,\n\t0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,\n\t0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,\n\t0x74, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x69,\n\t0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x82, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,\n\t0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45,\n\t0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,\n\t0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,\n\t0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,\n\t0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,\n\t0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09,\n\t0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61,\n\t0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,\n\t0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a,\n\t0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63,\n\t0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75,\n\t0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a,\n\t0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c,\n\t0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,\n\t0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09,\n\t0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x53, 0x65,\n\t0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,\n\t0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04,\n\t0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65,\n\t0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,\n\t0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69,\n\t0x6f, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x42,\n\t0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x11,\n\t0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,\n\t0x64, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,\n\t0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,\n\t0x22, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d,\n\t0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43,\n\t0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e,\n\t0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x15,\n\t0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f,\n\t0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xa9,\n\t0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,\n\t0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,\n\t0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,\n\t0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,\n\t0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x15, 0x55, 0x70,\n\t0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x45, 0x0a, 0x13,\n\t0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,\n\t0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,\n\t0x69, 0x7a, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,\n\t0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,\n\t0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74,\n\t0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18,\n\t0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x63,\n\t0x6c, 0x75, 0x64, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x0a, 0x0a,\n\t0x08, 0x5f, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x42, 0x61, 0x74,\n\t0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,\n\t0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76,\n\t0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,\n\t0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65,\n\t0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,\n\t0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,\n\t0x1d, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,\n\t0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,\n\t0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x07,\n\t0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6f, 0x72, 0x44,\n\t0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,\n\t0x0a, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,\n\t0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,\n\t0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x27, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,\n\t0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,\n\t0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,\n\t0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,\n\t0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x04, 0x43, 0x69,\n\t0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,\n\t0x69, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,\n\t0x32, 0x24, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x2e, 0x4e, 0x61, 0x6d,\n\t0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05,\n\t0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73,\n\t0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,\n\t0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,\n\t0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x37, 0x0a, 0x09,\n\t0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,\n\t0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,\n\t0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,\n\t0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,\n\t0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,\n\t0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,\n\t0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,\n\t0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72,\n\t0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x04, 0x20,\n\t0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,\n\t0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x22, 0x5c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,\n\t0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,\n\t0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,\n\t0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,\n\t0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,\n\t0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72,\n\t0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x05, 0x20,\n\t0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,\n\t0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x22, 0x5c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,\n\t0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xc0, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d,\n\t0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,\n\t0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,\n\t0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a,\n\t0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,\n\t0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,\n\t0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69,\n\t0x64, 0x54, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,\n\t0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,\n\t0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,\n\t0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,\n\t0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,\n\t0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,\n\t0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74,\n\t0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43,\n\t0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65,\n\t0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x22, 0x66, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c,\n\t0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x14, 0x0a, 0x05,\n\t0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,\n\t0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,\n\t0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x53,\n\t0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,\n\t0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,\n\t0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,\n\t0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,\n\t0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,\n\t0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,\n\t0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,\n\t0x5f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,\n\t0x75, 0x73, 0x2a, 0x29, 0x0a, 0x07, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x0b, 0x0a,\n\t0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45,\n\t0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x10, 0x01, 0x32, 0xc1, 0x07,\n\t0x0a, 0x0f, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,\n\t0x65, 0x12, 0x62, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,\n\t0x74, 0x12, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,\n\t0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x22, 0x00, 0x12, 0x61, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x12,\n\t0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79,\n\t0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x76,\n\t0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,\n\t0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,\n\t0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x6c, 0x6f,\n\t0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67,\n\t0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x65, 0x0a,\n\t0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,\n\t0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,\n\t0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x61, 0x72,\n\t0x63, 0x68, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,\n\t0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,\n\t0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,\n\t0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f,\n\t0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61,\n\t0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,\n\t0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,\n\t0x6f, 0x72, 0x12, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44,\n\t0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x1a, 0x2d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73,\n\t0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,\n\t0x00, 0x32, 0x86, 0x03, 0x0a, 0x0d, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76,\n\t0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x29, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65,\n\t0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x24, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69,\n\t0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x06,\n\t0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72,\n\t0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,\n\t0x28, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74,\n\t0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x06, 0x55,\n\t0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x74, 0x79,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa1, 0x03, 0x0a, 0x10, 0x43,\n\t0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,\n\t0x67, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,\n\t0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,\n\t0x27, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,\n\t0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,\n\t0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,\n\t0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x76, 0x69,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,\n\t0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,\n\t0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb9,\n\t0x03, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65,\n\t0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,\n\t0x2d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,\n\t0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69,\n\t0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,\n\t0x12, 0x60, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47,\n\t0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,\n\t0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,\n\t0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x22, 0x00, 0x12, 0x69, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,\n\t0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,\n\t0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x76,\n\t0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,\n\t0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,\n\t0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,\n\t0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,\n\t0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,\n\t0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,\n\t0x6f, 0x33,\n}\n\nvar (\n\tfile_airports_proto_rawDescOnce sync.Once\n\tfile_airports_proto_rawDescData = file_airports_proto_rawDesc\n)\n", "n_tokens": 64680, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [3353, 4143], "def_symbols": ["GetName"], "symbols": ["GetName", "func", "UploadImageRequest_Metadata", "string", "nil", "return", "Name", "var", "File_airports_proto", "protoreflect", "FileDescriptor", "file_airports_proto_rawDesc", "byte", "file_airports_proto_rawDescOnce", "sync", "Once", "file_airports_proto_rawDescData"], "doc_head": "func (x *UploadImageRequest_Metadata) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nvar File_airports_proto protoreflect.FileDescriptor\nvar file_airports_proto_rawDesc = []byte{\n\t0x0a, 0x0e, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x12, 0x14, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x72, 0x70, 0x6f,\n\t0x72, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x08, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,\n\t0x74, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,\n\t0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,\n\t0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x61,\n\t0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x88,\n\t0x01, 0x01, 0x12, 0x26, 0x0a, 0"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#130", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 130, "start_line": 4144, "end_line": 4342, "text": "func file_airports_proto_rawDescGZIP() []byte {\n\tfile_airports_proto_rawDescOnce.Do(func() {\n\t\tfile_airports_proto_rawDescData = protoimpl.X.CompressGZIP(file_airports_proto_rawDescData)\n\t})\n\treturn file_airports_proto_rawDescData\n}\n\nvar file_airports_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_airports_proto_msgTypes = make([]protoimpl.MessageInfo, 72)\nvar file_airports_proto_goTypes = []any{\n\t(Include)(0),                         // 0: aviation.airports.v0.Include\n\t(UploadImageRequest_ImageType)(0),    // 1: aviation.airports.v0.UploadImageRequest.ImageType\n\t(*UpdateAirportRequest)(nil),         // 2: aviation.airports.v0.UpdateAirportRequest\n\t(*UpdateAirportResponse)(nil),        // 3: aviation.airports.v0.UpdateAirportResponse\n\t(*CreateAirportRequest)(nil),         // 4: aviation.airports.v0.CreateAirportRequest\n\t(*CreateAirportResponse)(nil),        // 5: aviation.airports.v0.CreateAirportResponse\n\t(*AirportDetailsRequest)(nil),        // 6: aviation.airports.v0.AirportDetailsRequest\n\t(*AirportDetailsResponse)(nil),       // 7: aviation.airports.v0.AirportDetailsResponse\n\t(*BatchGetRequest)(nil),              // 8: aviation.airports.v0.BatchGetRequest\n\t(*BatchGetResponse)(nil),             // 9: aviation.airports.v0.BatchGetResponse\n\t(*AirportByCityRequest)(nil),         // 10: aviation.airports.v0.AirportByCityRequest\n\t(*Airport)(nil),                      // 11: aviation.airports.v0.Airport\n\t(*UploadImageRequest)(nil),           // 12: aviation.airports.v0.UploadImageRequest\n\t(*SearchAirportsRequest)(nil),        // 13: aviation.airports.v0.SearchAirportsRequest\n\t(*SearchAirportsResponse)(nil),       // 14: aviation.airports.v0.SearchAirportsResponse\n\t(*SearchCitiesRequest)(nil),          // 15: aviation.airports.v0.SearchCitiesRequest\n\t(*SearchCitiesResponse)(nil),         // 16: aviation.airports.v0.SearchCitiesResponse\n\t(*GetCityRequest)(nil),               // 17: aviation.airports.v0.GetCityRequest\n\t(*GetCityResponse)(nil),              // 18: aviation.airports.v0.GetCityResponse\n\t(*CreateCityRequest)(nil),            // 19: aviation.airports.v0.CreateCityRequest\n\t(*CreateCityResponse)(nil),           // 20: aviation.airports.v0.CreateCityResponse\n\t(*UpdateCityRequest)(nil),            // 21: aviation.airports.v0.UpdateCityRequest\n\t(*UpdateCityResponse)(nil),           // 22: aviation.airports.v0.UpdateCityResponse\n\t(*SearchCountriesRequest)(nil),       // 23: aviation.airports.v0.SearchCountriesRequest\n\t(*SearchCountriesResponse)(nil),      // 24: aviation.airports.v0.SearchCountriesResponse\n\t(*GetCountryRequest)(nil),            // 25: aviation.airports.v0.GetCountryRequest\n\t(*GetCountryResponse)(nil),           // 26: aviation.airports.v0.GetCountryResponse\n\t(*CreateCountryRequest)(nil),         // 27: aviation.airports.v0.CreateCountryRequest\n\t(*CreateCountryResponse)(nil),        // 28: aviation.airports.v0.CreateCountryResponse\n\t(*UpdateCountryRequest)(nil),         // 29: aviation.airports.v0.UpdateCountryRequest\n\t(*UpdateCountryResponse)(nil),        // 30: aviation.airports.v0.UpdateCountryResponse\n\t(*UploadImageResponse)(nil),          // 31: aviation.airports.v0.UploadImageResponse\n\t(*BatchGetByDesignatorRequest)(nil),  // 32: aviation.airports.v0.BatchGetByDesignatorRequest\n\t(*BatchGetByDesignatorResponse)(nil), // 33: aviation.airports.v0.BatchGetByDesignatorResponse\n\t(*GetByDesignatorRequest)(nil),       // 34: aviation.airports.v0.GetByDesignatorRequest\n\t(*GetByDesignatorResponse)(nil),      // 35: aviation.airports.v0.GetByDesignatorResponse\n\t(*Country)(nil),                      // 36: aviation.airports.v0.Country\n\t(*City)(nil),                         // 37: aviation.airports.v0.City\n\t(*Error)(nil),                        // 38: aviation.airports.v0.Error\n\t(*CreateDesignatorRequest)(nil),      // 39: aviation.airports.v0.CreateDesignatorRequest\n\t(*CreateDesignatorResponse)(nil),     // 40: aviation.airports.v0.CreateDesignatorResponse\n\t(*UpdateDesignatorRequest)(nil),      // 41: aviation.airports.v0.UpdateDesignatorRequest\n\t(*UpdateDesignatorResponse)(nil),     // 42: aviation.airports.v0.UpdateDesignatorResponse\n\t(*Designator)(nil),                   // 43: aviation.airports.v0.Designator\n\t(*GetDesignatorRequest)(nil),         // 44: aviation.airports.v0.GetDesignatorRequest\n\t(*GetDesignatorResponse)(nil),        // 45: aviation.airports.v0.GetDesignatorResponse\n\t(*SearchDesignatorsRequest)(nil),     // 46: aviation.airports.v0.SearchDesignatorsRequest\n\t(*SearchDesignatorsResponse)(nil),    // 47: aviation.airports.v0.SearchDesignatorsResponse\n\tnil,                                  // 48: aviation.airports.v0.UpdateAirportRequest.NameEntry\n\tnil,                                  // 49: aviation.airports.v0.UpdateAirportRequest.ShortNameEntry\n\tnil,                                  // 50: aviation.airports.v0.UpdateAirportRequest.DescriptionEntry\n\tnil,                                  // 51: aviation.airports.v0.UpdateAirportRequest.WikipediaUrlEntry\n\tnil,                                  // 52: aviation.airports.v0.CreateAirportRequest.NameEntry\n\tnil,                                  // 53: aviation.airports.v0.CreateAirportRequest.ShortNameEntry\n\tnil,                                  // 54: aviation.airports.v0.CreateAirportRequest.DescriptionEntry\n\tnil,                                  // 55: aviation.airports.v0.CreateAirportRequest.WikipediaUrlEntry\n\t(*Airport_Country)(nil),              // 56: aviation.airports.v0.Airport.Country\n\t(*Airport_City)(nil),                 // 57: aviation.airports.v0.Airport.City\n\t(*Airport_TerminalMap)(nil),          // 58: aviation.airports.v0.Airport.TerminalMap\n\tnil,                                  // 59: aviation.airports.v0.Airport.NameEntry\n\tnil,                                  // 60: aviation.airports.v0.Airport.ShortNameEntry\n\tnil,                                  // 61: aviation.airports.v0.Airport.DescriptionEntry\n\tnil,                                  // 62: aviation.airports.v0.Airport.WikipediaUrlEntry\n\tnil,                                  // 63: aviation.airports.v0.Airport.ImagesEntry\n\tnil,                                  // 64: aviation.airports.v0.Airport.Country.NameEntry\n\tnil,                                  // 65: aviation.airports.v0.Airport.City.NameEntry\n\tnil,                                  // 66: aviation.airports.v0.Airport.TerminalMap.NameEntry\n\t(*UploadImageRequest_Metadata)(nil),  // 67: aviation.airports.v0.UploadImageRequest.Metadata\n\tnil,                                  // 68: aviation.airports.v0.CreateCityRequest.NameEntry\n\tnil,                                  // 69: aviation.airports.v0.UpdateCityRequest.NameEntry\n\tnil,                                  // 70: aviation.airports.v0.CreateCountryRequest.NameEntry\n\tnil,                                  // 71: aviation.airports.v0.UpdateCountryRequest.NameEntry\n\tnil,                                  // 72: aviation.airports.v0.Country.NameEntry\n\tnil,                                  // 73: aviation.airports.v0.City.NameEntry\n\t(*timestamppb.Timestamp)(nil),        // 74: google.protobuf.Timestamp\n}\nvar file_airports_proto_depIdxs = []int32{\n\t48, // 0: aviation.airports.v0.UpdateAirportRequest.name:type_name -> aviation.airports.v0.UpdateAirportRequest.NameEntry\n\t49, // 1: aviation.airports.v0.UpdateAirportRequest.shortName:type_name -> aviation.airports.v0.UpdateAirportRequest.ShortNameEntry\n\t50, // 2: aviation.airports.v0.UpdateAirportRequest.description:type_name -> aviation.airports.v0.UpdateAirportRequest.DescriptionEntry\n\t51, // 3: aviation.airports.v0.UpdateAirportRequest.wikipediaUrl:type_name -> aviation.airports.v0.UpdateAirportRequest.WikipediaUrlEntry\n\t11, // 4: aviation.airports.v0.UpdateAirportResponse.airport:type_name -> aviation.airports.v0.Airport\n\t52, // 5: aviation.airports.v0.CreateAirportRequest.name:type_name -> aviation.airports.v0.CreateAirportRequest.NameEntry\n\t53, // 6: aviation.airports.v0.CreateAirportRequest.shortName:type_name -> aviation.airports.v0.CreateAirportRequest.ShortNameEntry\n\t54, // 7: aviation.airports.v0.CreateAirportRequest.description:type_name -> aviation.airports.v0.CreateAirportRequest.DescriptionEntry\n\t55, // 8: aviation.airports.v0.CreateAirportRequest.wikipediaUrl:type_name -> aviation.airports.v0.CreateAirportRequest.WikipediaUrlEntry\n\t11, // 9: aviation.airports.v0.CreateAirportResponse.airport:type_name -> aviation.airports.v0.Airport\n\t0,  // 10: aviation.airports.v0.AirportDetailsRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 11: aviation.airports.v0.AirportDetailsResponse.airport:type_name -> aviation.airports.v0.Airport\n\t0,  // 12: aviation.airports.v0.BatchGetRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 13: aviation.airports.v0.BatchGetResponse.airports:type_name -> aviation.airports.v0.Airport\n\t59, // 14: aviation.airports.v0.Airport.name:type_name -> aviation.airports.v0.Airport.NameEntry\n\t60, // 15: aviation.airports.v0.Airport.shortName:type_name -> aviation.airports.v0.Airport.ShortNameEntry\n\t57, // 16: aviation.airports.v0.Airport.city:type_name -> aviation.airports.v0.Airport.City\n\t61, // 17: aviation.airports.v0.Airport.description:type_name -> aviation.airports.v0.Airport.DescriptionEntry\n\t62, // 18: aviation.airports.v0.Airport.wikipediaUrl:type_name -> aviation.airports.v0.Airport.WikipediaUrlEntry\n\t63, // 19: aviation.airports.v0.Airport.images:type_name -> aviation.airports.v0.Airport.ImagesEntry\n\t58, // 20: aviation.airports.v0.Airport.terminalMaps:type_name -> aviation.airports.v0.Airport.TerminalMap\n\t74, // 21: aviation.airports.v0.Airport.createdAt:type_name -> google.protobuf.Timestamp\n\t74, // 22: aviation.airports.v0.Airport.updatedAt:type_name -> google.protobuf.Timestamp\n\t67, // 23: aviation.airports.v0.UploadImageRequest.metadata:type_name -> aviation.airports.v0.UploadImageRequest.Metadata\n\t11, // 24: aviation.airports.v0.SearchAirportsResponse.result:type_name -> aviation.airports.v0.Airport\n\t37, // 25: aviation.airports.v0.SearchCitiesResponse.result:type_name -> aviation.airports.v0.City\n\t37, // 26: aviation.airports.v0.GetCityResponse.city:type_name -> aviation.airports.v0.City\n\t68, // 27: aviation.airports.v0.CreateCityRequest.name:type_name -> aviation.airports.v0.CreateCityRequest.NameEntry\n\t37, // 28: aviation.airports.v0.CreateCityResponse.city:type_name -> aviation.airports.v0.City\n\t69, // 29: aviation.airports.v0.UpdateCityRequest.name:type_name -> aviation.airports.v0.UpdateCityRequest.NameEntry\n\t37, // 30: aviation.airports.v0.UpdateCityResponse.city:type_name -> aviation.airports.v0.City\n\t36, // 31: aviation.airports.v0.SearchCountriesResponse.result:type_name -> aviation.airports.v0.Country\n\t36, // 32: aviation.airports.v0.GetCountryResponse.country:type_name -> aviation.airports.v0.Country\n\t70, // 33: aviation.airports.v0.CreateCountryRequest.name:type_name -> aviation.airports.v0.CreateCountryRequest.NameEntry\n\t36, // 34: aviation.airports.v0.CreateCountryResponse.country:type_name -> aviation.airports.v0.Country\n\t71, // 35: aviation.airports.v0.UpdateCountryRequest.name:type_name -> aviation.airports.v0.UpdateCountryRequest.NameEntry\n\t36, // 36: aviation.airports.v0.UpdateCountryResponse.country:type_name -> aviation.airports.v0.Country\n\t0,  // 37: aviation.airports.v0.BatchGetByDesignatorRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 38: aviation.airports.v0.BatchGetByDesignatorResponse.airports:type_name -> aviation.airports.v0.Airport\n\t0,  // 39: aviation.airports.v0.GetByDesignatorRequest.include:type_name -> aviation.airports.v0.Include\n\t11, // 40: aviation.airports.v0.GetByDesignatorResponse.airport:type_name -> aviation.airports.v0.Airport\n\t72, // 41: aviation.airports.v0.Country.name:type_name -> aviation.airports.v0.Country.NameEntry\n\t73, // 42: aviation.airports.v0.City.name:type_name -> aviation.airports.v0.City.NameEntry\n\t36, // 43: aviation.airports.v0.City.country:type_name -> aviation.airports.v0.Country\n\t74, // 44: aviation.airports.v0.CreateDesignatorRequest.validFrom:type_name -> google.protobuf.Timestamp\n\t74, // 45: aviation.airports.v0.CreateDesignatorRequest.validTo:type_name -> google.protobuf.Timestamp\n\t43, // 46: aviation.airports.v0.CreateDesignatorResponse.designator:type_name -> aviation.airports.v0.Designator\n\t74, // 47: aviation.airports.v0.UpdateDesignatorRequest.validFrom:type_name -> google.protobuf.Timestamp\n\t74, // 48: aviation.airports.v0.UpdateDesignatorRequest.validTo:type_name -> google.protobuf.Timestamp\n\t43, // 49: aviation.airports.v0.UpdateDesignatorResponse.designator:type_name -> aviation.airports.v0.Designator\n\t74, // 50: aviation.airports.v0.Designator.validFrom:type_name -> google.protobuf.Timestamp\n\t74, // 51: aviation.airports.v0.Designator.validTo:type_name -> google.protobuf.Timestamp\n\t74, // 52: aviation.airports.v0.Designator.createdAt:type_name -> google.protobuf.Timestamp\n\t74, // 53: aviation.airports.v0.Designator.updatedAt:type_name -> google.protobuf.Timestamp\n\t43, // 54: aviation.airports.v0.GetDesignatorResponse.designator:type_name -> aviation.airports.v0.Designator\n\t43, // 55: aviation.airports.v0.SearchDesignatorsResponse.result:type_name -> aviation.airports.v0.Designator\n\t64, // 56: aviation.airports.v0.Airport.Country.name:type_name -> aviation.airports.v0.Airport.Country.NameEntry\n\t65, // 57: aviation.airports.v0.Airport.City.name:type_name -> aviation.airports.v0.Airport.City.NameEntry\n\t56, // 58: aviation.airports.v0.Airport.City.country:type_name -> aviation.airports.v0.Airport.Country\n\t66, // 59: aviation.airports.v0.Airport.TerminalMap.name:type_name -> aviation.airports.v0.Airport.TerminalMap.NameEntry\n\t74, // 60: aviation.airports.v0.Airport.TerminalMap.createdAt:type_name -> google.protobuf.Timestamp\n\t74, // 61: aviation.airports.v0.Airport.TerminalMap.updatedAt:type_name -> google.protobuf.Timestamp\n\t1,  // 62: aviation.airports.v0.UploadImageRequest.Metadata.type:type_name -> aviation.airports.v0.UploadImageRequest.ImageType\n\t6,  // 63: aviation.airports.v0.AirportsService.Get:input_type -> aviation.airports.v0.AirportDetailsRequest\n\t8,  // 64: aviation.airports.v0.AirportsService.BatchGet:input_type -> aviation.airports.v0.BatchGetRequest\n\t10, // 65: aviation.airports.v0.AirportsService.GetByCity:input_type -> aviation.airports.v0.AirportByCityRequest\n\t12, // 66: aviation.airports.v0.AirportsService.UploadImage:input_type -> aviation.airports.v0.UploadImageRequest\n\t13, // 67: aviation.airports.v0.AirportsService.Search:input_type -> aviation.airports.v0.SearchAirportsRequest\n\t4,  // 68: aviation.airports.v0.AirportsService.Create:input_type -> aviation.airports.v0.CreateAirportRequest\n\t2,  // 69: aviation.airports.v0.AirportsService.Update:input_type -> aviation.airports.v0.UpdateAirportRequest\n\t32, // 70: aviation.airports.v0.AirportsService.BatchGetByDesignator:input_type -> aviation.airports.v0.BatchGetByDesignatorRequest\n\t34, // 71: aviation.airports.v0.AirportsService.GetByDesignator:input_type -> aviation.airports.v0.GetByDesignatorRequest\n\t15, // 72: aviation.airports.v0.CitiesService.Search:input_type -> aviation.airports.v0.SearchCitiesRequest\n\t17, // 73: aviation.airports.v0.CitiesService.Get:input_type -> aviation.airports.v0.GetCityRequest\n\t19, // 74: aviation.airports.v0.CitiesService.Create:input_type -> aviation.airports.v0.CreateCityRequest\n\t21, // 75: aviation.airports.v0.CitiesService.Update:input_type -> aviation.airports.v0.UpdateCityRequest\n\t23, // 76: aviation.airports.v0.CountriesService.Search:input_type -> aviation.airports.v0.SearchCountriesRequest\n\t25, // 77: aviation.airports.v0.CountriesService.Get:input_type -> aviation.airports.v0.GetCountryRequest\n\t27, // 78: aviation.airports.v0.CountriesService.Create:input_type -> aviation.airports.v0.CreateCountryRequest\n\t29, // 79: aviation.airports.v0.CountriesService.Update:input_type -> aviation.airports.v0.UpdateCountryRequest\n\t39, // 80: aviation.airports.v0.DesignatorsService.Create:input_type -> aviation.airports.v0.CreateDesignatorRequest\n\t44, // 81: aviation.airports.v0.DesignatorsService.Get:input_type -> aviation.airports.v0.GetDesignatorRequest\n\t41, // 82: aviation.airports.v0.DesignatorsService.Update:input_type -> aviation.airports.v0.UpdateDesignatorRequest\n\t46, // 83: aviation.airports.v0.DesignatorsService.Search:input_type -> aviation.airports.v0.SearchDesignatorsRequest\n\t7,  // 84: aviation.airports.v0.AirportsService.Get:output_type -> aviation.airports.v0.AirportDetailsResponse\n\t9,  // 85: aviation.airports.v0.AirportsService.BatchGet:output_type -> aviation.airports.v0.BatchGetResponse\n\t9,  // 86: aviation.airports.v0.AirportsService.GetByCity:output_type -> aviation.airports.v0.BatchGetResponse\n\t31, // 87: aviation.airports.v0.AirportsService.UploadImage:output_type -> aviation.airports.v0.UploadImageResponse\n\t14, // 88: aviation.airports.v0.AirportsService.Search:output_type -> aviation.airports.v0.SearchAirportsResponse\n\t5,  // 89: aviation.airports.v0.AirportsService.Create:output_type -> aviation.airports.v0.CreateAirportResponse\n\t3,  // 90: aviation.airports.v0.AirportsService.Update:output_type -> aviation.airports.v0.UpdateAirportResponse\n\t33, // 91: aviation.airports.v0.AirportsService.BatchGetByDesignator:output_type -> aviation.airports.v0.BatchGetByDesignatorResponse\n\t35, // 92: aviation.airports.v0.AirportsService.GetByDesignator:output_type -> aviation.airports.v0.GetByDesignatorResponse\n\t16, // 93: aviation.airports.v0.CitiesService.Search:output_type -> aviation.airports.v0.SearchCitiesResponse\n\t18, // 94: aviation.airports.v0.CitiesService.Get:output_type -> aviation.airports.v0.GetCityResponse\n\t20, // 95: aviation.airports.v0.CitiesService.Create:output_type -> aviation.airports.v0.CreateCityResponse\n\t22, // 96: aviation.airports.v0.CitiesService.Update:output_type -> aviation.airports.v0.UpdateCityResponse\n\t24, // 97: aviation.airports.v0.CountriesService.Search:output_type -> aviation.airports.v0.SearchCountriesResponse\n\t26, // 98: aviation.airports.v0.CountriesService.Get:output_type -> aviation.airports.v0.GetCountryResponse\n\t28, // 99: aviation.airports.v0.CountriesService.Create:output_type -> aviation.airports.v0.CreateCountryResponse\n\t30, // 100: aviation.airports.v0.CountriesService.Update:output_type -> aviation.airports.v0.UpdateCountryResponse\n\t40, // 101: aviation.airports.v0.DesignatorsService.Create:output_type -> aviation.airports.v0.CreateDesignatorResponse\n\t45, // 102: aviation.airports.v0.DesignatorsService.Get:output_type -> aviation.airports.v0.GetDesignatorResponse\n\t42, // 103: aviation.airports.v0.DesignatorsService.Update:output_type -> aviation.airports.v0.UpdateDesignatorResponse\n\t47, // 104: aviation.airports.v0.DesignatorsService.Search:output_type -> aviation.airports.v0.SearchDesignatorsResponse\n\t84, // [84:105] is the sub-list for method output_type\n\t63, // [63:84] is the sub-list for method input_type\n\t63, // [63:63] is the sub-list for extension type_name\n\t63, // [63:63] is the sub-list for extension extendee\n\t0,  // [0:63] is the sub-list for field type_name\n}\n", "n_tokens": 4909, "primary_symbol": "file_airports_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [4144, 4342], "def_symbols": ["file_airports_proto_rawDescGZIP"], "symbols": ["file_airports_proto_rawDescGZIP", "func", "byte", "file_airports_proto_rawDescOnce", "file_airports_proto_rawDescData", "protoimpl", "CompressGZIP", "return", "var", "file_airports_proto_enumTypes", "make", "EnumInfo", "file_airports_proto_msgTypes", "MessageInfo", "file_airports_proto_goTypes", "any", "Include", "aviation", "airports", "UploadImageRequest_ImageType", "UploadImageRequest", "ImageType", "UpdateAirportRequest", "nil", "UpdateAirportResponse", "CreateAirportRequest", "CreateAirportResponse", "AirportDetailsRequest", "AirportDetailsResponse", "BatchGetRequest", "BatchGetResponse", "AirportByCityRequest", "Airport", "SearchAirportsRequest", "SearchAirportsResponse", "SearchCitiesRequest", "SearchCitiesResponse", "GetCityRequest", "GetCityResponse", "CreateCityRequest", "CreateCityResponse", "UpdateCityRequest", "UpdateCityResponse", "SearchCountriesRequest", "SearchCountriesResponse", "GetCountryRequest", "GetCountryResponse", "CreateCountryRequest", "CreateCountryResponse", "UpdateCountryRequest", "UpdateCountryResponse", "UploadImageResponse", "BatchGetByDesignatorRequest", "BatchGetByDesignatorResponse", "GetByDesignatorRequest", "GetByDesignatorResponse", "Country", "City", "Error", "CreateDesignatorRequest", "CreateDesignatorResponse", "UpdateDesignatorRequest", "UpdateDesignatorResponse", "Designator", "GetDesignatorRequest", "GetDesignatorResponse", "SearchDesignatorsRequest", "SearchDesignatorsResponse", "NameEntry", "ShortNameEntry", "DescriptionEntry", "WikipediaUrlEntry", "Airport_Country", "Airport_City", "Airport_TerminalMap", "TerminalMap", "ImagesEntry", "UploadImageRequest_Metadata", "Metadata", "timestamppb", "Timestamp", "google", "protobuf", "file_airports_proto_depIdxs", "int32", "name", "type_name", "shortName", "description", "wikipediaUrl", "airport", "include", "city", "images", "terminalMaps", "createdAt", "updatedAt", "metadata", "result", "country", "validFrom", "validTo", "designator", "type", "AirportsService", "Get", "input_type", "BatchGet", "GetByCity", "UploadImage", "Search", "Create", "Update", "BatchGetByDesignator", "GetByDesignator", "CitiesService", "CountriesService", "DesignatorsService", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "func file_airports_proto_rawDescGZIP() []byte {\n\tfile_airports_proto_rawDescOnce.Do(func() {\n\t\tfile_airports_proto_rawDescData = protoimpl.X.CompressGZIP(file_airports_proto_rawDescData)\n\t})\n\treturn file_airports_proto_rawDescData\n}\nvar file_airports_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_airports_proto_msgTypes = make([]protoimpl.MessageInfo, 72)\nvar file_airports_proto_goTypes = []any{\n\t(Include)(0),                         // 0: aviation.airports.v0.Include\n\t(UploadImageRequest_ImageType)(0),    // 1: aviation.airports.v0.UploadImageRequest.ImageType\n\t(*UpdateAirportRequest)(nil),         // 2: aviation.airports.v0.UpdateAirportRequest\n\t(*UpdateAirportResponse)(nil),        // 3: aviation.airports.v0.UpdateAirportResponse\n\t(*CreateAirportRequest)(nil),         // 4: aviation.airports.v0.CreateAirportRequest\n\t(*CreateAirportResponse)(nil),        // 5: aviation.airports.v0.CreateAirportResponse\n\t(*AirportDetailsRequest)(nil),        // 6: aviation.airports.v0.AirportDetailsRequest\n\t(*AirportDetailsResponse)(nil),       // 7: aviation.airports.v0.AirportDetailsResponse\n\t(*BatchGetRequest)(nil),              // 8: aviation.airports.v0.BatchGetRequest\n\t(*BatchGetRe"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#131", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 131, "start_line": 4343, "end_line": 4343, "text": "func init() { file_airports_proto_init() }", "n_tokens": 11, "primary_symbol": "init", "primary_kind": "function", "primary_span": [4343, 4343], "def_symbols": ["init"], "symbols": ["init", "func", "file_airports_proto_init"], "doc_head": "func init() { file_airports_proto_init() }"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#132", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 132, "start_line": 4344, "end_line": 4369, "text": "func file_airports_proto_init() {\n\tif File_airports_proto != nil {\n\t\treturn\n\t}\n\tfile_airports_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[2].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[9].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[10].OneofWrappers = []any{\n\t\t(*UploadImageRequest_Metadata_)(nil),\n\t\t(*UploadImageRequest_Chunk)(nil),\n\t}\n\tfile_airports_proto_msgTypes[11].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[13].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[14].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[17].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[19].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[22].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[30].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[32].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[35].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[44].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[45].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[55].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[56].OneofWrappers = []any{}", "n_tokens": 368, "primary_symbol": "file_airports_proto_init", "primary_kind": "function", "primary_span": [4344, 4369], "def_symbols": ["file_airports_proto_init"], "symbols": ["file_airports_proto_init", "func", "File_airports_proto", "nil", "return", "file_airports_proto_msgTypes", "OneofWrappers", "any", "UploadImageRequest_Metadata_", "UploadImageRequest_Chunk"], "doc_head": "func file_airports_proto_init() {\n\tif File_airports_proto != nil {\n\t\treturn\n\t}\n\tfile_airports_proto_msgTypes[0].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[2].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[9].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[10].OneofWrappers = []any{\n\t\t(*UploadImageRequest_Metadata_)(nil),\n\t\t(*UploadImageRequest_Chunk)(nil),\n\t}\n\tfile_airports_proto_msgTypes[11].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[12].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[13].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[14].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[17].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[19].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[21].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[22].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[30].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[32].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[35].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[44].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[45].OneofWrappers = []any{}\n\tfile_airports_proto_msgTypes[55].OneofWrappers = []any{}\n\tf"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go#133", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "rel_path": "internal/schedules/adapter/grpc_clients/airports/airports.pb.go", "ext": "go", "language": "go", "chunk_number": 133, "start_line": 4370, "end_line": 4390, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_airports_proto_rawDesc,\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   72,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   4,\n\t\t},\n\t\tGoTypes:           file_airports_proto_goTypes,\n\t\tDependencyIndexes: file_airports_proto_depIdxs,\n\t\tEnumInfos:         file_airports_proto_enumTypes,\n\t\tMessageInfos:      file_airports_proto_msgTypes,\n\t}.Build()\n\tFile_airports_proto = out.File\n\tfile_airports_proto_rawDesc = nil\n\tfile_airports_proto_goTypes = nil\n\tfile_airports_proto_depIdxs = nil\n}\n", "n_tokens": 176, "primary_symbol": "", "primary_kind": "", "primary_span": [4370, 4390], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "file_airports_proto_rawDesc", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_airports_proto_goTypes", "DependencyIndexes", "file_airports_proto_depIdxs", "EnumInfos", "file_airports_proto_enumTypes", "MessageInfos", "file_airports_proto_msgTypes", "Build", "File_airports_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_airports_proto_rawDesc,\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   72,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   4,\n\t\t},\n\t\tGoTypes:           file_airports_proto_goTypes,\n\t\tDependencyIndexes: file_airports_proto_depIdxs,\n\t\tEnumInfos:         file_airports_proto_enumTypes,\n\t\tMessageInfos:      file_airports_proto_msgTypes,\n\t}.Build()\n\tFile_airports_proto = out.File\n\tfile_airports_proto_rawDesc = nil\n\tfile_airports_proto_goTypes = nil\n\tfile_airports_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: schedules.proto\n\npackage v0\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n", "n_tokens": 159, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 22], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "schedules", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "sync", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.35.2\n// \tprotoc        v3.21.12\n// source: schedules.proto\npackage v0\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 23, "end_line": 44, "text": "type Codeshare struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAirline      string `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tFlightNumber int32  `protobuf:\"varint,2,opt,name=flightNumber,proto3\" json:\"flightNumber,omitempty\"`\n}\n\nfunc (x *Codeshare) Reset() {\n\t*x = Codeshare{}\n\tmi := &file_schedules_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Codeshare) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Codeshare) ProtoMessage() {}\n", "n_tokens": 160, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [32, 44], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Codeshare", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Airline", "string", "protobuf", "bytes", "opt", "name", "airline", "proto3", "json", "omitempty", "FlightNumber", "int32", "varint", "flightNumber", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Codeshare struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAirline      string `protobuf:\"bytes,1,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tFlightNumber int32  `protobuf:\"varint,2,opt,name=flightNumber,proto3\" json:\"flightNumber,omitempty\"`\n}\nfunc (x *Codeshare) Reset() {\n\t*x = Codeshare{}\n\tmi := &file_schedules_proto_msgTypes[0]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Codeshare) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Codeshare) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 45, "end_line": 75, "text": "func (x *Codeshare) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Codeshare.ProtoReflect.Descriptor instead.\nfunc (*Codeshare) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *Codeshare) GetAirline() string {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn \"\"\n}\n\nfunc (x *Codeshare) GetFlightNumber() int32 {\n\tif x != nil {\n\t\treturn x.FlightNumber\n\t}\n\treturn 0\n}\n", "n_tokens": 186, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [45, 75], "def_symbols": ["ProtoReflect", "Descriptor", "GetAirline", "GetFlightNumber"], "symbols": ["ProtoReflect", "Descriptor", "GetAirline", "GetFlightNumber", "func", "Codeshare", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP", "string", "Airline", "int32", "FlightNumber"], "doc_head": "func (x *Codeshare) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[0]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Codeshare.ProtoReflect.Descriptor instead.\nfunc (*Codeshare) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *Codeshare) GetAirline() string {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn \"\"\n}\nfunc (x *Codeshare) GetFlightNumber() int32 {\n\tif x != nil {\n\t\treturn x.FlightNumber\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 76, "end_line": 97, "text": "type Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\n\nfunc (x *Country) Reset() {\n\t*x = Country{}\n\tmi := &file_schedules_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Country) ProtoMessage() {}\n", "n_tokens": 170, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [85, 97], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "Country", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type Country struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId   string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n}\nfunc (x *Country) Reset() {\n\t*x = Country{}\n\tmi := &file_schedules_proto_msgTypes[1]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Country) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Country) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 98, "end_line": 128, "text": "func (x *Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Country.ProtoReflect.Descriptor instead.\nfunc (*Country) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n", "n_tokens": 174, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [98, 128], "def_symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "GetName", "func", "Country", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP", "string", "map", "Name"], "doc_head": "func (x *Country) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[1]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Country.ProtoReflect.Descriptor instead.\nfunc (*Country) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *Country) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Country) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 129, "end_line": 140, "text": "type City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId       int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tTimezone string            `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tState    *string           `protobuf:\"bytes,4,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tCountry  *Country          `protobuf:\"bytes,5,opt,name=country,proto3,oneof\" json:\"country,omitempty\"`\n}\n", "n_tokens": 173, "primary_symbol": "", "primary_kind": "", "primary_span": [129, 140], "def_symbols": [], "symbols": ["type", "City", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "int64", "protobuf", "varint", "opt", "name", "proto3", "json", "omitempty", "Name", "map", "string", "bytes", "rep", "protobuf_key", "key", "protobuf_val", "value", "Timezone", "timezone", "State", "oneof", "Country", "country"], "doc_head": "type City struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId       int64             `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tName     map[string]string `protobuf:\"bytes,2,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tTimezone string            `protobuf:\"bytes,3,opt,name=timezone,proto3\" json:\"timezone,omitempty\"`\n\tState    *string           `protobuf:\"bytes,4,opt,name=state,proto3,oneof\" json:\"state,omitempty\"`\n\tCountry  *Country          `protobuf:\"bytes,5,opt,name=country,proto3,oneof\" json:\"country,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 141, "end_line": 170, "text": "func (x *City) Reset() {\n\t*x = City{}\n\tmi := &file_schedules_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*City) ProtoMessage() {}\n\nfunc (x *City) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use City.ProtoReflect.Descriptor instead.\nfunc (*City) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{2}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [141, 170], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "City", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP"], "doc_head": "func (x *City) Reset() {\n\t*x = City{}\n\tmi := &file_schedules_proto_msgTypes[2]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *City) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*City) ProtoMessage() {}\nfunc (x *City) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[2]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use City.ProtoReflect.Descriptor instead.\nfunc (*City) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{2}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 171, "end_line": 205, "text": "func (x *City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\n\nfunc (x *City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\n\nfunc (x *City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\n\nfunc (x *City) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}\n", "n_tokens": 145, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [171, 205], "def_symbols": ["GetId", "GetName", "GetTimezone", "GetState", "GetCountry"], "symbols": ["GetId", "GetName", "GetTimezone", "GetState", "GetCountry", "func", "City", "int64", "nil", "return", "map", "string", "Name", "Timezone", "State", "Country"], "doc_head": "func (x *City) GetId() int64 {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn 0\n}\nfunc (x *City) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *City) GetTimezone() string {\n\tif x != nil {\n\t\treturn x.Timezone\n\t}\n\treturn \"\"\n}\nfunc (x *City) GetState() string {\n\tif x != nil && x.State != nil {\n\t\treturn *x.State\n\t}\n\treturn \"\"\n}\nfunc (x *City) GetCountry() *Country {\n\tif x != nil {\n\t\treturn x.Country\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 206, "end_line": 230, "text": "type Airport struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId             *string           `protobuf:\"bytes,1,opt,name=id,proto3,oneof\" json:\"id,omitempty\"`\n\tDesignator     string            `protobuf:\"bytes,2,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tIata           *string           `protobuf:\"bytes,3,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao           *string           `protobuf:\"bytes,4,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification int64             `protobuf:\"varint,5,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tCity           *City             `protobuf:\"bytes,6,opt,name=city,proto3,oneof\" json:\"city,omitempty\"`\n\tName           map[string]string `protobuf:\"bytes,7,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName      map[string]string `protobuf:\"bytes,8,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tDescription    map[string]string `protobuf:\"bytes,9,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tLatitude       float32           `protobuf:\"fixed32,10,opt,name=latitude,proto3\" json:\"latitude,omitempty\"`\n\tLongitude      float32           `protobuf:\"fixed32,11,opt,name=longitude,proto3\" json:\"longitude,omitempty\"`\n\tElevation      int32             `protobuf:\"varint,12,opt,name=elevation,proto3\" json:\"elevation,omitempty\"`\n\tNumRunways     int32             `protobuf:\"varint,13,opt,name=numRunways,proto3\" json:\"numRunways,omitempty\"`\n\tWebsiteUrl     *string           `protobuf:\"bytes,14,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl   map[string]string `protobuf:\"bytes,15,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl    *string           `protobuf:\"bytes,16,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl     *string           `protobuf:\"bytes,17,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tFaa            *string           `protobuf:\"bytes,18,opt,name=faa,proto3,oneof\" json:\"faa,omitempty\"`\n}\n", "n_tokens": 610, "primary_symbol": "", "primary_kind": "", "primary_span": [206, 230], "def_symbols": [], "symbols": ["type", "Airport", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "oneof", "json", "omitempty", "Designator", "designator", "Iata", "iata", "Icao", "icao", "Classification", "int64", "varint", "classification", "City", "city", "Name", "map", "rep", "protobuf_key", "key", "protobuf_val", "value", "ShortName", "shortName", "Description", "description", "Latitude", "float32", "fixed32", "latitude", "Longitude", "longitude", "Elevation", "int32", "elevation", "NumRunways", "numRunways", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "Faa", "faa"], "doc_head": "type Airport struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId             *string           `protobuf:\"bytes,1,opt,name=id,proto3,oneof\" json:\"id,omitempty\"`\n\tDesignator     string            `protobuf:\"bytes,2,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tIata           *string           `protobuf:\"bytes,3,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao           *string           `protobuf:\"bytes,4,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification int64             `protobuf:\"varint,5,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tCity           *City             `protobuf:\"bytes,6,opt,name=city,proto3,oneof\" json:\"city,omitempty\"`\n\tName           map[string]string `protobuf:\"bytes,7,rep,name=name,proto3\" json:\"name,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tShortName      map[string]string `protobuf:\"bytes,8,rep,name=shortName,proto3\" json:\"shortName,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tDescription    map[string]string `protobuf"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 231, "end_line": 260, "text": "func (x *Airport) Reset() {\n\t*x = Airport{}\n\tmi := &file_schedules_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airport) ProtoMessage() {}\n\nfunc (x *Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Airport.ProtoReflect.Descriptor instead.\nfunc (*Airport) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{3}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [231, 260], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Airport", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP"], "doc_head": "func (x *Airport) Reset() {\n\t*x = Airport{}\n\tmi := &file_schedules_proto_msgTypes[3]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airport) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airport) ProtoMessage() {}\nfunc (x *Airport) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[3]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Airport.ProtoReflect.Descriptor instead.\nfunc (*Airport) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{3}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 261, "end_line": 302, "text": "func (x *Airport) GetId() string {\n\tif x != nil && x.Id != nil {\n\t\treturn *x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}\n", "n_tokens": 188, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [261, 302], "def_symbols": ["GetId", "GetDesignator", "GetIata", "GetIcao", "GetClassification", "GetCity"], "symbols": ["GetId", "GetDesignator", "GetIata", "GetIcao", "GetClassification", "GetCity", "func", "Airport", "string", "nil", "return", "Designator", "Iata", "Icao", "int64", "Classification", "City"], "doc_head": "func (x *Airport) GetId() string {\n\tif x != nil && x.Id != nil {\n\t\treturn *x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetCity() *City {\n\tif x != nil {\n\t\treturn x.City\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 303, "end_line": 351, "text": "func (x *Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\n\nfunc (x *Airport) GetNumRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumRunways\n\t}\n\treturn 0\n}\n", "n_tokens": 212, "primary_symbol": "GetName", "primary_kind": "function", "primary_span": [303, 351], "def_symbols": ["GetName", "GetShortName", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "GetNumRunways"], "symbols": ["GetName", "GetShortName", "GetDescription", "GetLatitude", "GetLongitude", "GetElevation", "GetNumRunways", "func", "Airport", "map", "string", "nil", "return", "Name", "ShortName", "Description", "float32", "Latitude", "Longitude", "int32", "Elevation", "NumRunways"], "doc_head": "func (x *Airport) GetName() map[string]string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetShortName() map[string]string {\n\tif x != nil {\n\t\treturn x.ShortName\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetLatitude() float32 {\n\tif x != nil {\n\t\treturn x.Latitude\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetLongitude() float32 {\n\tif x != nil {\n\t\treturn x.Longitude\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetElevation() int32 {\n\tif x != nil {\n\t\treturn x.Elevation\n\t}\n\treturn 0\n}\nfunc (x *Airport) GetNumRunways() int32 {\n\tif x != nil {\n\t\treturn x.NumRunways\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 352, "end_line": 386, "text": "func (x *Airport) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Airport) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airport) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}\n", "n_tokens": 179, "primary_symbol": "GetWebsiteUrl", "primary_kind": "function", "primary_span": [352, 386], "def_symbols": ["GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "GetFaa"], "symbols": ["GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "GetTwitterUrl", "GetFaa", "func", "Airport", "string", "nil", "WebsiteUrl", "return", "map", "WikipediaUrl", "FacebookUrl", "TwitterUrl", "Faa"], "doc_head": "func (x *Airport) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Airport) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airport) GetFaa() string {\n\tif x != nil && x.Faa != nil {\n\t\treturn *x.Faa\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 387, "end_line": 408, "text": "type Airline struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                         *string           `protobuf:\"bytes,1,opt,name=id,proto3,oneof\" json:\"id,omitempty\"`\n\tDesignator                 string            `protobuf:\"bytes,2,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tIata                       *string           `protobuf:\"bytes,3,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string           `protobuf:\"bytes,4,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64             `protobuf:\"varint,5,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string            `protobuf:\"bytes,6,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string `protobuf:\"bytes,7,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWebsiteUrl                 *string           `protobuf:\"bytes,8,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl               map[string]string `protobuf:\"bytes,9,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tFacebookUrl                *string           `protobuf:\"bytes,10,opt,name=facebookUrl,proto3,oneof\" json:\"facebookUrl,omitempty\"`\n\tTwitterUrl                 *string           `protobuf:\"bytes,11,opt,name=twitterUrl,proto3,oneof\" json:\"twitterUrl,omitempty\"`\n\tReservationTelephoneNumber *string           `protobuf:\"bytes,12,opt,name=reservationTelephoneNumber,proto3,oneof\" json:\"reservationTelephoneNumber,omitempty\"`\n\tRectImageName              *string           `protobuf:\"bytes,13,opt,name=rectImageName,proto3,oneof\" json:\"rectImageName,omitempty\"`\n\tSquareImageName            *string           `protobuf:\"bytes,14,opt,name=squareImageName,proto3,oneof\" json:\"squareImageName,omitempty\"`\n\tTailImageName              *string           `protobuf:\"bytes,15,opt,name=tailImageName,proto3,oneof\" json:\"tailImageName,omitempty\"`\n}\n", "n_tokens": 502, "primary_symbol": "", "primary_kind": "", "primary_span": [387, 408], "def_symbols": [], "symbols": ["type", "Airline", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "oneof", "json", "omitempty", "Designator", "designator", "Iata", "iata", "Icao", "icao", "Classification", "int64", "varint", "classification", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WebsiteUrl", "websiteUrl", "WikipediaUrl", "wikipediaUrl", "FacebookUrl", "facebookUrl", "TwitterUrl", "twitterUrl", "ReservationTelephoneNumber", "reservationTelephoneNumber", "RectImageName", "rectImageName", "SquareImageName", "squareImageName", "TailImageName", "tailImageName"], "doc_head": "type Airline struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId                         *string           `protobuf:\"bytes,1,opt,name=id,proto3,oneof\" json:\"id,omitempty\"`\n\tDesignator                 string            `protobuf:\"bytes,2,opt,name=designator,proto3\" json:\"designator,omitempty\"`\n\tIata                       *string           `protobuf:\"bytes,3,opt,name=iata,proto3,oneof\" json:\"iata,omitempty\"`\n\tIcao                       *string           `protobuf:\"bytes,4,opt,name=icao,proto3,oneof\" json:\"icao,omitempty\"`\n\tClassification             int64             `protobuf:\"varint,5,opt,name=classification,proto3\" json:\"classification,omitempty\"`\n\tName                       string            `protobuf:\"bytes,6,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription                map[string]string `protobuf:\"bytes,7,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWebsiteUrl                 *string           `protobuf:\"bytes,8,opt,name=websiteUrl,proto3,oneof\" json:\"websiteUrl,omitempty\"`\n\tWikipediaUrl      "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 409, "end_line": 433, "text": "func (x *Airline) Reset() {\n\t*x = Airline{}\n\tmi := &file_schedules_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Airline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Airline) ProtoMessage() {}\n\nfunc (x *Airline) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [409, 433], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "Airline", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *Airline) Reset() {\n\t*x = Airline{}\n\tmi := &file_schedules_proto_msgTypes[4]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Airline) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Airline) ProtoMessage() {}\nfunc (x *Airline) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[4]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#16", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 434, "end_line": 466, "text": "// Deprecated: Use Airline.ProtoReflect.Descriptor instead.\nfunc (*Airline) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *Airline) GetId() string {\n\tif x != nil && x.Id != nil {\n\t\treturn *x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}\n", "n_tokens": 177, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [435, 466], "def_symbols": ["Descriptor", "GetId", "GetDesignator", "GetIata", "GetIcao"], "symbols": ["Descriptor", "GetId", "GetDesignator", "GetIata", "GetIcao", "Deprecated", "Use", "Airline", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_schedules_proto_rawDescGZIP", "string", "nil", "Designator", "Iata", "Icao"], "doc_head": "// Deprecated: Use Airline.ProtoReflect.Descriptor instead.\nfunc (*Airline) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{4}\n}\nfunc (x *Airline) GetId() string {\n\tif x != nil && x.Id != nil {\n\t\treturn *x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetDesignator() string {\n\tif x != nil {\n\t\treturn x.Designator\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetIata() string {\n\tif x != nil && x.Iata != nil {\n\t\treturn *x.Iata\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetIcao() string {\n\tif x != nil && x.Icao != nil {\n\t\treturn *x.Icao\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#17", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 467, "end_line": 508, "text": "func (x *Airline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\n\nfunc (x *Airline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Airline) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}\n", "n_tokens": 197, "primary_symbol": "GetClassification", "primary_kind": "function", "primary_span": [467, 508], "def_symbols": ["GetClassification", "GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl"], "symbols": ["GetClassification", "GetName", "GetDescription", "GetWebsiteUrl", "GetWikipediaUrl", "GetFacebookUrl", "func", "Airline", "int64", "nil", "return", "Classification", "string", "Name", "map", "Description", "WebsiteUrl", "WikipediaUrl", "FacebookUrl"], "doc_head": "func (x *Airline) GetClassification() int64 {\n\tif x != nil {\n\t\treturn x.Classification\n\t}\n\treturn 0\n}\nfunc (x *Airline) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetWebsiteUrl() string {\n\tif x != nil && x.WebsiteUrl != nil {\n\t\treturn *x.WebsiteUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Airline) GetFacebookUrl() string {\n\tif x != nil && x.FacebookUrl != nil {\n\t\treturn *x.FacebookUrl\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#18", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 509, "end_line": 543, "text": "func (x *Airline) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetRectImageName() string {\n\tif x != nil && x.RectImageName != nil {\n\t\treturn *x.RectImageName\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetSquareImageName() string {\n\tif x != nil && x.SquareImageName != nil {\n\t\treturn *x.SquareImageName\n\t}\n\treturn \"\"\n}\n\nfunc (x *Airline) GetTailImageName() string {\n\tif x != nil && x.TailImageName != nil {\n\t\treturn *x.TailImageName\n\t}\n\treturn \"\"\n}\n", "n_tokens": 200, "primary_symbol": "GetTwitterUrl", "primary_kind": "function", "primary_span": [509, 543], "def_symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetRectImageName", "GetSquareImageName", "GetTailImageName"], "symbols": ["GetTwitterUrl", "GetReservationTelephoneNumber", "GetRectImageName", "GetSquareImageName", "GetTailImageName", "func", "Airline", "string", "nil", "TwitterUrl", "return", "ReservationTelephoneNumber", "RectImageName", "SquareImageName", "TailImageName"], "doc_head": "func (x *Airline) GetTwitterUrl() string {\n\tif x != nil && x.TwitterUrl != nil {\n\t\treturn *x.TwitterUrl\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetReservationTelephoneNumber() string {\n\tif x != nil && x.ReservationTelephoneNumber != nil {\n\t\treturn *x.ReservationTelephoneNumber\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetRectImageName() string {\n\tif x != nil && x.RectImageName != nil {\n\t\treturn *x.RectImageName\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetSquareImageName() string {\n\tif x != nil && x.SquareImageName != nil {\n\t\treturn *x.SquareImageName\n\t}\n\treturn \"\"\n}\nfunc (x *Airline) GetTailImageName() string {\n\tif x != nil && x.TailImageName != nil {\n\t\treturn *x.TailImageName\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#19", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 544, "end_line": 564, "text": "type Aircraft struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType            string            `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName            string            `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,4,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,5,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tEngine          *string           `protobuf:\"bytes,6,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32          `protobuf:\"fixed32,7,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32          `protobuf:\"fixed32,8,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspan        *float32          `protobuf:\"fixed32,9,opt,name=wingspan,proto3,oneof\" json:\"wingspan,omitempty\"`\n\tLength          *float32          `protobuf:\"fixed32,10,opt,name=length,proto3,oneof\" json:\"length,omitempty\"`\n\tHeight          *float32          `protobuf:\"fixed32,11,opt,name=height,proto3,oneof\" json:\"height,omitempty\"`\n\tSeatingCapacity *int64            `protobuf:\"varint,12,opt,name=seatingCapacity,proto3,oneof\" json:\"seatingCapacity,omitempty\"`\n\tFlightRange     *float32          `protobuf:\"fixed32,13,opt,name=flightRange,proto3,oneof\" json:\"flightRange,omitempty\"`\n\tCrewSize        *int64            `protobuf:\"varint,14,opt,name=crewSize,proto3,oneof\" json:\"crewSize,omitempty\"`\n}\n", "n_tokens": 472, "primary_symbol": "", "primary_kind": "", "primary_span": [544, 564], "def_symbols": [], "symbols": ["type", "Aircraft", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Type", "Name", "Description", "map", "rep", "description", "protobuf_key", "key", "protobuf_val", "value", "WikipediaUrl", "wikipediaUrl", "Engine", "engine", "oneof", "AverageSpeed", "float32", "fixed32", "averageSpeed", "WideBody", "wideBody", "Wingspan", "wingspan", "Length", "length", "Height", "height", "SeatingCapacity", "int64", "varint", "seatingCapacity", "FlightRange", "flightRange", "CrewSize", "crewSize"], "doc_head": "type Aircraft struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId              string            `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType            string            `protobuf:\"bytes,2,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tName            string            `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tDescription     map[string]string `protobuf:\"bytes,4,rep,name=description,proto3\" json:\"description,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tWikipediaUrl    map[string]string `protobuf:\"bytes,5,rep,name=wikipediaUrl,proto3\" json:\"wikipediaUrl,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tEngine          *string           `protobuf:\"bytes,6,opt,name=engine,proto3,oneof\" json:\"engine,omitempty\"`\n\tAverageSpeed    *float32          `protobuf:\"fixed32,7,opt,name=averageSpeed,proto3,oneof\" json:\"averageSpeed,omitempty\"`\n\tWideBody        *float32          `protobuf:\"fixed32,8,opt,name=wideBody,proto3,oneof\" json:\"wideBody,omitempty\"`\n\tWingspan        *flo"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#20", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 565, "end_line": 594, "text": "func (x *Aircraft) Reset() {\n\t*x = Aircraft{}\n\tmi := &file_schedules_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Aircraft) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Aircraft) ProtoMessage() {}\n\nfunc (x *Aircraft) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Aircraft.ProtoReflect.Descriptor instead.\nfunc (*Aircraft) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{5}\n}\n", "n_tokens": 200, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [565, 594], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Aircraft", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP"], "doc_head": "func (x *Aircraft) Reset() {\n\t*x = Aircraft{}\n\tmi := &file_schedules_proto_msgTypes[5]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Aircraft) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Aircraft) ProtoMessage() {}\nfunc (x *Aircraft) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[5]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Aircraft.ProtoReflect.Descriptor instead.\nfunc (*Aircraft) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{5}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#21", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 595, "end_line": 636, "text": "func (x *Aircraft) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *Aircraft) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\n\nfunc (x *Aircraft) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\n\nfunc (x *Aircraft) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}\n", "n_tokens": 176, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [595, 636], "def_symbols": ["GetId", "GetType", "GetName", "GetDescription", "GetWikipediaUrl", "GetEngine"], "symbols": ["GetId", "GetType", "GetName", "GetDescription", "GetWikipediaUrl", "GetEngine", "func", "Aircraft", "string", "nil", "return", "Type", "Name", "map", "Description", "WikipediaUrl", "Engine"], "doc_head": "func (x *Aircraft) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\nfunc (x *Aircraft) GetDescription() map[string]string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn nil\n}\nfunc (x *Aircraft) GetWikipediaUrl() map[string]string {\n\tif x != nil {\n\t\treturn x.WikipediaUrl\n\t}\n\treturn nil\n}\nfunc (x *Aircraft) GetEngine() string {\n\tif x != nil && x.Engine != nil {\n\t\treturn *x.Engine\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#22", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 637, "end_line": 671, "text": "func (x *Aircraft) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}\n", "n_tokens": 196, "primary_symbol": "GetAverageSpeed", "primary_kind": "function", "primary_span": [637, 671], "def_symbols": ["GetAverageSpeed", "GetWideBody", "GetWingspan", "GetLength", "GetHeight"], "symbols": ["GetAverageSpeed", "GetWideBody", "GetWingspan", "GetLength", "GetHeight", "func", "Aircraft", "float32", "nil", "AverageSpeed", "return", "WideBody", "Wingspan", "Length", "Height"], "doc_head": "func (x *Aircraft) GetAverageSpeed() float32 {\n\tif x != nil && x.AverageSpeed != nil {\n\t\treturn *x.AverageSpeed\n\t}\n\treturn 0\n}\nfunc (x *Aircraft) GetWideBody() float32 {\n\tif x != nil && x.WideBody != nil {\n\t\treturn *x.WideBody\n\t}\n\treturn 0\n}\nfunc (x *Aircraft) GetWingspan() float32 {\n\tif x != nil && x.Wingspan != nil {\n\t\treturn *x.Wingspan\n\t}\n\treturn 0\n}\nfunc (x *Aircraft) GetLength() float32 {\n\tif x != nil && x.Length != nil {\n\t\treturn *x.Length\n\t}\n\treturn 0\n}\nfunc (x *Aircraft) GetHeight() float32 {\n\tif x != nil && x.Height != nil {\n\t\treturn *x.Height\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#23", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 672, "end_line": 692, "text": "func (x *Aircraft) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\n\nfunc (x *Aircraft) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}\n", "n_tokens": 125, "primary_symbol": "GetSeatingCapacity", "primary_kind": "function", "primary_span": [672, 692], "def_symbols": ["GetSeatingCapacity", "GetFlightRange", "GetCrewSize"], "symbols": ["GetSeatingCapacity", "GetFlightRange", "GetCrewSize", "func", "Aircraft", "int64", "nil", "SeatingCapacity", "return", "float32", "FlightRange", "CrewSize"], "doc_head": "func (x *Aircraft) GetSeatingCapacity() int64 {\n\tif x != nil && x.SeatingCapacity != nil {\n\t\treturn *x.SeatingCapacity\n\t}\n\treturn 0\n}\nfunc (x *Aircraft) GetFlightRange() float32 {\n\tif x != nil && x.FlightRange != nil {\n\t\treturn *x.FlightRange\n\t}\n\treturn 0\n}\nfunc (x *Aircraft) GetCrewSize() int64 {\n\tif x != nil && x.CrewSize != nil {\n\t\treturn *x.CrewSize\n\t}\n\treturn 0\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#24", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 693, "end_line": 717, "text": "type Flight struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                   string       `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tAirline              *Airline     `protobuf:\"bytes,2,opt,name=airline,proto3,oneof\" json:\"airline,omitempty\"`\n\tFlightNumber         int32        `protobuf:\"varint,3,opt,name=flightNumber,proto3\" json:\"flightNumber,omitempty\"`\n\tItinerary            int32        `protobuf:\"varint,4,opt,name=itinerary,proto3\" json:\"itinerary,omitempty\"`\n\tSequence             int32        `protobuf:\"varint,5,opt,name=sequence,proto3\" json:\"sequence,omitempty\"`\n\tDepartureAirport     *Airport     `protobuf:\"bytes,6,opt,name=departureAirport,proto3,oneof\" json:\"departureAirport,omitempty\"`\n\tArrivalAirport       *Airport     `protobuf:\"bytes,7,opt,name=arrivalAirport,proto3,oneof\" json:\"arrivalAirport,omitempty\"`\n\tAircraft             *Aircraft    `protobuf:\"bytes,8,opt,name=aircraft,proto3,oneof\" json:\"aircraft,omitempty\"`\n\tScheduledDepartureAt string       `protobuf:\"bytes,9,opt,name=scheduledDepartureAt,proto3\" json:\"scheduledDepartureAt,omitempty\"`\n\tExpectedDepartureAt  string       `protobuf:\"bytes,10,opt,name=expectedDepartureAt,proto3\" json:\"expectedDepartureAt,omitempty\"`\n\tActualDepartureAt    *string      `protobuf:\"bytes,11,opt,name=actualDepartureAt,proto3,oneof\" json:\"actualDepartureAt,omitempty\"`\n\tScheduledArrivalAt   string       `protobuf:\"bytes,12,opt,name=scheduledArrivalAt,proto3\" json:\"scheduledArrivalAt,omitempty\"`\n\tExpectedArrivalAt    string       `protobuf:\"bytes,13,opt,name=expectedArrivalAt,proto3\" json:\"expectedArrivalAt,omitempty\"`\n\tActualArrivalAt      *string      `protobuf:\"bytes,14,opt,name=actualArrivalAt,proto3,oneof\" json:\"actualArrivalAt,omitempty\"`\n\tCodeshare            []*Codeshare `protobuf:\"bytes,15,rep,name=codeshare,proto3\" json:\"codeshare,omitempty\"`\n\tDepartureStatus      string       `protobuf:\"bytes,16,opt,name=departureStatus,proto3\" json:\"departureStatus,omitempty\"`\n\tArrivalStatus        string       `protobuf:\"bytes,17,opt,name=arrivalStatus,proto3\" json:\"arrivalStatus,omitempty\"`\n\tStatus               string       `protobuf:\"bytes,18,opt,name=status,proto3\" json:\"status,omitempty\"`\n}\n", "n_tokens": 554, "primary_symbol": "", "primary_kind": "", "primary_span": [693, 717], "def_symbols": [], "symbols": ["type", "Flight", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "Airline", "airline", "oneof", "FlightNumber", "int32", "varint", "flightNumber", "Itinerary", "itinerary", "Sequence", "sequence", "DepartureAirport", "Airport", "departureAirport", "ArrivalAirport", "arrivalAirport", "Aircraft", "aircraft", "ScheduledDepartureAt", "scheduledDepartureAt", "ExpectedDepartureAt", "expectedDepartureAt", "ActualDepartureAt", "actualDepartureAt", "ScheduledArrivalAt", "scheduledArrivalAt", "ExpectedArrivalAt", "expectedArrivalAt", "ActualArrivalAt", "actualArrivalAt", "Codeshare", "rep", "codeshare", "DepartureStatus", "departureStatus", "ArrivalStatus", "arrivalStatus", "Status", "status"], "doc_head": "type Flight struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId                   string       `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tAirline              *Airline     `protobuf:\"bytes,2,opt,name=airline,proto3,oneof\" json:\"airline,omitempty\"`\n\tFlightNumber         int32        `protobuf:\"varint,3,opt,name=flightNumber,proto3\" json:\"flightNumber,omitempty\"`\n\tItinerary            int32        `protobuf:\"varint,4,opt,name=itinerary,proto3\" json:\"itinerary,omitempty\"`\n\tSequence             int32        `protobuf:\"varint,5,opt,name=sequence,proto3\" json:\"sequence,omitempty\"`\n\tDepartureAirport     *Airport     `protobuf:\"bytes,6,opt,name=departureAirport,proto3,oneof\" json:\"departureAirport,omitempty\"`\n\tArrivalAirport       *Airport     `protobuf:\"bytes,7,opt,name=arrivalAirport,proto3,oneof\" json:\"arrivalAirport,omitempty\"`\n\tAircraft             *Aircraft    `protobuf:\"bytes,8,opt,name=aircraft,proto3,oneof\" json:\"aircraft,omitempty\"`\n\tScheduledDepartureAt string       `protobuf:\"bytes,9,opt,name=scheduledDepartureAt,proto3\" json:\"scheduledDepartureAt,omitempty\"`\n\tExpectedDepartureAt  string "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#25", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 718, "end_line": 747, "text": "func (x *Flight) Reset() {\n\t*x = Flight{}\n\tmi := &file_schedules_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Flight) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Flight) ProtoMessage() {}\n\nfunc (x *Flight) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Flight.ProtoReflect.Descriptor instead.\nfunc (*Flight) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{6}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [718, 747], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Flight", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP"], "doc_head": "func (x *Flight) Reset() {\n\t*x = Flight{}\n\tmi := &file_schedules_proto_msgTypes[6]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Flight) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Flight) ProtoMessage() {}\nfunc (x *Flight) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[6]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Flight.ProtoReflect.Descriptor instead.\nfunc (*Flight) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{6}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#26", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 748, "end_line": 789, "text": "func (x *Flight) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n\nfunc (x *Flight) GetFlightNumber() int32 {\n\tif x != nil {\n\t\treturn x.FlightNumber\n\t}\n\treturn 0\n}\n\nfunc (x *Flight) GetItinerary() int32 {\n\tif x != nil {\n\t\treturn x.Itinerary\n\t}\n\treturn 0\n}\n\nfunc (x *Flight) GetSequence() int32 {\n\tif x != nil {\n\t\treturn x.Sequence\n\t}\n\treturn 0\n}\n\nfunc (x *Flight) GetDepartureAirport() *Airport {\n\tif x != nil {\n\t\treturn x.DepartureAirport\n\t}\n\treturn nil\n}\n", "n_tokens": 183, "primary_symbol": "GetId", "primary_kind": "function", "primary_span": [748, 789], "def_symbols": ["GetId", "GetAirline", "GetFlightNumber", "GetItinerary", "GetSequence", "GetDepartureAirport"], "symbols": ["GetId", "GetAirline", "GetFlightNumber", "GetItinerary", "GetSequence", "GetDepartureAirport", "func", "Flight", "string", "nil", "return", "Airline", "int32", "FlightNumber", "Itinerary", "Sequence", "Airport", "DepartureAirport"], "doc_head": "func (x *Flight) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\nfunc (x *Flight) GetFlightNumber() int32 {\n\tif x != nil {\n\t\treturn x.FlightNumber\n\t}\n\treturn 0\n}\nfunc (x *Flight) GetItinerary() int32 {\n\tif x != nil {\n\t\treturn x.Itinerary\n\t}\n\treturn 0\n}\nfunc (x *Flight) GetSequence() int32 {\n\tif x != nil {\n\t\treturn x.Sequence\n\t}\n\treturn 0\n}\nfunc (x *Flight) GetDepartureAirport() *Airport {\n\tif x != nil {\n\t\treturn x.DepartureAirport\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#27", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 790, "end_line": 831, "text": "func (x *Flight) GetArrivalAirport() *Airport {\n\tif x != nil {\n\t\treturn x.ArrivalAirport\n\t}\n\treturn nil\n}\n\nfunc (x *Flight) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}\n\nfunc (x *Flight) GetScheduledDepartureAt() string {\n\tif x != nil {\n\t\treturn x.ScheduledDepartureAt\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetExpectedDepartureAt() string {\n\tif x != nil {\n\t\treturn x.ExpectedDepartureAt\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetActualDepartureAt() string {\n\tif x != nil && x.ActualDepartureAt != nil {\n\t\treturn *x.ActualDepartureAt\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetScheduledArrivalAt() string {\n\tif x != nil {\n\t\treturn x.ScheduledArrivalAt\n\t}\n\treturn \"\"\n}\n", "n_tokens": 206, "primary_symbol": "GetArrivalAirport", "primary_kind": "function", "primary_span": [790, 831], "def_symbols": ["GetArrivalAirport", "GetAircraft", "GetScheduledDepartureAt", "GetExpectedDepartureAt", "GetActualDepartureAt", "GetScheduledArrivalAt"], "symbols": ["GetArrivalAirport", "GetAircraft", "GetScheduledDepartureAt", "GetExpectedDepartureAt", "GetActualDepartureAt", "GetScheduledArrivalAt", "func", "Flight", "Airport", "nil", "return", "ArrivalAirport", "Aircraft", "string", "ScheduledDepartureAt", "ExpectedDepartureAt", "ActualDepartureAt", "ScheduledArrivalAt"], "doc_head": "func (x *Flight) GetArrivalAirport() *Airport {\n\tif x != nil {\n\t\treturn x.ArrivalAirport\n\t}\n\treturn nil\n}\nfunc (x *Flight) GetAircraft() *Aircraft {\n\tif x != nil {\n\t\treturn x.Aircraft\n\t}\n\treturn nil\n}\nfunc (x *Flight) GetScheduledDepartureAt() string {\n\tif x != nil {\n\t\treturn x.ScheduledDepartureAt\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetExpectedDepartureAt() string {\n\tif x != nil {\n\t\treturn x.ExpectedDepartureAt\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetActualDepartureAt() string {\n\tif x != nil && x.ActualDepartureAt != nil {\n\t\treturn *x.ActualDepartureAt\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetScheduledArrivalAt() string {\n\tif x != nil {\n\t\treturn x.ScheduledArrivalAt\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#28", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 832, "end_line": 873, "text": "func (x *Flight) GetExpectedArrivalAt() string {\n\tif x != nil {\n\t\treturn x.ExpectedArrivalAt\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetActualArrivalAt() string {\n\tif x != nil && x.ActualArrivalAt != nil {\n\t\treturn *x.ActualArrivalAt\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetCodeshare() []*Codeshare {\n\tif x != nil {\n\t\treturn x.Codeshare\n\t}\n\treturn nil\n}\n\nfunc (x *Flight) GetDepartureStatus() string {\n\tif x != nil {\n\t\treturn x.DepartureStatus\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetArrivalStatus() string {\n\tif x != nil {\n\t\treturn x.ArrivalStatus\n\t}\n\treturn \"\"\n}\n\nfunc (x *Flight) GetStatus() string {\n\tif x != nil {\n\t\treturn x.Status\n\t}\n\treturn \"\"\n}\n", "n_tokens": 196, "primary_symbol": "GetExpectedArrivalAt", "primary_kind": "function", "primary_span": [832, 873], "def_symbols": ["GetExpectedArrivalAt", "GetActualArrivalAt", "GetCodeshare", "GetDepartureStatus", "GetArrivalStatus", "GetStatus"], "symbols": ["GetExpectedArrivalAt", "GetActualArrivalAt", "GetCodeshare", "GetDepartureStatus", "GetArrivalStatus", "GetStatus", "func", "Flight", "string", "nil", "return", "ExpectedArrivalAt", "ActualArrivalAt", "Codeshare", "DepartureStatus", "ArrivalStatus", "Status"], "doc_head": "func (x *Flight) GetExpectedArrivalAt() string {\n\tif x != nil {\n\t\treturn x.ExpectedArrivalAt\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetActualArrivalAt() string {\n\tif x != nil && x.ActualArrivalAt != nil {\n\t\treturn *x.ActualArrivalAt\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetCodeshare() []*Codeshare {\n\tif x != nil {\n\t\treturn x.Codeshare\n\t}\n\treturn nil\n}\nfunc (x *Flight) GetDepartureStatus() string {\n\tif x != nil {\n\t\treturn x.DepartureStatus\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetArrivalStatus() string {\n\tif x != nil {\n\t\treturn x.ArrivalStatus\n\t}\n\treturn \"\"\n}\nfunc (x *Flight) GetStatus() string {\n\tif x != nil {\n\t\treturn x.Status\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#29", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 874, "end_line": 885, "text": "type Schedule struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDepartureAirport *Airport  `protobuf:\"bytes,1,opt,name=departureAirport,proto3\" json:\"departureAirport,omitempty\"`\n\tArrivalAirport   *Airport  `protobuf:\"bytes,2,opt,name=arrivalAirport,proto3\" json:\"arrivalAirport,omitempty\"`\n\tAirline          *Airline  `protobuf:\"bytes,3,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tFlightNumber     int32     `protobuf:\"varint,4,opt,name=flightNumber,proto3\" json:\"flightNumber,omitempty\"`\n\tFlights          []*Flight `protobuf:\"bytes,5,rep,name=flights,proto3\" json:\"flights,omitempty\"`\n}\n", "n_tokens": 166, "primary_symbol": "", "primary_kind": "", "primary_span": [874, 885], "def_symbols": [], "symbols": ["type", "Schedule", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "DepartureAirport", "Airport", "protobuf", "bytes", "opt", "name", "departureAirport", "proto3", "json", "omitempty", "ArrivalAirport", "arrivalAirport", "Airline", "airline", "FlightNumber", "int32", "varint", "flightNumber", "Flights", "Flight", "rep", "flights"], "doc_head": "type Schedule struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDepartureAirport *Airport  `protobuf:\"bytes,1,opt,name=departureAirport,proto3\" json:\"departureAirport,omitempty\"`\n\tArrivalAirport   *Airport  `protobuf:\"bytes,2,opt,name=arrivalAirport,proto3\" json:\"arrivalAirport,omitempty\"`\n\tAirline          *Airline  `protobuf:\"bytes,3,opt,name=airline,proto3\" json:\"airline,omitempty\"`\n\tFlightNumber     int32     `protobuf:\"varint,4,opt,name=flightNumber,proto3\" json:\"flightNumber,omitempty\"`\n\tFlights          []*Flight `protobuf:\"bytes,5,rep,name=flights,proto3\" json:\"flights,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#30", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 886, "end_line": 915, "text": "func (x *Schedule) Reset() {\n\t*x = Schedule{}\n\tmi := &file_schedules_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *Schedule) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Schedule) ProtoMessage() {}\n\nfunc (x *Schedule) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.\nfunc (*Schedule) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{7}\n}\n", "n_tokens": 195, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [886, 915], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "func", "Schedule", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP"], "doc_head": "func (x *Schedule) Reset() {\n\t*x = Schedule{}\n\tmi := &file_schedules_proto_msgTypes[7]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *Schedule) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*Schedule) ProtoMessage() {}\nfunc (x *Schedule) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[7]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.\nfunc (*Schedule) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{7}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#31", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 916, "end_line": 950, "text": "func (x *Schedule) GetDepartureAirport() *Airport {\n\tif x != nil {\n\t\treturn x.DepartureAirport\n\t}\n\treturn nil\n}\n\nfunc (x *Schedule) GetArrivalAirport() *Airport {\n\tif x != nil {\n\t\treturn x.ArrivalAirport\n\t}\n\treturn nil\n}\n\nfunc (x *Schedule) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\n\nfunc (x *Schedule) GetFlightNumber() int32 {\n\tif x != nil {\n\t\treturn x.FlightNumber\n\t}\n\treturn 0\n}\n\nfunc (x *Schedule) GetFlights() []*Flight {\n\tif x != nil {\n\t\treturn x.Flights\n\t}\n\treturn nil\n}\n", "n_tokens": 160, "primary_symbol": "GetDepartureAirport", "primary_kind": "function", "primary_span": [916, 950], "def_symbols": ["GetDepartureAirport", "GetArrivalAirport", "GetAirline", "GetFlightNumber", "GetFlights"], "symbols": ["GetDepartureAirport", "GetArrivalAirport", "GetAirline", "GetFlightNumber", "GetFlights", "func", "Schedule", "Airport", "nil", "return", "DepartureAirport", "ArrivalAirport", "Airline", "int32", "FlightNumber", "Flight", "Flights"], "doc_head": "func (x *Schedule) GetDepartureAirport() *Airport {\n\tif x != nil {\n\t\treturn x.DepartureAirport\n\t}\n\treturn nil\n}\nfunc (x *Schedule) GetArrivalAirport() *Airport {\n\tif x != nil {\n\t\treturn x.ArrivalAirport\n\t}\n\treturn nil\n}\nfunc (x *Schedule) GetAirline() *Airline {\n\tif x != nil {\n\t\treturn x.Airline\n\t}\n\treturn nil\n}\nfunc (x *Schedule) GetFlightNumber() int32 {\n\tif x != nil {\n\t\treturn x.FlightNumber\n\t}\n\treturn 0\n}\nfunc (x *Schedule) GetFlights() []*Flight {\n\tif x != nil {\n\t\treturn x.Flights\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#32", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 951, "end_line": 962, "text": "type SearchRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDepartureAirport string  `protobuf:\"bytes,1,opt,name=departureAirport,proto3\" json:\"departureAirport,omitempty\"`\n\tArrivalAirport   string  `protobuf:\"bytes,2,opt,name=arrivalAirport,proto3\" json:\"arrivalAirport,omitempty\"`\n\tDepartureDate    string  `protobuf:\"bytes,3,opt,name=departureDate,proto3\" json:\"departureDate,omitempty\"`\n\tLimit            uint32  `protobuf:\"varint,4,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor           *string `protobuf:\"bytes,5,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}\n", "n_tokens": 160, "primary_symbol": "", "primary_kind": "", "primary_span": [951, 962], "def_symbols": [], "symbols": ["type", "SearchRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "DepartureAirport", "string", "protobuf", "bytes", "opt", "name", "departureAirport", "proto3", "json", "omitempty", "ArrivalAirport", "arrivalAirport", "DepartureDate", "departureDate", "Limit", "uint32", "varint", "limit", "Cursor", "cursor", "oneof"], "doc_head": "type SearchRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDepartureAirport string  `protobuf:\"bytes,1,opt,name=departureAirport,proto3\" json:\"departureAirport,omitempty\"`\n\tArrivalAirport   string  `protobuf:\"bytes,2,opt,name=arrivalAirport,proto3\" json:\"arrivalAirport,omitempty\"`\n\tDepartureDate    string  `protobuf:\"bytes,3,opt,name=departureDate,proto3\" json:\"departureDate,omitempty\"`\n\tLimit            uint32  `protobuf:\"varint,4,opt,name=limit,proto3\" json:\"limit,omitempty\"`\n\tCursor           *string `protobuf:\"bytes,5,opt,name=cursor,proto3,oneof\" json:\"cursor,omitempty\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#33", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 33, "start_line": 963, "end_line": 987, "text": "func (x *SearchRequest) Reset() {\n\t*x = SearchRequest{}\n\tmi := &file_schedules_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchRequest) ProtoMessage() {}\n\nfunc (x *SearchRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [963, 987], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "func", "SearchRequest", "file_schedules_proto_msgTypes", "protoimpl", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *SearchRequest) Reset() {\n\t*x = SearchRequest{}\n\tmi := &file_schedules_proto_msgTypes[8]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchRequest) ProtoMessage() {}\nfunc (x *SearchRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[8]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#34", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 34, "start_line": 988, "end_line": 1027, "text": "// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchRequest) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *SearchRequest) GetDepartureAirport() string {\n\tif x != nil {\n\t\treturn x.DepartureAirport\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchRequest) GetArrivalAirport() string {\n\tif x != nil {\n\t\treturn x.ArrivalAirport\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchRequest) GetDepartureDate() string {\n\tif x != nil {\n\t\treturn x.DepartureDate\n\t}\n\treturn \"\"\n}\n\nfunc (x *SearchRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\n\nfunc (x *SearchRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}\n", "n_tokens": 203, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [989, 1027], "def_symbols": ["Descriptor", "GetDepartureAirport", "GetArrivalAirport", "GetDepartureDate", "GetLimit", "GetCursor"], "symbols": ["Descriptor", "GetDepartureAirport", "GetArrivalAirport", "GetDepartureDate", "GetLimit", "GetCursor", "Deprecated", "Use", "SearchRequest", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_schedules_proto_rawDescGZIP", "string", "nil", "DepartureAirport", "ArrivalAirport", "DepartureDate", "uint32", "Limit", "Cursor"], "doc_head": "// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.\nfunc (*SearchRequest) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{8}\n}\nfunc (x *SearchRequest) GetDepartureAirport() string {\n\tif x != nil {\n\t\treturn x.DepartureAirport\n\t}\n\treturn \"\"\n}\nfunc (x *SearchRequest) GetArrivalAirport() string {\n\tif x != nil {\n\t\treturn x.ArrivalAirport\n\t}\n\treturn \"\"\n}\nfunc (x *SearchRequest) GetDepartureDate() string {\n\tif x != nil {\n\t\treturn x.DepartureDate\n\t}\n\treturn \"\"\n}\nfunc (x *SearchRequest) GetLimit() uint32 {\n\tif x != nil {\n\t\treturn x.Limit\n\t}\n\treturn 0\n}\nfunc (x *SearchRequest) GetCursor() string {\n\tif x != nil && x.Cursor != nil {\n\t\treturn *x.Cursor\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#35", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 35, "start_line": 1028, "end_line": 1049, "text": "type SearchResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tSchedules []*Schedule `protobuf:\"bytes,1,rep,name=schedules,proto3\" json:\"schedules,omitempty\"`\n\tNext      *string     `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n}\n\nfunc (x *SearchResponse) Reset() {\n\t*x = SearchResponse{}\n\tmi := &file_schedules_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *SearchResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*SearchResponse) ProtoMessage() {}\n", "n_tokens": 159, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1037, 1049], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "SearchResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Schedules", "Schedule", "protobuf", "bytes", "rep", "name", "schedules", "proto3", "json", "omitempty", "Next", "string", "opt", "next", "oneof", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type SearchResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tSchedules []*Schedule `protobuf:\"bytes,1,rep,name=schedules,proto3\" json:\"schedules,omitempty\"`\n\tNext      *string     `protobuf:\"bytes,2,opt,name=next,proto3,oneof\" json:\"next,omitempty\"`\n}\nfunc (x *SearchResponse) Reset() {\n\t*x = SearchResponse{}\n\tmi := &file_schedules_proto_msgTypes[9]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *SearchResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*SearchResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#36", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 36, "start_line": 1050, "end_line": 1080, "text": "func (x *SearchResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchResponse) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{9}\n}\n\nfunc (x *SearchResponse) GetSchedules() []*Schedule {\n\tif x != nil {\n\t\treturn x.Schedules\n\t}\n\treturn nil\n}\n\nfunc (x *SearchResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}\n", "n_tokens": 187, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1050, 1080], "def_symbols": ["ProtoReflect", "Descriptor", "GetSchedules", "GetNext"], "symbols": ["ProtoReflect", "Descriptor", "GetSchedules", "GetNext", "func", "SearchResponse", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP", "Schedule", "Schedules", "string", "Next"], "doc_head": "func (x *SearchResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[9]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.\nfunc (*SearchResponse) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{9}\n}\nfunc (x *SearchResponse) GetSchedules() []*Schedule {\n\tif x != nil {\n\t\treturn x.Schedules\n\t}\n\treturn nil\n}\nfunc (x *SearchResponse) GetNext() string {\n\tif x != nil && x.Next != nil {\n\t\treturn *x.Next\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#37", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 37, "start_line": 1081, "end_line": 1101, "text": "type GetFlightRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *GetFlightRequest) Reset() {\n\t*x = GetFlightRequest{}\n\tmi := &file_schedules_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetFlightRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetFlightRequest) ProtoMessage() {}\n", "n_tokens": 132, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1089, 1101], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetFlightRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "string", "protobuf", "bytes", "opt", "name", "proto3", "json", "omitempty", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type GetFlightRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\nfunc (x *GetFlightRequest) Reset() {\n\t*x = GetFlightRequest{}\n\tmi := &file_schedules_proto_msgTypes[10]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetFlightRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetFlightRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#38", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 38, "start_line": 1102, "end_line": 1125, "text": "func (x *GetFlightRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetFlightRequest.ProtoReflect.Descriptor instead.\nfunc (*GetFlightRequest) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{10}\n}\n\nfunc (x *GetFlightRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n", "n_tokens": 154, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1102, 1125], "def_symbols": ["ProtoReflect", "Descriptor", "GetId"], "symbols": ["ProtoReflect", "Descriptor", "GetId", "func", "GetFlightRequest", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP", "string"], "doc_head": "func (x *GetFlightRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[10]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetFlightRequest.ProtoReflect.Descriptor instead.\nfunc (*GetFlightRequest) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{10}\n}\nfunc (x *GetFlightRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#39", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 39, "start_line": 1126, "end_line": 1146, "text": "type GetFlightResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tFlight *Flight `protobuf:\"bytes,1,opt,name=flight,proto3\" json:\"flight,omitempty\"`\n}\n\nfunc (x *GetFlightResponse) Reset() {\n\t*x = GetFlightResponse{}\n\tmi := &file_schedules_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *GetFlightResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetFlightResponse) ProtoMessage() {}\n", "n_tokens": 135, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1134, 1146], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "GetFlightResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Flight", "protobuf", "bytes", "opt", "name", "flight", "proto3", "json", "omitempty", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type GetFlightResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tFlight *Flight `protobuf:\"bytes,1,opt,name=flight,proto3\" json:\"flight,omitempty\"`\n}\nfunc (x *GetFlightResponse) Reset() {\n\t*x = GetFlightResponse{}\n\tmi := &file_schedules_proto_msgTypes[11]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *GetFlightResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*GetFlightResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#40", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 40, "start_line": 1147, "end_line": 1170, "text": "func (x *GetFlightResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetFlightResponse.ProtoReflect.Descriptor instead.\nfunc (*GetFlightResponse) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{11}\n}\n\nfunc (x *GetFlightResponse) GetFlight() *Flight {\n\tif x != nil {\n\t\treturn x.Flight\n\t}\n\treturn nil\n}\n", "n_tokens": 157, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1147, 1170], "def_symbols": ["ProtoReflect", "Descriptor", "GetFlight"], "symbols": ["ProtoReflect", "Descriptor", "GetFlight", "func", "GetFlightResponse", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP", "Flight"], "doc_head": "func (x *GetFlightResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[11]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use GetFlightResponse.ProtoReflect.Descriptor instead.\nfunc (*GetFlightResponse) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{11}\n}\nfunc (x *GetFlightResponse) GetFlight() *Flight {\n\tif x != nil {\n\t\treturn x.Flight\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#41", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 41, "start_line": 1171, "end_line": 1191, "text": "type BatchGetFlightRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tIds []string `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n}\n\nfunc (x *BatchGetFlightRequest) Reset() {\n\t*x = BatchGetFlightRequest{}\n\tmi := &file_schedules_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetFlightRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetFlightRequest) ProtoMessage() {}\n", "n_tokens": 141, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1179, 1191], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetFlightRequest", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Ids", "string", "protobuf", "bytes", "rep", "name", "ids", "proto3", "json", "omitempty", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "return", "MessageStringOf"], "doc_head": "type BatchGetFlightRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tIds []string `protobuf:\"bytes,1,rep,name=ids,proto3\" json:\"ids,omitempty\"`\n}\nfunc (x *BatchGetFlightRequest) Reset() {\n\t*x = BatchGetFlightRequest{}\n\tmi := &file_schedules_proto_msgTypes[12]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetFlightRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetFlightRequest) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#42", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 42, "start_line": 1192, "end_line": 1215, "text": "func (x *BatchGetFlightRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetFlightRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetFlightRequest) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{12}\n}\n\nfunc (x *BatchGetFlightRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}\n", "n_tokens": 161, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1192, 1215], "def_symbols": ["ProtoReflect", "Descriptor", "GetIds"], "symbols": ["ProtoReflect", "Descriptor", "GetIds", "func", "BatchGetFlightRequest", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP", "string", "Ids"], "doc_head": "func (x *BatchGetFlightRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[12]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetFlightRequest.ProtoReflect.Descriptor instead.\nfunc (*BatchGetFlightRequest) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{12}\n}\nfunc (x *BatchGetFlightRequest) GetIds() []string {\n\tif x != nil {\n\t\treturn x.Ids\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#43", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 43, "start_line": 1216, "end_line": 1236, "text": "type BatchGetFlightResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tFlights []*Flight `protobuf:\"bytes,1,rep,name=flights,proto3\" json:\"flights,omitempty\"`\n}\n\nfunc (x *BatchGetFlightResponse) Reset() {\n\t*x = BatchGetFlightResponse{}\n\tmi := &file_schedules_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\n\nfunc (x *BatchGetFlightResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*BatchGetFlightResponse) ProtoMessage() {}\n", "n_tokens": 144, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [1224, 1236], "def_symbols": ["Reset", "String", "ProtoMessage"], "symbols": ["Reset", "String", "ProtoMessage", "type", "BatchGetFlightResponse", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Flights", "Flight", "protobuf", "bytes", "rep", "name", "flights", "proto3", "json", "omitempty", "func", "file_schedules_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "type BatchGetFlightResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tFlights []*Flight `protobuf:\"bytes,1,rep,name=flights,proto3\" json:\"flights,omitempty\"`\n}\nfunc (x *BatchGetFlightResponse) Reset() {\n\t*x = BatchGetFlightResponse{}\n\tmi := &file_schedules_proto_msgTypes[13]\n\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\tms.StoreMessageInfo(mi)\n}\nfunc (x *BatchGetFlightResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*BatchGetFlightResponse) ProtoMessage() {}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#44", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 44, "start_line": 1237, "end_line": 1253, "text": "func (x *BatchGetFlightResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use BatchGetFlightResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetFlightResponse) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{13}\n}\n", "n_tokens": 129, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [1237, 1253], "def_symbols": ["ProtoReflect", "Descriptor"], "symbols": ["ProtoReflect", "Descriptor", "func", "BatchGetFlightResponse", "protoreflect", "Message", "file_schedules_proto_msgTypes", "nil", "protoimpl", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_schedules_proto_rawDescGZIP"], "doc_head": "func (x *BatchGetFlightResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_schedules_proto_msgTypes[13]\n\tif x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use BatchGetFlightResponse.ProtoReflect.Descriptor instead.\nfunc (*BatchGetFlightResponse) Descriptor() ([]byte, []int) {\n\treturn file_schedules_proto_rawDescGZIP(), []int{13}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#45", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 45, "start_line": 1254, "end_line": 1619, "text": "func (x *BatchGetFlightResponse) GetFlights() []*Flight {\n\tif x != nil {\n\t\treturn x.Flights\n\t}\n\treturn nil\n}\n\nvar File_schedules_proto protoreflect.FileDescriptor\n\nvar file_schedules_proto_rawDesc = []byte{\n\t0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,\n\t0x6f, 0x12, 0x15, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x22, 0x49, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65,\n\t0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12,\n\t0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d,\n\t0x62, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,\n\t0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61,\n\t0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a,\n\t0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,\n\t0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,\n\t0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,\n\t0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,\n\t0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,\n\t0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,\n\t0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,\n\t0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,\n\t0x01, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,\n\t0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63,\n\t0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,\n\t0x72, 0x79, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01,\n\t0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,\n\t0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,\n\t0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,\n\t0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22,\n\t0xd2, 0x08, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,\n\t0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,\n\t0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,\n\t0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,\n\t0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x61,\n\t0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x88,\n\t0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,\n\t0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x69,\n\t0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x43, 0x69, 0x74, 0x79, 0x48, 0x03, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,\n\t0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,\n\t0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e,\n\t0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b,\n\t0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,\n\t0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x64,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,\n\t0x32, 0x2f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,\n\t0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,\n\t0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,\n\t0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c,\n\t0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65,\n\t0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e,\n\t0x77, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52,\n\t0x75, 0x6e, 0x77, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x77, 0x65,\n\t0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0c, 0x77,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x30, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,\n\t0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,\n\t0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72,\n\t0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,\n\t0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,\n\t0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74,\n\t0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a,\n\t0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,\n\t0x03, 0x66, 0x61, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x66, 0x61,\n\t0x61, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,\n\t0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,\n\t0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,\n\t0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,\n\t0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,\n\t0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03,\n\t0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05,\n\t0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0d,\n\t0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a,\n\t0x0c, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a,\n\t0x0b, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04,\n\t0x5f, 0x66, 0x61, 0x61, 0x22, 0xaf, 0x07, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,\n\t0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,\n\t0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67,\n\t0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17,\n\t0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04,\n\t0x69, 0x63, 0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,\n\t0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,\n\t0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,\n\t0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,\n\t0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,\n\t0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30,\n\t0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,\n\t0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,\n\t0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n\t0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x77, 0x65,\n\t0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0c, 0x77,\n\t0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28,\n\t0x0b, 0x32, 0x30, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,\n\t0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,\n\t0x65, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e,\n\t0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72,\n\t0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,\n\t0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,\n\t0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x74,\n\t0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a,\n\t0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,\n\t0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65,\n\t0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,\n\t0x09, 0x48, 0x06, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,\n\t0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e,\n\t0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x72, 0x65, 0x63,\n\t0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,\n\t0x0f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,\n\t0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,\n\t0x74, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,\n\t0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65,\n\t0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72,\n\t0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,\n\t0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,\n\t0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,\n\t0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70,\n\t0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,\n\t0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,\n\t0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,\n\t0x07, 0x0a, 0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61,\n\t0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,\n\t0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,\n\t0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42,\n\t0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,\n\t0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x10,\n\t0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,\n\t0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,\n\t0x4e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61,\n\t0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x06, 0x0a, 0x08, 0x41, 0x69, 0x72, 0x63, 0x72,\n\t0x61, 0x66, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,\n\t0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,\n\t0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x64,\n\t0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,\n\t0x32, 0x30, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66,\n\t0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,\n\t0x55, 0x0a, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18,\n\t0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69,\n\t0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61,\n\t0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65,\n\t0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,\n\t0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,\n\t0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,\n\t0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65,\n\t0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,\n\t0x77, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02,\n\t0x52, 0x08, 0x77, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,\n\t0x08, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48,\n\t0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,\n\t0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04,\n\t0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68,\n\t0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x06, 0x68,\n\t0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74,\n\t0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,\n\t0x03, 0x48, 0x06, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61,\n\t0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68,\n\t0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0b,\n\t0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,\n\t0x0a, 0x08, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,\n\t0x48, 0x08, 0x52, 0x08, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x1a,\n\t0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,\n\t0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,\n\t0x3f, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x45,\n\t0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,\n\t0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,\n\t0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09,\n\t0x5f, 0x77, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69,\n\t0x6e, 0x67, 0x73, 0x70, 0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,\n\t0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10,\n\t0x5f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,\n\t0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,\n\t0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xce, 0x07,\n\t0x0a, 0x06, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c,\n\t0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x69, 0x72,\n\t0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68,\n\t0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66,\n\t0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69,\n\t0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,\n\t0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,\n\t0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71,\n\t0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,\n\t0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,\n\t0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,\n\t0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x48,\n\t0x01, 0x52, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70,\n\t0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,\n\t0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,\n\t0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x02,\n\t0x52, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,\n\t0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18,\n\t0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69,\n\t0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x48, 0x03, 0x52, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61,\n\t0x66, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,\n\t0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65,\n\t0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70,\n\t0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74,\n\t0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,\n\t0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x11, 0x61,\n\t0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,\n\t0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e,\n\t0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76,\n\t0x61, 0x6c, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x12, 0x2c,\n\t0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61,\n\t0x6c, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63,\n\t0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0f,\n\t0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x18,\n\t0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41,\n\t0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x63,\n\t0x6f, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,\n\t0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65,\n\t0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,\n\t0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,\n\t0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53,\n\t0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,\n\t0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72,\n\t0x72, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,\n\t0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,\n\t0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42,\n\t0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,\n\t0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x69, 0x72, 0x63,\n\t0x72, 0x61, 0x66, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44,\n\t0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,\n\t0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x22, 0xb5,\n\t0x02, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x64,\n\t0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69,\n\t0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,\n\t0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76,\n\t0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,\n\t0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,\n\t0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52,\n\t0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12,\n\t0x38, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x1e, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x52, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x69,\n\t0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,\n\t0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a,\n\t0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,\n\t0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,\n\t0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66,\n\t0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,\n\t0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x61,\n\t0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72,\n\t0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41,\n\t0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72,\n\t0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d,\n\t0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,\n\t0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,\n\t0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73,\n\t0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,\n\t0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,\n\t0x22, 0x71, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,\n\t0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,\n\t0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x63,\n\t0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,\n\t0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,\n\t0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,\n\t0x65, 0x78, 0x74, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,\n\t0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6c,\n\t0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,\n\t0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x66, 0x6c, 0x69,\n\t0x67, 0x68, 0x74, 0x22, 0x29, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46,\n\t0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,\n\t0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x51,\n\t0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,\n\t0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67,\n\t0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x76, 0x69, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76,\n\t0x30, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,\n\t0x73, 0x32, 0xbc, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x53,\n\t0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,\n\t0x12, 0x24, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,\n\t0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,\n\t0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,\n\t0x60, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x2e, 0x61,\n\t0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,\n\t0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65,\n\t0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,\n\t0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69,\n\t0x67, 0x68, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,\n\t0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63,\n\t0x68, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,\n\t0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,\n\t0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_schedules_proto_rawDescOnce sync.Once\n\tfile_schedules_proto_rawDescData = file_schedules_proto_rawDesc\n)\n", "n_tokens": 29124, "primary_symbol": "GetFlights", "primary_kind": "function", "primary_span": [1254, 1619], "def_symbols": ["GetFlights"], "symbols": ["GetFlights", "func", "BatchGetFlightResponse", "Flight", "nil", "return", "Flights", "var", "File_schedules_proto", "protoreflect", "FileDescriptor", "file_schedules_proto_rawDesc", "byte", "file_schedules_proto_rawDescOnce", "sync", "Once", "file_schedules_proto_rawDescData"], "doc_head": "func (x *BatchGetFlightResponse) GetFlights() []*Flight {\n\tif x != nil {\n\t\treturn x.Flights\n\t}\n\treturn nil\n}\nvar File_schedules_proto protoreflect.FileDescriptor\nvar file_schedules_proto_rawDesc = []byte{\n\t0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,\n\t0x6f, 0x12, 0x15, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,\n\t0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x22, 0x49, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65,\n\t0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12,\n\t0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d,\n\t0x62, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,\n\t0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,\n\t0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,\n\t0x61, 0x76, 0x69, 0x61, "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#46", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 46, "start_line": 1620, "end_line": 1691, "text": "func file_schedules_proto_rawDescGZIP() []byte {\n\tfile_schedules_proto_rawDescOnce.Do(func() {\n\t\tfile_schedules_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedules_proto_rawDescData)\n\t})\n\treturn file_schedules_proto_rawDescData\n}\n\nvar file_schedules_proto_msgTypes = make([]protoimpl.MessageInfo, 24)\nvar file_schedules_proto_goTypes = []any{\n\t(*Codeshare)(nil),              // 0: aviation.schedules.v0.Codeshare\n\t(*Country)(nil),                // 1: aviation.schedules.v0.Country\n\t(*City)(nil),                   // 2: aviation.schedules.v0.City\n\t(*Airport)(nil),                // 3: aviation.schedules.v0.Airport\n\t(*Airline)(nil),                // 4: aviation.schedules.v0.Airline\n\t(*Aircraft)(nil),               // 5: aviation.schedules.v0.Aircraft\n\t(*Flight)(nil),                 // 6: aviation.schedules.v0.Flight\n\t(*Schedule)(nil),               // 7: aviation.schedules.v0.Schedule\n\t(*SearchRequest)(nil),          // 8: aviation.schedules.v0.SearchRequest\n\t(*SearchResponse)(nil),         // 9: aviation.schedules.v0.SearchResponse\n\t(*GetFlightRequest)(nil),       // 10: aviation.schedules.v0.GetFlightRequest\n\t(*GetFlightResponse)(nil),      // 11: aviation.schedules.v0.GetFlightResponse\n\t(*BatchGetFlightRequest)(nil),  // 12: aviation.schedules.v0.BatchGetFlightRequest\n\t(*BatchGetFlightResponse)(nil), // 13: aviation.schedules.v0.BatchGetFlightResponse\n\tnil,                            // 14: aviation.schedules.v0.Country.NameEntry\n\tnil,                            // 15: aviation.schedules.v0.City.NameEntry\n\tnil,                            // 16: aviation.schedules.v0.Airport.NameEntry\n\tnil,                            // 17: aviation.schedules.v0.Airport.ShortNameEntry\n\tnil,                            // 18: aviation.schedules.v0.Airport.DescriptionEntry\n\tnil,                            // 19: aviation.schedules.v0.Airport.WikipediaUrlEntry\n\tnil,                            // 20: aviation.schedules.v0.Airline.DescriptionEntry\n\tnil,                            // 21: aviation.schedules.v0.Airline.WikipediaUrlEntry\n\tnil,                            // 22: aviation.schedules.v0.Aircraft.DescriptionEntry\n\tnil,                            // 23: aviation.schedules.v0.Aircraft.WikipediaUrlEntry\n}\nvar file_schedules_proto_depIdxs = []int32{\n\t14, // 0: aviation.schedules.v0.Country.name:type_name -> aviation.schedules.v0.Country.NameEntry\n\t15, // 1: aviation.schedules.v0.City.name:type_name -> aviation.schedules.v0.City.NameEntry\n\t1,  // 2: aviation.schedules.v0.City.country:type_name -> aviation.schedules.v0.Country\n\t2,  // 3: aviation.schedules.v0.Airport.city:type_name -> aviation.schedules.v0.City\n\t16, // 4: aviation.schedules.v0.Airport.name:type_name -> aviation.schedules.v0.Airport.NameEntry\n\t17, // 5: aviation.schedules.v0.Airport.shortName:type_name -> aviation.schedules.v0.Airport.ShortNameEntry\n\t18, // 6: aviation.schedules.v0.Airport.description:type_name -> aviation.schedules.v0.Airport.DescriptionEntry\n\t19, // 7: aviation.schedules.v0.Airport.wikipediaUrl:type_name -> aviation.schedules.v0.Airport.WikipediaUrlEntry\n\t20, // 8: aviation.schedules.v0.Airline.description:type_name -> aviation.schedules.v0.Airline.DescriptionEntry\n\t21, // 9: aviation.schedules.v0.Airline.wikipediaUrl:type_name -> aviation.schedules.v0.Airline.WikipediaUrlEntry\n\t22, // 10: aviation.schedules.v0.Aircraft.description:type_name -> aviation.schedules.v0.Aircraft.DescriptionEntry\n\t23, // 11: aviation.schedules.v0.Aircraft.wikipediaUrl:type_name -> aviation.schedules.v0.Aircraft.WikipediaUrlEntry\n\t4,  // 12: aviation.schedules.v0.Flight.airline:type_name -> aviation.schedules.v0.Airline\n\t3,  // 13: aviation.schedules.v0.Flight.departureAirport:type_name -> aviation.schedules.v0.Airport\n\t3,  // 14: aviation.schedules.v0.Flight.arrivalAirport:type_name -> aviation.schedules.v0.Airport\n\t5,  // 15: aviation.schedules.v0.Flight.aircraft:type_name -> aviation.schedules.v0.Aircraft\n\t0,  // 16: aviation.schedules.v0.Flight.codeshare:type_name -> aviation.schedules.v0.Codeshare\n\t3,  // 17: aviation.schedules.v0.Schedule.departureAirport:type_name -> aviation.schedules.v0.Airport\n\t3,  // 18: aviation.schedules.v0.Schedule.arrivalAirport:type_name -> aviation.schedules.v0.Airport\n\t4,  // 19: aviation.schedules.v0.Schedule.airline:type_name -> aviation.schedules.v0.Airline\n\t6,  // 20: aviation.schedules.v0.Schedule.flights:type_name -> aviation.schedules.v0.Flight\n\t7,  // 21: aviation.schedules.v0.SearchResponse.schedules:type_name -> aviation.schedules.v0.Schedule\n\t6,  // 22: aviation.schedules.v0.GetFlightResponse.flight:type_name -> aviation.schedules.v0.Flight\n\t6,  // 23: aviation.schedules.v0.BatchGetFlightResponse.flights:type_name -> aviation.schedules.v0.Flight\n\t8,  // 24: aviation.schedules.v0.SchedulesService.Search:input_type -> aviation.schedules.v0.SearchRequest\n\t10, // 25: aviation.schedules.v0.SchedulesService.GetFlight:input_type -> aviation.schedules.v0.GetFlightRequest\n\t12, // 26: aviation.schedules.v0.SchedulesService.BatchGetFlight:input_type -> aviation.schedules.v0.BatchGetFlightRequest\n\t9,  // 27: aviation.schedules.v0.SchedulesService.Search:output_type -> aviation.schedules.v0.SearchResponse\n\t11, // 28: aviation.schedules.v0.SchedulesService.GetFlight:output_type -> aviation.schedules.v0.GetFlightResponse\n\t13, // 29: aviation.schedules.v0.SchedulesService.BatchGetFlight:output_type -> aviation.schedules.v0.BatchGetFlightResponse\n\t27, // [27:30] is the sub-list for method output_type\n\t24, // [24:27] is the sub-list for method input_type\n\t24, // [24:24] is the sub-list for extension type_name\n\t24, // [24:24] is the sub-list for extension extendee\n\t0,  // [0:24] is the sub-list for field type_name\n}\n", "n_tokens": 1540, "primary_symbol": "file_schedules_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [1620, 1691], "def_symbols": ["file_schedules_proto_rawDescGZIP"], "symbols": ["file_schedules_proto_rawDescGZIP", "func", "byte", "file_schedules_proto_rawDescOnce", "file_schedules_proto_rawDescData", "protoimpl", "CompressGZIP", "return", "var", "file_schedules_proto_msgTypes", "make", "MessageInfo", "file_schedules_proto_goTypes", "any", "Codeshare", "nil", "aviation", "schedules", "Country", "City", "Airport", "Airline", "Aircraft", "Flight", "Schedule", "SearchRequest", "SearchResponse", "GetFlightRequest", "GetFlightResponse", "BatchGetFlightRequest", "BatchGetFlightResponse", "NameEntry", "ShortNameEntry", "DescriptionEntry", "WikipediaUrlEntry", "file_schedules_proto_depIdxs", "int32", "name", "type_name", "country", "city", "shortName", "description", "wikipediaUrl", "airline", "departureAirport", "arrivalAirport", "aircraft", "codeshare", "flights", "flight", "SchedulesService", "Search", "input_type", "GetFlight", "BatchGetFlight", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "func file_schedules_proto_rawDescGZIP() []byte {\n\tfile_schedules_proto_rawDescOnce.Do(func() {\n\t\tfile_schedules_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedules_proto_rawDescData)\n\t})\n\treturn file_schedules_proto_rawDescData\n}\nvar file_schedules_proto_msgTypes = make([]protoimpl.MessageInfo, 24)\nvar file_schedules_proto_goTypes = []any{\n\t(*Codeshare)(nil),              // 0: aviation.schedules.v0.Codeshare\n\t(*Country)(nil),                // 1: aviation.schedules.v0.Country\n\t(*City)(nil),                   // 2: aviation.schedules.v0.City\n\t(*Airport)(nil),                // 3: aviation.schedules.v0.Airport\n\t(*Airline)(nil),                // 4: aviation.schedules.v0.Airline\n\t(*Aircraft)(nil),               // 5: aviation.schedules.v0.Aircraft\n\t(*Flight)(nil),                 // 6: aviation.schedules.v0.Flight\n\t(*Schedule)(nil),               // 7: aviation.schedules.v0.Schedule\n\t(*SearchRequest)(nil),          // 8: aviation.schedules.v0.SearchRequest\n\t(*SearchResponse)(nil),         // 9: aviation.schedules.v0.SearchResponse\n\t(*GetFlightRequest)(nil),       // 10: aviation.schedules.v0.GetFlightRequest\n\t(*GetFlightResponse)(nil),      // 11: aviation.schedules.v0.GetFli"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#47", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 47, "start_line": 1692, "end_line": 1703, "text": "func init() { file_schedules_proto_init() }\nfunc file_schedules_proto_init() {\n\tif File_schedules_proto != nil {\n\t\treturn\n\t}\n\tfile_schedules_proto_msgTypes[2].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[3].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[5].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[8].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[9].OneofWrappers = []any{}", "n_tokens": 151, "primary_symbol": "init", "primary_kind": "function", "primary_span": [1692, 1703], "def_symbols": ["init", "file_schedules_proto_init"], "symbols": ["init", "file_schedules_proto_init", "func", "File_schedules_proto", "nil", "return", "file_schedules_proto_msgTypes", "OneofWrappers", "any"], "doc_head": "func init() { file_schedules_proto_init() }\nfunc file_schedules_proto_init() {\n\tif File_schedules_proto != nil {\n\t\treturn\n\t}\n\tfile_schedules_proto_msgTypes[2].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[3].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[4].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[5].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[6].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[8].OneofWrappers = []any{}\n\tfile_schedules_proto_msgTypes[9].OneofWrappers = []any{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go#48", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules.pb.go", "rel_path": "pkg/pb/v0/schedules.pb.go", "ext": "go", "language": "go", "chunk_number": 48, "start_line": 1704, "end_line": 1723, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_schedules_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   24,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_schedules_proto_goTypes,\n\t\tDependencyIndexes: file_schedules_proto_depIdxs,\n\t\tMessageInfos:      file_schedules_proto_msgTypes,\n\t}.Build()\n\tFile_schedules_proto = out.File\n\tfile_schedules_proto_rawDesc = nil\n\tfile_schedules_proto_goTypes = nil\n\tfile_schedules_proto_depIdxs = nil\n}\n", "n_tokens": 163, "primary_symbol": "", "primary_kind": "", "primary_span": [1704, 1723], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "file_schedules_proto_rawDesc", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_schedules_proto_goTypes", "DependencyIndexes", "file_schedules_proto_depIdxs", "MessageInfos", "file_schedules_proto_msgTypes", "Build", "File_schedules_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_schedules_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   24,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_schedules_proto_goTypes,\n\t\tDependencyIndexes: file_schedules_proto_depIdxs,\n\t\tMessageInfos:      file_schedules_proto_msgTypes,\n\t}.Build()\n\tFile_schedules_proto = out.File\n\tfile_schedules_proto_rawDesc = nil\n\tfile_schedules_proto_goTypes = nil\n\tfile_schedules_proto_depIdxs = nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/pb.go", "rel_path": "pkg/pb/v0/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package v0\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mschedules.proto=.;v0 schedules.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mschedules.proto=.;v0 schedules.proto\n", "n_tokens": 75, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "Mschedules", "proto", "schedules", "grpc_out", "grpc_opt"], "doc_head": "package v0\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=Mschedules.proto=.;v0 schedules.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=Mschedules.proto=.;v0 schedules.proto"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: schedules.proto\n\npackage v0\n", "n_tokens": 55, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "schedules", "proto", "package"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.5.1\n// - protoc             v3.21.12\n// source: schedules.proto\npackage v0"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 26, "text": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\n\nconst (\n\tSchedulesService_Search_FullMethodName         = \"/aviation.schedules.v0.SchedulesService/Search\"\n\tSchedulesService_GetFlight_FullMethodName      = \"/aviation.schedules.v0.SchedulesService/GetFlight\"\n\tSchedulesService_BatchGetFlight_FullMethodName = \"/aviation.schedules.v0.SchedulesService/BatchGetFlight\"\n)\n", "n_tokens": 162, "primary_symbol": "", "primary_kind": "", "primary_span": [9, 26], "def_symbols": [], "symbols": ["import", "context", "grpc", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "generated", "file", "compatible", "with", "the", "package", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion9", "SchedulesService_Search_FullMethodName", "aviation", "schedules", "SchedulesService", "Search", "SchedulesService_GetFlight_FullMethodName", "GetFlight", "SchedulesService_BatchGetFlight_FullMethodName", "BatchGetFlight"], "doc_head": "import (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.64.0 or later.\nconst _ = grpc.SupportPackageIsVersion9\nconst (\n\tSchedulesService_Search_FullMethodName         = \"/aviation.schedules.v0.SchedulesService/Search\"\n\tSchedulesService_GetFlight_FullMethodName      = \"/aviation.schedules.v0.SchedulesService/GetFlight\"\n\tSchedulesService_BatchGetFlight_FullMethodName = \"/aviation.schedules.v0.SchedulesService/BatchGetFlight\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 27, "end_line": 43, "text": "// SchedulesServiceClient is the client API for SchedulesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype SchedulesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)\n\tGetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error)\n\tBatchGetFlight(ctx context.Context, in *BatchGetFlightRequest, opts ...grpc.CallOption) (*BatchGetFlightResponse, error)\n}\n\ntype schedulesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewSchedulesServiceClient(cc grpc.ClientConnInterface) SchedulesServiceClient {\n\treturn &schedulesServiceClient{cc}\n}\n", "n_tokens": 178, "primary_symbol": "NewSchedulesServiceClient", "primary_kind": "function", "primary_span": [40, 43], "def_symbols": ["NewSchedulesServiceClient"], "symbols": ["NewSchedulesServiceClient", "SchedulesServiceClient", "the", "client", "API", "for", "SchedulesService", "service", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "google", "golang", "org", "grpc", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "Search", "context", "Context", "SearchRequest", "opts", "CallOption", "SearchResponse", "error", "GetFlight", "GetFlightRequest", "GetFlightResponse", "BatchGetFlight", "BatchGetFlightRequest", "BatchGetFlightResponse", "schedulesServiceClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// SchedulesServiceClient is the client API for SchedulesService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype SchedulesServiceClient interface {\n\tSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)\n\tGetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error)\n\tBatchGetFlight(ctx context.Context, in *BatchGetFlightRequest, opts ...grpc.CallOption) (*BatchGetFlightResponse, error)\n}\ntype schedulesServiceClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewSchedulesServiceClient(cc grpc.ClientConnInterface) SchedulesServiceClient {\n\treturn &schedulesServiceClient{cc}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 44, "end_line": 63, "text": "func (c *schedulesServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchResponse)\n\terr := c.cc.Invoke(ctx, SchedulesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nfunc (c *schedulesServiceClient) GetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetFlightResponse)\n\terr := c.cc.Invoke(ctx, SchedulesService_GetFlight_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 193, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [44, 63], "def_symbols": ["Search", "GetFlight"], "symbols": ["Search", "GetFlight", "func", "schedulesServiceClient", "ctx", "context", "Context", "SearchRequest", "opts", "grpc", "CallOption", "SearchResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "SchedulesService_Search_FullMethodName", "nil", "return", "GetFlightRequest", "GetFlightResponse", "SchedulesService_GetFlight_FullMethodName"], "doc_head": "func (c *schedulesServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(SearchResponse)\n\terr := c.cc.Invoke(ctx, SchedulesService_Search_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\nfunc (c *schedulesServiceClient) GetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(GetFlightResponse)\n\terr := c.cc.Invoke(ctx, SchedulesService_GetFlight_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 64, "end_line": 73, "text": "func (c *schedulesServiceClient) BatchGetFlight(ctx context.Context, in *BatchGetFlightRequest, opts ...grpc.CallOption) (*BatchGetFlightResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetFlightResponse)\n\terr := c.cc.Invoke(ctx, SchedulesService_BatchGetFlight_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n", "n_tokens": 106, "primary_symbol": "BatchGetFlight", "primary_kind": "function", "primary_span": [64, 73], "def_symbols": ["BatchGetFlight"], "symbols": ["BatchGetFlight", "func", "schedulesServiceClient", "ctx", "context", "Context", "BatchGetFlightRequest", "opts", "grpc", "CallOption", "BatchGetFlightResponse", "error", "cOpts", "append", "StaticMethod", "out", "new", "err", "Invoke", "SchedulesService_BatchGetFlight_FullMethodName", "nil", "return"], "doc_head": "func (c *schedulesServiceClient) BatchGetFlight(ctx context.Context, in *BatchGetFlightRequest, opts ...grpc.CallOption) (*BatchGetFlightResponse, error) {\n\tcOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)\n\tout := new(BatchGetFlightResponse)\n\terr := c.cc.Invoke(ctx, SchedulesService_BatchGetFlight_FullMethodName, in, out, cOpts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 74, "end_line": 93, "text": "// SchedulesServiceServer is the server API for SchedulesService service.\n// All implementations must embed UnimplementedSchedulesServiceServer\n// for forward compatibility.\ntype SchedulesServiceServer interface {\n\tSearch(context.Context, *SearchRequest) (*SearchResponse, error)\n\tGetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error)\n\tBatchGetFlight(context.Context, *BatchGetFlightRequest) (*BatchGetFlightResponse, error)\n\tmustEmbedUnimplementedSchedulesServiceServer()\n}\n\n// UnimplementedSchedulesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedSchedulesServiceServer struct{}\n\nfunc (UnimplementedSchedulesServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}", "n_tokens": 198, "primary_symbol": "Search", "primary_kind": "function", "primary_span": [91, 93], "def_symbols": ["Search"], "symbols": ["Search", "SchedulesServiceServer", "the", "server", "API", "for", "SchedulesService", "service", "All", "implementations", "must", "embed", "UnimplementedSchedulesServiceServer", "forward", "compatibility", "type", "interface", "context", "Context", "SearchRequest", "SearchResponse", "error", "GetFlight", "GetFlightRequest", "GetFlightResponse", "BatchGetFlight", "BatchGetFlightRequest", "BatchGetFlightResponse", "mustEmbedUnimplementedSchedulesServiceServer", "embedded", "have", "compatible", "NOTE", "this", "should", "value", "instead", "pointer", "avoid", "nil", "dereference", "when", "methods", "are", "called", "struct", "func", "return", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented"], "doc_head": "// SchedulesServiceServer is the server API for SchedulesService service.\n// All implementations must embed UnimplementedSchedulesServiceServer\n// for forward compatibility.\ntype SchedulesServiceServer interface {\n\tSearch(context.Context, *SearchRequest) (*SearchResponse, error)\n\tGetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error)\n\tBatchGetFlight(context.Context, *BatchGetFlightRequest) (*BatchGetFlightResponse, error)\n\tmustEmbedUnimplementedSchedulesServiceServer()\n}\n// UnimplementedSchedulesServiceServer must be embedded to have\n// forward compatible implementations.\n//\n// NOTE: this should be embedded by value instead of pointer to avoid a nil\n// pointer dereference when methods are called.\ntype UnimplementedSchedulesServiceServer struct{}\nfunc (UnimplementedSchedulesServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Search not implemented\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 94, "end_line": 109, "text": "func (UnimplementedSchedulesServiceServer) GetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetFlight not implemented\")\n}\nfunc (UnimplementedSchedulesServiceServer) BatchGetFlight(context.Context, *BatchGetFlightRequest) (*BatchGetFlightResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetFlight not implemented\")\n}\nfunc (UnimplementedSchedulesServiceServer) mustEmbedUnimplementedSchedulesServiceServer() {}\nfunc (UnimplementedSchedulesServiceServer) testEmbeddedByValue()                          {}\n\n// UnsafeSchedulesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to SchedulesServiceServer will\n// result in compilation errors.\ntype UnsafeSchedulesServiceServer interface {\n\tmustEmbedUnimplementedSchedulesServiceServer()\n}\n", "n_tokens": 192, "primary_symbol": "GetFlight", "primary_kind": "function", "primary_span": [94, 109], "def_symbols": ["GetFlight", "BatchGetFlight", "mustEmbedUnimplementedSchedulesServiceServer", "testEmbeddedByValue"], "symbols": ["GetFlight", "BatchGetFlight", "mustEmbedUnimplementedSchedulesServiceServer", "testEmbeddedByValue", "func", "UnimplementedSchedulesServiceServer", "context", "Context", "GetFlightRequest", "GetFlightResponse", "error", "return", "nil", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "BatchGetFlightRequest", "BatchGetFlightResponse", "UnsafeSchedulesServiceServer", "may", "embedded", "opt", "out", "forward", "compatibility", "for", "this", "service", "Use", "interface", "recommended", "added", "methods", "SchedulesServiceServer", "will", "result", "compilation", "errors", "type"], "doc_head": "func (UnimplementedSchedulesServiceServer) GetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetFlight not implemented\")\n}\nfunc (UnimplementedSchedulesServiceServer) BatchGetFlight(context.Context, *BatchGetFlightRequest) (*BatchGetFlightResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method BatchGetFlight not implemented\")\n}\nfunc (UnimplementedSchedulesServiceServer) mustEmbedUnimplementedSchedulesServiceServer() {}\nfunc (UnimplementedSchedulesServiceServer) testEmbeddedByValue()                          {}\n// UnsafeSchedulesServiceServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to SchedulesServiceServer will\n// result in compilation errors.\ntype UnsafeSchedulesServiceServer interface {\n\tmustEmbedUnimplementedSchedulesServiceServer()\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 110, "end_line": 120, "text": "func RegisterSchedulesServiceServer(s grpc.ServiceRegistrar, srv SchedulesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedSchedulesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&SchedulesService_ServiceDesc, srv)\n}\n", "n_tokens": 126, "primary_symbol": "RegisterSchedulesServiceServer", "primary_kind": "function", "primary_span": [110, 120], "def_symbols": ["RegisterSchedulesServiceServer"], "symbols": ["RegisterSchedulesServiceServer", "func", "grpc", "ServiceRegistrar", "srv", "SchedulesServiceServer", "the", "following", "call", "pancis", "indicates", "UnimplementedSchedulesServiceServer", "was", "embedded", "pointer", "and", "nil", "This", "will", "cause", "panics", "unimplemented", "method", "ever", "invoked", "test", "this", "initialization", "time", "prevent", "from", "happening", "runtime", "later", "due", "interface", "testEmbeddedByValue", "RegisterService", "SchedulesService_ServiceDesc"], "doc_head": "func RegisterSchedulesServiceServer(s grpc.ServiceRegistrar, srv SchedulesServiceServer) {\n\t// If the following call pancis, it indicates UnimplementedSchedulesServiceServer was\n\t// embedded by pointer and is nil.  This will cause panics if an\n\t// unimplemented method is ever invoked, so we test this at initialization\n\t// time to prevent it from happening at runtime later due to I/O.\n\tif t, ok := srv.(interface{ testEmbeddedByValue() }); ok {\n\t\tt.testEmbeddedByValue()\n\t}\n\ts.RegisterService(&SchedulesService_ServiceDesc, srv)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 121, "end_line": 138, "text": "func _SchedulesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(SchedulesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: SchedulesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(SchedulesServiceServer).Search(ctx, req.(*SearchRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 155, "primary_symbol": "_SchedulesService_Search_Handler", "primary_kind": "function", "primary_span": [121, 138], "def_symbols": ["_SchedulesService_Search_Handler"], "symbols": ["_SchedulesService_Search_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "SearchRequest", "err", "nil", "return", "SchedulesServiceServer", "Search", "info", "UnaryServerInfo", "Server", "FullMethod", "SchedulesService_Search_FullMethodName", "handler", "req"], "doc_head": "func _SchedulesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(SearchRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(SchedulesServiceServer).Search(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: SchedulesService_Search_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(SchedulesServiceServer).Search(ctx, req.(*SearchRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 139, "end_line": 156, "text": "func _SchedulesService_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetFlightRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(SchedulesServiceServer).GetFlight(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: SchedulesService_GetFlight_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(SchedulesServiceServer).GetFlight(ctx, req.(*GetFlightRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n", "n_tokens": 161, "primary_symbol": "_SchedulesService_GetFlight_Handler", "primary_kind": "function", "primary_span": [139, 156], "def_symbols": ["_SchedulesService_GetFlight_Handler"], "symbols": ["_SchedulesService_GetFlight_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "GetFlightRequest", "err", "nil", "return", "SchedulesServiceServer", "GetFlight", "info", "UnaryServerInfo", "Server", "FullMethod", "SchedulesService_GetFlight_FullMethodName", "handler", "req"], "doc_head": "func _SchedulesService_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetFlightRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(SchedulesServiceServer).GetFlight(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: SchedulesService_GetFlight_FullMethodName,\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(SchedulesServiceServer).GetFlight(ctx, req.(*GetFlightRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 157, "end_line": 168, "text": "func _SchedulesService_BatchGetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetFlightRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(SchedulesServiceServer).BatchGetFlight(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: SchedulesService_BatchGetFlight_FullMethodName,\n\t}", "n_tokens": 120, "primary_symbol": "_SchedulesService_BatchGetFlight_Handler", "primary_kind": "function", "primary_span": [157, 168], "def_symbols": ["_SchedulesService_BatchGetFlight_Handler"], "symbols": ["_SchedulesService_BatchGetFlight_Handler", "func", "srv", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "grpc", "UnaryServerInterceptor", "new", "BatchGetFlightRequest", "err", "nil", "return", "SchedulesServiceServer", "BatchGetFlight", "info", "UnaryServerInfo", "Server", "FullMethod", "SchedulesService_BatchGetFlight_FullMethodName"], "doc_head": "func _SchedulesService_BatchGetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(BatchGetFlightRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(SchedulesServiceServer).BatchGetFlight(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: SchedulesService_BatchGetFlight_FullMethodName,\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pb/v0/schedules_grpc.pb.go", "rel_path": "pkg/pb/v0/schedules_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 169, "end_line": 198, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(SchedulesServiceServer).BatchGetFlight(ctx, req.(*BatchGetFlightRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// SchedulesService_ServiceDesc is the grpc.ServiceDesc for SchedulesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar SchedulesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.schedules.v0.SchedulesService\",\n\tHandlerType: (*SchedulesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _SchedulesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetFlight\",\n\t\t\tHandler:    _SchedulesService_GetFlight_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetFlight\",\n\t\t\tHandler:    _SchedulesService_BatchGetFlight_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"schedules.proto\",\n}\n", "n_tokens": 242, "primary_symbol": "", "primary_kind": "", "primary_span": [169, 198], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "SchedulesServiceServer", "BatchGetFlight", "BatchGetFlightRequest", "interceptor", "info", "SchedulesService_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "SchedulesService", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "aviation", "schedules", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Search", "Handler", "_SchedulesService_Search_Handler", "GetFlight", "_SchedulesService_GetFlight_Handler", "_SchedulesService_BatchGetFlight_Handler", "Streams", "StreamDesc", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(SchedulesServiceServer).BatchGetFlight(ctx, req.(*BatchGetFlightRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// SchedulesService_ServiceDesc is the grpc.ServiceDesc for SchedulesService service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar SchedulesService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"aviation.schedules.v0.SchedulesService\",\n\tHandlerType: (*SchedulesServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Search\",\n\t\t\tHandler:    _SchedulesService_Search_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetFlight\",\n\t\t\tHandler:    _SchedulesService_GetFlight_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"BatchGetFlight\",\n\t\t\tHandler:    _SchedulesService_BatchGetFlight_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"schedules.proto\",\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go", "rel_path": "pkg/cursor/paginator.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 14, "text": "package cursor\n\nimport (\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"github.com/cockroachdb/errors\"\n)\n\ntype (\n\tcipher interface {\n\t\tEncrypt(input []byte) ([]byte, error)\n\t\tDecrypt(input []byte) ([]byte, error)\n\t}", "n_tokens": 61, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 14], "def_symbols": [], "symbols": ["package", "cursor", "import", "encoding", "base64", "hex", "json", "github", "com", "cockroachdb", "errors", "type", "cipher", "interface", "Encrypt", "input", "byte", "error", "Decrypt"], "doc_head": "package cursor\nimport (\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"github.com/cockroachdb/errors\"\n)\ntype (\n\tcipher interface {\n\t\tEncrypt(input []byte) ([]byte, error)\n\t\tDecrypt(input []byte) ([]byte, error)\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go", "rel_path": "pkg/cursor/paginator.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 15, "end_line": 34, "text": "\tBuilder[W, O any] interface {\n\t\t// GetWhereClause generates the where statement needed to implement\n\t\t// the cursor-based pagination given the provided cursor.\n\t\t// For more information about how a where clause is generated\n\t\t// visit https://brunoscheufler.com/blog/2022-01-01-paginating-large-ordered-datasets-with-cursor-based-pagination.\n\t\tGetWhereClause(c *Cursor) W\n\n\t\t// GetOrderByClause generates the order by statement needed to implement\n\t\t// the cursor-based pagination given the provided cursor.\n\t\t// For more information about how a where clause is generated\n\t\t// visit https://brunoscheufler.com/blog/2022-01-01-paginating-large-ordered-datasets-with-cursor-based-pagination.\n\t\tGetOrderByClause(c *Cursor) O\n\t}\n)\n\ntype PaginatorConfig[W, O any] struct {\n\tcipher  cipher\n\tbuilder Builder[W, O]\n}\n", "n_tokens": 205, "primary_symbol": "", "primary_kind": "", "primary_span": [15, 34], "def_symbols": [], "symbols": ["Builder", "any", "interface", "GetWhereClause", "generates", "the", "where", "statement", "needed", "implement", "cursor", "based", "pagination", "given", "provided", "For", "more", "information", "about", "how", "clause", "generated", "visit", "https", "brunoscheufler", "com", "blog", "paginating", "large", "ordered", "datasets", "with", "Cursor", "GetOrderByClause", "order", "type", "PaginatorConfig", "struct", "cipher", "builder"], "doc_head": "\tBuilder[W, O any] interface {\n\t\t// GetWhereClause generates the where statement needed to implement\n\t\t// the cursor-based pagination given the provided cursor.\n\t\t// For more information about how a where clause is generated\n\t\t// visit https://brunoscheufler.com/blog/2022-01-01-paginating-large-ordered-datasets-with-cursor-based-pagination.\n\t\tGetWhereClause(c *Cursor) W\n\t\t// GetOrderByClause generates the order by statement needed to implement\n\t\t// the cursor-based pagination given the provided cursor.\n\t\t// For more information about how a where clause is generated\n\t\t// visit https://brunoscheufler.com/blog/2022-01-01-paginating-large-ordered-datasets-with-cursor-based-pagination.\n\t\tGetOrderByClause(c *Cursor) O\n\t}\n)\ntype PaginatorConfig[W, O any] struct {\n\tcipher  cipher\n\tbuilder Builder[W, O]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go", "rel_path": "pkg/cursor/paginator.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 35, "end_line": 62, "text": "// Option is a function that configures a Paginator.\ntype Option[W, O any] func(config *PaginatorConfig[W, O])\n\nfunc WithEncryption[W, O any](cipher cipher) Option[W, O] {\n\treturn func(cfg *PaginatorConfig[W, O]) {\n\t\tcfg.cipher = cipher\n\t}\n}\n\nfunc WithBuilder[W, O any](builder Builder[W, O]) Option[W, O] {\n\treturn func(cfg *PaginatorConfig[W, O]) {\n\t\tcfg.builder = builder\n\t}\n}\n\ntype Paginator[W, O any] struct {\n\tconfig *PaginatorConfig[W, O]\n}\n\nfunc NewPaginator[W, O any](opts ...Option[W, O]) *Paginator[W, O] {\n\tcfg := &PaginatorConfig[W, O]{}\n\tfor _, opt := range opts {\n\t\topt(cfg)\n\t}\n\n\treturn &Paginator[W, O]{config: cfg}\n}\n", "n_tokens": 180, "primary_symbol": "", "primary_kind": "", "primary_span": [35, 62], "def_symbols": [], "symbols": ["Option", "function", "that", "configures", "Paginator", "type", "any", "func", "config", "PaginatorConfig", "WithEncryption", "cipher", "return", "cfg", "WithBuilder", "builder", "Builder", "struct", "NewPaginator", "opts", "for", "opt", "range"], "doc_head": "// Option is a function that configures a Paginator.\ntype Option[W, O any] func(config *PaginatorConfig[W, O])\nfunc WithEncryption[W, O any](cipher cipher) Option[W, O] {\n\treturn func(cfg *PaginatorConfig[W, O]) {\n\t\tcfg.cipher = cipher\n\t}\n}\nfunc WithBuilder[W, O any](builder Builder[W, O]) Option[W, O] {\n\treturn func(cfg *PaginatorConfig[W, O]) {\n\t\tcfg.builder = builder\n\t}\n}\ntype Paginator[W, O any] struct {\n\tconfig *PaginatorConfig[W, O]\n}\nfunc NewPaginator[W, O any](opts ...Option[W, O]) *Paginator[W, O] {\n\tcfg := &PaginatorConfig[W, O]{}\n\tfor _, opt := range opts {\n\t\topt(cfg)\n\t}\n\treturn &Paginator[W, O]{config: cfg}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go", "rel_path": "pkg/cursor/paginator.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 63, "end_line": 87, "text": "func (p *Paginator[W, O]) Encode(cursor *Cursor) (string, error) {\n\tvar b []byte\n\tvar err error\n\n\tb, err = json.Marshal(cursor)\n\tif err != nil {\n\t\treturn \"\", errors.Wrap(err, \"cannot encode cursor\")\n\t}\n\n\tvar c string\n\n\tif p.config.cipher != nil {\n\t\tb, err = p.config.cipher.Encrypt(b)\n\t\tif err != nil {\n\t\t\treturn \"\", errors.Wrap(err, \"cannot encrypt cursor\")\n\t\t}\n\n\t\tc = hex.EncodeToString(b)\n\t} else {\n\t\tc = base64.StdEncoding.EncodeToString(b)\n\t}\n\n\treturn c, nil\n}\n", "n_tokens": 133, "primary_symbol": "Encode", "primary_kind": "function", "primary_span": [63, 87], "def_symbols": ["Encode"], "symbols": ["Encode", "func", "Paginator", "cursor", "Cursor", "string", "error", "var", "byte", "err", "json", "Marshal", "nil", "return", "errors", "Wrap", "cannot", "encode", "config", "cipher", "Encrypt", "encrypt", "hex", "EncodeToString", "else", "base64", "StdEncoding"], "doc_head": "func (p *Paginator[W, O]) Encode(cursor *Cursor) (string, error) {\n\tvar b []byte\n\tvar err error\n\tb, err = json.Marshal(cursor)\n\tif err != nil {\n\t\treturn \"\", errors.Wrap(err, \"cannot encode cursor\")\n\t}\n\tvar c string\n\tif p.config.cipher != nil {\n\t\tb, err = p.config.cipher.Encrypt(b)\n\t\tif err != nil {\n\t\t\treturn \"\", errors.Wrap(err, \"cannot encrypt cursor\")\n\t\t}\n\t\tc = hex.EncodeToString(b)\n\t} else {\n\t\tc = base64.StdEncoding.EncodeToString(b)\n\t}\n\treturn c, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go", "rel_path": "pkg/cursor/paginator.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 88, "end_line": 118, "text": "func (p *Paginator[W, O]) Decode(cursor string) (*Cursor, error) {\n\tvar (\n\t\tb   []byte\n\t\terr error\n\t)\n\n\tif p.config.cipher != nil {\n\t\tb, err = hex.DecodeString(cursor)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot decode cursor\")\n\t\t}\n\n\t\tb, err = p.config.cipher.Decrypt(b)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot decrypt cursor\")\n\t\t}\n\t} else {\n\t\tb, err = base64.StdEncoding.DecodeString(cursor)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot decode cursor\")\n\t\t}\n\t}\n\n\tvar c Cursor\n\tif err = json.Unmarshal(b, &c); err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot decode cursor\")\n\t}\n\n\treturn &c, nil\n}\n", "n_tokens": 189, "primary_symbol": "Decode", "primary_kind": "function", "primary_span": [88, 118], "def_symbols": ["Decode"], "symbols": ["Decode", "func", "Paginator", "cursor", "string", "Cursor", "error", "var", "byte", "err", "config", "cipher", "nil", "hex", "DecodeString", "return", "errors", "Wrap", "cannot", "decode", "Decrypt", "decrypt", "else", "base64", "StdEncoding", "json", "Unmarshal"], "doc_head": "func (p *Paginator[W, O]) Decode(cursor string) (*Cursor, error) {\n\tvar (\n\t\tb   []byte\n\t\terr error\n\t)\n\tif p.config.cipher != nil {\n\t\tb, err = hex.DecodeString(cursor)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot decode cursor\")\n\t\t}\n\t\tb, err = p.config.cipher.Decrypt(b)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot decrypt cursor\")\n\t\t}\n\t} else {\n\t\tb, err = base64.StdEncoding.DecodeString(cursor)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"cannot decode cursor\")\n\t\t}\n\t}\n\tvar c Cursor\n\tif err = json.Unmarshal(b, &c); err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot decode cursor\")\n\t}\n\treturn &c, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/paginator.go", "rel_path": "pkg/cursor/paginator.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 119, "end_line": 126, "text": "func (p *Paginator[W, O]) GetWhere(c *Cursor) W {\n\treturn p.config.builder.GetWhereClause(c)\n}\n\nfunc (p *Paginator[W, O]) GetOrderBy(c *Cursor) O {\n\treturn p.config.builder.GetOrderByClause(c)\n}\n", "n_tokens": 54, "primary_symbol": "GetWhere", "primary_kind": "function", "primary_span": [119, 126], "def_symbols": ["GetWhere", "GetOrderBy"], "symbols": ["GetWhere", "GetOrderBy", "func", "Paginator", "Cursor", "return", "config", "builder", "GetWhereClause", "GetOrderByClause"], "doc_head": "func (p *Paginator[W, O]) GetWhere(c *Cursor) W {\n\treturn p.config.builder.GetWhereClause(c)\n}\nfunc (p *Paginator[W, O]) GetOrderBy(c *Cursor) O {\n\treturn p.config.builder.GetOrderByClause(c)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/cursor.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/cursor.go", "rel_path": "pkg/cursor/cursor.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 41, "text": "package cursor\n\nimport \"encoding/json\"\n\ntype Direction int\n\nconst (\n\tDirectionAsc  Direction = 1\n\tDirectionDesc Direction = -1\n)\n\nfunc (d Direction) Reverse() Direction {\n\tswitch d {\n\tcase DirectionAsc:\n\t\treturn DirectionDesc\n\tdefault:\n\t\treturn DirectionAsc\n\t}\n}\n\ntype Field struct {\n\tName      string      `json:\"n\"`\n\tValue     interface{} `json:\"v\"`\n\tDirection Direction   `json:\"d\"`\n}\n\ntype Cursor struct {\n\tFields  []Field `json:\"fs\"`\n\tLimit   uint    `json:\"l\"`\n\tForward bool    `json:\"fw\"`\n}\n\nfunc (c *Cursor) String() string {\n\tb, _ := json.Marshal(c)\n\treturn string(b)\n}\n\nfunc NewCursor(forward bool, limit uint, fields ...Field) *Cursor {\n\treturn &Cursor{Fields: fields, Limit: limit, Forward: forward}\n}\n", "n_tokens": 186, "primary_symbol": "Reverse", "primary_kind": "function", "primary_span": [12, 41], "def_symbols": ["Reverse", "String", "NewCursor"], "symbols": ["Reverse", "String", "NewCursor", "package", "cursor", "import", "encoding", "json", "type", "Direction", "int", "const", "DirectionAsc", "DirectionDesc", "func", "switch", "case", "return", "default", "Field", "struct", "Name", "string", "Value", "interface", "Cursor", "Fields", "Limit", "uint", "Forward", "bool", "Marshal", "forward", "limit", "fields"], "doc_head": "package cursor\nimport \"encoding/json\"\ntype Direction int\nconst (\n\tDirectionAsc  Direction = 1\n\tDirectionDesc Direction = -1\n)\nfunc (d Direction) Reverse() Direction {\n\tswitch d {\n\tcase DirectionAsc:\n\t\treturn DirectionDesc\n\tdefault:\n\t\treturn DirectionAsc\n\t}\n}\ntype Field struct {\n\tName      string      `json:\"n\"`\n\tValue     interface{} `json:\"v\"`\n\tDirection Direction   `json:\"d\"`\n}\ntype Cursor struct {\n\tFields  []Field `json:\"fs\"`\n\tLimit   uint    `json:\"l\"`\n\tForward bool    `json:\"fw\"`\n}\nfunc (c *Cursor) String() string {\n\tb, _ := json.Marshal(c)\n\treturn string(b)\n}\nfunc NewCursor(forward bool, limit uint, fields ...Field) *Cursor {\n\treturn &Cursor{Fields: fields, Limit: limit, Forward: forward}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/cursor.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/cursor.go", "rel_path": "pkg/cursor/cursor.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 42, "end_line": 49, "text": "func NewForwardCursor(limit uint, fields ...Field) *Cursor {\n\treturn NewCursor(true, limit, fields...)\n}\n\nfunc NewBackwardCursor(limit uint, fields ...Field) *Cursor {\n\treturn NewCursor(false, limit, fields...)\n}\n", "n_tokens": 49, "primary_symbol": "NewForwardCursor", "primary_kind": "function", "primary_span": [42, 49], "def_symbols": ["NewForwardCursor", "NewBackwardCursor"], "symbols": ["NewForwardCursor", "NewBackwardCursor", "func", "limit", "uint", "fields", "Field", "Cursor", "return", "NewCursor", "true", "false"], "doc_head": "func NewForwardCursor(limit uint, fields ...Field) *Cursor {\n\treturn NewCursor(true, limit, fields...)\n}\nfunc NewBackwardCursor(limit uint, fields ...Field) *Cursor {\n\treturn NewCursor(false, limit, fields...)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/goqu.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/goqu.go", "rel_path": "pkg/cursor/goqu.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 13, "text": "package cursor\n\nimport (\n\t\"github.com/doug-martin/goqu/v9\"\n\t\"github.com/doug-martin/goqu/v9/exp\"\n)\n\ntype GoquBuilder string\n\nfunc NewGoquBuilder() Builder[goqu.Expression, []exp.OrderedExpression] {\n\treturn GoquBuilder(\"goqu\")\n}\n", "n_tokens": 65, "primary_symbol": "NewGoquBuilder", "primary_kind": "function", "primary_span": [10, 13], "def_symbols": ["NewGoquBuilder"], "symbols": ["NewGoquBuilder", "package", "cursor", "import", "github", "com", "doug", "martin", "goqu", "exp", "type", "GoquBuilder", "string", "func", "Builder", "Expression", "OrderedExpression", "return"], "doc_head": "package cursor\nimport (\n\t\"github.com/doug-martin/goqu/v9\"\n\t\"github.com/doug-martin/goqu/v9/exp\"\n)\ntype GoquBuilder string\nfunc NewGoquBuilder() Builder[goqu.Expression, []exp.OrderedExpression] {\n\treturn GoquBuilder(\"goqu\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/goqu.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/goqu.go", "rel_path": "pkg/cursor/goqu.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 14, "end_line": 58, "text": "func (a GoquBuilder) GetWhereClause(c *Cursor) goqu.Expression {\n\tvar clauses []goqu.Expression\n\n\tfor i, f := range c.Fields {\n\n\t\tif f.Value == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar and []goqu.Expression\n\n\t\tfor j := 0; j <= i; j++ {\n\t\t\tvar e exp.Expression\n\t\t\tid := goqu.I(c.Fields[j].Name)\n\n\t\t\tif j != i {\n\t\t\t\te = id.Eq(c.Fields[j].Value)\n\t\t\t} else {\n\t\t\t\tvar direction Direction\n\t\t\t\tif c.Forward {\n\t\t\t\t\tdirection = f.Direction\n\t\t\t\t} else {\n\t\t\t\t\tdirection = f.Direction.Reverse()\n\t\t\t\t}\n\n\t\t\t\tif direction == DirectionAsc {\n\t\t\t\t\te = id.Gt(c.Fields[j].Value)\n\t\t\t\t} else {\n\t\t\t\t\te = id.Lt(c.Fields[j].Value)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tand = append(and, e)\n\t\t}\n\n\t\tclauses = append(clauses, goqu.And(and...))\n\t}\n\n\tif len(clauses) == 1 {\n\t\treturn clauses[0]\n\t}\n\n\treturn goqu.Or(clauses...)\n}\n", "n_tokens": 236, "primary_symbol": "GetWhereClause", "primary_kind": "function", "primary_span": [14, 58], "def_symbols": ["GetWhereClause"], "symbols": ["GetWhereClause", "func", "GoquBuilder", "Cursor", "goqu", "Expression", "var", "clauses", "for", "range", "Fields", "Value", "nil", "continue", "and", "exp", "Name", "else", "direction", "Direction", "Forward", "Reverse", "DirectionAsc", "append", "And", "len", "return"], "doc_head": "func (a GoquBuilder) GetWhereClause(c *Cursor) goqu.Expression {\n\tvar clauses []goqu.Expression\n\tfor i, f := range c.Fields {\n\t\tif f.Value == nil {\n\t\t\tcontinue\n\t\t}\n\t\tvar and []goqu.Expression\n\t\tfor j := 0; j <= i; j++ {\n\t\t\tvar e exp.Expression\n\t\t\tid := goqu.I(c.Fields[j].Name)\n\t\t\tif j != i {\n\t\t\t\te = id.Eq(c.Fields[j].Value)\n\t\t\t} else {\n\t\t\t\tvar direction Direction\n\t\t\t\tif c.Forward {\n\t\t\t\t\tdirection = f.Direction\n\t\t\t\t} else {\n\t\t\t\t\tdirection = f.Direction.Reverse()\n\t\t\t\t}\n\t\t\t\tif direction == DirectionAsc {\n\t\t\t\t\te = id.Gt(c.Fields[j].Value)\n\t\t\t\t} else {\n\t\t\t\t\te = id.Lt(c.Fields[j].Value)\n\t\t\t\t}\n\t\t\t}\n\t\t\tand = append(and, e)\n\t\t}\n\t\tclauses = append(clauses, goqu.And(and...))\n\t}\n\tif len(clauses) == 1 {\n\t\treturn clauses[0]\n\t}\n\treturn goqu.Or(clauses...)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/goqu.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/cursor/goqu.go", "rel_path": "pkg/cursor/goqu.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 59, "end_line": 75, "text": "func (a GoquBuilder) GetOrderByClause(c *Cursor) []exp.OrderedExpression {\n\texps := make([]exp.OrderedExpression, len(c.Fields))\n\n\tfor i, f := range c.Fields {\n\t\tvar e exp.OrderedExpression\n\n\t\tif f.Direction == DirectionAsc {\n\t\t\te = goqu.I(f.Name).Asc()\n\t\t} else {\n\t\t\te = goqu.I(f.Name).Desc()\n\t\t}\n\t\texps[i] = e\n\t}\n\n\treturn exps\n}\n", "n_tokens": 104, "primary_symbol": "GetOrderByClause", "primary_kind": "function", "primary_span": [59, 75], "def_symbols": ["GetOrderByClause"], "symbols": ["GetOrderByClause", "func", "GoquBuilder", "Cursor", "exp", "OrderedExpression", "exps", "make", "len", "Fields", "for", "range", "var", "Direction", "DirectionAsc", "goqu", "Name", "Asc", "else", "Desc", "return"], "doc_head": "func (a GoquBuilder) GetOrderByClause(c *Cursor) []exp.OrderedExpression {\n\texps := make([]exp.OrderedExpression, len(c.Fields))\n\tfor i, f := range c.Fields {\n\t\tvar e exp.OrderedExpression\n\t\tif f.Direction == DirectionAsc {\n\t\t\te = goqu.I(f.Name).Asc()\n\t\t} else {\n\t\t\te = goqu.I(f.Name).Desc()\n\t\t}\n\t\texps[i] = e\n\t}\n\treturn exps\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xgrpc/conn.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xgrpc/conn.go", "rel_path": "pkg/xgrpc/conn.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 20, "text": "package xgrpc\n\nimport (\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc MustConnect(target string) *grpc.ClientConn {\n\tconn, err := grpc.NewClient(\n\t\ttarget,\n\t\tgrpc.WithDefaultServiceConfig(`{\"loadBalancingConfig\": [{\"round_robin\":{}}]}`),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn conn\n}\n", "n_tokens": 101, "primary_symbol": "MustConnect", "primary_kind": "function", "primary_span": [8, 20], "def_symbols": ["MustConnect"], "symbols": ["MustConnect", "package", "xgrpc", "import", "google", "golang", "org", "grpc", "credentials", "insecure", "func", "target", "string", "ClientConn", "conn", "err", "NewClient", "WithDefaultServiceConfig", "loadBalancingConfig", "round_robin", "WithTransportCredentials", "NewCredentials", "nil", "panic", "return"], "doc_head": "package xgrpc\nimport (\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\nfunc MustConnect(target string) *grpc.ClientConn {\n\tconn, err := grpc.NewClient(\n\t\ttarget,\n\t\tgrpc.WithDefaultServiceConfig(`{\"loadBalancingConfig\": [{\"round_robin\":{}}]}`),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn conn\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/enc/cbc.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/enc/cbc.go", "rel_path": "pkg/enc/cbc.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 37, "text": "package enc\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"io\"\n)\n\ntype CBCCipher struct {\n\tkey string\n}\n\nfunc NewCBCCipher(key string) *CBCCipher {\n\treturn &CBCCipher{key: key}\n}\n\nfunc (c *CBCCipher) Encrypt(input []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher([]byte(c.key))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdata := c.pad(input)\n\tbuffer := make([]byte, aes.BlockSize+len(data))\n\tiv := buffer[:aes.BlockSize]\n\tif _, err := io.ReadFull(rand.Reader, iv); err != nil {\n\t\treturn nil, ErrCannotGenerateRandomIV\n\t}\n\n\tencrypter := cipher.NewCBCEncrypter(block, iv)\n\tencrypter.CryptBlocks(buffer[len(iv):], data)\n\n\treturn buffer, nil\n}\n", "n_tokens": 193, "primary_symbol": "NewCBCCipher", "primary_kind": "function", "primary_span": [15, 37], "def_symbols": ["NewCBCCipher", "Encrypt"], "symbols": ["NewCBCCipher", "Encrypt", "package", "enc", "import", "bytes", "crypto", "aes", "cipher", "rand", "type", "CBCCipher", "struct", "key", "string", "func", "return", "input", "byte", "error", "block", "err", "NewCipher", "nil", "data", "pad", "buffer", "make", "BlockSize", "len", "ReadFull", "Reader", "ErrCannotGenerateRandomIV", "encrypter", "NewCBCEncrypter", "CryptBlocks"], "doc_head": "package enc\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"io\"\n)\ntype CBCCipher struct {\n\tkey string\n}\nfunc NewCBCCipher(key string) *CBCCipher {\n\treturn &CBCCipher{key: key}\n}\nfunc (c *CBCCipher) Encrypt(input []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher([]byte(c.key))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdata := c.pad(input)\n\tbuffer := make([]byte, aes.BlockSize+len(data))\n\tiv := buffer[:aes.BlockSize]\n\tif _, err := io.ReadFull(rand.Reader, iv); err != nil {\n\t\treturn nil, ErrCannotGenerateRandomIV\n\t}\n\tencrypter := cipher.NewCBCEncrypter(block, iv)\n\tencrypter.CryptBlocks(buffer[len(iv):], data)\n\treturn buffer, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/enc/cbc.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/enc/cbc.go", "rel_path": "pkg/enc/cbc.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 38, "end_line": 63, "text": "func (c *CBCCipher) Decrypt(input []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher([]byte(c.key))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tiv := input[0:aes.BlockSize]\n\tbuffer := make([]byte, len(input)-len(iv))\n\tdecrypter := cipher.NewCBCDecrypter(block, iv)\n\tdecrypter.CryptBlocks(buffer, input[len(iv):])\n\n\treturn c.unpad(buffer), nil\n}\n\nfunc (c *CBCCipher) pad(data []byte) []byte {\n\tpadding := aes.BlockSize - len(data)%aes.BlockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(data, padtext...)\n}\n\nfunc (c *CBCCipher) unpad(data []byte) []byte {\n\tlength := len(data)\n\tpadding := int(data[length-1])\n\treturn data[:(length - padding)]\n}\n", "n_tokens": 193, "primary_symbol": "Decrypt", "primary_kind": "function", "primary_span": [38, 63], "def_symbols": ["Decrypt", "pad", "unpad"], "symbols": ["Decrypt", "pad", "unpad", "func", "CBCCipher", "input", "byte", "error", "block", "err", "aes", "NewCipher", "key", "nil", "return", "BlockSize", "buffer", "make", "len", "decrypter", "cipher", "NewCBCDecrypter", "CryptBlocks", "data", "padding", "padtext", "bytes", "Repeat", "append", "length", "int"], "doc_head": "func (c *CBCCipher) Decrypt(input []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher([]byte(c.key))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tiv := input[0:aes.BlockSize]\n\tbuffer := make([]byte, len(input)-len(iv))\n\tdecrypter := cipher.NewCBCDecrypter(block, iv)\n\tdecrypter.CryptBlocks(buffer, input[len(iv):])\n\treturn c.unpad(buffer), nil\n}\nfunc (c *CBCCipher) pad(data []byte) []byte {\n\tpadding := aes.BlockSize - len(data)%aes.BlockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(data, padtext...)\n}\nfunc (c *CBCCipher) unpad(data []byte) []byte {\n\tlength := len(data)\n\tpadding := int(data[length-1])\n\treturn data[:(length - padding)]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/enc/errors.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/enc/errors.go", "rel_path": "pkg/enc/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package enc\n\nimport \"github.com/cockroachdb/errors\"\n\nvar (\n\tErrCannotGenerateRandomIV = errors.New(\"cannot generate iv\")\n\tErrCannotDecodeString     = errors.New(\"cannot decode string\")\n)\n", "n_tokens": 44, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "enc", "import", "github", "com", "cockroachdb", "errors", "var", "ErrCannotGenerateRandomIV", "New", "cannot", "generate", "ErrCannotDecodeString", "decode", "string"], "doc_head": "package enc\nimport \"github.com/cockroachdb/errors\"\nvar (\n\tErrCannotGenerateRandomIV = errors.New(\"cannot generate iv\")\n\tErrCannotDecodeString     = errors.New(\"cannot decode string\")\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go", "rel_path": "pkg/testing/postgres.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 40, "text": "package testing\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"github.com/testcontainers/testcontainers-go\"\n\t\"github.com/testcontainers/testcontainers-go/wait\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n\n// PostgresSQLSuite is a testcontainers manager for MySQL\ntype PostgresSQLSuite struct {\n\tsuite.Suite\n\n\tcontainer testcontainers.Container\n\tcfg       *containerConfig\n\tconn      *pgsql.DB\n}\n\n// Option is a function that configures a MySQLSuite\ntype Option func(*containerConfig)\n\n// WithPort configures the port to use for the MySQL container\nfunc WithPort(port int) Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.Port = &port\n\t}\n}\n\n// WithDB configures the database to use for the MySQL container\nfunc WithDB(db string) Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.DB = db\n\t}\n}\n", "n_tokens": 204, "primary_symbol": "WithPort", "primary_kind": "function", "primary_span": [28, 40], "def_symbols": ["WithPort", "WithDB"], "symbols": ["WithPort", "WithDB", "package", "testing", "import", "context", "fmt", "time", "github", "com", "pkg", "errors", "stretchr", "testify", "suite", "testcontainers", "wait", "impalastudios", "aviation", "schedules", "pgsql", "PostgresSQLSuite", "manager", "for", "MySQL", "type", "struct", "Suite", "container", "Container", "cfg", "containerConfig", "conn", "Option", "function", "that", "configures", "MySQLSuite", "func", "the", "port", "use", "int", "return", "Port", "database", "string"], "doc_head": "package testing\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"github.com/testcontainers/testcontainers-go\"\n\t\"github.com/testcontainers/testcontainers-go/wait\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n// PostgresSQLSuite is a testcontainers manager for MySQL\ntype PostgresSQLSuite struct {\n\tsuite.Suite\n\tcontainer testcontainers.Container\n\tcfg       *containerConfig\n\tconn      *pgsql.DB\n}\n// Option is a function that configures a MySQLSuite\ntype Option func(*containerConfig)\n// WithPort configures the port to use for the MySQL container\nfunc WithPort(port int) Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.Port = &port\n\t}\n}\n// WithDB configures the database to use for the MySQL container\nfunc WithDB(db string) Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.DB = db\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go", "rel_path": "pkg/testing/postgres.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 41, "end_line": 74, "text": "// WithUserPassword configures the user and password to use for the MySQL container\nfunc WithUserPassword(user, password string) Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.User = user\n\t\tcfg.Password = password\n\t}\n}\n\n// Migrate configures the MySQL container to run migrations\nfunc Migrate() Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.Migrate = true\n\t}\n}\n\n// NewPostgresSQLSuite creates a new MySQLSuite\nfunc NewPostgresSQLSuite(opts ...Option) *PostgresSQLSuite {\n\tcfg := &containerConfig{\n\t\tImage:    \"postgres:latest\",\n\t\tHost:     \"localhost\",\n\t\tDB:       \"test\",\n\t\tUser:     \"test\",\n\t\tPassword: \"test\",\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(cfg)\n\t}\n\n\treturn &PostgresSQLSuite{\n\t\tcfg: cfg,\n\t}\n}\n", "n_tokens": 189, "primary_symbol": "WithUserPassword", "primary_kind": "function", "primary_span": [42, 74], "def_symbols": ["WithUserPassword", "Migrate", "NewPostgresSQLSuite"], "symbols": ["WithUserPassword", "Migrate", "NewPostgresSQLSuite", "configures", "the", "user", "and", "password", "use", "for", "MySQL", "container", "func", "string", "Option", "return", "cfg", "containerConfig", "User", "Password", "run", "migrations", "true", "creates", "new", "MySQLSuite", "opts", "PostgresSQLSuite", "Image", "postgres", "latest", "Host", "localhost", "test", "opt", "range"], "doc_head": "// WithUserPassword configures the user and password to use for the MySQL container\nfunc WithUserPassword(user, password string) Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.User = user\n\t\tcfg.Password = password\n\t}\n}\n// Migrate configures the MySQL container to run migrations\nfunc Migrate() Option {\n\treturn func(cfg *containerConfig) {\n\t\tcfg.Migrate = true\n\t}\n}\n// NewPostgresSQLSuite creates a new MySQLSuite\nfunc NewPostgresSQLSuite(opts ...Option) *PostgresSQLSuite {\n\tcfg := &containerConfig{\n\t\tImage:    \"postgres:latest\",\n\t\tHost:     \"localhost\",\n\t\tDB:       \"test\",\n\t\tUser:     \"test\",\n\t\tPassword: \"test\",\n\t}\n\tfor _, opt := range opts {\n\t\topt(cfg)\n\t}\n\treturn &PostgresSQLSuite{\n\t\tcfg: cfg,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go", "rel_path": "pkg/testing/postgres.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 75, "end_line": 106, "text": "type containerConfig struct {\n\tImage    string\n\tHost     string\n\tPort     *int\n\tDB       string\n\tUser     string\n\tPassword string\n\tMigrate  bool\n}\n\n// SetupSuite will be called once before the tests are run\n// It starts the postgresql container\nfunc (s *PostgresSQLSuite) SetupSuite() {\n\tctx := context.Background()\n\n\ts.Require().NoError(s.startContainer(ctx))\n\n\tif s.cfg.Migrate {\n\t\ts.Require().NoError(pgsql.MigrateUp(s.GetDBConfig()))\n\t}\n}\n\nfunc (s *PostgresSQLSuite) GetDBConfig() *pgsql.Config {\n\treturn &pgsql.Config{\n\t\tHost:     s.cfg.Host,\n\t\tPort:     *s.cfg.Port,\n\t\tDBName:   s.cfg.DB,\n\t\tUser:     s.cfg.User,\n\t\tPassword: s.cfg.Password,\n\t}\n}\n", "n_tokens": 179, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [87, 106], "def_symbols": ["SetupSuite", "GetDBConfig"], "symbols": ["SetupSuite", "GetDBConfig", "type", "containerConfig", "struct", "Image", "string", "Host", "Port", "int", "User", "Password", "Migrate", "bool", "will", "called", "once", "before", "the", "tests", "are", "run", "starts", "postgresql", "container", "func", "PostgresSQLSuite", "ctx", "context", "Background", "Require", "NoError", "startContainer", "cfg", "pgsql", "MigrateUp", "Config", "return", "DBName"], "doc_head": "type containerConfig struct {\n\tImage    string\n\tHost     string\n\tPort     *int\n\tDB       string\n\tUser     string\n\tPassword string\n\tMigrate  bool\n}\n// SetupSuite will be called once before the tests are run\n// It starts the postgresql container\nfunc (s *PostgresSQLSuite) SetupSuite() {\n\tctx := context.Background()\n\ts.Require().NoError(s.startContainer(ctx))\n\tif s.cfg.Migrate {\n\t\ts.Require().NoError(pgsql.MigrateUp(s.GetDBConfig()))\n\t}\n}\nfunc (s *PostgresSQLSuite) GetDBConfig() *pgsql.Config {\n\treturn &pgsql.Config{\n\t\tHost:     s.cfg.Host,\n\t\tPort:     *s.cfg.Port,\n\t\tDBName:   s.cfg.DB,\n\t\tUser:     s.cfg.User,\n\t\tPassword: s.cfg.Password,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go", "rel_path": "pkg/testing/postgres.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 107, "end_line": 129, "text": "// TearDownSuite will be called once after the tests are run\nfunc (s *PostgresSQLSuite) TearDownSuite() {\n\tctx := context.Background()\n\n\tt := time.Second\n\n\ts.Require().NoError(s.container.Stop(ctx, &t))\n\ts.Require().NoError(s.container.Terminate(ctx))\n}\n\n// DB returns a db connection to the MySQL container\n// creates one if it doesn't exist\nfunc (s *PostgresSQLSuite) DB(ctx context.Context) *pgsql.DB {\n\tif s.conn == nil {\n\t\tconn, err := pgsql.Connect(ctx, s.GetDBConfig())\n\t\ts.Require().NoError(err)\n\n\t\ts.conn = conn\n\t}\n\n\treturn s.conn\n}\n", "n_tokens": 144, "primary_symbol": "TearDownSuite", "primary_kind": "function", "primary_span": [108, 129], "def_symbols": ["TearDownSuite", "DB"], "symbols": ["TearDownSuite", "DB", "will", "called", "once", "after", "the", "tests", "are", "run", "func", "PostgresSQLSuite", "ctx", "context", "Background", "time", "Second", "Require", "NoError", "container", "Stop", "Terminate", "returns", "connection", "MySQL", "creates", "one", "doesn", "exist", "Context", "pgsql", "conn", "nil", "err", "Connect", "GetDBConfig", "return"], "doc_head": "// TearDownSuite will be called once after the tests are run\nfunc (s *PostgresSQLSuite) TearDownSuite() {\n\tctx := context.Background()\n\tt := time.Second\n\ts.Require().NoError(s.container.Stop(ctx, &t))\n\ts.Require().NoError(s.container.Terminate(ctx))\n}\n// DB returns a db connection to the MySQL container\n// creates one if it doesn't exist\nfunc (s *PostgresSQLSuite) DB(ctx context.Context) *pgsql.DB {\n\tif s.conn == nil {\n\t\tconn, err := pgsql.Connect(ctx, s.GetDBConfig())\n\t\ts.Require().NoError(err)\n\t\ts.conn = conn\n\t}\n\treturn s.conn\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/testing/postgres.go", "rel_path": "pkg/testing/postgres.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 130, "end_line": 167, "text": "func (s *PostgresSQLSuite) startContainer(ctx context.Context) error {\n\texposed := \"5432\"\n\tif s.cfg.Port != nil {\n\t\texposed = fmt.Sprintf(\"%d:%s\", *s.cfg.Port, exposed)\n\t}\n\n\treq := testcontainers.GenericContainerRequest{\n\t\tContainerRequest: testcontainers.ContainerRequest{\n\t\t\tImage:        s.cfg.Image,\n\t\t\tExposedPorts: []string{exposed},\n\t\t\tEnv: map[string]string{\n\t\t\t\t\"POSTGRES_DB\":       s.cfg.DB,\n\t\t\t\t\"POSTGRES_USER\":     s.cfg.User,\n\t\t\t\t\"POSTGRES_PASSWORD\": s.cfg.Password,\n\t\t\t},\n\t\t\tWaitingFor: wait.ForListeningPort(\"5432\"),\n\t\t},\n\t\tStarted: true,\n\t}\n\tcontainer, err := testcontainers.GenericContainer(ctx, req)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to start postgres container\")\n\t}\n\n\ts.container = container\n\n\tif s.cfg.Port == nil {\n\t\tport, err := container.MappedPort(ctx, \"5432\")\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"cannot get postgres container mapped port\")\n\t\t}\n\t\tp := port.Int()\n\t\ts.cfg.Port = &p\n\t}\n\n\treturn nil\n}\n", "n_tokens": 260, "primary_symbol": "startContainer", "primary_kind": "function", "primary_span": [130, 167], "def_symbols": ["startContainer"], "symbols": ["startContainer", "func", "PostgresSQLSuite", "ctx", "context", "Context", "error", "exposed", "cfg", "Port", "nil", "fmt", "Sprintf", "req", "testcontainers", "GenericContainerRequest", "ContainerRequest", "Image", "ExposedPorts", "string", "Env", "map", "POSTGRES_DB", "POSTGRES_USER", "User", "POSTGRES_PASSWORD", "Password", "WaitingFor", "wait", "ForListeningPort", "Started", "true", "container", "err", "GenericContainer", "return", "errors", "Wrap", "failed", "start", "postgres", "port", "MappedPort", "cannot", "get", "mapped", "Int"], "doc_head": "func (s *PostgresSQLSuite) startContainer(ctx context.Context) error {\n\texposed := \"5432\"\n\tif s.cfg.Port != nil {\n\t\texposed = fmt.Sprintf(\"%d:%s\", *s.cfg.Port, exposed)\n\t}\n\treq := testcontainers.GenericContainerRequest{\n\t\tContainerRequest: testcontainers.ContainerRequest{\n\t\t\tImage:        s.cfg.Image,\n\t\t\tExposedPorts: []string{exposed},\n\t\t\tEnv: map[string]string{\n\t\t\t\t\"POSTGRES_DB\":       s.cfg.DB,\n\t\t\t\t\"POSTGRES_USER\":     s.cfg.User,\n\t\t\t\t\"POSTGRES_PASSWORD\": s.cfg.Password,\n\t\t\t},\n\t\t\tWaitingFor: wait.ForListeningPort(\"5432\"),\n\t\t},\n\t\tStarted: true,\n\t}\n\tcontainer, err := testcontainers.GenericContainer(ctx, req)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to start postgres container\")\n\t}\n\ts.container = container\n\tif s.cfg.Port == nil {\n\t\tport, err := container.MappedPort(ctx, \"5432\")\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"cannot get postgres container mapped port\")\n\t\t}\n\t\tp := port.Int()\n\t\ts.cfg.Port = &p\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/map.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/map.go", "rel_path": "pkg/concurrent/map.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 43, "text": "package concurrent\n\nimport \"sync\"\n\n// Map is a concurrent map safe for concurrent use\ntype Map[T any] struct {\n\tm map[string]T\n\n\tmux *sync.Mutex\n}\n\n// NewMap creates a new concurrent map\nfunc NewMap[T any]() *Map[T] {\n\treturn &Map[T]{\n\t\tm:   make(map[string]T),\n\t\tmux: &sync.Mutex{},\n\t}\n}\n\n// Set sets a value in the map\nfunc (c *Map[T]) Set(key string, value T) {\n\tdefer c.mux.Unlock()\n\tc.mux.Lock()\n\n\tc.m[key] = value\n}\n\n// Get gets a value from the map\nfunc (c *Map[T]) Get(key string) (T, bool) {\n\tdefer c.mux.Unlock()\n\tc.mux.Lock()\n\n\tv, ok := c.m[key]\n\treturn v, ok\n}\n\nfunc (c *Map[T]) Size() int {\n\tdefer c.mux.Unlock()\n\tc.mux.Lock()\n\n\treturn len(c.m)\n}\n", "n_tokens": 207, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [21, 43], "def_symbols": ["Set", "Get", "Size"], "symbols": ["Set", "Get", "Size", "package", "concurrent", "import", "sync", "Map", "map", "safe", "for", "use", "type", "any", "struct", "string", "mux", "Mutex", "NewMap", "creates", "new", "func", "return", "make", "sets", "value", "the", "key", "defer", "Unlock", "Lock", "gets", "from", "bool", "int", "len"], "doc_head": "package concurrent\nimport \"sync\"\n// Map is a concurrent map safe for concurrent use\ntype Map[T any] struct {\n\tm map[string]T\n\tmux *sync.Mutex\n}\n// NewMap creates a new concurrent map\nfunc NewMap[T any]() *Map[T] {\n\treturn &Map[T]{\n\t\tm:   make(map[string]T),\n\t\tmux: &sync.Mutex{},\n\t}\n}\n// Set sets a value in the map\nfunc (c *Map[T]) Set(key string, value T) {\n\tdefer c.mux.Unlock()\n\tc.mux.Lock()\n\tc.m[key] = value\n}\n// Get gets a value from the map\nfunc (c *Map[T]) Get(key string) (T, bool) {\n\tdefer c.mux.Unlock()\n\tc.mux.Lock()\n\tv, ok := c.m[key]\n\treturn v, ok\n}\nfunc (c *Map[T]) Size() int {\n\tdefer c.mux.Unlock()\n\tc.mux.Lock()\n\treturn len(c.m)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/pool.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/pool.go", "rel_path": "pkg/concurrent/pool.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package concurrent\n\nimport (\n\t\"context\"\n\t\"sync\"\n\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n// ExecuteInPool executes a function in a pool of 100 goroutines.\nfunc ExecuteInPool[T any](ctx context.Context, objs []T, fn func(context.Context, T) error) []error {\n\tpool := make(chan struct{}, 60)\n\tfor i := 0; i < 60; i++ {\n\t\tpool <- struct{}{}\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(objs))\n\n\tvar errors []error\n\n\tfor _, o := range objs {\n\t\t<-pool\n\t\tgo func(ctx context.Context, a T) {\n\t\t\tdefer func() {\n\t\t\t\twg.Done()", "n_tokens": 152, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 27], "def_symbols": [], "symbols": ["package", "concurrent", "import", "context", "sync", "impalastudios", "com", "log", "uber", "org", "zap", "ExecuteInPool", "executes", "function", "pool", "goroutines", "func", "any", "ctx", "Context", "objs", "error", "make", "chan", "struct", "for", "var", "WaitGroup", "Add", "len", "errors", "range", "defer", "Done"], "doc_head": "package concurrent\nimport (\n\t\"context\"\n\t\"sync\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n// ExecuteInPool executes a function in a pool of 100 goroutines.\nfunc ExecuteInPool[T any](ctx context.Context, objs []T, fn func(context.Context, T) error) []error {\n\tpool := make(chan struct{}, 60)\n\tfor i := 0; i < 60; i++ {\n\t\tpool <- struct{}{}\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(len(objs))\n\tvar errors []error\n\tfor _, o := range objs {\n\t\t<-pool\n\t\tgo func(ctx context.Context, a T) {\n\t\t\tdefer func() {\n\t\t\t\twg.Done()"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/pool.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/pool.go", "rel_path": "pkg/concurrent/pool.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 42, "text": "\t\t\t\tpool <- struct{}{}\n\t\t\t}()\n\n\t\t\tif err := fn(ctx, a); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to execute fn\", zap.Error(err))\n\t\t\t\terrors = append(errors, err)\n\t\t\t}\n\t\t}(context.Background(), o)\n\t}\n\n\twg.Wait()\n\n\treturn errors\n}\n", "n_tokens": 65, "primary_symbol": "", "primary_kind": "", "primary_span": [28, 42], "def_symbols": [], "symbols": ["pool", "struct", "err", "ctx", "nil", "log", "Error", "Failed", "execute", "zap", "errors", "append", "context", "Background", "Wait", "return"], "doc_head": "\t\t\t\tpool <- struct{}{}\n\t\t\t}()\n\t\t\tif err := fn(ctx, a); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to execute fn\", zap.Error(err))\n\t\t\t\terrors = append(errors, err)\n\t\t\t}\n\t\t}(context.Background(), o)\n\t}\n\twg.Wait()\n\treturn errors\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/atomic.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/atomic.go", "rel_path": "pkg/concurrent/atomic.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 38, "text": "package concurrent\n\nimport \"sync\"\n\n// AtomicInt64 is a thread-safe int64\ntype AtomicInt64 struct {\n\ti int64\n\n\tmux *sync.Mutex\n}\n\n// NewAtomicInt64 creates a new AtomicInt64\nfunc NewAtomicInt64(i int64) *AtomicInt64 {\n\treturn &AtomicInt64{\n\t\ti:   i,\n\t\tmux: &sync.Mutex{},\n\t}\n}\n\n// GetAndInc returns the value of the AtomicInt64 and increments it\nfunc (i *AtomicInt64) GetAndInc() int64 {\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\n\tv := i.i\n\ti.i++\n\n\treturn v\n}\n\n// Add adds n to the AtomicInt64\nfunc (i *AtomicInt64) Add(n int64) {\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\n\ti.i += n\n}\n", "n_tokens": 179, "primary_symbol": "NewAtomicInt64", "primary_kind": "function", "primary_span": [13, 38], "def_symbols": ["NewAtomicInt64", "GetAndInc", "Add"], "symbols": ["NewAtomicInt64", "GetAndInc", "Add", "package", "concurrent", "import", "sync", "AtomicInt64", "thread", "safe", "int64", "type", "struct", "mux", "Mutex", "creates", "new", "func", "return", "returns", "the", "value", "and", "increments", "defer", "Unlock", "Lock", "adds"], "doc_head": "package concurrent\nimport \"sync\"\n// AtomicInt64 is a thread-safe int64\ntype AtomicInt64 struct {\n\ti int64\n\tmux *sync.Mutex\n}\n// NewAtomicInt64 creates a new AtomicInt64\nfunc NewAtomicInt64(i int64) *AtomicInt64 {\n\treturn &AtomicInt64{\n\t\ti:   i,\n\t\tmux: &sync.Mutex{},\n\t}\n}\n// GetAndInc returns the value of the AtomicInt64 and increments it\nfunc (i *AtomicInt64) GetAndInc() int64 {\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\tv := i.i\n\ti.i++\n\treturn v\n}\n// Add adds n to the AtomicInt64\nfunc (i *AtomicInt64) Add(n int64) {\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\ti.i += n\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/atomic.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/concurrent/atomic.go", "rel_path": "pkg/concurrent/atomic.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 39, "end_line": 46, "text": "// Get returns the value of the AtomicInt64\nfunc (i *AtomicInt64) Get() int64 {\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\n\treturn i.i\n}\n", "n_tokens": 40, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [40, 46], "def_symbols": ["Get"], "symbols": ["Get", "returns", "the", "value", "AtomicInt64", "func", "int64", "defer", "mux", "Unlock", "Lock", "return"], "doc_head": "// Get returns the value of the AtomicInt64\nfunc (i *AtomicInt64) Get() int64 {\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\treturn i.i\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/header.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/header.go", "rel_path": "pkg/ssim/reader/header.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 27, "text": "package reader\n\nimport \"strings\"\n\n// Header represents the SSIM header representation\n// The record has a standard length of 200 bytes broken into the following fields. The purpose of this\n// record is to assure the users that the data set is being correctly read, and defines, where\n// applicable, the number of seasons which follow.\ntype Header struct {\n\t// Always 1 (bytes 1-1)\n\tRecordType string\n\t// Always reads AIRLINE STANDARD SCHEDULE DATA SET (bytes 2-35)\n\tTitleOfContents string\n\t// Optional: (bytes 41-41)\n\tNumberOfSeasons string\n\t// Mandatory: (bytes 192-194)\n\tDatasetSerialNumber string\n\t// Always 000001\n\tRecordSerialNumber string\n}\n\nconst (\n\theaderRecordType         = \"1\"\n\theaderTitleOfContents    = \"AIRLINE STANDARD SCHEDULE DATA SET\"\n\theaderRecordSerialNumber = \"000001\"\n)\n", "n_tokens": 196, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 27], "def_symbols": [], "symbols": ["package", "reader", "import", "strings", "Header", "represents", "the", "SSIM", "header", "representation", "The", "record", "has", "standard", "length", "bytes", "broken", "into", "following", "fields", "purpose", "this", "assure", "users", "that", "data", "set", "being", "correctly", "read", "and", "defines", "where", "applicable", "number", "seasons", "which", "follow", "type", "struct", "Always", "RecordType", "string", "reads", "AIRLINE", "STANDARD", "SCHEDULE", "DATA", "SET", "TitleOfContents", "Optional", "NumberOfSeasons", "Mandatory", "DatasetSerialNumber", "RecordSerialNumber", "const", "headerRecordType", "headerTitleOfContents", "headerRecordSerialNumber"], "doc_head": "package reader\nimport \"strings\"\n// Header represents the SSIM header representation\n// The record has a standard length of 200 bytes broken into the following fields. The purpose of this\n// record is to assure the users that the data set is being correctly read, and defines, where\n// applicable, the number of seasons which follow.\ntype Header struct {\n\t// Always 1 (bytes 1-1)\n\tRecordType string\n\t// Always reads AIRLINE STANDARD SCHEDULE DATA SET (bytes 2-35)\n\tTitleOfContents string\n\t// Optional: (bytes 41-41)\n\tNumberOfSeasons string\n\t// Mandatory: (bytes 192-194)\n\tDatasetSerialNumber string\n\t// Always 000001\n\tRecordSerialNumber string\n}\nconst (\n\theaderRecordType         = \"1\"\n\theaderTitleOfContents    = \"AIRLINE STANDARD SCHEDULE DATA SET\"\n\theaderRecordSerialNumber = \"000001\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/header.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/header.go", "rel_path": "pkg/ssim/reader/header.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 28, "end_line": 41, "text": "// ReadHeader parses a header row\nfunc ReadHeader(row string) *Header {\n\tnumberOfSeasons := strings.TrimSpace(row[40:41])\n\tdatasetSerialNumber := strings.TrimSpace(row[191:194])\n\n\treturn &Header{\n\t\tRecordType:          headerRecordType,\n\t\tTitleOfContents:     headerTitleOfContents,\n\t\tNumberOfSeasons:     numberOfSeasons,\n\t\tDatasetSerialNumber: datasetSerialNumber,\n\t\tRecordSerialNumber:  headerRecordSerialNumber,\n\t}\n}\n", "n_tokens": 104, "primary_symbol": "ReadHeader", "primary_kind": "function", "primary_span": [29, 41], "def_symbols": ["ReadHeader"], "symbols": ["ReadHeader", "parses", "header", "row", "func", "string", "Header", "numberOfSeasons", "strings", "TrimSpace", "datasetSerialNumber", "return", "RecordType", "headerRecordType", "TitleOfContents", "headerTitleOfContents", "NumberOfSeasons", "DatasetSerialNumber", "RecordSerialNumber", "headerRecordSerialNumber"], "doc_head": "// ReadHeader parses a header row\nfunc ReadHeader(row string) *Header {\n\tnumberOfSeasons := strings.TrimSpace(row[40:41])\n\tdatasetSerialNumber := strings.TrimSpace(row[191:194])\n\treturn &Header{\n\t\tRecordType:          headerRecordType,\n\t\tTitleOfContents:     headerTitleOfContents,\n\t\tNumberOfSeasons:     numberOfSeasons,\n\t\tDatasetSerialNumber: datasetSerialNumber,\n\t\tRecordSerialNumber:  headerRecordSerialNumber,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/trailer.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/trailer.go", "rel_path": "pkg/ssim/reader/trailer.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 4, "text": "package reader\n\nimport \"strings\"\n", "n_tokens": 7, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 4], "def_symbols": [], "symbols": ["package", "reader", "import", "strings"], "doc_head": "package reader\nimport \"strings\""}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/trailer.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/trailer.go", "rel_path": "pkg/ssim/reader/trailer.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 5, "end_line": 29, "text": "// Trailer is a struct that represents the SSIM trailer\n// The record defines the end of the data under the preceding Carrier Record. Further Carrier/Trailer\n// Record combinations may appear on this data set. The record has a standard length of 200 bytes\n// broken into the following fields:\ntype Trailer struct {\n\t// Always 5 (bytes 1-1)\n\tRecordType string\n\t// Mandatory: (bytes 3-5)\n\tAirlineDesignator string\n\t// Optional: Release (Sell) Date (bytes 6-12)\n\tReleaseDate string\n\t// Mandatory: 6-digit numeric Serial Number. Equal to the Record\n\t// Serial Number of the previous record irrespective of its\n\t// Record Type and one less than the Record Serial Number of this Trailer\n\t// Record (bytes 188–193).\n\tSerialNumberCheckReference string\n\t// Mandatory: C or E (bytes 194-194)\n\tContinuationEndCode string\n\t// Mandatory: Sequential to previous record irrespective of its Record Type 0 filled. Right justified.\n\t// See Chapter 2 Record Serial Number description if record count exceeds 999999. (bytes 195-200)\n\tRecordSerialNumber string\n}\n\nconst trailerRecordType = \"5\"\n", "n_tokens": 262, "primary_symbol": "", "primary_kind": "", "primary_span": [5, 29], "def_symbols": [], "symbols": ["Trailer", "struct", "that", "represents", "the", "SSIM", "trailer", "The", "record", "defines", "end", "data", "under", "preceding", "Carrier", "Record", "Further", "combinations", "may", "appear", "this", "set", "has", "standard", "length", "bytes", "broken", "into", "following", "fields", "type", "Always", "RecordType", "string", "Mandatory", "AirlineDesignator", "Optional", "Release", "Sell", "Date", "ReleaseDate", "digit", "numeric", "Serial", "Number", "Equal", "previous", "irrespective", "its", "Type", "and", "one", "less", "than", "SerialNumberCheckReference", "ContinuationEndCode", "Sequential", "filled", "Right", "justified", "See", "Chapter", "description", "count", "exceeds", "RecordSerialNumber", "const", "trailerRecordType"], "doc_head": "// Trailer is a struct that represents the SSIM trailer\n// The record defines the end of the data under the preceding Carrier Record. Further Carrier/Trailer\n// Record combinations may appear on this data set. The record has a standard length of 200 bytes\n// broken into the following fields:\ntype Trailer struct {\n\t// Always 5 (bytes 1-1)\n\tRecordType string\n\t// Mandatory: (bytes 3-5)\n\tAirlineDesignator string\n\t// Optional: Release (Sell) Date (bytes 6-12)\n\tReleaseDate string\n\t// Mandatory: 6-digit numeric Serial Number. Equal to the Record\n\t// Serial Number of the previous record irrespective of its\n\t// Record Type and one less than the Record Serial Number of this Trailer\n\t// Record (bytes 188–193).\n\tSerialNumberCheckReference string\n\t// Mandatory: C or E (bytes 194-194)\n\tContinuationEndCode string\n\t// Mandatory: Sequential to previous record irrespective of its Record Type 0 filled. Right justified.\n\t// See Chapter 2 Record Serial Number description if record count exceeds 999999. (bytes 195-200)\n\tRecordSerialNumber string\n}\nconst trailerRecordType = \"5\""}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/trailer.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/trailer.go", "rel_path": "pkg/ssim/reader/trailer.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 30, "end_line": 47, "text": "// ReadTrailer parses a trailer row\nfunc ReadTrailer(row string) *Trailer {\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\treleaseDate := strings.TrimSpace(row[5:12])\n\tserialNumberCheckReference := row[187:193]\n\tcontinuationEndCode := row[193:194]\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\n\treturn &Trailer{\n\t\tRecordType:                 trailerRecordType,\n\t\tAirlineDesignator:          airlineDesignator,\n\t\tReleaseDate:                releaseDate,\n\t\tSerialNumberCheckReference: serialNumberCheckReference,\n\t\tContinuationEndCode:        continuationEndCode,\n\t\tRecordSerialNumber:         recordSerialNumber,\n\t}\n}\n", "n_tokens": 155, "primary_symbol": "ReadTrailer", "primary_kind": "function", "primary_span": [31, 47], "def_symbols": ["ReadTrailer"], "symbols": ["ReadTrailer", "parses", "trailer", "row", "func", "string", "Trailer", "airlineDesignator", "strings", "TrimSpace", "releaseDate", "serialNumberCheckReference", "continuationEndCode", "recordSerialNumber", "return", "RecordType", "trailerRecordType", "AirlineDesignator", "ReleaseDate", "SerialNumberCheckReference", "ContinuationEndCode", "RecordSerialNumber"], "doc_head": "// ReadTrailer parses a trailer row\nfunc ReadTrailer(row string) *Trailer {\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\treleaseDate := strings.TrimSpace(row[5:12])\n\tserialNumberCheckReference := row[187:193]\n\tcontinuationEndCode := row[193:194]\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\treturn &Trailer{\n\t\tRecordType:                 trailerRecordType,\n\t\tAirlineDesignator:          airlineDesignator,\n\t\tReleaseDate:                releaseDate,\n\t\tSerialNumberCheckReference: serialNumberCheckReference,\n\t\tContinuationEndCode:        continuationEndCode,\n\t\tRecordSerialNumber:         recordSerialNumber,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/carrier.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/carrier.go", "rel_path": "pkg/ssim/reader/carrier.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package reader\n\nimport \"strings\"\n\n// Period is a struct to represent from and to dates\ntype Period struct {\n\tFrom string\n\tTo   string\n}\n", "n_tokens": 33, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "reader", "import", "strings", "Period", "struct", "represent", "from", "and", "dates", "type", "From", "string"], "doc_head": "package reader\nimport \"strings\"\n// Period is a struct to represent from and to dates\ntype Period struct {\n\tFrom string\n\tTo   string\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/carrier.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/carrier.go", "rel_path": "pkg/ssim/reader/carrier.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 11, "end_line": 55, "text": "// Carrier is a struct that represents the SSIM carrier\n// The record gives an indication of the period(s) of applicability of the schedules that follow on\n// subsequent records. The record has the standard length of 200 bytes broken into the following fields:\ntype Carrier struct {\n\t// Always 2\n\tRecordType string\n\t// Mandatory: U = UTC, L = Local time (bytes 2-2)\n\tTimeMode string\n\t// Mandatory: 3-letter IATA code (bytes 3-5)\n\tAirlineDesignator string\n\t// Optional: (bytes 11-13)\n\tSeason string\n\t// Mandatory: First and last date of the schedule contained within this Carrier/Trailer\n\t// Record. Shown as day, month, year in the time mode as specified.\n\t// (bytes 15-28) ... from schedule (15-21), to schedule (22-28)\n\tPeriodOfScheduleValidity *Period\n\t// Mandatory: Day, month, year of data set creation (e.g. 01APR90) (bytes 29-35)\n\tCreationDate string\n\t// Optional: Free format, blank fill e.g. SAS IATA DRAFT S90 (bytes 36-64)\n\tTitleOfData string\n\t// Optional: Day, month, year or blank fill (bytes 65-71)\n\tReleaseDate string\n\t// Mandatory: P or C (bytes 72-72)\n\tScheduleStatus string\n\t// Optional: (bytes 73-107)\n\tCreatorReference string\n\t// Conditional: (bytes 108-108)\n\tDuplicateAirlineDesignatorMarker string\n\t// Optional: (bytes 109-169)\n\tGeneralInformation string\n\t// Optional: The format is as defined in defaults Chapter 2, except that the DEI (503) is not required. (bytes 170-188)\n\tInFlightServiceInformation string\n\t// Optional: EN = default for Carrier is that flight legs are Not Electronic Ticketing Candidates ET = default for Carrier is that\n\t// flight legs are Electronic Ticketing Candidates. (bytes 189-190)\n\tElectronicTicketingInformation string\n\t// Mandatory: Hours, minutes of data set creation, e.g. 1346. (bytes 191-194)\n\tCreationTime string\n\t// Mandatory: Numeric. One greater than the previous record which must have been either a Header Record or a Trailer\n\t// Record. Zero fill. Right justified. See Chapter 2 Record Serial Number description if record count exceeds 999999.\n\t// (bytes 195-200)\n\tRecordSerialNumber string\n}\n\nconst carrierRecordType = \"2\"\n", "n_tokens": 558, "primary_symbol": "", "primary_kind": "", "primary_span": [11, 55], "def_symbols": [], "symbols": ["Carrier", "struct", "that", "represents", "the", "SSIM", "carrier", "The", "record", "gives", "indication", "period", "applicability", "schedules", "follow", "subsequent", "records", "has", "standard", "length", "bytes", "broken", "into", "following", "fields", "type", "Always", "RecordType", "string", "Mandatory", "UTC", "Local", "time", "TimeMode", "letter", "IATA", "code", "AirlineDesignator", "Optional", "Season", "First", "and", "last", "date", "schedule", "contained", "within", "this", "Trailer", "Record", "Shown", "day", "month", "year", "mode", "specified", "from", "PeriodOfScheduleValidity", "Period", "Day", "data", "set", "creation", "CreationDate", "Free", "format", "blank", "fill", "SAS", "DRAFT", "S90", "TitleOfData", "ReleaseDate", "ScheduleStatus", "CreatorReference", "Conditional", "DuplicateAirlineDesignatorMarker", "GeneralInformation", "defined", "defaults", "Chapter", "except", "DEI", "not", "required", "InFlightServiceInformation", "default", "for", "flight", "legs", "are", "Not", "Electronic", "Ticketing", "Candidates", "ElectronicTicketingInformation", "Hours", "minutes", "CreationTime", "Numeric", "One", "greater", "than", "previous", "which", "must", "have", "been", "either", "Header", "Zero", "Right", "justified", "See", "Serial", "Number", "description", "count", "exceeds", "RecordSerialNumber", "const", "carrierRecordType"], "doc_head": "// Carrier is a struct that represents the SSIM carrier\n// The record gives an indication of the period(s) of applicability of the schedules that follow on\n// subsequent records. The record has the standard length of 200 bytes broken into the following fields:\ntype Carrier struct {\n\t// Always 2\n\tRecordType string\n\t// Mandatory: U = UTC, L = Local time (bytes 2-2)\n\tTimeMode string\n\t// Mandatory: 3-letter IATA code (bytes 3-5)\n\tAirlineDesignator string\n\t// Optional: (bytes 11-13)\n\tSeason string\n\t// Mandatory: First and last date of the schedule contained within this Carrier/Trailer\n\t// Record. Shown as day, month, year in the time mode as specified.\n\t// (bytes 15-28) ... from schedule (15-21), to schedule (22-28)\n\tPeriodOfScheduleValidity *Period\n\t// Mandatory: Day, month, year of data set creation (e.g. 01APR90) (bytes 29-35)\n\tCreationDate string\n\t// Optional: Free format, blank fill e.g. SAS IATA DRAFT S90 (bytes 36-64)\n\tTitleOfData string\n\t// Optional: Day, month, year or blank fill (bytes 65-71)\n\tReleaseDate string\n\t// Mandatory: P or C (bytes 72-72)\n\tScheduleStatus string\n\t// Optional: (bytes 73-107)\n\tCreatorReference string\n\t// Conditional: (bytes 108-108)\n\tDuplicateAirlineDesi"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/carrier.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/carrier.go", "rel_path": "pkg/ssim/reader/carrier.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 56, "end_line": 96, "text": "// ReadCarrier parses a carrier row\nfunc ReadCarrier(row string) *Carrier {\n\ttimeMode := strings.TrimSpace(row[1:2])\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\tseason := strings.TrimSpace(row[10:13])\n\tperiodOfScheduleValidity := &Period{\n\t\tFrom: row[14:21],\n\t\tTo:   row[21:28],\n\t}\n\tcreationDate := strings.TrimSpace(row[28:35])\n\ttitleOfData := strings.TrimSpace(row[35:64])\n\treleaseDate := strings.TrimSpace(row[64:71])\n\tscheduleStatus := strings.TrimSpace(row[71:72])\n\tcreatorReference := strings.TrimSpace(row[72:107])\n\tduplicateAirlineDesignatorMarker := strings.TrimSpace(row[107:108])\n\tgeneralInformation := strings.TrimSpace(row[108:169])\n\tinFlightServiceInformation := strings.TrimSpace(row[169:188])\n\telectronicTicketingInformation := strings.TrimSpace(row[188:190])\n\tcreationTime := strings.TrimSpace(row[190:194])\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\n\treturn &Carrier{\n\t\tRecordType:                       carrierRecordType,\n\t\tTimeMode:                         timeMode,\n\t\tAirlineDesignator:                airlineDesignator,\n\t\tSeason:                           season,\n\t\tPeriodOfScheduleValidity:         periodOfScheduleValidity,\n\t\tCreationDate:                     creationDate,\n\t\tTitleOfData:                      titleOfData,\n\t\tReleaseDate:                      releaseDate,\n\t\tScheduleStatus:                   scheduleStatus,\n\t\tCreatorReference:                 creatorReference,\n\t\tDuplicateAirlineDesignatorMarker: duplicateAirlineDesignatorMarker,\n\t\tGeneralInformation:               generalInformation,\n\t\tInFlightServiceInformation:       inFlightServiceInformation,\n\t\tElectronicTicketingInformation:   electronicTicketingInformation,\n\t\tCreationTime:                     creationTime,\n\t\tRecordSerialNumber:               recordSerialNumber,\n\t}\n}\n", "n_tokens": 399, "primary_symbol": "ReadCarrier", "primary_kind": "function", "primary_span": [57, 96], "def_symbols": ["ReadCarrier"], "symbols": ["ReadCarrier", "parses", "carrier", "row", "func", "string", "Carrier", "timeMode", "strings", "TrimSpace", "airlineDesignator", "season", "periodOfScheduleValidity", "Period", "From", "creationDate", "titleOfData", "releaseDate", "scheduleStatus", "creatorReference", "duplicateAirlineDesignatorMarker", "generalInformation", "inFlightServiceInformation", "electronicTicketingInformation", "creationTime", "recordSerialNumber", "return", "RecordType", "carrierRecordType", "TimeMode", "AirlineDesignator", "Season", "PeriodOfScheduleValidity", "CreationDate", "TitleOfData", "ReleaseDate", "ScheduleStatus", "CreatorReference", "DuplicateAirlineDesignatorMarker", "GeneralInformation", "InFlightServiceInformation", "ElectronicTicketingInformation", "CreationTime", "RecordSerialNumber"], "doc_head": "// ReadCarrier parses a carrier row\nfunc ReadCarrier(row string) *Carrier {\n\ttimeMode := strings.TrimSpace(row[1:2])\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\tseason := strings.TrimSpace(row[10:13])\n\tperiodOfScheduleValidity := &Period{\n\t\tFrom: row[14:21],\n\t\tTo:   row[21:28],\n\t}\n\tcreationDate := strings.TrimSpace(row[28:35])\n\ttitleOfData := strings.TrimSpace(row[35:64])\n\treleaseDate := strings.TrimSpace(row[64:71])\n\tscheduleStatus := strings.TrimSpace(row[71:72])\n\tcreatorReference := strings.TrimSpace(row[72:107])\n\tduplicateAirlineDesignatorMarker := strings.TrimSpace(row[107:108])\n\tgeneralInformation := strings.TrimSpace(row[108:169])\n\tinFlightServiceInformation := strings.TrimSpace(row[169:188])\n\telectronicTicketingInformation := strings.TrimSpace(row[188:190])\n\tcreationTime := strings.TrimSpace(row[190:194])\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\treturn &Carrier{\n\t\tRecordType:                       carrierRecordType,\n\t\tTimeMode:                         timeMode,\n\t\tAirlineDesignator:                airlineDesignator,\n\t\tSeason:                           season,\n\t\tPeriodOfScheduleValidity:         periodOfScheduleValidity,\n\t\tCreationDate:                  "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/record.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/record.go", "rel_path": "pkg/ssim/reader/record.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "package reader\n\nimport \"strings\"\n\n// RecordType returns the record type of a row\n// The record type is the first character of a row\n// Which can be 1, 2, 3, 4 or 5\nfunc RecordType(row string) string {\n\treturn row[0:1]\n}\n\n// IsHeader returns true if the row is a header row\nfunc IsHeader(row string) bool {\n\treturn RecordType(row) == headerRecordType\n}\n\n// IsCarrier returns true if the row is a carrier row\nfunc IsCarrier(row string) bool {\n\treturn RecordType(row) == carrierRecordType\n}\n\n// IsLeg returns true if the row is a leg row\nfunc IsLeg(row string) bool {\n\treturn RecordType(row) == legRecordType\n}\n\n// IsSegment returns true if the row is a segment row\nfunc IsSegment(row string) bool {\n\treturn RecordType(row) == segmentRecordType\n}\n", "n_tokens": 193, "primary_symbol": "RecordType", "primary_kind": "function", "primary_span": [8, 31], "def_symbols": ["RecordType", "IsHeader", "IsCarrier", "IsLeg", "IsSegment"], "symbols": ["RecordType", "IsHeader", "IsCarrier", "IsLeg", "IsSegment", "package", "reader", "import", "strings", "returns", "the", "record", "type", "row", "The", "first", "character", "Which", "can", "func", "string", "return", "true", "header", "bool", "headerRecordType", "carrier", "carrierRecordType", "leg", "legRecordType", "segment", "segmentRecordType"], "doc_head": "package reader\nimport \"strings\"\n// RecordType returns the record type of a row\n// The record type is the first character of a row\n// Which can be 1, 2, 3, 4 or 5\nfunc RecordType(row string) string {\n\treturn row[0:1]\n}\n// IsHeader returns true if the row is a header row\nfunc IsHeader(row string) bool {\n\treturn RecordType(row) == headerRecordType\n}\n// IsCarrier returns true if the row is a carrier row\nfunc IsCarrier(row string) bool {\n\treturn RecordType(row) == carrierRecordType\n}\n// IsLeg returns true if the row is a leg row\nfunc IsLeg(row string) bool {\n\treturn RecordType(row) == legRecordType\n}\n// IsSegment returns true if the row is a segment row\nfunc IsSegment(row string) bool {\n\treturn RecordType(row) == segmentRecordType\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/record.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/record.go", "rel_path": "pkg/ssim/reader/record.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 43, "text": "// IsTrailer returns true if the row is a trailer row\nfunc IsTrailer(row string) bool {\n\treturn RecordType(row) == trailerRecordType\n}\n\nconst zeroRecordPrefix = \"0000000000000\"\n\n// IsZero returns true if the row is a zero row\nfunc IsZero(row string) bool {\n\treturn strings.HasPrefix(row, zeroRecordPrefix)\n}\n", "n_tokens": 77, "primary_symbol": "IsTrailer", "primary_kind": "function", "primary_span": [33, 43], "def_symbols": ["IsTrailer", "IsZero"], "symbols": ["IsTrailer", "IsZero", "returns", "true", "the", "row", "trailer", "func", "string", "bool", "return", "RecordType", "trailerRecordType", "const", "zeroRecordPrefix", "zero", "strings", "HasPrefix"], "doc_head": "// IsTrailer returns true if the row is a trailer row\nfunc IsTrailer(row string) bool {\n\treturn RecordType(row) == trailerRecordType\n}\nconst zeroRecordPrefix = \"0000000000000\"\n// IsZero returns true if the row is a zero row\nfunc IsZero(row string) bool {\n\treturn strings.HasPrefix(row, zeroRecordPrefix)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go", "rel_path": "pkg/ssim/reader/leg.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package reader\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/cockroachdb/errors\"\n)\n", "n_tokens": 21, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "reader", "import", "strconv", "strings", "github", "com", "cockroachdb", "errors"], "doc_head": "package reader\nimport (\n\t\"strconv\"\n\t\"strings\"\n\t\"github.com/cockroachdb/errors\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go", "rel_path": "pkg/ssim/reader/leg.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 10, "end_line": 108, "text": "// Leg represents the SSIM leg representation\n// The record(s) gives schedule details leg by leg for each Flight Designator. The record has a\n// standard length of 200 bytes broken into the following fields:\ntype Leg struct {\n\t// Always 3 (bytes 1-1)\n\tRecordType string\n\t// Conditional: (bytes 2-2)\n\tOperationalSuffix string\n\t// Mandatory: (bytes 3-5)\n\tAirlineDesignator string\n\t// Mandatory: (bytes 6-9)\n\tFlightNumber int\n\t// Mandatory: Number between 01 and 99 (bytes 10-11)\n\tItineraryVariationIdentifier int8\n\t// Mandatory: Number between 01 and 99, sequencing continuous flight legs as they operate within\n\t// each Itinerary Variation Identifier. (bytes 12-13)\n\tLegSequenceNumber int8\n\t// Mandatory: Alpha (bytes 14-14)\n\tServiceType string\n\t// Mandatory: Day, month, year This field (from) bytes 15-21 applies to the aircraft STD (to) bytes 22-28 and must be compatible with\n\t// the Time Mode in byte 2 of Record Type 2. (bytes 15-28)\n\tPeriodOfOperation *Period\n\t// Mandatory: This field applies to the aircraft STD and must be compatible with the Time Mode in byte 2 of Record Type 2. This\n\t// field is blank filled, for nonoperational days. (bytes 29-35)\n\tDaysOfOperation string\n\t// Conditional: (bytes 36-36)\n\tFrequencyRate string\n\t// Mandatory: 3-character IATA code (bytes 37-39)\n\tDepartureStation string\n\t// Mandatory: This field must be compatible with the Time Mode in byte 2 of Record Type 2. Although this time will nearly always be\n\t// the same as aircraft STA it must be completed. (bytes 40-43)\n\tDepartureScheduledTimeOfPassenger string\n\t// Mandatory: This field must be compatible with the Time Mode in byte 2 of Record Type 2. (bytes 44-47)\n\tDepartureScheduledTimeOfAircraft string\n\t// Mandatory: Hours and Minutes variation from UTC (see Appendix F) (bytes 48-52)\n\tDepartureUTCLocalTimeVariation string\n\t// Conditional: Alphanumeric (bytes 53-54)\n\tDeparturePassengerTerminal string\n\t// Mandatory: 3-character IATA code (bytes 55-57)\n\tArrivalStation string\n\t// Mandatory: This field must be compatible with the Time Mode in byte 2 of Record Type 2. (bytes 58-61)\n\tArrivalScheduledTimeOfAircraft string\n\t// Mandatory: This field must be compatible with the Time Mode in byte 2 of Record Type 2. Although this time will nearly always be\n\t// the same as aircraft STA it must be completed. (bytes 62-65)\n\tArrivalScheduledTimeOfPassenger string\n\t// Mandatory: Hours and Minutes variation from UTC (see Appendix F) (bytes 66-70)\n\tArrivalUTCLocalTimeVariation string\n\t// Conditional: Alphanumeric (bytes 71-72)\n\tArrivalPassengerTerminal string\n\t// Mandatory: ATA/IATA Aircraft Type. See Appendix A. (bytes 73-75)\n\tAircraftType string\n\t// Conditional: Note: Either this field or the Aircraft Configuration/Version (in bytes 173–192) is mandatory.\n\t// (bytes 76-95)\n\tPassengerReservationsBookingDesignator string\n\t// Conditional: Blank fill by Passenger Booking Designator class (bytes 96-100)\n\tPassengerReservationsBookingModifier string\n\t// Optional: Blank fill by Passenger Reservations Booking Designator class (bytes 101-110)\n\tMealServiceNote string\n\t// Conditional: In the case of 2 character Designators Airline Designators bytes 113 and/or 116 and/or 119 must\n\t// be blank. Left justify and blank fill if fewer than three carriers. (bytes 111-119)\n\tJointOperationAirlineDesignators string\n\t// Optional: Two character combination of D and/or I Position 120 is leg departure status Position 121 is leg arrival status\n\t// (bytes 120-121)\n\tMinimumConnectingTimeInternationalDomesticStatus string\n\t// Optional: S if subject to regulations (bytes 122-122)\n\tSecureFlightIndicator string\n\t// Conditional: (bytes 128-128)\n\tItineraryVariationIdentifierOverflow string\n\t// Conditional: (bytes 129-131)\n\tAircraftOwner string\n\t// Conditional: (bytes 132-134)\n\tCockpitCrewEmployer string\n\t// Conditional: (bytes 135-137)\n\tCabinCrewEmployer string\n\t// Conditional: (bytes 145-145)\n\tAircraftRotationLayover string\n\t// Conditional: (bytes 146-146)\n\t// OperationalSuffix       string\n\t// Conditional: (bytes 148-148)\n\tFlightTransitLayover string\n\t// Conditional: Code Share (DEI 2) or Operating Airline Disclosure — Shared Airline or Wet Lease Designation (DEI 9)\n\t// (bytes 149-149)\n\tOperatingAirlineDisclosure string\n\t// Conditional: (bytes 150-160)\n\tTrafficRestrictionCode string\n\t// Conditional: (bytes 161-161)\n\tTrafficRestrictionCodeLegOverflowIndicator string\n\t// Conditional: Note: Either this field or the Passenger Reservations Booking Designator (bytes 76–95) is mandatory\n\t// (bytes 173-192)\n\tAircraftConfigurationVersion string\n\t// Optional: (bytes 193-194)\n\tDateVariation string\n\t// Mandatory: 0 filled and sequential to previous record irrespective of its Record Type. See Chapter 2 Record\n\t// Serial Number description if record count exceeds 999999. (bytes 195-200)\n\tRecordSerialNumber string\n}\n\nconst legRecordType = \"3\"\n", "n_tokens": 1288, "primary_symbol": "", "primary_kind": "", "primary_span": [10, 108], "def_symbols": [], "symbols": ["Leg", "represents", "the", "SSIM", "leg", "representation", "The", "record", "gives", "schedule", "details", "for", "each", "Flight", "Designator", "has", "standard", "length", "bytes", "broken", "into", "following", "fields", "type", "struct", "Always", "RecordType", "string", "Conditional", "OperationalSuffix", "Mandatory", "AirlineDesignator", "FlightNumber", "int", "Number", "between", "and", "ItineraryVariationIdentifier", "int8", "sequencing", "continuous", "flight", "legs", "they", "operate", "within", "Itinerary", "Variation", "Identifier", "LegSequenceNumber", "Alpha", "ServiceType", "Day", "month", "year", "This", "field", "from", "applies", "aircraft", "STD", "must", "compatible", "with", "Time", "Mode", "byte", "Record", "Type", "PeriodOfOperation", "Period", "blank", "filled", "nonoperational", "days", "DaysOfOperation", "FrequencyRate", "character", "IATA", "code", "DepartureStation", "Although", "this", "time", "will", "nearly", "always", "same", "STA", "completed", "DepartureScheduledTimeOfPassenger", "DepartureScheduledTimeOfAircraft", "Hours", "Minutes", "variation", "UTC", "see", "Appendix", "DepartureUTCLocalTimeVariation", "Alphanumeric", "DeparturePassengerTerminal", "ArrivalStation", "ArrivalScheduledTimeOfAircraft", "ArrivalScheduledTimeOfPassenger", "ArrivalUTCLocalTimeVariation", "ArrivalPassengerTerminal", "ATA", "Aircraft", "See", "AircraftType", "Note", "Either", "Configuration", "Version", "mandatory", "PassengerReservationsBookingDesignator", "Blank", "fill", "Passenger", "Booking", "class", "PassengerReservationsBookingModifier", "Optional", "Reservations", "MealServiceNote", "case", "Designators", "Airline", "Left", "justify", "fewer", "than", "three", "carriers", "JointOperationAirlineDesignators", "Two", "combination", "Position", "departure", "status", "arrival", "MinimumConnectingTimeInternationalDomesticStatus", "subject", "regulations", "SecureFlightIndicator", "ItineraryVariationIdentifierOverflow", "AircraftOwner", "CockpitCrewEmployer", "CabinCrewEmployer", "AircraftRotationLayover", "FlightTransitLayover", "Code", "Share", "DEI", "Operating", "Disclosure", "Shared", "Wet", "Lease", "Designation", "OperatingAirlineDisclosure", "TrafficRestrictionCode", "TrafficRestrictionCodeLegOverflowIndicator", "AircraftConfigurationVersion", "DateVariation", "sequential", "previous", "irrespective", "its", "Chapter", "Serial", "description", "count", "exceeds", "RecordSerialNumber", "const", "legRecordType"], "doc_head": "// Leg represents the SSIM leg representation\n// The record(s) gives schedule details leg by leg for each Flight Designator. The record has a\n// standard length of 200 bytes broken into the following fields:\ntype Leg struct {\n\t// Always 3 (bytes 1-1)\n\tRecordType string\n\t// Conditional: (bytes 2-2)\n\tOperationalSuffix string\n\t// Mandatory: (bytes 3-5)\n\tAirlineDesignator string\n\t// Mandatory: (bytes 6-9)\n\tFlightNumber int\n\t// Mandatory: Number between 01 and 99 (bytes 10-11)\n\tItineraryVariationIdentifier int8\n\t// Mandatory: Number between 01 and 99, sequencing continuous flight legs as they operate within\n\t// each Itinerary Variation Identifier. (bytes 12-13)\n\tLegSequenceNumber int8\n\t// Mandatory: Alpha (bytes 14-14)\n\tServiceType string\n\t// Mandatory: Day, month, year This field (from) bytes 15-21 applies to the aircraft STD (to) bytes 22-28 and must be compatible with\n\t// the Time Mode in byte 2 of Record Type 2. (bytes 15-28)\n\tPeriodOfOperation *Period\n\t// Mandatory: This field applies to the aircraft STD and must be compatible with the Time Mode in byte 2 of Record Type 2. This\n\t// field is blank filled, for nonoperational days. (bytes 29-35)\n\tDaysOfOperation string\n\t// Conditional"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go", "rel_path": "pkg/ssim/reader/leg.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 109, "end_line": 208, "text": "// ReadLeg parses a leg record\nfunc ReadLeg(row string) (*Leg, error) {\n\toperationalSuffix := strings.TrimSpace(row[1:2])\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\n\tflightNumber, err := strconv.Atoi(strings.TrimSpace(row[5:9]))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert leg flight number\")\n\t}\n\n\titineraryVariationIdentifier, err := strconv.Atoi(row[9:11])\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert leg itinerary variation identifier\")\n\t}\n\n\tlegSequenceNumber, err := strconv.Atoi(row[11:13])\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert leg sequence number\")\n\t}\n\n\tserviceType := row[13:14]\n\tperiodOfOperation := &Period{\n\t\tFrom: row[14:21],\n\t\tTo:   row[21:28],\n\t}\n\tdaysOfOperation := strings.TrimSpace(row[28:35])\n\tfrequencyRate := strings.TrimSpace(row[35:36])\n\tdepartureStation := strings.TrimSpace(row[36:39])\n\tdepartureScheduledTimeOfPassenger := strings.TrimSpace(row[39:43])\n\tdepartureScheduledTimeOfAircraft := strings.TrimSpace(row[43:47])\n\tdepartureUTCLocalTimeVariation := strings.TrimSpace(row[47:52])\n\tdeparturePassengerTerminal := strings.TrimSpace(row[52:54])\n\tarrivalStation := strings.TrimSpace(row[54:57])\n\tarrivalScheduledTimeOfAircraft := strings.TrimSpace(row[57:61])\n\tarrivalScheduledTimeOfPassenger := strings.TrimSpace(row[61:65])\n\tarrivalUTCLocalTimeVariation := strings.TrimSpace(row[65:70])\n\tarrivalPassengerTerminal := strings.TrimSpace(row[70:72])\n\taircraftType := strings.TrimSpace(row[72:75])\n\tpassengerReservationsBookingDesignator := strings.TrimSpace(row[75:95])\n\tpassengerReservationsBookingModifier := strings.TrimSpace(row[95:100])\n\tmealServiceNote := strings.TrimSpace(row[100:110])\n\tjointOperationAirlineDesignators := strings.TrimSpace(row[110:119])\n\tminimumConnectingTimeInternationalDomesticStatus := strings.TrimSpace(row[119:121])\n\tsecureFlightIndicator := strings.TrimSpace(row[121:122])\n\titineraryVariationIdentifierOverflow := strings.TrimSpace(row[127:128])\n\taircraftOwner := strings.TrimSpace(row[128:131])\n\tcockpitCrewEmployer := strings.TrimSpace(row[131:134])\n\tcabinCrewEmployer := strings.TrimSpace(row[134:137])\n\taircraftRotationLayover := strings.TrimSpace(row[144:145])\n\tflightTransitLayover := strings.TrimSpace(row[145:146])\n\toperatingAirlineDisclosure := strings.TrimSpace(row[146:147])\n\ttrafficRestrictionCode := strings.TrimSpace(row[147:160])\n\ttrafficRestrictionCodeLegOverflowIndicator := strings.TrimSpace(row[160:161])\n\taircraftConfigurationVersion := strings.TrimSpace(row[172:192])\n\tdateVariation := strings.ReplaceAll(row[192:194], \" \", \"0\")\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\n\treturn &Leg{\n\t\tRecordType:                                       legRecordType,\n\t\tOperationalSuffix:                                operationalSuffix,\n\t\tAirlineDesignator:                                airlineDesignator,\n\t\tFlightNumber:                                     flightNumber,\n\t\tItineraryVariationIdentifier:                     int8(itineraryVariationIdentifier),\n\t\tLegSequenceNumber:                                int8(legSequenceNumber),\n\t\tServiceType:                                      serviceType,\n\t\tPeriodOfOperation:                                periodOfOperation,\n\t\tDaysOfOperation:                                  daysOfOperation,\n\t\tFrequencyRate:                                    frequencyRate,\n\t\tDepartureStation:                                 departureStation,\n\t\tDepartureScheduledTimeOfPassenger:                departureScheduledTimeOfPassenger,\n\t\tDepartureScheduledTimeOfAircraft:                 departureScheduledTimeOfAircraft,\n\t\tDepartureUTCLocalTimeVariation:                   departureUTCLocalTimeVariation,\n\t\tDeparturePassengerTerminal:                       departurePassengerTerminal,\n\t\tArrivalStation:                                   arrivalStation,\n\t\tArrivalScheduledTimeOfAircraft:                   arrivalScheduledTimeOfAircraft,\n\t\tArrivalScheduledTimeOfPassenger:                  arrivalScheduledTimeOfPassenger,\n\t\tArrivalUTCLocalTimeVariation:                     arrivalUTCLocalTimeVariation,\n\t\tArrivalPassengerTerminal:                         arrivalPassengerTerminal,\n\t\tAircraftType:                                     aircraftType,\n\t\tPassengerReservationsBookingDesignator:           passengerReservationsBookingDesignator,\n\t\tPassengerReservationsBookingModifier:             passengerReservationsBookingModifier,\n\t\tMealServiceNote:                                  mealServiceNote,\n\t\tJointOperationAirlineDesignators:                 jointOperationAirlineDesignators,\n\t\tMinimumConnectingTimeInternationalDomesticStatus: minimumConnectingTimeInternationalDomesticStatus,\n\t\tSecureFlightIndicator:                            secureFlightIndicator,\n\t\tItineraryVariationIdentifierOverflow:             itineraryVariationIdentifierOverflow,\n\t\tAircraftOwner:                                    aircraftOwner,\n\t\tCockpitCrewEmployer:                              cockpitCrewEmployer,\n\t\tCabinCrewEmployer:                                cabinCrewEmployer,\n\t\tAircraftRotationLayover:                          aircraftRotationLayover,\n\t\tFlightTransitLayover:                             flightTransitLayover,\n\t\tOperatingAirlineDisclosure:                       operatingAirlineDisclosure,\n\t\tTrafficRestrictionCode:                           trafficRestrictionCode,\n\t\tTrafficRestrictionCodeLegOverflowIndicator:       trafficRestrictionCodeLegOverflowIndicator,\n\t\tAircraftConfigurationVersion:                     aircraftConfigurationVersion,\n\t\tDateVariation:                                    dateVariation,\n\t\tRecordSerialNumber:                               recordSerialNumber,\n\t}, nil\n}\n", "n_tokens": 1214, "primary_symbol": "ReadLeg", "primary_kind": "function", "primary_span": [110, 208], "def_symbols": ["ReadLeg"], "symbols": ["ReadLeg", "parses", "leg", "record", "func", "row", "string", "Leg", "error", "operationalSuffix", "strings", "TrimSpace", "airlineDesignator", "flightNumber", "err", "strconv", "Atoi", "nil", "return", "errors", "Wrap", "reader", "failed", "convert", "flight", "number", "itineraryVariationIdentifier", "itinerary", "variation", "identifier", "legSequenceNumber", "sequence", "serviceType", "periodOfOperation", "Period", "From", "daysOfOperation", "frequencyRate", "departureStation", "departureScheduledTimeOfPassenger", "departureScheduledTimeOfAircraft", "departureUTCLocalTimeVariation", "departurePassengerTerminal", "arrivalStation", "arrivalScheduledTimeOfAircraft", "arrivalScheduledTimeOfPassenger", "arrivalUTCLocalTimeVariation", "arrivalPassengerTerminal", "aircraftType", "passengerReservationsBookingDesignator", "passengerReservationsBookingModifier", "mealServiceNote", "jointOperationAirlineDesignators", "minimumConnectingTimeInternationalDomesticStatus", "secureFlightIndicator", "itineraryVariationIdentifierOverflow", "aircraftOwner", "cockpitCrewEmployer", "cabinCrewEmployer", "aircraftRotationLayover", "flightTransitLayover", "operatingAirlineDisclosure", "trafficRestrictionCode", "trafficRestrictionCodeLegOverflowIndicator", "aircraftConfigurationVersion", "dateVariation", "ReplaceAll", "recordSerialNumber", "RecordType", "legRecordType", "OperationalSuffix", "AirlineDesignator", "FlightNumber", "ItineraryVariationIdentifier", "int8", "LegSequenceNumber", "ServiceType", "PeriodOfOperation", "DaysOfOperation", "FrequencyRate", "DepartureStation", "DepartureScheduledTimeOfPassenger", "DepartureScheduledTimeOfAircraft", "DepartureUTCLocalTimeVariation", "DeparturePassengerTerminal", "ArrivalStation", "ArrivalScheduledTimeOfAircraft", "ArrivalScheduledTimeOfPassenger", "ArrivalUTCLocalTimeVariation", "ArrivalPassengerTerminal", "AircraftType", "PassengerReservationsBookingDesignator", "PassengerReservationsBookingModifier", "MealServiceNote", "JointOperationAirlineDesignators", "MinimumConnectingTimeInternationalDomesticStatus", "SecureFlightIndicator", "ItineraryVariationIdentifierOverflow", "AircraftOwner", "CockpitCrewEmployer", "CabinCrewEmployer", "AircraftRotationLayover", "FlightTransitLayover", "OperatingAirlineDisclosure", "TrafficRestrictionCode", "TrafficRestrictionCodeLegOverflowIndicator", "AircraftConfigurationVersion", "DateVariation", "RecordSerialNumber"], "doc_head": "// ReadLeg parses a leg record\nfunc ReadLeg(row string) (*Leg, error) {\n\toperationalSuffix := strings.TrimSpace(row[1:2])\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\tflightNumber, err := strconv.Atoi(strings.TrimSpace(row[5:9]))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert leg flight number\")\n\t}\n\titineraryVariationIdentifier, err := strconv.Atoi(row[9:11])\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert leg itinerary variation identifier\")\n\t}\n\tlegSequenceNumber, err := strconv.Atoi(row[11:13])\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert leg sequence number\")\n\t}\n\tserviceType := row[13:14]\n\tperiodOfOperation := &Period{\n\t\tFrom: row[14:21],\n\t\tTo:   row[21:28],\n\t}\n\tdaysOfOperation := strings.TrimSpace(row[28:35])\n\tfrequencyRate := strings.TrimSpace(row[35:36])\n\tdepartureStation := strings.TrimSpace(row[36:39])\n\tdepartureScheduledTimeOfPassenger := strings.TrimSpace(row[39:43])\n\tdepartureScheduledTimeOfAircraft := strings.TrimSpace(row[43:47])\n\tdepartureUTCLocalTimeVariation := strings.TrimSpace(row[47:52])\n\tdeparturePassengerTerminal := strings.TrimSpace(row[52:54])\n\tarrivalStation := strings"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/leg.go", "rel_path": "pkg/ssim/reader/leg.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 209, "end_line": 220, "text": "// ContainsPassengers returns true if the leg is carrying passengers\n// The Service Type field is a single character which indicates the type of service being provided on the leg. The\n// following codes are used for passenger services:\n// J, S, G, B, C\nfunc (l *Leg) ContainsPassengers() bool {\n\treturn l.ServiceType == \"J\" ||\n\t\tl.ServiceType == \"S\" ||\n\t\tl.ServiceType == \"G\" ||\n\t\tl.ServiceType == \"B\" ||\n\t\tl.ServiceType == \"C\"\n}\n", "n_tokens": 113, "primary_symbol": "ContainsPassengers", "primary_kind": "function", "primary_span": [213, 220], "def_symbols": ["ContainsPassengers"], "symbols": ["ContainsPassengers", "returns", "true", "the", "leg", "carrying", "passengers", "The", "Service", "Type", "field", "single", "character", "which", "indicates", "type", "service", "being", "provided", "following", "codes", "are", "used", "for", "passenger", "services", "func", "Leg", "bool", "return", "ServiceType"], "doc_head": "// ContainsPassengers returns true if the leg is carrying passengers\n// The Service Type field is a single character which indicates the type of service being provided on the leg. The\n// following codes are used for passenger services:\n// J, S, G, B, C\nfunc (l *Leg) ContainsPassengers() bool {\n\treturn l.ServiceType == \"J\" ||\n\t\tl.ServiceType == \"S\" ||\n\t\tl.ServiceType == \"G\" ||\n\t\tl.ServiceType == \"B\" ||\n\t\tl.ServiceType == \"C\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/segment.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/segment.go", "rel_path": "pkg/ssim/reader/segment.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package reader\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/cockroachdb/errors\"\n)\n", "n_tokens": 21, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "reader", "import", "strconv", "strings", "github", "com", "cockroachdb", "errors"], "doc_head": "package reader\nimport (\n\t\"strconv\"\n\t\"strings\"\n\t\"github.com/cockroachdb/errors\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/segment.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/segment.go", "rel_path": "pkg/ssim/reader/segment.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 10, "end_line": 61, "text": "// Segment represents the SSIM segment representation\n// The record(s) specifies the information applicable to a unique Flight Leg Record as specified in\n// bytes 02–14.\n// Although no order is prescribed when multiple Data Element Identifiers follow the same Flight Leg\n// Record, the following is recommended:\n// — when multiple Segment Data Records apply to different Off Points, the Segment Data Records\n// should be ordered according to the occurrence of the Off Point in the itinerary;\n// — if multiple Segment Data Records apply to the same Off Point, they should appear together\n// and be ordered according to the numeric sequence of the Data Element Identifiers starting with\n// the lowest number.\n// However, systems should be able to process data elements in any order.\n// The record has a standard length of 200 bytes broken into the following fields:\ntype Segment struct {\n\t// Always 4 (bytes 1-1)\n\tRecordType string\n\t// Conditional: (bytes 2-2)\n\tOperationalSuffix string\n\t// Mandatory: (bytes 3-5)\n\tAirlineDesignator string\n\t// Mandatory: (bytes 6-9)\n\tFlightNumber int\n\t// Mandatory: Number between 01 and 99 (bytes 10-11)\n\tItineraryVariationIdentifier int8\n\t// Mandatory: Number between 01 and 99, sequencing continuous flight legs as they operate within\n\t// each Itinerary Variation Identifier. (bytes 12-13)\n\tLegSequenceNumber int8\n\t// Mandatory: Alpha (bytes 14-14)\n\tServiceType string\n\t// Conditional: (bytes 28-28)\n\tItineraryVariationIdentifierOverflow string\n\t// Mandatory: Alpha (bytes 29-29)\n\tBoardPointIndicator string\n\t// Mandatory: Alpha (bytes 30-30)\n\tOffPointIndicator string\n\t// Mandatory: Right justify, zero fill. (bytes 31-33)\n\tDataElementIdentifier string\n\t// Mandatory: 3-character IATA code (bytes 34-36)\n\t// When board point and off point merged the field called segment\n\tBoardPoint string\n\t// Mandatory: 3-character IATA code (bytes 37-39)\n\tOffPoint string\n\t// Conditional: Associated with Data Element Identifier. The format for each data element is defined in Chapter 2.\n\t// Blank fill. (bytes 40-194)\n\tData string\n\t// Mandatory: Sequential to previous record irrespective of its Record Type. 0 filled. Right justified.\n\t// See Chapter 2 Record Serial Number description if record count exceeds 999999.\n\t// (bytes 195-200)\n\tRecordSerialNumber string\n}\n\nconst segmentRecordType = \"4\"\n", "n_tokens": 562, "primary_symbol": "", "primary_kind": "", "primary_span": [10, 61], "def_symbols": [], "symbols": ["Segment", "represents", "the", "SSIM", "segment", "representation", "The", "record", "specifies", "information", "applicable", "unique", "Flight", "Leg", "Record", "specified", "bytes", "Although", "order", "prescribed", "when", "multiple", "Data", "Element", "Identifiers", "follow", "same", "following", "recommended", "Records", "apply", "different", "Off", "Points", "should", "ordered", "according", "occurrence", "Point", "itinerary", "they", "appear", "together", "and", "numeric", "sequence", "starting", "with", "lowest", "number", "However", "systems", "able", "process", "data", "elements", "any", "has", "standard", "length", "broken", "into", "fields", "type", "struct", "Always", "RecordType", "string", "Conditional", "OperationalSuffix", "Mandatory", "AirlineDesignator", "FlightNumber", "int", "Number", "between", "ItineraryVariationIdentifier", "int8", "sequencing", "continuous", "flight", "legs", "operate", "within", "each", "Itinerary", "Variation", "Identifier", "LegSequenceNumber", "Alpha", "ServiceType", "ItineraryVariationIdentifierOverflow", "BoardPointIndicator", "OffPointIndicator", "Right", "justify", "zero", "fill", "DataElementIdentifier", "character", "IATA", "code", "When", "board", "point", "off", "merged", "field", "called", "BoardPoint", "OffPoint", "Associated", "format", "for", "element", "defined", "Chapter", "Blank", "Sequential", "previous", "irrespective", "its", "Type", "filled", "justified", "See", "Serial", "description", "count", "exceeds", "RecordSerialNumber", "const", "segmentRecordType"], "doc_head": "// Segment represents the SSIM segment representation\n// The record(s) specifies the information applicable to a unique Flight Leg Record as specified in\n// bytes 02–14.\n// Although no order is prescribed when multiple Data Element Identifiers follow the same Flight Leg\n// Record, the following is recommended:\n// — when multiple Segment Data Records apply to different Off Points, the Segment Data Records\n// should be ordered according to the occurrence of the Off Point in the itinerary;\n// — if multiple Segment Data Records apply to the same Off Point, they should appear together\n// and be ordered according to the numeric sequence of the Data Element Identifiers starting with\n// the lowest number.\n// However, systems should be able to process data elements in any order.\n// The record has a standard length of 200 bytes broken into the following fields:\ntype Segment struct {\n\t// Always 4 (bytes 1-1)\n\tRecordType string\n\t// Conditional: (bytes 2-2)\n\tOperationalSuffix string\n\t// Mandatory: (bytes 3-5)\n\tAirlineDesignator string\n\t// Mandatory: (bytes 6-9)\n\tFlightNumber int\n\t// Mandatory: Number between 01 and 99 (bytes 10-11)\n\tItineraryVariationIdentifier int8\n\t// Mandatory: Number betwee"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/segment.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/reader/segment.go", "rel_path": "pkg/ssim/reader/segment.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 62, "end_line": 110, "text": "// ReadSegment parses a segment row\nfunc ReadSegment(row string) (*Segment, error) {\n\toperationalSuffix := strings.TrimSpace(row[1:2])\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\n\tflightNumber, err := strconv.Atoi(strings.TrimSpace(row[5:9]))\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"reader: failed to convert segment flight numbers\")\n\t}\n\n\titineraryVariationIdentifier, err := strconv.Atoi(strings.TrimSpace(row[9:11]))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert segment itinerary variation identifier\")\n\t}\n\n\tlegSequenceNumber, err := strconv.Atoi(strings.TrimSpace(row[11:13]))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert segment leg sequence number\")\n\t}\n\n\tserviceType := strings.TrimSpace(row[13:14])\n\titineraryVariationIdentifierOverflow := strings.TrimSpace(row[27:28])\n\tboardPointIndicator := strings.TrimSpace(row[28:29])\n\toffPointIndicator := strings.TrimSpace(row[29:30])\n\tdataElementIdentifier := strings.TrimSpace(row[30:33])\n\tboardPoint := strings.TrimSpace(row[33:36])\n\toffPoint := strings.TrimSpace(row[36:39])\n\tdata := strings.TrimSpace(row[39:194])\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\n\treturn &Segment{\n\t\tRecordType:                           segmentRecordType,\n\t\tOperationalSuffix:                    operationalSuffix,\n\t\tAirlineDesignator:                    airlineDesignator,\n\t\tFlightNumber:                         flightNumber,\n\t\tItineraryVariationIdentifier:         int8(itineraryVariationIdentifier),\n\t\tLegSequenceNumber:                    int8(legSequenceNumber),\n\t\tServiceType:                          serviceType,\n\t\tItineraryVariationIdentifierOverflow: itineraryVariationIdentifierOverflow,\n\t\tBoardPointIndicator:                  boardPointIndicator,\n\t\tOffPointIndicator:                    offPointIndicator,\n\t\tDataElementIdentifier:                dataElementIdentifier,\n\t\tBoardPoint:                           boardPoint,\n\t\tOffPoint:                             offPoint,\n\t\tData:                                 data,\n\t\tRecordSerialNumber:                   recordSerialNumber,\n\t}, nil\n}\n", "n_tokens": 453, "primary_symbol": "ReadSegment", "primary_kind": "function", "primary_span": [63, 110], "def_symbols": ["ReadSegment"], "symbols": ["ReadSegment", "parses", "segment", "row", "func", "string", "Segment", "error", "operationalSuffix", "strings", "TrimSpace", "airlineDesignator", "flightNumber", "err", "strconv", "Atoi", "nil", "return", "errors", "Wrapf", "reader", "failed", "convert", "flight", "numbers", "itineraryVariationIdentifier", "Wrap", "itinerary", "variation", "identifier", "legSequenceNumber", "leg", "sequence", "number", "serviceType", "itineraryVariationIdentifierOverflow", "boardPointIndicator", "offPointIndicator", "dataElementIdentifier", "boardPoint", "offPoint", "data", "recordSerialNumber", "RecordType", "segmentRecordType", "OperationalSuffix", "AirlineDesignator", "FlightNumber", "ItineraryVariationIdentifier", "int8", "LegSequenceNumber", "ServiceType", "ItineraryVariationIdentifierOverflow", "BoardPointIndicator", "OffPointIndicator", "DataElementIdentifier", "BoardPoint", "OffPoint", "Data", "RecordSerialNumber"], "doc_head": "// ReadSegment parses a segment row\nfunc ReadSegment(row string) (*Segment, error) {\n\toperationalSuffix := strings.TrimSpace(row[1:2])\n\tairlineDesignator := strings.TrimSpace(row[2:5])\n\tflightNumber, err := strconv.Atoi(strings.TrimSpace(row[5:9]))\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"reader: failed to convert segment flight numbers\")\n\t}\n\titineraryVariationIdentifier, err := strconv.Atoi(strings.TrimSpace(row[9:11]))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert segment itinerary variation identifier\")\n\t}\n\tlegSequenceNumber, err := strconv.Atoi(strings.TrimSpace(row[11:13]))\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"reader: failed to convert segment leg sequence number\")\n\t}\n\tserviceType := strings.TrimSpace(row[13:14])\n\titineraryVariationIdentifierOverflow := strings.TrimSpace(row[27:28])\n\tboardPointIndicator := strings.TrimSpace(row[28:29])\n\toffPointIndicator := strings.TrimSpace(row[29:30])\n\tdataElementIdentifier := strings.TrimSpace(row[30:33])\n\tboardPoint := strings.TrimSpace(row[33:36])\n\toffPoint := strings.TrimSpace(row[36:39])\n\tdata := strings.TrimSpace(row[39:194])\n\trecordSerialNumber := strings.TrimSpace(row[194:200])\n\tretur"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/flight.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/flight.go", "rel_path": "pkg/ssim/diff/flight.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 7, "text": "package diff\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n)\n", "n_tokens": 26, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 7], "def_symbols": [], "symbols": ["package", "diff", "import", "context", "impalastudios", "com", "aviation", "schedules", "pkg", "ssim", "parser"], "doc_head": "package diff\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/flight.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/flight.go", "rel_path": "pkg/ssim/diff/flight.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 8, "end_line": 72, "text": "func (d *Diff) compareFlights(_ context.Context, old, new *parser.CarrierTrailerBlock) {\n\toldFlights := mapFlights(old)\n\tnewFlights := mapFlights(new)\n\n\tfor flightID, newFlightsMap := range newFlights {\n\t\toldFlightsMap, exists := oldFlights[flightID]\n\t\t// If the flightID does not exist in the old flights, then all the flights are new\n\t\t// So we add all the flights to the added list\n\t\tif !exists {\n\t\t\tfor _, newF := range newFlightsMap {\n\t\t\t\td.Flights.Added[hashDuplicateFlight(newF)] = newF\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// If the flightID exists in the old flights, then we need to compare the flights\n\t\tfor hash, newF := range newFlightsMap {\n\t\t\toldF, exists := oldFlightsMap[hash]\n\t\t\t// If the hash does not exist in the old flights, then that means the flight schedule has been updated\n\t\t\t// So we add the flight to the added list but we also need to remove the old flight\n\t\t\t// The old flight can not be removed here because we don't know it's hash\n\t\t\tif !exists {\n\t\t\t\td.Flights.Added[hashDuplicateFlight(newF)] = newF\n\t\t\t} else {\n\t\t\t\tif newF.Equals(oldF) {\n\t\t\t\t\td.Flights.NoChanges[hashDuplicateFlight(newF)] = oldF\n\t\t\t\t} else {\n\t\t\t\t\td.Flights.Removed[hashDuplicateFlight(oldF)] = oldF\n\t\t\t\t\td.Flights.Added[hashDuplicateFlight(newF)] = newF\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// We need to check if there are any flights that have been removed\n\t\t// We can do this by checking if the hash of the old flight exists in the new flights\n\t\t// If it does not exist, then the flight has been removed\n\t\tfor hash, oldF := range oldFlightsMap {\n\t\t\t// If the hash does not exist in the new flights, then the flight has been removed\n\t\t\t// So we add the flight to the removed list and remove it from the old flights\n\t\t\t_, exists := newFlightsMap[hash]\n\t\t\tif !exists {\n\t\t\t\td.Flights.Removed[hashDuplicateFlight(oldF)] = oldF\n\t\t\t}\n\t\t}\n\t}\n\n\t// Detect and handle zombie flights; stay within the time window of new flights\n\tminD, maxD := deriveWindowFromNewFlights(new)\n\n\toldW := filterCTByWindow(old, minD, maxD)\n\toldFlightsFiltered := mapFlights(oldW)\n\n\tfor flightID, oldFlightsMap := range oldFlightsFiltered {\n\t\tif _, exists := newFlights[flightID]; !exists {\n\t\t\tfor _, of := range oldFlightsMap {\n\t\t\t\tkey := hashDuplicateFlight(of)\n\t\t\t\tif _, seen := d.Flights.Removed[key]; !seen {\n\t\t\t\t\td.Flights.Zombie[key] = of\n\t\t\t\t\td.Flights.Removed[key] = of\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 663, "primary_symbol": "compareFlights", "primary_kind": "function", "primary_span": [8, 72], "def_symbols": ["compareFlights"], "symbols": ["compareFlights", "func", "Diff", "context", "Context", "old", "new", "parser", "CarrierTrailerBlock", "oldFlights", "mapFlights", "newFlights", "for", "flightID", "newFlightsMap", "range", "oldFlightsMap", "exists", "the", "does", "not", "exist", "flights", "then", "all", "are", "add", "added", "list", "newF", "Flights", "Added", "hashDuplicateFlight", "continue", "need", "compare", "hash", "oldF", "that", "means", "flight", "schedule", "has", "been", "updated", "but", "also", "remove", "The", "can", "removed", "here", "because", "don", "know", "else", "Equals", "NoChanges", "Removed", "check", "there", "any", "have", "this", "checking", "and", "from", "Detect", "handle", "zombie", "stay", "within", "time", "window", "minD", "maxD", "deriveWindowFromNewFlights", "oldW", "filterCTByWindow", "oldFlightsFiltered", "key", "seen", "Zombie"], "doc_head": "func (d *Diff) compareFlights(_ context.Context, old, new *parser.CarrierTrailerBlock) {\n\toldFlights := mapFlights(old)\n\tnewFlights := mapFlights(new)\n\tfor flightID, newFlightsMap := range newFlights {\n\t\toldFlightsMap, exists := oldFlights[flightID]\n\t\t// If the flightID does not exist in the old flights, then all the flights are new\n\t\t// So we add all the flights to the added list\n\t\tif !exists {\n\t\t\tfor _, newF := range newFlightsMap {\n\t\t\t\td.Flights.Added[hashDuplicateFlight(newF)] = newF\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\t// If the flightID exists in the old flights, then we need to compare the flights\n\t\tfor hash, newF := range newFlightsMap {\n\t\t\toldF, exists := oldFlightsMap[hash]\n\t\t\t// If the hash does not exist in the old flights, then that means the flight schedule has been updated\n\t\t\t// So we add the flight to the added list but we also need to remove the old flight\n\t\t\t// The old flight can not be removed here because we don't know it's hash\n\t\t\tif !exists {\n\t\t\t\td.Flights.Added[hashDuplicateFlight(newF)] = newF\n\t\t\t} else {\n\t\t\t\tif newF.Equals(oldF) {\n\t\t\t\t\td.Flights.NoChanges[hashDuplicateFlight(newF)] = oldF\n\t\t\t\t} else {\n\t\t\t\t\td.Flights.Removed[hashDuplicateFlight(oldF)] = oldF\n\t\t\t\t\td.Flight"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/flight.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/flight.go", "rel_path": "pkg/ssim/diff/flight.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 73, "end_line": 89, "text": "func hashDuplicateFlight(f *parser.Flight) string {\n\treturn f.FlightID\n}\n\nfunc mapFlights(ct *parser.CarrierTrailerBlock) map[string]map[string]*parser.Flight {\n\tm := make(map[string]map[string]*parser.Flight)\n\tfor _, f := range ct.Flights {\n\t\tif duplicatedFlights, ok := m[f.FlightID]; ok {\n\t\t\tduplicatedFlights[hashDuplicateFlight(f)] = f\n\t\t} else {\n\t\t\tm[f.FlightID] = make(map[string]*parser.Flight)\n\t\t\tm[f.FlightID][hashDuplicateFlight(f)] = f\n\t\t}\n\t}\n\treturn m\n}\n", "n_tokens": 138, "primary_symbol": "hashDuplicateFlight", "primary_kind": "function", "primary_span": [73, 89], "def_symbols": ["hashDuplicateFlight", "mapFlights"], "symbols": ["hashDuplicateFlight", "mapFlights", "func", "parser", "Flight", "string", "return", "FlightID", "CarrierTrailerBlock", "map", "make", "for", "range", "Flights", "duplicatedFlights", "else"], "doc_head": "func hashDuplicateFlight(f *parser.Flight) string {\n\treturn f.FlightID\n}\nfunc mapFlights(ct *parser.CarrierTrailerBlock) map[string]map[string]*parser.Flight {\n\tm := make(map[string]map[string]*parser.Flight)\n\tfor _, f := range ct.Flights {\n\t\tif duplicatedFlights, ok := m[f.FlightID]; ok {\n\t\t\tduplicatedFlights[hashDuplicateFlight(f)] = f\n\t\t} else {\n\t\t\tm[f.FlightID] = make(map[string]*parser.Flight)\n\t\t\tm[f.FlightID][hashDuplicateFlight(f)] = f\n\t\t}\n\t}\n\treturn m\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/helper.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/helper.go", "rel_path": "pkg/ssim/diff/helper.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 13, "text": "package diff\n\nimport (\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"sort\"\n\t\"time\"\n)\n\nfunc dayOf(t time.Time) time.Time {\n\ty, m, d := t.Date()\n\treturn time.Date(y, m, d, 0, 0, 0, 0, time.UTC)\n}\n", "n_tokens": 74, "primary_symbol": "dayOf", "primary_kind": "function", "primary_span": [9, 13], "def_symbols": ["dayOf"], "symbols": ["dayOf", "package", "diff", "import", "impalastudios", "com", "aviation", "schedules", "pkg", "ssim", "parser", "sort", "time", "func", "Time", "Date", "return", "UTC"], "doc_head": "package diff\nimport (\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"sort\"\n\t\"time\"\n)\nfunc dayOf(t time.Time) time.Time {\n\ty, m, d := t.Date()\n\treturn time.Date(y, m, d, 0, 0, 0, 0, time.UTC)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/helper.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/helper.go", "rel_path": "pkg/ssim/diff/helper.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 14, "end_line": 38, "text": "func deriveWindowFromNewFlights(new *parser.CarrierTrailerBlock) (time.Time, time.Time) {\n\tif len(new.Flights) == 0 {\n\t\treturn dayOf(new.From), dayOf(new.To)\n\t}\n\n\tminD := dayOf(new.Flights[0].ScheduledDepartureAt)\n\tmaxD := minD\n\n\tfor _, f := range new.Flights[1:] {\n\t\td := dayOf(f.ScheduledDepartureAt)\n\t\tif d.Before(minD) {\n\t\t\tminD = d\n\t\t}\n\t\tif d.After(maxD) {\n\t\t\tmaxD = d\n\t\t}\n\t}\n\treturn minD, maxD\n}\n\nfunc inWindowDate(t, from, to time.Time) bool {\n\td := dayOf(t)\n\treturn (d.Equal(from) || d.After(from)) && (d.Equal(to) || d.Before(to))\n}\n", "n_tokens": 181, "primary_symbol": "deriveWindowFromNewFlights", "primary_kind": "function", "primary_span": [14, 38], "def_symbols": ["deriveWindowFromNewFlights", "inWindowDate"], "symbols": ["deriveWindowFromNewFlights", "inWindowDate", "func", "new", "parser", "CarrierTrailerBlock", "time", "Time", "len", "Flights", "return", "dayOf", "From", "minD", "ScheduledDepartureAt", "maxD", "for", "range", "Before", "After", "from", "bool", "Equal"], "doc_head": "func deriveWindowFromNewFlights(new *parser.CarrierTrailerBlock) (time.Time, time.Time) {\n\tif len(new.Flights) == 0 {\n\t\treturn dayOf(new.From), dayOf(new.To)\n\t}\n\tminD := dayOf(new.Flights[0].ScheduledDepartureAt)\n\tmaxD := minD\n\tfor _, f := range new.Flights[1:] {\n\t\td := dayOf(f.ScheduledDepartureAt)\n\t\tif d.Before(minD) {\n\t\t\tminD = d\n\t\t}\n\t\tif d.After(maxD) {\n\t\t\tmaxD = d\n\t\t}\n\t}\n\treturn minD, maxD\n}\nfunc inWindowDate(t, from, to time.Time) bool {\n\td := dayOf(t)\n\treturn (d.Equal(from) || d.After(from)) && (d.Equal(to) || d.Before(to))\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/helper.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/helper.go", "rel_path": "pkg/ssim/diff/helper.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 39, "end_line": 71, "text": "func filterCTByWindow(src *parser.CarrierTrailerBlock, from, to time.Time) *parser.CarrierTrailerBlock {\n\tout := &parser.CarrierTrailerBlock{\n\t\tCarrier: src.Carrier,\n\t\tTrailer: src.Trailer,\n\t\tFrom:    from,\n\t\tTo:      to,\n\t}\n\n\tout.Flights = make([]*parser.Flight, 0, len(src.Flights))\n\tfor _, f := range src.Flights {\n\t\tif inWindowDate(f.ScheduledDepartureAt, from, to) {\n\t\t\tout.Flights = append(out.Flights, f)\n\t\t}\n\t}\n\n\tout.ConnectingFlights = make([]*parser.ConnectingFlight, 0, len(src.ConnectingFlights))\n\tfor _, cf := range src.ConnectingFlights {\n\t\tkept := make([]*parser.Flight, 0, len(cf.Flights))\n\t\tfor _, lf := range cf.Flights {\n\t\t\tif inWindowDate(lf.ScheduledDepartureAt, from, to) {\n\t\t\t\tkept = append(kept, lf)\n\t\t\t}\n\t\t}\n\t\tif len(kept) > 0 {\n\t\t\tsort.SliceStable(kept, func(i, j int) bool { return kept[i].Sequence < kept[j].Sequence })\n\t\t\tcopyCF := *cf\n\t\t\tcopyCF.Flights = kept\n\t\t\tout.ConnectingFlights = append(out.ConnectingFlights, &copyCF)\n\t\t}\n\t}\n\treturn out\n}\n", "n_tokens": 308, "primary_symbol": "filterCTByWindow", "primary_kind": "function", "primary_span": [39, 71], "def_symbols": ["filterCTByWindow"], "symbols": ["filterCTByWindow", "func", "src", "parser", "CarrierTrailerBlock", "from", "time", "Time", "out", "Carrier", "Trailer", "From", "Flights", "make", "Flight", "len", "for", "range", "inWindowDate", "ScheduledDepartureAt", "append", "ConnectingFlights", "ConnectingFlight", "kept", "sort", "SliceStable", "int", "bool", "return", "Sequence", "copyCF"], "doc_head": "func filterCTByWindow(src *parser.CarrierTrailerBlock, from, to time.Time) *parser.CarrierTrailerBlock {\n\tout := &parser.CarrierTrailerBlock{\n\t\tCarrier: src.Carrier,\n\t\tTrailer: src.Trailer,\n\t\tFrom:    from,\n\t\tTo:      to,\n\t}\n\tout.Flights = make([]*parser.Flight, 0, len(src.Flights))\n\tfor _, f := range src.Flights {\n\t\tif inWindowDate(f.ScheduledDepartureAt, from, to) {\n\t\t\tout.Flights = append(out.Flights, f)\n\t\t}\n\t}\n\tout.ConnectingFlights = make([]*parser.ConnectingFlight, 0, len(src.ConnectingFlights))\n\tfor _, cf := range src.ConnectingFlights {\n\t\tkept := make([]*parser.Flight, 0, len(cf.Flights))\n\t\tfor _, lf := range cf.Flights {\n\t\t\tif inWindowDate(lf.ScheduledDepartureAt, from, to) {\n\t\t\t\tkept = append(kept, lf)\n\t\t\t}\n\t\t}\n\t\tif len(kept) > 0 {\n\t\t\tsort.SliceStable(kept, func(i, j int) bool { return kept[i].Sequence < kept[j].Sequence })\n\t\t\tcopyCF := *cf\n\t\t\tcopyCF.Flights = kept\n\t\t\tout.ConnectingFlights = append(out.ConnectingFlights, &copyCF)\n\t\t}\n\t}\n\treturn out\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/compare.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/compare.go", "rel_path": "pkg/ssim/diff/compare.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 17, "text": "package diff\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n)\n\n// Diff contains the result of the diff computation\ntype Diff struct {\n\tMergedCT          *parser.CarrierTrailerBlock\n\tFlights           *Comparison[*parser.Flight]\n\tConnectingFlights *Comparison[*parser.ConnectingFlight]\n}\n", "n_tokens": 93, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 17], "def_symbols": [], "symbols": ["package", "diff", "import", "context", "impalastudios", "com", "log", "uber", "org", "zap", "aviation", "schedules", "pkg", "ssim", "parser", "Diff", "contains", "the", "result", "computation", "type", "struct", "MergedCT", "CarrierTrailerBlock", "Flights", "Comparison", "Flight", "ConnectingFlights", "ConnectingFlight"], "doc_head": "package diff\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n)\n// Diff contains the result of the diff computation\ntype Diff struct {\n\tMergedCT          *parser.CarrierTrailerBlock\n\tFlights           *Comparison[*parser.Flight]\n\tConnectingFlights *Comparison[*parser.ConnectingFlight]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/compare.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/compare.go", "rel_path": "pkg/ssim/diff/compare.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 18, "end_line": 52, "text": "// Compare compares two carrier trailer blocks\nfunc Compare(ctx context.Context, old, new *parser.CarrierTrailerBlock) (*Diff, error) {\n\tmergedCT := &parser.CarrierTrailerBlock{\n\t\tCarrier: new.Carrier, // we only care about the new carrier period to compare removed flights\n\t\tTrailer: new.Trailer,\n\t\tFrom:    new.From,\n\t\tTo:      new.To,\n\t}\n\n\tlog.Debug(ctx, \"Comparing the new carrier trailer block period\", zap.Any(\"carrier\", new.Carrier), zap.Any(\"period\", new.Carrier.PeriodOfScheduleValidity))\n\n\tdiff := &Diff{\n\t\tFlights: &Comparison[*parser.Flight]{\n\t\t\tNoChanges: make(map[string]*parser.Flight),\n\t\t\tRemoved:   make(map[string]*parser.Flight),\n\t\t\tAdded:     make(map[string]*parser.Flight),\n\t\t\tZombie:    make(map[string]*parser.Flight),\n\t\t},\n\t\tConnectingFlights: &Comparison[*parser.ConnectingFlight]{\n\t\t\tNoChanges: make(map[string]*parser.ConnectingFlight),\n\t\t\tRemoved:   make(map[string]*parser.ConnectingFlight),\n\t\t\tAdded:     make(map[string]*parser.ConnectingFlight),\n\t\t\tZombie:    make(map[string]*parser.ConnectingFlight),\n\t\t},\n\t}\n\n\tdiff.compareFlights(ctx, old, new)\n\tdiff.compareConnectingFlights(ctx, old, new)\n\n\tmergedCT.Flights = mapValues(diff.Flights.Added)\n\tmergedCT.ConnectingFlights = mapValues(diff.ConnectingFlights.Added)\n\tdiff.MergedCT = mergedCT\n\treturn diff, nil\n}\n", "n_tokens": 346, "primary_symbol": "Compare", "primary_kind": "function", "primary_span": [19, 52], "def_symbols": ["Compare"], "symbols": ["Compare", "compares", "two", "carrier", "trailer", "blocks", "func", "ctx", "context", "Context", "old", "new", "parser", "CarrierTrailerBlock", "Diff", "error", "mergedCT", "Carrier", "only", "care", "about", "the", "period", "compare", "removed", "flights", "Trailer", "From", "log", "Debug", "Comparing", "block", "zap", "Any", "PeriodOfScheduleValidity", "diff", "Flights", "Comparison", "Flight", "NoChanges", "make", "map", "string", "Removed", "Added", "Zombie", "ConnectingFlights", "ConnectingFlight", "compareFlights", "compareConnectingFlights", "mapValues", "MergedCT", "return", "nil"], "doc_head": "// Compare compares two carrier trailer blocks\nfunc Compare(ctx context.Context, old, new *parser.CarrierTrailerBlock) (*Diff, error) {\n\tmergedCT := &parser.CarrierTrailerBlock{\n\t\tCarrier: new.Carrier, // we only care about the new carrier period to compare removed flights\n\t\tTrailer: new.Trailer,\n\t\tFrom:    new.From,\n\t\tTo:      new.To,\n\t}\n\tlog.Debug(ctx, \"Comparing the new carrier trailer block period\", zap.Any(\"carrier\", new.Carrier), zap.Any(\"period\", new.Carrier.PeriodOfScheduleValidity))\n\tdiff := &Diff{\n\t\tFlights: &Comparison[*parser.Flight]{\n\t\t\tNoChanges: make(map[string]*parser.Flight),\n\t\t\tRemoved:   make(map[string]*parser.Flight),\n\t\t\tAdded:     make(map[string]*parser.Flight),\n\t\t\tZombie:    make(map[string]*parser.Flight),\n\t\t},\n\t\tConnectingFlights: &Comparison[*parser.ConnectingFlight]{\n\t\t\tNoChanges: make(map[string]*parser.ConnectingFlight),\n\t\t\tRemoved:   make(map[string]*parser.ConnectingFlight),\n\t\t\tAdded:     make(map[string]*parser.ConnectingFlight),\n\t\t\tZombie:    make(map[string]*parser.ConnectingFlight),\n\t\t},\n\t}\n\tdiff.compareFlights(ctx, old, new)\n\tdiff.compareConnectingFlights(ctx, old, new)\n\tmergedCT.Flights = mapValues(diff.Flights.Added)\n\tmergedCT.ConnectingFlight"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/compare.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/compare.go", "rel_path": "pkg/ssim/diff/compare.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 69, "text": "func mapValues[T any](m map[string]T) []T {\n\tvalues := make([]T, 0)\n\tfor _, val := range m {\n\t\tvalues = append(values, val)\n\t}\n\n\treturn values\n}\n\n// Comparison contains the result of the comparison\ntype Comparison[T any] struct {\n\tNoChanges map[string]T\n\tRemoved   map[string]T\n\tAdded     map[string]T\n\tZombie    map[string]T\n}\n", "n_tokens": 94, "primary_symbol": "", "primary_kind": "", "primary_span": [53, 69], "def_symbols": [], "symbols": ["func", "mapValues", "any", "map", "string", "values", "make", "for", "val", "range", "append", "return", "Comparison", "contains", "the", "result", "comparison", "type", "struct", "NoChanges", "Removed", "Added", "Zombie"], "doc_head": "func mapValues[T any](m map[string]T) []T {\n\tvalues := make([]T, 0)\n\tfor _, val := range m {\n\t\tvalues = append(values, val)\n\t}\n\treturn values\n}\n// Comparison contains the result of the comparison\ntype Comparison[T any] struct {\n\tNoChanges map[string]T\n\tRemoved   map[string]T\n\tAdded     map[string]T\n\tZombie    map[string]T\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go", "rel_path": "pkg/ssim/diff/connecting_flight.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package diff\n\nimport (\n\t\"context\"\n\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 43, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "diff", "import", "context", "impalastudios", "com", "aviation", "schedules", "pkg", "ssim", "parser", "log", "uber", "org", "zap"], "doc_head": "package diff\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go", "rel_path": "pkg/ssim/diff/connecting_flight.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 11, "end_line": 46, "text": "func (d *Diff) compareConnectingFlights(ctx context.Context, old, new *parser.CarrierTrailerBlock) {\n\toldCF := mapConnectingFlights(old)\n\tnewCF := mapConnectingFlights(new)\n\n\tfor id, n := range newCF {\n\t\to, exists := oldCF[id]\n\t\tif !exists {\n\t\t\td.resolveFlightDuplicationDueToConnectingFlightUpdate(ctx, n)\n\t\t\td.ConnectingFlights.Added[id] = n\n\t\t\tcontinue\n\t\t}\n\t\tif !o.Equals(n) {\n\t\t\td.resolveFlightDuplicationDueToConnectingFlightUpdate(ctx, n)\n\t\t\td.ConnectingFlights.Added[id] = n\n\t\t\td.ConnectingFlights.Removed[id] = o\n\t\t} else {\n\t\t\td.ConnectingFlights.NoChanges[id] = o\n\t\t}\n\t}\n\n\t// Detect and handle zombie connected flights; stay within the time window of new connected flights\n\tminD, maxD := deriveWindowFromNewFlights(new)\n\n\toldW := filterCTByWindow(old, minD, maxD)\n\toldCFFiltered := mapConnectingFlights(oldW)\n\n\tfor id, o := range oldCFFiltered {\n\t\tif _, exists := newCF[id]; !exists {\n\t\t\tif _, seen := d.ConnectingFlights.Removed[id]; !seen {\n\t\t\t\td.ConnectingFlights.Zombie[id] = o\n\t\t\t\td.ConnectingFlights.Removed[id] = o\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 310, "primary_symbol": "compareConnectingFlights", "primary_kind": "function", "primary_span": [11, 46], "def_symbols": ["compareConnectingFlights"], "symbols": ["compareConnectingFlights", "func", "Diff", "ctx", "context", "Context", "old", "new", "parser", "CarrierTrailerBlock", "oldCF", "mapConnectingFlights", "newCF", "for", "range", "exists", "resolveFlightDuplicationDueToConnectingFlightUpdate", "ConnectingFlights", "Added", "continue", "Equals", "Removed", "else", "NoChanges", "Detect", "and", "handle", "zombie", "connected", "flights", "stay", "within", "the", "time", "window", "minD", "maxD", "deriveWindowFromNewFlights", "oldW", "filterCTByWindow", "oldCFFiltered", "seen", "Zombie"], "doc_head": "func (d *Diff) compareConnectingFlights(ctx context.Context, old, new *parser.CarrierTrailerBlock) {\n\toldCF := mapConnectingFlights(old)\n\tnewCF := mapConnectingFlights(new)\n\tfor id, n := range newCF {\n\t\to, exists := oldCF[id]\n\t\tif !exists {\n\t\t\td.resolveFlightDuplicationDueToConnectingFlightUpdate(ctx, n)\n\t\t\td.ConnectingFlights.Added[id] = n\n\t\t\tcontinue\n\t\t}\n\t\tif !o.Equals(n) {\n\t\t\td.resolveFlightDuplicationDueToConnectingFlightUpdate(ctx, n)\n\t\t\td.ConnectingFlights.Added[id] = n\n\t\t\td.ConnectingFlights.Removed[id] = o\n\t\t} else {\n\t\t\td.ConnectingFlights.NoChanges[id] = o\n\t\t}\n\t}\n\t// Detect and handle zombie connected flights; stay within the time window of new connected flights\n\tminD, maxD := deriveWindowFromNewFlights(new)\n\toldW := filterCTByWindow(old, minD, maxD)\n\toldCFFiltered := mapConnectingFlights(oldW)\n\tfor id, o := range oldCFFiltered {\n\t\tif _, exists := newCF[id]; !exists {\n\t\t\tif _, seen := d.ConnectingFlights.Removed[id]; !seen {\n\t\t\t\td.ConnectingFlights.Zombie[id] = o\n\t\t\t\td.ConnectingFlights.Removed[id] = o\n\t\t\t}\n\t\t}\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go", "rel_path": "pkg/ssim/diff/connecting_flight.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 47, "end_line": 66, "text": "// Sometimes connecting flights are drastically updated\n// For ex. There is an addition of a new flight in the connecting flight\n// In such cases, we need to update the connecting flight\n// We need to check in the no changes map if the new flights are present\n// If they are present then we need to add them to removed map\n// Because when we create new connecting flight the flights will be duplicated\nfunc (d *Diff) resolveFlightDuplicationDueToConnectingFlightUpdate(ctx context.Context, cf *parser.ConnectingFlight) {\n\tfor _, f := range cf.Flights {\n\t\tflightHash := hashDuplicateFlight(f)\n\t\tif oldF, ok := d.Flights.NoChanges[flightHash]; ok {\n\t\t\tlog.Warn(ctx, \"Resolved flight duplication due to connecting flight update\",\n\t\t\t\tzap.Any(\"connecting_flight\", cf),\n\t\t\t\tzap.Any(\"old_flight\", oldF),\n\t\t\t\tzap.Any(\"new_flight\", f),\n\t\t\t)\n\t\t\td.Flights.Removed[flightHash] = oldF\n\t\t}\n\t}\n}\n", "n_tokens": 217, "primary_symbol": "resolveFlightDuplicationDueToConnectingFlightUpdate", "primary_kind": "function", "primary_span": [53, 66], "def_symbols": ["resolveFlightDuplicationDueToConnectingFlightUpdate"], "symbols": ["resolveFlightDuplicationDueToConnectingFlightUpdate", "Sometimes", "connecting", "flights", "are", "drastically", "updated", "For", "There", "addition", "new", "flight", "the", "such", "cases", "need", "update", "check", "changes", "map", "present", "they", "then", "add", "them", "removed", "Because", "when", "create", "will", "duplicated", "func", "Diff", "ctx", "context", "Context", "parser", "ConnectingFlight", "for", "range", "Flights", "flightHash", "hashDuplicateFlight", "oldF", "NoChanges", "log", "Warn", "Resolved", "duplication", "due", "zap", "Any", "connecting_flight", "old_flight", "new_flight", "Removed"], "doc_head": "// Sometimes connecting flights are drastically updated\n// For ex. There is an addition of a new flight in the connecting flight\n// In such cases, we need to update the connecting flight\n// We need to check in the no changes map if the new flights are present\n// If they are present then we need to add them to removed map\n// Because when we create new connecting flight the flights will be duplicated\nfunc (d *Diff) resolveFlightDuplicationDueToConnectingFlightUpdate(ctx context.Context, cf *parser.ConnectingFlight) {\n\tfor _, f := range cf.Flights {\n\t\tflightHash := hashDuplicateFlight(f)\n\t\tif oldF, ok := d.Flights.NoChanges[flightHash]; ok {\n\t\t\tlog.Warn(ctx, \"Resolved flight duplication due to connecting flight update\",\n\t\t\t\tzap.Any(\"connecting_flight\", cf),\n\t\t\t\tzap.Any(\"old_flight\", oldF),\n\t\t\t\tzap.Any(\"new_flight\", f),\n\t\t\t)\n\t\t\td.Flights.Removed[flightHash] = oldF\n\t\t}\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/diff/connecting_flight.go", "rel_path": "pkg/ssim/diff/connecting_flight.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 67, "end_line": 75, "text": "func mapConnectingFlights(ct *parser.CarrierTrailerBlock) map[string]*parser.ConnectingFlight {\n\tm := make(map[string]*parser.ConnectingFlight)\n\tfor _, cf := range ct.ConnectingFlights {\n\t\tm[cf.ConnectingFlightID] = cf\n\t}\n\n\treturn m\n}\n", "n_tokens": 62, "primary_symbol": "mapConnectingFlights", "primary_kind": "function", "primary_span": [67, 75], "def_symbols": ["mapConnectingFlights"], "symbols": ["mapConnectingFlights", "func", "parser", "CarrierTrailerBlock", "map", "string", "ConnectingFlight", "make", "for", "range", "ConnectingFlights", "ConnectingFlightID", "return"], "doc_head": "func mapConnectingFlights(ct *parser.CarrierTrailerBlock) map[string]*parser.ConnectingFlight {\n\tm := make(map[string]*parser.ConnectingFlight)\n\tfor _, cf := range ct.ConnectingFlights {\n\t\tm[cf.ConnectingFlightID] = cf\n\t}\n\treturn m\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/link.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/link.go", "rel_path": "pkg/ssim/parser/link.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package parser\n\n// CarrierTrailerBlockLink is a link to a carrier trailer block\ntype CarrierTrailerBlockLink struct {\n\tAirlineDesignator string\n\tPeriodBegin       string\n\tPeriodEnd         string\n\tFilepath          string\n}\n\n// SSIM is the parsed SSIM file links\ntype SSIM struct {\n\tLinks []*CarrierTrailerBlockLink\n}\n", "n_tokens": 77, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "parser", "CarrierTrailerBlockLink", "link", "carrier", "trailer", "block", "type", "struct", "AirlineDesignator", "string", "PeriodBegin", "PeriodEnd", "Filepath", "SSIM", "the", "parsed", "file", "links", "Links"], "doc_head": "package parser\n// CarrierTrailerBlockLink is a link to a carrier trailer block\ntype CarrierTrailerBlockLink struct {\n\tAirlineDesignator string\n\tPeriodBegin       string\n\tPeriodEnd         string\n\tFilepath          string\n}\n// SSIM is the parsed SSIM file links\ntype SSIM struct {\n\tLinks []*CarrierTrailerBlockLink\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 14, "text": "package parser\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/golang-collections/collections/set\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n)\n", "n_tokens": 56, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 14], "def_symbols": [], "symbols": ["package", "parser", "import", "context", "fmt", "strconv", "strings", "time", "github", "com", "golang", "collections", "set", "pkg", "errors", "impalastudios", "aviation", "schedules", "ssim", "reader"], "doc_head": "package parser\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/golang-collections/collections/set\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 15, "end_line": 43, "text": "// Flight is a flight scheduled for some time\ntype Flight struct {\n\tID                   int64     `json:\"id,omitempty\"`\n\tFlightID             string    `json:\"flight_id\"`\n\tConnectingFlightID   int64     `json:\"connecting_flight_id,omitempty\"`\n\tAirline              string    `json:\"airline\"`\n\tFlightNumber         int       `json:\"flight_number\"`\n\tItinerary            int8      `json:\"itinerary,omitempty\"`\n\tSequence             int8      `json:\"sequence,omitempty\"`\n\tDepartureAirport     string    `json:\"departure_airport\"`\n\tArrivalAirport       string    `json:\"arrival_airport\"`\n\tAircraft             string    `json:\"aircraft\"`\n\tScheduledDepartureAt time.Time `json:\"scheduled_departure_at\"`\n\tExpectedDepartureAt  time.Time `json:\"expected_departure_at\"`\n\tActualDepartureAt    time.Time `json:\"actual_departure_at\"`\n\tScheduledArrivalAt   time.Time `json:\"scheduled_arrival_at\"`\n\tExpectedArrivalAt    time.Time `json:\"expected_arrival_at\"`\n\tActualArrivalAt      time.Time `json:\"actual_arrival_at\"`\n\t// There is a default value for FlightStatus in DB\n\t// DepartureStatus, ArrivalStatus values are nullable\n\t// Values for the FlightStatus SCHEDULED, CANCELLED, DIVERTED, LANDED, AIRBORNE\n\t// The default value by the DB is SCHEDULED\n\tStatus          string `json:\"-\"`\n\tDepartureStatus string `json:\"-\"`\n\tArrivalStatus   string `json:\"-\"`\n\n\tCodeshares []*Codeshare `json:\"codeshares,omitempty\"`\n}\n", "n_tokens": 341, "primary_symbol": "", "primary_kind": "", "primary_span": [15, 43], "def_symbols": [], "symbols": ["Flight", "flight", "scheduled", "for", "some", "time", "type", "struct", "int64", "json", "omitempty", "FlightID", "string", "flight_id", "ConnectingFlightID", "connecting_flight_id", "Airline", "airline", "FlightNumber", "int", "flight_number", "Itinerary", "int8", "itinerary", "Sequence", "sequence", "DepartureAirport", "departure_airport", "ArrivalAirport", "arrival_airport", "Aircraft", "aircraft", "ScheduledDepartureAt", "Time", "scheduled_departure_at", "ExpectedDepartureAt", "expected_departure_at", "ActualDepartureAt", "actual_departure_at", "ScheduledArrivalAt", "scheduled_arrival_at", "ExpectedArrivalAt", "expected_arrival_at", "ActualArrivalAt", "actual_arrival_at", "There", "default", "value", "FlightStatus", "DepartureStatus", "ArrivalStatus", "values", "are", "nullable", "Values", "the", "SCHEDULED", "CANCELLED", "DIVERTED", "LANDED", "AIRBORNE", "The", "Status", "Codeshares", "Codeshare", "codeshares"], "doc_head": "// Flight is a flight scheduled for some time\ntype Flight struct {\n\tID                   int64     `json:\"id,omitempty\"`\n\tFlightID             string    `json:\"flight_id\"`\n\tConnectingFlightID   int64     `json:\"connecting_flight_id,omitempty\"`\n\tAirline              string    `json:\"airline\"`\n\tFlightNumber         int       `json:\"flight_number\"`\n\tItinerary            int8      `json:\"itinerary,omitempty\"`\n\tSequence             int8      `json:\"sequence,omitempty\"`\n\tDepartureAirport     string    `json:\"departure_airport\"`\n\tArrivalAirport       string    `json:\"arrival_airport\"`\n\tAircraft             string    `json:\"aircraft\"`\n\tScheduledDepartureAt time.Time `json:\"scheduled_departure_at\"`\n\tExpectedDepartureAt  time.Time `json:\"expected_departure_at\"`\n\tActualDepartureAt    time.Time `json:\"actual_departure_at\"`\n\tScheduledArrivalAt   time.Time `json:\"scheduled_arrival_at\"`\n\tExpectedArrivalAt    time.Time `json:\"expected_arrival_at\"`\n\tActualArrivalAt      time.Time `json:\"actual_arrival_at\"`\n\t// There is a default value for FlightStatus in DB\n\t// DepartureStatus, ArrivalStatus values are nullable\n\t// Values for the FlightStatus SCHEDULED, CANCELLED, DIVERTED, LANDED, AIRBORNE\n\t// The"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 44, "end_line": 98, "text": "func (f *Flight) Equals(other *Flight) bool {\n\tif f.Airline != other.Airline {\n\t\treturn false\n\t}\n\n\tif f.FlightNumber != other.FlightNumber {\n\t\treturn false\n\t}\n\n\tif f.DepartureAirport != other.DepartureAirport {\n\t\treturn false\n\t}\n\n\tif f.ArrivalAirport != other.ArrivalAirport {\n\t\treturn false\n\t}\n\n\tif f.Itinerary != other.Itinerary {\n\t\treturn false\n\t}\n\n\tif f.Sequence != other.Sequence {\n\t\treturn false\n\t}\n\n\tif f.Aircraft != other.Aircraft {\n\t\treturn false\n\t}\n\n\tif !f.ScheduledDepartureAt.Equal(other.ScheduledDepartureAt) {\n\t\treturn false\n\t}\n\n\tif !f.ScheduledArrivalAt.Equal(other.ScheduledArrivalAt) {\n\t\treturn false\n\t}\n\n\tcs := set.New()\n\totherCs := set.New()\n\n\tfor _, c := range f.Codeshares {\n\t\tcs.Insert(fmt.Sprintf(\"%s%d\", c.Airline, c.FlightNumber))\n\t}\n\n\tfor _, c := range other.Codeshares {\n\t\totherCs.Insert(fmt.Sprintf(\"%s%d\", c.Airline, c.FlightNumber))\n\t}\n\n\tif cs.Intersection(otherCs).Len() != otherCs.Len() || otherCs.Intersection(cs).Len() != cs.Len() {\n\t\treturn false\n\t}\n\n\treturn true\n}\n", "n_tokens": 290, "primary_symbol": "Equals", "primary_kind": "function", "primary_span": [44, 98], "def_symbols": ["Equals"], "symbols": ["Equals", "func", "Flight", "other", "bool", "Airline", "return", "false", "FlightNumber", "DepartureAirport", "ArrivalAirport", "Itinerary", "Sequence", "Aircraft", "ScheduledDepartureAt", "Equal", "ScheduledArrivalAt", "set", "New", "otherCs", "for", "range", "Codeshares", "Insert", "fmt", "Sprintf", "Intersection", "Len", "true"], "doc_head": "func (f *Flight) Equals(other *Flight) bool {\n\tif f.Airline != other.Airline {\n\t\treturn false\n\t}\n\tif f.FlightNumber != other.FlightNumber {\n\t\treturn false\n\t}\n\tif f.DepartureAirport != other.DepartureAirport {\n\t\treturn false\n\t}\n\tif f.ArrivalAirport != other.ArrivalAirport {\n\t\treturn false\n\t}\n\tif f.Itinerary != other.Itinerary {\n\t\treturn false\n\t}\n\tif f.Sequence != other.Sequence {\n\t\treturn false\n\t}\n\tif f.Aircraft != other.Aircraft {\n\t\treturn false\n\t}\n\tif !f.ScheduledDepartureAt.Equal(other.ScheduledDepartureAt) {\n\t\treturn false\n\t}\n\tif !f.ScheduledArrivalAt.Equal(other.ScheduledArrivalAt) {\n\t\treturn false\n\t}\n\tcs := set.New()\n\totherCs := set.New()\n\tfor _, c := range f.Codeshares {\n\t\tcs.Insert(fmt.Sprintf(\"%s%d\", c.Airline, c.FlightNumber))\n\t}\n\tfor _, c := range other.Codeshares {\n\t\totherCs.Insert(fmt.Sprintf(\"%s%d\", c.Airline, c.FlightNumber))\n\t}\n\tif cs.Intersection(otherCs).Len() != otherCs.Len() || otherCs.Intersection(cs).Len() != cs.Len() {\n\t\treturn false\n\t}\n\treturn true\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 99, "end_line": 138, "text": "// NewFlight creates a new flight from a leg\nfunc NewFlight(l *reader.Leg, date time.Time) (*Flight, error) {\n\tdepartureAt, err := buildFlightDatetime(&date, l.DepartureScheduledTimeOfPassenger, l.DepartureUTCLocalTimeVariation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tarrivalAt, err := buildFlightDatetime(&date, l.ArrivalScheduledTimeOfPassenger, l.ArrivalUTCLocalTimeVariation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tarrivalAdditionalDuration, err := toArrivalDateVariationDuration(l.DateVariation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Flight{\n\t\tFlightID: fmt.Sprintf(\n\t\t\t\"%s_%s_%d_%s_%s\", // 20230101_AZ_1234_LHR_JFK\n\t\t\tdepartureAt.Format(\"20060102\"),\n\t\t\tl.AirlineDesignator,\n\t\t\tl.FlightNumber,\n\t\t\tl.DepartureStation,\n\t\t\tl.ArrivalStation,\n\t\t),\n\t\tAirline:              l.AirlineDesignator,\n\t\tFlightNumber:         l.FlightNumber,\n\t\tItinerary:            l.ItineraryVariationIdentifier,\n\t\tSequence:             l.LegSequenceNumber,\n\t\tDepartureAirport:     l.DepartureStation,\n\t\tArrivalAirport:       l.ArrivalStation,\n\t\tAircraft:             l.AircraftType,\n\t\tScheduledDepartureAt: departureAt,\n\t\tScheduledArrivalAt:   arrivalAt.Add(arrivalAdditionalDuration),\n\t\tExpectedDepartureAt:  departureAt,\n\t\tExpectedArrivalAt:    arrivalAt.Add(arrivalAdditionalDuration),\n\t}, nil\n}\n", "n_tokens": 376, "primary_symbol": "NewFlight", "primary_kind": "function", "primary_span": [100, 138], "def_symbols": ["NewFlight"], "symbols": ["NewFlight", "creates", "new", "flight", "from", "leg", "func", "reader", "Leg", "date", "time", "Time", "Flight", "error", "departureAt", "err", "buildFlightDatetime", "DepartureScheduledTimeOfPassenger", "DepartureUTCLocalTimeVariation", "nil", "return", "arrivalAt", "ArrivalScheduledTimeOfPassenger", "ArrivalUTCLocalTimeVariation", "arrivalAdditionalDuration", "toArrivalDateVariationDuration", "DateVariation", "FlightID", "fmt", "Sprintf", "Format", "AirlineDesignator", "FlightNumber", "DepartureStation", "ArrivalStation", "Airline", "Itinerary", "ItineraryVariationIdentifier", "Sequence", "LegSequenceNumber", "DepartureAirport", "ArrivalAirport", "Aircraft", "AircraftType", "ScheduledDepartureAt", "ScheduledArrivalAt", "Add", "ExpectedDepartureAt", "ExpectedArrivalAt"], "doc_head": "// NewFlight creates a new flight from a leg\nfunc NewFlight(l *reader.Leg, date time.Time) (*Flight, error) {\n\tdepartureAt, err := buildFlightDatetime(&date, l.DepartureScheduledTimeOfPassenger, l.DepartureUTCLocalTimeVariation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tarrivalAt, err := buildFlightDatetime(&date, l.ArrivalScheduledTimeOfPassenger, l.ArrivalUTCLocalTimeVariation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tarrivalAdditionalDuration, err := toArrivalDateVariationDuration(l.DateVariation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Flight{\n\t\tFlightID: fmt.Sprintf(\n\t\t\t\"%s_%s_%d_%s_%s\", // 20230101_AZ_1234_LHR_JFK\n\t\t\tdepartureAt.Format(\"20060102\"),\n\t\t\tl.AirlineDesignator,\n\t\t\tl.FlightNumber,\n\t\t\tl.DepartureStation,\n\t\t\tl.ArrivalStation,\n\t\t),\n\t\tAirline:              l.AirlineDesignator,\n\t\tFlightNumber:         l.FlightNumber,\n\t\tItinerary:            l.ItineraryVariationIdentifier,\n\t\tSequence:             l.LegSequenceNumber,\n\t\tDepartureAirport:     l.DepartureStation,\n\t\tArrivalAirport:       l.ArrivalStation,\n\t\tAircraft:             l.AircraftType,\n\t\tScheduledDepartureAt: departureAt,\n\t\tScheduledArrivalAt:   arrivalAt.Add(arrivalAdditionalDuration),\n\t\tExpectedDepartureAt:  depa"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 139, "end_line": 155, "text": "// Codeshare represents a codeshare of a segment\ntype Codeshare struct {\n\tAirline      string `json:\"airline\"`\n\tFlightNumber int    `json:\"flight_number\"`\n}\n\n// ConnectingFlightPeriods represents the flight periods that are connected to each other\ntype ConnectingFlightPeriods struct {\n\tID             int64              `json:\"id\"`\n\tAirline        string             `json:\"airline\"`\n\tBeginsAt       time.Time          `json:\"begins_at\"`\n\tEndsAt         time.Time          `json:\"ends_at\"`\n\tArrivalAirport string             `json:\"arrival_airport\"`\n\tNumSegments    int8               `json:\"num_segments\"`\n\tPeriods        []*PeriodOfFlights `json:\"periods\"`\n}\n", "n_tokens": 154, "primary_symbol": "", "primary_kind": "", "primary_span": [139, 155], "def_symbols": [], "symbols": ["Codeshare", "represents", "codeshare", "segment", "type", "struct", "Airline", "string", "json", "airline", "FlightNumber", "int", "flight_number", "ConnectingFlightPeriods", "the", "flight", "periods", "that", "are", "connected", "each", "other", "int64", "BeginsAt", "time", "Time", "begins_at", "EndsAt", "ends_at", "ArrivalAirport", "arrival_airport", "NumSegments", "int8", "num_segments", "Periods", "PeriodOfFlights"], "doc_head": "// Codeshare represents a codeshare of a segment\ntype Codeshare struct {\n\tAirline      string `json:\"airline\"`\n\tFlightNumber int    `json:\"flight_number\"`\n}\n// ConnectingFlightPeriods represents the flight periods that are connected to each other\ntype ConnectingFlightPeriods struct {\n\tID             int64              `json:\"id\"`\n\tAirline        string             `json:\"airline\"`\n\tBeginsAt       time.Time          `json:\"begins_at\"`\n\tEndsAt         time.Time          `json:\"ends_at\"`\n\tArrivalAirport string             `json:\"arrival_airport\"`\n\tNumSegments    int8               `json:\"num_segments\"`\n\tPeriods        []*PeriodOfFlights `json:\"periods\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 156, "end_line": 181, "text": "// ToConnectingFlights converts the connecting flight periods to connecting flights\nfunc (cf *ConnectingFlightPeriods) ToConnectingFlights() []ConnectingFlight {\n\tcfs := make([]ConnectingFlight, len(cf.Periods[0].Flights))\n\tfor _, p := range cf.Periods {\n\t\tfor i, f := range p.Flights {\n\t\t\tf.Codeshares = p.Codeshares\n\t\t\tcfs[i].Flights = append(cfs[i].Flights, f)\n\t\t}\n\t}\n\n\t// Connecting flight periods are converted to connecting flights\n\t// Set the connecting flight id, arrival airport, begins at and ends at fields\n\tfor i, cf := range cfs {\n\t\tflightID := make([]string, len(cf.Flights))\n\t\tfor j, f := range cf.Flights {\n\t\t\tflightID[j] = f.FlightID\n\t\t}\n\t\tcfs[i].ConnectingFlightID = strings.Join(flightID, \"-\")\n\t\tcfs[i].ArrivalAirport = cf.Flights[len(cf.Flights)-1].ArrivalAirport\n\t\tcfs[i].BeginsAt = cf.Flights[0].ScheduledDepartureAt\n\t\tcfs[i].EndsAt = cf.Flights[len(cf.Flights)-1].ScheduledArrivalAt\n\t}\n\n\treturn cfs\n}\n", "n_tokens": 278, "primary_symbol": "ToConnectingFlights", "primary_kind": "function", "primary_span": [157, 181], "def_symbols": ["ToConnectingFlights"], "symbols": ["ToConnectingFlights", "converts", "the", "connecting", "flight", "periods", "flights", "func", "ConnectingFlightPeriods", "ConnectingFlight", "cfs", "make", "len", "Periods", "Flights", "for", "range", "Codeshares", "append", "Connecting", "are", "converted", "Set", "arrival", "airport", "begins", "and", "ends", "fields", "flightID", "string", "FlightID", "ConnectingFlightID", "strings", "Join", "ArrivalAirport", "BeginsAt", "ScheduledDepartureAt", "EndsAt", "ScheduledArrivalAt", "return"], "doc_head": "// ToConnectingFlights converts the connecting flight periods to connecting flights\nfunc (cf *ConnectingFlightPeriods) ToConnectingFlights() []ConnectingFlight {\n\tcfs := make([]ConnectingFlight, len(cf.Periods[0].Flights))\n\tfor _, p := range cf.Periods {\n\t\tfor i, f := range p.Flights {\n\t\t\tf.Codeshares = p.Codeshares\n\t\t\tcfs[i].Flights = append(cfs[i].Flights, f)\n\t\t}\n\t}\n\t// Connecting flight periods are converted to connecting flights\n\t// Set the connecting flight id, arrival airport, begins at and ends at fields\n\tfor i, cf := range cfs {\n\t\tflightID := make([]string, len(cf.Flights))\n\t\tfor j, f := range cf.Flights {\n\t\t\tflightID[j] = f.FlightID\n\t\t}\n\t\tcfs[i].ConnectingFlightID = strings.Join(flightID, \"-\")\n\t\tcfs[i].ArrivalAirport = cf.Flights[len(cf.Flights)-1].ArrivalAirport\n\t\tcfs[i].BeginsAt = cf.Flights[0].ScheduledDepartureAt\n\t\tcfs[i].EndsAt = cf.Flights[len(cf.Flights)-1].ScheduledArrivalAt\n\t}\n\treturn cfs\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 182, "end_line": 240, "text": "// MonthlyConnectingFlights returns the monthly connecting flights\n// of the single multi-month connecting flight\n// Sometimes a connecting flights can extend to the next month\n// because the first flight of the connecting flight is within the range of a month\n// but the on of next flights of the connecting flight is in the next month\n// in that case we still keep the connecting flight as a single connecting flight\n// and we store it in the month of the first flight departure date's month\n// Example:\n// If the connecting flight is from 2019-01-01 to 2019-03-31\n// first connecting flight will be from 2019-01-01 to 2019-01-31\n// second connecting flight will be from 2019-02-01 to 2019-02-28\n// third connecting flight will be from 2019-03-01 to 2019-03-31\nfunc (cf *ConnectingFlightPeriods) MonthlyConnectingFlights() []*ConnectingFlightPeriods {\n\tmonthlyConnectingFlights := make([]*ConnectingFlightPeriods, 0)\n\n\tbeginningPeriod := cf.Periods[0]\n\tmonthlyBeginningPeriods := beginningPeriod.MonthlyPeriods()\n\n\tfor _, p := range monthlyBeginningPeriods {\n\t\tmonthlyConnectingFlights = append(monthlyConnectingFlights, &ConnectingFlightPeriods{\n\t\t\tAirline:     cf.Airline,\n\t\t\tBeginsAt:    p.BeginsAt,\n\t\t\tEndsAt:      p.EndsAt,\n\t\t\tNumSegments: int8(len(cf.Periods)),\n\t\t\tPeriods:     []*PeriodOfFlights{p},\n\t\t})\n\t}\n\n\tfor _, next := range cf.Periods[1:] {\n\t\toffset := 0\n\t\tfor i, monthly := range monthlyBeginningPeriods {\n\t\t\tnextMonthly := &PeriodOfFlights{\n\t\t\t\tAirline:          next.Airline,\n\t\t\t\tFlightNumber:     next.FlightNumber,\n\t\t\t\tItinerary:        next.Itinerary,\n\t\t\t\tSequence:         next.Sequence,\n\t\t\t\tDepartureAirport: next.DepartureAirport,\n\t\t\t\tArrivalAirport:   next.ArrivalAirport,\n\t\t\t\tAircraft:         next.Aircraft,\n\t\t\t\tCodeshares:       next.Codeshares,\n\t\t\t\tBeginsAt:         monthly.BeginsAt,\n\t\t\t\tEndsAt:           monthly.EndsAt,\n\t\t\t\tFlights:          make([]*Flight, len(monthly.Flights)),\n\t\t\t}\n\n\t\t\tfor i := 0; i < len(monthly.Flights); i++ {\n\t\t\t\tnextMonthly.Flights[i] = next.Flights[i+offset]\n\t\t\t}\n\n\t\t\toffset += len(monthly.Flights)\n\n\t\t\tmonthlyConnectingFlights[i].Periods = append(monthlyConnectingFlights[i].Periods, nextMonthly)\n\t\t\tmonthlyConnectingFlights[i].ArrivalAirport = nextMonthly.ArrivalAirport\n\t\t}\n\t}\n\n\treturn monthlyConnectingFlights\n}\n", "n_tokens": 621, "primary_symbol": "MonthlyConnectingFlights", "primary_kind": "function", "primary_span": [194, 240], "def_symbols": ["MonthlyConnectingFlights"], "symbols": ["MonthlyConnectingFlights", "returns", "the", "monthly", "connecting", "flights", "single", "multi", "month", "flight", "Sometimes", "can", "extend", "next", "because", "first", "within", "range", "but", "that", "case", "still", "keep", "and", "store", "departure", "date", "Example", "from", "will", "second", "third", "func", "ConnectingFlightPeriods", "monthlyConnectingFlights", "make", "beginningPeriod", "Periods", "monthlyBeginningPeriods", "MonthlyPeriods", "for", "append", "Airline", "BeginsAt", "EndsAt", "NumSegments", "int8", "len", "PeriodOfFlights", "offset", "nextMonthly", "FlightNumber", "Itinerary", "Sequence", "DepartureAirport", "ArrivalAirport", "Aircraft", "Codeshares", "Flights", "Flight", "return"], "doc_head": "// MonthlyConnectingFlights returns the monthly connecting flights\n// of the single multi-month connecting flight\n// Sometimes a connecting flights can extend to the next month\n// because the first flight of the connecting flight is within the range of a month\n// but the on of next flights of the connecting flight is in the next month\n// in that case we still keep the connecting flight as a single connecting flight\n// and we store it in the month of the first flight departure date's month\n// Example:\n// If the connecting flight is from 2019-01-01 to 2019-03-31\n// first connecting flight will be from 2019-01-01 to 2019-01-31\n// second connecting flight will be from 2019-02-01 to 2019-02-28\n// third connecting flight will be from 2019-03-01 to 2019-03-31\nfunc (cf *ConnectingFlightPeriods) MonthlyConnectingFlights() []*ConnectingFlightPeriods {\n\tmonthlyConnectingFlights := make([]*ConnectingFlightPeriods, 0)\n\tbeginningPeriod := cf.Periods[0]\n\tmonthlyBeginningPeriods := beginningPeriod.MonthlyPeriods()\n\tfor _, p := range monthlyBeginningPeriods {\n\t\tmonthlyConnectingFlights = append(monthlyConnectingFlights, &ConnectingFlightPeriods{\n\t\t\tAirline:     cf.Airline,\n\t\t\tBeginsAt:    p.BeginsA"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 241, "end_line": 257, "text": "// NotCircularWith checks if the flight is circular with the other flight\nfunc (cf *ConnectingFlightPeriods) NotCircularWith(p *PeriodOfFlights) bool {\n\tfirstPeriod := cf.Periods[0]\n\n\treturn firstPeriod.DepartureAirport != p.ArrivalAirport\n}\n\n// ConnectingFlight represents the flights that are connected to each other\ntype ConnectingFlight struct {\n\tID                 int64     `json:\"id\"`\n\tConnectingFlightID string    `json:\"connecting_flight_id\"`\n\tArrivalAirport     string    `json:\"arrival_airport\"`\n\tFlights            []*Flight `json:\"flights\"`\n\tBeginsAt           time.Time `json:\"begins_at\"`\n\tEndsAt             time.Time `json:\"ends_at\"`\n}\n", "n_tokens": 155, "primary_symbol": "NotCircularWith", "primary_kind": "function", "primary_span": [242, 257], "def_symbols": ["NotCircularWith"], "symbols": ["NotCircularWith", "checks", "the", "flight", "circular", "with", "other", "func", "ConnectingFlightPeriods", "PeriodOfFlights", "bool", "firstPeriod", "Periods", "return", "DepartureAirport", "ArrivalAirport", "ConnectingFlight", "represents", "flights", "that", "are", "connected", "each", "type", "struct", "int64", "json", "ConnectingFlightID", "string", "connecting_flight_id", "arrival_airport", "Flights", "Flight", "BeginsAt", "time", "Time", "begins_at", "EndsAt", "ends_at"], "doc_head": "// NotCircularWith checks if the flight is circular with the other flight\nfunc (cf *ConnectingFlightPeriods) NotCircularWith(p *PeriodOfFlights) bool {\n\tfirstPeriod := cf.Periods[0]\n\treturn firstPeriod.DepartureAirport != p.ArrivalAirport\n}\n// ConnectingFlight represents the flights that are connected to each other\ntype ConnectingFlight struct {\n\tID                 int64     `json:\"id\"`\n\tConnectingFlightID string    `json:\"connecting_flight_id\"`\n\tArrivalAirport     string    `json:\"arrival_airport\"`\n\tFlights            []*Flight `json:\"flights\"`\n\tBeginsAt           time.Time `json:\"begins_at\"`\n\tEndsAt             time.Time `json:\"ends_at\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 258, "end_line": 275, "text": "func (cf *ConnectingFlight) Equals(other *ConnectingFlight) bool {\n\tif !cf.BeginsAt.Equal(other.BeginsAt) || !cf.EndsAt.Equal(other.EndsAt) {\n\t\treturn false\n\t}\n\n\tif len(cf.Flights) != len(other.Flights) {\n\t\treturn false\n\t}\n\n\tfor i := range cf.Flights {\n\t\tif !cf.Flights[i].Equals(other.Flights[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n", "n_tokens": 103, "primary_symbol": "Equals", "primary_kind": "function", "primary_span": [258, 275], "def_symbols": ["Equals"], "symbols": ["Equals", "func", "ConnectingFlight", "other", "bool", "BeginsAt", "Equal", "EndsAt", "return", "false", "len", "Flights", "for", "range", "true"], "doc_head": "func (cf *ConnectingFlight) Equals(other *ConnectingFlight) bool {\n\tif !cf.BeginsAt.Equal(other.BeginsAt) || !cf.EndsAt.Equal(other.EndsAt) {\n\t\treturn false\n\t}\n\tif len(cf.Flights) != len(other.Flights) {\n\t\treturn false\n\t}\n\tfor i := range cf.Flights {\n\t\tif !cf.Flights[i].Equals(other.Flights[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 276, "end_line": 292, "text": "// PeriodOfFlights is a period of flights\ntype PeriodOfFlights struct {\n\tAirline          string       `json:\"airline\"`\n\tFlightNumber     int          `json:\"flight_number\"`\n\tItinerary        int8         `json:\"itinerary\"`\n\tSequence         int8         `json:\"sequence\"`\n\tDepartureAirport string       `json:\"departure_airport\"`\n\tArrivalAirport   string       `json:\"arrival_airport\"`\n\tAircraft         string       `json:\"aircraft\"`\n\tCodeshares       []*Codeshare `json:\"codeshares,omitempty\"`\n\n\tBeginsAt time.Time `json:\"begins_at\"`\n\tEndsAt   time.Time `json:\"ends_at\"`\n\n\tFlights []*Flight `json:\"flights\"`\n}\n", "n_tokens": 156, "primary_symbol": "", "primary_kind": "", "primary_span": [276, 292], "def_symbols": [], "symbols": ["PeriodOfFlights", "period", "flights", "type", "struct", "Airline", "string", "json", "airline", "FlightNumber", "int", "flight_number", "Itinerary", "int8", "itinerary", "Sequence", "sequence", "DepartureAirport", "departure_airport", "ArrivalAirport", "arrival_airport", "Aircraft", "aircraft", "Codeshares", "Codeshare", "codeshares", "omitempty", "BeginsAt", "time", "Time", "begins_at", "EndsAt", "ends_at", "Flights", "Flight"], "doc_head": "// PeriodOfFlights is a period of flights\ntype PeriodOfFlights struct {\n\tAirline          string       `json:\"airline\"`\n\tFlightNumber     int          `json:\"flight_number\"`\n\tItinerary        int8         `json:\"itinerary\"`\n\tSequence         int8         `json:\"sequence\"`\n\tDepartureAirport string       `json:\"departure_airport\"`\n\tArrivalAirport   string       `json:\"arrival_airport\"`\n\tAircraft         string       `json:\"aircraft\"`\n\tCodeshares       []*Codeshare `json:\"codeshares,omitempty\"`\n\tBeginsAt time.Time `json:\"begins_at\"`\n\tEndsAt   time.Time `json:\"ends_at\"`\n\tFlights []*Flight `json:\"flights\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 293, "end_line": 332, "text": "// MonthlyPeriods returns the monthly periods of the period of flights\n// The monthly periods are the periods of flights grouped by month\n// Returns the monthly periods without breaking the original order of the flights\n// Example:\n// If the period of flights is from 2019-01-01 to 2019-03-31\n// first monthly period will be from 2019-01-01 to 2019-01-31\n// second monthly period will be from 2019-02-01 to 2019-02-28\n// third monthly period will be from 2019-03-01 to 2019-03-31\nfunc (p *PeriodOfFlights) MonthlyPeriods() []*PeriodOfFlights {\n\tperiods := make([]*PeriodOfFlights, 0)\n\tperiodsMap := make(map[string]*PeriodOfFlights)\n\n\tfor _, flight := range p.Flights {\n\t\tkey := FormatYYYYMM(flight.ScheduledDepartureAt)\n\t\tif _, ok := periodsMap[key]; !ok {\n\t\t\tbeginsAt := time.Date(flight.ScheduledDepartureAt.Year(), flight.ScheduledDepartureAt.Month(), 1, 0, 0, 0, 0, time.UTC)\n\t\t\tendsAt := beginsAt.AddDate(0, 1, -1)\n\n\t\t\tnewP := &PeriodOfFlights{\n\t\t\t\tAirline:          p.Airline,\n\t\t\t\tFlightNumber:     p.FlightNumber,\n\t\t\t\tItinerary:        p.Itinerary,\n\t\t\t\tSequence:         p.Sequence,\n\t\t\t\tDepartureAirport: p.DepartureAirport,\n\t\t\t\tArrivalAirport:   p.ArrivalAirport,\n\t\t\t\tAircraft:         p.Aircraft,\n\t\t\t\tCodeshares:       p.Codeshares,\n\t\t\t\tBeginsAt:         beginsAt,\n\t\t\t\tEndsAt:           endsAt,\n\t\t\t}\n\t\t\tperiods = append(periods, newP)\n\t\t\tperiodsMap[key] = newP\n\t\t}\n\n\t\tperiodsMap[key].Flights = append(periodsMap[key].Flights, flight)\n\t}\n\n\treturn periods\n}\n", "n_tokens": 451, "primary_symbol": "MonthlyPeriods", "primary_kind": "function", "primary_span": [301, 332], "def_symbols": ["MonthlyPeriods"], "symbols": ["MonthlyPeriods", "returns", "the", "monthly", "periods", "period", "flights", "The", "are", "grouped", "month", "Returns", "without", "breaking", "original", "order", "Example", "from", "first", "will", "second", "third", "func", "PeriodOfFlights", "make", "periodsMap", "map", "string", "for", "flight", "range", "Flights", "key", "FormatYYYYMM", "ScheduledDepartureAt", "beginsAt", "time", "Date", "Year", "Month", "UTC", "endsAt", "AddDate", "newP", "Airline", "FlightNumber", "Itinerary", "Sequence", "DepartureAirport", "ArrivalAirport", "Aircraft", "Codeshares", "BeginsAt", "EndsAt", "append", "return"], "doc_head": "// MonthlyPeriods returns the monthly periods of the period of flights\n// The monthly periods are the periods of flights grouped by month\n// Returns the monthly periods without breaking the original order of the flights\n// Example:\n// If the period of flights is from 2019-01-01 to 2019-03-31\n// first monthly period will be from 2019-01-01 to 2019-01-31\n// second monthly period will be from 2019-02-01 to 2019-02-28\n// third monthly period will be from 2019-03-01 to 2019-03-31\nfunc (p *PeriodOfFlights) MonthlyPeriods() []*PeriodOfFlights {\n\tperiods := make([]*PeriodOfFlights, 0)\n\tperiodsMap := make(map[string]*PeriodOfFlights)\n\tfor _, flight := range p.Flights {\n\t\tkey := FormatYYYYMM(flight.ScheduledDepartureAt)\n\t\tif _, ok := periodsMap[key]; !ok {\n\t\t\tbeginsAt := time.Date(flight.ScheduledDepartureAt.Year(), flight.ScheduledDepartureAt.Month(), 1, 0, 0, 0, 0, time.UTC)\n\t\t\tendsAt := beginsAt.AddDate(0, 1, -1)\n\t\t\tnewP := &PeriodOfFlights{\n\t\t\t\tAirline:          p.Airline,\n\t\t\t\tFlightNumber:     p.FlightNumber,\n\t\t\t\tItinerary:        p.Itinerary,\n\t\t\t\tSequence:         p.Sequence,\n\t\t\t\tDepartureAirport: p.DepartureAirport,\n\t\t\t\tArrivalAirport:   p.ArrivalAirport,\n\t\t\t\tAircraft:         p.Aircr"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 333, "end_line": 341, "text": "// SameItinerary checks if the flight is the same itinerary as the other flight\nfunc (f *PeriodOfFlights) SameItinerary(other *reader.Leg) bool {\n\treturn f.Airline == other.AirlineDesignator &&\n\t\tf.FlightNumber == other.FlightNumber &&\n\t\tf.Itinerary == other.ItineraryVariationIdentifier &&\n\t\tf.Sequence < other.LegSequenceNumber &&\n\t\tf.ArrivalAirport == other.DepartureStation\n}\n", "n_tokens": 97, "primary_symbol": "SameItinerary", "primary_kind": "function", "primary_span": [334, 341], "def_symbols": ["SameItinerary"], "symbols": ["SameItinerary", "checks", "the", "flight", "same", "itinerary", "other", "func", "PeriodOfFlights", "reader", "Leg", "bool", "return", "Airline", "AirlineDesignator", "FlightNumber", "Itinerary", "ItineraryVariationIdentifier", "Sequence", "LegSequenceNumber", "ArrivalAirport", "DepartureStation"], "doc_head": "// SameItinerary checks if the flight is the same itinerary as the other flight\nfunc (f *PeriodOfFlights) SameItinerary(other *reader.Leg) bool {\n\treturn f.Airline == other.AirlineDesignator &&\n\t\tf.FlightNumber == other.FlightNumber &&\n\t\tf.Itinerary == other.ItineraryVariationIdentifier &&\n\t\tf.Sequence < other.LegSequenceNumber &&\n\t\tf.ArrivalAirport == other.DepartureStation\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#13", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 342, "end_line": 424, "text": "func (p *Parser) parseLeg(ctx context.Context, row string) error {\n\tleg, err := reader.ReadLeg(row)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"parser: failed to read leg\")\n\t}\n\n\t// Update the leg's airline id using the mappers\n\tleg.AirlineDesignator = p.airlinesMapper.Get(ctx, leg.AirlineDesignator)\n\n\tif !leg.ContainsPassengers() {\n\t\t// If there are more than one period in the connecting flight we add it to the connecting flights\n\t\t// Otherwise we ignore it because it is not a connecting flight\n\t\tif p.ct.lastConnFlight != nil && len(p.ct.lastConnFlight.Periods) > 1 {\n\t\t\tp.ct.connectingFlightPeriods = append(p.ct.connectingFlightPeriods, p.ct.lastConnFlight)\n\t\t}\n\n\t\tp.ct.lastPeriod = nil\n\t\tp.ct.lastConnFlight = nil\n\t\treturn nil\n\t}\n\n\tfrom, to, err := p.parseLegPeriod(leg)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t//log.Debug(ctx, \"Parsing leg period\", zap.Time(\"from\", from), zap.Time(\"to\", to), zap.Any(\"leg\", leg))\n\n\toperationDays := mapOperationDays(leg.DaysOfOperation)\n\n\tperiod := &PeriodOfFlights{\n\t\tAirline:          leg.AirlineDesignator,\n\t\tFlightNumber:     leg.FlightNumber,\n\t\tItinerary:        leg.ItineraryVariationIdentifier,\n\t\tSequence:         leg.LegSequenceNumber,\n\t\tDepartureAirport: leg.DepartureStation,\n\t\tArrivalAirport:   leg.ArrivalStation,\n\t\tAircraft:         leg.AircraftType,\n\t\tBeginsAt:         from,\n\t\tEndsAt:           to,\n\t}\n\tfor date := from; date.Compare(to) != 1; date = date.AddDate(0, 0, 1) {\n\t\tif !operationDays[date.Weekday()] {\n\t\t\tcontinue\n\t\t}\n\n\t\tflight, err := NewFlight(leg, date)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"parser: failed to create flight\")\n\t\t}\n\n\t\tperiod.Flights = append(period.Flights, flight)\n\t}\n\n\tif p.ct.lastConnFlight != nil && p.ct.lastPeriod.SameItinerary(leg) && p.ct.lastConnFlight.NotCircularWith(period) {\n\t\tp.ct.lastConnFlight.ArrivalAirport = leg.ArrivalStation\n\t\tp.ct.lastConnFlight.NumSegments++\n\t\tp.ct.lastConnFlight.Periods = append(p.ct.lastConnFlight.Periods, period)\n\t} else {\n\t\t// If there are more than one periods in the connecting flight we add it to the connecting flights\n\t\t// Otherwise we ignore it because it is not a connecting flight\n\t\tif p.ct.lastConnFlight != nil && len(p.ct.lastConnFlight.Periods) > 1 {\n\t\t\tp.ct.connectingFlightPeriods = append(p.ct.connectingFlightPeriods, p.ct.lastConnFlight)\n\t\t}\n\n\t\t// TODO: think about adding airline, beginsAt and endsAt fields to the connecting flight\n\t\t// or find a way to carry carrier/trailer information to the connecting flight split operation\n\t\tp.ct.lastConnFlight = &ConnectingFlightPeriods{\n\t\t\tArrivalAirport: leg.ArrivalStation,\n\t\t\tAirline:        leg.AirlineDesignator,\n\t\t\tBeginsAt:       from,\n\t\t\tEndsAt:         to,\n\t\t\tNumSegments:    1,\n\t\t\tPeriods:        []*PeriodOfFlights{period},\n\t\t}\n\t}\n\n\tp.ct.lastPeriod = period\n\tp.ct.periods = append(p.ct.periods, period)\n\n\treturn nil\n}\n", "n_tokens": 798, "primary_symbol": "parseLeg", "primary_kind": "function", "primary_span": [342, 424], "def_symbols": ["parseLeg"], "symbols": ["parseLeg", "func", "Parser", "ctx", "context", "Context", "row", "string", "error", "leg", "err", "reader", "ReadLeg", "nil", "return", "errors", "Wrap", "parser", "failed", "read", "Update", "the", "airline", "using", "mappers", "AirlineDesignator", "airlinesMapper", "Get", "ContainsPassengers", "there", "are", "more", "than", "one", "period", "connecting", "flight", "add", "flights", "Otherwise", "ignore", "because", "not", "lastConnFlight", "len", "Periods", "connectingFlightPeriods", "append", "lastPeriod", "from", "parseLegPeriod", "log", "Debug", "Parsing", "zap", "Time", "Any", "operationDays", "mapOperationDays", "DaysOfOperation", "PeriodOfFlights", "Airline", "FlightNumber", "Itinerary", "ItineraryVariationIdentifier", "Sequence", "LegSequenceNumber", "DepartureAirport", "DepartureStation", "ArrivalAirport", "ArrivalStation", "Aircraft", "AircraftType", "BeginsAt", "EndsAt", "for", "date", "Compare", "AddDate", "Weekday", "continue", "NewFlight", "create", "Flights", "SameItinerary", "NotCircularWith", "NumSegments", "else", "periods", "TODO", "think", "about", "adding", "beginsAt", "and", "endsAt", "fields", "find", "way", "carry", "carrier", "trailer", "information", "split", "operation", "ConnectingFlightPeriods"], "doc_head": "func (p *Parser) parseLeg(ctx context.Context, row string) error {\n\tleg, err := reader.ReadLeg(row)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"parser: failed to read leg\")\n\t}\n\t// Update the leg's airline id using the mappers\n\tleg.AirlineDesignator = p.airlinesMapper.Get(ctx, leg.AirlineDesignator)\n\tif !leg.ContainsPassengers() {\n\t\t// If there are more than one period in the connecting flight we add it to the connecting flights\n\t\t// Otherwise we ignore it because it is not a connecting flight\n\t\tif p.ct.lastConnFlight != nil && len(p.ct.lastConnFlight.Periods) > 1 {\n\t\t\tp.ct.connectingFlightPeriods = append(p.ct.connectingFlightPeriods, p.ct.lastConnFlight)\n\t\t}\n\t\tp.ct.lastPeriod = nil\n\t\tp.ct.lastConnFlight = nil\n\t\treturn nil\n\t}\n\tfrom, to, err := p.parseLegPeriod(leg)\n\tif err != nil {\n\t\treturn err\n\t}\n\t//log.Debug(ctx, \"Parsing leg period\", zap.Time(\"from\", from), zap.Time(\"to\", to), zap.Any(\"leg\", leg))\n\toperationDays := mapOperationDays(leg.DaysOfOperation)\n\tperiod := &PeriodOfFlights{\n\t\tAirline:          leg.AirlineDesignator,\n\t\tFlightNumber:     leg.FlightNumber,\n\t\tItinerary:        leg.ItineraryVariationIdentifier,\n\t\tSequence:         leg.LegSequenceNumber,\n\t\tDepartureAirport: leg"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#14", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 425, "end_line": 452, "text": "func (p *Parser) parseLegPeriod(l *reader.Leg) (time.Time, time.Time, error) {\n\tdefaultFrom := p.ct.From\n\tdefaultTo := p.ct.To\n\tif p.ct.lastPeriod != nil && p.ct.lastPeriod.SameItinerary(l) {\n\t\tdepartureVariationDuration, err := toDepartureDateVariationDuration(l.DateVariation)\n\t\tif err != nil {\n\t\t\treturn time.Time{}, time.Time{}, errors.Wrap(err, \"parser: failed to parse departure variation duration\")\n\t\t}\n\n\t\tfirstPeriod := p.ct.lastConnFlight.Periods[0]\n\n\t\tdefaultFrom = firstPeriod.BeginsAt.Add(departureVariationDuration)\n\t\tdefaultTo = firstPeriod.EndsAt.Add(departureVariationDuration)\n\t}\n\n\tfrom, err := ParseDateFormat00XXX00(l.PeriodOfOperation.From, defaultFrom)\n\tif err != nil {\n\t\treturn time.Time{}, time.Time{}, errors.Wrap(err, \"parser: failed to parse from date\")\n\t}\n\n\tto, err := ParseDateFormat00XXX00(l.PeriodOfOperation.To, defaultTo)\n\tif err != nil {\n\t\treturn time.Time{}, time.Time{}, errors.Wrap(err, \"parser: failed to parse to date\")\n\t}\n\n\treturn from, to, nil\n}\n", "n_tokens": 264, "primary_symbol": "parseLegPeriod", "primary_kind": "function", "primary_span": [425, 452], "def_symbols": ["parseLegPeriod"], "symbols": ["parseLegPeriod", "func", "Parser", "reader", "Leg", "time", "Time", "error", "defaultFrom", "From", "defaultTo", "lastPeriod", "nil", "SameItinerary", "departureVariationDuration", "err", "toDepartureDateVariationDuration", "DateVariation", "return", "errors", "Wrap", "parser", "failed", "parse", "departure", "variation", "duration", "firstPeriod", "lastConnFlight", "Periods", "BeginsAt", "Add", "EndsAt", "from", "ParseDateFormat00XXX00", "PeriodOfOperation", "date"], "doc_head": "func (p *Parser) parseLegPeriod(l *reader.Leg) (time.Time, time.Time, error) {\n\tdefaultFrom := p.ct.From\n\tdefaultTo := p.ct.To\n\tif p.ct.lastPeriod != nil && p.ct.lastPeriod.SameItinerary(l) {\n\t\tdepartureVariationDuration, err := toDepartureDateVariationDuration(l.DateVariation)\n\t\tif err != nil {\n\t\t\treturn time.Time{}, time.Time{}, errors.Wrap(err, \"parser: failed to parse departure variation duration\")\n\t\t}\n\t\tfirstPeriod := p.ct.lastConnFlight.Periods[0]\n\t\tdefaultFrom = firstPeriod.BeginsAt.Add(departureVariationDuration)\n\t\tdefaultTo = firstPeriod.EndsAt.Add(departureVariationDuration)\n\t}\n\tfrom, err := ParseDateFormat00XXX00(l.PeriodOfOperation.From, defaultFrom)\n\tif err != nil {\n\t\treturn time.Time{}, time.Time{}, errors.Wrap(err, \"parser: failed to parse from date\")\n\t}\n\tto, err := ParseDateFormat00XXX00(l.PeriodOfOperation.To, defaultTo)\n\tif err != nil {\n\t\treturn time.Time{}, time.Time{}, errors.Wrap(err, \"parser: failed to parse to date\")\n\t}\n\treturn from, to, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go#15", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/flight.go", "rel_path": "pkg/ssim/parser/flight.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 453, "end_line": 526, "text": "func (p *Parser) parseSegment(ctx context.Context, row string) error {\n\t// Ignore the segment if there is no period defined\n\t// Period can be nil because the leg can be ignored\n\tif p.ct.lastPeriod == nil {\n\t\treturn nil\n\t}\n\n\tsegment, err := reader.ReadSegment(row)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"parser: failed to read segment\")\n\t}\n\n\tsegment.AirlineDesignator = p.airlinesMapper.Get(ctx, segment.AirlineDesignator)\n\n\t// When the data element identifier is 50 it means that the flight is a codeshare flight\n\t// So the original leg is already defined. So we can ignore this record\n\t// Because we already have this record as a codeshare in the original flight\n\tif segment.DataElementIdentifier == \"050\" {\n\t\tp.ct.periods = p.ct.periods[:len(p.ct.periods)-1]\n\n\t\t// If connecting flight added for the leg which has data element identifier 50\n\t\t// We are going to remove the connecting flight as well from the connecting flights\n\t\t// This case never happened for now with a lot of files but it is possible since there are no certain rules\n\t\tif len(p.ct.connectingFlightPeriods) > 1 {\n\t\t\tcf := p.ct.connectingFlightPeriods[len(p.ct.connectingFlightPeriods)-1]\n\t\t\tlp := cf.Periods[len(cf.Periods)-1]\n\t\t\tif lp == p.ct.lastPeriod {\n\t\t\t\tp.ct.connectingFlightPeriods = p.ct.connectingFlightPeriods[:len(p.ct.connectingFlightPeriods)-1]\n\t\t\t}\n\t\t}\n\n\t\tp.ct.lastPeriod = nil\n\t\tp.ct.lastConnFlight = nil\n\t\treturn nil\n\t}\n\n\t// We only care about segments with data element identifier 10\n\t// If necessary we can collect information from other data element identifiers\n\t// But for starters we only care about 10\n\tif segment.DataElementIdentifier != \"010\" {\n\t\treturn nil\n\t}\n\t// 3.*107.*ZNZ.*DAR\n\n\tcodeshares := make([]*Codeshare, 0)\n\n\tdataArr := cleanEmptyElements(strings.Split(segment.Data, \"/\"))\n\tfor _, arr := range dataArr {\n\t\tcodeshare := cleanEmptyElements(strings.Split(arr, \" \"))\n\t\tairline := strings.TrimSpace(codeshare[0])\n\t\trawFlightNumber := strings.TrimSpace(codeshare[1])\n\t\t// If there is an Operational suffix `Z` it is included in the flight number\n\t\t// Check the last character and remove it if it is `Z`\n\t\t// TODO: completely remove the last element or just take the first 4 characters?\n\t\tif strings.ContainsRune(\"ZABS\", rune(rawFlightNumber[len(rawFlightNumber)-1])) {\n\t\t\trawFlightNumber = rawFlightNumber[:len(rawFlightNumber)-1]\n\t\t}\n\n\t\tflightNumber, err := strconv.Atoi(rawFlightNumber)\n\t\tif err != nil {\n\t\t\treturn errors.Wrapf(err, \"parser: failed to parse codeshare flight number %v\", codeshare)\n\t\t}\n\n\t\tcodeshares = append(codeshares, &Codeshare{\n\t\t\tAirline:      p.airlinesMapper.Get(ctx, airline),\n\t\t\tFlightNumber: flightNumber,\n\t\t})\n\t}\n\n\tp.ct.lastPeriod.Codeshares = codeshares\n\n\treturn nil\n}\n", "n_tokens": 716, "primary_symbol": "parseSegment", "primary_kind": "function", "primary_span": [453, 526], "def_symbols": ["parseSegment"], "symbols": ["parseSegment", "func", "Parser", "ctx", "context", "Context", "row", "string", "error", "Ignore", "the", "segment", "there", "period", "defined", "Period", "can", "nil", "because", "leg", "ignored", "lastPeriod", "return", "err", "reader", "ReadSegment", "errors", "Wrap", "parser", "failed", "read", "AirlineDesignator", "airlinesMapper", "Get", "When", "data", "element", "identifier", "means", "that", "flight", "codeshare", "original", "already", "ignore", "this", "record", "Because", "have", "DataElementIdentifier", "periods", "len", "connecting", "added", "for", "which", "has", "are", "going", "remove", "well", "from", "flights", "This", "case", "never", "happened", "now", "with", "lot", "files", "but", "possible", "since", "certain", "rules", "connectingFlightPeriods", "Periods", "lastConnFlight", "only", "care", "about", "segments", "necessary", "collect", "information", "other", "identifiers", "But", "starters", "ZNZ", "DAR", "codeshares", "make", "Codeshare", "dataArr", "cleanEmptyElements", "strings", "Split", "Data", "arr", "range", "airline", "TrimSpace", "rawFlightNumber", "Operational", "suffix", "included", "number", "Check", "last", "character", "and", "TODO", "completely", "just", "take", "first", "characters", "ContainsRune", "ZABS", "rune", "flightNumber", "strconv", "Atoi", "Wrapf", "parse", "append", "Airline", "FlightNumber", "Codeshares"], "doc_head": "func (p *Parser) parseSegment(ctx context.Context, row string) error {\n\t// Ignore the segment if there is no period defined\n\t// Period can be nil because the leg can be ignored\n\tif p.ct.lastPeriod == nil {\n\t\treturn nil\n\t}\n\tsegment, err := reader.ReadSegment(row)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"parser: failed to read segment\")\n\t}\n\tsegment.AirlineDesignator = p.airlinesMapper.Get(ctx, segment.AirlineDesignator)\n\t// When the data element identifier is 50 it means that the flight is a codeshare flight\n\t// So the original leg is already defined. So we can ignore this record\n\t// Because we already have this record as a codeshare in the original flight\n\tif segment.DataElementIdentifier == \"050\" {\n\t\tp.ct.periods = p.ct.periods[:len(p.ct.periods)-1]\n\t\t// If connecting flight added for the leg which has data element identifier 50\n\t\t// We are going to remove the connecting flight as well from the connecting flights\n\t\t// This case never happened for now with a lot of files but it is possible since there are no certain rules\n\t\tif len(p.ct.connectingFlightPeriods) > 1 {\n\t\t\tcf := p.ct.connectingFlightPeriods[len(p.ct.connectingFlightPeriods)-1]\n\t\t\tlp := cf.Periods[len(cf.Periods)-1]\n\t"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/parser.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/parser.go", "rel_path": "pkg/ssim/parser/parser.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 33, "text": "package parser\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"io\"\n\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\ntype writer interface {\n\tWriteAll(cts []*CarrierTrailerBlock) ([]*CarrierTrailerBlockLink, error)\n}\n\ntype mapper interface {\n\tGet(ctx context.Context, key string) string\n}\n\n// Parser parses SSIM file,\n// since the SSIM files can be very large we don't want to store the whole file in memory\n// so we parse the carrier trailer blocks one by one and write them to a file\ntype Parser struct {\n\tct *CarrierTrailerBlock\n\n\tw writer\n\n\tairlinesMapper mapper\n\n\tctlinks []*CarrierTrailerBlockLink\n}\n", "n_tokens": 168, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 33], "def_symbols": [], "symbols": ["package", "parser", "import", "bufio", "context", "impalastudios", "com", "aviation", "schedules", "pkg", "ssim", "reader", "log", "uber", "org", "zap", "type", "writer", "interface", "WriteAll", "cts", "CarrierTrailerBlock", "CarrierTrailerBlockLink", "error", "mapper", "Get", "ctx", "Context", "key", "string", "Parser", "parses", "SSIM", "file", "since", "the", "files", "can", "very", "large", "don", "want", "store", "whole", "memory", "parse", "carrier", "trailer", "blocks", "one", "and", "write", "them", "struct", "airlinesMapper", "ctlinks"], "doc_head": "package parser\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"io\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\ntype writer interface {\n\tWriteAll(cts []*CarrierTrailerBlock) ([]*CarrierTrailerBlockLink, error)\n}\ntype mapper interface {\n\tGet(ctx context.Context, key string) string\n}\n// Parser parses SSIM file,\n// since the SSIM files can be very large we don't want to store the whole file in memory\n// so we parse the carrier trailer blocks one by one and write them to a file\ntype Parser struct {\n\tct *CarrierTrailerBlock\n\tw writer\n\tairlinesMapper mapper\n\tctlinks []*CarrierTrailerBlockLink\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/parser.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/parser.go", "rel_path": "pkg/ssim/parser/parser.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 34, "end_line": 42, "text": "// NewParser creates a new parser\nfunc NewParser(w writer, airlinesMapper mapper) *Parser {\n\treturn &Parser{\n\t\tw:              w,\n\t\tctlinks:        make([]*CarrierTrailerBlockLink, 0),\n\t\tairlinesMapper: airlinesMapper,\n\t}\n}\n", "n_tokens": 59, "primary_symbol": "NewParser", "primary_kind": "function", "primary_span": [35, 42], "def_symbols": ["NewParser"], "symbols": ["NewParser", "creates", "new", "parser", "func", "writer", "airlinesMapper", "mapper", "Parser", "return", "ctlinks", "make", "CarrierTrailerBlockLink"], "doc_head": "// NewParser creates a new parser\nfunc NewParser(w writer, airlinesMapper mapper) *Parser {\n\treturn &Parser{\n\t\tw:              w,\n\t\tctlinks:        make([]*CarrierTrailerBlockLink, 0),\n\t\tairlinesMapper: airlinesMapper,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/parser.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/parser.go", "rel_path": "pkg/ssim/parser/parser.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 86, "text": "// Parse parses an SSIM file\nfunc (p *Parser) Parse(ctx context.Context, r io.Reader) (*SSIM, error) {\n\tscanner := bufio.NewScanner(r)\n\tscanner.Split(bufio.ScanLines)\n\n\tfor scanner.Scan() {\n\t\trow := scanner.Text()\n\n\t\tif reader.IsHeader(row) || reader.IsZero(row) {\n\t\t\t// The header record is always the first record in the file\n\t\t\t// Usually the header record is useless, so we ignore it\n\t\t\tcontinue\n\t\t}\n\n\t\tif reader.IsCarrier(row) {\n\t\t\t// Carrier records are the starting record for a carrier trailer block\n\t\t\t// There can be multiple carrier trailer blocks in a file\n\t\t\tif err := p.startCarrierTrailerBlock(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if reader.IsLeg(row) {\n\t\t\tif err := p.parseLeg(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if reader.IsSegment(row) {\n\t\t\t// Segment row, will follow a leg or a segment row\n\t\t\t// so we store multiple segment information for a leg\n\t\t\tif err := p.parseSegment(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if reader.IsTrailer(row) {\n\t\t\t// The trailer record is the ending record for a carrier trailer block\n\t\t\t// There can be multiple carrier trailer blocks in a file\n\t\t\tif err := p.endCarrierTrailerBlock(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Warn(ctx, \"Unknown row type\", zap.String(\"row\", row))\n\t\t}\n\t}\n\n\treturn &SSIM{Links: p.ctlinks}, nil\n}\n", "n_tokens": 379, "primary_symbol": "Parse", "primary_kind": "function", "primary_span": [44, 86], "def_symbols": ["Parse"], "symbols": ["Parse", "parses", "SSIM", "file", "func", "Parser", "ctx", "context", "Context", "Reader", "error", "scanner", "bufio", "NewScanner", "Split", "ScanLines", "for", "Scan", "row", "Text", "reader", "IsHeader", "IsZero", "The", "header", "record", "always", "the", "first", "Usually", "useless", "ignore", "continue", "IsCarrier", "Carrier", "records", "are", "starting", "carrier", "trailer", "block", "There", "can", "multiple", "blocks", "err", "startCarrierTrailerBlock", "nil", "return", "else", "IsLeg", "parseLeg", "IsSegment", "Segment", "will", "follow", "leg", "segment", "store", "information", "parseSegment", "IsTrailer", "ending", "endCarrierTrailerBlock", "log", "Warn", "Unknown", "type", "zap", "String", "Links", "ctlinks"], "doc_head": "// Parse parses an SSIM file\nfunc (p *Parser) Parse(ctx context.Context, r io.Reader) (*SSIM, error) {\n\tscanner := bufio.NewScanner(r)\n\tscanner.Split(bufio.ScanLines)\n\tfor scanner.Scan() {\n\t\trow := scanner.Text()\n\t\tif reader.IsHeader(row) || reader.IsZero(row) {\n\t\t\t// The header record is always the first record in the file\n\t\t\t// Usually the header record is useless, so we ignore it\n\t\t\tcontinue\n\t\t}\n\t\tif reader.IsCarrier(row) {\n\t\t\t// Carrier records are the starting record for a carrier trailer block\n\t\t\t// There can be multiple carrier trailer blocks in a file\n\t\t\tif err := p.startCarrierTrailerBlock(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if reader.IsLeg(row) {\n\t\t\tif err := p.parseLeg(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if reader.IsSegment(row) {\n\t\t\t// Segment row, will follow a leg or a segment row\n\t\t\t// so we store multiple segment information for a leg\n\t\t\tif err := p.parseSegment(ctx, row); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if reader.IsTrailer(row) {\n\t\t\t// The trailer record is the ending record for a carrier trailer block\n\t\t\t// There can be multiple carrier trailer blocks in a file\n\t\t\tif err := p.endCarrierTrailerBlock(ctx, ro"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/array.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/array.go", "rel_path": "pkg/ssim/parser/array.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 13, "text": "package parser\n\nfunc cleanEmptyElements(arr []string) []string {\n\tnewArr := make([]string, 0)\n\tfor _, element := range arr {\n\t\tif len(element) > 0 {\n\t\t\tnewArr = append(newArr, element)\n\t\t}\n\t}\n\n\treturn newArr\n}\n", "n_tokens": 59, "primary_symbol": "cleanEmptyElements", "primary_kind": "function", "primary_span": [3, 13], "def_symbols": ["cleanEmptyElements"], "symbols": ["cleanEmptyElements", "package", "parser", "func", "arr", "string", "newArr", "make", "for", "element", "range", "len", "append", "return"], "doc_head": "package parser\nfunc cleanEmptyElements(arr []string) []string {\n\tnewArr := make([]string, 0)\n\tfor _, element := range arr {\n\t\tif len(element) > 0 {\n\t\t\tnewArr = append(newArr, element)\n\t\t}\n\t}\n\treturn newArr\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 33, "text": "package parser\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n)\n\nvar months = map[string]time.Month{\n\t\"JAN\": time.January,\n\t\"FEB\": time.February,\n\t\"MAR\": time.March,\n\t\"APR\": time.April,\n\t\"MAY\": time.May,\n\t\"JUN\": time.June,\n\t\"JUL\": time.July,\n\t\"AUG\": time.August,\n\t\"SEP\": time.September,\n\t\"OCT\": time.October,\n\t\"NOV\": time.November,\n\t\"DEC\": time.December,\n}\n\nconst (\n\t// ZeroTimeUTC used to represent zero time\n\tZeroTimeUTC = \"0000\"\n\t// ZeroDate used to represent zero date\n\tZeroDate = \"00XXX00\"\n)\n", "n_tokens": 188, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 33], "def_symbols": [], "symbols": ["package", "parser", "import", "fmt", "strconv", "strings", "time", "github", "com", "cockroachdb", "errors", "var", "months", "map", "string", "Month", "JAN", "January", "FEB", "February", "MAR", "March", "APR", "April", "MAY", "May", "JUN", "June", "JUL", "July", "AUG", "August", "SEP", "September", "OCT", "October", "NOV", "November", "DEC", "December", "const", "ZeroTimeUTC", "used", "represent", "zero", "ZeroDate", "date"], "doc_head": "package parser\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n)\nvar months = map[string]time.Month{\n\t\"JAN\": time.January,\n\t\"FEB\": time.February,\n\t\"MAR\": time.March,\n\t\"APR\": time.April,\n\t\"MAY\": time.May,\n\t\"JUN\": time.June,\n\t\"JUL\": time.July,\n\t\"AUG\": time.August,\n\t\"SEP\": time.September,\n\t\"OCT\": time.October,\n\t\"NOV\": time.November,\n\t\"DEC\": time.December,\n}\nconst (\n\t// ZeroTimeUTC used to represent zero time\n\tZeroTimeUTC = \"0000\"\n\t// ZeroDate used to represent zero date\n\tZeroDate = \"00XXX00\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 34, "end_line": 64, "text": "// ParseDateFormat00XXX00 parses a date in the format 00XXX00.\n// The first two characters are the day, the next three are the month, and the last two are the year.\n// Example. 11JAN17\nfunc ParseDateFormat00XXX00(date string, default_ time.Time) (time.Time, error) {\n\tif date == ZeroDate {\n\t\treturn default_, nil\n\t}\n\n\trawDay := date[0:2]\n\trawMonth := date[2:5]\n\trawYear := date[5:7]\n\n\tday, err := strconv.Atoi(rawDay)\n\tif err != nil {\n\t\treturn time.Time{}, errors.Wrap(err, \"parser: could not parse day\")\n\t}\n\n\tmonth, ok := months[rawMonth]\n\tif !ok {\n\t\treturn time.Time{}, errors.Newf(\"parser: could not find month %s\", rawMonth)\n\t}\n\n\tyear, err := strconv.Atoi(rawYear)\n\tif err != nil {\n\t\treturn time.Time{}, errors.Wrap(err, \"parser: could not parse year\")\n\t}\n\tyear += 2000\n\n\treturn time.Date(year, month, day, 0, 0, 0, 0, time.UTC), nil\n}\n", "n_tokens": 250, "primary_symbol": "ParseDateFormat00XXX00", "primary_kind": "function", "primary_span": [37, 64], "def_symbols": ["ParseDateFormat00XXX00"], "symbols": ["ParseDateFormat00XXX00", "parses", "date", "the", "format", "The", "first", "two", "characters", "are", "day", "next", "three", "month", "and", "last", "year", "Example", "func", "string", "default_", "time", "Time", "error", "ZeroDate", "return", "nil", "rawDay", "rawMonth", "rawYear", "err", "strconv", "Atoi", "errors", "Wrap", "parser", "could", "not", "parse", "months", "Newf", "find", "Date", "UTC"], "doc_head": "// ParseDateFormat00XXX00 parses a date in the format 00XXX00.\n// The first two characters are the day, the next three are the month, and the last two are the year.\n// Example. 11JAN17\nfunc ParseDateFormat00XXX00(date string, default_ time.Time) (time.Time, error) {\n\tif date == ZeroDate {\n\t\treturn default_, nil\n\t}\n\trawDay := date[0:2]\n\trawMonth := date[2:5]\n\trawYear := date[5:7]\n\tday, err := strconv.Atoi(rawDay)\n\tif err != nil {\n\t\treturn time.Time{}, errors.Wrap(err, \"parser: could not parse day\")\n\t}\n\tmonth, ok := months[rawMonth]\n\tif !ok {\n\t\treturn time.Time{}, errors.Newf(\"parser: could not find month %s\", rawMonth)\n\t}\n\tyear, err := strconv.Atoi(rawYear)\n\tif err != nil {\n\t\treturn time.Time{}, errors.Wrap(err, \"parser: could not parse year\")\n\t}\n\tyear += 2000\n\treturn time.Date(year, month, day, 0, 0, 0, 0, time.UTC), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 65, "end_line": 79, "text": "// ParseHourMinute parses a time in the format 0000.\nfunc ParseHourMinute(hourMinute string) (int, int, error) {\n\thour, err := strconv.Atoi(hourMinute[0:2])\n\tif err != nil {\n\t\treturn 0, 0, errors.Wrap(err, \"parser: could not parse hour\")\n\t}\n\n\tminute, err := strconv.Atoi(hourMinute[2:4])\n\tif err != nil {\n\t\treturn 0, 0, errors.Wrap(err, \"parser: could not parse minute\")\n\t}\n\n\treturn hour, minute, nil\n}\n", "n_tokens": 120, "primary_symbol": "ParseHourMinute", "primary_kind": "function", "primary_span": [66, 79], "def_symbols": ["ParseHourMinute"], "symbols": ["ParseHourMinute", "parses", "time", "the", "format", "func", "hourMinute", "string", "int", "error", "hour", "err", "strconv", "Atoi", "nil", "return", "errors", "Wrap", "parser", "could", "not", "parse", "minute"], "doc_head": "// ParseHourMinute parses a time in the format 0000.\nfunc ParseHourMinute(hourMinute string) (int, int, error) {\n\thour, err := strconv.Atoi(hourMinute[0:2])\n\tif err != nil {\n\t\treturn 0, 0, errors.Wrap(err, \"parser: could not parse hour\")\n\t}\n\tminute, err := strconv.Atoi(hourMinute[2:4])\n\tif err != nil {\n\t\treturn 0, 0, errors.Wrap(err, \"parser: could not parse minute\")\n\t}\n\treturn hour, minute, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 80, "end_line": 108, "text": "// FixedTimezone is a placeholder for a function that will return a time.Location\n// timezoneIdentifier is a string in the format +0300\nfunc FixedTimezone(timezoneIdentifier string) (*time.Location, error) {\n\thours := timezoneIdentifier[1:3]\n\tminutes := timezoneIdentifier[3:5]\n\n\ttimezoneOffset, err := strconv.Atoi(hours)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttimezoneOffset *= 60\n\n\tminutesInt, err := strconv.Atoi(minutes)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttimezoneOffset += minutesInt\n\n\tif timezoneIdentifier[0:1] == \"-\" {\n\t\ttimezoneOffset *= -1\n\t}\n\n\ttimezoneOffset *= 60\n\n\treturn time.FixedZone(\"UTC\"+timezoneIdentifier, timezoneOffset), nil\n}\n", "n_tokens": 170, "primary_symbol": "FixedTimezone", "primary_kind": "function", "primary_span": [80, 108], "def_symbols": ["FixedTimezone"], "symbols": ["FixedTimezone", "placeholder", "for", "function", "that", "will", "return", "time", "Location", "timezoneIdentifier", "string", "the", "format", "func", "error", "hours", "minutes", "timezoneOffset", "err", "strconv", "Atoi", "nil", "minutesInt", "FixedZone", "UTC"], "doc_head": "// FixedTimezone is a placeholder for a function that will return a time.Location\n// timezoneIdentifier is a string in the format +0300\nfunc FixedTimezone(timezoneIdentifier string) (*time.Location, error) {\n\thours := timezoneIdentifier[1:3]\n\tminutes := timezoneIdentifier[3:5]\n\ttimezoneOffset, err := strconv.Atoi(hours)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttimezoneOffset *= 60\n\tminutesInt, err := strconv.Atoi(minutes)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttimezoneOffset += minutesInt\n\tif timezoneIdentifier[0:1] == \"-\" {\n\t\ttimezoneOffset *= -1\n\t}\n\ttimezoneOffset *= 60\n\treturn time.FixedZone(\"UTC\"+timezoneIdentifier, timezoneOffset), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 109, "end_line": 132, "text": "func toArrivalDateVariationDuration(rawDateVariation string) (time.Duration, error) {\n\tdateVariation := strings.ReplaceAll(rawDateVariation, \"J\", \"0\")\n\n\tarrivalDateVariation, err := strconv.Atoi(dateVariation[1:])\n\tif err != nil {\n\t\treturn 0, errors.Wrapf(err, \"leg: failed to parse arrival date variation: %s\", rawDateVariation)\n\t}\n\n\tdepartureDateVariation, err := strconv.Atoi(dateVariation[:1])\n\tif err != nil {\n\t\treturn 0, errors.Wrapf(err, \"leg: failed to parse departure date variation: %s\", rawDateVariation)\n\t}\n\n\tif strings.ContainsAny(rawDateVariation[1:], \"JA\") {\n\t\tarrivalDateVariation = -1\n\t}\n\n\tif strings.ContainsAny(rawDateVariation[:1], \"JA\") {\n\t\tdepartureDateVariation = -1\n\t}\n\n\treturn 24 * time.Hour * time.Duration(arrivalDateVariation-departureDateVariation), nil\n}\n", "n_tokens": 219, "primary_symbol": "toArrivalDateVariationDuration", "primary_kind": "function", "primary_span": [109, 132], "def_symbols": ["toArrivalDateVariationDuration"], "symbols": ["toArrivalDateVariationDuration", "func", "rawDateVariation", "string", "time", "Duration", "error", "dateVariation", "strings", "ReplaceAll", "arrivalDateVariation", "err", "strconv", "Atoi", "nil", "return", "errors", "Wrapf", "leg", "failed", "parse", "arrival", "date", "variation", "departureDateVariation", "departure", "ContainsAny", "Hour"], "doc_head": "func toArrivalDateVariationDuration(rawDateVariation string) (time.Duration, error) {\n\tdateVariation := strings.ReplaceAll(rawDateVariation, \"J\", \"0\")\n\tarrivalDateVariation, err := strconv.Atoi(dateVariation[1:])\n\tif err != nil {\n\t\treturn 0, errors.Wrapf(err, \"leg: failed to parse arrival date variation: %s\", rawDateVariation)\n\t}\n\tdepartureDateVariation, err := strconv.Atoi(dateVariation[:1])\n\tif err != nil {\n\t\treturn 0, errors.Wrapf(err, \"leg: failed to parse departure date variation: %s\", rawDateVariation)\n\t}\n\tif strings.ContainsAny(rawDateVariation[1:], \"JA\") {\n\t\tarrivalDateVariation = -1\n\t}\n\tif strings.ContainsAny(rawDateVariation[:1], \"JA\") {\n\t\tdepartureDateVariation = -1\n\t}\n\treturn 24 * time.Hour * time.Duration(arrivalDateVariation-departureDateVariation), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 133, "end_line": 145, "text": "func toDepartureDateVariationDuration(dateVariation string) (time.Duration, error) {\n\tdepartureDateVariation, err := strconv.Atoi(strings.ReplaceAll(dateVariation, \"J\", \"0\")[:1])\n\tif err != nil {\n\t\treturn 0, errors.Wrapf(err, \"leg: failed to parse departure date variation: %s\", dateVariation)\n\t}\n\n\tif strings.ContainsAny(dateVariation[:1], \"JA\") {\n\t\tdepartureDateVariation = -1\n\t}\n\n\treturn 24 * time.Hour * time.Duration(departureDateVariation), nil\n}\n", "n_tokens": 125, "primary_symbol": "toDepartureDateVariationDuration", "primary_kind": "function", "primary_span": [133, 145], "def_symbols": ["toDepartureDateVariationDuration"], "symbols": ["toDepartureDateVariationDuration", "func", "dateVariation", "string", "time", "Duration", "error", "departureDateVariation", "err", "strconv", "Atoi", "strings", "ReplaceAll", "nil", "return", "errors", "Wrapf", "leg", "failed", "parse", "departure", "date", "variation", "ContainsAny", "Hour"], "doc_head": "func toDepartureDateVariationDuration(dateVariation string) (time.Duration, error) {\n\tdepartureDateVariation, err := strconv.Atoi(strings.ReplaceAll(dateVariation, \"J\", \"0\")[:1])\n\tif err != nil {\n\t\treturn 0, errors.Wrapf(err, \"leg: failed to parse departure date variation: %s\", dateVariation)\n\t}\n\tif strings.ContainsAny(dateVariation[:1], \"JA\") {\n\t\tdepartureDateVariation = -1\n\t}\n\treturn 24 * time.Hour * time.Duration(departureDateVariation), nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 146, "end_line": 165, "text": "// maxOperationDays returns a map for weekdays which the flight is operating at\n// doo is a string of numbers from 1 to 7, each number represents a day of week\n// 1 is Monday, 2 is Tuesday, 3 is Wednesday, 4 is Thursday, 5 is Friday, 6 is Saturday, 7 is Sunday\nfunc mapOperationDays(doo string) map[time.Weekday]bool {\n\t// SSIM uses 1-7 for days of week, but Go uses 0-6\n\t// In Golang Monday startswith 1 and goes up to 6 and sunday is 0\n\t// In SSIM Monday startswith 1 and goes up to 7 and sunday is 7\n\t// We replace the 7s with 0s to make it compatible with Go\n\tdaysOfOperation := strings.ReplaceAll(doo, \"7\", \"0\")\n\n\toperationDays := make(map[time.Weekday]bool)\n\tfor i := 0; i <= 6; i++ {\n\t\tif strings.Contains(daysOfOperation, strconv.Itoa(i)) {\n\t\t\toperationDays[time.Weekday(i)] = true\n\t\t}\n\t}\n\n\treturn operationDays\n}\n", "n_tokens": 257, "primary_symbol": "mapOperationDays", "primary_kind": "function", "primary_span": [149, 165], "def_symbols": ["mapOperationDays"], "symbols": ["mapOperationDays", "maxOperationDays", "returns", "map", "for", "weekdays", "which", "the", "flight", "operating", "doo", "string", "numbers", "from", "each", "number", "represents", "day", "week", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "func", "time", "Weekday", "bool", "SSIM", "uses", "days", "but", "Golang", "startswith", "and", "goes", "sunday", "replace", "with", "make", "compatible", "daysOfOperation", "strings", "ReplaceAll", "operationDays", "Contains", "strconv", "Itoa", "true", "return"], "doc_head": "// maxOperationDays returns a map for weekdays which the flight is operating at\n// doo is a string of numbers from 1 to 7, each number represents a day of week\n// 1 is Monday, 2 is Tuesday, 3 is Wednesday, 4 is Thursday, 5 is Friday, 6 is Saturday, 7 is Sunday\nfunc mapOperationDays(doo string) map[time.Weekday]bool {\n\t// SSIM uses 1-7 for days of week, but Go uses 0-6\n\t// In Golang Monday startswith 1 and goes up to 6 and sunday is 0\n\t// In SSIM Monday startswith 1 and goes up to 7 and sunday is 7\n\t// We replace the 7s with 0s to make it compatible with Go\n\tdaysOfOperation := strings.ReplaceAll(doo, \"7\", \"0\")\n\toperationDays := make(map[time.Weekday]bool)\n\tfor i := 0; i <= 6; i++ {\n\t\tif strings.Contains(daysOfOperation, strconv.Itoa(i)) {\n\t\t\toperationDays[time.Weekday(i)] = true\n\t\t}\n\t}\n\treturn operationDays\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/datetime.go", "rel_path": "pkg/ssim/parser/datetime.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 166, "end_line": 183, "text": "func buildFlightDatetime(date *time.Time, timeString, timezoneIdentifier string) (time.Time, error) {\n\ttimezone, err := FixedTimezone(timezoneIdentifier)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\n\thour, minute, err := ParseHourMinute(timeString)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\n\treturn time.Date(date.Year(), date.Month(), date.Day(), hour, minute, 0, 0, timezone), nil\n}\n\nfunc FormatYYYYMM(t time.Time) string {\n\treturn fmt.Sprintf(\"%d_%d\", t.Year(), t.Month())\n}\n", "n_tokens": 128, "primary_symbol": "buildFlightDatetime", "primary_kind": "function", "primary_span": [166, 183], "def_symbols": ["buildFlightDatetime", "FormatYYYYMM"], "symbols": ["buildFlightDatetime", "FormatYYYYMM", "func", "date", "time", "Time", "timeString", "timezoneIdentifier", "string", "error", "timezone", "err", "FixedTimezone", "nil", "return", "hour", "minute", "ParseHourMinute", "Date", "Year", "Month", "Day", "fmt", "Sprintf"], "doc_head": "func buildFlightDatetime(date *time.Time, timeString, timezoneIdentifier string) (time.Time, error) {\n\ttimezone, err := FixedTimezone(timezoneIdentifier)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\thour, minute, err := ParseHourMinute(timeString)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\treturn time.Date(date.Year(), date.Month(), date.Day(), hour, minute, 0, 0, timezone), nil\n}\nfunc FormatYYYYMM(t time.Time) string {\n\treturn fmt.Sprintf(\"%d_%d\", t.Year(), t.Month())\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go", "rel_path": "pkg/ssim/parser/carrier_trailer.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package parser\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n// CarrierTrailerBlock is a block of carrier, leg and segment rows\ntype CarrierTrailerBlock struct {\n\tCarrier           *reader.Carrier     `json:\"carrier\"`\n\tTrailer           *reader.Trailer     `json:\"trailer\"`\n\tFrom              time.Time           `json:\"from\"`\n\tTo                time.Time           `json:\"to\"`\n\tFlights           []*Flight           `json:\"flights\"`\n\tConnectingFlights []*ConnectingFlight `json:\"connecting_flights\"`\n\n\tperiods                 []*PeriodOfFlights\n\tconnectingFlightPeriods []*ConnectingFlightPeriods\n\tlastPeriod              *PeriodOfFlights\n\tlastConnFlight          *ConnectingFlightPeriods\n}\n", "n_tokens": 198, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 28], "def_symbols": [], "symbols": ["package", "parser", "import", "context", "fmt", "time", "github", "com", "pkg", "errors", "impalastudios", "aviation", "schedules", "ssim", "reader", "log", "uber", "org", "zap", "CarrierTrailerBlock", "block", "carrier", "leg", "and", "segment", "rows", "type", "struct", "Carrier", "json", "Trailer", "trailer", "From", "Time", "from", "Flights", "Flight", "flights", "ConnectingFlights", "ConnectingFlight", "connecting_flights", "periods", "PeriodOfFlights", "connectingFlightPeriods", "ConnectingFlightPeriods", "lastPeriod", "lastConnFlight"], "doc_head": "package parser\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n// CarrierTrailerBlock is a block of carrier, leg and segment rows\ntype CarrierTrailerBlock struct {\n\tCarrier           *reader.Carrier     `json:\"carrier\"`\n\tTrailer           *reader.Trailer     `json:\"trailer\"`\n\tFrom              time.Time           `json:\"from\"`\n\tTo                time.Time           `json:\"to\"`\n\tFlights           []*Flight           `json:\"flights\"`\n\tConnectingFlights []*ConnectingFlight `json:\"connecting_flights\"`\n\tperiods                 []*PeriodOfFlights\n\tconnectingFlightPeriods []*ConnectingFlightPeriods\n\tlastPeriod              *PeriodOfFlights\n\tlastConnFlight          *ConnectingFlightPeriods\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go", "rel_path": "pkg/ssim/parser/carrier_trailer.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 29, "end_line": 57, "text": "func (p *Parser) startCarrierTrailerBlock(ctx context.Context, row string) error {\n\tcarrier := reader.ReadCarrier(row)\n\tcarrier.AirlineDesignator = p.airlinesMapper.Get(ctx, carrier.AirlineDesignator)\n\n\tfrom, err := ParseDateFormat00XXX00(carrier.PeriodOfScheduleValidity.From, time.Time{})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"carrier: failed to parse from date\")\n\t}\n\n\tto, err := ParseDateFormat00XXX00(carrier.PeriodOfScheduleValidity.To, time.Time{})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"carrier: failed to parse to date\")\n\t}\n\n\tp.ct = &CarrierTrailerBlock{\n\t\tCarrier: carrier,\n\t\tFrom:    from,\n\t\tTo:      to,\n\t}\n\n\tlog.Debug(ctx, \"Started parsing carrier/trailer block\",\n\t\tzap.String(\"airline\", p.ct.Carrier.AirlineDesignator),\n\t\tzap.Any(\"period\", p.ct.Carrier.PeriodOfScheduleValidity),\n\t\tzap.String(\"season\", p.ct.Carrier.Season),\n\t)\n\n\treturn nil\n}\n", "n_tokens": 237, "primary_symbol": "startCarrierTrailerBlock", "primary_kind": "function", "primary_span": [29, 57], "def_symbols": ["startCarrierTrailerBlock"], "symbols": ["startCarrierTrailerBlock", "func", "Parser", "ctx", "context", "Context", "row", "string", "error", "carrier", "reader", "ReadCarrier", "AirlineDesignator", "airlinesMapper", "Get", "from", "err", "ParseDateFormat00XXX00", "PeriodOfScheduleValidity", "From", "time", "Time", "nil", "return", "errors", "Wrap", "failed", "parse", "date", "CarrierTrailerBlock", "Carrier", "log", "Debug", "Started", "parsing", "trailer", "block", "zap", "String", "airline", "Any", "period", "season", "Season"], "doc_head": "func (p *Parser) startCarrierTrailerBlock(ctx context.Context, row string) error {\n\tcarrier := reader.ReadCarrier(row)\n\tcarrier.AirlineDesignator = p.airlinesMapper.Get(ctx, carrier.AirlineDesignator)\n\tfrom, err := ParseDateFormat00XXX00(carrier.PeriodOfScheduleValidity.From, time.Time{})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"carrier: failed to parse from date\")\n\t}\n\tto, err := ParseDateFormat00XXX00(carrier.PeriodOfScheduleValidity.To, time.Time{})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"carrier: failed to parse to date\")\n\t}\n\tp.ct = &CarrierTrailerBlock{\n\t\tCarrier: carrier,\n\t\tFrom:    from,\n\t\tTo:      to,\n\t}\n\tlog.Debug(ctx, \"Started parsing carrier/trailer block\",\n\t\tzap.String(\"airline\", p.ct.Carrier.AirlineDesignator),\n\t\tzap.Any(\"period\", p.ct.Carrier.PeriodOfScheduleValidity),\n\t\tzap.String(\"season\", p.ct.Carrier.Season),\n\t)\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go", "rel_path": "pkg/ssim/parser/carrier_trailer.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 58, "end_line": 103, "text": "// splitMultiMonthCarrierTrailerToMonthly splits a carrier trailer block into multiple blocks\n// Some carrier trailer blocks can span multiple months, we split those blocks into multiple blocks per month\n// Then for each carrier trailer block we convert periods to direct flights,\n// and connecting flight periods to connecting flights\nfunc splitMultiMonthCarrierTrailerToMonthly(mainBlock *CarrierTrailerBlock) []*CarrierTrailerBlock {\n\tcarrierTrailerBlocks := make(map[string]*CarrierTrailerBlock)\n\n\tfor _, period := range mainBlock.periods {\n\t\tmonthlyPeriods := period.MonthlyPeriods()\n\t\tfor _, monthlyPeriod := range monthlyPeriods {\n\t\t\tkey := fmt.Sprintf(\"%s_%s\", monthlyPeriod.Airline, FormatYYYYMM(monthlyPeriod.BeginsAt))\n\t\t\tif _, ok := carrierTrailerBlocks[key]; !ok {\n\t\t\t\tcarrierTrailerBlocks[key] = &CarrierTrailerBlock{\n\t\t\t\t\tCarrier:           mainBlock.Carrier,\n\t\t\t\t\tTrailer:           mainBlock.Trailer,\n\t\t\t\t\tFrom:              monthlyPeriod.BeginsAt,\n\t\t\t\t\tTo:                monthlyPeriod.EndsAt,\n\t\t\t\t\tFlights:           make([]*Flight, 0),\n\t\t\t\t\tConnectingFlights: make([]*ConnectingFlight, 0),\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor _, f := range monthlyPeriod.Flights {\n\t\t\t\tf.Codeshares = monthlyPeriod.Codeshares\n\t\t\t\tcarrierTrailerBlocks[key].Flights = append(carrierTrailerBlocks[key].Flights, f)\n\t\t\t}\n\t\t}\n\t}\n\n\tfor _, cf := range mainBlock.connectingFlightPeriods {\n\t\tmonthlyConnectingFlights := cf.MonthlyConnectingFlights()\n\t\tfor _, mcf := range monthlyConnectingFlights {\n\t\t\tkey := fmt.Sprintf(\"%s_%s\", mcf.Airline, FormatYYYYMM(mcf.BeginsAt))\n\t\t\tcfs := mcf.ToConnectingFlights()\n\t\t\tfor i := range cfs {\n\t\t\t\tcarrierTrailerBlocks[key].ConnectingFlights = append(carrierTrailerBlocks[key].ConnectingFlights, &cfs[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tblocks := make([]*CarrierTrailerBlock, 0)\n\tfor _, block := range carrierTrailerBlocks {\n\t\tblocks = append(blocks, block)\n\t}\n\treturn blocks\n}\n", "n_tokens": 486, "primary_symbol": "splitMultiMonthCarrierTrailerToMonthly", "primary_kind": "function", "primary_span": [62, 103], "def_symbols": ["splitMultiMonthCarrierTrailerToMonthly"], "symbols": ["splitMultiMonthCarrierTrailerToMonthly", "splits", "carrier", "trailer", "block", "into", "multiple", "blocks", "Some", "can", "span", "months", "split", "those", "per", "month", "Then", "for", "each", "convert", "periods", "direct", "flights", "and", "connecting", "flight", "func", "mainBlock", "CarrierTrailerBlock", "carrierTrailerBlocks", "make", "map", "string", "period", "range", "monthlyPeriods", "MonthlyPeriods", "monthlyPeriod", "key", "fmt", "Sprintf", "Airline", "FormatYYYYMM", "BeginsAt", "Carrier", "Trailer", "From", "EndsAt", "Flights", "Flight", "ConnectingFlights", "ConnectingFlight", "Codeshares", "append", "connectingFlightPeriods", "monthlyConnectingFlights", "MonthlyConnectingFlights", "mcf", "cfs", "ToConnectingFlights", "return"], "doc_head": "// splitMultiMonthCarrierTrailerToMonthly splits a carrier trailer block into multiple blocks\n// Some carrier trailer blocks can span multiple months, we split those blocks into multiple blocks per month\n// Then for each carrier trailer block we convert periods to direct flights,\n// and connecting flight periods to connecting flights\nfunc splitMultiMonthCarrierTrailerToMonthly(mainBlock *CarrierTrailerBlock) []*CarrierTrailerBlock {\n\tcarrierTrailerBlocks := make(map[string]*CarrierTrailerBlock)\n\tfor _, period := range mainBlock.periods {\n\t\tmonthlyPeriods := period.MonthlyPeriods()\n\t\tfor _, monthlyPeriod := range monthlyPeriods {\n\t\t\tkey := fmt.Sprintf(\"%s_%s\", monthlyPeriod.Airline, FormatYYYYMM(monthlyPeriod.BeginsAt))\n\t\t\tif _, ok := carrierTrailerBlocks[key]; !ok {\n\t\t\t\tcarrierTrailerBlocks[key] = &CarrierTrailerBlock{\n\t\t\t\t\tCarrier:           mainBlock.Carrier,\n\t\t\t\t\tTrailer:           mainBlock.Trailer,\n\t\t\t\t\tFrom:              monthlyPeriod.BeginsAt,\n\t\t\t\t\tTo:                monthlyPeriod.EndsAt,\n\t\t\t\t\tFlights:           make([]*Flight, 0),\n\t\t\t\t\tConnectingFlights: make([]*ConnectingFlight, 0),\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor _, f := range monthlyPeriod.Flights {\n\t\t\t\tf.Codeshares = monthlyPeriod.Co"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/parser/carrier_trailer.go", "rel_path": "pkg/ssim/parser/carrier_trailer.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 104, "end_line": 137, "text": "func (p *Parser) endCarrierTrailerBlock(ctx context.Context, row string) error {\n\t// Add the last connecting flight to the list of connecting flights\n\t// If we don't do this, the last connecting flight will be ignored\n\tif p.ct.lastConnFlight != nil && p.ct.lastConnFlight.NumSegments > 1 {\n\t\tp.ct.connectingFlightPeriods = append(p.ct.connectingFlightPeriods, p.ct.lastConnFlight)\n\t}\n\n\tp.ct.Trailer = reader.ReadTrailer(row)\n\n\tp.ct.Trailer.AirlineDesignator = p.airlinesMapper.Get(ctx, p.ct.Carrier.AirlineDesignator)\n\n\tcarrierTrailerBlocks := splitMultiMonthCarrierTrailerToMonthly(p.ct)\n\n\t//log.Debug(ctx, \"Finished parsing carrier/trailer block\",\n\t//\tzap.String(\"airline\", p.ct.Trailer.AirlineDesignator),\n\t//\tzap.Any(\"serial_number\", p.ct.Trailer.RecordSerialNumber),\n\t//)\n\n\tp.ct = nil\n\n\tlinks, err := p.w.WriteAll(carrierTrailerBlocks)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to write block\", zap.Error(err))\n\t}\n\n\tp.ctlinks = append(p.ctlinks, links...)\n\n\tfor _, link := range links {\n\t\tlog.Debug(ctx, \"Wrote block\", zap.String(\"filename\", link.Filepath))\n\t}\n\n\treturn nil\n}\n", "n_tokens": 290, "primary_symbol": "endCarrierTrailerBlock", "primary_kind": "function", "primary_span": [104, 137], "def_symbols": ["endCarrierTrailerBlock"], "symbols": ["endCarrierTrailerBlock", "func", "Parser", "ctx", "context", "Context", "row", "string", "error", "Add", "the", "last", "connecting", "flight", "list", "flights", "don", "this", "will", "ignored", "lastConnFlight", "nil", "NumSegments", "connectingFlightPeriods", "append", "Trailer", "reader", "ReadTrailer", "AirlineDesignator", "airlinesMapper", "Get", "Carrier", "carrierTrailerBlocks", "splitMultiMonthCarrierTrailerToMonthly", "log", "Debug", "Finished", "parsing", "carrier", "trailer", "block", "zap", "String", "airline", "Any", "serial_number", "RecordSerialNumber", "links", "err", "WriteAll", "Error", "Failed", "write", "ctlinks", "for", "link", "range", "Wrote", "filename", "Filepath", "return"], "doc_head": "func (p *Parser) endCarrierTrailerBlock(ctx context.Context, row string) error {\n\t// Add the last connecting flight to the list of connecting flights\n\t// If we don't do this, the last connecting flight will be ignored\n\tif p.ct.lastConnFlight != nil && p.ct.lastConnFlight.NumSegments > 1 {\n\t\tp.ct.connectingFlightPeriods = append(p.ct.connectingFlightPeriods, p.ct.lastConnFlight)\n\t}\n\tp.ct.Trailer = reader.ReadTrailer(row)\n\tp.ct.Trailer.AirlineDesignator = p.airlinesMapper.Get(ctx, p.ct.Carrier.AirlineDesignator)\n\tcarrierTrailerBlocks := splitMultiMonthCarrierTrailerToMonthly(p.ct)\n\t//log.Debug(ctx, \"Finished parsing carrier/trailer block\",\n\t//\tzap.String(\"airline\", p.ct.Trailer.AirlineDesignator),\n\t//\tzap.Any(\"serial_number\", p.ct.Trailer.RecordSerialNumber),\n\t//)\n\tp.ct = nil\n\tlinks, err := p.w.WriteAll(carrierTrailerBlocks)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to write block\", zap.Error(err))\n\t}\n\tp.ctlinks = append(p.ctlinks, links...)\n\tfor _, link := range links {\n\t\tlog.Debug(ctx, \"Wrote block\", zap.String(\"filename\", link.Filepath))\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go", "rel_path": "pkg/ssim/writer/block_timelines.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "package writer\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"sync\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n)\n\n// DefaultDir is the default directory for carrier trailer blocks\nconst DefaultDir = \"carrier_trailers\"\n\n// BlockWriter writes carrier trailer blocks to a file\ntype BlockWriter struct {\n\thasDir bool\n\tdir    string\n\n\tmux *sync.Mutex\n}\n\n// NewBlockWriter creates a new block writer\nfunc NewBlockWriter(dir string) *BlockWriter {\n\treturn &BlockWriter{\n\t\tmux: &sync.Mutex{},\n\n\t\tdir: dir,\n\t}\n}\n", "n_tokens": 141, "primary_symbol": "NewBlockWriter", "primary_kind": "function", "primary_span": [25, 32], "def_symbols": ["NewBlockWriter"], "symbols": ["NewBlockWriter", "package", "writer", "import", "encoding", "json", "fmt", "sync", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "schedules", "pkg", "ssim", "parser", "DefaultDir", "the", "default", "directory", "for", "carrier", "trailer", "blocks", "const", "carrier_trailers", "BlockWriter", "writes", "file", "type", "struct", "hasDir", "bool", "dir", "string", "mux", "Mutex", "creates", "new", "block", "func", "return"], "doc_head": "package writer\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"sync\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n)\n// DefaultDir is the default directory for carrier trailer blocks\nconst DefaultDir = \"carrier_trailers\"\n// BlockWriter writes carrier trailer blocks to a file\ntype BlockWriter struct {\n\thasDir bool\n\tdir    string\n\tmux *sync.Mutex\n}\n// NewBlockWriter creates a new block writer\nfunc NewBlockWriter(dir string) *BlockWriter {\n\treturn &BlockWriter{\n\t\tmux: &sync.Mutex{},\n\t\tdir: dir,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go", "rel_path": "pkg/ssim/writer/block_timelines.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 49, "text": "func (w *BlockWriter) createDir() error {\n\tdefer w.mux.Unlock()\n\tw.mux.Lock()\n\n\tif w.hasDir {\n\t\treturn nil\n\t}\n\n\tif err := os.MkdirAll(w.dir, 0755); err != nil {\n\t\treturn errors.Wrap(err, \"writer: failed to create directory\")\n\t}\n\n\tw.hasDir = true\n\n\treturn nil\n}\n", "n_tokens": 78, "primary_symbol": "createDir", "primary_kind": "function", "primary_span": [33, 49], "def_symbols": ["createDir"], "symbols": ["createDir", "func", "BlockWriter", "error", "defer", "mux", "Unlock", "Lock", "hasDir", "return", "nil", "err", "MkdirAll", "dir", "errors", "Wrap", "writer", "failed", "create", "directory", "true"], "doc_head": "func (w *BlockWriter) createDir() error {\n\tdefer w.mux.Unlock()\n\tw.mux.Lock()\n\tif w.hasDir {\n\t\treturn nil\n\t}\n\tif err := os.MkdirAll(w.dir, 0755); err != nil {\n\t\treturn errors.Wrap(err, \"writer: failed to create directory\")\n\t}\n\tw.hasDir = true\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go", "rel_path": "pkg/ssim/writer/block_timelines.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 50, "end_line": 77, "text": "// Write writes a carrier trailer block\nfunc (w *BlockWriter) Write(block *parser.CarrierTrailerBlock) (*parser.CarrierTrailerBlockLink, error) {\n\tif err := w.createDir(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tblockbytes, err := json.Marshal(block)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"writer: failed to marshal block\")\n\t}\n\n\tfilepath := fmt.Sprintf(\"%s/%s_%s.json\",\n\t\tw.dir,\n\t\tblock.Carrier.AirlineDesignator,\n\t\tparser.FormatYYYYMM(block.From),\n\t)\n\tif err := os.WriteFile(filepath, blockbytes, 0644); err != nil {\n\t\treturn nil, errors.Wrap(err, \"writer: failed to write block to file\")\n\t}\n\n\treturn &parser.CarrierTrailerBlockLink{\n\t\tAirlineDesignator: block.Carrier.AirlineDesignator,\n\t\tPeriodBegin:       parser.FormatYYYYMM(block.From),\n\t\tPeriodEnd:         parser.FormatYYYYMM(block.To),\n\t\tFilepath:          filepath,\n\t}, nil\n}\n", "n_tokens": 228, "primary_symbol": "Write", "primary_kind": "function", "primary_span": [51, 77], "def_symbols": ["Write"], "symbols": ["Write", "writes", "carrier", "trailer", "block", "func", "BlockWriter", "parser", "CarrierTrailerBlock", "CarrierTrailerBlockLink", "error", "err", "createDir", "nil", "return", "blockbytes", "json", "Marshal", "errors", "Wrap", "writer", "failed", "marshal", "filepath", "fmt", "Sprintf", "dir", "Carrier", "AirlineDesignator", "FormatYYYYMM", "From", "WriteFile", "write", "file", "PeriodBegin", "PeriodEnd", "Filepath"], "doc_head": "// Write writes a carrier trailer block\nfunc (w *BlockWriter) Write(block *parser.CarrierTrailerBlock) (*parser.CarrierTrailerBlockLink, error) {\n\tif err := w.createDir(); err != nil {\n\t\treturn nil, err\n\t}\n\tblockbytes, err := json.Marshal(block)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"writer: failed to marshal block\")\n\t}\n\tfilepath := fmt.Sprintf(\"%s/%s_%s.json\",\n\t\tw.dir,\n\t\tblock.Carrier.AirlineDesignator,\n\t\tparser.FormatYYYYMM(block.From),\n\t)\n\tif err := os.WriteFile(filepath, blockbytes, 0644); err != nil {\n\t\treturn nil, errors.Wrap(err, \"writer: failed to write block to file\")\n\t}\n\treturn &parser.CarrierTrailerBlockLink{\n\t\tAirlineDesignator: block.Carrier.AirlineDesignator,\n\t\tPeriodBegin:       parser.FormatYYYYMM(block.From),\n\t\tPeriodEnd:         parser.FormatYYYYMM(block.To),\n\t\tFilepath:          filepath,\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/writer/block_timelines.go", "rel_path": "pkg/ssim/writer/block_timelines.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 78, "end_line": 111, "text": "// WriteAll writes a carrier trailer blocks\nfunc (w *BlockWriter) WriteAll(blocks []*parser.CarrierTrailerBlock) ([]*parser.CarrierTrailerBlockLink, error) {\n\tif err := w.createDir(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tlinks := make([]*parser.CarrierTrailerBlockLink, 0)\n\n\tfor _, block := range blocks {\n\t\tblockbytes, err := json.Marshal(block)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"writer: failed to marshal block\")\n\t\t}\n\n\t\tfilepath := fmt.Sprintf(\"%s/%s_%s.json\",\n\t\t\tw.dir,\n\t\t\tblock.Carrier.AirlineDesignator,\n\t\t\tparser.FormatYYYYMM(block.From),\n\t\t)\n\t\tif err := os.WriteFile(filepath, blockbytes, 0644); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"writer: failed to write block to file\")\n\t\t}\n\n\t\tlinks = append(links, &parser.CarrierTrailerBlockLink{\n\t\t\tAirlineDesignator: block.Carrier.AirlineDesignator,\n\t\t\tPeriodBegin:       parser.FormatYYYYMM(block.From),\n\t\t\tPeriodEnd:         parser.FormatYYYYMM(block.To),\n\t\t\tFilepath:          filepath,\n\t\t})\n\t}\n\n\treturn links, nil\n}\n", "n_tokens": 273, "primary_symbol": "WriteAll", "primary_kind": "function", "primary_span": [79, 111], "def_symbols": ["WriteAll"], "symbols": ["WriteAll", "writes", "carrier", "trailer", "blocks", "func", "BlockWriter", "parser", "CarrierTrailerBlock", "CarrierTrailerBlockLink", "error", "err", "createDir", "nil", "return", "links", "make", "for", "block", "range", "blockbytes", "json", "Marshal", "errors", "Wrap", "writer", "failed", "marshal", "filepath", "fmt", "Sprintf", "dir", "Carrier", "AirlineDesignator", "FormatYYYYMM", "From", "WriteFile", "write", "file", "append", "PeriodBegin", "PeriodEnd", "Filepath"], "doc_head": "// WriteAll writes a carrier trailer blocks\nfunc (w *BlockWriter) WriteAll(blocks []*parser.CarrierTrailerBlock) ([]*parser.CarrierTrailerBlockLink, error) {\n\tif err := w.createDir(); err != nil {\n\t\treturn nil, err\n\t}\n\tlinks := make([]*parser.CarrierTrailerBlockLink, 0)\n\tfor _, block := range blocks {\n\t\tblockbytes, err := json.Marshal(block)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"writer: failed to marshal block\")\n\t\t}\n\t\tfilepath := fmt.Sprintf(\"%s/%s_%s.json\",\n\t\t\tw.dir,\n\t\t\tblock.Carrier.AirlineDesignator,\n\t\t\tparser.FormatYYYYMM(block.From),\n\t\t)\n\t\tif err := os.WriteFile(filepath, blockbytes, 0644); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"writer: failed to write block to file\")\n\t\t}\n\t\tlinks = append(links, &parser.CarrierTrailerBlockLink{\n\t\t\tAirlineDesignator: block.Carrier.AirlineDesignator,\n\t\t\tPeriodBegin:       parser.FormatYYYYMM(block.From),\n\t\t\tPeriodEnd:         parser.FormatYYYYMM(block.To),\n\t\t\tFilepath:          filepath,\n\t\t})\n\t}\n\treturn links, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 34, "text": "package db\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/jackc/pgx/v4\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n// Ingester ingests SSIM data into the database\ntype Ingester struct {\n\tdb  *pgsql.DB\n\tcfg *pgsql.Config\n\n\tschemaCache *concurrent.Map[*schema]\n\n\tmux *sync.Mutex\n\n\terrors []error\n\n\tTotalFlightsIngested           *concurrent.AtomicInt64\n\tTotalConnectingFlightsIngested *concurrent.AtomicInt64\n}\n", "n_tokens": 190, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 34], "def_symbols": [], "symbols": ["package", "import", "context", "encoding", "json", "fmt", "github", "com", "jackc", "pgx", "sync", "time", "cockroachdb", "errors", "impalastudios", "aviation", "schedules", "pkg", "concurrent", "pgsql", "ssim", "parser", "log", "uber", "org", "zap", "Ingester", "ingests", "SSIM", "data", "into", "the", "database", "type", "struct", "cfg", "Config", "schemaCache", "Map", "schema", "mux", "Mutex", "error", "TotalFlightsIngested", "AtomicInt64", "TotalConnectingFlightsIngested"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/jackc/pgx/v4\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n// Ingester ingests SSIM data into the database\ntype Ingester struct {\n\tdb  *pgsql.DB\n\tcfg *pgsql.Config\n\tschemaCache *concurrent.Map[*schema]\n\tmux *sync.Mutex\n\terrors []error\n\tTotalFlightsIngested           *concurrent.AtomicInt64\n\tTotalConnectingFlightsIngested *concurrent.AtomicInt64\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 35, "end_line": 49, "text": "// NewIngester creates a new ingester\nfunc NewIngester(\n\tdb *pgsql.DB,\n\tdbcfg *pgsql.Config,\n) *Ingester {\n\treturn &Ingester{\n\t\tdb:                             db,\n\t\tcfg:                            dbcfg,\n\t\tmux:                            &sync.Mutex{},\n\t\tschemaCache:                    concurrent.NewMap[*schema](),\n\t\tTotalFlightsIngested:           concurrent.NewAtomicInt64(0),\n\t\tTotalConnectingFlightsIngested: concurrent.NewAtomicInt64(0),\n\t}\n}\n", "n_tokens": 110, "primary_symbol": "NewIngester", "primary_kind": "function", "primary_span": [36, 49], "def_symbols": ["NewIngester"], "symbols": ["NewIngester", "creates", "new", "ingester", "func", "pgsql", "dbcfg", "Config", "Ingester", "return", "cfg", "mux", "sync", "Mutex", "schemaCache", "concurrent", "NewMap", "schema", "TotalFlightsIngested", "NewAtomicInt64", "TotalConnectingFlightsIngested"], "doc_head": "// NewIngester creates a new ingester\nfunc NewIngester(\n\tdb *pgsql.DB,\n\tdbcfg *pgsql.Config,\n) *Ingester {\n\treturn &Ingester{\n\t\tdb:                             db,\n\t\tcfg:                            dbcfg,\n\t\tmux:                            &sync.Mutex{},\n\t\tschemaCache:                    concurrent.NewMap[*schema](),\n\t\tTotalFlightsIngested:           concurrent.NewAtomicInt64(0),\n\t\tTotalConnectingFlightsIngested: concurrent.NewAtomicInt64(0),\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 50, "end_line": 60, "text": "// Ingest ingests SSIM data into the database\nfunc (i *Ingester) Ingest(ctx context.Context, links []*parser.CarrierTrailerBlockLink) error {\n\tlog.Debug(ctx, \"Ingesting SSIM data\", zap.Int(\"links\", len(links)))\n\n\ti.errors = concurrent.ExecuteInPool(ctx, links, i.IngestLink)\n\n\tlog.Debug(ctx, \"Finished ingesting SSIM data\", zap.Errors(\"errors\", i.errors))\n\n\treturn nil\n}\n", "n_tokens": 97, "primary_symbol": "Ingest", "primary_kind": "function", "primary_span": [51, 60], "def_symbols": ["Ingest"], "symbols": ["Ingest", "ingests", "SSIM", "data", "into", "the", "database", "func", "Ingester", "ctx", "context", "Context", "links", "parser", "CarrierTrailerBlockLink", "error", "log", "Debug", "Ingesting", "zap", "Int", "len", "errors", "concurrent", "ExecuteInPool", "IngestLink", "Finished", "ingesting", "Errors", "return", "nil"], "doc_head": "// Ingest ingests SSIM data into the database\nfunc (i *Ingester) Ingest(ctx context.Context, links []*parser.CarrierTrailerBlockLink) error {\n\tlog.Debug(ctx, \"Ingesting SSIM data\", zap.Int(\"links\", len(links)))\n\ti.errors = concurrent.ExecuteInPool(ctx, links, i.IngestLink)\n\tlog.Debug(ctx, \"Finished ingesting SSIM data\", zap.Errors(\"errors\", i.errors))\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 61, "end_line": 90, "text": "func (i *Ingester) createOrLoadSchema(ctx context.Context, schema string) (*schema, error) {\n\tif s, ok := i.schemaCache.Get(schema); ok {\n\t\treturn s, nil\n\t}\n\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\n\tif s, ok := i.schemaCache.Get(schema); ok {\n\t\treturn s, nil\n\t}\n\n\ts, err := i.loadSchema(ctx, schema)\n\tif err != nil {\n\t\tlog.Warn(ctx, \"Schema does not exist, creating a new one...\", zap.String(\"schema\", schema), zap.Error(err))\n\n\t\ts, err = i.createSchema(ctx, schema)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"db: failed to create schema\")\n\t\t}\n\t}\n\n\tif err := pgsql.MigrateUpWithSchema(i.cfg, schema); err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to migrate up\")\n\t}\n\n\ti.schemaCache.Set(schema, s)\n\treturn s, nil\n}\n", "n_tokens": 210, "primary_symbol": "createOrLoadSchema", "primary_kind": "function", "primary_span": [61, 90], "def_symbols": ["createOrLoadSchema"], "symbols": ["createOrLoadSchema", "func", "Ingester", "ctx", "context", "Context", "schema", "string", "error", "schemaCache", "Get", "return", "nil", "defer", "mux", "Unlock", "Lock", "err", "loadSchema", "log", "Warn", "Schema", "does", "not", "exist", "creating", "new", "one", "zap", "String", "Error", "createSchema", "errors", "Wrap", "failed", "create", "pgsql", "MigrateUpWithSchema", "cfg", "migrate", "Set"], "doc_head": "func (i *Ingester) createOrLoadSchema(ctx context.Context, schema string) (*schema, error) {\n\tif s, ok := i.schemaCache.Get(schema); ok {\n\t\treturn s, nil\n\t}\n\tdefer i.mux.Unlock()\n\ti.mux.Lock()\n\tif s, ok := i.schemaCache.Get(schema); ok {\n\t\treturn s, nil\n\t}\n\ts, err := i.loadSchema(ctx, schema)\n\tif err != nil {\n\t\tlog.Warn(ctx, \"Schema does not exist, creating a new one...\", zap.String(\"schema\", schema), zap.Error(err))\n\t\ts, err = i.createSchema(ctx, schema)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"db: failed to create schema\")\n\t\t}\n\t}\n\tif err := pgsql.MigrateUpWithSchema(i.cfg, schema); err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to migrate up\")\n\t}\n\ti.schemaCache.Set(schema, s)\n\treturn s, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 91, "end_line": 114, "text": "// IngestCt ingests a carrier trailer block\nfunc (i *Ingester) IngestCt(ctx context.Context, ct *parser.CarrierTrailerBlock) error {\n\tlog.Debug(ctx, \"Ingesting carrier trailer block\")\n\n\tschema := \"period_\" + parser.FormatYYYYMM(ct.From)\n\ts, err := i.createOrLoadSchema(ctx, schema)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpgingest := &pgxCopyIngest{\n\t\tschema:                         schema,\n\t\tdb:                             i.db,\n\t\tseq:                            s.seq,\n\t\tct:                             ct,\n\t\tflightIndexMapper:              concurrent.NewMap[int](),\n\t\tcodeshareMapper:                concurrent.NewMap[int64](),\n\t\tTotalFlightIngested:            i.TotalFlightsIngested,\n\t\tTotalConnectingFlightsIngested: i.TotalConnectingFlightsIngested,\n\t}\n\tpgingest.flattenCarrierTrailerBlock()\n\treturn pgingest.insert(ctx)\n}\n", "n_tokens": 208, "primary_symbol": "IngestCt", "primary_kind": "function", "primary_span": [92, 114], "def_symbols": ["IngestCt"], "symbols": ["IngestCt", "ingests", "carrier", "trailer", "block", "func", "Ingester", "ctx", "context", "Context", "parser", "CarrierTrailerBlock", "error", "log", "Debug", "Ingesting", "schema", "period_", "FormatYYYYMM", "From", "err", "createOrLoadSchema", "nil", "return", "pgingest", "pgxCopyIngest", "seq", "flightIndexMapper", "concurrent", "NewMap", "int", "codeshareMapper", "int64", "TotalFlightIngested", "TotalFlightsIngested", "TotalConnectingFlightsIngested", "flattenCarrierTrailerBlock", "insert"], "doc_head": "// IngestCt ingests a carrier trailer block\nfunc (i *Ingester) IngestCt(ctx context.Context, ct *parser.CarrierTrailerBlock) error {\n\tlog.Debug(ctx, \"Ingesting carrier trailer block\")\n\tschema := \"period_\" + parser.FormatYYYYMM(ct.From)\n\ts, err := i.createOrLoadSchema(ctx, schema)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpgingest := &pgxCopyIngest{\n\t\tschema:                         schema,\n\t\tdb:                             i.db,\n\t\tseq:                            s.seq,\n\t\tct:                             ct,\n\t\tflightIndexMapper:              concurrent.NewMap[int](),\n\t\tcodeshareMapper:                concurrent.NewMap[int64](),\n\t\tTotalFlightIngested:            i.TotalFlightsIngested,\n\t\tTotalConnectingFlightsIngested: i.TotalConnectingFlightsIngested,\n\t}\n\tpgingest.flattenCarrierTrailerBlock()\n\treturn pgingest.insert(ctx)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 115, "end_line": 138, "text": "func (i *Ingester) IngestLink(ctx context.Context, link *parser.CarrierTrailerBlockLink) error {\n\tfbytes, err := os.ReadFile(link.Filepath)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"db: failed to read file\")\n\t}\n\n\tvar ct parser.CarrierTrailerBlock\n\tif err := json.Unmarshal(fbytes, &ct); err != nil {\n\t\treturn errors.Wrap(err, \"db: failed to unmarshal carrier trailer block\")\n\t}\n\n\tlog.Debug(ctx, \"Ingesting carrier trailer block\", zap.String(\"filepath\", link.Filepath))\n\n\treturn i.IngestCt(ctx, &ct)\n}\n\ntype pgxCopyIngest struct {\n\tdb     *pgsql.DB\n\tschema string\n\tseq    *seq\n\n\tct *parser.CarrierTrailerBlock\n\n\tflattenedFlights           [][]interface{}", "n_tokens": 176, "primary_symbol": "IngestLink", "primary_kind": "function", "primary_span": [115, 138], "def_symbols": ["IngestLink"], "symbols": ["IngestLink", "func", "Ingester", "ctx", "context", "Context", "link", "parser", "CarrierTrailerBlockLink", "error", "fbytes", "err", "ReadFile", "Filepath", "nil", "return", "errors", "Wrap", "failed", "read", "file", "var", "CarrierTrailerBlock", "json", "Unmarshal", "unmarshal", "carrier", "trailer", "block", "log", "Debug", "Ingesting", "zap", "String", "filepath", "IngestCt", "type", "pgxCopyIngest", "struct", "pgsql", "schema", "string", "seq", "flattenedFlights", "interface"], "doc_head": "func (i *Ingester) IngestLink(ctx context.Context, link *parser.CarrierTrailerBlockLink) error {\n\tfbytes, err := os.ReadFile(link.Filepath)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"db: failed to read file\")\n\t}\n\tvar ct parser.CarrierTrailerBlock\n\tif err := json.Unmarshal(fbytes, &ct); err != nil {\n\t\treturn errors.Wrap(err, \"db: failed to unmarshal carrier trailer block\")\n\t}\n\tlog.Debug(ctx, \"Ingesting carrier trailer block\", zap.String(\"filepath\", link.Filepath))\n\treturn i.IngestCt(ctx, &ct)\n}\ntype pgxCopyIngest struct {\n\tdb     *pgsql.DB\n\tschema string\n\tseq    *seq\n\tct *parser.CarrierTrailerBlock\n\tflattenedFlights           [][]interface{}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 139, "end_line": 160, "text": "\tflattenedConnectingFlights [][]interface{}\n\n\tflightIndexMapper *concurrent.Map[int]\n\tcodeshareMapper   *concurrent.Map[int64]\n\n\tTotalFlightIngested            *concurrent.AtomicInt64\n\tTotalConnectingFlightsIngested *concurrent.AtomicInt64\n}\n\nfunc dateOnly(t time.Time) time.Time {\n\treturn time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, time.UTC)\n}\n\nfunc timeWithTZ(t time.Time) string {\n\treturn t.Format(\"1504\") + t.Format(\"-0700\")\n}\n\n// flightID returns a unique identifier for a flight\nfunc flightID(f *parser.Flight) string {\n\treturn f.FlightID\n}\n", "n_tokens": 154, "primary_symbol": "dateOnly", "primary_kind": "function", "primary_span": [148, 160], "def_symbols": ["dateOnly", "timeWithTZ", "flightID"], "symbols": ["dateOnly", "timeWithTZ", "flightID", "flattenedConnectingFlights", "interface", "flightIndexMapper", "concurrent", "Map", "int", "codeshareMapper", "int64", "TotalFlightIngested", "AtomicInt64", "TotalConnectingFlightsIngested", "func", "time", "Time", "return", "Date", "Year", "Month", "Day", "UTC", "string", "Format", "returns", "unique", "identifier", "for", "flight", "parser", "Flight", "FlightID"], "doc_head": "\tflattenedConnectingFlights [][]interface{}\n\tflightIndexMapper *concurrent.Map[int]\n\tcodeshareMapper   *concurrent.Map[int64]\n\tTotalFlightIngested            *concurrent.AtomicInt64\n\tTotalConnectingFlightsIngested *concurrent.AtomicInt64\n}\nfunc dateOnly(t time.Time) time.Time {\n\treturn time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, time.UTC)\n}\nfunc timeWithTZ(t time.Time) string {\n\treturn t.Format(\"1504\") + t.Format(\"-0700\")\n}\n// flightID returns a unique identifier for a flight\nfunc flightID(f *parser.Flight) string {\n\treturn f.FlightID\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 161, "end_line": 172, "text": "func (pg *pgxCopyIngest) addFlight(connectingFlightID *int64, f *parser.Flight) {\n\tf.ID = pg.seq.FlightID.GetAndInc()\n\tcodeshareAirlines := []string{}\n\tcodeshareDesignators := []string{}\n\tcodeshares := [][]string{}\n\n\tfor _, c := range f.Codeshares {\n\t\tcodeshareAirlines = append(codeshareAirlines, c.Airline)\n\t\tcodeshareDesignators = append(codeshareDesignators, fmt.Sprintf(\"%s%d\", c.Airline, c.FlightNumber))\n\t\tcodeshares = append(codeshares, []string{c.Airline, fmt.Sprintf(\"%d\", c.FlightNumber)})\n\t}\n", "n_tokens": 157, "primary_symbol": "addFlight", "primary_kind": "function", "primary_span": [161, 172], "def_symbols": ["addFlight"], "symbols": ["addFlight", "func", "pgxCopyIngest", "connectingFlightID", "int64", "parser", "Flight", "seq", "FlightID", "GetAndInc", "codeshareAirlines", "string", "codeshareDesignators", "codeshares", "for", "range", "Codeshares", "append", "Airline", "fmt", "Sprintf", "FlightNumber"], "doc_head": "func (pg *pgxCopyIngest) addFlight(connectingFlightID *int64, f *parser.Flight) {\n\tf.ID = pg.seq.FlightID.GetAndInc()\n\tcodeshareAirlines := []string{}\n\tcodeshareDesignators := []string{}\n\tcodeshares := [][]string{}\n\tfor _, c := range f.Codeshares {\n\t\tcodeshareAirlines = append(codeshareAirlines, c.Airline)\n\t\tcodeshareDesignators = append(codeshareDesignators, fmt.Sprintf(\"%s%d\", c.Airline, c.FlightNumber))\n\t\tcodeshares = append(codeshares, []string{c.Airline, fmt.Sprintf(\"%d\", c.FlightNumber)})\n\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 173, "end_line": 203, "text": "\tpg.flattenedFlights = append(pg.flattenedFlights, []interface{}{\n\t\tconnectingFlightID,\n\t\tf.ID,\n\t\tf.FlightID,\n\t\tf.Airline,\n\t\tf.FlightNumber,\n\t\tf.Itinerary,\n\t\tf.Sequence,\n\t\tf.DepartureAirport,\n\t\tf.ArrivalAirport,\n\t\tf.Aircraft,\n\t\tdateOnly(f.ScheduledDepartureAt),\n\t\tdateOnly(f.ExpectedDepartureAt),\n\t\tdateOnly(f.ActualDepartureAt),\n\t\ttimeWithTZ(f.ScheduledDepartureAt),\n\t\ttimeWithTZ(f.ExpectedDepartureAt),\n\t\ttimeWithTZ(f.ActualDepartureAt),\n\t\tdateOnly(f.ScheduledArrivalAt),\n\t\tdateOnly(f.ExpectedArrivalAt),\n\t\tdateOnly(f.ActualArrivalAt),\n\t\ttimeWithTZ(f.ScheduledArrivalAt),\n\t\ttimeWithTZ(f.ExpectedArrivalAt),\n\t\ttimeWithTZ(f.ActualArrivalAt),\n\t\tpgsql.Array(codeshareAirlines),\n\t\tpgsql.Array(codeshareDesignators),\n\t\tpgsql.Array(codeshares),\n\t})\n\n\tpg.flightIndexMapper.Set(flightID(f), len(pg.flattenedFlights)-1)\n}\n", "n_tokens": 258, "primary_symbol": "", "primary_kind": "", "primary_span": [173, 203], "def_symbols": [], "symbols": ["flattenedFlights", "append", "interface", "connectingFlightID", "FlightID", "Airline", "FlightNumber", "Itinerary", "Sequence", "DepartureAirport", "ArrivalAirport", "Aircraft", "dateOnly", "ScheduledDepartureAt", "ExpectedDepartureAt", "ActualDepartureAt", "timeWithTZ", "ScheduledArrivalAt", "ExpectedArrivalAt", "ActualArrivalAt", "pgsql", "Array", "codeshareAirlines", "codeshareDesignators", "codeshares", "flightIndexMapper", "Set", "flightID", "len"], "doc_head": "\tpg.flattenedFlights = append(pg.flattenedFlights, []interface{}{\n\t\tconnectingFlightID,\n\t\tf.ID,\n\t\tf.FlightID,\n\t\tf.Airline,\n\t\tf.FlightNumber,\n\t\tf.Itinerary,\n\t\tf.Sequence,\n\t\tf.DepartureAirport,\n\t\tf.ArrivalAirport,\n\t\tf.Aircraft,\n\t\tdateOnly(f.ScheduledDepartureAt),\n\t\tdateOnly(f.ExpectedDepartureAt),\n\t\tdateOnly(f.ActualDepartureAt),\n\t\ttimeWithTZ(f.ScheduledDepartureAt),\n\t\ttimeWithTZ(f.ExpectedDepartureAt),\n\t\ttimeWithTZ(f.ActualDepartureAt),\n\t\tdateOnly(f.ScheduledArrivalAt),\n\t\tdateOnly(f.ExpectedArrivalAt),\n\t\tdateOnly(f.ActualArrivalAt),\n\t\ttimeWithTZ(f.ScheduledArrivalAt),\n\t\ttimeWithTZ(f.ExpectedArrivalAt),\n\t\ttimeWithTZ(f.ActualArrivalAt),\n\t\tpgsql.Array(codeshareAirlines),\n\t\tpgsql.Array(codeshareDesignators),\n\t\tpgsql.Array(codeshares),\n\t})\n\tpg.flightIndexMapper.Set(flightID(f), len(pg.flattenedFlights)-1)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#10", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 204, "end_line": 222, "text": "func (pg *pgxCopyIngest) flattenCarrierTrailerBlock() {\n\tfor _, cf := range pg.ct.ConnectingFlights {\n\t\tcfi := pg.seq.ConnectingFlightID.GetAndInc()\n\n\t\tdepartureAirports := []string{}\n\t\tarrivalAirports := []string{}\n\t\tflightIDs := []string{}\n\t\tscheduledDepartures := []string{}\n\t\tfor _, f := range cf.Flights {\n\t\t\tif _, ok := pg.flightIndexMapper.Get(flightID(f)); !ok {\n\t\t\t\tpg.addFlight(&cfi, f)\n\t\t\t}\n\n\t\t\tflightIDs = append(flightIDs, f.FlightID)\n\t\t\tscheduledDepartures = append(scheduledDepartures, dateOnly(f.ScheduledDepartureAt).Format(time.DateOnly))\n\t\t\tdepartureAirports = append(departureAirports, f.DepartureAirport)\n\t\t\tarrivalAirports = append(arrivalAirports, f.ArrivalAirport)\n\t\t}\n", "n_tokens": 202, "primary_symbol": "flattenCarrierTrailerBlock", "primary_kind": "function", "primary_span": [204, 222], "def_symbols": ["flattenCarrierTrailerBlock"], "symbols": ["flattenCarrierTrailerBlock", "func", "pgxCopyIngest", "for", "range", "ConnectingFlights", "cfi", "seq", "ConnectingFlightID", "GetAndInc", "departureAirports", "string", "arrivalAirports", "flightIDs", "scheduledDepartures", "Flights", "flightIndexMapper", "Get", "flightID", "addFlight", "append", "FlightID", "dateOnly", "ScheduledDepartureAt", "Format", "time", "DateOnly", "DepartureAirport", "ArrivalAirport"], "doc_head": "func (pg *pgxCopyIngest) flattenCarrierTrailerBlock() {\n\tfor _, cf := range pg.ct.ConnectingFlights {\n\t\tcfi := pg.seq.ConnectingFlightID.GetAndInc()\n\t\tdepartureAirports := []string{}\n\t\tarrivalAirports := []string{}\n\t\tflightIDs := []string{}\n\t\tscheduledDepartures := []string{}\n\t\tfor _, f := range cf.Flights {\n\t\t\tif _, ok := pg.flightIndexMapper.Get(flightID(f)); !ok {\n\t\t\t\tpg.addFlight(&cfi, f)\n\t\t\t}\n\t\t\tflightIDs = append(flightIDs, f.FlightID)\n\t\t\tscheduledDepartures = append(scheduledDepartures, dateOnly(f.ScheduledDepartureAt).Format(time.DateOnly))\n\t\t\tdepartureAirports = append(departureAirports, f.DepartureAirport)\n\t\t\tarrivalAirports = append(arrivalAirports, f.ArrivalAirport)\n\t\t}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#11", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 223, "end_line": 241, "text": "\t\tpg.flattenedConnectingFlights = append(pg.flattenedConnectingFlights, []interface{}{\n\t\t\tcfi,\n\t\t\tcf.ConnectingFlightID,\n\t\t\tlen(cf.Flights),\n\t\t\tcf.ArrivalAirport,\n\t\t\tpgsql.Array(flightIDs),\n\t\t\tpgsql.Array(scheduledDepartures),\n\t\t\tpgsql.Array(departureAirports),\n\t\t\tpgsql.Array(arrivalAirports),\n\t\t})\n\t}\n\n\tfor _, f := range pg.ct.Flights {\n\t\tif _, ok := pg.flightIndexMapper.Get(flightID(f)); !ok {\n\t\t\tpg.addFlight(nil, f)\n\t\t}\n\t}\n}\n", "n_tokens": 135, "primary_symbol": "", "primary_kind": "", "primary_span": [223, 241], "def_symbols": [], "symbols": ["flattenedConnectingFlights", "append", "interface", "cfi", "ConnectingFlightID", "len", "Flights", "ArrivalAirport", "pgsql", "Array", "flightIDs", "scheduledDepartures", "departureAirports", "arrivalAirports", "for", "range", "flightIndexMapper", "Get", "flightID", "addFlight", "nil"], "doc_head": "\t\tpg.flattenedConnectingFlights = append(pg.flattenedConnectingFlights, []interface{}{\n\t\t\tcfi,\n\t\t\tcf.ConnectingFlightID,\n\t\t\tlen(cf.Flights),\n\t\t\tcf.ArrivalAirport,\n\t\t\tpgsql.Array(flightIDs),\n\t\t\tpgsql.Array(scheduledDepartures),\n\t\t\tpgsql.Array(departureAirports),\n\t\t\tpgsql.Array(arrivalAirports),\n\t\t})\n\t}\n\tfor _, f := range pg.ct.Flights {\n\t\tif _, ok := pg.flightIndexMapper.Get(flightID(f)); !ok {\n\t\t\tpg.addFlight(nil, f)\n\t\t}\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go#12", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/ingest.go", "rel_path": "pkg/ssim/db/ingest.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 242, "end_line": 306, "text": "func (pg *pgxCopyIngest) insert(ctx context.Context) error {\n\tif len(pg.flattenedFlights) == 0 &&\n\t\tlen(pg.flattenedConnectingFlights) == 0 {\n\t\treturn nil\n\t}\n\n\tlog.Debug(ctx, \"ingesting ssim data\",\n\t\tzap.Int(\"flights_count\", len(pg.flattenedFlights)),\n\t\tzap.Int(\"connecting_flight_count\", len(pg.flattenedConnectingFlights)),\n\t)\n\n\tconnectingFlightsCount, err := pg.db.CopyFrom(ctx, pgx.Identifier{pg.schema, \"connecting_flights\"},\n\t\t[]string{\n\t\t\t\"id\",\n\t\t\t\"connecting_flight_id\",\n\t\t\t\"num_flights\",\n\t\t\t\"arrival_airport\",\n\t\t\t\"flight_ids\",\n\t\t\t\"scheduled_departure_ats\",\n\t\t\t\"departure_airports\",\n\t\t\t\"arrival_airports\",\n\t\t}, pgx.CopyFromRows(pg.flattenedConnectingFlights))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"ingest: failed to ingest connecting flights\")\n\t}\n\n\tpg.TotalConnectingFlightsIngested.Add(connectingFlightsCount)\n\n\tflightsCount, err := pg.db.CopyFrom(ctx, pgx.Identifier{pg.schema, \"flights\"},\n\t\t[]string{\n\t\t\t\"connecting_flight_id\",\n\t\t\t\"id\",\n\t\t\t\"flight_id\",\n\t\t\t\"airline\",\n\t\t\t\"flight_number\",\n\t\t\t\"itinerary\",\n\t\t\t\"sequence\",\n\t\t\t\"departure_airport\",\n\t\t\t\"arrival_airport\",\n\t\t\t\"aircraft\",\n\t\t\t\"scheduled_departure_at\",\n\t\t\t\"expected_departure_at\",\n\t\t\t\"actual_departure_at\",\n\t\t\t\"scheduled_departure_time_tz\",\n\t\t\t\"expected_departure_time_tz\",\n\t\t\t\"actual_departure_time_tz\",\n\t\t\t\"scheduled_arrival_at\",\n\t\t\t\"expected_arrival_at\",\n\t\t\t\"actual_arrival_at\",\n\t\t\t\"scheduled_arrival_time_tz\",\n\t\t\t\"expected_arrival_time_tz\",\n\t\t\t\"actual_arrival_time_tz\",\n\t\t\t\"codeshare_airlines\",\n\t\t\t\"codeshare_designators\",\n\t\t\t\"codeshares\",\n\t\t}, pgx.CopyFromRows(pg.flattenedFlights))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"ingest: failed to ingest flights\")\n\t}\n\n\tpg.TotalFlightIngested.Add(flightsCount)\n\n\treturn nil\n}\n", "n_tokens": 510, "primary_symbol": "insert", "primary_kind": "function", "primary_span": [242, 306], "def_symbols": ["insert"], "symbols": ["insert", "func", "pgxCopyIngest", "ctx", "context", "Context", "error", "len", "flattenedFlights", "flattenedConnectingFlights", "return", "nil", "log", "Debug", "ingesting", "ssim", "data", "zap", "Int", "flights_count", "connecting_flight_count", "connectingFlightsCount", "err", "CopyFrom", "pgx", "Identifier", "schema", "connecting_flights", "string", "connecting_flight_id", "num_flights", "arrival_airport", "flight_ids", "scheduled_departure_ats", "departure_airports", "arrival_airports", "CopyFromRows", "errors", "Wrap", "ingest", "failed", "connecting", "flights", "TotalConnectingFlightsIngested", "Add", "flightsCount", "flight_id", "airline", "flight_number", "itinerary", "sequence", "departure_airport", "aircraft", "scheduled_departure_at", "expected_departure_at", "actual_departure_at", "scheduled_departure_time_tz", "expected_departure_time_tz", "actual_departure_time_tz", "scheduled_arrival_at", "expected_arrival_at", "actual_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_time_tz", "actual_arrival_time_tz", "codeshare_airlines", "codeshare_designators", "codeshares", "TotalFlightIngested"], "doc_head": "func (pg *pgxCopyIngest) insert(ctx context.Context) error {\n\tif len(pg.flattenedFlights) == 0 &&\n\t\tlen(pg.flattenedConnectingFlights) == 0 {\n\t\treturn nil\n\t}\n\tlog.Debug(ctx, \"ingesting ssim data\",\n\t\tzap.Int(\"flights_count\", len(pg.flattenedFlights)),\n\t\tzap.Int(\"connecting_flight_count\", len(pg.flattenedConnectingFlights)),\n\t)\n\tconnectingFlightsCount, err := pg.db.CopyFrom(ctx, pgx.Identifier{pg.schema, \"connecting_flights\"},\n\t\t[]string{\n\t\t\t\"id\",\n\t\t\t\"connecting_flight_id\",\n\t\t\t\"num_flights\",\n\t\t\t\"arrival_airport\",\n\t\t\t\"flight_ids\",\n\t\t\t\"scheduled_departure_ats\",\n\t\t\t\"departure_airports\",\n\t\t\t\"arrival_airports\",\n\t\t}, pgx.CopyFromRows(pg.flattenedConnectingFlights))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"ingest: failed to ingest connecting flights\")\n\t}\n\tpg.TotalConnectingFlightsIngested.Add(connectingFlightsCount)\n\tflightsCount, err := pg.db.CopyFrom(ctx, pgx.Identifier{pg.schema, \"flights\"},\n\t\t[]string{\n\t\t\t\"connecting_flight_id\",\n\t\t\t\"id\",\n\t\t\t\"flight_id\",\n\t\t\t\"airline\",\n\t\t\t\"flight_number\",\n\t\t\t\"itinerary\",\n\t\t\t\"sequence\",\n\t\t\t\"departure_airport\",\n\t\t\t\"arrival_airport\",\n\t\t\t\"aircraft\",\n\t\t\t\"scheduled_departure_at\",\n\t\t\t\"expected_departure_at\",\n\t\t\t\"actual_departure_at\",\n\t\t\t\"scheduled_departure_t"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/update.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/update.go", "rel_path": "pkg/ssim/db/update.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 23, "text": "package db\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/doug-martin/goqu/v9\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n\ntype FlightStatusUpdate struct {\n\tExpectedDepartureAt   *time.Time\n\tActualDepartureAt     *time.Time\n\tExpectedArrivalAt     *time.Time\n\tActualArrivalAt       *time.Time\n\tFlightStatus          *string\n\tDepartureFlightStatus *string\n\tArrivalFlightStatus   *string\n}\n", "n_tokens": 126, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 23], "def_symbols": [], "symbols": ["package", "import", "context", "fmt", "strconv", "time", "github", "com", "cockroachdb", "errors", "doug", "martin", "goqu", "impalastudios", "aviation", "schedules", "pkg", "pgsql", "type", "FlightStatusUpdate", "struct", "ExpectedDepartureAt", "Time", "ActualDepartureAt", "ExpectedArrivalAt", "ActualArrivalAt", "FlightStatus", "string", "DepartureFlightStatus", "ArrivalFlightStatus"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/doug-martin/goqu/v9\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\ntype FlightStatusUpdate struct {\n\tExpectedDepartureAt   *time.Time\n\tActualDepartureAt     *time.Time\n\tExpectedArrivalAt     *time.Time\n\tActualArrivalAt       *time.Time\n\tFlightStatus          *string\n\tDepartureFlightStatus *string\n\tArrivalFlightStatus   *string\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/update.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/update.go", "rel_path": "pkg/ssim/db/update.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 24, "end_line": 87, "text": "// UpdateFlightStatus updates the expected and actual times of a flight\n// Checks the values and updates only if they are different in a single query\nfunc UpdateFlightStatus(ctx context.Context, db *pgsql.DB, flightID string, update *FlightStatusUpdate) error {\n\tif update == nil {\n\t\treturn nil\n\t}\n\n\trecord := make(goqu.Record)\n\tif update.ExpectedDepartureAt != nil {\n\t\trecord[\"expected_departure_at\"] = dateOnly(*update.ExpectedDepartureAt)\n\t\trecord[\"expected_departure_time_tz\"] = timeWithTZ(*update.ExpectedDepartureAt)\n\t}\n\n\tif update.ExpectedArrivalAt != nil {\n\t\trecord[\"expected_arrival_at\"] = dateOnly(*update.ExpectedArrivalAt)\n\t\trecord[\"expected_arrival_time_tz\"] = timeWithTZ(*update.ExpectedArrivalAt)\n\t}\n\n\tif update.ActualDepartureAt != nil {\n\t\trecord[\"actual_departure_at\"] = dateOnly(*update.ActualDepartureAt)\n\t\trecord[\"actual_departure_time_tz\"] = timeWithTZ(*update.ActualDepartureAt)\n\t}\n\n\tif update.ActualArrivalAt != nil {\n\t\trecord[\"actual_arrival_at\"] = dateOnly(*update.ActualArrivalAt)\n\t\trecord[\"actual_arrival_time_tz\"] = timeWithTZ(*update.ActualArrivalAt)\n\t}\n\n\tif update.FlightStatus != nil {\n\t\trecord[\"status\"] = *update.FlightStatus\n\t}\n\n\tif update.DepartureFlightStatus != nil {\n\t\trecord[\"departure_status\"] = *update.DepartureFlightStatus\n\t}\n\n\tif update.ArrivalFlightStatus != nil {\n\t\trecord[\"arrival_status\"] = *update.ArrivalFlightStatus\n\t}\n\n\t// First part of the flight id is always the timestamp\n\t// And the format is YYYYMMDDHHmm, so we can just take the first 6 characters\n\t// We convert it to an int and then to a string to remove leading zeros\n\tyear, err := strconv.Atoi(flightID[:4])\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to parse flight id year\")\n\t}\n\n\tmonth, err := strconv.Atoi(flightID[4:6])\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to parse flight id month\")\n\t}\n\n\tschema := fmt.Sprintf(\"period_%d_%d\", year, month)\n\n\tq, args, _ := goqu.\n\t\tUpdate(fmt.Sprintf(\"%s.flights\", schema)).\n\t\tWhere(goqu.Ex{\"flight_id\": flightID}).\n\t\tSet(record).\n\t\tToSQL()\n\t_, err = db.Exec(ctx, q, args...)\n\treturn errors.Wrap(err, \"failed to update flight times\")\n}\n", "n_tokens": 569, "primary_symbol": "UpdateFlightStatus", "primary_kind": "function", "primary_span": [26, 87], "def_symbols": ["UpdateFlightStatus"], "symbols": ["UpdateFlightStatus", "updates", "the", "expected", "and", "actual", "times", "flight", "Checks", "values", "only", "they", "are", "different", "single", "query", "func", "ctx", "context", "Context", "pgsql", "flightID", "string", "update", "FlightStatusUpdate", "error", "nil", "return", "record", "make", "goqu", "Record", "ExpectedDepartureAt", "expected_departure_at", "dateOnly", "expected_departure_time_tz", "timeWithTZ", "ExpectedArrivalAt", "expected_arrival_at", "expected_arrival_time_tz", "ActualDepartureAt", "actual_departure_at", "actual_departure_time_tz", "ActualArrivalAt", "actual_arrival_at", "actual_arrival_time_tz", "FlightStatus", "status", "DepartureFlightStatus", "departure_status", "ArrivalFlightStatus", "arrival_status", "First", "part", "always", "timestamp", "And", "format", "YYYYMMDDHHmm", "can", "just", "take", "first", "characters", "convert", "int", "then", "remove", "leading", "zeros", "year", "err", "strconv", "Atoi", "errors", "Wrap", "failed", "parse", "month", "schema", "fmt", "Sprintf", "period_", "args", "Update", "flights", "Where", "flight_id", "Set", "ToSQL", "Exec"], "doc_head": "// UpdateFlightStatus updates the expected and actual times of a flight\n// Checks the values and updates only if they are different in a single query\nfunc UpdateFlightStatus(ctx context.Context, db *pgsql.DB, flightID string, update *FlightStatusUpdate) error {\n\tif update == nil {\n\t\treturn nil\n\t}\n\trecord := make(goqu.Record)\n\tif update.ExpectedDepartureAt != nil {\n\t\trecord[\"expected_departure_at\"] = dateOnly(*update.ExpectedDepartureAt)\n\t\trecord[\"expected_departure_time_tz\"] = timeWithTZ(*update.ExpectedDepartureAt)\n\t}\n\tif update.ExpectedArrivalAt != nil {\n\t\trecord[\"expected_arrival_at\"] = dateOnly(*update.ExpectedArrivalAt)\n\t\trecord[\"expected_arrival_time_tz\"] = timeWithTZ(*update.ExpectedArrivalAt)\n\t}\n\tif update.ActualDepartureAt != nil {\n\t\trecord[\"actual_departure_at\"] = dateOnly(*update.ActualDepartureAt)\n\t\trecord[\"actual_departure_time_tz\"] = timeWithTZ(*update.ActualDepartureAt)\n\t}\n\tif update.ActualArrivalAt != nil {\n\t\trecord[\"actual_arrival_at\"] = dateOnly(*update.ActualArrivalAt)\n\t\trecord[\"actual_arrival_time_tz\"] = timeWithTZ(*update.ActualArrivalAt)\n\t}\n\tif update.FlightStatus != nil {\n\t\trecord[\"status\"] = *update.FlightStatus\n\t}\n\tif update.DepartureFlightStatus != nil {\n\t"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go", "rel_path": "pkg/ssim/db/partial_ingestion.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 26, "text": "package db\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/diff\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\n// IngestPartially ingests SSIM data into the database partially\nfunc IngestPartially(ctx context.Context, db *pgsql.DB, i *Ingester, df *diff.Diff) error {\n\tif err := removeConnectingFlights(ctx, db, df.ConnectingFlights.Removed); err != nil {\n\t\treturn err\n\t}\n\n\tif err := removeFlights(ctx, db, df.Flights.Removed); err != nil {\n\t\treturn err\n\t}\n\n\treturn i.IngestCt(ctx, df.MergedCT)\n}\n", "n_tokens": 199, "primary_symbol": "IngestPartially", "primary_kind": "function", "primary_span": [15, 26], "def_symbols": ["IngestPartially"], "symbols": ["IngestPartially", "package", "import", "context", "fmt", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "schedules", "pkg", "pgsql", "ssim", "diff", "parser", "log", "uber", "org", "zap", "ingests", "SSIM", "data", "into", "the", "database", "partially", "func", "ctx", "Context", "Ingester", "Diff", "error", "err", "removeConnectingFlights", "ConnectingFlights", "Removed", "nil", "return", "removeFlights", "Flights", "IngestCt", "MergedCT"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/diff\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n// IngestPartially ingests SSIM data into the database partially\nfunc IngestPartially(ctx context.Context, db *pgsql.DB, i *Ingester, df *diff.Diff) error {\n\tif err := removeConnectingFlights(ctx, db, df.ConnectingFlights.Removed); err != nil {\n\t\treturn err\n\t}\n\tif err := removeFlights(ctx, db, df.Flights.Removed); err != nil {\n\t\treturn err\n\t}\n\treturn i.IngestCt(ctx, df.MergedCT)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go", "rel_path": "pkg/ssim/db/partial_ingestion.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 27, "end_line": 52, "text": "func removeConnectingFlights(ctx context.Context, db *pgsql.DB, cfs map[string]*parser.ConnectingFlight) error {\n\tif len(cfs) == 0 {\n\t\treturn nil\n\t}\n\n\tlog.Debug(ctx, \"Removing connecting flights\", zap.Int(\"connecting_flights\", len(cfs)))\n\n\tcfsBySchema := groupConnectingFlightsBySchema(cfs)\n\n\tfor schema, cfs := range cfsBySchema {\n\t\tids := make([]int64, len(cfs))\n\t\tfor i, cf := range cfs {\n\t\t\tids[i] = cf.ID\n\t\t}\n\n\t\tlog.Debug(ctx, \"Removing connecting flights with IDs.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids))\n\n\t\tif _, err := db.Exec(ctx, fmt.Sprintf(`DELETE FROM %s.connecting_flights WHERE id = ANY($1)`, schema), ids); err != nil {\n\t\t\tlog.Error(ctx, \"Cannot delete connecting flights.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids), zap.Error(err))\n\t\t\treturn errors.Wrapf(err, \"failed to remove connecting flights from %s.connecting_flights\", schema)\n\t\t}\n\t}\n\n\treturn nil\n}\n", "n_tokens": 249, "primary_symbol": "removeConnectingFlights", "primary_kind": "function", "primary_span": [27, 52], "def_symbols": ["removeConnectingFlights"], "symbols": ["removeConnectingFlights", "func", "ctx", "context", "Context", "pgsql", "cfs", "map", "string", "parser", "ConnectingFlight", "error", "len", "return", "nil", "log", "Debug", "Removing", "connecting", "flights", "zap", "Int", "connecting_flights", "cfsBySchema", "groupConnectingFlightsBySchema", "for", "schema", "range", "ids", "make", "int64", "with", "IDs", "String", "Int64s", "err", "Exec", "fmt", "Sprintf", "DELETE", "FROM", "WHERE", "ANY", "Error", "Cannot", "delete", "errors", "Wrapf", "failed", "remove", "from"], "doc_head": "func removeConnectingFlights(ctx context.Context, db *pgsql.DB, cfs map[string]*parser.ConnectingFlight) error {\n\tif len(cfs) == 0 {\n\t\treturn nil\n\t}\n\tlog.Debug(ctx, \"Removing connecting flights\", zap.Int(\"connecting_flights\", len(cfs)))\n\tcfsBySchema := groupConnectingFlightsBySchema(cfs)\n\tfor schema, cfs := range cfsBySchema {\n\t\tids := make([]int64, len(cfs))\n\t\tfor i, cf := range cfs {\n\t\t\tids[i] = cf.ID\n\t\t}\n\t\tlog.Debug(ctx, \"Removing connecting flights with IDs.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids))\n\t\tif _, err := db.Exec(ctx, fmt.Sprintf(`DELETE FROM %s.connecting_flights WHERE id = ANY($1)`, schema), ids); err != nil {\n\t\t\tlog.Error(ctx, \"Cannot delete connecting flights.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids), zap.Error(err))\n\t\t\treturn errors.Wrapf(err, \"failed to remove connecting flights from %s.connecting_flights\", schema)\n\t\t}\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go", "rel_path": "pkg/ssim/db/partial_ingestion.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 53, "end_line": 62, "text": "func groupConnectingFlightsBySchema(cfs map[string]*parser.ConnectingFlight) map[string][]*parser.ConnectingFlight {\n\tcfsBySchema := make(map[string][]*parser.ConnectingFlight)\n\tfor _, cf := range cfs {\n\t\tschema := \"period_\" + parser.FormatYYYYMM(cf.BeginsAt)\n\t\tcfsBySchema[schema] = append(cfsBySchema[schema], cf)\n\t}\n\n\treturn cfsBySchema\n}\n", "n_tokens": 95, "primary_symbol": "groupConnectingFlightsBySchema", "primary_kind": "function", "primary_span": [53, 62], "def_symbols": ["groupConnectingFlightsBySchema"], "symbols": ["groupConnectingFlightsBySchema", "func", "cfs", "map", "string", "parser", "ConnectingFlight", "cfsBySchema", "make", "for", "range", "schema", "period_", "FormatYYYYMM", "BeginsAt", "append", "return"], "doc_head": "func groupConnectingFlightsBySchema(cfs map[string]*parser.ConnectingFlight) map[string][]*parser.ConnectingFlight {\n\tcfsBySchema := make(map[string][]*parser.ConnectingFlight)\n\tfor _, cf := range cfs {\n\t\tschema := \"period_\" + parser.FormatYYYYMM(cf.BeginsAt)\n\t\tcfsBySchema[schema] = append(cfsBySchema[schema], cf)\n\t}\n\treturn cfsBySchema\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go", "rel_path": "pkg/ssim/db/partial_ingestion.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 63, "end_line": 88, "text": "func removeFlights(ctx context.Context, db *pgsql.DB, flights map[string]*parser.Flight) error {\n\tif len(flights) == 0 {\n\t\treturn nil\n\t}\n\n\tlog.Debug(ctx, \"Removing flights\", zap.Int(\"flights\", len(flights)))\n\n\tflightsBySchema := groupFlightsBySchema(flights)\n\n\tfor schema, flights := range flightsBySchema {\n\t\tids := make([]int64, len(flights))\n\t\tfor i, f := range flights {\n\t\t\tids[i] = f.ID\n\t\t}\n\n\t\tlog.Debug(ctx, \"Removing flights with IDs.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids))\n\n\t\tif _, err := db.Exec(ctx, fmt.Sprintf(`DELETE FROM %s.flights WHERE id = ANY($1)`, schema), ids); err != nil {\n\t\t\tlog.Error(ctx, \"Cannot delete flights.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids), zap.Error(err))\n\t\t\treturn errors.Wrapf(err, \"failed to remove flights from %s.flights\", schema)\n\t\t}\n\t}\n\n\treturn nil\n}\n", "n_tokens": 233, "primary_symbol": "removeFlights", "primary_kind": "function", "primary_span": [63, 88], "def_symbols": ["removeFlights"], "symbols": ["removeFlights", "func", "ctx", "context", "Context", "pgsql", "flights", "map", "string", "parser", "Flight", "error", "len", "return", "nil", "log", "Debug", "Removing", "zap", "Int", "flightsBySchema", "groupFlightsBySchema", "for", "schema", "range", "ids", "make", "int64", "with", "IDs", "String", "Int64s", "err", "Exec", "fmt", "Sprintf", "DELETE", "FROM", "WHERE", "ANY", "Error", "Cannot", "delete", "errors", "Wrapf", "failed", "remove", "from"], "doc_head": "func removeFlights(ctx context.Context, db *pgsql.DB, flights map[string]*parser.Flight) error {\n\tif len(flights) == 0 {\n\t\treturn nil\n\t}\n\tlog.Debug(ctx, \"Removing flights\", zap.Int(\"flights\", len(flights)))\n\tflightsBySchema := groupFlightsBySchema(flights)\n\tfor schema, flights := range flightsBySchema {\n\t\tids := make([]int64, len(flights))\n\t\tfor i, f := range flights {\n\t\t\tids[i] = f.ID\n\t\t}\n\t\tlog.Debug(ctx, \"Removing flights with IDs.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids))\n\t\tif _, err := db.Exec(ctx, fmt.Sprintf(`DELETE FROM %s.flights WHERE id = ANY($1)`, schema), ids); err != nil {\n\t\t\tlog.Error(ctx, \"Cannot delete flights.\", zap.String(\"schema\", schema), zap.Int64s(\"ids\", ids), zap.Error(err))\n\t\t\treturn errors.Wrapf(err, \"failed to remove flights from %s.flights\", schema)\n\t\t}\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/partial_ingestion.go", "rel_path": "pkg/ssim/db/partial_ingestion.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 89, "end_line": 98, "text": "func groupFlightsBySchema(flights map[string]*parser.Flight) map[string][]*parser.Flight {\n\tflightsBySchema := make(map[string][]*parser.Flight)\n\tfor _, f := range flights {\n\t\tschema := \"period_\" + parser.FormatYYYYMM(f.ScheduledDepartureAt)\n\t\tflightsBySchema[schema] = append(flightsBySchema[schema], f)\n\t}\n\n\treturn flightsBySchema\n}\n", "n_tokens": 90, "primary_symbol": "groupFlightsBySchema", "primary_kind": "function", "primary_span": [89, 98], "def_symbols": ["groupFlightsBySchema"], "symbols": ["groupFlightsBySchema", "func", "flights", "map", "string", "parser", "Flight", "flightsBySchema", "make", "for", "range", "schema", "period_", "FormatYYYYMM", "ScheduledDepartureAt", "append", "return"], "doc_head": "func groupFlightsBySchema(flights map[string]*parser.Flight) map[string][]*parser.Flight {\n\tflightsBySchema := make(map[string][]*parser.Flight)\n\tfor _, f := range flights {\n\t\tschema := \"period_\" + parser.FormatYYYYMM(f.ScheduledDepartureAt)\n\t\tflightsBySchema[schema] = append(flightsBySchema[schema], f)\n\t}\n\treturn flightsBySchema\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package db\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/jackc/pgx/v4\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n\ntype writer interface {\n\tWrite(block *parser.CarrierTrailerBlock) (*parser.CarrierTrailerBlockLink, error)\n}\n", "n_tokens": 126, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 21], "def_symbols": [], "symbols": ["package", "import", "context", "fmt", "strconv", "strings", "time", "github", "com", "jackc", "pgx", "impalastudios", "aviation", "schedules", "pkg", "pgsql", "ssim", "parser", "reader", "log", "uber", "org", "zap", "type", "writer", "interface", "Write", "block", "CarrierTrailerBlock", "CarrierTrailerBlockLink", "error"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/jackc/pgx/v4\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/parser\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/ssim/reader\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\ntype writer interface {\n\tWrite(block *parser.CarrierTrailerBlock) (*parser.CarrierTrailerBlockLink, error)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 64, "text": "// Export exports the schema of the database as a carrier trailer file format\n// Basically exports the state of the current database to run diff on it\nfunc Export(ctx context.Context, db *pgsql.DB, w writer, schema, airline string) error {\n\tparts := strings.Split(schema, \"_\")\n\tyear, _ := strconv.Atoi(parts[1])\n\tmonth, _ := strconv.Atoi(parts[2])\n\n\tstart := time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.UTC)\n\tend := time.Date(year, time.Month(month)+1, 0, 23, 59, 59, 0, time.UTC)\n\n\tct := parser.CarrierTrailerBlock{\n\t\tCarrier: &reader.Carrier{\n\t\t\tAirlineDesignator: airline,\n\t\t},\n\t\tTrailer:           &reader.Trailer{},\n\t\tFrom:              start,\n\t\tTo:                end,\n\t\tFlights:           []*parser.Flight{},\n\t\tConnectingFlights: []*parser.ConnectingFlight{},\n\t}\n\n\tflights, err := queryDirectFlights(ctx, db, schema, airline)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconnectingFlights, err := queryConnectingFlights(ctx, db, schema, airline)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tct.Flights = flights\n\tct.ConnectingFlights = connectingFlights\n\n\tlog.Debug(ctx, \"Writing statefiles\",\n\t\tzap.Int(\"flights\", len(ct.Flights)),\n\t\tzap.Int(\"connecting_flights\", len(ct.ConnectingFlights)),\n\t)\n\n\t_, err = w.Write(&ct)\n\treturn err\n}\n", "n_tokens": 348, "primary_symbol": "Export", "primary_kind": "function", "primary_span": [24, 64], "def_symbols": ["Export"], "symbols": ["Export", "exports", "the", "schema", "database", "carrier", "trailer", "file", "format", "Basically", "state", "current", "run", "diff", "func", "ctx", "context", "Context", "pgsql", "writer", "airline", "string", "error", "parts", "strings", "Split", "year", "strconv", "Atoi", "month", "start", "time", "Date", "Month", "UTC", "end", "parser", "CarrierTrailerBlock", "Carrier", "reader", "AirlineDesignator", "Trailer", "From", "Flights", "Flight", "ConnectingFlights", "ConnectingFlight", "flights", "err", "queryDirectFlights", "nil", "return", "connectingFlights", "queryConnectingFlights", "log", "Debug", "Writing", "statefiles", "zap", "Int", "len", "connecting_flights", "Write"], "doc_head": "// Export exports the schema of the database as a carrier trailer file format\n// Basically exports the state of the current database to run diff on it\nfunc Export(ctx context.Context, db *pgsql.DB, w writer, schema, airline string) error {\n\tparts := strings.Split(schema, \"_\")\n\tyear, _ := strconv.Atoi(parts[1])\n\tmonth, _ := strconv.Atoi(parts[2])\n\tstart := time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.UTC)\n\tend := time.Date(year, time.Month(month)+1, 0, 23, 59, 59, 0, time.UTC)\n\tct := parser.CarrierTrailerBlock{\n\t\tCarrier: &reader.Carrier{\n\t\t\tAirlineDesignator: airline,\n\t\t},\n\t\tTrailer:           &reader.Trailer{},\n\t\tFrom:              start,\n\t\tTo:                end,\n\t\tFlights:           []*parser.Flight{},\n\t\tConnectingFlights: []*parser.ConnectingFlight{},\n\t}\n\tflights, err := queryDirectFlights(ctx, db, schema, airline)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconnectingFlights, err := queryConnectingFlights(ctx, db, schema, airline)\n\tif err != nil {\n\t\treturn err\n\t}\n\tct.Flights = flights\n\tct.ConnectingFlights = connectingFlights\n\tlog.Debug(ctx, \"Writing statefiles\",\n\t\tzap.Int(\"flights\", len(ct.Flights)),\n\t\tzap.Int(\"connecting_flights\", len(ct.ConnectingFlights)),\n\t)\n\t_, err = w.W"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 65, "end_line": 95, "text": "type flight struct {\n\tCFI                      *int64\n\tID                       int64\n\tFlightID                 string\n\tConnectingFlightID       string\n\tItinerary                int8\n\tSequence                 int8\n\tAirline                  string\n\tFlightNumber             int\n\tDepartureAirport         string\n\tArrivalAirport           string\n\tAircraft                 string\n\tStatus                   string\n\tDepartureStatus          string\n\tArrivalStatus            string\n\tScheduledDepartureAt     time.Time\n\tScheduledDepartureTimeTz string\n\tExpectedDepartureAt      time.Time\n\tExpectedDepartureTimeTz  string\n\tActualDepartureAt        time.Time\n\tActualDepartureTimeTz    string\n\tScheduledArrivalAt       time.Time\n\tScheduledArrivalTimeTz   string\n\tExpectedArrivalAt        time.Time\n\tExpectedArrivalTimeTz    string\n\tActualArrivalAt          time.Time\n\tActualArrivalTimeTz      string\n\tCodeshareAirlines        []string\n\tCodeshares               [][]string\n}\n", "n_tokens": 221, "primary_symbol": "", "primary_kind": "", "primary_span": [65, 95], "def_symbols": [], "symbols": ["type", "flight", "struct", "CFI", "int64", "FlightID", "string", "ConnectingFlightID", "Itinerary", "int8", "Sequence", "Airline", "FlightNumber", "int", "DepartureAirport", "ArrivalAirport", "Aircraft", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureAt", "time", "Time", "ScheduledDepartureTimeTz", "ExpectedDepartureAt", "ExpectedDepartureTimeTz", "ActualDepartureAt", "ActualDepartureTimeTz", "ScheduledArrivalAt", "ScheduledArrivalTimeTz", "ExpectedArrivalAt", "ExpectedArrivalTimeTz", "ActualArrivalAt", "ActualArrivalTimeTz", "CodeshareAirlines", "Codeshares"], "doc_head": "type flight struct {\n\tCFI                      *int64\n\tID                       int64\n\tFlightID                 string\n\tConnectingFlightID       string\n\tItinerary                int8\n\tSequence                 int8\n\tAirline                  string\n\tFlightNumber             int\n\tDepartureAirport         string\n\tArrivalAirport           string\n\tAircraft                 string\n\tStatus                   string\n\tDepartureStatus          string\n\tArrivalStatus            string\n\tScheduledDepartureAt     time.Time\n\tScheduledDepartureTimeTz string\n\tExpectedDepartureAt      time.Time\n\tExpectedDepartureTimeTz  string\n\tActualDepartureAt        time.Time\n\tActualDepartureTimeTz    string\n\tScheduledArrivalAt       time.Time\n\tScheduledArrivalTimeTz   string\n\tExpectedArrivalAt        time.Time\n\tExpectedArrivalTimeTz    string\n\tActualArrivalAt          time.Time\n\tActualArrivalTimeTz      string\n\tCodeshareAirlines        []string\n\tCodeshares               [][]string\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 96, "end_line": 99, "text": "func fromDateAndTimeWithTZ(date time.Time, timeTZ string) (time.Time, error) {\n\treturn time.Parse(\"2006-01-02 1504-0700\", date.Format(\"2006-01-02\")+\" \"+timeTZ)\n}\n", "n_tokens": 54, "primary_symbol": "fromDateAndTimeWithTZ", "primary_kind": "function", "primary_span": [96, 99], "def_symbols": ["fromDateAndTimeWithTZ"], "symbols": ["fromDateAndTimeWithTZ", "func", "date", "time", "Time", "timeTZ", "string", "error", "return", "Parse", "Format"], "doc_head": "func fromDateAndTimeWithTZ(date time.Time, timeTZ string) (time.Time, error) {\n\treturn time.Parse(\"2006-01-02 1504-0700\", date.Format(\"2006-01-02\")+\" \"+timeTZ)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 100, "end_line": 156, "text": "func queryDirectFlights(ctx context.Context, db *pgsql.DB, schema, airline string) ([]*parser.Flight, error) {\n\tq := fmt.Sprintf(`\n\tSELECT\n\t\tflights.connecting_flight_id as cfi,\n\t\tflights.id,\n\t\tflights.flight_id,\n\t\t'' as connecting_flight_id,\n\t\tflights.airline,\n\t\tflights.flight_number,\n\t\tflights.itinerary,\n\t\tflights.sequence,\n\t\tflights.departure_airport,\n\t\tflights.arrival_airport,\n\t\tflights.aircraft,\n\t\tflights.status,\n\t\tflights.departure_status,\n\t\tflights.arrival_status,\n\t\tflights.scheduled_departure_at,\n\t\tflights.scheduled_departure_time_tz,\n\t\tflights.expected_departure_at,\n\t\tflights.expected_departure_time_tz,\n\t\tflights.actual_departure_at,\n\t\tflights.actual_departure_time_tz,\n\t\tflights.scheduled_arrival_at,\n\t\tflights.scheduled_arrival_time_tz,\n\t\tflights.expected_arrival_at,\n\t\tflights.expected_arrival_time_tz,\n\t\tflights.actual_arrival_at,\n\t\tflights.actual_arrival_time_tz,\n\t\tflights.codeshares\n\tFROM %[1]s.flights\n\tWHERE flights.airline=$1`, schema)\n\trows, err := db.Query(ctx, q, airline)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tlog.Debug(ctx, \"Querying direct flights\", zap.String(\"query\", q), zap.String(\"airline\", airline))\n\n\tflights := make([]*parser.Flight, 0)\n\tfor rows.Next() {\n\t\tf, err := scan(rows)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tpf, err := toDomain(f)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tflights = append(flights, pf)\n\t}\n\n\treturn flights, nil\n}\n", "n_tokens": 404, "primary_symbol": "queryDirectFlights", "primary_kind": "function", "primary_span": [100, 156], "def_symbols": ["queryDirectFlights"], "symbols": ["queryDirectFlights", "func", "ctx", "context", "Context", "pgsql", "schema", "airline", "string", "parser", "Flight", "error", "fmt", "Sprintf", "SELECT", "flights", "connecting_flight_id", "cfi", "flight_id", "flight_number", "itinerary", "sequence", "departure_airport", "arrival_airport", "aircraft", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "codeshares", "FROM", "WHERE", "rows", "err", "Query", "nil", "return", "defer", "Close", "log", "Debug", "Querying", "direct", "zap", "String", "query", "make", "for", "Next", "scan", "toDomain", "append"], "doc_head": "func queryDirectFlights(ctx context.Context, db *pgsql.DB, schema, airline string) ([]*parser.Flight, error) {\n\tq := fmt.Sprintf(`\n\tSELECT\n\t\tflights.connecting_flight_id as cfi,\n\t\tflights.id,\n\t\tflights.flight_id,\n\t\t'' as connecting_flight_id,\n\t\tflights.airline,\n\t\tflights.flight_number,\n\t\tflights.itinerary,\n\t\tflights.sequence,\n\t\tflights.departure_airport,\n\t\tflights.arrival_airport,\n\t\tflights.aircraft,\n\t\tflights.status,\n\t\tflights.departure_status,\n\t\tflights.arrival_status,\n\t\tflights.scheduled_departure_at,\n\t\tflights.scheduled_departure_time_tz,\n\t\tflights.expected_departure_at,\n\t\tflights.expected_departure_time_tz,\n\t\tflights.actual_departure_at,\n\t\tflights.actual_departure_time_tz,\n\t\tflights.scheduled_arrival_at,\n\t\tflights.scheduled_arrival_time_tz,\n\t\tflights.expected_arrival_at,\n\t\tflights.expected_arrival_time_tz,\n\t\tflights.actual_arrival_at,\n\t\tflights.actual_arrival_time_tz,\n\t\tflights.codeshares\n\tFROM %[1]s.flights\n\tWHERE flights.airline=$1`, schema)\n\trows, err := db.Query(ctx, q, airline)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tlog.Debug(ctx, \"Querying direct flights\", zap.String(\"query\", q), zap.String(\"airline\", airline))\n\tflights := make([]*parser.Flight, 0)\n\tf"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 157, "end_line": 190, "text": "func scan(rows pgx.Rows) (*flight, error) {\n\tvar f flight\n\terr := rows.Scan(\n\t\t&f.CFI,\n\t\t&f.ID,\n\t\t&f.FlightID,\n\t\t&f.ConnectingFlightID,\n\t\t&f.Airline,\n\t\t&f.FlightNumber,\n\t\t&f.Itinerary,\n\t\t&f.Sequence,\n\t\t&f.DepartureAirport,\n\t\t&f.ArrivalAirport,\n\t\t&f.Aircraft,\n\t\t&f.Status,\n\t\t&f.DepartureStatus,\n\t\t&f.ArrivalStatus,\n\t\t&f.ScheduledDepartureAt,\n\t\t&f.ScheduledDepartureTimeTz,\n\t\t&f.ExpectedDepartureAt,\n\t\t&f.ExpectedDepartureTimeTz,\n\t\t&f.ActualDepartureAt,\n\t\t&f.ActualDepartureTimeTz,\n\t\t&f.ScheduledArrivalAt,\n\t\t&f.ScheduledArrivalTimeTz,\n\t\t&f.ExpectedArrivalAt,\n\t\t&f.ExpectedArrivalTimeTz,\n\t\t&f.ActualArrivalAt,\n\t\t&f.ActualArrivalTimeTz,\n\t\t&f.Codeshares,\n\t)\n\treturn &f, err\n}\n", "n_tokens": 280, "primary_symbol": "scan", "primary_kind": "function", "primary_span": [157, 190], "def_symbols": ["scan"], "symbols": ["scan", "func", "rows", "pgx", "Rows", "flight", "error", "var", "err", "Scan", "CFI", "FlightID", "ConnectingFlightID", "Airline", "FlightNumber", "Itinerary", "Sequence", "DepartureAirport", "ArrivalAirport", "Aircraft", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureAt", "ScheduledDepartureTimeTz", "ExpectedDepartureAt", "ExpectedDepartureTimeTz", "ActualDepartureAt", "ActualDepartureTimeTz", "ScheduledArrivalAt", "ScheduledArrivalTimeTz", "ExpectedArrivalAt", "ExpectedArrivalTimeTz", "ActualArrivalAt", "ActualArrivalTimeTz", "Codeshares", "return"], "doc_head": "func scan(rows pgx.Rows) (*flight, error) {\n\tvar f flight\n\terr := rows.Scan(\n\t\t&f.CFI,\n\t\t&f.ID,\n\t\t&f.FlightID,\n\t\t&f.ConnectingFlightID,\n\t\t&f.Airline,\n\t\t&f.FlightNumber,\n\t\t&f.Itinerary,\n\t\t&f.Sequence,\n\t\t&f.DepartureAirport,\n\t\t&f.ArrivalAirport,\n\t\t&f.Aircraft,\n\t\t&f.Status,\n\t\t&f.DepartureStatus,\n\t\t&f.ArrivalStatus,\n\t\t&f.ScheduledDepartureAt,\n\t\t&f.ScheduledDepartureTimeTz,\n\t\t&f.ExpectedDepartureAt,\n\t\t&f.ExpectedDepartureTimeTz,\n\t\t&f.ActualDepartureAt,\n\t\t&f.ActualDepartureTimeTz,\n\t\t&f.ScheduledArrivalAt,\n\t\t&f.ScheduledArrivalTimeTz,\n\t\t&f.ExpectedArrivalAt,\n\t\t&f.ExpectedArrivalTimeTz,\n\t\t&f.ActualArrivalAt,\n\t\t&f.ActualArrivalTimeTz,\n\t\t&f.Codeshares,\n\t)\n\treturn &f, err\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 191, "end_line": 197, "text": "func safePtr[T any](i *T) T {\n\tif i == nil {\n\t\treturn *new(T)\n\t}\n\treturn *i\n}\n", "n_tokens": 30, "primary_symbol": "", "primary_kind": "", "primary_span": [191, 197], "def_symbols": [], "symbols": ["func", "safePtr", "any", "nil", "return", "new"], "doc_head": "func safePtr[T any](i *T) T {\n\tif i == nil {\n\t\treturn *new(T)\n\t}\n\treturn *i\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 198, "end_line": 248, "text": "func toDomain(f *flight) (*parser.Flight, error) {\n\tvar err error\n\n\tflight := &parser.Flight{\n\t\tID:                 f.ID,\n\t\tFlightID:           f.FlightID,\n\t\tConnectingFlightID: safePtr(f.CFI),\n\t\tAirline:            f.Airline,\n\t\tFlightNumber:       f.FlightNumber,\n\t\tItinerary:          f.Itinerary,\n\t\tSequence:           f.Sequence,\n\t\tDepartureAirport:   f.DepartureAirport,\n\t\tArrivalAirport:     f.ArrivalAirport,\n\t\tAircraft:           f.Aircraft,\n\t\tStatus:             f.Status,\n\t\tDepartureStatus:    f.DepartureStatus,\n\t\tArrivalStatus:      f.ArrivalStatus,\n\t}\n\n\tif flight.ScheduledDepartureAt, err = fromDateAndTimeWithTZ(f.ScheduledDepartureAt, f.ScheduledDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ExpectedDepartureAt, err = fromDateAndTimeWithTZ(f.ExpectedDepartureAt, f.ExpectedDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ActualDepartureAt, err = fromDateAndTimeWithTZ(f.ActualDepartureAt, f.ActualDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif flight.ScheduledArrivalAt, err = fromDateAndTimeWithTZ(f.ScheduledArrivalAt, f.ScheduledArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ExpectedArrivalAt, err = fromDateAndTimeWithTZ(f.ExpectedArrivalAt, f.ExpectedArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ActualArrivalAt, err = fromDateAndTimeWithTZ(f.ActualArrivalAt, f.ActualArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\n\tflight.Codeshares = make([]*parser.Codeshare, 0, len(f.Codeshares))\n\tfor i := range f.Codeshares {\n\t\tfn, _ := strconv.Atoi(f.Codeshares[i][1])\n\t\tflight.Codeshares = append(flight.Codeshares, &parser.Codeshare{\n\t\t\tAirline:      f.Codeshares[i][0],\n\t\t\tFlightNumber: fn,\n\t\t})\n\t}\n\n\treturn flight, nil\n}\n", "n_tokens": 529, "primary_symbol": "toDomain", "primary_kind": "function", "primary_span": [198, 248], "def_symbols": ["toDomain"], "symbols": ["toDomain", "func", "flight", "parser", "Flight", "error", "var", "err", "FlightID", "ConnectingFlightID", "safePtr", "CFI", "Airline", "FlightNumber", "Itinerary", "Sequence", "DepartureAirport", "ArrivalAirport", "Aircraft", "Status", "DepartureStatus", "ArrivalStatus", "ScheduledDepartureAt", "fromDateAndTimeWithTZ", "ScheduledDepartureTimeTz", "nil", "return", "ExpectedDepartureAt", "ExpectedDepartureTimeTz", "ActualDepartureAt", "ActualDepartureTimeTz", "ScheduledArrivalAt", "ScheduledArrivalTimeTz", "ExpectedArrivalAt", "ExpectedArrivalTimeTz", "ActualArrivalAt", "ActualArrivalTimeTz", "Codeshares", "make", "Codeshare", "len", "for", "range", "strconv", "Atoi", "append"], "doc_head": "func toDomain(f *flight) (*parser.Flight, error) {\n\tvar err error\n\tflight := &parser.Flight{\n\t\tID:                 f.ID,\n\t\tFlightID:           f.FlightID,\n\t\tConnectingFlightID: safePtr(f.CFI),\n\t\tAirline:            f.Airline,\n\t\tFlightNumber:       f.FlightNumber,\n\t\tItinerary:          f.Itinerary,\n\t\tSequence:           f.Sequence,\n\t\tDepartureAirport:   f.DepartureAirport,\n\t\tArrivalAirport:     f.ArrivalAirport,\n\t\tAircraft:           f.Aircraft,\n\t\tStatus:             f.Status,\n\t\tDepartureStatus:    f.DepartureStatus,\n\t\tArrivalStatus:      f.ArrivalStatus,\n\t}\n\tif flight.ScheduledDepartureAt, err = fromDateAndTimeWithTZ(f.ScheduledDepartureAt, f.ScheduledDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ExpectedDepartureAt, err = fromDateAndTimeWithTZ(f.ExpectedDepartureAt, f.ExpectedDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ActualDepartureAt, err = fromDateAndTimeWithTZ(f.ActualDepartureAt, f.ActualDepartureTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ScheduledArrivalAt, err = fromDateAndTimeWithTZ(f.ScheduledArrivalAt, f.ScheduledArrivalTimeTz); err != nil {\n\t\treturn nil, err\n\t}\n\tif flight.ExpectedArrivalAt, err = fromDateAndTimeWithTZ(f.Ex"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/export.go", "rel_path": "pkg/ssim/db/export.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 249, "end_line": 331, "text": "func queryConnectingFlights(ctx context.Context, db *pgsql.DB, schema, airline string) ([]*parser.ConnectingFlight, error) {\n\tq := fmt.Sprintf(`\n\tSELECT\n\t\tf.connecting_flight_id as cfi,\n\t\tf.id,\n\t\tf.flight_id,\n\t\tcf.connecting_flight_id,\n\t\tf.airline,\n\t\tf.flight_number,\n\t\tf.itinerary,\n\t\tf.sequence,\n\t\tf.departure_airport,\n\t\tf.arrival_airport,\n\t\tf.aircraft,\n\t\tf.status,\n\t\tf.departure_status,\n\t\tf.arrival_status,\n\t\tf.scheduled_departure_at,\n\t\tf.scheduled_departure_time_tz,\n\t\tf.expected_departure_at,\n\t\tf.expected_departure_time_tz,\n\t\tf.actual_departure_at,\n\t\tf.actual_departure_time_tz,\n\t\tf.scheduled_arrival_at,\n\t\tf.scheduled_arrival_time_tz,\n\t\tf.expected_arrival_at,\n\t\tf.expected_arrival_time_tz,\n\t\tf.actual_arrival_at,\n\t\tf.actual_arrival_time_tz,\n\t\tf.codeshares\n\tFROM %[1]s.connecting_flights cf INNER JOIN %[1]s.flights f ON f.connecting_flight_id = cf.id\n\tWHERE f.airline=$1`, schema)\n\n\trows, err := db.Query(ctx, q, airline)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tflights := make([]*flight, 0)\n\tfor rows.Next() {\n\t\tf, err := scan(rows)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tflights = append(flights, f)\n\t}\n\n\tcf := make(map[int64]*parser.ConnectingFlight)\n\tfor _, f := range flights {\n\t\tcfi := *f.CFI\n\n\t\tpf, err := toDomain(f)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif _, ok := cf[cfi]; !ok {\n\t\t\tcf[cfi] = &parser.ConnectingFlight{\n\t\t\t\tID:                 cfi,\n\t\t\t\tConnectingFlightID: f.ConnectingFlightID,\n\t\t\t\tArrivalAirport:     \"\",\n\t\t\t\tBeginsAt:           pf.ScheduledDepartureAt,\n\t\t\t\tEndsAt:             time.Time{},\n\t\t\t\tFlights:            make([]*parser.Flight, 0),\n\t\t\t}\n\t\t}\n\n\t\tcf[cfi].Flights = append(cf[cfi].Flights, pf)\n\t}\n\n\tconnectingFlights := make([]*parser.ConnectingFlight, 0, len(cf))\n\tfor _, c := range cf {\n\t\tc.ArrivalAirport = c.Flights[len(c.Flights)-1].ArrivalAirport\n\t\tc.EndsAt = c.Flights[len(c.Flights)-1].ScheduledArrivalAt\n\n\t\tconnectingFlights = append(connectingFlights, c)\n\t}\n\n\treturn connectingFlights, nil\n}\n", "n_tokens": 604, "primary_symbol": "queryConnectingFlights", "primary_kind": "function", "primary_span": [249, 331], "def_symbols": ["queryConnectingFlights"], "symbols": ["queryConnectingFlights", "func", "ctx", "context", "Context", "pgsql", "schema", "airline", "string", "parser", "ConnectingFlight", "error", "fmt", "Sprintf", "SELECT", "connecting_flight_id", "cfi", "flight_id", "flight_number", "itinerary", "sequence", "departure_airport", "arrival_airport", "aircraft", "status", "departure_status", "arrival_status", "scheduled_departure_at", "scheduled_departure_time_tz", "expected_departure_at", "expected_departure_time_tz", "actual_departure_at", "actual_departure_time_tz", "scheduled_arrival_at", "scheduled_arrival_time_tz", "expected_arrival_at", "expected_arrival_time_tz", "actual_arrival_at", "actual_arrival_time_tz", "codeshares", "FROM", "connecting_flights", "INNER", "JOIN", "flights", "WHERE", "rows", "err", "Query", "nil", "return", "defer", "Close", "make", "flight", "for", "Next", "scan", "append", "map", "int64", "range", "CFI", "toDomain", "ConnectingFlightID", "ArrivalAirport", "BeginsAt", "ScheduledDepartureAt", "EndsAt", "time", "Time", "Flights", "Flight", "connectingFlights", "len", "ScheduledArrivalAt"], "doc_head": "func queryConnectingFlights(ctx context.Context, db *pgsql.DB, schema, airline string) ([]*parser.ConnectingFlight, error) {\n\tq := fmt.Sprintf(`\n\tSELECT\n\t\tf.connecting_flight_id as cfi,\n\t\tf.id,\n\t\tf.flight_id,\n\t\tcf.connecting_flight_id,\n\t\tf.airline,\n\t\tf.flight_number,\n\t\tf.itinerary,\n\t\tf.sequence,\n\t\tf.departure_airport,\n\t\tf.arrival_airport,\n\t\tf.aircraft,\n\t\tf.status,\n\t\tf.departure_status,\n\t\tf.arrival_status,\n\t\tf.scheduled_departure_at,\n\t\tf.scheduled_departure_time_tz,\n\t\tf.expected_departure_at,\n\t\tf.expected_departure_time_tz,\n\t\tf.actual_departure_at,\n\t\tf.actual_departure_time_tz,\n\t\tf.scheduled_arrival_at,\n\t\tf.scheduled_arrival_time_tz,\n\t\tf.expected_arrival_at,\n\t\tf.expected_arrival_time_tz,\n\t\tf.actual_arrival_at,\n\t\tf.actual_arrival_time_tz,\n\t\tf.codeshares\n\tFROM %[1]s.connecting_flights cf INNER JOIN %[1]s.flights f ON f.connecting_flight_id = cf.id\n\tWHERE f.airline=$1`, schema)\n\trows, err := db.Query(ctx, q, airline)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tflights := make([]*flight, 0)\n\tfor rows.Next() {\n\t\tf, err := scan(rows)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tflights = append(flights, f)\n\t}\n\tcf := make(map[int64]*parser.ConnectingFlight)\n\tfor _, f := range "}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go", "rel_path": "pkg/ssim/db/mapper.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package db\n\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/doug-martin/goqu/v9\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n\n// oagAirlinesMapper contains the OAG airlines mappings\ntype oagAirlinesMapper struct {\n\tm *concurrent.Map[string]\n}\n\n// Get returns the airline ID for the given OAG airline ID\n// if not found, returns the original OAG airline ID\nfunc (m *oagAirlinesMapper) Get(ctx context.Context, oagID string) string {\n\tif id, ok := m.m.Get(oagID); ok {\n\t\treturn id\n\t}\n\n\treturn oagID\n}\n", "n_tokens": 183, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [21, 28], "def_symbols": ["Get"], "symbols": ["Get", "package", "import", "context", "impalastudios", "com", "log", "uber", "org", "zap", "github", "cockroachdb", "errors", "doug", "martin", "goqu", "aviation", "schedules", "pkg", "concurrent", "pgsql", "oagAirlinesMapper", "contains", "the", "OAG", "airlines", "mappings", "type", "struct", "Map", "string", "returns", "airline", "for", "given", "not", "found", "original", "func", "ctx", "Context", "oagID", "return"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/doug-martin/goqu/v9\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n// oagAirlinesMapper contains the OAG airlines mappings\ntype oagAirlinesMapper struct {\n\tm *concurrent.Map[string]\n}\n// Get returns the airline ID for the given OAG airline ID\n// if not found, returns the original OAG airline ID\nfunc (m *oagAirlinesMapper) Get(ctx context.Context, oagID string) string {\n\tif id, ok := m.m.Get(oagID); ok {\n\t\treturn id\n\t}\n\treturn oagID\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go", "rel_path": "pkg/ssim/db/mapper.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 29, "end_line": 51, "text": "// LoadOagAirlinesMapper fills the OAG airlines mapper with data from the database\nfunc LoadOagAirlinesMapper(ctx context.Context, db *pgsql.DB) (*oagAirlinesMapper, error) {\n\tm := concurrent.NewMap[string]()\n\n\tmappings, err := fetchOagMappings(ctx, db, \"SELECT oag_airline_id, airline_id FROM oag_airline_mappings\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, mapping := range mappings {\n\t\tm.Set(mapping.OagID, mapping.ID)\n\t}\n\n\tlog.Debug(ctx, \"Airlines mappings loaded.\", zap.Int(\"count\", m.Size()))\n\n\treturn &oagAirlinesMapper{m: m}, nil\n}\n\ntype OagMapping struct {\n\tOagID string\n\tID    string\n}\n", "n_tokens": 165, "primary_symbol": "LoadOagAirlinesMapper", "primary_kind": "function", "primary_span": [30, 51], "def_symbols": ["LoadOagAirlinesMapper"], "symbols": ["LoadOagAirlinesMapper", "fills", "the", "OAG", "airlines", "mapper", "with", "data", "from", "database", "func", "ctx", "context", "Context", "pgsql", "oagAirlinesMapper", "error", "concurrent", "NewMap", "string", "mappings", "err", "fetchOagMappings", "SELECT", "oag_airline_id", "airline_id", "FROM", "oag_airline_mappings", "nil", "return", "for", "mapping", "range", "Set", "OagID", "log", "Debug", "Airlines", "loaded", "zap", "Int", "count", "Size", "type", "OagMapping", "struct"], "doc_head": "// LoadOagAirlinesMapper fills the OAG airlines mapper with data from the database\nfunc LoadOagAirlinesMapper(ctx context.Context, db *pgsql.DB) (*oagAirlinesMapper, error) {\n\tm := concurrent.NewMap[string]()\n\tmappings, err := fetchOagMappings(ctx, db, \"SELECT oag_airline_id, airline_id FROM oag_airline_mappings\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, mapping := range mappings {\n\t\tm.Set(mapping.OagID, mapping.ID)\n\t}\n\tlog.Debug(ctx, \"Airlines mappings loaded.\", zap.Int(\"count\", m.Size()))\n\treturn &oagAirlinesMapper{m: m}, nil\n}\ntype OagMapping struct {\n\tOagID string\n\tID    string\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go", "rel_path": "pkg/ssim/db/mapper.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 52, "end_line": 72, "text": "func fetchOagMappings(ctx context.Context, db *pgsql.DB, q string) ([]OagMapping, error) {\n\tmappings := make([]OagMapping, 0)\n\n\trows, err := db.Query(ctx, q)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to query oag_airport_mappings\")\n\t}\n\n\tfor rows.Next() {\n\t\tvar mapping OagMapping\n\n\t\tif err := rows.Scan(&mapping.OagID, &mapping.ID); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"db: failed to scan oag_airport_mappings\")\n\t\t}\n\n\t\tmappings = append(mappings, mapping)\n\t}\n\n\treturn mappings, nil\n}\n", "n_tokens": 147, "primary_symbol": "fetchOagMappings", "primary_kind": "function", "primary_span": [52, 72], "def_symbols": ["fetchOagMappings"], "symbols": ["fetchOagMappings", "func", "ctx", "context", "Context", "pgsql", "string", "OagMapping", "error", "mappings", "make", "rows", "err", "Query", "nil", "return", "errors", "Wrap", "failed", "query", "oag_airport_mappings", "for", "Next", "var", "mapping", "Scan", "OagID", "scan", "append"], "doc_head": "func fetchOagMappings(ctx context.Context, db *pgsql.DB, q string) ([]OagMapping, error) {\n\tmappings := make([]OagMapping, 0)\n\trows, err := db.Query(ctx, q)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to query oag_airport_mappings\")\n\t}\n\tfor rows.Next() {\n\t\tvar mapping OagMapping\n\t\tif err := rows.Scan(&mapping.OagID, &mapping.ID); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"db: failed to scan oag_airport_mappings\")\n\t\t}\n\t\tmappings = append(mappings, mapping)\n\t}\n\treturn mappings, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/mapper.go", "rel_path": "pkg/ssim/db/mapper.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 73, "end_line": 95, "text": "func UpsertAirlineMappings(ctx context.Context, db *pgsql.DB, mappings []OagMapping) error {\n\trecords := make([]goqu.Record, 0)\n\tfor _, mapping := range mappings {\n\t\trecords = append(records, goqu.Record{\n\t\t\t\"oag_airline_id\": mapping.OagID,\n\t\t\t\"airline_id\":     mapping.ID,\n\t\t})\n\t}\n\n\tq, args, err := goqu.Insert(\"oag_airline_mappings\").\n\t\tRows(records).\n\t\tOnConflict(goqu.DoUpdate(\"oag_airline_id\", goqu.Record{\n\t\t\t\"airline_id\": goqu.L(\"EXCLUDED.airline_id\"),\n\t\t})).\n\t\tToSQL()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"repo: failed to upsert devices\")\n\t}\n\n\t_, err = db.Exec(ctx, q, args...)\n\treturn errors.Wrap(err, \"repo: failed to upsert devices\")\n}\n", "n_tokens": 197, "primary_symbol": "UpsertAirlineMappings", "primary_kind": "function", "primary_span": [73, 95], "def_symbols": ["UpsertAirlineMappings"], "symbols": ["UpsertAirlineMappings", "func", "ctx", "context", "Context", "pgsql", "mappings", "OagMapping", "error", "records", "make", "goqu", "Record", "for", "mapping", "range", "append", "oag_airline_id", "OagID", "airline_id", "args", "err", "Insert", "oag_airline_mappings", "Rows", "OnConflict", "DoUpdate", "EXCLUDED", "ToSQL", "nil", "return", "errors", "Wrap", "repo", "failed", "upsert", "devices", "Exec"], "doc_head": "func UpsertAirlineMappings(ctx context.Context, db *pgsql.DB, mappings []OagMapping) error {\n\trecords := make([]goqu.Record, 0)\n\tfor _, mapping := range mappings {\n\t\trecords = append(records, goqu.Record{\n\t\t\t\"oag_airline_id\": mapping.OagID,\n\t\t\t\"airline_id\":     mapping.ID,\n\t\t})\n\t}\n\tq, args, err := goqu.Insert(\"oag_airline_mappings\").\n\t\tRows(records).\n\t\tOnConflict(goqu.DoUpdate(\"oag_airline_id\", goqu.Record{\n\t\t\t\"airline_id\": goqu.L(\"EXCLUDED.airline_id\"),\n\t\t})).\n\t\tToSQL()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"repo: failed to upsert devices\")\n\t}\n\t_, err = db.Exec(ctx, q, args...)\n\treturn errors.Wrap(err, \"repo: failed to upsert devices\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/schema.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/schema.go", "rel_path": "pkg/ssim/db/schema.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package db\n\nimport (\n\t\"context\"\n\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n)\n\ntype schema struct {\n\tseq *seq\n\n\tcodeshareMapper *concurrent.Map[int64]\n}\n", "n_tokens": 51, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 15], "def_symbols": [], "symbols": ["package", "import", "context", "github", "com", "pkg", "errors", "impalastudios", "aviation", "schedules", "concurrent", "type", "schema", "struct", "seq", "codeshareMapper", "Map", "int64"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n)\ntype schema struct {\n\tseq *seq\n\tcodeshareMapper *concurrent.Map[int64]\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/schema.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/schema.go", "rel_path": "pkg/ssim/db/schema.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 16, "end_line": 37, "text": "func (i *Ingester) loadSchema(ctx context.Context, schemaName string) (*schema, error) {\n\tvar exists bool\n\tq := \"SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = $1)\"\n\tif err := i.db.QueryRow(ctx, q, schemaName).Scan(&exists); err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to check if schema exists\")\n\t}\n\n\tif !exists {\n\t\treturn nil, errors.New(\"db: schema does not exist\")\n\t}\n\n\tseq, err := findLastSeq(ctx, schemaName, i.db)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to find last seq\")\n\t}\n\n\treturn &schema{\n\t\tseq:             seq,\n\t\tcodeshareMapper: concurrent.NewMap[int64](),\n\t}, nil\n}\n", "n_tokens": 177, "primary_symbol": "loadSchema", "primary_kind": "function", "primary_span": [16, 37], "def_symbols": ["loadSchema"], "symbols": ["loadSchema", "func", "Ingester", "ctx", "context", "Context", "schemaName", "string", "schema", "error", "var", "exists", "bool", "SELECT", "EXISTS", "FROM", "information_schema", "schemata", "WHERE", "schema_name", "err", "QueryRow", "Scan", "nil", "return", "errors", "Wrap", "failed", "check", "New", "does", "not", "exist", "seq", "findLastSeq", "find", "last", "codeshareMapper", "concurrent", "NewMap", "int64"], "doc_head": "func (i *Ingester) loadSchema(ctx context.Context, schemaName string) (*schema, error) {\n\tvar exists bool\n\tq := \"SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = $1)\"\n\tif err := i.db.QueryRow(ctx, q, schemaName).Scan(&exists); err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to check if schema exists\")\n\t}\n\tif !exists {\n\t\treturn nil, errors.New(\"db: schema does not exist\")\n\t}\n\tseq, err := findLastSeq(ctx, schemaName, i.db)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to find last seq\")\n\t}\n\treturn &schema{\n\t\tseq:             seq,\n\t\tcodeshareMapper: concurrent.NewMap[int64](),\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/schema.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/schema.go", "rel_path": "pkg/ssim/db/schema.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 38, "end_line": 51, "text": "func (i *Ingester) createSchema(ctx context.Context, schemaName string) (*schema, error) {\n\tif _, err := i.db.Exec(ctx, \"CREATE SCHEMA IF NOT EXISTS \"+schemaName); err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to create schema\")\n\t}\n\n\treturn &schema{\n\t\tseq: &seq{\n\t\t\tConnectingFlightID: concurrent.NewAtomicInt64(1),\n\t\t\tFlightID:           concurrent.NewAtomicInt64(1),\n\t\t},\n\t\tcodeshareMapper: concurrent.NewMap[int64](),\n\t}, nil\n}\n", "n_tokens": 124, "primary_symbol": "createSchema", "primary_kind": "function", "primary_span": [38, 51], "def_symbols": ["createSchema"], "symbols": ["createSchema", "func", "Ingester", "ctx", "context", "Context", "schemaName", "string", "schema", "error", "err", "Exec", "CREATE", "SCHEMA", "NOT", "EXISTS", "nil", "return", "errors", "Wrap", "failed", "create", "seq", "ConnectingFlightID", "concurrent", "NewAtomicInt64", "FlightID", "codeshareMapper", "NewMap", "int64"], "doc_head": "func (i *Ingester) createSchema(ctx context.Context, schemaName string) (*schema, error) {\n\tif _, err := i.db.Exec(ctx, \"CREATE SCHEMA IF NOT EXISTS \"+schemaName); err != nil {\n\t\treturn nil, errors.Wrap(err, \"db: failed to create schema\")\n\t}\n\treturn &schema{\n\t\tseq: &seq{\n\t\t\tConnectingFlightID: concurrent.NewAtomicInt64(1),\n\t\t\tFlightID:           concurrent.NewAtomicInt64(1),\n\t\t},\n\t\tcodeshareMapper: concurrent.NewMap[int64](),\n\t}, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/seq.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/seq.go", "rel_path": "pkg/ssim/db/seq.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 17, "text": "package db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\n\ntype seq struct {\n\tConnectingFlightID *concurrent.AtomicInt64\n\tFlightID           *concurrent.AtomicInt64\n}\n", "n_tokens": 85, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 17], "def_symbols": [], "symbols": ["package", "import", "context", "database", "sql", "fmt", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "schedules", "pkg", "concurrent", "pgsql", "type", "seq", "struct", "ConnectingFlightID", "AtomicInt64", "FlightID"], "doc_head": "package db\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/concurrent\"\n\t\"go.impalastudios.com/aviation/schedules/pkg/pgsql\"\n)\ntype seq struct {\n\tConnectingFlightID *concurrent.AtomicInt64\n\tFlightID           *concurrent.AtomicInt64\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/seq.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/ssim/db/seq.go", "rel_path": "pkg/ssim/db/seq.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 18, "end_line": 40, "text": "// findLastSeq finds the last sequences in the database\nfunc findLastSeq(ctx context.Context, schema string, db *pgsql.DB) (*seq, error) {\n\tvar (\n\t\tnullableConnectingFlightID sql.NullInt64\n\t\tnullableFlightID           sql.NullInt64\n\t)\n\n\tq := fmt.Sprintf(`SELECT \n (SELECT MAX(id) FROM %[1]s.flights) AS flight_id,\n (SELECT MAX(id) FROM %[1]s.connecting_flights) AS connecting_flight_id`,\n\t\tschema,\n\t)\n\terr := db.QueryRow(ctx, q).Scan(\n\t\t&nullableFlightID,\n\t\t&nullableConnectingFlightID,\n\t)\n\n\treturn &seq{\n\t\tConnectingFlightID: concurrent.NewAtomicInt64(nullableConnectingFlightID.Int64 + 1),\n\t\tFlightID:           concurrent.NewAtomicInt64(nullableFlightID.Int64 + 1),\n\t}, errors.Wrap(err, \"db: failed to scan last seq\")\n}\n", "n_tokens": 199, "primary_symbol": "findLastSeq", "primary_kind": "function", "primary_span": [19, 40], "def_symbols": ["findLastSeq"], "symbols": ["findLastSeq", "finds", "the", "last", "sequences", "database", "func", "ctx", "context", "Context", "schema", "string", "pgsql", "seq", "error", "var", "nullableConnectingFlightID", "sql", "NullInt64", "nullableFlightID", "fmt", "Sprintf", "SELECT", "MAX", "FROM", "flights", "flight_id", "connecting_flights", "connecting_flight_id", "err", "QueryRow", "Scan", "return", "ConnectingFlightID", "concurrent", "NewAtomicInt64", "Int64", "FlightID", "errors", "Wrap", "failed", "scan"], "doc_head": "// findLastSeq finds the last sequences in the database\nfunc findLastSeq(ctx context.Context, schema string, db *pgsql.DB) (*seq, error) {\n\tvar (\n\t\tnullableConnectingFlightID sql.NullInt64\n\t\tnullableFlightID           sql.NullInt64\n\t)\n\tq := fmt.Sprintf(`SELECT \n (SELECT MAX(id) FROM %[1]s.flights) AS flight_id,\n (SELECT MAX(id) FROM %[1]s.connecting_flights) AS connecting_flight_id`,\n\t\tschema,\n\t)\n\terr := db.QueryRow(ctx, q).Scan(\n\t\t&nullableFlightID,\n\t\t&nullableConnectingFlightID,\n\t)\n\treturn &seq{\n\t\tConnectingFlightID: concurrent.NewAtomicInt64(nullableConnectingFlightID.Int64 + 1),\n\t\tFlightID:           concurrent.NewAtomicInt64(nullableFlightID.Int64 + 1),\n\t}, errors.Wrap(err, \"db: failed to scan last seq\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/db.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/db.go", "rel_path": "pkg/pgsql/db.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 39, "text": "package pgsql\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/jackc/pgx/v4/pgxpool\"\n)\n\n// DB wraps pgxpool.Pool\ntype DB struct {\n\t*pgxpool.Pool\n}\n\n// Connect connects to the database and returns the DB instance\nfunc Connect(ctx context.Context, cfg *Config) (*DB, error) {\n\tdatasource := cfg.datasource()\n\n\tpoolCfg, err := pgxpool.ParseConfig(datasource)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"connect: could not parse pgxpool config\")\n\t}\n\n\tpool, err := pgxpool.ConnectConfig(ctx, poolCfg)\n\treturn &DB{pool}, errors.Wrap(err, \"could not connect with pgxpool\")\n}\n\n// Config database configuration\ntype Config struct {\n\tHost     string\n\tPort     int\n\tUser     string\n\tPassword string\n\tDBName   string\n\n\tschemaName string\n}\n", "n_tokens": 201, "primary_symbol": "Connect", "primary_kind": "function", "primary_span": [17, 39], "def_symbols": ["Connect"], "symbols": ["Connect", "package", "pgsql", "import", "context", "fmt", "github", "com", "cockroachdb", "errors", "jackc", "pgx", "pgxpool", "wraps", "Pool", "type", "struct", "connects", "the", "database", "and", "returns", "instance", "func", "ctx", "Context", "cfg", "Config", "error", "datasource", "poolCfg", "err", "ParseConfig", "nil", "return", "Wrap", "connect", "could", "not", "parse", "config", "pool", "ConnectConfig", "with", "configuration", "Host", "string", "Port", "int", "User", "Password", "DBName", "schemaName"], "doc_head": "package pgsql\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/jackc/pgx/v4/pgxpool\"\n)\n// DB wraps pgxpool.Pool\ntype DB struct {\n\t*pgxpool.Pool\n}\n// Connect connects to the database and returns the DB instance\nfunc Connect(ctx context.Context, cfg *Config) (*DB, error) {\n\tdatasource := cfg.datasource()\n\tpoolCfg, err := pgxpool.ParseConfig(datasource)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"connect: could not parse pgxpool config\")\n\t}\n\tpool, err := pgxpool.ConnectConfig(ctx, poolCfg)\n\treturn &DB{pool}, errors.Wrap(err, \"could not connect with pgxpool\")\n}\n// Config database configuration\ntype Config struct {\n\tHost     string\n\tPort     int\n\tUser     string\n\tPassword string\n\tDBName   string\n\tschemaName string\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/db.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/db.go", "rel_path": "pkg/pgsql/db.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 40, "end_line": 45, "text": "func (c *Config) datasource() string {\n\treturn fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s search_path=%s\",\n\t\tc.Host, c.Port, c.User, c.Password, c.DBName, c.schemaName,\n\t)\n}\n", "n_tokens": 58, "primary_symbol": "datasource", "primary_kind": "function", "primary_span": [40, 45], "def_symbols": ["datasource"], "symbols": ["datasource", "func", "Config", "string", "return", "fmt", "Sprintf", "host", "port", "user", "password", "dbname", "search_path", "Host", "Port", "User", "Password", "DBName", "schemaName"], "doc_head": "func (c *Config) datasource() string {\n\treturn fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s search_path=%s\",\n\t\tc.Host, c.Port, c.User, c.Password, c.DBName, c.schemaName,\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 11, "text": "package pgsql\n\nimport (\n\t\"bytes\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"github.com/lib/pq\"\n\t\"strings\"\n)\n", "n_tokens": 35, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 11], "def_symbols": [], "symbols": ["package", "pgsql", "import", "bytes", "database", "sql", "driver", "fmt", "github", "com", "lib", "strings"], "doc_head": "package pgsql\nimport (\n\t\"bytes\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"github.com/lib/pq\"\n\t\"strings\"\n)"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 12, "end_line": 54, "text": "func Array(a interface{}) interface {\n\tdriver.Valuer\n\tsql.Scanner\n} {\n\tswitch a := a.(type) {\n\tcase []bool:\n\t\treturn (*pq.BoolArray)(&a)\n\tcase []float64:\n\t\treturn (*pq.Float64Array)(&a)\n\tcase []float32:\n\t\treturn (*pq.Float32Array)(&a)\n\tcase []int64:\n\t\treturn (*pq.Int64Array)(&a)\n\tcase []int32:\n\t\treturn (*pq.Int32Array)(&a)\n\tcase []string:\n\t\treturn (*pq.StringArray)(&a)\n\tcase [][]string:\n\t\treturn (*ArrayStringArray)(&a)\n\tcase [][]byte:\n\t\treturn (*pq.ByteaArray)(&a)\n\n\tcase *[]bool:\n\t\treturn (*pq.BoolArray)(a)\n\tcase *[]float64:\n\t\treturn (*pq.Float64Array)(a)\n\tcase *[]float32:\n\t\treturn (*pq.Float32Array)(a)\n\tcase *[]int64:\n\t\treturn (*pq.Int64Array)(a)\n\tcase *[]int32:\n\t\treturn (*pq.Int32Array)(a)\n\tcase *[]string:\n\t\treturn (*pq.StringArray)(a)\n\tcase *[][]string:\n\t\treturn (*ArrayStringArray)(a)\n\tcase *[][]byte:\n\t\treturn (*pq.ByteaArray)(a)\n\t}\n\n\treturn pq.GenericArray{a}\n}\n", "n_tokens": 276, "primary_symbol": "Array", "primary_kind": "function", "primary_span": [12, 54], "def_symbols": ["Array"], "symbols": ["Array", "func", "interface", "driver", "Valuer", "sql", "Scanner", "switch", "type", "case", "bool", "return", "BoolArray", "float64", "Float64Array", "float32", "Float32Array", "int64", "Int64Array", "int32", "Int32Array", "string", "StringArray", "ArrayStringArray", "byte", "ByteaArray", "GenericArray"], "doc_head": "func Array(a interface{}) interface {\n\tdriver.Valuer\n\tsql.Scanner\n} {\n\tswitch a := a.(type) {\n\tcase []bool:\n\t\treturn (*pq.BoolArray)(&a)\n\tcase []float64:\n\t\treturn (*pq.Float64Array)(&a)\n\tcase []float32:\n\t\treturn (*pq.Float32Array)(&a)\n\tcase []int64:\n\t\treturn (*pq.Int64Array)(&a)\n\tcase []int32:\n\t\treturn (*pq.Int32Array)(&a)\n\tcase []string:\n\t\treturn (*pq.StringArray)(&a)\n\tcase [][]string:\n\t\treturn (*ArrayStringArray)(&a)\n\tcase [][]byte:\n\t\treturn (*pq.ByteaArray)(&a)\n\tcase *[]bool:\n\t\treturn (*pq.BoolArray)(a)\n\tcase *[]float64:\n\t\treturn (*pq.Float64Array)(a)\n\tcase *[]float32:\n\t\treturn (*pq.Float32Array)(a)\n\tcase *[]int64:\n\t\treturn (*pq.Int64Array)(a)\n\tcase *[]int32:\n\t\treturn (*pq.Int32Array)(a)\n\tcase *[]string:\n\t\treturn (*pq.StringArray)(a)\n\tcase *[][]string:\n\t\treturn (*ArrayStringArray)(a)\n\tcase *[][]byte:\n\t\treturn (*pq.ByteaArray)(a)\n\t}\n\treturn pq.GenericArray{a}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 55, "end_line": 72, "text": "// ArrayStringArray represents a two-dimensional array of the PostgreSQL character types.\ntype ArrayStringArray [][]string\n\n// Scan implements the sql.Scanner interface.\nfunc (a *ArrayStringArray) Scan(src interface{}) error {\n\tswitch src := src.(type) {\n\tcase []byte:\n\t\treturn a.scanBytes(src)\n\tcase string:\n\t\treturn a.scanBytes([]byte(src))\n\tcase nil:\n\t\t*a = nil\n\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"pq: cannot convert %T to StringArray\", src)\n}\n", "n_tokens": 107, "primary_symbol": "Scan", "primary_kind": "function", "primary_span": [59, 72], "def_symbols": ["Scan"], "symbols": ["Scan", "ArrayStringArray", "represents", "two", "dimensional", "array", "the", "PostgreSQL", "character", "types", "type", "string", "implements", "sql", "Scanner", "interface", "func", "src", "error", "switch", "case", "byte", "return", "scanBytes", "nil", "fmt", "Errorf", "cannot", "convert", "StringArray"], "doc_head": "// ArrayStringArray represents a two-dimensional array of the PostgreSQL character types.\ntype ArrayStringArray [][]string\n// Scan implements the sql.Scanner interface.\nfunc (a *ArrayStringArray) Scan(src interface{}) error {\n\tswitch src := src.(type) {\n\tcase []byte:\n\t\treturn a.scanBytes(src)\n\tcase string:\n\t\treturn a.scanBytes([]byte(src))\n\tcase nil:\n\t\t*a = nil\n\t\treturn nil\n\t}\n\treturn fmt.Errorf(\"pq: cannot convert %T to StringArray\", src)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#4", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 73, "end_line": 94, "text": "func (a *ArrayStringArray) scanBytes(src []byte) error {\n\telems, err := scanTwoDimensionalArray(src, []byte{','}, \"ArrayStringArray\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tif *a != nil && len(elems) == 0 {\n\t\t*a = (*a)[:0]\n\t} else {\n\t\tb := make(ArrayStringArray, len(elems))\n\t\tfor i, v := range elems {\n\t\t\tb[i] = make([]string, len(v))\n\t\t\tfor j, vv := range v {\n\t\t\t\tif b[i][j] = string(vv); v == nil {\n\t\t\t\t\treturn fmt.Errorf(\"pq: parsing array element index (%d,%d): cannot convert nil to string\", i, j)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t*a = b\n\t}\n\treturn nil\n}\n", "n_tokens": 181, "primary_symbol": "scanBytes", "primary_kind": "function", "primary_span": [73, 94], "def_symbols": ["scanBytes"], "symbols": ["scanBytes", "func", "ArrayStringArray", "src", "byte", "error", "elems", "err", "scanTwoDimensionalArray", "nil", "return", "len", "else", "make", "for", "range", "string", "fmt", "Errorf", "parsing", "array", "element", "index", "cannot", "convert"], "doc_head": "func (a *ArrayStringArray) scanBytes(src []byte) error {\n\telems, err := scanTwoDimensionalArray(src, []byte{','}, \"ArrayStringArray\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tif *a != nil && len(elems) == 0 {\n\t\t*a = (*a)[:0]\n\t} else {\n\t\tb := make(ArrayStringArray, len(elems))\n\t\tfor i, v := range elems {\n\t\t\tb[i] = make([]string, len(v))\n\t\t\tfor j, vv := range v {\n\t\t\t\tif b[i][j] = string(vv); v == nil {\n\t\t\t\t\treturn fmt.Errorf(\"pq: parsing array element index (%d,%d): cannot convert nil to string\", i, j)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t*a = b\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#5", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 95, "end_line": 118, "text": "// Value implements the driver.Valuer interface.\nfunc (a ArrayStringArray) Value() (driver.Value, error) {\n\tif a == nil {\n\t\treturn nil, nil\n\t}\n\n\tif n := len(a); n > 0 {\n\t\t// There will be at least two curly brackets, 2*N bytes of quotes,\n\t\t// and N-1 bytes of delimiters.\n\t\tb := make([]byte, 1, 1+3*n)\n\t\tb[0] = '{'\n\n\t\tb = appendArrayQuotedBytes(b, nestedStringArray(a[0]))\n\t\tfor i := 1; i < n; i++ {\n\t\t\tb = append(b, ',')\n\t\t\tb = appendArrayQuotedBytes(b, nestedStringArray(a[i]))\n\t\t}\n\n\t\treturn string(append(b, '}')), nil\n\t}\n\n\treturn \"{}\", nil\n}\n", "n_tokens": 181, "primary_symbol": "Value", "primary_kind": "function", "primary_span": [96, 118], "def_symbols": ["Value"], "symbols": ["Value", "implements", "the", "driver", "Valuer", "interface", "func", "ArrayStringArray", "error", "nil", "return", "len", "There", "will", "least", "two", "curly", "brackets", "bytes", "quotes", "and", "delimiters", "make", "byte", "appendArrayQuotedBytes", "nestedStringArray", "for", "append", "string"], "doc_head": "// Value implements the driver.Valuer interface.\nfunc (a ArrayStringArray) Value() (driver.Value, error) {\n\tif a == nil {\n\t\treturn nil, nil\n\t}\n\tif n := len(a); n > 0 {\n\t\t// There will be at least two curly brackets, 2*N bytes of quotes,\n\t\t// and N-1 bytes of delimiters.\n\t\tb := make([]byte, 1, 1+3*n)\n\t\tb[0] = '{'\n\t\tb = appendArrayQuotedBytes(b, nestedStringArray(a[0]))\n\t\tfor i := 1; i < n; i++ {\n\t\t\tb = append(b, ',')\n\t\t\tb = appendArrayQuotedBytes(b, nestedStringArray(a[i]))\n\t\t}\n\t\treturn string(append(b, '}')), nil\n\t}\n\treturn \"{}\", nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#6", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 119, "end_line": 137, "text": "func nestedStringArray(a []string) []byte {\n\tif n := len(a); n > 0 {\n\t\t// There will be at least two curly brackets, 2*N bytes of quotes,\n\t\t// and N-1 bytes of delimiters.\n\t\tb := make([]byte, 1, 1+3*n)\n\t\tb[0] = '{'\n\n\t\tb = appendArrayQuotedBytes(b, []byte(a[0]))\n\t\tfor i := 1; i < n; i++ {\n\t\t\tb = append(b, ',')\n\t\t\tb = appendArrayQuotedBytes(b, []byte(a[i]))\n\t\t}\n\n\t\treturn append(b, '}')\n\t}\n\n\treturn []byte(\"{}\")\n}\n", "n_tokens": 148, "primary_symbol": "nestedStringArray", "primary_kind": "function", "primary_span": [119, 137], "def_symbols": ["nestedStringArray"], "symbols": ["nestedStringArray", "func", "string", "byte", "len", "There", "will", "least", "two", "curly", "brackets", "bytes", "quotes", "and", "delimiters", "make", "appendArrayQuotedBytes", "for", "append", "return"], "doc_head": "func nestedStringArray(a []string) []byte {\n\tif n := len(a); n > 0 {\n\t\t// There will be at least two curly brackets, 2*N bytes of quotes,\n\t\t// and N-1 bytes of delimiters.\n\t\tb := make([]byte, 1, 1+3*n)\n\t\tb[0] = '{'\n\t\tb = appendArrayQuotedBytes(b, []byte(a[0]))\n\t\tfor i := 1; i < n; i++ {\n\t\t\tb = append(b, ',')\n\t\t\tb = appendArrayQuotedBytes(b, []byte(a[i]))\n\t\t}\n\t\treturn append(b, '}')\n\t}\n\treturn []byte(\"{}\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#7", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 138, "end_line": 154, "text": "func appendArrayQuotedBytes(b, v []byte) []byte {\n\tb = append(b, '\"')\n\tfor {\n\t\ti := bytes.IndexAny(v, `\"\\`)\n\t\tif i < 0 {\n\t\t\tb = append(b, v...)\n\t\t\tbreak\n\t\t}\n\t\tif i > 0 {\n\t\t\tb = append(b, v[:i]...)\n\t\t}\n\t\tb = append(b, '\\\\', v[i])\n\t\tv = v[i+1:]\n\t}\n\treturn append(b, '\"')\n}\n", "n_tokens": 105, "primary_symbol": "appendArrayQuotedBytes", "primary_kind": "function", "primary_span": [138, 154], "def_symbols": ["appendArrayQuotedBytes"], "symbols": ["appendArrayQuotedBytes", "func", "byte", "append", "for", "bytes", "IndexAny", "break", "return"], "doc_head": "func appendArrayQuotedBytes(b, v []byte) []byte {\n\tb = append(b, '\"')\n\tfor {\n\t\ti := bytes.IndexAny(v, `\"\\`)\n\t\tif i < 0 {\n\t\t\tb = append(b, v...)\n\t\t\tbreak\n\t\t}\n\t\tif i > 0 {\n\t\t\tb = append(b, v[:i]...)\n\t\t}\n\t\tb = append(b, '\\\\', v[i])\n\t\tv = v[i+1:]\n\t}\n\treturn append(b, '\"')\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#8", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 155, "end_line": 174, "text": "func scanTwoDimensionalArray(src, del []byte, typ string) ([][][]byte, error) {\n\tdims, elems, err := parseArray(src, del)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(dims) > 2 {\n\t\treturn nil, fmt.Errorf(\"pq: cannot convert ARRAY%s to %s\", strings.Replace(fmt.Sprint(dims), \" \", \"][\", -1), typ)\n\t}\n\n\tr := make([][][]byte, dims[0])\n\tfor i := 0; i < dims[0]; i++ {\n\t\tr[i] = make([][]byte, dims[1])\n\t\tfor j := 0; j < dims[1]; j++ {\n\t\t\tr[i][j] = elems[dims[1]*i+j]\n\t\t}\n\t}\n\n\treturn r, err\n}\n", "n_tokens": 178, "primary_symbol": "scanTwoDimensionalArray", "primary_kind": "function", "primary_span": [155, 174], "def_symbols": ["scanTwoDimensionalArray"], "symbols": ["scanTwoDimensionalArray", "func", "src", "del", "byte", "typ", "string", "error", "dims", "elems", "err", "parseArray", "nil", "return", "len", "fmt", "Errorf", "cannot", "convert", "ARRAY", "strings", "Replace", "Sprint", "make", "for"], "doc_head": "func scanTwoDimensionalArray(src, del []byte, typ string) ([][][]byte, error) {\n\tdims, elems, err := parseArray(src, del)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(dims) > 2 {\n\t\treturn nil, fmt.Errorf(\"pq: cannot convert ARRAY%s to %s\", strings.Replace(fmt.Sprint(dims), \" \", \"][\", -1), typ)\n\t}\n\tr := make([][][]byte, dims[0])\n\tfor i := 0; i < dims[0]; i++ {\n\t\tr[i] = make([][]byte, dims[1])\n\t\tfor j := 0; j < dims[1]; j++ {\n\t\t\tr[i][j] = elems[dims[1]*i+j]\n\t\t}\n\t}\n\treturn r, err\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go#9", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/array.go", "rel_path": "pkg/pgsql/array.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 175, "end_line": 285, "text": "// parseArray extracts the dimensions and elements of an array represented in\n// text format. Only representations emitted by the backend are supported.\n// Notably, whitespace around brackets and delimiters is significant, and NULL\n// is case-sensitive.\n//\n// See http://www.postgresql.org/docs/current/static/arrays.html#ARRAYS-IO\nfunc parseArray(src, del []byte) (dims []int, elems [][]byte, err error) {\n\tvar depth, i int\n\n\tif len(src) < 1 || src[0] != '{' {\n\t\treturn nil, nil, fmt.Errorf(\"pq: unable to parse array; expected %q at offset %d\", '{', 0)\n\t}\n\nOpen:\n\tfor i < len(src) {\n\t\tswitch src[i] {\n\t\tcase '{':\n\t\t\tdepth++\n\t\t\ti++\n\t\tcase '}':\n\t\t\telems = make([][]byte, 0)\n\t\t\tgoto Close\n\t\tdefault:\n\t\t\tbreak Open\n\t\t}\n\t}\n\tdims = make([]int, i)\n\nElement:\n\tfor i < len(src) {\n\t\tswitch src[i] {\n\t\tcase '{':\n\t\t\tif depth == len(dims) {\n\t\t\t\tbreak Element\n\t\t\t}\n\t\t\tdepth++\n\t\t\tdims[depth-1] = 0\n\t\t\ti++\n\t\tcase '\"':\n\t\t\tvar elem = []byte{}\n\t\t\tvar escape bool\n\t\t\tfor i++; i < len(src); i++ {\n\t\t\t\tif escape {\n\t\t\t\t\telem = append(elem, src[i])\n\t\t\t\t\tescape = false\n\t\t\t\t} else {\n\t\t\t\t\tswitch src[i] {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\telem = append(elem, src[i])\n\t\t\t\t\tcase '\\\\':\n\t\t\t\t\t\tescape = true\n\t\t\t\t\tcase '\"':\n\t\t\t\t\t\telems = append(elems, elem)\n\t\t\t\t\t\ti++\n\t\t\t\t\t\tbreak Element\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\tfor start := i; i < len(src); i++ {\n\t\t\t\tif bytes.HasPrefix(src[i:], del) || src[i] == '}' {\n\t\t\t\t\telem := src[start:i]\n\t\t\t\t\tif len(elem) == 0 {\n\t\t\t\t\t\treturn nil, nil, fmt.Errorf(\"pq: unable to parse array; unexpected %q at offset %d\", src[i], i)\n\t\t\t\t\t}\n\t\t\t\t\tif bytes.Equal(elem, []byte(\"NULL\")) {\n\t\t\t\t\t\telem = nil\n\t\t\t\t\t}\n\t\t\t\t\telems = append(elems, elem)\n\t\t\t\t\tbreak Element\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor i < len(src) {\n\t\tif bytes.HasPrefix(src[i:], del) && depth > 0 {\n\t\t\tdims[depth-1]++\n\t\t\ti += len(del)\n\t\t\tgoto Element\n\t\t} else if src[i] == '}' && depth > 0 {\n\t\t\tdims[depth-1]++\n\t\t\tdepth--\n\t\t\ti++\n\t\t} else {\n\t\t\treturn nil, nil, fmt.Errorf(\"pq: unable to parse array; unexpected %q at offset %d\", src[i], i)\n\t\t}\n\t}\n\nClose:\n\tfor i < len(src) {\n\t\tif src[i] == '}' && depth > 0 {\n\t\t\tdepth--\n\t\t\ti++\n\t\t} else {\n\t\t\treturn nil, nil, fmt.Errorf(\"pq: unable to parse array; unexpected %q at offset %d\", src[i], i)\n\t\t}\n\t}\n\tif depth > 0 {\n\t\terr = fmt.Errorf(\"pq: unable to parse array; expected %q at offset %d\", '}', i)\n\t}\n\tif err == nil {\n\t\tfor _, d := range dims {\n\t\t\tif (len(elems) % d) != 0 {\n\t\t\t\terr = fmt.Errorf(\"pq: multidimensional arrays must have elements with matching dimensions\")\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n", "n_tokens": 773, "primary_symbol": "parseArray", "primary_kind": "function", "primary_span": [181, 285], "def_symbols": ["parseArray"], "symbols": ["parseArray", "extracts", "the", "dimensions", "and", "elements", "array", "represented", "text", "format", "Only", "representations", "emitted", "backend", "are", "supported", "Notably", "whitespace", "around", "brackets", "delimiters", "significant", "NULL", "case", "sensitive", "See", "http", "www", "postgresql", "org", "docs", "current", "static", "arrays", "html", "ARRAYS", "func", "src", "del", "byte", "dims", "int", "elems", "err", "error", "var", "depth", "len", "return", "nil", "fmt", "Errorf", "unable", "parse", "expected", "offset", "Open", "for", "switch", "make", "goto", "Close", "default", "break", "Element", "elem", "escape", "bool", "append", "false", "else", "true", "start", "bytes", "HasPrefix", "unexpected", "Equal", "range", "multidimensional", "must", "have", "with", "matching"], "doc_head": "// parseArray extracts the dimensions and elements of an array represented in\n// text format. Only representations emitted by the backend are supported.\n// Notably, whitespace around brackets and delimiters is significant, and NULL\n// is case-sensitive.\n//\n// See http://www.postgresql.org/docs/current/static/arrays.html#ARRAYS-IO\nfunc parseArray(src, del []byte) (dims []int, elems [][]byte, err error) {\n\tvar depth, i int\n\tif len(src) < 1 || src[0] != '{' {\n\t\treturn nil, nil, fmt.Errorf(\"pq: unable to parse array; expected %q at offset %d\", '{', 0)\n\t}\nOpen:\n\tfor i < len(src) {\n\t\tswitch src[i] {\n\t\tcase '{':\n\t\t\tdepth++\n\t\t\ti++\n\t\tcase '}':\n\t\t\telems = make([][]byte, 0)\n\t\t\tgoto Close\n\t\tdefault:\n\t\t\tbreak Open\n\t\t}\n\t}\n\tdims = make([]int, i)\nElement:\n\tfor i < len(src) {\n\t\tswitch src[i] {\n\t\tcase '{':\n\t\t\tif depth == len(dims) {\n\t\t\t\tbreak Element\n\t\t\t}\n\t\t\tdepth++\n\t\t\tdims[depth-1] = 0\n\t\t\ti++\n\t\tcase '\"':\n\t\t\tvar elem = []byte{}\n\t\t\tvar escape bool\n\t\t\tfor i++; i < len(src); i++ {\n\t\t\t\tif escape {\n\t\t\t\t\telem = append(elem, src[i])\n\t\t\t\t\tescape = false\n\t\t\t\t} else {\n\t\t\t\t\tswitch src[i] {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\telem = append(elem, src[i])\n\t\t\t\t\tcase '\\\\':\n\t\t\t\t\t\tescape = true\n\t\t\t\t\tcase '\"':\n\t\t\t\t\t\telems = append(el"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/migration.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/migration.go", "rel_path": "pkg/pgsql/migration.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 19, "text": "package pgsql\n\nimport (\n\t\"database/sql\"\n\t\"embed\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/golang-migrate/migrate/v4\"\n\t\"github.com/golang-migrate/migrate/v4/database/pgx\"\n\t_ \"github.com/golang-migrate/migrate/v4/source/file\"\n\t\"github.com/golang-migrate/migrate/v4/source/iofs\"\n)\n\n//go:embed migrations/*.sql\nvar migrationsfs embed.FS\n\n//go:embed migrations/public/*.sql\nvar publicMigrations embed.FS\n", "n_tokens": 115, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 19], "def_symbols": [], "symbols": ["package", "pgsql", "import", "database", "sql", "embed", "github", "com", "cockroachdb", "errors", "golang", "migrate", "pgx", "source", "file", "iofs", "migrations", "var", "migrationsfs", "public", "publicMigrations"], "doc_head": "package pgsql\nimport (\n\t\"database/sql\"\n\t\"embed\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/golang-migrate/migrate/v4\"\n\t\"github.com/golang-migrate/migrate/v4/database/pgx\"\n\t_ \"github.com/golang-migrate/migrate/v4/source/file\"\n\t\"github.com/golang-migrate/migrate/v4/source/iofs\"\n)\n//go:embed migrations/*.sql\nvar migrationsfs embed.FS\n//go:embed migrations/public/*.sql\nvar publicMigrations embed.FS"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/migration.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/migration.go", "rel_path": "pkg/pgsql/migration.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 20, "end_line": 63, "text": "// MigrateUpWithSchema runs migrations for all sql files using pgx driver\n// on the specified schema\nfunc MigrateUpWithSchema(conf *Config, schema string) error {\n\t// Switch to any schema, if public is given the default public schema will be used\n\tconf.schemaName = schema\n\n\tvar (\n\t\tfs   = migrationsfs\n\t\tpath = \"migrations\"\n\t)\n\tif schema == \"public\" {\n\t\tfs = publicMigrations\n\t\tpath = \"migrations/public\"\n\t}\n\n\tsourceDriver, err := iofs.New(fs, path)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create source driver\")\n\t}\n\n\tdatasource := conf.datasource()\n\n\tinstance, err := sql.Open(\"pgx\", datasource)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to open database\")\n\t}\n\n\tdbDriver, err := pgx.WithInstance(instance, &pgx.Config{SchemaName: schema})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create pgx driver\")\n\t}\n\n\tmigrator, err := migrate.NewWithInstance(\"iofs\", sourceDriver, \"pgx\", dbDriver)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create migrator\")\n\t}\n\n\tif err := migrator.Up(); err != nil && !errors.Is(err, migrate.ErrNoChange) {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 301, "primary_symbol": "MigrateUpWithSchema", "primary_kind": "function", "primary_span": [22, 63], "def_symbols": ["MigrateUpWithSchema"], "symbols": ["MigrateUpWithSchema", "runs", "migrations", "for", "all", "sql", "files", "using", "pgx", "driver", "the", "specified", "schema", "func", "conf", "Config", "string", "error", "Switch", "any", "public", "given", "default", "will", "used", "schemaName", "var", "migrationsfs", "path", "publicMigrations", "sourceDriver", "err", "iofs", "New", "nil", "return", "errors", "Wrap", "failed", "create", "source", "datasource", "instance", "Open", "open", "database", "dbDriver", "WithInstance", "SchemaName", "migrator", "migrate", "NewWithInstance", "ErrNoChange"], "doc_head": "// MigrateUpWithSchema runs migrations for all sql files using pgx driver\n// on the specified schema\nfunc MigrateUpWithSchema(conf *Config, schema string) error {\n\t// Switch to any schema, if public is given the default public schema will be used\n\tconf.schemaName = schema\n\tvar (\n\t\tfs   = migrationsfs\n\t\tpath = \"migrations\"\n\t)\n\tif schema == \"public\" {\n\t\tfs = publicMigrations\n\t\tpath = \"migrations/public\"\n\t}\n\tsourceDriver, err := iofs.New(fs, path)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create source driver\")\n\t}\n\tdatasource := conf.datasource()\n\tinstance, err := sql.Open(\"pgx\", datasource)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to open database\")\n\t}\n\tdbDriver, err := pgx.WithInstance(instance, &pgx.Config{SchemaName: schema})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create pgx driver\")\n\t}\n\tmigrator, err := migrate.NewWithInstance(\"iofs\", sourceDriver, \"pgx\", dbDriver)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create migrator\")\n\t}\n\tif err := migrator.Up(); err != nil && !errors.Is(err, migrate.ErrNoChange) {\n\t\treturn errors.Wrap(err, \"failed to migrate up\")\n\t}\n\treturn nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/migration.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/pgsql/migration.go", "rel_path": "pkg/pgsql/migration.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 64, "end_line": 68, "text": "// MigrateUp runs migrations for all sql files using pgx driver\nfunc MigrateUp(conf *Config) error {\n\treturn MigrateUpWithSchema(conf, \"public\")\n}\n", "n_tokens": 37, "primary_symbol": "MigrateUp", "primary_kind": "function", "primary_span": [65, 68], "def_symbols": ["MigrateUp"], "symbols": ["MigrateUp", "runs", "migrations", "for", "all", "sql", "files", "using", "pgx", "driver", "func", "conf", "Config", "error", "return", "MigrateUpWithSchema", "public"], "doc_head": "// MigrateUp runs migrations for all sql files using pgx driver\nfunc MigrateUp(conf *Config) error {\n\treturn MigrateUpWithSchema(conf, \"public\")\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xhttp/response.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xhttp/response.go", "rel_path": "pkg/xhttp/response.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 32, "text": "package xhttp\n\n// Pagination represents the pagination metadata\ntype Pagination struct {\n\tLimit uint    `json:\"limit\"`\n\tNext  *string `json:\"next\"`\n}\n\n// Metadata contains the information about the response\ntype Metadata struct {\n\tCode       string      `json:\"code\"`\n\tMessage    string      `json:\"message\"`\n\tPagination *Pagination `json:\"pagination,omitempty\"`\n}\n\n// Response is the http response format\ntype Response[T any] struct {\n\tMetadata Metadata `json:\"meta\"`\n\tData     T        `json:\"data\"`\n}\n\n// NewResponse creates a new response\nfunc NewResponse[T any](data T, code string, message string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: data,\n\t}\n}\n", "n_tokens": 171, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 32], "def_symbols": [], "symbols": ["package", "xhttp", "Pagination", "represents", "the", "pagination", "metadata", "type", "struct", "Limit", "uint", "json", "limit", "Next", "string", "next", "Metadata", "contains", "information", "about", "response", "Code", "code", "Message", "message", "omitempty", "Response", "http", "format", "any", "meta", "Data", "data", "NewResponse", "creates", "new", "func", "return"], "doc_head": "package xhttp\n// Pagination represents the pagination metadata\ntype Pagination struct {\n\tLimit uint    `json:\"limit\"`\n\tNext  *string `json:\"next\"`\n}\n// Metadata contains the information about the response\ntype Metadata struct {\n\tCode       string      `json:\"code\"`\n\tMessage    string      `json:\"message\"`\n\tPagination *Pagination `json:\"pagination,omitempty\"`\n}\n// Response is the http response format\ntype Response[T any] struct {\n\tMetadata Metadata `json:\"meta\"`\n\tData     T        `json:\"data\"`\n}\n// NewResponse creates a new response\nfunc NewResponse[T any](data T, code string, message string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: data,\n\t}\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xhttp/response.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xhttp/response.go", "rel_path": "pkg/xhttp/response.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 33, "end_line": 63, "text": "// NewPaginatedResponse creates a new paginated response\nfunc NewPaginatedResponse[T any](data T, code, message string, limit uint, nextPageToken *string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t\tPagination: &Pagination{\n\t\t\t\tLimit: limit,\n\t\t\t\tNext:  nextPageToken,\n\t\t\t},\n\t\t},\n\t\tData: data,\n\t}\n}\n\n// NewErrorResponse creates a new error response\nfunc NewErrorResponse[T any](code string, message string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: getZero[T](),\n\t}\n}\n\nfunc getZero[T any]() T {\n\tvar z T\n\treturn z\n}\n", "n_tokens": 178, "primary_symbol": "", "primary_kind": "", "primary_span": [33, 63], "def_symbols": [], "symbols": ["NewPaginatedResponse", "creates", "new", "paginated", "response", "func", "any", "data", "code", "message", "string", "limit", "uint", "nextPageToken", "Response", "return", "Metadata", "Code", "Message", "Pagination", "Limit", "Next", "Data", "NewErrorResponse", "error", "getZero", "var"], "doc_head": "// NewPaginatedResponse creates a new paginated response\nfunc NewPaginatedResponse[T any](data T, code, message string, limit uint, nextPageToken *string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t\tPagination: &Pagination{\n\t\t\t\tLimit: limit,\n\t\t\t\tNext:  nextPageToken,\n\t\t\t},\n\t\t},\n\t\tData: data,\n\t}\n}\n// NewErrorResponse creates a new error response\nfunc NewErrorResponse[T any](code string, message string) *Response[T] {\n\treturn &Response[T]{\n\t\tMetadata: Metadata{\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t},\n\t\tData: getZero[T](),\n\t}\n}\nfunc getZero[T any]() T {\n\tvar z T\n\treturn z\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xhttp/health.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xhttp/health.go", "rel_path": "pkg/xhttp/health.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 16, "text": "package xhttp\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc Health(c *gin.Context) {\n\tc.JSON(http.StatusOK, NewResponse[any](\n\t\tmap[string]string{\n\t\t\t\"status\": \"ok\",\n\t\t}, \"ok\", \"Healthy!\"),\n\t)\n}\n", "n_tokens": 62, "primary_symbol": "Health", "primary_kind": "function", "primary_span": [9, 16], "def_symbols": ["Health"], "symbols": ["Health", "package", "xhttp", "import", "net", "http", "github", "com", "gin", "gonic", "func", "Context", "JSON", "StatusOK", "NewResponse", "any", "map", "string", "status", "Healthy"], "doc_head": "package xhttp\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc Health(c *gin.Context) {\n\tc.JSON(http.StatusOK, NewResponse[any](\n\t\tmap[string]string{\n\t\t\t\"status\": \"ok\",\n\t\t}, \"ok\", \"Healthy!\"),\n\t)\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/supported.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/supported.go", "rel_path": "pkg/i18n/supported.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 35, "text": "package i18n\n\nimport (\n\tpi18n \"github.com/nicksnyder/go-i18n/v2/i18n\"\n\t\"golang.org/x/text/language\"\n)\n\nvar SupportedLanguages = []language.Tag{\n\tlanguage.English,\n\tlanguage.Dutch,\n\tlanguage.French,\n\tlanguage.German,\n\tlanguage.Italian,\n\tlanguage.Japanese,\n\tlanguage.Korean,\n\tlanguage.Portuguese,\n\tlanguage.Russian,\n\tlanguage.Spanish,\n\tlanguage.Swedish,\n\tlanguage.Chinese,\n\tlanguage.Finnish,\n\tlanguage.Norwegian,\n\tlanguage.Danish,\n\tlanguage.Thai,\n\tlanguage.Arabic,\n}\n\nvar matcher = language.NewMatcher(SupportedLanguages)\n\nfunc GetLocaleFromHeader(header string) language.Tag {\n\ttags, _, _ := language.ParseAcceptLanguage(header)\n\tlocale, _, _ := matcher.Match(tags...)\n\treturn locale\n}\n", "n_tokens": 183, "primary_symbol": "GetLocaleFromHeader", "primary_kind": "function", "primary_span": [30, 35], "def_symbols": ["GetLocaleFromHeader"], "symbols": ["GetLocaleFromHeader", "package", "i18n", "import", "pi18n", "github", "com", "nicksnyder", "golang", "org", "text", "language", "var", "SupportedLanguages", "Tag", "English", "Dutch", "French", "German", "Italian", "Japanese", "Korean", "Portuguese", "Russian", "Spanish", "Swedish", "Chinese", "Finnish", "Norwegian", "Danish", "Thai", "Arabic", "matcher", "NewMatcher", "func", "header", "string", "tags", "ParseAcceptLanguage", "locale", "Match", "return"], "doc_head": "package i18n\nimport (\n\tpi18n \"github.com/nicksnyder/go-i18n/v2/i18n\"\n\t\"golang.org/x/text/language\"\n)\nvar SupportedLanguages = []language.Tag{\n\tlanguage.English,\n\tlanguage.Dutch,\n\tlanguage.French,\n\tlanguage.German,\n\tlanguage.Italian,\n\tlanguage.Japanese,\n\tlanguage.Korean,\n\tlanguage.Portuguese,\n\tlanguage.Russian,\n\tlanguage.Spanish,\n\tlanguage.Swedish,\n\tlanguage.Chinese,\n\tlanguage.Finnish,\n\tlanguage.Norwegian,\n\tlanguage.Danish,\n\tlanguage.Thai,\n\tlanguage.Arabic,\n}\nvar matcher = language.NewMatcher(SupportedLanguages)\nfunc GetLocaleFromHeader(header string) language.Tag {\n\ttags, _, _ := language.ParseAcceptLanguage(header)\n\tlocale, _, _ := matcher.Match(tags...)\n\treturn locale\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/supported.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/supported.go", "rel_path": "pkg/i18n/supported.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 36, "end_line": 55, "text": "func Localise(text map[string]string, locale language.Tag) string {\n\tbundle := pi18n.NewBundle(language.English)\n\n\tfor l, t := range text {\n\t\tif loc, err := language.Parse(l); err == nil {\n\t\t\t_ = bundle.AddMessages(loc, &pi18n.Message{\n\t\t\t\tID:    \"Translation\",\n\t\t\t\tOther: t,\n\t\t\t})\n\t\t}\n\t}\n\n\tlocaliser := pi18n.NewLocalizer(bundle, locale.String())\n\tif t, err := localiser.Localize(&pi18n.LocalizeConfig{MessageID: \"Translation\"}); err == nil {\n\t\treturn t\n\t}\n\n\treturn \"\"\n}\n", "n_tokens": 135, "primary_symbol": "Localise", "primary_kind": "function", "primary_span": [36, 55], "def_symbols": ["Localise"], "symbols": ["Localise", "func", "text", "map", "string", "locale", "language", "Tag", "bundle", "pi18n", "NewBundle", "English", "for", "range", "loc", "err", "Parse", "nil", "AddMessages", "Message", "Translation", "Other", "localiser", "NewLocalizer", "String", "Localize", "LocalizeConfig", "MessageID", "return"], "doc_head": "func Localise(text map[string]string, locale language.Tag) string {\n\tbundle := pi18n.NewBundle(language.English)\n\tfor l, t := range text {\n\t\tif loc, err := language.Parse(l); err == nil {\n\t\t\t_ = bundle.AddMessages(loc, &pi18n.Message{\n\t\t\t\tID:    \"Translation\",\n\t\t\t\tOther: t,\n\t\t\t})\n\t\t}\n\t}\n\tlocaliser := pi18n.NewLocalizer(bundle, locale.String())\n\tif t, err := localiser.Localize(&pi18n.LocalizeConfig{MessageID: \"Translation\"}); err == nil {\n\t\treturn t\n\t}\n\treturn \"\"\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/supported.go#3", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/supported.go", "rel_path": "pkg/i18n/supported.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 56, "end_line": 85, "text": "func LocaliseNillable(text map[string]string, locale language.Tag) *string {\n\tbundle := pi18n.NewBundle(language.English)\n\n\tfor l, t := range text {\n\t\tif loc, err := language.Parse(l); err == nil {\n\t\t\t_ = bundle.AddMessages(loc, &pi18n.Message{\n\t\t\t\tID:    \"Translation\",\n\t\t\t\tOther: t,\n\t\t\t})\n\t\t}\n\t}\n\n\tlocaliser := pi18n.NewLocalizer(bundle, locale.String())\n\tif t, err := localiser.Localize(&pi18n.LocalizeConfig{MessageID: \"Translation\"}); err == nil {\n\t\treturn &t\n\t}\n\n\treturn nil\n}\n\nfunc IsSupported(l language.Tag) bool {\n\tfor _, s := range SupportedLanguages {\n\t\tif s == l {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n", "n_tokens": 177, "primary_symbol": "LocaliseNillable", "primary_kind": "function", "primary_span": [56, 85], "def_symbols": ["LocaliseNillable", "IsSupported"], "symbols": ["LocaliseNillable", "IsSupported", "func", "text", "map", "string", "locale", "language", "Tag", "bundle", "pi18n", "NewBundle", "English", "for", "range", "loc", "err", "Parse", "nil", "AddMessages", "Message", "Translation", "Other", "localiser", "NewLocalizer", "String", "Localize", "LocalizeConfig", "MessageID", "return", "bool", "SupportedLanguages", "true", "false"], "doc_head": "func LocaliseNillable(text map[string]string, locale language.Tag) *string {\n\tbundle := pi18n.NewBundle(language.English)\n\tfor l, t := range text {\n\t\tif loc, err := language.Parse(l); err == nil {\n\t\t\t_ = bundle.AddMessages(loc, &pi18n.Message{\n\t\t\t\tID:    \"Translation\",\n\t\t\t\tOther: t,\n\t\t\t})\n\t\t}\n\t}\n\tlocaliser := pi18n.NewLocalizer(bundle, locale.String())\n\tif t, err := localiser.Localize(&pi18n.LocalizeConfig{MessageID: \"Translation\"}); err == nil {\n\t\treturn &t\n\t}\n\treturn nil\n}\nfunc IsSupported(l language.Tag) bool {\n\tfor _, s := range SupportedLanguages {\n\t\tif s == l {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/validation.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/i18n/validation.go", "rel_path": "pkg/i18n/validation.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 35, "text": "package i18n\n\nimport (\n\t\"errors\"\n\t\"github.com/go-playground/locales/en\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\tenTranslations \"github.com/go-playground/validator/v10/translations/en\"\n)\n\nvar (\n\tTranslator ut.Translator\n)\n\nfunc Register(v *validator.Validate) {\n\tenLocale := en.New()\n\tuni := ut.New(enLocale, enLocale)\n\tTranslator, _ = uni.GetTranslator(\"en\")\n\t_ = enTranslations.RegisterDefaultTranslations(v, Translator)\n}\n\nfunc GetFirstValidationErrorMessage(err error) string {\n\tvar message string\n\tvar validationErrors validator.ValidationErrors\n\tif errors.As(err, &validationErrors) {\n\t\tif len(validationErrors) > 0 {\n\t\t\tmessage = validationErrors[0].Translate(Translator)\n\t\t} else {\n\t\t\tmessage = \"The input parameters are invalid.\"\n\t\t}\n\t}\n\n\treturn message\n}\n", "n_tokens": 196, "primary_symbol": "Register", "primary_kind": "function", "primary_span": [15, 35], "def_symbols": ["Register", "GetFirstValidationErrorMessage"], "symbols": ["Register", "GetFirstValidationErrorMessage", "package", "i18n", "import", "errors", "github", "com", "playground", "locales", "universal", "translator", "validator", "v10", "enTranslations", "translations", "var", "Translator", "func", "Validate", "enLocale", "New", "uni", "GetTranslator", "RegisterDefaultTranslations", "err", "error", "string", "message", "validationErrors", "ValidationErrors", "len", "Translate", "else", "The", "input", "parameters", "are", "invalid", "return"], "doc_head": "package i18n\nimport (\n\t\"errors\"\n\t\"github.com/go-playground/locales/en\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\tenTranslations \"github.com/go-playground/validator/v10/translations/en\"\n)\nvar (\n\tTranslator ut.Translator\n)\nfunc Register(v *validator.Validate) {\n\tenLocale := en.New()\n\tuni := ut.New(enLocale, enLocale)\n\tTranslator, _ = uni.GetTranslator(\"en\")\n\t_ = enTranslations.RegisterDefaultTranslations(v, Translator)\n}\nfunc GetFirstValidationErrorMessage(err error) string {\n\tvar message string\n\tvar validationErrors validator.ValidationErrors\n\tif errors.As(err, &validationErrors) {\n\t\tif len(validationErrors) > 0 {\n\t\t\tmessage = validationErrors[0].Translate(Translator)\n\t\t} else {\n\t\t\tmessage = \"The input parameters are invalid.\"\n\t\t}\n\t}\n\treturn message\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xaws/config.go#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xaws/config.go", "rel_path": "pkg/xaws/config.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package xaws\n\nimport (\n\t\"context\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\n\ntype Config struct {\n\tAccessKeyID     string `mapstructure:\"access-key-id\"`\n\tSecretAccessKey string `mapstructure:\"secret-access-key\"`\n\tSessionToken    string `mapstructure:\"session-token\"`\n\tEndpointURL     string `mapstructure:\"endpoint-url\"`\n\tRegion          string `mapstructure:\"region\"`\n\tS3              struct {\n\t\tUsePathStyle bool `mapstructure:\"use-path-style\"`\n\t} `mapstructure:\"s3\"`\n}\n", "n_tokens": 136, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 21], "def_symbols": [], "symbols": ["package", "xaws", "import", "context", "github", "com", "aws", "sdk", "config", "credentials", "type", "Config", "struct", "AccessKeyID", "string", "mapstructure", "access", "key", "SecretAccessKey", "secret", "SessionToken", "session", "token", "EndpointURL", "endpoint", "url", "Region", "region", "UsePathStyle", "bool", "use", "path", "style"], "doc_head": "package xaws\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\ntype Config struct {\n\tAccessKeyID     string `mapstructure:\"access-key-id\"`\n\tSecretAccessKey string `mapstructure:\"secret-access-key\"`\n\tSessionToken    string `mapstructure:\"session-token\"`\n\tEndpointURL     string `mapstructure:\"endpoint-url\"`\n\tRegion          string `mapstructure:\"region\"`\n\tS3              struct {\n\t\tUsePathStyle bool `mapstructure:\"use-path-style\"`\n\t} `mapstructure:\"s3\"`\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xaws/config.go#2", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/pkg/xaws/config.go", "rel_path": "pkg/xaws/config.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 49, "text": "func GetConfig(ctx context.Context, cfg *Config) (aws.Config, error) {\n\tvar optFns []func(*config.LoadOptions) error\n\n\tif cfg.AccessKeyID != \"\" || cfg.SecretAccessKey != \"\" || cfg.SessionToken != \"\" {\n\t\toptFns = append(optFns, config.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\tcfg.AccessKeyID, cfg.SecretAccessKey, cfg.SessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tif cfg.Region != \"\" {\n\t\toptFns = append(optFns, config.WithRegion(cfg.Region))\n\t}\n\n\tif cfg.EndpointURL != \"\" {\n\t\toptFns = append(optFns, config.WithBaseEndpoint(cfg.EndpointURL))\n\t}\n\n\tawsCfg, err := config.LoadDefaultConfig(ctx, optFns...)\n\n\tif err != nil {\n\t\treturn aws.Config{}, err\n\t}\n\n\treturn awsCfg, nil\n}\n", "n_tokens": 186, "primary_symbol": "GetConfig", "primary_kind": "function", "primary_span": [22, 49], "def_symbols": ["GetConfig"], "symbols": ["GetConfig", "func", "ctx", "context", "Context", "cfg", "Config", "aws", "error", "var", "optFns", "config", "LoadOptions", "AccessKeyID", "SecretAccessKey", "SessionToken", "append", "WithCredentialsProvider", "credentials", "NewStaticCredentialsProvider", "Region", "WithRegion", "EndpointURL", "WithBaseEndpoint", "awsCfg", "err", "LoadDefaultConfig", "nil", "return"], "doc_head": "func GetConfig(ctx context.Context, cfg *Config) (aws.Config, error) {\n\tvar optFns []func(*config.LoadOptions) error\n\tif cfg.AccessKeyID != \"\" || cfg.SecretAccessKey != \"\" || cfg.SessionToken != \"\" {\n\t\toptFns = append(optFns, config.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\tcfg.AccessKeyID, cfg.SecretAccessKey, cfg.SessionToken,\n\t\t\t),\n\t\t))\n\t}\n\tif cfg.Region != \"\" {\n\t\toptFns = append(optFns, config.WithRegion(cfg.Region))\n\t}\n\tif cfg.EndpointURL != \"\" {\n\t\toptFns = append(optFns, config.WithBaseEndpoint(cfg.EndpointURL))\n\t}\n\tawsCfg, err := config.LoadDefaultConfig(ctx, optFns...)\n\tif err != nil {\n\t\treturn aws.Config{}, err\n\t}\n\treturn awsCfg, nil\n}"}
{"id": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/.camouflage/plconfig.js#1", "repo_id": "crunding-aviation_schedules_service-b9c74aa1e31b", "path": "/Users/zack.alatrash/Company Repos/crunding-aviation_schedules_service-b9c74aa1e31b/.camouflage/plconfig.js", "rel_path": ".camouflage/plconfig.js", "ext": "js", "language": "javascript", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "module.exports.plconfig = {\n    keepCase: true,\n    includeDirs: [\n        \"./grpc/protos\"\n    ],\n}", "n_tokens": 27, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["module", "exports", "plconfig", "keepCase", "true", "includeDirs", "grpc", "protos"], "doc_head": "module.exports.plconfig = {\n    keepCase: true,\n    includeDirs: [\n        \"./grpc/protos\"\n    ],\n}"}
