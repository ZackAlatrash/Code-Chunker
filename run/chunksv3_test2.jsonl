{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/main.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 12, "text": "package main\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)\n\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "n_tokens": 43, "primary_symbol": "main", "primary_kind": "function", "primary_span": [7, 12], "def_symbols": ["main"], "symbols": ["main", "package", "import", "impalastudios", "com", "weather", "foreca_proxy", "cmd", "func", "err", "RunRootCmd", "nil", "panic"], "doc_head": "package main\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:main", "package": "main", "node_kind": "function", "receiver": "", "function_name": "main", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["RunRootCmd", "cmd.RunRootCmd", "go.impalastudios"], "header_context_minimal": "package main", "summary_llm": "This code is a simple HTTP server in Go that listens on port 8080 and responds to GET requests with a 'Hello, World!' message.", "keywords_llm": ["go", "http", "server", "port 8080", "get request", "response", "hello, world!", "net/http", "listenandserve", "handlerfunc"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package cmd\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n", "n_tokens": 43, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "cmd", "import", "impalastudios", "com", "weather", "foreca_proxy", "serve", "strings", "github", "spf13", "cobra", "viper"], "doc_head": "package cmd\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cmd", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["github.com", "go.impalastudios"], "header_context_minimal": "package cmd", "summary_llm": "This Go code defines the package `cmd` and imports several modules including Cobra and Viper for building CLI applications and managing configuration. It also includes an import from a specific weather proxy service.", "keywords_llm": ["cobra", "viper", "cli", "configuration", "weather", "proxy", "github.com/spf13/cobra", "github.com/spf13/viper", "go.impalastudios.com/weather/foreca_proxy/cmd/serve"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 11, "end_line": 51, "text": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")\n\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times to request the forecasts about.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.temp-unit\", \"C\", \"The default temperature unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.wind-unit\", \"KMH\", \"The default wind speed unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.lang\", \"en\", \"The locale of the forecast's descriptions.\")\n\n\tcmd.PersistentFlags().String(\"mappings.dynamodb.table-name\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"memcached.address\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}\n", "n_tokens": 515, "primary_symbol": "RunRootCmd", "primary_kind": "function", "primary_span": [12, 51], "def_symbols": ["RunRootCmd"], "symbols": ["RunRootCmd", "entrypoint", "the", "root", "command", "func", "error", "viper", "AutomaticEnv", "SetEnvKeyReplacer", "strings", "NewReplacer", "cmd", "cobra", "Command", "Use", "weather", "foreca", "proxy", "Short", "Weather", "Foreca", "Proxy", "Microservice", "Version", "AddCommand", "serve", "New", "PersistentFlags", "Bool", "logging", "debug", "false", "Whether", "emit", "level", "logs", "not", "String", "encoding", "json", "The", "log", "strategy", "StringP", "app", "name", "application", "endpoint", "url", "https", "pfa", "com", "data", "provider", "requests", "per", "second", "rate", "limit", "applied", "expiration", "duration", "amount", "time", "already", "requested", "forecast", "should", "considered", "fresh", "query", "default", "format", "xml", "itwcalculator", "jun17pres", "value", "for", "param", "ftimes", "times", "request", "forecasts", "about", "temp", "unit", "temperature", "wind", "KMH", "speed", "lang", "locale", "descriptions", "mappings", "dynamodb", "table", "DynamoDB", "memcached", "address", "aws", "access", "key", "AWS", "secret", "session", "token", "region", "BindPFlags", "return", "Execute"], "doc_head": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\tcmd.AddCommand(serve.New())\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:RunRootCmd", "package": "", "node_kind": "function", "receiver": "", "function_name": "RunRootCmd", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["AWS", "AddCommand", "AutomaticEnv", "BindPFlags", "Bool", "C", "Command", "DynamoDB", "Execute", "Foreca", "ID", "KMH", "Microservice", "New", "NewReplacer", "PersistentFlags", "Proxy", "RunRootCmd", "SetEnvKeyReplacer", "Short", "String", "StringP", "The", "Use", "Version", "Weather", "Whether", "app.name", "aws.access", "aws.endpoint", "aws.region", "aws.secret", "aws.session", "cmd.AddCommand", "cmd.Execute", "cmd.PersistentFlags", "cobra.Command", "default.format", "default.ftimes", "default.lang", "default.temp", "default.wind", "foreca.endpoint", "foreca.expiration", "foreca.query", "foreca.requests", "logging.debug", "logging.encoding", "mappings.dynamodb", "memcached.address", "pfa.foreca", "serve.New", "strings.NewReplacer", "viper.AutomaticEnv", "viper.BindPFlags", "viper.SetEnvKeyReplacer"], "header_context_minimal": "package ", "summary_llm": "The `RunRootCmd` function initializes and executes the root command for a weather forecasting proxy microservice using Cobra. It sets up various persistent flags for configuration options such as logging, application details, external service settings, AWS credentials, and more.", "keywords_llm": ["cobra.command", "runrootcmd", "viper", "bindpflags", "persistentflags", "logging.debug", "app.name", "foreca.endpoint-url", "aws.access-key-id", "execute"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "serve", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package serve", "summary_llm": "The provided Go code is incomplete and lacks context to determine its functionality. It appears to be a placeholder or an excerpt that does not form a complete runnable program.", "keywords_llm": ["go", "code", "incomplete"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 42, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\trequestid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\totelgrpctrace \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\totelgrpcmetric \"go.impalastudios.com/otel/grpc\"\n\tgrpcv0 \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/handlers/grpc/v0\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"net\"\n\t\"os\"\n)\n", "n_tokens": 465, "primary_symbol": "", "primary_kind": "", "primary_span": [3, 42], "def_symbols": [], "symbols": ["import", "context", "fmt", "github", "com", "dropbox", "godropbox", "memcache", "grpc", "ecosystem", "middleware", "interceptors", "logging", "recovery", "lru", "hashicorp", "golang", "impalastudios", "log", "xotel", "otel", "requestid", "weather", "foreca_proxy", "internal", "foreca", "adapters", "clients", "pkg", "aws", "cache", "ratelimit", "otelgrpctrace", "opentelemetry", "contrib", "instrumentation", "google", "org", "otelgrpc", "propagation", "uber", "zap", "codes", "metadata", "status", "net", "http", "time", "cockroachdb", "errors", "spf13", "cobra", "viper", "otelgrpcmetric", "grpcv0", "handlers", "pbv0", "sdk", "otelaws", "reflection"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\tlru \"github.com/hashicorp/golang-lru/v2\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\trequestid \"go.impalastudios.com/requestid/grpc\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\totelgrpctrace \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\totelgrp", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["github.com", "go.impalastudios", "go.opentelemetry", "go.uber", "google.golang"], "header_context_minimal": "package ", "summary_llm": "This Go code is part of a server application that uses gRPC for communication. It imports various packages for logging, tracing, caching, rate limiting, and AWS integration.", "keywords_llm": ["grpc", "logging", "tracing", "caching", "rate limiting", "aws", "server", "middleware", "interceptors", "otlp", "zipkin"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 79, "text": "func InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\n\t\tlogger := l.With(f...)\n\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}\n", "n_tokens": 242, "primary_symbol": "InterceptorLogger", "primary_kind": "function", "primary_span": [43, 79], "def_symbols": ["InterceptorLogger"], "symbols": ["InterceptorLogger", "func", "zap", "Logger", "logging", "return", "LoggerFunc", "ctx", "context", "Context", "lvl", "Level", "msg", "string", "fields", "any", "make", "Field", "len", "for", "key", "value", "switch", "type", "case", "append", "String", "int", "Int", "bool", "Bool", "default", "Any", "logger", "With", "LevelDebug", "Debug", "LevelInfo", "Info", "LevelWarn", "Warn", "LevelError", "Error", "panic", "fmt", "Sprintf", "unknown", "level"], "doc_head": "func InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\t\tlogger := l.With(f...)\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:InterceptorLogger", "package": "", "node_kind": "function", "receiver": "", "function_name": "InterceptorLogger", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.uber.org/zap"], "symbols_referenced_strict": ["Any", "Bool", "Context", "Debug", "Error", "Field", "Info", "Int", "InterceptorLogger", "Level", "LevelDebug", "LevelError", "LevelInfo", "LevelWarn", "Logger", "LoggerFunc", "Sprintf", "String", "Warn", "With", "context.Context", "fmt.Sprintf", "l.With", "logger.Debug", "logger.Error", "logger.Info", "logger.Warn", "logging.Level", "logging.LevelDebug", "logging.LevelError", "logging.LevelInfo", "logging.LevelWarn", "logging.Logger", "logging.LoggerFunc", "zap.Any", "zap.Bool", "zap.Field", "zap.Int", "zap.Logger", "zap.String"], "header_context_minimal": "package \nimport \"go.uber.org/zap\"", "summary_llm": "This Go function `InterceptorLogger` takes a Zap logger and returns a logging.Logger that logs messages at different levels (Debug, Info, Warn, Error) based on the provided level.", "keywords_llm": ["interceptorlogger", "zap.logger", "logging.logger", "logging.level", "debug", "info", "warn", "error", "fields", "switch statement"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 80, "end_line": 95, "text": "func newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\n\treturn cmd\n}\n", "n_tokens": 111, "primary_symbol": "newServeGrpcCommand", "primary_kind": "function", "primary_span": [80, 95], "def_symbols": ["newServeGrpcCommand"], "symbols": ["newServeGrpcCommand", "func", "cobra", "Command", "cmd", "Use", "grpc", "Short", "Start", "gRPC", "server", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runServeGrpc", "Args", "ExactArgs", "PersistentFlags", "Int", "app", "port", "service"], "doc_head": "func newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\treturn cmd\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:newServeGrpcCommand", "package": "", "node_kind": "function", "receiver": "", "function_name": "newServeGrpcCommand", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Args", "BindPFlags", "Command", "ExactArgs", "Flags", "Int", "PersistentFlags", "PreRunE", "RunE", "Short", "Start", "Use", "app.grpc", "cmd.Flags", "cmd.PersistentFlags", "cobra.Command", "cobra.ExactArgs", "viper.BindPFlags"], "header_context_minimal": "package ", "summary_llm": "This Go function `newServeGrpcCommand` creates a new gRPC server command using the Cobra library. It sets up command flags and binds them to Viper for configuration.", "keywords_llm": ["grpc", "server", "cobra", "command", "viper", "bindpflags", "int", "port"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go", "rel_path": "cmd/serve/grpc.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 96, "end_line": 250, "text": "func runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n\n\tawsCfg := aws.GetConfig(\n\t\tviper.GetString(\"aws.access-key-id\"),\n\t\tviper.GetString(\"aws.secret-access-key\"),\n\t\tviper.GetString(\"aws.session-token\"),\n\t\tviper.GetString(\"aws.region\"),\n\t\tviper.GetString(\"aws.endpoint-url\"),\n\t)\n\totelaws.AppendMiddlewares(&awsCfg.APIOptions)\n\n\tddb := aws.NewDynamoDbClientFromConfig(awsCfg)\n\n\tmappingsCache, err := lru.New[int, *foreca.Mapping](5_000)\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tmappingsRepository := adapters.NewMappingDynamoDBRepository(\n\t\tviper.GetString(\"mappings.dynamodb.table-name\"),\n\t\tddb,\n\t\tmappingsCache,\n\t)\n\n\tmemcachedRateLimiterConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tlimiter := ratelimit.NewSingleThreadLimiter(\n\t\tviper.GetInt64(\"foreca.requests-per-second\"),\n\t\ttime.Second,\n\t\tratelimit.NewMemcachedStorage(memcache.NewRawBinaryClient(0, memcachedRateLimiterConn), \"weather:proxies:\"),\n\t)\n\n\tlimiter.Start()\n\n\tforecaClient := clients.NewForecaClient(\n\t\t&http.Client{Timeout: 5 * time.Second},\n\t\tviper.GetString(\"foreca.endpoint-url\"),\n\t\tmap[string]string{\n\t\t\t\"format\":   viper.GetString(\"foreca.query.default.format\"),\n\t\t\t\"ftimes\":   viper.GetString(\"foreca.query.default.ftimes\"),\n\t\t\t\"tempunit\": viper.GetString(\"foreca.query.default.temp-unit\"),\n\t\t\t\"windunit\": viper.GetString(\"foreca.query.default.wind-unit\"),\n\t\t\t\"lang\":     viper.GetString(\"foreca.query.default.lang\"),\n\t\t},\n\t\tlimiter,\n\t\tclients.NewTransformer(),\n\t)\n\n\tmemcachedForecastsConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tforecastService := foreca.NewService(\n\t\tforecaClient,\n\t\tmappingsRepository,\n\t\tcache.NewMemcached(memcache.NewRawBinaryClient(1, memcachedForecastsConn)),\n\t\t\"weather:proxies:foreca:\",\n\t\tviper.GetDuration(\"foreca.expiration-duration\"),\n\t)\n\n\trecoveryOpts := []recovery.Option{\n\t\trecovery.WithRecoveryHandler(func(p any) error {\n\t\t\treturn status.Error(codes.Internal, \"We cannot serve your request right now. Please try again later.\")\n\t\t}),\n\t}\n\tloggingOpts := []logging.Option{\n\t\tlogging.WithLogOnEvents(logging.StartCall),\n\t\tlogging.WithFieldsFromContextAndCallMeta(func(ctx context.Context, c interceptors.CallMeta) logging.Fields {\n\t\t\tvar requestID string\n\t\t\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\t\t\tif m, found := md[requestid.MetadataKey]; found && len(m) > 0 {\n\t\t\t\t\trequestID = m[0]\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn logging.Fields{\"request_id\", requestID}\n\t\t}),\n\t}\n\tserver := grpc.NewServer(\n\t\tgrpc.StatsHandler(otelgrpctrace.NewServerHandler()),\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\totelgrpcmetric.UnaryServerInterceptor(),\n\t\t\trequestid.NewServerUnaryInterceptor(),\n\t\t\tlogging.UnaryServerInterceptor(InterceptorLogger(logger), loggingOpts...),\n\t\t\trecovery.UnaryServerInterceptor(recoveryOpts...),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\totelgrpcmetric.StreamServerInterceptor(),\n\t\t),\n\t)\n\tserverV0 := grpcv0.NewServer(forecastService)\n\tpbv0.RegisterForecaProxyServer(server, serverV0)\n\n\treflection.Register(server)\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", viper.GetInt(\"app.grpc.port\")))\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tgo func(s *grpc.Server, lis *net.Listener) {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := s.Serve(*lis); err != nil {\n\t\t\tlogger.Fatal(fmt.Sprintf(\"Failed to serve gRPC: %v\", err))\n\t\t}\n\t}(server, &listener)\n\n\ts := <-quit\n\tlogger.Info(fmt.Sprintf(\"Received signal %v\", s))\n\n\tserver.GracefulStop()\n\tlimiter.Stop()\n\tif err := tp.Shutdown(cmd.Context()); err != nil {\n\t\tlog.Error(context.TODO(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tclose(quit)\n\n\tlogger.Info(\"Application shutdown gracefully.\")\n\n\treturn nil\n}\n", "n_tokens": 1242, "primary_symbol": "runServeGrpc", "primary_kind": "function", "primary_span": [96, 250], "def_symbols": ["runServeGrpc"], "symbols": ["runServeGrpc", "func", "cmd", "cobra", "Command", "string", "error", "quit", "make", "chan", "Signal", "defer", "close", "logger", "log", "New", "WithService", "viper", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "SetLogger", "err", "xotel", "NewTracerProvider", "Context", "TracerProviderConfig", "ServiceName", "Endpoint", "otel", "tracer", "endpoint", "nil", "return", "errors", "Wrap", "failed", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "awsCfg", "aws", "GetConfig", "access", "key", "secret", "session", "token", "region", "url", "otelaws", "AppendMiddlewares", "APIOptions", "ddb", "NewDynamoDbClientFromConfig", "mappingsCache", "lru", "int", "foreca", "Mapping", "Panic", "Error", "mappingsRepository", "adapters", "NewMappingDynamoDBRepository", "mappings", "dynamodb", "table", "memcachedRateLimiterConn", "net", "Dial", "tcp", "memcached", "address", "limiter", "ratelimit", "NewSingleThreadLimiter", "GetInt64", "requests", "per", "second", "time", "Second", "NewMemcachedStorage", "memcache", "NewRawBinaryClient", "weather", "proxies", "Start", "forecaClient", "clients", "NewForecaClient", "http", "Client", "Timeout", "map", "format", "query", "default", "ftimes", "tempunit", "temp", "unit", "windunit", "wind", "lang", "NewTransformer", "memcachedForecastsConn", "forecastService", "NewService", "cache", "NewMemcached", "expiration", "duration", "recoveryOpts", "recovery", "Option", "WithRecoveryHandler", "any", "status", "codes", "Internal", "cannot", "serve", "your", "request", "right", "now", "Please", "try", "again", "later", "loggingOpts", "WithLogOnEvents", "StartCall", "WithFieldsFromContextAndCallMeta", "ctx", "context", "interceptors", "CallMeta", "Fields", "var", "requestID", "metadata", "FromIncomingContext", "found", "requestid", "MetadataKey", "len", "request_id", "server", "grpc", "NewServer", "StatsHandler", "otelgrpctrace", "NewServerHandler", "ChainUnaryInterceptor", "otelgrpcmetric", "UnaryServerInterceptor", "NewServerUnaryInterceptor", "InterceptorLogger", "ChainStreamInterceptor", "StreamServerInterceptor", "serverV0", "grpcv0", "pbv0", "RegisterForecaProxyServer", "reflection", "Register", "listener", "Listen", "fmt", "Sprintf", "GetInt", "port", "Server", "lis", "Listener", "Info", "started", "Ready", "accept", "incoming", "Serve", "Fatal", "Failed", "gRPC", "Received", "signal", "GracefulStop", "Stop", "Shutdown", "TODO", "occurred", "while", "shutting", "down", "the", "zap", "Application", "shutdown", "gracefully"], "doc_head": "func runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:runServeGrpc", "package": "", "node_kind": "function", "receiver": "", "function_name": "runServeGrpc", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/otel", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["APIOptions", "AppendMiddlewares", "Application", "Baggage", "CallMeta", "ChainStreamInterceptor", "ChainUnaryInterceptor", "Client", "Command", "Context", "Dial", "Endpoint", "Error", "Failed", "Fatal", "Fields", "FromIncomingContext", "GetBool", "GetConfig", "GetDuration", "GetInt", "GetInt64", "GetString", "GracefulStop", "Info", "InterceptorLogger", "Internal", "Interval", "Listen", "Listener", "Mapping", "MetadataKey", "Meter", "MeterProviderConfig", "New", "NewCompositeTextMapPropagator", "NewDynamoDbClientFromConfig", "NewForecaClient", "NewMappingDynamoDBRepository", "NewMemcached", "NewMemcachedStorage", "NewMeterProvider", "NewRawBinaryClient", "NewServer", "NewServerHandler", "NewServerUnaryInterceptor", "NewService", "NewSingleThreadLimiter", "NewTracerProvider", "NewTransformer", "Option", "Panic", "Please", "Ready", "Received", "Register", "RegisterForecaProxyServer", "Second", "Serve", "Server", "ServiceName", "SetGlobalMeter", "SetGlobalTracer", "SetLogger", "SetMeterProvider", "SetTextMapPropagator", "SetTracerProvider", "Shutdown", "Signal", "Sprintf", "Start", "StartCall", "StatsHandler", "Stop", "StreamServerInterceptor", "TODO", "Timeout", "TraceContext", "Tracer", "TracerProviderConfig", "UnaryServerInterceptor", "We", "WithDebugEnabled", "WithEncoding", "WithFieldsFromContextAndCallMeta", "WithLogOnEvents", "WithRecoveryHandler", "WithService", "Wrap", "adapters.NewMappingDynamoDBRepository", "app.grpc", "app.name", "aws.GetConfig", "aws.NewDynamoDbClientFromConfig", "aws.access", "aws.endpoint", "aws.region", "aws.secret", "aws.session", "awsCfg.APIOptions", "cache.NewMemcached", "clients.NewForecaClient", "clients.NewTransformer", "cmd.Context", "cobra.Command", "codes.Internal", "context.Context", "context.TODO", "default.format", "default.ftimes", "default.lang", "default.temp", "default.wind", "err.Error", "errors.Wrap", "fmt.Sprintf", "foreca.Mapping", "foreca.NewService", "foreca.endpoint", "foreca.expiration", "foreca.query", "foreca.requests", "grpc.ChainStreamInterceptor", "grpc.ChainUnaryInterceptor", "grpc.NewServer", "grpc.Server", "grpc.StatsHandler", "grpcv0.NewServer", "http.Client", "interceptors.CallMeta", "limiter.Start", "limiter.Stop", "log.Error", "log.New", "log.SetLogger", "log.WithDebugEnabled", "log.WithEncoding", "log.WithService", "logger.Fatal", "logger.Info", "logger.Panic", "logging.Fields", "logging.Option", "logging.StartCall", "logging.UnaryServerInterceptor", "logging.WithFieldsFromContextAndCallMeta", "logging.WithLogOnEvents", "logging.debug", "logging.encoding", "lru.New", "mappings.dynamodb", "memcache.NewRawBinaryClient", "memcached.address", "metadata.FromIncomingContext", "mp.Meter", "net.Dial", "net.Listen", "net.Listener", "os.Signal", "otel.SetMeterProvider", "otel.SetTextMapPropagator", "otel.SetTracerProvider", "otel.meter", "otel.tracer", "otelaws.AppendMiddlewares", "otelgrpcmetric.StreamServerInterceptor", "otelgrpcmetric.UnaryServerInterceptor", "otelgrpctrace.NewServerHandler", "pbv0.RegisterForecaProxyServer", "propagation.Baggage", "propagation.NewCompositeTextMapPropagator", "propagation.TraceContext", "ratelimit.NewMemcachedStorage", "ratelimit.NewSingleThreadLimiter", "recovery.Option", "recovery.UnaryServerInterceptor", "recovery.WithRecoveryHandler", "reflection.Register", "requestid.MetadataKey", "requestid.NewServerUnaryInterceptor", "s.Serve", "server.GracefulStop", "status.Error", "time.Second", "tp.Shutdown", "tp.Tracer", "viper.GetBool", "viper.GetDuration", "viper.GetInt", "viper.GetInt64", "viper.GetString", "xotel.MeterProviderConfig", "xotel.NewMeterProvider", "xotel.NewTracerProvider", "xotel.SetGlobalMeter", "xotel.SetGlobalTracer", "xotel.TracerProviderConfig", "zap.Error"], "header_context_minimal": "package \nimport (\n    \"go.impalastudios.com/otel\"\n    \"go.uber.org/zap\"\n    \"time\"\n)", "summary_llm": "This code defines a function to serve gRPC requests. It configures logging, tracing, and metrics, initializes clients and repositories, sets up rate limiting, and starts a gRPC server that registers and handles specific services.", "keywords_llm": ["grpc", "logging", "tracing", "metrics", "clients", "repositories", "rate limiting", "server setup"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\n\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeGrpcCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}\n", "n_tokens": 139, "primary_symbol": "New", "primary_kind": "function", "primary_span": [8, 22], "def_symbols": ["New"], "symbols": ["New", "package", "serve", "import", "github", "com", "spf13", "cobra", "time", "func", "Command", "cmd", "Use", "Short", "Serve", "AddCommand", "newServeGrpcCommand", "PersistentFlags", "String", "otel", "tracer", "endpoint", "localhost", "The", "URL", "the", "tracing", "collector", "meter", "Duration", "interval", "Second", "which", "metrics", "will", "reported", "return"], "doc_head": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\tcmd.AddCommand(newServeGrpcCommand())\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\treturn cmd\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:New", "package": "serve", "node_kind": "function", "receiver": "", "function_name": "New", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AddCommand", "Command", "Duration", "New", "PersistentFlags", "Second", "Serve", "Short", "String", "The", "URL", "Use", "cmd.AddCommand", "cmd.PersistentFlags", "cobra.Command", "github.com", "otel.meter", "otel.tracer", "time.Second"], "header_context_minimal": "package serve\nimport \"time\"", "summary_llm": "The `New` function in the `serve` package creates a new Cobra command for serving and configures it with persistent flags for tracing and metering endpoints and intervals. It includes a subcommand for gRPC service.", "keywords_llm": ["cobra.command", "newservegrpccommand", "otel.tracer.endpoint", "otel.meter.endpoint", "otel.meter.interval", "time.second", "serve", "cmd.addcommand", "cmd.persistentflags", "duration"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 33, "text": "package foreca\n\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\n\ntype PressureTrend int\n\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\n\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\n\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\n\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\n\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}\n", "n_tokens": 169, "primary_symbol": "String", "primary_kind": "function", "primary_span": [17, 33], "def_symbols": ["String", "IsFalling", "IsSteady"], "symbols": ["String", "IsFalling", "IsSteady", "package", "foreca", "type", "Mapping", "struct", "int", "ProviderID", "Timezone", "string", "PressureTrend", "const", "PressureTrendFalling", "iota", "PressureTrendSteady", "PressureTrendRising", "func", "return", "Falling", "Steady", "Rising", "Pressure", "Millibar", "float64", "json", "mbar", "Trend", "bool"], "doc_head": "package foreca\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\ntype PressureTrend int\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t PressureTrend).String", "package": "foreca", "node_kind": "method", "receiver": "t PressureTrend", "function_name": "", "method_name": "String", "type_name": "Mapping", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Falling", "ID", "IsFalling", "IsSteady", "Mapping", "Millibar", "Pressure", "PressureTrend", "PressureTrendFalling", "PressureTrendRising", "PressureTrendSteady", "ProviderID", "Rising", "Steady", "String", "Timezone", "Trend", "p.Trend"], "header_context_minimal": "package foreca\n// receiver: t PressureTrend", "summary_llm": "This Go code defines constants for pressure trends and a `PressureTrend` type. It also includes methods to convert the trend to a string representation and check if a pressure reading indicates falling or steady conditions.", "keywords_llm": ["pressure trend", "constants", "string conversion", "isfalling", "issteady", "pressuretrend", "millibar", "trend"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 34, "end_line": 72, "text": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\n\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)\n\ntype WeatherCode string\n\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\n\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\n\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}\n", "n_tokens": 287, "primary_symbol": "IsRising", "primary_kind": "function", "primary_span": [34, 72], "def_symbols": ["IsRising"], "symbols": ["IsRising", "func", "Pressure", "bool", "return", "Trend", "PressureTrendRising", "const", "WeatherCodeClear", "clear", "WeatherCodeMostlySunny", "mostlysunny", "WeatherCodePartlyCloudy", "partlycloudy", "WeatherCodeMostlyCloudy", "mostlycloudy", "WeatherCodeCloudy", "cloudy", "WeatherCodeHazy", "hazy", "WeatherCodeFog", "fog", "WeatherCodeChanceOfRain", "chancerain", "WeatherCodeRain", "rain", "WeatherCodeChanceOfThunderstorms", "chancetstorms", "WeatherCodeThunderstorms", "tstorms", "WeatherCodeChanceOfSleet", "chancesleet", "WeatherCodeSleet", "sleet", "WeatherCodeChanceOfSnow", "chancesnow", "WeatherCodeSnow", "snow", "type", "WeatherCode", "string", "WeatherCondition", "struct", "Code", "json", "Description", "WindDirection", "Abbreviation", "Degrees", "float64", "deg", "Wind", "Direction", "Speed"], "doc_head": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)\ntype WeatherCode string\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(p Pressure).IsRising", "package": "", "node_kind": "method", "receiver": "p Pressure", "function_name": "", "method_name": "IsRising", "type_name": "WeatherCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Code", "Degrees", "Description", "Direction", "IsRising", "Pressure", "PressureTrendRising", "Speed", "Trend", "WeatherCode", "WeatherCodeChanceOfRain", "WeatherCodeChanceOfSleet", "WeatherCodeChanceOfSnow", "WeatherCodeChanceOfThunderstorms", "WeatherCodeClear", "WeatherCodeCloudy", "WeatherCodeFog", "WeatherCodeHazy", "WeatherCodeMostlyCloudy", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeRain", "WeatherCodeSleet", "WeatherCodeSnow", "WeatherCodeThunderstorms", "WeatherCondition", "Wind", "WindDirection", "p.Trend"], "header_context_minimal": "package \n// receiver: p Pressure", "summary_llm": "The Go code defines a `Pressure` struct with a method `IsRising()` that checks if the pressure trend is rising. It also includes constants and types related to weather conditions and wind.", "keywords_llm": ["pressure", "isrising", "trend", "weathercode", "chancerain", "rain", "thunderstorms", "sleet", "snow", "winddirection", "degrees"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 73, "end_line": 94, "text": "type WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}\n\ntype CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n", "n_tokens": 208, "primary_symbol": "", "primary_kind": "", "primary_span": [73, 94], "def_symbols": [], "symbols": ["type", "WindGust", "struct", "Wind", "json", "Gust", "float64", "CurrentCondition", "Epoch", "int64", "tms", "Visibility", "Precipitation", "PrecipitationNextHour", "prn", "WeatherCondition", "WeatherConditionNextHour", "wcn", "Temperature", "TemperatureFeelsLike", "HumidityPercentage", "int", "DewPoint", "HeatIndex", "Pressure", "UVIndex", "uvi"], "doc_head": "type WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}\ntype CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:WindGust (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "WindGust", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "Epoch", "Gust", "HeatIndex", "HumidityPercentage", "Precipitation", "PrecipitationNextHour", "Pressure", "Temperature", "TemperatureFeelsLike", "UVIndex", "Visibility", "WeatherCondition", "WeatherConditionNextHour", "Wind", "WindGust"], "header_context_minimal": "package ", "summary_llm": "The Go code defines two structs: `WindGust` and `CurrentCondition`. The `WindGust` struct contains wind-related data, including wind speed and gust. The `CurrentCondition` struct includes various weather parameters such as temperature, humidity, precipitation, and more.", "keywords_llm": ["currentcondition", "windgust", "temperature", "humidity", "precipitation", "pressure", "uvindex", "visibility", "weathercondition", "dewpoint", "heatindex"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 95, "end_line": 114, "text": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}\n", "n_tokens": 220, "primary_symbol": "", "primary_kind": "", "primary_span": [95, 114], "def_symbols": [], "symbols": ["type", "DailyCondition", "struct", "Epoch", "int64", "json", "tms", "MinTemperature", "float64", "MaxTemperature", "Precipitation", "PrecipitationDay", "pry", "PrecipitationNight", "prt", "Snow", "SnowDay", "SnowNight", "PrecipitationProbability", "int", "Wind", "AverageHumidityPercentage", "rhe", "WeatherCondition", "WeatherConditionNight", "wct", "UVIndex", "uvi", "SunriseEpoch", "rise", "SunsetEpoch", "set"], "doc_head": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:DailyCondition (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "DailyCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["AverageHumidityPercentage", "DailyCondition", "Epoch", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Snow", "SnowDay", "SnowNight", "SunriseEpoch", "SunsetEpoch", "UVIndex", "WeatherCondition", "WeatherConditionNight", "Wind"], "header_context_minimal": "package ", "summary_llm": "The `DailyCondition` struct represents the weather conditions for a single day, including temperature extremes, precipitation, snowfall, wind, humidity, and weather phenomena. It includes fields like `Epoch`, `MinTemperature`, `MaxTemperature`, and more.", "keywords_llm": ["dailycondition", "epoch", "temperature", "precipitation", "snow", "wind", "humidity", "weather", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "internal/foreca/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 115, "end_line": 140, "text": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\n\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 200, "primary_symbol": "", "primary_kind": "", "primary_span": [115, 140], "def_symbols": [], "symbols": ["type", "HourlyCondition", "struct", "Epoch", "int64", "json", "tms", "Temperature", "float64", "TemperatureFeelsLike", "WeatherCondition", "Precipitation", "Snow", "PrecipitationProbability", "int", "Wind", "Pressure", "HumidityPercentage", "UVIndex", "uvi", "Forecast", "CurrentCondition", "DailyConditions", "DailyCondition", "HourlyConditions", "CachedForecast", "Key", "string", "Value", "byte", "Expiration", "int32"], "doc_head": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:HourlyCondition (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "HourlyCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CachedForecast", "CurrentCondition", "DailyCondition", "DailyConditions", "Epoch", "Expiration", "Forecast", "HourlyCondition", "HourlyConditions", "HumidityPercentage", "Key", "Precipitation", "PrecipitationProbability", "Pressure", "Snow", "Temperature", "TemperatureFeelsLike", "UVIndex", "Value", "WeatherCondition", "Wind"], "header_context_minimal": "package ", "summary_llm": "This Go code defines data structures for handling weather forecasts. The `HourlyCondition` struct represents the conditions at specific times throughout a day, including temperature, precipitation, and wind details. The `Forecast` struct aggregates current, daily, and hourly forecast information. The `CachedForecast` struct is used to cache weather forecasts with an expiration time.", "keywords_llm": ["hourlycondition", "forecast", "currentcondition", "dailycondition", "epoch", "temperature", "humiditypercentage", "precipitation", "pressure", "wind", "uvi", "cachedforecast"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "package foreca\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}\n\n\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\n\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}\n", "n_tokens": 266, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 44], "def_symbols": [], "symbols": ["package", "foreca", "import", "context", "encoding", "json", "fmt", "github", "com", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "cache", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "golang", "sync", "singleflight", "strings", "time", "generate", "bin", "mockgen", "source", "service", "destination", "mocks", "service_mocks", "type", "providerClient", "interface", "GetForecastForLocation", "ctx", "Context", "int", "loc", "Location", "Forecast", "error", "mappingsRepository", "Get", "Mapping", "cacheClient", "key", "string", "Item", "Set", "value", "byte", "Service", "struct", "Group", "provider", "mappings", "cacheKeyPrefix", "cacheExpirationDuration", "Duration"], "doc_head": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}\n\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Service (struct)", "package": "foreca", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["golang.org/x/sync/singleflight", "time"], "symbols_referenced_strict": ["Context", "Duration", "Forecast", "Get", "GetForecastForLocation", "Group", "Item", "Location", "Mapping", "Service", "Set", "cache.Item", "context.Context", "github.com", "go.impalastudios", "go.opentelemetry", "go.uber", "golang.org", "service.go", "service_mocks.go", "singleflight.Group", "time.Duration", "time.Location"], "header_context_minimal": "package foreca\nimport (\n    \"golang.org/x/sync/singleflight\"\n    \"time\"\n)", "summary_llm": "This Go code defines a `Service` struct within the `foreca` package. The `Service` struct provides methods for fetching weather forecasts using a provider client, caching results to avoid redundant requests, and retrieving location mappings from a repository.", "keywords_llm": ["service", "providerclient", "getforecastforlocation", "cache", "caching", "location", "mapping", "time.duration", "singleflight", "error"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 54, "text": "func NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}\n", "n_tokens": 75, "primary_symbol": "NewService", "primary_kind": "function", "primary_span": [45, 54], "def_symbols": ["NewService"], "symbols": ["NewService", "func", "provider", "providerClient", "mappings", "mappingsRepository", "cache", "cacheClient", "cacheKeyPrefix", "string", "cacheExpirationDuration", "time", "Duration", "Service", "return"], "doc_head": "func NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewService", "package": "", "node_kind": "function", "receiver": "", "function_name": "NewService", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Duration", "NewService", "Service", "time.Duration"], "header_context_minimal": "package \nimport \"time\"", "summary_llm": "The function `NewService` initializes a new `Service` instance with the provided dependencies and returns a pointer to it.", "keywords_llm": ["service", "newservice", "provider", "mappings", "cache", "cachekeyprefix", "cachexpduration", "time.duration", "service.go"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 55, "end_line": 87, "text": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}\n", "n_tokens": 247, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [55, 87], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "func", "Service", "ctx", "context", "Context", "int", "Forecast", "error", "span", "xotel", "Tracer", "Start", "service", "forecast", "location", "trace", "WithSpanKind", "SpanKindInternal", "defer", "End", "SetAttributes", "attribute", "Int", "location_id", "mapping", "err", "mappings", "Get", "nil", "SetStatus", "codes", "Error", "Mapping", "not", "found", "RecordError", "log", "Cannot", "get", "for", "zap", "errors", "ErrMappingNotFound", "return", "ErrLocationNotFound", "Wrap", "cannot", "loc", "time", "LoadLocation", "Timezone", "Unsupported", "timezone", "Any", "unsupported"], "doc_head": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Service).GetForecastForLocation", "package": "", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/otel", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Any", "Cannot", "Context", "End", "ErrLocationNotFound", "ErrMappingNotFound", "Error", "Forecast", "Get", "GetForecastForLocation", "Int", "Is", "LoadLocation", "Mapping", "RecordError", "Service", "SetAttributes", "SetStatus", "SpanKindInternal", "Start", "Timezone", "Tracer", "Unsupported", "WithSpanKind", "Wrap", "attribute.Int", "codes.Error", "context.Context", "errors.Is", "errors.Wrap", "log.Error", "mapping.Timezone", "s.mappings", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "time.LoadLocation", "trace.SpanKindInternal", "trace.WithSpanKind", "xotel.Tracer", "zap.Any", "zap.Error", "zap.Int"], "header_context_minimal": "package \nimport (\n    \"go.impalastudios.com/otel\"\n    \"go.uber.org/zap\"\n    \"time\"\n)\n// receiver: s *Service", "summary_llm": "The `GetForecastForLocation` method in the `Service` struct retrieves weather forecasts for a given location ID by first mapping the ID to a timezone and then loading the forecast. It uses OpenTelemetry tracing and logging to record errors and set attributes.", "keywords_llm": ["service", "getforecastforlocation", "context", "id", "forecast", "mapping", "timezone", "loadlocation", "trace", "logging"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 88, "end_line": 160, "text": "\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}\n", "n_tokens": 567, "primary_symbol": "", "primary_kind": "", "primary_span": [88, 160], "def_symbols": [], "symbols": ["result", "err", "getSingleFlightKey", "mapping", "func", "interface", "error", "cache", "Get", "getCacheKeyForLocation", "ProviderID", "nil", "log", "Debug", "ctx", "Cache", "hit", "Checking", "for", "freshness", "zap", "Int", "var", "item", "expirableCacheItem", "json", "Unmarshal", "Value", "time", "Now", "UTC", "Unix", "ExpiresAtUnix", "span", "SetAttributes", "attribute", "Bool", "cache_hit", "true", "Returning", "cached", "forecast", "return", "Forecast", "cacheHit", "provider", "GetForecastForLocation", "loc", "Error", "occurred", "while", "retrieving", "location", "Any", "errors", "ErrRequestThrottled", "Request", "throttled", "without", "Info", "stale", "Marshal", "Add", "cacheExpirationDuration", "Cannot", "marshal", "Caching", "Set", "response", "SetStatus", "codes", "RecordError"], "doc_head": "\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\t\t\t\tv", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["encoding/json", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Add", "Any", "Bool", "Cache", "Caching", "Cannot", "Checking", "Debug", "Do", "ErrRequestThrottled", "Error", "ExpiresAtUnix", "Forecast", "Get", "GetForecastForLocation", "Info", "Int", "Is", "Marshal", "Now", "ProviderID", "RecordError", "Request", "Returning", "Set", "SetAttributes", "SetStatus", "UTC", "Unix", "Unmarshal", "Value", "attribute.Bool", "codes.Error", "errors.Is", "i.Value", "item.ExpiresAtUnix", "item.Forecast", "json.Marshal", "json.Unmarshal", "log.Debug", "log.Error", "log.Info", "mapping.ProviderID", "s.cache", "s.cacheExpirationDuration", "s.getCacheKeyForLocation", "s.getSingleFlightKey", "s.provider", "s.sf", "span.RecordError", "span.SetAttributes", "span.SetStatus", "time.Now", "zap.Any", "zap.Error", "zap.Int"], "header_context_minimal": "package \nimport (\n    \"encoding/json\"\n    \"go.uber.org/zap\"\n    \"time\"\n)", "summary_llm": "The function `GetForecastForLocation` fetches weather forecast data for a given location. It uses caching and single-flight patterns to optimize requests and reduce load.", "keywords_llm": ["getforecastforlocation", "cache", "singleflight", "forecast", "providerid", "errrequestthrottled", "logdebug", "jsonmarshal"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "internal/foreca/service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 161, "end_line": 173, "text": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\n\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\n\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}\n", "n_tokens": 98, "primary_symbol": "getCacheKeyForLocation", "primary_kind": "function", "primary_span": [161, 173], "def_symbols": ["getCacheKeyForLocation", "getSingleFlightKey"], "symbols": ["getCacheKeyForLocation", "getSingleFlightKey", "func", "Service", "int", "string", "return", "fmt", "Sprintf", "strings", "Trim", "cacheKeyPrefix", "mapping", "Mapping", "foreca", "locations", "ProviderID", "type", "expirableCacheItem", "struct", "ExpiresAtUnix", "int64", "json", "exp", "Forecast"], "doc_head": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Service).getCacheKeyForLocation", "package": "", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "getCacheKeyForLocation", "type_name": "expirableCacheItem", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["ExpiresAtUnix", "Forecast", "Mapping", "ProviderID", "Service", "Sprintf", "Trim", "fmt.Sprintf", "mapping.ProviderID", "s.cacheKeyPrefix", "strings.Trim"], "header_context_minimal": "package \n// receiver: s *Service", "summary_llm": "The Go code defines methods for generating cache keys in a service. The `getCacheKeyForLocation` method generates a key based on the cache prefix and location ID, while the `getSingleFlightKey` method generates a key for a single flight using a mapping's provider ID.", "keywords_llm": ["cache", "key", "prefix", "location", "id", "single", "flight", "mapping", "provider", "id"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 46, "text": "package foreca_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n\nfunc (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n", "n_tokens": 280, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [24, 46], "def_symbols": ["SetupSuite", "TestGetForecastForLocationMappingError"], "symbols": ["SetupSuite", "TestGetForecastForLocationMappingError", "package", "foreca_test", "import", "context", "errors", "fmt", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "mocks", "pkg", "cache", "uber", "org", "mock", "gomock", "testing", "time", "type", "serviceTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController", "mappings", "NewMockmappingsRepository", "EXPECT", "Get", "Any", "Return", "nil", "New", "error", "NewService", "NewMockproviderClient", "NewMockcacheClient", "proxies", "test", "Second", "err", "GetForecastForLocation", "TODO", "Assert", "NotNil", "ErrorContains", "cannot", "get", "mapping"], "doc_head": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t}\n)\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\nfunc (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).SetupSuite", "package": "foreca_test", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Any", "Assert", "Controller", "EXPECT", "ErrorContains", "Get", "GetForecastForLocation", "New", "NewController", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "NotNil", "Return", "Second", "SetupSuite", "Suite", "T", "TODO", "TestGetForecastForLocationMappingError", "context.TODO", "errors.New", "foreca.NewService", "github.com", "go.impalastudios", "go.uber", "gomock.Any", "gomock.Controller", "gomock.NewController", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "s.GetForecastForLocation", "suite.Assert", "suite.Suite", "suite.T", "suite.mockController", "time.Second"], "header_context_minimal": "package foreca_test\nimport \"time\"\n// receiver: suite *serviceTestSuite", "summary_llm": "The Go code sets up a test suite for the `foreca` service, specifically testing the `GetForecastForLocation` method with a mock mappings repository that returns an error. It verifies that the service correctly handles this error and returns an appropriate message.", "keywords_llm": ["servicetestsuite", "setupsuite", "testgetforecastforlocationmappingerror", "mocks.newmockmappingsrepository", "mappings.expect", "foreca.newservice", "getforecastforlocation", "context.todo", "errors.new", "assert", "notnil", "errorcontains"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 47, "end_line": 69, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}\n", "n_tokens": 165, "primary_symbol": "TestGetForecastForLocationInvalidLocation", "primary_kind": "function", "primary_span": [47, 69], "def_symbols": ["TestGetForecastForLocationInvalidLocation"], "symbols": ["TestGetForecastForLocationInvalidLocation", "func", "suite", "serviceTestSuite", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "invalid", "nil", "NewService", "NewMockproviderClient", "NewMockcacheClient", "weather", "proxies", "test", "time", "Second", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "unsupported", "timezone"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationInvalidLocation", "package": "", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationInvalidLocation", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Any", "Assert", "EXPECT", "ErrorContains", "Get", "GetForecastForLocation", "ID", "Mapping", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "NotNil", "ProviderID", "Return", "Second", "TODO", "TestGetForecastForLocationInvalidLocation", "Timezone", "context.TODO", "foreca.Mapping", "foreca.NewService", "gomock.Any", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *serviceTestSuite", "summary_llm": "This code appears to be a simple Go program that prints 'Hello, World!' to the console.", "keywords_llm": ["go", "program", "console", "print", "hello, world!", "main function", "package main", "import statements", "standard library", "execution entry point"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 70, "end_line": 100, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}\n", "n_tokens": 247, "primary_symbol": "TestGetForecastForLocationNonCacheForecastError", "primary_kind": "function", "primary_span": [70, 100], "def_symbols": ["TestGetForecastForLocationNonCacheForecastError"], "symbols": ["TestGetForecastForLocationNonCacheForecastError", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "errors", "New", "error", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "cache", "miss", "NewService", "Second", "err", "context", "TODO", "Assert", "NotNil", "ErrorContains"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationNonCacheForecastError", "package": "", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationNonCacheForecastError", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Amsterdam", "Any", "Assert", "EXPECT", "ErrorContains", "Europe", "Get", "GetForecastForLocation", "ID", "LoadLocation", "Mapping", "New", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "NotNil", "ProviderID", "Return", "Second", "String", "TODO", "TestGetForecastForLocationNonCacheForecastError", "Timezone", "cacheClient.EXPECT", "context.TODO", "errors.New", "foreca.Mapping", "foreca.NewService", "gomock.Any", "loc.String", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "provider.EXPECT", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.LoadLocation", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *serviceTestSuite", "summary_llm": "The Go code tests the `GetForecastForLocation` method of a service, simulating a scenario where a cache miss occurs and a provider error is returned. The test asserts that the resulting error contains the specific provider error message.", "keywords_llm": ["servicetestsuite", "getforecastforlocation", "cacheclient", "providererror", "mocks.newmockmappingsrepository", "context.todo", "time.loadlocation", "assert", "errorcontains"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 101, "end_line": 140, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 347, "primary_symbol": "TestGetForecastForLocationSettingCacheError", "primary_kind": "function", "primary_span": [101, 140], "def_symbols": ["TestGetForecastForLocationSettingCacheError"], "symbols": ["TestGetForecastForLocationSettingCacheError", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "Forecast", "CurrentCondition", "DailyConditions", "make", "DailyCondition", "HourlyConditions", "HourlyCondition", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "errors", "New", "cache", "miss", "Set", "error", "NewService", "Second", "err", "context", "TODO", "Assert", "Nil", "NotNil"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentConditi", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationSettingCacheError", "package": "", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationSettingCacheError", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Amsterdam", "Any", "Assert", "CurrentCondition", "DailyCondition", "DailyConditions", "EXPECT", "Europe", "Forecast", "Get", "GetForecastForLocation", "HourlyCondition", "HourlyConditions", "ID", "LoadLocation", "Mapping", "New", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "Nil", "NotNil", "ProviderID", "Return", "Second", "Set", "String", "TODO", "TestGetForecastForLocationSettingCacheError", "Timezone", "cacheClient.EXPECT", "context.TODO", "errors.New", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "foreca.Mapping", "foreca.NewService", "gomock.Any", "loc.String", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "provider.EXPECT", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.LoadLocation", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *serviceTestSuite", "summary_llm": "The `TestGetForecastForLocationSettingCacheError` function tests the `GetForecastForLocation` method of the `Service` struct in a service test suite. It sets up mock objects for `mappingsRepository`, `providerClient`, and `cacheClient`, expecting specific interactions with these mocks to simulate cache errors during forecast retrieval.", "keywords_llm": ["servicetestsuite", "getforecastforlocation", "service", "mocks.newmockmappingsrepository", "mocks.newmockproviderclient", "mocks.newmockcacheclient", "cache miss", "cache error", "context.todo", "1*time.second"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 141, "end_line": 180, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 368, "primary_symbol": "TestGetForecastForLocationFromCache", "primary_kind": "function", "primary_span": [141, 180], "def_symbols": ["TestGetForecastForLocationFromCache"], "symbols": ["TestGetForecastForLocationFromCache", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "Times", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "cache", "Item", "Key", "locations", "Value", "byte", "fmt", "Sprintf", "exp", "Now", "UTC", "Add", "Hour", "Unix", "Expiration", "int32", "Set", "NewService", "Second", "err", "context", "TODO", "Assert", "Nil", "NotNil", "CurrentCondition", "DailyConditions", "HourlyConditions"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentConditi", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationFromCache", "package": "", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationFromCache", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Add", "Amsterdam", "Any", "Assert", "CurrentCondition", "DailyConditions", "EXPECT", "Europe", "Expiration", "Get", "GetForecastForLocation", "Hour", "HourlyConditions", "ID", "Item", "Key", "LoadLocation", "Mapping", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "Nil", "NotNil", "Now", "ProviderID", "Return", "Second", "Set", "Sprintf", "String", "TODO", "TestGetForecastForLocationFromCache", "Times", "Timezone", "UTC", "Unix", "Value", "cache.Item", "cacheClient.EXPECT", "context.TODO", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "fmt.Sprintf", "foreca.Mapping", "foreca.NewService", "gomock.Any", "loc.String", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "provider.EXPECT", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.Hour", "time.LoadLocation", "time.Now", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *serviceTestSuite", "summary_llm": "The `TestGetForecastForLocationFromCache` function in Go tests the `GetForecastForLocation` method of a `foreca.Service`. It sets up mock objects for dependencies: `mappingsRepository`, `providerClient`, and `cacheClient`. The test verifies that when fetching a forecast from cache, it retrieves data without querying the provider or setting new data in the cache.", "keywords_llm": ["servicetestsuite", "testgetforecastforlocationfromcache", "mocks.newmockmappingsrepository", "mocks.newmockproviderclient", "mocks.newmockcacheclient", "foreca.mapping", "foreca.newservice", "getforecastforlocation", "context.todo", "suite.assert"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "internal/foreca/service_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 181, "end_line": 184, "text": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}\n", "n_tokens": 19, "primary_symbol": "TestService", "primary_kind": "function", "primary_span": [181, 184], "def_symbols": ["TestService"], "symbols": ["TestService", "func", "testing", "suite", "Run", "new", "serviceTestSuite"], "doc_head": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:TestService", "package": "", "node_kind": "function", "receiver": "", "function_name": "TestService", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Run", "T", "TestService", "suite.Run", "testing.T"], "header_context_minimal": "package ", "summary_llm": "The code defines a function that takes an integer and returns its square.", "keywords_llm": ["function", "integer", "return", "square"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go", "rel_path": "internal/foreca/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package foreca\n\nimport \"errors\"\n\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)\n", "n_tokens": 50, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "foreca", "import", "errors", "var", "ErrMappingNotFound", "New", "mapping", "not", "found", "ErrRequestThrottled", "request", "throttled", "ErrLocationNotFound", "location"], "doc_head": "package foreca\nimport \"errors\"\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "foreca", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ErrLocationNotFound", "ErrMappingNotFound", "ErrRequestThrottled", "New", "errors.New"], "header_context_minimal": "package foreca", "summary_llm": "This Go code defines a function that calculates the sum of two integers and returns the result.", "keywords_llm": ["go", "function", "sum", "integers", "return"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}\n\n// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 284, "primary_symbol": "NewMockproviderClient", "primary_kind": "function", "primary_span": [34, 44], "def_symbols": ["NewMockproviderClient", "EXPECT"], "symbols": ["NewMockproviderClient", "EXPECT", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "time", "foreca", "impalastudios", "com", "weather", "foreca_proxy", "internal", "cache", "pkg", "gomock", "uber", "org", "mock", "MockproviderClient", "providerClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockproviderClientMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}\n// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockproviderClient).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockproviderClient", "function_name": "NewMockproviderClient", "method_name": "EXPECT", "type_name": "MockproviderClient", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Code", "Controller", "DO", "EDIT", "EXPECT", "Generated", "GoMock", "MockGen", "MockproviderClient", "MockproviderClientMockRecorder", "NOT", "NewMockproviderClient", "Package", "Source", "go.impalastudios", "go.uber", "gomock.Controller", "m.recorder", "mock.recorder", "service.go", "service_mocks.go"], "header_context_minimal": "package mocks\n// receiver: m *MockproviderClient", "summary_llm": "The Go code defines a mock implementation of `providerClient` interface using the GoMock framework. It includes methods for creating new mock instances and expecting method calls.", "keywords_llm": ["mockgen", "gomock", "providerclient", "mockproviderclient", "newmockproviderclient", "expect", "goimpalastudios", "weatherforecaproxy"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 70, "text": "// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}\n", "n_tokens": 261, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [46, 70], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "mocks", "base", "method", "func", "MockproviderClient", "ctx", "context", "Context", "int", "loc", "time", "Location", "foreca", "Forecast", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockproviderClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "MockmappingsRepository", "mappingsRepository", "interface", "type", "struct", "Controller", "recorder", "MockmappingsRepositoryMockRecorder", "the", "for"], "doc_head": "// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockproviderClient).GetForecastForLocation", "package": "", "node_kind": "method", "receiver": "m *MockproviderClient", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "MockmappingsRepository", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Call", "Context", "Controller", "Forecast", "GetForecastForLocation", "Helper", "Location", "MockmappingsRepository", "MockmappingsRepositoryMockRecorder", "MockproviderClient", "MockproviderClientMockRecorder", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "context.Context", "ctrl.RecordCallWithMethodType", "ctrl.T", "foreca.Forecast", "gomock.Call", "gomock.Controller", "m.ctrl", "mr.mock", "reflect.TypeOf", "time.Location"], "header_context_minimal": "package \nimport \"time\"\n// receiver: m *MockproviderClient", "summary_llm": "This Go code defines mock implementations for the `GetForecastForLocation` method of a `MockproviderClient` and records expected calls on a `MockmappingsRepository`. The methods facilitate testing by allowing the simulation of API responses.", "keywords_llm": ["mock", "client", "method", "location", "forecast", "context", "error", "repository", "controller", "call", "record", "reflection"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 71, "end_line": 103, "text": "// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}\n", "n_tokens": 289, "primary_symbol": "NewMockmappingsRepository", "primary_kind": "function", "primary_span": [72, 103], "def_symbols": ["NewMockmappingsRepository", "EXPECT", "Get"], "symbols": ["NewMockmappingsRepository", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockmappingsRepository", "recorder", "MockmappingsRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "ctx", "context", "Context", "int", "foreca", "Mapping", "error", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "MockcacheClient", "cacheClient", "interface", "type", "struct", "MockcacheClientMockRecorder"], "doc_head": "// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockmappingsRepository).EXPECT", "package": "", "node_kind": "method", "receiver": "m *MockmappingsRepository", "function_name": "NewMockmappingsRepository", "method_name": "EXPECT", "type_name": "MockcacheClient", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Context", "Controller", "EXPECT", "Get", "Helper", "Mapping", "MockcacheClient", "MockcacheClientMockRecorder", "MockmappingsRepository", "MockmappingsRepositoryMockRecorder", "NewMockmappingsRepository", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "context.Context", "ctrl.RecordCallWithMethodType", "ctrl.T", "foreca.Mapping", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *MockmappingsRepository", "summary_llm": "The Go code defines mock implementations for `MockmappingsRepository` and `MockcacheClient` using the GoMock framework. It includes methods like `Get` that return expected values.", "keywords_llm": ["gomock", "mock", "repository", "cacheclient", "expect", "get", "context", "mapping", "controller", "helper"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 104, "end_line": 135, "text": "// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}\n", "n_tokens": 262, "primary_symbol": "NewMockcacheClient", "primary_kind": "function", "primary_span": [110, 135], "def_symbols": ["NewMockcacheClient", "EXPECT", "Get"], "symbols": ["NewMockcacheClient", "EXPECT", "Get", "MockcacheClientMockRecorder", "the", "mock", "recorder", "for", "MockcacheClient", "type", "struct", "creates", "new", "instance", "func", "ctrl", "gomock", "Controller", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use", "mocks", "base", "method", "key", "string", "cache", "Item", "error", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockcacheClient).EXPECT", "package": "", "node_kind": "method", "receiver": "m *MockcacheClient", "function_name": "NewMockcacheClient", "method_name": "EXPECT", "type_name": "MockcacheClientMockRecorder", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Controller", "EXPECT", "Get", "Helper", "Item", "MockcacheClient", "MockcacheClientMockRecorder", "NewMockcacheClient", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "cache.Item", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *MockcacheClient", "summary_llm": "The Go code defines a mock implementation of `MockcacheClient` for testing purposes. It includes methods to create a new mock instance (`NewMockcacheClient`) and expectations for the `Get` method (`EXPECT`).", "keywords_llm": ["mock", "client", "expectation", "get", "method", "testing", "instance", "recordcallwithmethodtype", "helper", "reflect"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "internal/foreca/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 136, "end_line": 149, "text": "// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}\n", "n_tokens": 129, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [137, 149], "def_symbols": ["Set"], "symbols": ["Set", "mocks", "base", "method", "func", "MockcacheClient", "key", "string", "value", "byte", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return", "indicates", "expected", "call", "MockcacheClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockcacheClient).Set", "package": "", "node_kind": "method", "receiver": "m *MockcacheClient", "function_name": "", "method_name": "Set", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Helper", "MockcacheClient", "MockcacheClientMockRecorder", "RecordCallWithMethodType", "Set", "T", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *MockcacheClient", "summary_llm": "The Go code defines mock methods for a `MockcacheClient` struct, allowing for testing interactions with the `Set` method. The `Set` function records calls and returns errors, while the `Set` method in the mock recorder sets up expectations for call recording.", "keywords_llm": ["mock", "client", "set", "method", "call", "record", "error", "helper", "reflect", "type"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package adapters_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\n\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n", "n_tokens": 183, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [25, 28], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "package", "adapters_test", "import", "context", "errors", "github", "com", "aws", "sdk", "service", "dynamodb", "types", "smithy", "ptr", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "adapters", "mocks", "uber", "org", "mock", "gomock", "testing", "type", "dynamoMappingsRepositoryTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController"], "doc_head": "package adapters_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t}\n)\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).SetupSuite", "package": "adapters_test", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Controller", "NewController", "SetupSuite", "Suite", "T", "github.com", "go.impalastudios", "go.uber", "gomock.Controller", "gomock.NewController", "suite.Suite", "suite.T", "suite.mockController"], "header_context_minimal": "package adapters_test\n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_llm": "This Go code defines a test suite for a DynamoDB repository adapter. The `SetupSuite` method initializes a mock controller for testing.", "keywords_llm": ["dynamo", "repository", "adapter", "mock", "controller", "test suite", "setup", "suite", "t", "foreca_proxy"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 29, "end_line": 55, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n", "n_tokens": 247, "primary_symbol": "TestGetDynamoError", "primary_kind": "function", "primary_span": [29, 55], "def_symbols": ["TestGetDynamoError"], "symbols": ["TestGetDynamoError", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "nil", "errors", "New", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "NotNil", "ErrorContains", "cannot", "get", "mapping"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\t_, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetDynamoError", "package": "", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "TestGetDynamoError", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Any", "Assert", "AttributeValue", "AttributeValueMemberN", "Bool", "ConsistentRead", "Context", "DoAndReturn", "EXPECT", "EqualValues", "ErrorContains", "Get", "GetItem", "GetItemInput", "GetItemOutput", "Key", "Mapping", "New", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "NotNil", "Options", "Return", "String", "TODO", "TableName", "TestGetDynamoError", "Value", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.Context", "context.TODO", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "errors.New", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "ptr.Bool", "ptr.String", "r.Get", "suite.Assert", "suite.mockController", "types.AttributeValue", "types.AttributeValueMemberN"], "header_context_minimal": "package \n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_llm": "The `TestGetDynamoError` function tests error handling in the `Get` method of the `MappingDynamoDBRepository`. It mocks a DynamoDB client to return an error and verifies that the repository correctly propagates this error with a specific message.", "keywords_llm": ["dynamo", "repository", "get", "error", "mock", "client", "assert", "table", "key", "cache"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 56, "end_line": 82, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}\n", "n_tokens": 261, "primary_symbol": "TestGetNoMapping", "primary_kind": "function", "primary_span": [56, 82], "def_symbols": ["TestGetNoMapping"], "symbols": ["TestGetNoMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "Item", "make", "nil", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "NotNil", "ErrorIs", "ErrMappingNotFound"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\t_, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetNoMapping", "package": "", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "TestGetNoMapping", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Any", "Assert", "AttributeValue", "AttributeValueMemberN", "Bool", "ConsistentRead", "Context", "DoAndReturn", "EXPECT", "EqualValues", "ErrMappingNotFound", "ErrorIs", "Get", "GetItem", "GetItemInput", "GetItemOutput", "Item", "Key", "Mapping", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "NotNil", "Options", "Return", "String", "TODO", "TableName", "TestGetNoMapping", "Value", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.Context", "context.TODO", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "foreca.ErrMappingNotFound", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "ptr.Bool", "ptr.String", "r.Get", "suite.Assert", "suite.mockController", "types.AttributeValue", "types.AttributeValueMemberN"], "header_context_minimal": "package \n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_llm": "This Go test function `TestGetNoMapping` in `dynamoMappingsRepositoryTestSuite` verifies that the `Get` method of a DynamoDB repository returns an error when no mapping is found. It sets up mock clients and cache for DynamoDB and caching, respectively.", "keywords_llm": ["dynamodb", "repository", "get", "mock", "client", "cache", "error", "nil", "foreca", "errmappingnotfound"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 83, "end_line": 121, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n", "n_tokens": 366, "primary_symbol": "TestGetNoCacheMapping", "primary_kind": "function", "primary_span": [83, 121], "def_symbols": ["TestGetNoCacheMapping"], "symbols": ["TestGetNoCacheMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "Item", "provider_id", "AttributeValueMemberS", "Europe", "Amsterdam", "nil", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "Add", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "Nil", "NotNil", "Equal", "ProviderID", "Timezone"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\tm, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Ass", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetNoCacheMapping", "package": "", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "TestGetNoCacheMapping", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Add", "Amsterdam", "Any", "Assert", "AttributeValue", "AttributeValueMemberN", "AttributeValueMemberS", "Bool", "ConsistentRead", "Context", "DoAndReturn", "EXPECT", "Equal", "EqualValues", "Europe", "Get", "GetItem", "GetItemInput", "GetItemOutput", "ID", "Item", "Key", "Mapping", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "Nil", "NotNil", "Options", "ProviderID", "Return", "String", "TODO", "TableName", "TestGetNoCacheMapping", "Timezone", "Value", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.Context", "context.TODO", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "ptr.Bool", "ptr.String", "r.Get", "suite.Assert", "suite.mockController", "types.AttributeValue", "types.AttributeValueMemberN", "types.AttributeValueMemberS"], "header_context_minimal": "package \n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_llm": "The `TestGetNoCacheMapping` function tests the `Get` method of a DynamoDB repository. It mocks a DynamoDB client and cache, expects specific input parameters for fetching a mapping by ID without using cached data, and verifies that the correct mapping is retrieved.", "keywords_llm": ["dynamodb", "repository", "test", "get", "mapping", "cache", "mock", "client", "assert", "equal"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 122, "end_line": 152, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n\nfunc TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}\n", "n_tokens": 224, "primary_symbol": "TestGetCachedMapping", "primary_kind": "function", "primary_span": [122, 152], "def_symbols": ["TestGetCachedMapping", "TestMappingsRepository"], "symbols": ["TestGetCachedMapping", "TestMappingsRepository", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "Times", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "ProviderID", "Timezone", "Europe", "Amsterdam", "true", "adapters", "NewMappingDynamoDBRepository", "mappings_test", "err", "context", "TODO", "Assert", "Nil", "NotNil", "Equal", "testing", "Run", "new"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\tm, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\nfunc TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetCachedMapping", "package": "", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "TestMappingsRepository", "method_name": "TestGetCachedMapping", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Amsterdam", "Any", "Assert", "EXPECT", "Equal", "Europe", "Get", "GetItem", "ID", "Mapping", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "Nil", "NotNil", "ProviderID", "Return", "Run", "T", "TODO", "TestGetCachedMapping", "TestMappingsRepository", "Times", "Timezone", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.TODO", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "r.Get", "suite.Assert", "suite.Run", "suite.mockController", "testing.T"], "header_context_minimal": "package \n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_llm": "The code includes a test function `TestGetCachedMapping` that tests the `GetCachedMapping` method of a DynamoDB repository adapter. It sets up mock dependencies for the DynamoDB client and cache to ensure the method behaves as expected.", "keywords_llm": ["dynamo_mappings_repository_test", "testgetcachedmapping", "newmockmappingdynamodbclient", "expect", "getitem", "newmockcache", "assert", "nil", "notnil", "equal", "contexttodo", "run", "suite", "mockcontroller"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 34, "text": "package adapters\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}\n\n//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)\n", "n_tokens": 300, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 34], "def_symbols": [], "symbols": ["package", "adapters", "import", "context", "github", "com", "aws", "sdk", "feature", "dynamodb", "attributevalue", "service", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "internal", "foreca", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "type", "mappingDynamoDB", "struct", "int", "json", "dynamodbav", "ProviderID", "provider_id", "Timezone", "string", "generate", "bin", "mockgen", "source", "mapping_dynamodb_repository", "destination", "mocks", "mapping_dynamodb_repository_mocks", "mappingDynamoDBClient", "interface", "GetItem", "ctx", "Context", "params", "GetItemInput", "optFns", "func", "Options", "GetItemOutput", "error", "cache", "any", "Get", "bool", "Add"], "doc_head": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}\n//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:mappingDynamoDB (struct)", "package": "adapters", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "mappingDynamoDB", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Add", "Context", "Get", "GetItem", "GetItemInput", "GetItemOutput", "ID", "K", "Options", "ProviderID", "Timezone", "V", "context.Context", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "github.com", "go.impalastudios", "go.opentelemetry", "go.uber", "mapping_dynamodb_repository.go", "mapping_dynamodb_repository_mocks.go"], "header_context_minimal": "package adapters", "summary_llm": "This Go code defines a struct `mappingDynamoDB` and two interfaces: `mappingDynamoDBClient` for DynamoDB operations and `cache[K any, V any]` for caching. It also includes logging and tracing utilities.", "keywords_llm": ["dynamodb", "mappingdynamodb", "interface", "client", "cache", "context", "log", "tracer"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 35, "end_line": 58, "text": "type MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\n\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}\n\nfunc (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}\n", "n_tokens": 200, "primary_symbol": "NewMappingDynamoDBRepository", "primary_kind": "function", "primary_span": [41, 58], "def_symbols": ["NewMappingDynamoDBRepository", "Get"], "symbols": ["NewMappingDynamoDBRepository", "Get", "type", "MappingDynamoDBRepository", "struct", "tableName", "string", "client", "mappingDynamoDBClient", "cache", "int", "foreca", "Mapping", "func", "return", "ctx", "context", "Context", "error", "span", "xotel", "Tracer", "Start", "mapping", "repository", "get", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "found", "SetAttributes", "attribute", "Bool", "cache_hit", "true", "log", "Debug", "zap", "Any", "nil"], "doc_head": "type MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}\nfunc (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(r *MappingDynamoDBRepository).Get", "package": "", "node_kind": "method", "receiver": "r *MappingDynamoDBRepository", "function_name": "NewMappingDynamoDBRepository", "method_name": "Get", "type_name": "MappingDynamoDBRepository", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/otel", "go.uber.org/zap"], "symbols_referenced_strict": ["Any", "Bool", "Context", "Debug", "End", "Get", "Mapping", "MappingDynamoDBRepository", "NewMappingDynamoDBRepository", "SetAttributes", "SpanKindClient", "Start", "Tracer", "WithSpanKind", "attribute.Bool", "context.Context", "foreca.Mapping", "log.Debug", "r.cache", "span.End", "span.SetAttributes", "trace.SpanKindClient", "trace.WithSpanKind", "xotel.Tracer", "zap.Any"], "header_context_minimal": "package \nimport (\n    \"go.impalastudios.com/otel\"\n    \"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository", "summary_llm": "The `MappingDynamoDBRepository` struct provides a method `Get` to retrieve a mapping by ID from a DynamoDB repository. It uses caching and OpenTelemetry for tracing.", "keywords_llm": ["mappingdynamodbrepository", "get", "cache", "spankindclient", "xotel.tracer", "trace.spankindclient", "log.debug", "zap.any"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "internal/foreca/adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 59, "end_line": 106, "text": "\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\n\tspan.SetAttributes(attribute.Bool(\"cache_hit\", false))\n\n\tm := &foreca.Mapping{\n\t\tID:         i.ID,\n\t\tProviderID: i.ProviderID,\n\t\tTimezone:   i.Timezone,\n\t}\n\tr.cache.Add(id, m)\n\n\treturn m, nil\n}\n", "n_tokens": 370, "primary_symbol": "", "primary_kind": "", "primary_span": [59, 106], "def_symbols": [], "symbols": ["key", "err", "attributevalue", "MarshalMap", "map", "string", "interface", "nil", "log", "Error", "ctx", "Cannot", "marshal", "zap", "Int", "span", "SetStatus", "codes", "RecordError", "return", "errors", "Wrap", "mapping", "dynamodb", "repository", "cannot", "resp", "client", "GetItem", "GetItemInput", "TableName", "aws", "String", "tableName", "Key", "ConsistentRead", "Bool", "false", "DynamoDB", "error", "get", "len", "Item", "Warn", "Mapping", "not", "found", "foreca", "ErrMappingNotFound", "var", "mappingDynamoDB", "UnmarshalMap", "unmarshal", "Any", "item", "SetAttributes", "attribute", "cache_hit", "ProviderID", "Timezone", "cache", "Add"], "doc_head": "\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\tspan.SetAttributes(attribut", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.uber.org/zap"], "symbols_referenced_strict": ["Add", "Any", "Bool", "Cannot", "ConsistentRead", "DynamoDB", "ErrMappingNotFound", "Error", "GetItem", "GetItemInput", "ID", "Int", "Item", "Key", "Mapping", "MarshalMap", "ProviderID", "RecordError", "SetAttributes", "SetStatus", "String", "TableName", "Timezone", "UnmarshalMap", "Warn", "Wrap", "attribute.Bool", "attributevalue.MarshalMap", "attributevalue.UnmarshalMap", "aws.Bool", "aws.String", "codes.Error", "dynamodb.GetItemInput", "errors.Wrap", "foreca.ErrMappingNotFound", "foreca.Mapping", "i.ID", "i.ProviderID", "i.Timezone", "log.Error", "log.Warn", "r.cache", "r.client", "r.tableName", "resp.Item", "span.RecordError", "span.SetAttributes", "span.SetStatus", "zap.Any", "zap.Error", "zap.Int"], "header_context_minimal": "package \nimport \"go.uber.org/zap\"", "summary_llm": "This function fetches a mapping from DynamoDB using the provided ID. It logs errors and returns an ErrMappingNotFound if the item is not found.", "keywords_llm": ["mapping", "dynamodb", "fetch", "marshal", "unmarshal", "error", "log", "cache"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 37, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}\n\n// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 271, "primary_symbol": "NewMockmappingDynamoDBClient", "primary_kind": "function", "primary_span": [32, 37], "def_symbols": ["NewMockmappingDynamoDBClient"], "symbols": ["NewMockmappingDynamoDBClient", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "mapping_dynamodb_repository", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "mapping_dynamodb_repository_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "dynamodb", "github", "com", "aws", "sdk", "service", "gomock", "uber", "org", "mock", "MockmappingDynamoDBClient", "mappingDynamoDBClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockmappingDynamoDBClientMockRecorder", "the", "for", "creates", "new", "instance", "func", "return"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}\n// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockmappingDynamoDBClient", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockmappingDynamoDBClient", "method_name": "", "type_name": "MockmappingDynamoDBClient", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Code", "Controller", "DO", "EDIT", "Generated", "GoMock", "MockGen", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "NOT", "NewMockmappingDynamoDBClient", "Package", "Source", "github.com", "go.uber", "gomock.Controller", "mapping_dynamodb_repository.go", "mapping_dynamodb_repository_mocks.go", "mock.recorder"], "header_context_minimal": "package mocks", "summary_llm": "This Go code snippet demonstrates a function that takes an integer as input and returns the sum of all even numbers up to that integer.", "keywords_llm": ["go", "function", "integer", "sum", "even numbers", "loop", "condition", "return"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 38, "end_line": 62, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}\n\n// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}\n", "n_tokens": 278, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [39, 62], "def_symbols": ["EXPECT", "GetItem"], "symbols": ["EXPECT", "GetItem", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "return", "recorder", "mocks", "base", "method", "ctx", "context", "Context", "params", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "ctrl", "Helper", "varargs", "any", "for", "range", "append", "ret", "Call", "ret0", "ret1", "indicates", "call", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}\n// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockmappingDynamoDBClient).EXPECT", "package": "", "node_kind": "method", "receiver": "m *MockmappingDynamoDBClient", "function_name": "", "method_name": "EXPECT", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Context", "EXPECT", "GetItem", "GetItemInput", "GetItemOutput", "Helper", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "Options", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "context.Context", "ctrl.RecordCallWithMethodType", "ctrl.T", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "gomock.Call", "m.ctrl", "m.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *MockmappingDynamoDBClient", "summary_llm": "This Go code provides mock implementations for a DynamoDB client, allowing for the simulation of `GetItem` calls and expectation setting.", "keywords_llm": ["dynamodb", "mock", "client", "getitem", "context", "options", "output", "error", "recordcallwithmethodtype", "helper"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 63, "end_line": 93, "text": "// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}\n\n// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}\n", "n_tokens": 248, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [82, 93], "def_symbols": ["EXPECT", "Add"], "symbols": ["EXPECT", "Add", "Mockcache", "mock", "cache", "interface", "type", "any", "struct", "ctrl", "gomock", "Controller", "recorder", "MockcacheMockRecorder", "the", "for", "NewMockcache", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "arg1", "bool", "Helper", "ret", "Call", "ret0"], "doc_head": "// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}\n// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *Mockcache[K, V]).EXPECT", "package": "", "node_kind": "method", "receiver": "m *Mockcache[K, V]", "function_name": "", "method_name": "EXPECT", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Add", "Call", "Controller", "EXPECT", "Helper", "K", "Mockcache", "MockcacheMockRecorder", "NewMockcache", "T", "T.Helper", "V", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder"], "header_context_minimal": "package \n// receiver: m *Mockcache[K, V]", "summary_llm": "The code defines a mock implementation of a cache interface using Go's testing/mock framework. The `Mockcache` struct represents the mock, and the `EXPECT` method returns a recorder for setting up expected calls on this mock. The `Add` method is a placeholder for a base method that can be mocked.", "keywords_llm": ["mock", "cache", "interface", "gomock", "controller", "recorder", "add", "helper"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 94, "end_line": 114, "text": "// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}\n", "n_tokens": 225, "primary_symbol": "Add", "primary_kind": "function", "primary_span": [95, 114], "def_symbols": ["Add", "Get"], "symbols": ["Add", "Get", "indicates", "expected", "call", "func", "MockcacheMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockcache", "nil", "mocks", "base", "method", "bool", "ret", "ret0", "ret1"], "doc_head": "// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(mr *MockcacheMockRecorder[K, V]).Add", "package": "", "node_kind": "method", "receiver": "mr *MockcacheMockRecorder[K, V]", "function_name": "", "method_name": "Add", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Add", "Call", "Get", "Helper", "K", "Mockcache", "MockcacheMockRecorder", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "V", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: mr *MockcacheMockRecorder[K, V]", "summary_llm": "This Go code defines mocks for a cache implementation, providing methods to record and expect calls to 'Add' and 'Get'.", "keywords_llm": ["mockcache", "add", "get", "methodtype", "gomock", "recordcallwithmethodtype", "reflect.typeof", "any", "bool"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 39, "text": "package clients_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}\n\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}", "n_tokens": 281, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 39], "def_symbols": [], "symbols": ["package", "clients_test", "import", "bytes", "context", "errors", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "adapters", "clients", "mocks", "pkg", "ratelimit", "uber", "org", "mock", "gomock", "net", "http", "testing", "time", "type", "currentConditionTransformer", "interface", "Transform", "CurrentCondition", "HourlyCondition", "Location", "dailyForecastTransformer", "DailyCondition", "hourlyForecastTransformer", "transformer", "Response", "Forecast", "currentConditionTransformerTestSuite", "struct", "Suite", "Time", "timestampFormat", "string", "location"], "doc_head": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}\n\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "clients_test", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["CurrentCondition", "DailyCondition", "Forecast", "HourlyCondition", "Location", "Response", "Suite", "Time", "Transform", "clients.CurrentCondition", "clients.DailyCondition", "clients.HourlyCondition", "clients.Response", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "github.com", "go.impalastudios", "go.uber", "suite.Suite", "time.Location", "time.Time"], "header_context_minimal": "package clients_test\nimport \"time\"", "summary_llm": "This Go code defines test suites and interfaces for transforming weather data from the `clients` package to the `foreca` package. It includes transformers for current conditions, daily forecasts, hourly forecasts, and a general transformer. The test suite struct contains fields for the transformer interface, location, and timestamp format.", "keywords_llm": ["go", "weather", "test suites", "transformers", "interfaces", "clients", "foreca", "current conditions", "daily forecasts", "hourly forecasts", "time location"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 40, "end_line": 89, "text": "\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}\n\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\n\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}\n", "n_tokens": 298, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [83, 89], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "dailyForecastTransformerTestSuite", "struct", "suite", "Suite", "transformer", "dailyForecastTransformer", "time", "Time", "daystampFormat", "string", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset", "location", "Location", "hourlyForecastTransformerTestSuite", "hourlyForecastTransformer", "transformerTestSuite", "forecaClientTestSuite", "mockController", "gomock", "Controller", "func", "currentConditionTransformerTestSuite", "LoadLocation", "Europe", "Amsterdam", "clients", "NewCurrentConditionTransformer", "Now"], "doc_head": "\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}\n\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampF", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).SetupSuite", "package": "", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Amsterdam", "Controller", "Europe", "In", "LoadLocation", "Location", "NewCurrentConditionTransformer", "Now", "SetupSuite", "Suite", "Time", "clients.NewCurrentConditionTransformer", "gomock.Controller", "suite.Suite", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer", "time.LoadLocation", "time.Location", "time.Now", "time.Time"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *currentConditionTransformerTestSuite", "summary_llm": "The provided Go code defines multiple test suites for different forecast transformers and a client. Each suite sets up necessary configurations such as time location, transformer instances, and timestamp formats. The `currentConditionTransformerTestSuite` specifically initializes the Amsterdam time zone and a new current condition transformer.", "keywords_llm": ["test suite", "time location", "transformer instance", "timestamp format", "amsterdam", "europe/amsterdam", "newcurrentconditiontransformer", "time.now", "setupsuite", "currentconditiontransformertestsuite"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 90, "end_line": 95, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\n\tsuite.Assert().Nil(cc)\n}\n", "n_tokens": 36, "primary_symbol": "TestTransformMissingCurrentCondition", "primary_kind": "function", "primary_span": [90, 95], "def_symbols": ["TestTransformMissingCurrentCondition"], "symbols": ["TestTransformMissingCurrentCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "nil", "Assert", "Nil"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\tsuite.Assert().Nil(cc)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformMissingCurrentCondition", "package": "", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "TestTransformMissingCurrentCondition", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Assert", "Nil", "TestTransformMissingCurrentCondition", "Transform", "suite.Assert", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *currentConditionTransformerTestSuite", "summary_llm": "This Go code defines a function that takes an integer slice and returns the sum of all elements in the slice.", "keywords_llm": ["go", "function", "integer slice", "sum", "for loop", "return statement"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 96, "end_line": 147, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 420, "primary_symbol": "TestTransformMissingHourlyCondition", "primary_kind": "function", "primary_span": [96, 147], "def_symbols": ["TestTransformMissingHourlyCondition"], "symbols": ["TestTransformMissingHourlyCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "clients", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timestampFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "nil", "location", "expected", "foreca", "Epoch", "Unix", "Precipitation", "PrecipitationNextHour", "Code", "cloudy", "Description", "Overcast", "WeatherConditionNextHour", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UVIndex", "Assert", "Equal"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHea", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformMissingHourlyCondition", "package": "", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "TestTransformMissingHourlyCondition", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Assert", "Code", "CurrentCondition", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Format", "Gust", "HeatIndex", "HumidityPercentage", "Millibar", "Overcast", "Precipitation", "PrecipitationNextHour", "Pressure", "PressureTrendSteady", "S", "Speed", "Temperature", "TemperatureFeelsLike", "TestTransformMissingHourlyCondition", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *currentConditionTransformerTestSuite", "summary_llm": "This Go code defines a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' to all requests.", "keywords_llm": ["go", "http", "server", "listen", "port", "request", "response", "hello, world!", "main package", "net/http"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 148, "end_line": 217, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         1,\n\t\tPrecipitationNextHour: 1,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\tCode:        \"mostlycloudy\",\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -2.4,\n\t\tHumidityPercentage:   80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 578, "primary_symbol": "TestTransformWithHourlyCondition", "primary_kind": "function", "primary_span": [148, 217], "def_symbols": ["TestTransformWithHourlyCondition"], "symbols": ["TestTransformWithHourlyCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "clients", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timestampFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "HourlyCondition", "d300", "cloudy", "Precipitation", "PrecipitationProbability", "UVIndex", "location", "expected", "foreca", "Epoch", "Unix", "PrecipitationNextHour", "Code", "Description", "Overcast", "WeatherConditionNextHour", "mostlycloudy", "Cloudy", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "Assert", "Equal"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            3", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformWithHourlyCondition", "package": "", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "TestTransformWithHourlyCondition", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Assert", "Cloudy", "Code", "CurrentCondition", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Format", "Gust", "HeatIndex", "HourlyCondition", "HumidityPercentage", "Millibar", "Overcast", "Precipitation", "PrecipitationNextHour", "PrecipitationProbability", "Pressure", "PressureTrendSteady", "S", "SW", "Speed", "Temperature", "TemperatureFeelsLike", "TestTransformWithHourlyCondition", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.HourlyCondition", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *currentConditionTransformerTestSuite", "summary_llm": "This Go code tests the transformation of current and hourly weather conditions from clients' data structures to foreca's data structures. It uses a test suite with specific assertions for expected outcomes.", "keywords_llm": ["test", "transform", "currentconditiontransformertestsuite", "clients.currentcondition", "clients.hourlycondition", "foreca.currentcondition", "suite.assert", "timestampformat"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 218, "end_line": 248, "text": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 220, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [218, 248], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "dailyForecastTransformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewDailyForecastTransformer", "now", "Now", "Date", "Year", "Month", "Day", "daystampFormat", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).SetupSuite", "package": "", "node_kind": "method", "receiver": "suite *dailyForecastTransformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Amsterdam", "Date", "Day", "Europe", "LoadLocation", "Month", "NewDailyForecastTransformer", "Now", "SetupSuite", "Year", "clients.NewDailyForecastTransformer", "now.Day", "now.Month", "now.Year", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timeFormat", "suite.timestampFormat", "suite.transformer", "time.Date", "time.LoadLocation", "time.Now"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *dailyForecastTransformerTestSuite", "summary_llm": "The `SetupSuite` method initializes the test suite by setting up a location in Europe/Amsterdam, creating a daily forecast transformer, and preparing various time-related values for testing.", "keywords_llm": ["setup", "suite", "location", "transformer", "time", "date", "year", "month", "day", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 249, "end_line": 301, "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 470, "primary_symbol": "TestTransformMissingHourlyConditions", "primary_kind": "function", "primary_span": [249, 301], "def_symbols": ["TestTransformMissingHourlyConditions"], "symbols": ["TestTransformMissingHourlyConditions", "func", "suite", "dailyForecastTransformerTestSuite", "transformer", "Transform", "clients", "DailyCondition", "WeatherCondition", "WeatherCode", "d100", "WeatherDescription", "mostly", "clear", "Date", "time", "Format", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "nil", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "AverageHumidityPercentage", "Code", "WeatherCodeMostlySunny", "Description", "Mostly", "Clear", "WeatherConditionNight", "SunriseEpoch", "SunsetEpoch", "Assert", "Equal"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDeg", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).TestTransformMissingHourlyConditions", "package": "", "node_kind": "method", "receiver": "suite *dailyForecastTransformerTestSuite", "function_name": "", "method_name": "TestTransformMissingHourlyConditions", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Assert", "AverageHumidityPercentage", "Clear", "Code", "DailyCondition", "Date", "Degrees", "Description", "Direction", "Epoch", "Equal", "Format", "MaxTemperature", "MinTemperature", "Mostly", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Snow", "SnowDay", "SnowNight", "Speed", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "TestTransformMissingHourlyConditions", "Transform", "UTC", "UVIndex", "Unix", "W", "WeatherCode", "WeatherCodeMostlySunny", "WeatherCondition", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "clients.DailyCondition", "clients.WeatherCondition", "foreca.DailyCondition", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "suite.Assert", "suite.daystampFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timestampFormat", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *dailyForecastTransformerTestSuite", "summary_llm": "This Go function tests the Transform method of dailyForecastTransformerTestSuite, ensuring it correctly converts clients.DailyCondition to foreca.DailyCondition with missing hourly conditions.", "keywords_llm": ["test", "transform", "dailyforecasttransformer", "clients.dailyccondition", "foreca.dailyccondition", "assert", "timestampformat", "location", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 302, "end_line": 391, "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(2 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           1,\n\t\tMaxTemperature:           4,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0,\n\t\tPrecipitationNight:       0,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 66,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 761, "primary_symbol": "TestTransformWithHourlyConditions", "primary_kind": "function", "primary_span": [302, 391], "def_symbols": ["TestTransformWithHourlyConditions"], "symbols": ["TestTransformWithHourlyConditions", "func", "suite", "dailyForecastTransformerTestSuite", "transformer", "Transform", "clients", "DailyCondition", "WeatherCondition", "WeatherCode", "d100", "WeatherDescription", "mostly", "clear", "Date", "time", "Format", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "HourlyCondition", "Timestamp", "Add", "Hour", "daytimeFormat", "Temperature", "TemperatureFeelsLike", "HumidityPercentage", "Pressure", "d000", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "AverageHumidityPercentage", "Code", "WeatherCodeMostlySunny", "Description", "Mostly", "Clear", "WeatherConditionNight", "WeatherCodeClear", "SunriseEpoch", "SunsetEpoch", "Assert", "Equal"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPerce", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions", "package": "", "node_kind": "method", "receiver": "suite *dailyForecastTransformerTestSuite", "function_name": "", "method_name": "TestTransformWithHourlyConditions", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Abbreviation", "Add", "Assert", "AverageHumidityPercentage", "Clear", "Code", "DailyCondition", "Date", "Degrees", "Description", "Direction", "Epoch", "Equal", "Format", "Hour", "HourlyCondition", "HumidityPercentage", "MaxTemperature", "MinTemperature", "Mostly", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Pressure", "Snow", "SnowDay", "SnowNight", "Speed", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "Temperature", "TemperatureFeelsLike", "TestTransformWithHourlyConditions", "Timestamp", "Transform", "UTC", "UVIndex", "Unix", "W", "WeatherCode", "WeatherCodeClear", "WeatherCodeMostlySunny", "WeatherCondition", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "clients.DailyCondition", "clients.HourlyCondition", "clients.WeatherCondition", "foreca.DailyCondition", "foreca.WeatherCodeClear", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "suite.Assert", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timestampFormat", "suite.transformer", "time.Hour"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *dailyForecastTransformerTestSuite", "summary_llm": "This Go test function `TestTransformWithHourlyConditions` in `foreca_client_test.go` tests the `Transform` method of a `dailyForecastTransformerTestSuite`. It creates a mock daily condition with hourly conditions and transforms it to match expected foreca output.", "keywords_llm": ["test", "transform", "hourlyconditions", "weathercode", "forecast", "mock", "assert", "unix", "utc", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 392, "end_line": 400, "text": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}\n", "n_tokens": 103, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [392, 400], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "hourlyForecastTransformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewHourlyForecastTransformer", "now", "Now", "Date", "Year", "Month", "Day", "Hour", "timestampFormat", "daytimeFormat"], "doc_head": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *hourlyForecastTransformerTestSuite).SetupSuite", "package": "", "node_kind": "method", "receiver": "suite *hourlyForecastTransformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Amsterdam", "Date", "Day", "Europe", "Hour", "LoadLocation", "Month", "NewHourlyForecastTransformer", "Now", "SetupSuite", "Year", "clients.NewHourlyForecastTransformer", "now.Day", "now.Hour", "now.Month", "now.Year", "suite.daytimeFormat", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer", "time.Date", "time.LoadLocation", "time.Now"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *hourlyForecastTransformerTestSuite", "summary_llm": "This code sets up a test suite for the `hourlyForecastTransformerTestSuite` struct. It loads the Amsterdam time zone and initializes a new hourly forecast transformer.", "keywords_llm": ["test suite", "setup", "time zone", "transformer", "load location", "current time", "date", "hour"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#10", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 401, "end_line": 450, "text": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.78,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tHumidityPercentage: 82,\n\t\tUVIndex:            0,\n\t}\n\n\tsuite.Assert().Equal(expected, hc)\n}\n", "n_tokens": 396, "primary_symbol": "TestTransformHourlyForecast", "primary_kind": "function", "primary_span": [401, 450], "def_symbols": ["TestTransformHourlyForecast"], "symbols": ["TestTransformHourlyForecast", "func", "suite", "hourlyForecastTransformerTestSuite", "transformer", "Transform", "clients", "HourlyCondition", "WeatherCondition", "WeatherCode", "d300", "WeatherDescription", "cloudy", "Timestamp", "time", "Format", "daytimeFormat", "Temperature", "TemperatureFeelsLike", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "HumidityPercentage", "UVIndex", "Pressure", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "Code", "WeatherCodeMostlyCloudy", "Description", "Cloudy", "Snow", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Millibar", "Trend", "PressureTrendSteady", "Assert", "Equal"], "doc_head": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *hourlyForecastTransformerTestSuite).TestTransformHourlyForecast", "package": "", "node_kind": "method", "receiver": "suite *hourlyForecastTransformerTestSuite", "function_name": "", "method_name": "TestTransformHourlyForecast", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Assert", "Cloudy", "Code", "Degrees", "Description", "Direction", "Epoch", "Equal", "Format", "HourlyCondition", "HumidityPercentage", "Millibar", "Precipitation", "PrecipitationProbability", "Pressure", "PressureTrendSteady", "SW", "Snow", "Speed", "Temperature", "TemperatureFeelsLike", "TestTransformHourlyForecast", "Timestamp", "Transform", "Trend", "UTC", "UVIndex", "Unix", "WeatherCode", "WeatherCodeMostlyCloudy", "WeatherCondition", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "clients.HourlyCondition", "clients.WeatherCondition", "foreca.HourlyCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCodeMostlyCloudy", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "suite.Assert", "suite.daytimeFormat", "suite.location", "suite.time", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *hourlyForecastTransformerTestSuite", "summary_llm": "This Go code defines a test method for transforming an hourly weather forecast. It uses the `Transform` method of the `hourlyForecastTransformerTestSuite` receiver to convert input data from `clients.HourlyCondition` to `foreca.HourlyCondition`, and then asserts that the transformation is correct using `suite.Assert().Equal`. The test includes detailed fields such as temperature, wind direction, precipitation probability, and pressure trends.", "keywords_llm": ["hourlyforecasttransformersettestcase", "transform", "clients.hourlycondition", "foreca.hourlycondition", "assert", "equal", "pressuretrendsteady", "mostlycloudy", "sw", "temperaturefeelslike"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#11", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 451, "end_line": 481, "text": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 217, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [451, 481], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "transformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewTransformer", "now", "Now", "Date", "Year", "Month", "Day", "daystampFormat", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset"], "doc_head": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).SetupSuite", "package": "", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Amsterdam", "Date", "Day", "Europe", "LoadLocation", "Month", "NewTransformer", "Now", "SetupSuite", "Year", "clients.NewTransformer", "now.Day", "now.Month", "now.Year", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timeFormat", "suite.timestampFormat", "suite.transformer", "time.Date", "time.LoadLocation", "time.Now"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *transformerTestSuite", "summary_llm": "This function initializes test suite settings for transformer tests. It sets up the time location to Amsterdam, creates a new transformer instance, and prepares various date and time formats and values.", "keywords_llm": ["setupsuite", "transformertestsuite", "time.loadlocation", "clients.newtransformer", "time.now", "time.date", "suite.location", "suite.transformer", "daystampformat", "timestampformat", "daytimeformat", "timeformat", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#12", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 482, "end_line": 495, "text": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}\n", "n_tokens": 90, "primary_symbol": "TestEmptyResponse", "primary_kind": "function", "primary_span": [482, 495], "def_symbols": ["TestEmptyResponse"], "symbols": ["TestEmptyResponse", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "nil", "DailyConditions", "HourlyConditions", "location", "Assert", "Equal", "foreca", "Forecast"], "doc_head": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).TestEmptyResponse", "package": "", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "TestEmptyResponse", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Assert", "CurrentCondition", "DailyConditions", "Equal", "Forecast", "HourlyConditions", "Response", "TestEmptyResponse", "Transform", "clients.Response", "foreca.Forecast", "suite.Assert", "suite.location", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *transformerTestSuite", "summary_llm": "This Go code defines a test method `TestEmptyResponse` within the `transformerTestSuite`. The method tests the transformation of an empty `clients.Response` object to a `foreca.Forecast` object, ensuring both have nil values for `CurrentCondition`, `DailyConditions`, and `HourlyConditions`. It uses assertions to validate the transformed object.", "keywords_llm": ["testemptyresponse", "transformertestsuite", "assert", "currentcondition", "dailyconditions", "hourlyconditions", "forecaforecast", "nilvalues", "clientsresponse", "forecast", "suiteassert"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#13", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 496, "end_line": 555, "text": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 473, "primary_symbol": "TestOnlyCurrentCondition", "primary_kind": "function", "primary_span": [496, 555], "def_symbols": ["TestOnlyCurrentCondition"], "symbols": ["TestOnlyCurrentCondition", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timeFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "DailyConditions", "nil", "HourlyConditions", "location", "expected", "foreca", "Forecast", "Epoch", "Unix", "Precipitation", "PrecipitationNextHour", "Code", "cloudy", "Description", "Overcast", "WeatherConditionNextHour", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UVIndex", "Assert", "Equal"], "doc_head": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDir", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).TestOnlyCurrentCondition", "package": "", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "TestOnlyCurrentCondition", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Assert", "Code", "CurrentCondition", "DailyConditions", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Forecast", "Format", "Gust", "HeatIndex", "HourlyConditions", "HumidityPercentage", "Millibar", "Overcast", "Precipitation", "PrecipitationNextHour", "Pressure", "PressureTrendSteady", "Response", "S", "Speed", "Temperature", "TemperatureFeelsLike", "TestOnlyCurrentCondition", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.Response", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.Forecast", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.location", "suite.time", "suite.timeFormat", "suite.transformer"], "header_context_minimal": "package \n// receiver: suite *transformerTestSuite", "summary_llm": "The code defines a test method `TestOnlyCurrentCondition` within the `transformerTestSuite` struct. It tests the transformation of a `clients.Response` containing current weather conditions into a `foreca.Forecast` structure using a transformer. The expected output is asserted to match the transformed result.", "keywords_llm": ["test", "method", "suite", "transformer", "clientresponse", "forecast", "currentcondition", "timestamp", "temperature", "pressure"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#14", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 556, "end_line": 798, "text": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Add(24 * time.Hour).Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"SW\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tSunriseTime:              suite.sunrise.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"mostlysunny\",\n\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t},\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -2.4,\n\t\t\tHumidityPercentage:   80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions: []*foreca.DailyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\t\t\tMinTemperature:           1,\n\t\t\t\tMaxTemperature:           4,\n\t\t\t\tPrecipitation:            0.4,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 66,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.Add(24 * time.Hour).UTC().Unix(),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\t\t\tDegrees:      225,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 0,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Add(24 * time.Hour).Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Add(24 * time.Hour).Unix(),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*foreca.HourlyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.UTC().Unix(),\n\t\t\t\tTemperature:          1,\n\t\t\t\tTemperatureFeelsLike: -4,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 14,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1017.46,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 58,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.Add(1 * time.Hour).UTC().Unix(),\n\t\t\t\tTemperature:          4,\n\t\t\t\tTemperatureFeelsLike: -1,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 23,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1019.77,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 74,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t},\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 2093, "primary_symbol": "TestAllConditions", "primary_kind": "function", "primary_span": [556, 798], "def_symbols": ["TestAllConditions"], "symbols": ["TestAllConditions", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timeFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "DailyConditions", "DailyCondition", "d100", "mostly", "clear", "Date", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "d300", "cloudy", "Add", "Hour", "HourlyConditions", "HourlyCondition", "daytimeFormat", "d000", "location", "expected", "foreca", "Forecast", "Epoch", "Unix", "PrecipitationNextHour", "Code", "Description", "Overcast", "WeatherConditionNextHour", "mostlysunny", "Mostly", "Clear", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UTC", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "AverageHumidityPercentage", "WeatherCodeMostlySunny", "WeatherConditionNight", "WeatherCodeClear", "SunriseEpoch", "SunsetEpoch", "WeatherCodeMostlyCloudy", "Cloudy", "Assert", "Equal"], "doc_head": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(su", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).TestAllConditions", "package": "", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "TestAllConditions", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Abbreviation", "Add", "Assert", "AverageHumidityPercentage", "Clear", "Cloudy", "Code", "CurrentCondition", "DailyCondition", "DailyConditions", "Date", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Forecast", "Format", "Gust", "HeatIndex", "Hour", "HourlyCondition", "HourlyConditions", "HumidityPercentage", "MaxTemperature", "Millibar", "MinTemperature", "Mostly", "Overcast", "Precipitation", "PrecipitationDay", "PrecipitationNextHour", "PrecipitationNight", "PrecipitationProbability", "Pressure", "PressureTrendSteady", "Response", "S", "SW", "Snow", "SnowDay", "SnowNight", "Speed", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "Temperature", "TemperatureFeelsLike", "TestAllConditions", "Timestamp", "Transform", "Trend", "UTC", "UVIndex", "Unix", "Visibility", "W", "WeatherCode", "WeatherCodeClear", "WeatherCodeMostlyCloudy", "WeatherCodeMostlySunny", "WeatherCondition", "WeatherConditionNextHour", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.DailyCondition", "clients.HourlyCondition", "clients.Response", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCodeClear", "foreca.WeatherCodeMostlyCloudy", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timeFormat", "suite.timestampFormat", "suite.transformer", "time.Hour"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *transformerTestSuite", "summary_llm": "This Go test function `TestAllConditions` in the `transformerTestSuite` tests the transformation of a weather forecast response from the `clients.Response` struct to the `foreca.Forecast` struct using a transformer. It sets up various weather conditions and verifies that the transformed data matches the expected `foreca.Forecast` structure.", "keywords_llm": ["test", "transformertestsuite", "testallconditions", "clients.response", "foreca.forecast", "currentcondition", "dailycondition", "hourlycondition", "assertion", "equality"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#15", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 799, "end_line": 822, "text": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}\n", "n_tokens": 186, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [799, 822], "def_symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached"], "symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached", "func", "suite", "forecaClientTestSuite", "mockController", "gomock", "NewController", "location", "time", "LoadLocation", "Europe", "Amsterdam", "limiter", "mocks", "NewMockrateLimiter", "EXPECT", "Acquire", "Any", "Return", "int64", "ratelimit", "ErrLimitReached", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorIs", "foreca", "ErrRequestThrottled"], "doc_head": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).SetupSuite", "package": "", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Amsterdam", "Any", "Assert", "EXPECT", "ErrLimitReached", "ErrRequestThrottled", "ErrorIs", "Europe", "GetForecastForLocation", "LoadLocation", "NewController", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NotNil", "Return", "SetupSuite", "T", "TODO", "TestGetForecastForLocationLimitReached", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "foreca.ErrRequestThrottled", "gomock.Any", "gomock.NewController", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "ratelimit.ErrLimitReached", "suite.Assert", "suite.T", "suite.location", "suite.mockController", "time.LoadLocation"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *forecaClientTestSuite", "summary_llm": "This Go code defines a function that takes an integer slice as input and returns the sum of all elements in the slice.", "keywords_llm": ["go", "function", "integer slice", "sum", "elements"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#16", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 823, "end_line": 860, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}\n", "n_tokens": 282, "primary_symbol": "TestGetForecastForLocationLimitError", "primary_kind": "function", "primary_span": [823, 860], "def_symbols": ["TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError"], "symbols": ["TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "int64", "ratelimit", "ErrCountZero", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "location", "Assert", "NotNil", "ErrorContains", "error", "errors", "New", "unknown", "generic"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationLimitError", "package": "", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationLimitError", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "EXPECT", "ErrCountZero", "ErrorContains", "GetForecastForLocation", "New", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NotNil", "Return", "TODO", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "errors.New", "gomock.Any", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "ratelimit.ErrCountZero", "suite.Assert", "suite.location", "suite.mockController"], "header_context_minimal": "package \n// receiver: suite *forecaClientTestSuite", "summary_llm": "The Go code tests the `GetForecastForLocation` method of a client. It verifies that errors are returned correctly when rate limiting is applied and throws unknown errors.", "keywords_llm": ["foreca_client_test.go", "testgetforecastforlocationlimiterror", "testgetforecastforlocationlimitunknownerror", "getforecastforlocation", "clients.newforecaclient", "context.todo", "ratelimit.errcountzero", "errors.new", "assert", "errorcontains"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#17", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 861, "end_line": 882, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}\n", "n_tokens": 166, "primary_symbol": "TestGetForecastForLocationHttpError", "primary_kind": "function", "primary_span": [861, 882], "def_symbols": ["TestGetForecastForLocationHttpError"], "symbols": ["TestGetForecastForLocationHttpError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "errors", "New", "error", "clients", "NewForecaClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "http"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationHttpError", "package": "", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationHttpError", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "Do", "EXPECT", "ErrorContains", "GetForecastForLocation", "In", "New", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NotNil", "Now", "Return", "TODO", "TestGetForecastForLocationHttpError", "Unix", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "errors.New", "gomock.Any", "httpClient.EXPECT", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "suite.Assert", "suite.location", "suite.mockController", "time.Now"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *forecaClientTestSuite", "summary_llm": "The `TestGetForecastForLocationHttpError` function tests the `GetForecastForLocation` method of a Foreca client. It sets up mock rate limiter and HTTP client to return an error when making a request, then verifies that the returned error is not nil and contains the string 'http error'.", "keywords_llm": ["forecaclienttestsuite", "getforecastforlocationhttperror", "ratelimiter", "httpclient", "limiter.acquire", "httpclient.do", "newforecaclient", "context.todo", "errors.new", "assert.notnil", "assert.errorcontains"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#18", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 883, "end_line": 924, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().Nil(f.CurrentCondition)\n\tsuite.Assert().Nil(f.DailyConditions)\n\tsuite.Assert().Nil(f.HourlyConditions)\n}\n", "n_tokens": 480, "primary_symbol": "TestGetForecastForLocationTransformError", "primary_kind": "function", "primary_span": [883, 924], "def_symbols": ["TestGetForecastForLocationTransformError"], "symbols": ["TestGetForecastForLocationTransformError", "func", "suite", "forecaClientTestSuite", "response", "http", "Response", "StatusCode", "Body", "NopCloser", "bytes", "NewReader", "byte", "weather", "loc", "obs", "station", "Amsterdam", "Airport", "Schiphol", "dist", "d400", "overcast", "d320", "showers", "uvi", "wsx", "rise", "set", "fc1h", "d200", "partly", "cloudy", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "transformerMock", "NewMocktransformer", "Transform", "foreca", "Forecast", "clients", "NewForecaClient", "map", "string", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "Nil", "CurrentCondition", "DailyConditions", "HourlyConditions"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransfo", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationTransformError", "package": "", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationTransformError", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Airport", "Amsterdam", "Any", "Assert", "Body", "CurrentCondition", "DailyConditions", "Do", "EXPECT", "Forecast", "GetForecastForLocation", "HourlyConditions", "In", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NewReader", "Nil", "NopCloser", "NotNil", "Now", "Response", "Return", "SE", "SW", "Schiphol", "StatusCode", "TODO", "TestGetForecastForLocationTransformError", "Transform", "Unix", "bytes.NewReader", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.Forecast", "gomock.Any", "http.Response", "httpClient.EXPECT", "io.NopCloser", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "suite.Assert", "suite.location", "suite.mockController", "time.Now", "transformerMock.EXPECT"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *forecaClientTestSuite", "summary_llm": "This test function `TestGetForecastForLocationTransformError` verifies that the `GetForecastForLocation` method of a Foreca client returns an empty forecast when an error occurs during transformation. It sets up mock objects for rate limiting, HTTP client, and transformer, configures their expectations, invokes the method with context, location ID, and parameters, and asserts that the resulting forecast is nil along with its components.", "keywords_llm": ["forecaclienttestsuite", "testgetforecastforlocationtransformerror", "newforecaclient", "newmockratelimiter", "newmockhttpclient", "newmocktransformer", "getforecastforlocation", "rate limiting", "http client", "transformation"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#19", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 925, "end_line": 970, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 526, "primary_symbol": "TestGetForecastForLocationValid", "primary_kind": "function", "primary_span": [925, 970], "def_symbols": ["TestGetForecastForLocationValid"], "symbols": ["TestGetForecastForLocationValid", "func", "suite", "forecaClientTestSuite", "response", "http", "Response", "StatusCode", "Body", "NopCloser", "bytes", "NewReader", "byte", "weather", "loc", "obs", "station", "Amsterdam", "Airport", "Schiphol", "dist", "d400", "overcast", "d320", "showers", "uvi", "wsx", "rise", "set", "fc1h", "d200", "partly", "cloudy", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "transformerMock", "NewMocktransformer", "Transform", "foreca", "Forecast", "CurrentCondition", "DailyConditions", "make", "DailyCondition", "HourlyConditions", "HourlyCondition", "clients", "NewForecaClient", "map", "string", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationValid", "package": "", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationValid", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Airport", "Amsterdam", "Any", "Assert", "Body", "CurrentCondition", "DailyCondition", "DailyConditions", "Do", "EXPECT", "Forecast", "GetForecastForLocation", "HourlyCondition", "HourlyConditions", "In", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NewReader", "NopCloser", "NotNil", "Now", "Response", "Return", "SE", "SW", "Schiphol", "StatusCode", "TODO", "TestGetForecastForLocationValid", "Transform", "Unix", "bytes.NewReader", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "gomock.Any", "http.Response", "httpClient.EXPECT", "io.NopCloser", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "suite.Assert", "suite.location", "suite.mockController", "time.Now", "transformerMock.EXPECT"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *forecaClientTestSuite", "summary_llm": "This test function verifies that the `GetForecastForLocation` method of the `forecaClientTestSuite` returns a non-nil forecast object with current, daily, and hourly conditions. It sets up mock dependencies for rate limiting, HTTP client, and transformer.", "keywords_llm": ["getforecastforlocation", "forecaclienttestsuite", "assertnotnil", "mockcontroller", "ratelimiter", "httpclient", "transformermock", "currentcondition", "dailyconditions", "hourlyconditions"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#20", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "internal/foreca/adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 971, "end_line": 978, "text": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}\n", "n_tokens": 69, "primary_symbol": "TestForecaClient", "primary_kind": "function", "primary_span": [971, 978], "def_symbols": ["TestForecaClient"], "symbols": ["TestForecaClient", "func", "testing", "suite", "Run", "new", "currentConditionTransformerTestSuite", "dailyForecastTransformerTestSuite", "hourlyForecastTransformerTestSuite", "transformerTestSuite", "forecaClientTestSuite"], "doc_head": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:TestForecaClient", "package": "", "node_kind": "function", "receiver": "", "function_name": "TestForecaClient", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Run", "T", "TestForecaClient", "suite.Run", "testing.T"], "header_context_minimal": "package ", "summary_llm": "This Go test function `TestForecaClient` in `foreca_client_test.go` runs multiple test suites using the `suite.Run` method with a testing.T receiver. The test suites include 'currentConditionTransformerTestSuite', 'dailyForecastTransformerTestSuite', 'hourlyForecastTransformerTestSuite', 'transformerTestSuite', and 'forecaClientTestSuite'.", "keywords_llm": ["test", "function", "run", "suite", "testing.t", "currentconditiontransformertestsuite", "dailyforecasttransformertestsuite", "hourlyforecasttransformertestsuite", "transformertestsuite", "forecaclienttestsuite"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "package clients\n\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}\n", "n_tokens": 200, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["package", "clients", "import", "context", "encoding", "xml", "fmt", "github", "com", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "internal", "foreca", "ratelimit", "utilities", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "golang", "text", "cases", "language", "math", "net", "http", "strconv", "strings", "time", "type", "WeatherCondition", "struct", "WeatherCode", "string", "attr", "WeatherDescription"], "doc_head": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:WeatherCondition (struct)", "package": "clients", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "WeatherCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["WeatherCode", "WeatherCondition", "WeatherDescription", "github.com", "go.impalastudios", "go.opentelemetry", "go.uber", "golang.org"], "header_context_minimal": "package clients", "summary_llm": "The code defines a `WeatherCondition` struct with fields for weather code and description. It imports various packages related to logging, OpenTelemetry tracing, utilities, and XML parsing.", "keywords_llm": ["weathercondition", "weathercode", "weatherdescription", "xml", "logging", "opentelemetry", "tracing", "utilities", "github.com", "go.impalastudios"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 57, "text": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\n\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\n\treturn zero == *cc\n}\n\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}\n", "n_tokens": 192, "primary_symbol": "IsZero", "primary_kind": "function", "primary_span": [48, 57], "def_symbols": ["IsZero", "IsValid"], "symbols": ["IsZero", "IsValid", "type", "CurrentCondition", "struct", "XMLName", "xml", "Name", "obs", "WeatherCondition", "Station", "string", "station", "attr", "Timestamp", "Temperature", "float64", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "int", "Visibility", "func", "bool", "var", "zero", "return"], "doc_head": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\treturn zero == *cc\n}\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(cc *CurrentCondition).IsZero", "package": "", "node_kind": "method", "receiver": "cc *CurrentCondition", "function_name": "", "method_name": "IsZero", "type_name": "CurrentCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "HumidityPercentage", "IsValid", "IsZero", "Name", "Pressure", "Station", "Temperature", "TemperatureFeelsLike", "Timestamp", "Visibility", "WeatherCondition", "WindDirection", "WindSpeed", "XMLName", "cc.IsZero", "cc.Timestamp", "xml.Name"], "header_context_minimal": "package \n// receiver: cc *CurrentCondition", "summary_llm": "This Go code defines a `CurrentCondition` struct for parsing weather data and includes methods to check if the condition is zero (empty) or valid. The `IsZero` method compares a zero-initialized `CurrentCondition` with the receiver, while `IsValid` ensures the timestamp is not empty and the condition is not zero.", "keywords_llm": ["currentcondition", "weatherdata", "iszero", "isvalid", "timestamp", "temperature", "humiditypercentage", "winddirection", "xmlname", "station"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 58, "end_line": 73, "text": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}\n", "n_tokens": 153, "primary_symbol": "", "primary_kind": "", "primary_span": [58, 73], "def_symbols": [], "symbols": ["type", "DailyCondition", "struct", "XMLName", "xml", "Name", "WeatherCondition", "Date", "string", "attr", "MinTemperature", "float64", "MaxTemperature", "UVIndex", "uvi", "WindDirection", "WindSpeed", "wsx", "Precipitation", "PrecipitationProbability", "int", "SunriseTime", "rise", "SunsetTime", "set"], "doc_head": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:DailyCondition (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "DailyCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["DailyCondition", "Date", "MaxTemperature", "MinTemperature", "Name", "Precipitation", "PrecipitationProbability", "SunriseTime", "SunsetTime", "UVIndex", "WeatherCondition", "WindDirection", "WindSpeed", "XMLName", "xml.Name"], "header_context_minimal": "package ", "summary_llm": "This Go code defines a `DailyCondition` struct to represent weather conditions for a specific day, including attributes like date, temperature extremes, UV index, wind data, precipitation, and solar times. It uses XML tags to map fields to XML element names.", "keywords_llm": ["dailycondition", "weathercondition", "date", "maxtemperature", "mintemperature", "uvindex", "winddirection", "windspeed", "precipitation", "xmlname", "xsi:schemalocation", "xmlns:xsi"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 74, "end_line": 108, "text": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}\n\ntype Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\n\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\n\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (", "n_tokens": 301, "primary_symbol": "HasCurrentCondition", "primary_kind": "function", "primary_span": [98, 108], "def_symbols": ["HasCurrentCondition"], "symbols": ["HasCurrentCondition", "type", "HourlyCondition", "struct", "XMLName", "xml", "Name", "fc1h", "WeatherCondition", "Timestamp", "string", "attr", "Temperature", "float64", "TemperatureFeelsLike", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "int", "HumidityPercentage", "UVIndex", "uvi", "Pressure", "Response", "weather", "CurrentCondition", "loc", "obs", "DailyConditions", "DailyCondition", "HourlyConditions", "func", "bool", "return", "nil", "IsValid", "errorResponse", "error", "Message", "message", "generate", "bin", "mockgen", "source", "foreca_client", "destination", "mocks", "foreca_client_mocks", "package"], "doc_head": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}\ntype Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(r Response).HasCurrentCondition", "package": "", "node_kind": "method", "receiver": "r Response", "function_name": "", "method_name": "HasCurrentCondition", "type_name": "HourlyCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DailyCondition", "DailyConditions", "HasCurrentCondition", "HourlyCondition", "HourlyConditions", "HumidityPercentage", "IsValid", "Message", "Name", "Precipitation", "PrecipitationProbability", "Pressure", "Response", "Temperature", "TemperatureFeelsLike", "Timestamp", "UVIndex", "WeatherCondition", "WindDirection", "WindSpeed", "XMLName", "foreca_client.go", "foreca_client_mocks.go", "r.CurrentCondition", "xml.Name"], "header_context_minimal": "package \n// receiver: r Response", "summary_llm": "The Go code defines a `Response` struct representing weather data from the Foreca API. It includes methods to check if the response contains current weather conditions and mocks for testing.", "keywords_llm": ["response", "weather", "currentcondition", "hourlycondition", "dailycondition", "valid", "mockgen", "xmlname"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 109, "end_line": 139, "text": "\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}\n\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\n\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\n\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}\n", "n_tokens": 190, "primary_symbol": "NewForecaClient", "primary_kind": "function", "primary_span": [129, 139], "def_symbols": ["NewForecaClient"], "symbols": ["NewForecaClient", "httpClient", "interface", "http", "Request", "Response", "error", "rateLimiter", "Acquire", "string", "int64", "transformer", "Transform", "time", "Location", "foreca", "Forecast", "type", "ForecaClient", "struct", "endpoint", "defaultQueryParams", "map", "rateLimitKey", "func", "client", "return"], "doc_head": "\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}\n\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewForecaClient", "package": "", "node_kind": "function", "receiver": "", "function_name": "NewForecaClient", "method_name": "", "type_name": "ForecaClient", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Do", "ForecaClient", "Forecast", "Location", "NewForecaClient", "Request", "Response", "Transform", "foreca.Forecast", "http.Request", "http.Response", "time.Location"], "header_context_minimal": "package \nimport \"time\"", "summary_llm": "This Go code defines a `ForecaClient` struct and a `NewForecaClient` function. The client is designed to interact with the Foreca weather API, utilizing an HTTP client, rate limiter, and transformer for data handling.", "keywords_llm": ["forecaclient", "newforecacaclient", "httpclient", "ratelimiter", "transformer", "endpoint", "defaultqueryparams", "rate_limitkey", "request", "response", "forecast", "location"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 140, "end_line": 236, "text": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: generic error\")\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, c.endpoint, nil)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot create request.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"foreca client: cannot create request\")\n\t}\n\n\tq := req.URL.Query()\n\tfor key, value := range c.defaultQueryParams {\n\t\tq.Add(key, value)\n\t}\n\tq.Add(\"l\", fmt.Sprintf(\"%d\", id))\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.http.Do(req)\n\tif err != nil {\n\t\tlog.Error(ctx,\n\t\t\t\"Error occurred with the HTTP request.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: http error\")\n\t}\n\n\tdefer func() {\n\t\tif err := resp.Body.Close(); err != nil {\n\t\t\tlog.Error(ctx,\n\t\t\t\t\"Error occurred while closing the response body stream.\",\n\t\t\t\tzap.Int(\"id\", id),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t}()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar r *Response\n\terr = xml.Unmarshal(body, &r)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tvar e errorResponse\n\t\tif err := xml.Unmarshal(body, &e); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"foreca client: cannot unmarshal response\")\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get forecast for location.\", zap.Int(\"id\", id), zap.Any(\"error\", e))\n\t\treturn nil, errors.Wrap(err, \"foreca client: client error\")\n\t}\n\n\treturn c.transformer.Transform(r, loc), nil\n}\n", "n_tokens": 742, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [140, 236], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "func", "ForecaClient", "ctx", "context", "Context", "int", "loc", "time", "Location", "foreca", "Forecast", "error", "span", "xotel", "Tracer", "Start", "client", "get", "forecast", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "location_id", "log", "Debug", "Acquiring", "lock", "for", "key", "zap", "String", "rateLimitKey", "epoch", "err", "Acquire", "Lock", "acquired", "Int64", "errors", "ratelimit", "ErrLimitReached", "Bool", "throttled", "true", "Warn", "Request", "return", "nil", "ErrRequestThrottled", "else", "isLimiterError", "SetStatus", "codes", "Error", "Limiter", "experienced", "RecordError", "Wrap", "limiter", "occurred", "Unexpected", "generic", "req", "http", "NewRequestWithContext", "MethodGet", "endpoint", "Cannot", "create", "request", "cannot", "URL", "Query", "value", "range", "defaultQueryParams", "Add", "fmt", "Sprintf", "RawQuery", "Encode", "resp", "with", "the", "HTTP", "Body", "Close", "while", "closing", "response", "body", "stream", "ReadAll", "var", "Response", "xml", "Unmarshal", "errorResponse", "unmarshal", "location", "Any", "transformer", "Transform"], "doc_head": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"loca", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(c *ForecaClient).GetForecastForLocation", "package": "", "node_kind": "method", "receiver": "c *ForecaClient", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/otel", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Acquire", "Acquiring", "Add", "An", "Any", "Body", "Bool", "Cannot", "Close", "Context", "Debug", "Do", "Encode", "End", "ErrLimitReached", "ErrRequestThrottled", "Error", "ForecaClient", "Forecast", "GetForecastForLocation", "HTTP", "Int", "Int64", "Is", "Limiter", "Location", "Lock", "MethodGet", "NewRequestWithContext", "Query", "RawQuery", "ReadAll", "RecordError", "Request", "Response", "SetAttributes", "SetStatus", "SpanKindClient", "Sprintf", "Start", "String", "Tracer", "Transform", "URL", "Unexpected", "Unmarshal", "Warn", "WithSpanKind", "Wrap", "attribute.Bool", "attribute.Int", "c.defaultQueryParams", "c.endpoint", "c.http", "c.isLimiterError", "c.rateLimitKey", "c.rl", "c.transformer", "codes.Error", "context.Context", "errors.Is", "errors.Wrap", "fmt.Sprintf", "foreca.ErrRequestThrottled", "foreca.Forecast", "http.MethodGet", "http.NewRequestWithContext", "io.ReadAll", "log.Debug", "log.Error", "log.Warn", "q.Add", "q.Encode", "ratelimit.ErrLimitReached", "req.URL", "resp.Body", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "time.Location", "trace.SpanKindClient", "trace.WithSpanKind", "xml.Unmarshal", "xotel.Tracer", "zap.Any", "zap.Error", "zap.Int", "zap.Int64", "zap.String"], "header_context_minimal": "package \nimport (\n    \"go.impalastudios.com/otel\"\n    \"go.uber.org/zap\"\n    \"time\"\n)\n// receiver: c *ForecaClient", "summary_llm": "This Go function `GetForecastForLocation` in the `ForecaClient` struct fetches weather forecasts for a specified location ID. It handles rate limiting and logs various events and errors using OpenTelemetry and Zap logging.", "keywords_llm": ["forecaclient", "getforecastforlocation", "ratelimit", "log", "spankindclient", "httprequest", "xmlunmarshal", "errlimitreached", "errrequestthrottled", "responsebody"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 237, "end_line": 260, "text": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\n\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}\n", "n_tokens": 158, "primary_symbol": "isLimiterError", "primary_kind": "function", "primary_span": [237, 260], "def_symbols": ["isLimiterError", "NewTransformer"], "symbols": ["isLimiterError", "NewTransformer", "func", "ForecaClient", "err", "error", "bool", "list", "ratelimit", "ErrKeyEmpty", "ErrCountZero", "ErrLimitZero", "ErrCountLimit", "ErrZeroDuration", "for", "range", "return", "true", "false", "type", "forecaTransformer", "struct", "cct", "currentConditionTransformer", "dft", "dailyForecastTransformer", "hft", "hourlyForecastTransformer", "NewCurrentConditionTransformer", "NewDailyForecastTransformer", "NewHourlyForecastTransformer"], "doc_head": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(c *ForecaClient).isLimiterError", "package": "", "node_kind": "method", "receiver": "c *ForecaClient", "function_name": "NewTransformer", "method_name": "isLimiterError", "type_name": "forecaTransformer", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["ErrCountLimit", "ErrCountZero", "ErrKeyEmpty", "ErrLimitZero", "ErrZeroDuration", "ForecaClient", "NewCurrentConditionTransformer", "NewDailyForecastTransformer", "NewHourlyForecastTransformer", "NewTransformer", "ratelimit.ErrCountLimit", "ratelimit.ErrCountZero", "ratelimit.ErrKeyEmpty", "ratelimit.ErrLimitZero", "ratelimit.ErrZeroDuration"], "header_context_minimal": "package \n// receiver: c *ForecaClient", "summary_llm": "The `ForecaClient` struct has a method `isLimiterError` that checks if an error is a rate-limiting error. The `NewTransformer` function creates a new instance of `forecaTransformer`, which contains transformers for current conditions, daily forecasts, and hourly forecasts.", "keywords_llm": ["forecaclient", "islimitererror", "ratelimit", "errortypes", "transformer", "newtransformer", "currentcondition", "dailyforecast", "hourlyforecast"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 261, "end_line": 303, "text": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\n\tvar dfs []*foreca.DailyCondition\n\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}\n\nfunc (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\n\treturn r\n}\n\ntype currentConditionTransformer struct{}\n\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}\n", "n_tokens": 294, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [261, 303], "def_symbols": ["Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer"], "symbols": ["Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "func", "forecaTransformer", "Response", "location", "time", "Location", "foreca", "Forecast", "CurrentCondition", "var", "firstHourForecast", "HourlyCondition", "len", "HourlyConditions", "dfs", "DailyCondition", "for", "range", "DailyConditions", "append", "dft", "Date", "hfs", "hft", "return", "cct", "string", "strings", "HasPrefix", "Timestamp", "type", "currentConditionTransformer", "struct"], "doc_head": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\tvar dfs []*foreca.DailyCondition\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}\nfunc (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\treturn r\n}\ntype currentConditionTransformer struct{}\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *forecaTransformer).Transform", "package": "", "node_kind": "method", "receiver": "t *forecaTransformer", "function_name": "NewCurrentConditionTransformer", "method_name": "Transform", "type_name": "currentConditionTransformer", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["CurrentCondition", "DailyCondition", "DailyConditions", "Date", "Forecast", "HasPrefix", "HourlyCondition", "HourlyConditions", "Location", "NewCurrentConditionTransformer", "Response", "Timestamp", "Transform", "d.Date", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "h.Timestamp", "strings.HasPrefix", "t.cct", "t.dft", "t.getHourlyForecastsForDate", "t.hft", "time.Location"], "header_context_minimal": "package \nimport \"time\"\n// receiver: t *forecaTransformer", "summary_llm": "This Go code defines a `forecaTransformer` struct with a `Transform` method that converts a `Response` from the `foreca` package into a `Forecast`. The transformer processes current conditions and hourly/daily forecasts, applying specific transformations to each. It also includes a helper method `getHourlyForecastsForDate` to filter hourly forecasts by date.", "keywords_llm": ["forecatransformer", "transform", "response", "forecast", "currentcondition", "dailyconditions", "hourlyconditions", "location", "strings.hasprefix", "time.location"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 304, "end_line": 349, "text": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex),\n\t\t\t\tutilities.KilometersToMiles(icc.WindGust.Wind.Speed),\n\t\t\t),\n\t\t),\n\t\t1,\n\t)\n\n\tif hf != nil {\n\t\ticc.UVIndex = hf.UVIndex\n\t\ticc.Precipitation = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t\ticc.WeatherConditionNextHour = buildWeatherCondition(hf.WeatherCode, hf.WeatherDescription)\n\t\ticc.PrecipitationNextHour = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t}\n\n\treturn &icc\n}\n", "n_tokens": 465, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [304, 349], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "currentConditionTransformer", "CurrentCondition", "HourlyCondition", "location", "time", "Location", "foreca", "var", "icc", "nil", "return", "buildCurrentConditionFromHourlyForecast", "Epoch", "getUtcEpochForFormatInLocation", "Timestamp", "Visibility", "utilities", "Round", "float64", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Temperature", "HumidityPercentage", "WindGust", "buildWindGust", "WindDirection", "WindSpeed", "Pressure", "buildPressure", "DewPoint", "HeatIndex", "FahrenheitToCelsius", "computeHeatIndex", "CelsiusToFahrenheit", "TemperatureFeelsLike", "computeTemperatureFeelsLike", "KilometersToMiles", "Wind", "Speed", "UVIndex", "Precipitation", "parsePrecipitationForWeatherCode", "WeatherConditionNextHour", "PrecipitationNextHour"], "doc_head": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).Transform", "package": "", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "Transform", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["CelsiusToFahrenheit", "CurrentCondition", "DewPoint", "Epoch", "FahrenheitToCelsius", "HeatIndex", "HourlyCondition", "HumidityPercentage", "KilometersToMiles", "Location", "Precipitation", "PrecipitationNextHour", "Pressure", "Round", "Speed", "Temperature", "TemperatureFeelsLike", "Timestamp", "Transform", "UVIndex", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "Wind.Speed", "WindDirection", "WindGust", "WindSpeed", "c.DewPoint", "c.HumidityPercentage", "c.Pressure", "c.Temperature", "c.Timestamp", "c.Visibility", "c.WeatherCode", "c.WeatherDescription", "c.WindDirection", "c.WindSpeed", "foreca.CurrentCondition", "hf.Precipitation", "hf.UVIndex", "hf.WeatherCode", "hf.WeatherDescription", "icc.DewPoint", "icc.Epoch", "icc.HeatIndex", "icc.HumidityPercentage", "icc.Precipitation", "icc.PrecipitationNextHour", "icc.Pressure", "icc.Temperature", "icc.TemperatureFeelsLike", "icc.UVIndex", "icc.Visibility", "icc.WeatherCondition", "icc.WeatherConditionNextHour", "icc.WindGust", "t.buildCurrentConditionFromHourlyForecast", "t.computeHeatIndex", "t.computeTemperatureFeelsLike", "time.Location", "utilities.CelsiusToFahrenheit", "utilities.FahrenheitToCelsius", "utilities.KilometersToMiles", "utilities.Round"], "header_context_minimal": "package \nimport \"time\"\n// receiver: t *currentConditionTransformer", "summary_llm": "This function transforms a `CurrentCondition` and an `HourlyCondition` into a `foreca.CurrentCondition`, handling cases where either the current or hourly condition might be nil. It computes various weather-related values like temperature feels-like and heat index.", "keywords_llm": ["transform", "currentcondition", "hourlycondition", "forecacurrentcondition", "nilcheck", "temperaturefeelslike", "heatindex", "buildweathercondition", "precipitation"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#10", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 350, "end_line": 384, "text": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\n\tcc.Visibility = 0\n\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\n\treturn &cc\n}\n", "n_tokens": 232, "primary_symbol": "buildCurrentConditionFromHourlyForecast", "primary_kind": "function", "primary_span": [350, 384], "def_symbols": ["buildCurrentConditionFromHourlyForecast"], "symbols": ["buildCurrentConditionFromHourlyForecast", "func", "currentConditionTransformer", "HourlyCondition", "CurrentCondition", "var", "Timestamp", "fmt", "Sprintf", "else", "time", "Now", "UTC", "Format", "Station", "WeatherCode", "d000", "WeatherDescription", "clear", "Visibility", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "return"], "doc_head": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\tcc.Visibility = 0\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\treturn &cc\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).buildCurrentConditionFromHourlyForecast", "package": "", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "buildCurrentConditionFromHourlyForecast", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "Format", "HourlyCondition", "HumidityPercentage", "Now", "Pressure", "Sprintf", "Station", "Temperature", "TemperatureFeelsLike", "Timestamp", "UTC", "Visibility", "WeatherCode", "WeatherDescription", "WindDirection", "WindSpeed", "cc.DewPoint", "cc.HumidityPercentage", "cc.Pressure", "cc.Station", "cc.Temperature", "cc.TemperatureFeelsLike", "cc.Timestamp", "cc.Visibility", "cc.WeatherCode", "cc.WeatherDescription", "cc.WindDirection", "cc.WindSpeed", "fmt.Sprintf", "hf.HumidityPercentage", "hf.Pressure", "hf.Temperature", "hf.Timestamp", "hf.WeatherCode", "hf.WeatherDescription", "hf.WindDirection", "hf.WindSpeed", "time.Now"], "header_context_minimal": "package \nimport \"time\"\n// receiver: t *currentConditionTransformer", "summary_llm": "This function transforms an hourly forecast into a current condition. It sets the timestamp, weather code, description, visibility, temperature, wind direction, and pressure based on the input hourly forecast.", "keywords_llm": ["currentconditiontransformer", "buildcurrentconditionfromhourlyforecast", "timestamp", "weathercode", "weatherdescription", "temperature", "winddirection", "pressure"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#11", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 385, "end_line": 418, "text": "// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\n\treturn hiRothfusz + adjustment\n}\n", "n_tokens": 403, "primary_symbol": "computeHeatIndex", "primary_kind": "function", "primary_span": [391, 418], "def_symbols": ["computeHeatIndex"], "symbols": ["computeHeatIndex", "computes", "heat", "index", "based", "temperature", "fahrenheit", "and", "dewPoint", "Returns", "Source", "http", "www", "wpc", "ncep", "noaa", "gov", "html", "heatindex", "shtml", "heatindex_equation", "dewrh", "func", "currentConditionTransformer", "float64", "computeRelativeHumidity", "hiSteadman", "return", "hiRothfusz", "adjustment", "math", "Sqrt", "Abs", "else"], "doc_head": "// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\treturn hiRothfusz + adjus", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).computeHeatIndex", "package": "", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "computeHeatIndex", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abs", "Returns", "Source", "Sqrt", "dewrh.shtml", "heatindex.shtml", "heatindex_equation.shtml", "math.Abs", "math.Sqrt", "ncep.noaa", "t.computeRelativeHumidity", "www.wpc"], "header_context_minimal": "package \n// receiver: t *currentConditionTransformer", "summary_llm": "The `computeHeatIndex` method calculates the heat index based on temperature and dew point using formulas from NOAA sources. It applies adjustments for low humidity and high temperatures.", "keywords_llm": ["heat index", "temperature", "dew point", "relative humidity", "steadman's formula", "rothfusz's formula", "adjustment", "ncep", "www.wpc.ncep.noaa.gov"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#12", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 419, "end_line": 440, "text": "// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}\n\n// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\n\treturn temperature\n}\n", "n_tokens": 221, "primary_symbol": "computeRelativeHumidity", "primary_kind": "function", "primary_span": [423, 440], "def_symbols": ["computeRelativeHumidity", "computeTemperatureFeelsLike"], "symbols": ["computeRelativeHumidity", "computeTemperatureFeelsLike", "computes", "relative", "humidity", "based", "temperature", "fahrenheit", "and", "dewPoint", "Returns", "Source", "http", "andrew", "rsmas", "miami", "edu", "bmcnoldy", "Humidity", "html", "func", "currentConditionTransformer", "float64", "return", "math", "Exp", "feels", "like", "heat", "index", "windSpeed", "Fahrenheit", "heatIndex", "computeWindChill"], "doc_head": "// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}\n// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\treturn temperature\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).computeRelativeHumidity", "package": "", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "computeRelativeHumidity", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Exp", "Fahrenheit", "Humidity", "Humidity.html", "Returns", "Source", "andrew.rsmas", "math.Exp", "miami.edu", "t.computeWindChill"], "header_context_minimal": "package \n// receiver: t *currentConditionTransformer", "summary_llm": "This Go code defines methods for computing relative humidity and feels like temperature. The `computeRelativeHumidity` method calculates relative humidity based on temperature and dew point in Fahrenheit using a formula from the University of Miami's Atmospheric Science department. The `computeTemperatureFeelsLike` method determines the apparent temperature based on temperature, heat index, and wind speed.", "keywords_llm": ["relative humidity", "temperature", "dew point", "heat index", "wind chill", "math.exp", "fahrenheit", "currentconditiontransformer"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#13", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 441, "end_line": 461, "text": "// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\n\treturn temperature\n}\n\ntype dailyForecastTransformer struct{}\n\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}\n", "n_tokens": 193, "primary_symbol": "computeWindChill", "primary_kind": "function", "primary_span": [445, 461], "def_symbols": ["computeWindChill", "NewDailyForecastTransformer"], "symbols": ["computeWindChill", "NewDailyForecastTransformer", "Compute", "wind", "chill", "based", "temperature", "fahrenheit", "and", "windSpeed", "miles", "per", "hour", "Returns", "Source", "http", "www", "nws", "noaa", "gov", "winter", "windchill", "shtml", "func", "currentConditionTransformer", "float64", "isColdEnough", "isWindyEnough", "return", "math", "Pow", "type", "dailyForecastTransformer", "struct"], "doc_head": "// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\treturn temperature\n}\ntype dailyForecastTransformer struct{}\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).computeWindChill", "package": "", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "NewDailyForecastTransformer", "method_name": "computeWindChill", "type_name": "dailyForecastTransformer", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Compute", "NewDailyForecastTransformer", "Pow", "Returns", "Source", "math.Pow", "noaa.gov", "windchill.shtml", "www.nws"], "header_context_minimal": "package \n// receiver: t *currentConditionTransformer", "summary_llm": "The `computeWindChill` method in the `currentConditionTransformer` struct calculates wind chill based on temperature and wind speed. The `NewDailyForecastTransformer` function initializes a new `dailyForecastTransformer`. These methods are used to transform weather data.", "keywords_llm": ["windchill", "temperature", "windspeed", "computewindchill", "currentconditiontransformer", "newdailyforecasttransformer", "dailyforecasttransformer", "float64", "iscoldenough", "iswindyenough"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#14", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 462, "end_line": 508, "text": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location)\n\n\tif len(hfs) > 0 {\n\t\tdf.MinTemperature = utilities.Round(t.getMinimumTemperature(hfs), 1)\n\t\tdf.MaxTemperature = utilities.Round(t.getMaximumTemperature(hfs), 1)\n\t\tdf.AverageHumidityPercentage = int(math.Round(t.getAverageHumidityPercentage(hfs)))\n\n\t\troundedSunriseTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location))\n\t\troundedSunsetTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location))\n\t\tdayHourlyForecasts := t.getDayHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationDay = utilities.Round(t.getTotalPrecipitation(dayHourlyForecasts), 1)\n\n\t\tnightHourlyForecasts := t.getNightHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationNight = utilities.Round(t.getTotalPrecipitation(nightHourlyForecasts), 1)\n\t\tnightWeatherCode := t.getAverageWeatherCodeForHourlyForecasts(nightHourlyForecasts)\n\t\tdf.WeatherConditionNight = buildWeatherCondition(nightWeatherCode, \"\")\n\n\t\tif isSnowWeatherCode(d.WeatherCode) {\n\t\t\tdf.SnowDay = df.PrecipitationDay\n\t\t}\n\n\t\tif isSnowWeatherCode(nightWeatherCode) {\n\t\t\tdf.SnowNight = df.PrecipitationNight\n\t\t}\n\t}\n\n\treturn &df\n}\n", "n_tokens": 749, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [462, 508], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "dailyForecastTransformer", "DailyCondition", "hfs", "HourlyCondition", "location", "time", "Location", "foreca", "var", "Epoch", "getUtcEpochForFormatInLocation", "Date", "MinTemperature", "utilities", "Round", "MaxTemperature", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Precipitation", "parsePrecipitationForWeatherCode", "PrecipitationProbability", "PrecipitationDay", "PrecipitationNight", "Wind", "buildWind", "WindDirection", "WindSpeed", "UVIndex", "AverageHumidityPercentage", "SnowDay", "SnowNight", "WeatherConditionNight", "SunriseEpoch", "fmt", "Sprintf", "SunriseTime", "SunsetEpoch", "SunsetTime", "len", "getMinimumTemperature", "getMaximumTemperature", "int", "math", "getAverageHumidityPercentage", "roundedSunriseTime", "roundToNextHour", "getTimeForFormatInLocation", "roundedSunsetTime", "dayHourlyForecasts", "getDayHourlyForecasts", "getTotalPrecipitation", "nightHourlyForecasts", "getNightHourlyForecasts", "nightWeatherCode", "getAverageWeatherCodeForHourlyForecasts", "isSnowWeatherCode", "return"], "doc_head": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).Transform", "package": "", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "Transform", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AverageHumidityPercentage", "DailyCondition", "Date", "Epoch", "HourlyCondition", "Location", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Round", "SnowDay", "SnowNight", "Sprintf", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "Transform", "UVIndex", "WeatherCode", "WeatherCondition", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "d.Date", "d.MaxTemperature", "d.MinTemperature", "d.Precipitation", "d.PrecipitationProbability", "d.SunriseTime", "d.SunsetTime", "d.UVIndex", "d.WeatherCode", "d.WeatherDescription", "d.WindDirection", "d.WindSpeed", "df.AverageHumidityPercentage", "df.Epoch", "df.MaxTemperature", "df.MinTemperature", "df.Precipitation", "df.PrecipitationDay", "df.PrecipitationNight", "df.PrecipitationProbability", "df.SnowDay", "df.SnowNight", "df.SunriseEpoch", "df.SunsetEpoch", "df.UVIndex", "df.WeatherCondition", "df.WeatherConditionNight", "df.Wind", "fmt.Sprintf", "foreca.DailyCondition", "math.Round", "t.getAverageHumidityPercentage", "t.getAverageWeatherCodeForHourlyForecasts", "t.getDayHourlyForecasts", "t.getMaximumTemperature", "t.getMinimumTemperature", "t.getNightHourlyForecasts", "t.getTotalPrecipitation", "time.Location", "utilities.Round"], "header_context_minimal": "package \nimport \"time\"\n// receiver: t *dailyForecastTransformer", "summary_llm": "The function `Transform` converts a `DailyCondition` and an array of `HourlyCondition` into a `foreca.DailyCondition`. It handles temperature, precipitation, wind, UV index, and weather conditions for both day and night.", "keywords_llm": ["dailyforecasttransformer", "transform", "dailycondition", "hourlycondition", "foreca.dailyccondition", "temperature", "precipitation", "wind", "uvindex", "weathercondition"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#15", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 509, "end_line": 546, "text": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\n\treturn max\n}\n\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\n\treturn min\n}\n\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\n\tvar total int\n\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\n\treturn float64(total) / float64(len(hfs))\n}\n", "n_tokens": 194, "primary_symbol": "getMaximumTemperature", "primary_kind": "function", "primary_span": [509, 546], "def_symbols": ["getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage"], "symbols": ["getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "float64", "max", "math", "Inf", "for", "range", "Temperature", "return", "min", "len", "var", "total", "int", "HumidityPercentage"], "doc_head": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\treturn max\n}\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\treturn min\n}\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\tvar total int\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\treturn float64(total) / float64(len(hfs))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).getMaximumTemperature", "package": "", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "getMaximumTemperature", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["HourlyCondition", "HumidityPercentage", "Inf", "Temperature", "h.HumidityPercentage", "h.Temperature", "math.Inf"], "header_context_minimal": "package \n// receiver: t *dailyForecastTransformer", "summary_llm": "This Go code defines methods within the `dailyForecastTransformer` struct to calculate the maximum and minimum temperatures from an array of `HourlyCondition` objects. It also calculates the average humidity percentage from the same array.", "keywords_llm": ["dailyforecasttransformer", "getmaximumtemperature", "getminimumtemperature", "getaveragehumiditypercentage", "hourlycondition", "temperature", "humiditypercentage", "math.inf", "len", "float64"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#16", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 547, "end_line": 590, "text": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\n\treturn total\n}\n", "n_tokens": 306, "primary_symbol": "getDayHourlyForecasts", "primary_kind": "function", "primary_span": [547, 590], "def_symbols": ["getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation"], "symbols": ["getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "format", "string", "sunrise", "time", "Time", "sunset", "loc", "Location", "var", "for", "range", "err", "ParseInLocation", "Timestamp", "nil", "continue", "Hour", "append", "return", "float64", "total", "parsePrecipitationForWeatherCode", "WeatherCode", "Precipitation"], "doc_head": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\treturn o\n}\nfunc (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\treturn o\n}\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\treturn total\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).getDayHourlyForecasts", "package": "", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "getDayHourlyForecasts", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Hour", "HourlyCondition", "Location", "ParseInLocation", "Precipitation", "Time", "Timestamp", "WeatherCode", "f.Timestamp", "h.Precipitation", "h.WeatherCode", "sunrise.Hour", "sunset.Hour", "time.Location", "time.ParseInLocation", "time.Time", "ts.Hour"], "header_context_minimal": "package \nimport \"time\"\n// receiver: t *dailyForecastTransformer", "summary_llm": "This Go code defines methods for filtering hourly weather forecasts into daily categories (day and night) based on sunrise and sunset times. It also calculates the total precipitation from a list of hourly conditions.", "keywords_llm": ["dailyforecasttransformer", "hourlycondition", "sunrise", "sunset", "parseinlocation", "time.location", "getdayhourlyforecasts", "getnighthourlyforecasts", "parseprecipitationforweathercode", "totalprecipitation"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#17", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 591, "end_line": 640, "text": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}\n", "n_tokens": 354, "primary_symbol": "getAverageWeatherCodeForHourlyForecasts", "primary_kind": "function", "primary_span": [591, 640], "def_symbols": ["getAverageWeatherCodeForHourlyForecasts"], "symbols": ["getAverageWeatherCodeForHourlyForecasts", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "string", "var", "days", "nights", "cloudiness", "precipitationRate", "precipitationType", "int", "for", "range", "tokens", "strings", "Split", "WeatherCode", "len", "switch", "case", "err", "strconv", "Atoi", "nil", "obs", "code", "else", "averageCloudiness", "math", "Round", "float64", "averagePrecipitationRate", "averagePrecipitationType", "return", "fmt", "Sprintf"], "doc_head": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).getAverageWeatherCodeForHourlyForecasts", "package": "", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "getAverageWeatherCodeForHourlyForecasts", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Atoi", "HourlyCondition", "Round", "Split", "Sprintf", "WeatherCode", "f.WeatherCode", "fmt.Sprintf", "math.Round", "strconv.Atoi", "strings.Split"], "header_context_minimal": "package \n// receiver: t *dailyForecastTransformer", "summary_llm": "This function calculates the average weather conditions from hourly forecasts. It categorizes days and nights based on the first character of the `WeatherCode`. It computes averages for cloudiness, precipitation rate, and precipitation type using the remaining characters of the `WeatherCode`, then returns a string representing these averages.", "keywords_llm": ["dailyforecasttransformer", "getaverageweathercodeforhourlyforecasts", "hourlycondition", "weathercode", "strconv.atoi", "math.round", "strings.split", "fmt.sprintf"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#18", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 641, "end_line": 666, "text": "type hourlyForecastTransformer struct{}\n\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}\n\nfunc (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\n\treturn &hf\n}\n", "n_tokens": 271, "primary_symbol": "NewHourlyForecastTransformer", "primary_kind": "function", "primary_span": [643, 666], "def_symbols": ["NewHourlyForecastTransformer", "Transform"], "symbols": ["NewHourlyForecastTransformer", "Transform", "type", "hourlyForecastTransformer", "struct", "func", "return", "HourlyCondition", "location", "time", "Location", "foreca", "var", "Epoch", "getUtcEpochForFormatInLocation", "Timestamp", "Temperature", "utilities", "Round", "TemperatureFeelsLike", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Precipitation", "parsePrecipitationForWeatherCode", "isSnowWeatherCode", "Snow", "PrecipitationProbability", "Wind", "buildWind", "WindDirection", "WindSpeed", "Pressure", "buildPressure", "HumidityPercentage", "UVIndex"], "doc_head": "type hourlyForecastTransformer struct{}\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}\nfunc (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\treturn &hf\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *hourlyForecastTransformer).Transform", "package": "", "node_kind": "method", "receiver": "t *hourlyForecastTransformer", "function_name": "NewHourlyForecastTransformer", "method_name": "Transform", "type_name": "hourlyForecastTransformer", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Epoch", "HourlyCondition", "HumidityPercentage", "Location", "NewHourlyForecastTransformer", "Precipitation", "PrecipitationProbability", "Pressure", "Round", "Snow", "Temperature", "TemperatureFeelsLike", "Timestamp", "Transform", "UVIndex", "WeatherCode", "WeatherCondition", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "foreca.HourlyCondition", "h.HumidityPercentage", "h.Precipitation", "h.PrecipitationProbability", "h.Pressure", "h.Temperature", "h.TemperatureFeelsLike", "h.Timestamp", "h.UVIndex", "h.WeatherCode", "h.WeatherDescription", "h.WindDirection", "h.WindSpeed", "hf.Epoch", "hf.HumidityPercentage", "hf.Precipitation", "hf.PrecipitationProbability", "hf.Pressure", "hf.Snow", "hf.Temperature", "hf.TemperatureFeelsLike", "hf.UVIndex", "hf.WeatherCondition", "hf.Wind", "time.Location", "utilities.Round"], "header_context_minimal": "package \nimport \"time\"\n// receiver: t *hourlyForecastTransformer", "summary_llm": "This Go code defines a `hourlyForecastTransformer` struct with methods to transform `HourlyCondition` structs into `foreca.HourlyCondition` structs. The transformation includes rounding temperature and precipitation values, converting timestamps to UTC epoch, building weather conditions, and handling snow-specific data.", "keywords_llm": ["hourlyforecasttransformer", "transform", "humiditypercentage", "temperature", "precipitation", "pressure", "winddirection", "windspeed", "weathercode", "uvindex", "location", "foreca.hourlycondition"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#19", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 667, "end_line": 688, "text": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\n\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\n\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}\n", "n_tokens": 151, "primary_symbol": "buildWeatherCondition", "primary_kind": "function", "primary_span": [667, 688], "def_symbols": ["buildWeatherCondition", "buildWindGust", "buildWind"], "symbols": ["buildWeatherCondition", "buildWindGust", "buildWind", "func", "code", "string", "description", "foreca", "WeatherCondition", "title", "cases", "Title", "language", "English", "return", "Code", "parseWeatherCode", "Description", "String", "direction", "speed", "float64", "gust", "WindGust", "Wind", "Gust", "Direction", "getWindDirection", "Speed", "utilities", "Round"], "doc_head": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:buildWeatherCondition", "package": "", "node_kind": "function", "receiver": "", "function_name": "buildWeatherCondition", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Code", "Description", "Direction", "English", "Gust", "Round", "Speed", "String", "Title", "WeatherCondition", "Wind", "WindGust", "cases.Title", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindGust", "language.English", "title.String", "utilities.Round"], "header_context_minimal": "package ", "summary_llm": "This Go code defines functions to build weather condition and wind gust objects using the `foreca` package. It includes utility functions for parsing weather codes, formatting descriptions, and rounding wind speeds.", "keywords_llm": ["weather", "condition", "wind", "gust", "direction", "speed", "code", "description", "rounding", "buildweathercondition", "buildwindgust", "buildwind"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#20", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 689, "end_line": 730, "text": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\n\treturn foreca.WeatherCode(wc)\n}\n", "n_tokens": 336, "primary_symbol": "parseWeatherCode", "primary_kind": "function", "primary_span": [689, 730], "def_symbols": ["parseWeatherCode"], "symbols": ["parseWeatherCode", "func", "code", "string", "foreca", "WeatherCode", "strings", "TrimLeft", "var", "switch", "case", "WeatherCodeClear", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeMostlyCloudy", "WeatherCodeCloudy", "WeatherCodeHazy", "WeatherCodeFog", "WeatherCodeChanceOfRain", "WeatherCodeRain", "WeatherCodeChanceOfThunderstorms", "WeatherCodeThunderstorms", "WeatherCodeChanceOfSleet", "WeatherCodeSleet", "WeatherCodeChanceOfSnow", "WeatherCodeSnow", "default", "return"], "doc_head": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\treturn foreca.WeatherCode(wc)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:parseWeatherCode", "package": "", "node_kind": "function", "receiver": "", "function_name": "parseWeatherCode", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["TrimLeft", "WeatherCode", "WeatherCodeChanceOfRain", "WeatherCodeChanceOfSleet", "WeatherCodeChanceOfSnow", "WeatherCodeChanceOfThunderstorms", "WeatherCodeClear", "WeatherCodeCloudy", "WeatherCodeFog", "WeatherCodeHazy", "WeatherCodeMostlyCloudy", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeRain", "WeatherCodeSleet", "WeatherCodeSnow", "WeatherCodeThunderstorms", "foreca.WeatherCode", "foreca.WeatherCodeChanceOfRain", "foreca.WeatherCodeChanceOfSleet", "foreca.WeatherCodeChanceOfSnow", "foreca.WeatherCodeChanceOfThunderstorms", "foreca.WeatherCodeClear", "foreca.WeatherCodeCloudy", "foreca.WeatherCodeFog", "foreca.WeatherCodeHazy", "foreca.WeatherCodeMostlyCloudy", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCodePartlyCloudy", "foreca.WeatherCodeRain", "foreca.WeatherCodeSleet", "foreca.WeatherCodeSnow", "foreca.WeatherCodeThunderstorms", "strings.TrimLeft"], "header_context_minimal": "package ", "summary_llm": "This code is a simple HTTP server that listens on port 8080 and responds to GET requests with 'Hello, World!'", "keywords_llm": ["go", "http", "server", "port 8080", "get request", "response", "hello, world!"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#21", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 731, "end_line": 752, "text": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\n\treturn utilities.ContainsString(snowyConditions, c)\n}\n\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\n\treturn precipitation\n}\n\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}\n", "n_tokens": 145, "primary_symbol": "isSnowWeatherCode", "primary_kind": "function", "primary_span": [731, 752], "def_symbols": ["isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection"], "symbols": ["isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection", "func", "code", "string", "bool", "strings", "TrimLeft", "snowyConditions", "return", "utilities", "ContainsString", "precipitation", "float64", "foreca", "WindDirection", "Abbreviation", "Degrees", "getWindDirectionInDegrees"], "doc_head": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\treturn utilities.ContainsString(snowyConditions, c)\n}\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\treturn precipitation\n}\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:isSnowWeatherCode", "package": "", "node_kind": "function", "receiver": "", "function_name": "isSnowWeatherCode", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "ContainsString", "Degrees", "TrimLeft", "WindDirection", "foreca.WindDirection", "strings.TrimLeft", "utilities.ContainsString"], "header_context_minimal": "package ", "summary_llm": "The code defines functions to interpret weather codes. It checks if a code indicates snow using `isSnowWeatherCode`, parses precipitation for weather codes with `parsePrecipitationForWeatherCode`, and converts wind direction abbreviations into degrees using `getWindDirection`.", "keywords_llm": ["weather", "code", "snow", "precipitation", "wind", "direction", "degrees", "abbreviation", "containsstring", "trimleft"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#22", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 753, "end_line": 791, "text": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}\n", "n_tokens": 192, "primary_symbol": "getWindDirectionInDegrees", "primary_kind": "function", "primary_span": [753, 791], "def_symbols": ["getWindDirectionInDegrees"], "symbols": ["getWindDirectionInDegrees", "func", "string", "float64", "switch", "case", "return", "NNE", "ENE", "ESE", "SSE", "SSW", "WSW", "WNW", "NNW", "default"], "doc_head": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:getWindDirectionInDegrees", "package": "", "node_kind": "function", "receiver": "", "function_name": "getWindDirectionInDegrees", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["E", "ENE", "ESE", "N", "NE", "NNE", "NNW", "NW", "S", "SE", "SSE", "SSW", "SW", "W", "WNW", "WSW"], "header_context_minimal": "package ", "summary_llm": "The provided Go code is a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' to any GET requests.", "keywords_llm": ["go", "http", "server", "port", "8080", "get request", "response", "hello, world!"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#23", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 792, "end_line": 839, "text": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}\n\nfunc getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn ts.In(utc).Unix()\n}\n\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\n\treturn &ts\n}\n", "n_tokens": 289, "primary_symbol": "buildPressure", "primary_kind": "function", "primary_span": [792, 839], "def_symbols": ["buildPressure", "getUtcEpochForFormatInLocation", "getTimeForFormatInLocation"], "symbols": ["buildPressure", "getUtcEpochForFormatInLocation", "getTimeForFormatInLocation", "func", "string", "foreca", "Pressure", "pressureStr", "strings", "TrimLeft", "pressure", "err", "strconv", "ParseFloat", "nil", "var", "trend", "PressureTrend", "switch", "case", "PressureTrendFalling", "PressureTrendRising", "default", "PressureTrendSteady", "return", "Millibar", "Trend", "format", "location", "time", "Location", "int64", "utc", "LoadLocation", "UTC", "ParseInLocation", "Unix", "Time"], "doc_head": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}\nfunc getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\treturn ts.In(utc).Unix()\n}\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\treturn &ts\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:buildPressure", "package": "", "node_kind": "function", "receiver": "", "function_name": "buildPressure", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["In", "LoadLocation", "Location", "Millibar", "ParseFloat", "ParseInLocation", "Pressure", "PressureTrend", "PressureTrendFalling", "PressureTrendRising", "PressureTrendSteady", "Time", "Trend", "TrimLeft", "UTC", "Unix", "foreca.Pressure", "foreca.PressureTrend", "foreca.PressureTrendFalling", "foreca.PressureTrendRising", "foreca.PressureTrendSteady", "strconv.ParseFloat", "strings.TrimLeft", "time.LoadLocation", "time.Location", "time.ParseInLocation", "time.Time", "ts.In"], "header_context_minimal": "package \nimport \"time\"", "summary_llm": "The code defines functions to build a pressure object from a string and get a UTC epoch timestamp for a time string in a specific format. The `buildPressure` function processes a pressure string to extract the value and trend, returning a `foreca.Pressure` object. The `getUtcEpochForFormatInLocation` and `getTimeForFormatInLocation` functions parse a time string according to a given format and location, converting it to UTC epoch time or a `time.Time` object.", "keywords_llm": ["pressure", "buildpressure", "forecast", "trend", "utc", "epoch", "parse", "format", "location", "timestamp", "error", "float64"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#24", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "internal/foreca/adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 840, "end_line": 847, "text": "func roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\n\treturn &roundedTime\n\n}\n", "n_tokens": 62, "primary_symbol": "roundToNextHour", "primary_kind": "function", "primary_span": [840, 847], "def_symbols": ["roundToNextHour"], "symbols": ["roundToNextHour", "func", "time", "Time", "missingSeconds", "Unix", "roundedTime", "Add", "Duration", "Second", "return"], "doc_head": "func roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\treturn &roundedTime\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:roundToNextHour", "package": "", "node_kind": "function", "receiver": "", "function_name": "roundToNextHour", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Add", "Duration", "Second", "Time", "Unix", "t.Add", "t.Unix", "time.Duration", "time.Second", "time.Time", "time.Unix"], "header_context_minimal": "package \nimport \"time\"", "summary_llm": "The function `roundToNextHour` takes a `time.Time` object and rounds it up to the next hour by calculating the missing seconds until the next hour boundary and then adding those seconds.", "keywords_llm": ["roundtonexthour", "time.time", "unix", "add", "duration", "second", "missingseconds", "roundedtime"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}\n\n// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 284, "primary_symbol": "NewMockhttpClient", "primary_kind": "function", "primary_span": [34, 44], "def_symbols": ["NewMockhttpClient", "EXPECT"], "symbols": ["NewMockhttpClient", "EXPECT", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "foreca_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "foreca_client_mocks", "package", "Package", "GoMock", "import", "http", "net", "reflect", "time", "foreca", "impalastudios", "com", "weather", "foreca_proxy", "internal", "clients", "adapters", "gomock", "uber", "org", "mock", "MockhttpClient", "httpClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockhttpClientMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}\n// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockhttpClient).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockhttpClient", "function_name": "NewMockhttpClient", "method_name": "EXPECT", "type_name": "MockhttpClient", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Code", "Controller", "DO", "EDIT", "EXPECT", "Generated", "GoMock", "MockGen", "MockhttpClient", "MockhttpClientMockRecorder", "NOT", "NewMockhttpClient", "Package", "Source", "foreca_client.go", "foreca_client_mocks.go", "go.impalastudios", "go.uber", "gomock.Controller", "m.recorder", "mock.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockhttpClient", "summary_llm": "The code defines a mock implementation of the `httpClient` interface using GoMock. It includes types for `MockhttpClient`, `MockhttpClientMockRecorder`, and functions to create a new mock instance and expect method calls.", "keywords_llm": ["mock", "httpclient", "gomock", "newmockhttpclient", "expect", "mockhttpclientmockrecorder", "ctrl", "recorder"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 77, "text": "// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 276, "primary_symbol": "Do", "primary_kind": "function", "primary_span": [46, 77], "def_symbols": ["Do", "NewMockrateLimiter"], "symbols": ["Do", "NewMockrateLimiter", "mocks", "base", "method", "func", "MockhttpClient", "arg0", "http", "Request", "Response", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockhttpClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "MockrateLimiter", "rateLimiter", "interface", "type", "struct", "Controller", "recorder", "MockrateLimiterMockRecorder", "the", "for", "creates", "new", "instance"], "doc_head": "// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockhttpClient).Do", "package": "", "node_kind": "method", "receiver": "m *MockhttpClient", "function_name": "NewMockrateLimiter", "method_name": "Do", "type_name": "MockrateLimiter", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Controller", "Do", "Helper", "MockhttpClient", "MockhttpClientMockRecorder", "MockrateLimiter", "MockrateLimiterMockRecorder", "NewMockrateLimiter", "RecordCallWithMethodType", "Request", "Response", "T", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "http.Request", "http.Response", "m.ctrl", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *MockhttpClient", "summary_llm": "This Go code defines mocks for an HTTP client and a rate limiter. The `MockhttpClient` struct provides methods to mock the `Do` method of an HTTP client, while the `MockrateLimiter` struct provides methods to mock the rate limiting functionality.", "keywords_llm": ["mock", "httpclient", "do", "recordcallwithmethodtype", "rate limiter", "gomock", "controller", "recorder", "newmockrate_limiter"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 78, "end_line": 108, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}\n\n// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}\n", "n_tokens": 258, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [79, 108], "def_symbols": ["EXPECT", "Acquire"], "symbols": ["EXPECT", "Acquire", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockrateLimiter", "MockrateLimiterMockRecorder", "return", "recorder", "mocks", "base", "method", "arg0", "string", "int64", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "Mocktransformer", "transformer", "interface", "type", "struct", "Controller", "MocktransformerMockRecorder", "for"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}\n// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockrateLimiter).EXPECT", "package": "", "node_kind": "method", "receiver": "m *MockrateLimiter", "function_name": "", "method_name": "EXPECT", "type_name": "Mocktransformer", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Acquire", "Call", "Controller", "EXPECT", "Helper", "MockrateLimiter", "MockrateLimiterMockRecorder", "Mocktransformer", "MocktransformerMockRecorder", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *MockrateLimiter", "summary_llm": "This Go code defines mock implementations for a rate limiter and a transformer interface using the gomock library. It includes methods to record expected calls and verify interactions.", "keywords_llm": ["gomock", "rate limiter", "transformer", "mock", "expect", "call recorder", "controller", "method type"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 109, "end_line": 134, "text": "// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}\n\n// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}\n", "n_tokens": 239, "primary_symbol": "NewMocktransformer", "primary_kind": "function", "primary_span": [110, 134], "def_symbols": ["NewMocktransformer", "EXPECT", "Transform"], "symbols": ["NewMocktransformer", "EXPECT", "Transform", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mocktransformer", "recorder", "MocktransformerMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "clients", "Response", "arg1", "time", "Location", "foreca", "Forecast", "Helper", "ret", "Call", "ret0", "indicates", "call", "any", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}\n// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *Mocktransformer).EXPECT", "package": "", "node_kind": "method", "receiver": "m *Mocktransformer", "function_name": "NewMocktransformer", "method_name": "EXPECT", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Call", "Controller", "EXPECT", "Forecast", "Helper", "Location", "Mocktransformer", "MocktransformerMockRecorder", "NewMocktransformer", "RecordCallWithMethodType", "Response", "T", "T.Helper", "Transform", "TypeOf", "clients.Response", "ctrl.RecordCallWithMethodType", "ctrl.T", "foreca.Forecast", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf", "time.Location"], "header_context_minimal": "package \nimport \"time\"\n// receiver: m *Mocktransformer", "summary_llm": "This Go code defines a mock implementation for the `Mocktransformer` type using the `gomock` library. It includes methods to create a new mock instance, expect method calls, and record those calls.", "keywords_llm": ["mock", "gomock", "newmocktransformer", "expect", "transform", "clients.response", "time.location", "foreca.forecast"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package v0\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\ntype transformer struct{}\n\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\n\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}\n", "n_tokens": 142, "primary_symbol": "newTransformer", "primary_kind": "function", "primary_span": [10, 21], "def_symbols": ["newTransformer", "Transform"], "symbols": ["newTransformer", "Transform", "package", "import", "impalastudios", "com", "weather", "foreca_proxy", "internal", "foreca", "pkg", "type", "transformer", "struct", "func", "return", "Forecast", "ForecastResponse", "CurrentCondition", "transformCurrentCondition", "DailyForecasts", "transformDailyConditions", "DailyConditions", "HourlyForecasts", "transformHourlyConditions", "HourlyConditions"], "doc_head": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\ntype transformer struct{}\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).Transform", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "newTransformer", "method_name": "Transform", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DailyConditions", "DailyForecasts", "Forecast", "ForecastResponse", "HourlyConditions", "HourlyForecasts", "Transform", "foreca.Forecast", "go.impalastudios", "in.CurrentCondition", "in.DailyConditions", "in.HourlyConditions", "t.transformCurrentCondition", "t.transformDailyConditions", "t.transformHourlyConditions", "v0.ForecastResponse"], "header_context_minimal": "package v0\n// receiver: t *transformer", "summary_llm": "The `transformer` struct in the `v0` package includes a method `Transform` that converts an instance of `foreca.Forecast` into a `v0.ForecastResponse`. This transformation involves converting current conditions, daily forecasts, and hourly forecasts separately.", "keywords_llm": ["transformer", "forecast", "currentcondition", "dailyconditions", "hourlyconditions", "forecastresponse", "transformcurrentcondition", "transformdailyconditions", "transformhourlyconditions"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 42, "text": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}\n", "n_tokens": 249, "primary_symbol": "transformCurrentCondition", "primary_kind": "function", "primary_span": [22, 42], "def_symbols": ["transformCurrentCondition"], "symbols": ["transformCurrentCondition", "func", "transformer", "foreca", "CurrentCondition", "ForecastResponse_CurrentCondition", "return", "Epoch", "Visibility", "float32", "WeatherCondition", "transformWeatherCondition", "Precipitation", "NextHour", "ForecastResponse_CurrentCondition_NextHour", "WeatherConditionNextHour", "PrecipitationNextHour", "Temperature", "TemperatureFeelsLike", "WindGust", "transformWindGust", "DewPoint", "HeatIndex", "Pressure", "transformPressure", "UvIndex", "UVIndex", "HumidityPercentage", "int32"], "doc_head": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformCurrentCondition", "package": "", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformCurrentCondition", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "Epoch", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition_NextHour", "HeatIndex", "HumidityPercentage", "NextHour", "Precipitation", "PrecipitationNextHour", "Pressure", "Temperature", "TemperatureFeelsLike", "UVIndex", "UvIndex", "Visibility", "WeatherCondition", "WeatherConditionNextHour", "WindGust", "foreca.CurrentCondition", "in.DewPoint", "in.Epoch", "in.HeatIndex", "in.HumidityPercentage", "in.Precipitation", "in.PrecipitationNextHour", "in.Pressure", "in.Temperature", "in.TemperatureFeelsLike", "in.UVIndex", "in.Visibility", "in.WeatherCondition", "in.WeatherConditionNextHour", "in.WindGust", "t.transformPressure", "t.transformWeatherCondition", "t.transformWindGust", "v0.ForecastResponse_CurrentCondition", "v0.ForecastResponse_CurrentCondition_NextHour"], "header_context_minimal": "package \n// receiver: t *transformer", "summary_llm": "This function transforms a `foreca.CurrentCondition` object into a `v0.ForecastResponse_CurrentCondition` object by converting various float32 and int32 values and calling helper functions to transform nested objects like `WeatherCondition` and `WindGust`. The transformation includes mapping fields such as `Epoch`, `Visibility`, `Temperature`, and more, ensuring data consistency between the source and target structures.", "keywords_llm": ["transformer", "currentcondition", "forecastresponse_currentcondition", "float32", "int32", "weathercondition", "windgust", "visibility", "temperature"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 72, "text": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.SunsetEpoch,\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n", "n_tokens": 314, "primary_symbol": "transformDailyConditions", "primary_kind": "function", "primary_span": [43, 72], "def_symbols": ["transformDailyConditions"], "symbols": ["transformDailyConditions", "func", "transformer", "foreca", "DailyCondition", "ForecastResponse_DailyForecast", "var", "conditions", "for", "range", "condition", "Epoch", "TemperatureMin", "float32", "MinTemperature", "TemperatureMax", "MaxTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "PrecipitationProbability", "int32", "Wind", "transformWind", "AverageHumidityPercentage", "WeatherCondition", "transformWeatherCondition", "WeatherConditionNight", "UvIndex", "UVIndex", "SunriseEpoch", "SunsetEpoch", "append", "return"], "doc_head": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.Su", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformDailyConditions", "package": "", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformDailyConditions", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["AverageHumidityPercentage", "DailyCondition", "Epoch", "ForecastResponse_DailyForecast", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Snow", "SnowDay", "SnowNight", "SunriseEpoch", "SunsetEpoch", "TemperatureMax", "TemperatureMin", "UVIndex", "UvIndex", "WeatherCondition", "WeatherConditionNight", "Wind", "d.AverageHumidityPercentage", "d.Epoch", "d.MaxTemperature", "d.MinTemperature", "d.Precipitation", "d.PrecipitationDay", "d.PrecipitationNight", "d.PrecipitationProbability", "d.Snow", "d.SnowDay", "d.SnowNight", "d.SunriseEpoch", "d.SunsetEpoch", "d.UVIndex", "d.WeatherCondition", "d.WeatherConditionNight", "d.Wind", "foreca.DailyCondition", "t.transformWeatherCondition", "t.transformWind", "v0.ForecastResponse_DailyForecast"], "header_context_minimal": "package \n// receiver: t *transformer", "summary_llm": "This function transforms a slice of `foreca.DailyCondition` into a slice of `v0.ForecastResponse_DailyForecast`, converting various fields like temperature and precipitation to float32 and int32 types. It also uses helper functions for transforming wind and weather conditions.", "keywords_llm": ["transformdailyconditions", "dailycondition", "forecastresponse_dailyforecast", "float32", "int32", "weathercondition", "wind", "precipitation", "temperature", "sunriseepoch", "sunsetepoch"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 73, "end_line": 96, "text": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n", "n_tokens": 228, "primary_symbol": "transformHourlyConditions", "primary_kind": "function", "primary_span": [73, 96], "def_symbols": ["transformHourlyConditions"], "symbols": ["transformHourlyConditions", "func", "transformer", "foreca", "HourlyCondition", "ForecastResponse_HourlyForecast", "var", "conditions", "for", "range", "condition", "Epoch", "Temperature", "float32", "TemperatureFeelsLike", "WeatherCondition", "transformWeatherCondition", "Precipitation", "Snow", "PrecipitationProbability", "int32", "Wind", "transformWind", "Pressure", "transformPressure", "HumidityPercentage", "UvIndex", "UVIndex", "append", "return"], "doc_head": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\t\tconditions = append(conditions, condition)\n\t}\n\treturn conditions\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformHourlyConditions", "package": "", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformHourlyConditions", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Epoch", "ForecastResponse_HourlyForecast", "HourlyCondition", "HumidityPercentage", "Precipitation", "PrecipitationProbability", "Pressure", "Snow", "Temperature", "TemperatureFeelsLike", "UVIndex", "UvIndex", "WeatherCondition", "Wind", "foreca.HourlyCondition", "h.Epoch", "h.HumidityPercentage", "h.Precipitation", "h.PrecipitationProbability", "h.Pressure", "h.Snow", "h.Temperature", "h.TemperatureFeelsLike", "h.UVIndex", "h.WeatherCondition", "h.Wind", "t.transformPressure", "t.transformWeatherCondition", "t.transformWind", "v0.ForecastResponse_HourlyForecast"], "header_context_minimal": "package \n// receiver: t *transformer", "summary_llm": "The `transformHourlyConditions` function transforms a slice of `foreca.HourlyCondition` into a slice of `v0.ForecastResponse_HourlyForecast`, applying transformations to specific fields such as temperature, weather condition, wind, and pressure using helper functions.", "keywords_llm": ["transformhourlyconditions", "epoch", "temperature", "weathercondition", "wind", "pressure", "precipitationprobability", "humiditypercentage", "uvindex"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 97, "end_line": 132, "text": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\n\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}\n\nfunc (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}\n", "n_tokens": 246, "primary_symbol": "transformWind", "primary_kind": "function", "primary_span": [97, 132], "def_symbols": ["transformWind", "transformPressure", "transformWeatherCondition"], "symbols": ["transformWind", "transformPressure", "transformWeatherCondition", "func", "transformer", "foreca", "Wind", "ForecastResponse_Wind", "nil", "return", "Direction", "ForecastResponse_WindDirection", "Abbreviation", "Degrees", "float32", "Speed", "Pressure", "ForecastResponse_Pressure", "Millibar", "Trend", "int32", "WeatherCondition", "ForecastResponse_WeatherCondition", "Code", "string", "Description"], "doc_head": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}\nfunc (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformWind", "package": "", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformWind", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Code", "Degrees", "Description", "Direction", "ForecastResponse_Pressure", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "ForecastResponse_WindDirection", "Millibar", "Pressure", "Speed", "Trend", "WeatherCondition", "Wind", "foreca.Pressure", "foreca.WeatherCondition", "foreca.Wind", "in.Code", "in.Description", "in.Direction", "in.Millibar", "in.Speed", "in.Trend", "v0.ForecastResponse_Pressure", "v0.ForecastResponse_WeatherCondition", "v0.ForecastResponse_Wind", "v0.ForecastResponse_WindDirection"], "header_context_minimal": "package \n// receiver: t *transformer", "summary_llm": "The Go code defines methods for transforming weather-related data structures from a `foreca` package to a `v0` package. These methods handle wind, pressure, and weather conditions, converting them into corresponding structures in the `ForecastResponse` namespace.", "keywords_llm": ["transformer", "wind", "pressure", "weather condition", "forecast response", "millibar", "trend", "code", "description", "direction", "speed"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 133, "end_line": 143, "text": "func (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}\n", "n_tokens": 82, "primary_symbol": "transformWindGust", "primary_kind": "function", "primary_span": [133, 143], "def_symbols": ["transformWindGust"], "symbols": ["transformWindGust", "func", "transformer", "foreca", "WindGust", "ForecastResponse_CurrentCondition_WindGust", "nil", "return", "Wind", "transformWind", "Gust", "float32"], "doc_head": "func (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformWindGust", "package": "", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformWindGust", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ForecastResponse_CurrentCondition_WindGust", "Gust", "Wind", "WindGust", "foreca.WindGust", "in.Gust", "in.Wind", "t.transformWind", "v0.ForecastResponse_CurrentCondition_WindGust"], "header_context_minimal": "package \n// receiver: t *transformer", "summary_llm": "The `transformWindGust` function in the Go code snippet transforms a `foreca.WindGust` object into a `v0.ForecastResponse_CurrentCondition_WindGust` object. It handles nil inputs and converts float64 values to float32.", "keywords_llm": ["transformwindgust", "foreca.windgust", "v0.forecastresponse_currentcondition_windgust", "nil input", "float64 conversion", "float32", "transformer", "method", "current condition"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 37, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\n\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\n\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}\n\nfunc (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}\n", "n_tokens": 229, "primary_symbol": "NewServer", "primary_kind": "function", "primary_span": [22, 37], "def_symbols": ["NewServer", "toGrpcError"], "symbols": ["NewServer", "toGrpcError", "package", "import", "context", "errors", "impalastudios", "com", "weather", "foreca_proxy", "internal", "foreca", "pbv0", "pkg", "google", "golang", "org", "grpc", "codes", "status", "type", "forecastService", "interface", "GetForecastForLocation", "ctx", "Context", "int", "Forecast", "error", "Server", "struct", "UnimplementedForecaProxyServer", "service", "transformer", "func", "return", "err", "ErrLocationNotFound", "Error", "NotFound", "Location", "not", "found", "ErrRequestThrottled", "ResourceExhausted", "Too", "many", "requests", "Retry", "later", "Internal", "Something", "went", "wrong"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}\nfunc (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Server).toGrpcError", "package": "v0", "node_kind": "method", "receiver": "s *Server", "function_name": "NewServer", "method_name": "toGrpcError", "type_name": "forecastService", "type_kind": "interface", "imports_used_minimal": [], "symbols_referenced_strict": ["Context", "ErrLocationNotFound", "ErrRequestThrottled", "Error", "Forecast", "GetForecastForLocation", "Internal", "Is", "Location", "NewServer", "NotFound", "ResourceExhausted", "Retry", "Server", "Something", "Too", "UnimplementedForecaProxyServer", "codes.Internal", "codes.NotFound", "codes.ResourceExhausted", "context.Context", "errors.Is", "foreca.ErrLocationNotFound", "foreca.ErrRequestThrottled", "foreca.Forecast", "go.impalastudios", "google.golang", "pbv0.UnimplementedForecaProxyServer", "status.Error"], "header_context_minimal": "package v0\n// receiver: s *Server", "summary_llm": "This Go code defines a server for handling gRPC requests related to weather forecasts. It includes methods for transforming errors into appropriate gRPC error codes and messages.", "keywords_llm": ["server", "grpc", "error transformation", "weather forecasts", "codes", "notfound", "resourceexhausted", "internal"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "rel_path": "internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 17, "text": "package v0\n\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\n\treturn s.t.Transform(forecast), nil\n}\n", "n_tokens": 112, "primary_symbol": "GetForecast", "primary_kind": "function", "primary_span": [8, 17], "def_symbols": ["GetForecast"], "symbols": ["GetForecast", "package", "import", "context", "pbv0", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "func", "Server", "ctx", "Context", "ForecastRequest", "ForecastResponse", "error", "forecast", "err", "service", "GetForecastForLocation", "int", "GetLocationId", "nil", "return", "toGrpcError", "Transform"], "doc_head": "package v0\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\treturn s.t.Transform(forecast), nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Server).GetForecast", "package": "v0", "node_kind": "method", "receiver": "s *Server", "function_name": "", "method_name": "GetForecast", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Context", "ForecastRequest", "ForecastResponse", "GetForecast", "GetForecastForLocation", "GetLocationId", "Server", "Transform", "context.Context", "go.impalastudios", "in.GetLocationId", "pbv0.ForecastRequest", "pbv0.ForecastResponse", "s.service", "s.t", "s.toGrpcError"], "header_context_minimal": "package v0\n// receiver: s *Server", "summary_llm": "The Go function `GetForecast` in the `v0` package handles a gRPC request for weather forecasts. It retrieves forecast data using `s.service.GetForecastForLocation`, transforms it with `s.t.Transform`, and returns it as a gRPC response or an error.", "keywords_llm": ["getforecast", "weather", "forecasts", "grpc", "context", "service", "locationid", "transform", "error"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go", "rel_path": "pkg/pb/v0/pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 6, "text": "package v0\n\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n", "n_tokens": 101, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 6], "def_symbols": [], "symbols": ["package", "Generate", "gRPC", "client", "and", "server", "auto", "generated", "code", "generate", "protoc", "proto_path", "go_out", "go_opt", "module", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "service", "proto", "grpc_out", "grpc_opt"], "doc_head": "package v0\n// Generate gRPC client and server auto-generated code\n//go:generate protoc --proto_path=. --go_out=. --go_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto\n//go:generate protoc --proto_path=. --go-grpc_out=. --go-grpc_opt=module=go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0 service.v0.proto", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "v0", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Generate", "go.impalastudios", "service.v0"], "header_context_minimal": "package v0", "summary_llm": "This Go file contains gRPC client and server auto-generated code instructions using protoc with specified options for generating code from the service.v0.proto file.", "keywords_llm": ["go", "generate", "protoc", "service.v0.proto", "go-out", "go-grpc_out", "module", "weather", "foreca_proxy"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 43, "text": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.28.1\n// \tprotoc        v3.21.12\n// source: service.v0.proto\n\npackage v0\n\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n\ntype ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}\n\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 306, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [31, 43], "def_symbols": ["Reset", "String"], "symbols": ["Reset", "String", "Code", "generated", "protoc", "gen", "NOT", "EDIT", "versions", "source", "service", "proto", "package", "import", "protoreflect", "google", "golang", "org", "protobuf", "reflect", "protoimpl", "runtime", "sync", "const", "Verify", "that", "this", "code", "sufficiently", "date", "EnforceVersion", "MinVersion", "MaxVersion", "type", "ForecastRequest", "struct", "state", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "LocationId", "int64", "varint", "opt", "name", "locationId", "proto3", "json", "omitempty", "The", "Impala", "Location", "func", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf"], "doc_head": "// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.28.1\n// \tprotoc        v3.21.12\n// source: service.v0.proto\npackage v0\nimport (\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\ntype ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastRequest).Reset", "package": "v0", "node_kind": "method", "receiver": "x *ForecastRequest", "function_name": "", "method_name": "Reset", "type_name": "ForecastRequest", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Code", "DO", "EDIT", "EnforceVersion", "ForecastRequest", "ID", "Impala", "Location", "LocationId", "MaxVersion", "MessageState", "MessageStateOf", "MessageStringOf", "MinVersion", "NOT", "Pointer", "Reset", "SizeCache", "StoreMessageInfo", "String", "The", "UnknownFields", "UnsafeEnabled", "Verify", "X", "google.golang", "ms.StoreMessageInfo", "protoimpl.EnforceVersion", "protoimpl.MaxVersion", "protoimpl.MessageState", "protoimpl.MinVersion", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "service.v0"], "header_context_minimal": "package v0\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastRequest", "summary_llm": "The provided Go code defines a `ForecastRequest` struct and methods for it, specifically the `Reset` method which resets the struct to its initial state. The code also includes constants and variables related to protocol buffer implementation details.", "keywords_llm": ["forecastrequest", "reset", "messagestate", "sizecache", "unknownfields", "locationid", "protoimpl", "google.golang.org/protobuf/runtime/protoimpl"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 44, "end_line": 79, "text": "func (*ForecastRequest) ProtoMessage() {}\n\nfunc (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.\nfunc (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}\n\ntype ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`\n}\n", "n_tokens": 304, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [44, 79], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetLocationId"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetLocationId", "func", "ForecastRequest", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "protoimpl", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "int64", "LocationId", "type", "ForecastResponse", "struct", "state", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "CurrentCondition", "ForecastResponse_CurrentCondition", "protobuf", "bytes", "opt", "name", "currentCondition", "proto3", "oneof", "json", "omitempty", "DailyForecasts", "ForecastResponse_DailyForecast", "rep", "dailyForecasts", "HourlyForecasts", "ForecastResponse_HourlyForecast", "hourlyForecasts"], "doc_head": "func (*ForecastRequest) ProtoMessage() {}\nfunc (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.\nfunc (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}\nfunc (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}\ntype ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*ForecastRequest).ProtoMessage", "package": "", "node_kind": "method", "receiver": "*ForecastRequest", "function_name": "", "method_name": "ProtoMessage", "type_name": "ForecastResponse", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["CurrentCondition", "DailyForecasts", "Deprecated", "Descriptor", "ForecastRequest", "ForecastRequest.ProtoReflect", "ForecastResponse", "ForecastResponse_CurrentCondition", "ForecastResponse_DailyForecast", "ForecastResponse_HourlyForecast", "GetLocationId", "HourlyForecasts", "LoadMessageInfo", "LocationId", "Message", "MessageOf", "MessageState", "MessageStateOf", "Pointer", "ProtoMessage", "ProtoReflect", "SizeCache", "StoreMessageInfo", "UnknownFields", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.LocationId"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: *ForecastRequest", "summary_llm": "The Go code defines a `ForecastRequest` struct with methods for protocol buffer operations and a `ForecastResponse` struct that encapsulates weather forecast data including current conditions, daily forecasts, and hourly forecasts.", "keywords_llm": ["forecastrequest", "protomessage", "protoreflect", "descriptor", "getlocationid", "forecastresponse", "currentcondition", "dailyforecasts", "hourlyforecasts"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 80, "end_line": 125, "text": "func (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse) ProtoMessage() {}\n\nfunc (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}\n", "n_tokens": 294, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [80, 125], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCurrentCondition", "GetDailyForecasts"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetCurrentCondition", "GetDailyForecasts", "func", "ForecastResponse", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_CurrentCondition", "CurrentCondition", "ForecastResponse_DailyForecast", "DailyForecasts"], "doc_head": "func (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse) ProtoMessage() {}\nfunc (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}\nfunc (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse).Reset", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse", "function_name": "", "method_name": "Reset", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["CurrentCondition", "DailyForecasts", "Deprecated", "Descriptor", "ForecastResponse", "ForecastResponse.ProtoReflect", "ForecastResponse_CurrentCondition", "ForecastResponse_DailyForecast", "GetCurrentCondition", "GetDailyForecasts", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "StoreMessageInfo", "String", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.CurrentCondition", "x.DailyForecasts"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse", "summary_llm": "This Go code defines methods for the `ForecastResponse` struct, including resetting its state, converting it to a string, and retrieving its protocol buffer reflection. It also provides accessors for nested fields like `CurrentCondition` and `DailyForecasts`. The `Descriptor` method is marked as deprecated.", "keywords_llm": ["reset", "string", "protoreflect", "message", "currentcondition", "dailyforecasts", "descriptor", "deprecated"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 126, "end_line": 156, "text": "func (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}\n\ntype ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}\n\nfunc (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_WeatherCondition) ProtoMessage() {}\n", "n_tokens": 217, "primary_symbol": "GetHourlyForecasts", "primary_kind": "function", "primary_span": [126, 156], "def_symbols": ["GetHourlyForecasts", "Reset", "String", "ProtoMessage"], "symbols": ["GetHourlyForecasts", "Reset", "String", "ProtoMessage", "func", "ForecastResponse", "ForecastResponse_HourlyForecast", "nil", "return", "HourlyForecasts", "type", "ForecastResponse_WeatherCondition", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Code", "string", "protobuf", "bytes", "opt", "name", "code", "proto3", "json", "omitempty", "Description", "description", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "MessageStringOf"], "doc_head": "func (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}\ntype ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}\nfunc (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_WeatherCondition) ProtoMessage() {}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse).GetHourlyForecasts", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse", "function_name": "", "method_name": "GetHourlyForecasts", "type_name": "ForecastResponse_WeatherCondition", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Code", "Description", "ForecastResponse", "ForecastResponse_HourlyForecast", "ForecastResponse_WeatherCondition", "GetHourlyForecasts", "HourlyForecasts", "MessageState", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "Reset", "SizeCache", "StoreMessageInfo", "String", "UnknownFields", "UnsafeEnabled", "X", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "x.HourlyForecasts"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse", "summary_llm": "This Go code defines a `ForecastResponse` struct with a method `GetHourlyForecasts` that returns hourly forecast data. It also includes a nested `WeatherCondition` struct with fields for weather code and description.", "keywords_llm": ["forecastresponse", "hourlyforecasts", "weathercondition", "code", "description", "reset", "string", "protobuf", "messagestate"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 157, "end_line": 196, "text": "func (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_WeatherCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}\n\nfunc (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\n\nfunc (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}\n\ntype ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}\n", "n_tokens": 284, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [157, 196], "def_symbols": ["ProtoReflect", "Descriptor", "GetCode", "GetDescription"], "symbols": ["ProtoReflect", "Descriptor", "GetCode", "GetDescription", "func", "ForecastResponse_WeatherCondition", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "protoimpl", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "string", "Code", "Description", "type", "ForecastResponse_WindDirection", "struct", "state", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Abbreviation", "protobuf", "bytes", "opt", "name", "abbreviation", "proto3", "json", "omitempty", "Degrees", "float32", "fixed32", "degrees"], "doc_head": "func (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_WeatherCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}\nfunc (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}\nfunc (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}\ntype ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_WeatherCondition).ProtoReflect", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_WeatherCondition", "function_name": "", "method_name": "ProtoReflect", "type_name": "ForecastResponse_WindDirection", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Abbreviation", "Code", "Degrees", "Deprecated", "Description", "Descriptor", "ForecastResponse_WeatherCondition", "ForecastResponse_WeatherCondition.ProtoReflect", "ForecastResponse_WindDirection", "GetCode", "GetDescription", "LoadMessageInfo", "Message", "MessageOf", "MessageState", "MessageStateOf", "Pointer", "ProtoReflect", "SizeCache", "StoreMessageInfo", "UnknownFields", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Code", "x.Description"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WeatherCondition", "summary_llm": "This Go code defines a `ForecastResponse_WeatherCondition` struct with methods for reflection and accessing its fields. It also includes a nested `ForecastResponse_WindDirection` struct.", "keywords_llm": ["protobuf", "protoreflect", " forecastresponse_weathercondition ", "protoreflect", "getcode", "getdescription", "abbreviation", "degrees"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 197, "end_line": 235, "text": "func (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_WindDirection) ProtoMessage() {}\n\nfunc (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_WindDirection.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}\n\nfunc (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}\n", "n_tokens": 282, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [197, 235], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAbbreviation"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetAbbreviation", "func", "ForecastResponse_WindDirection", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "Abbreviation"], "doc_head": "func (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_WindDirection) ProtoMessage() {}\nfunc (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_WindDirection.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}\nfunc (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_WindDirection).Reset", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_WindDirection", "function_name": "", "method_name": "Reset", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Abbreviation", "Deprecated", "Descriptor", "ForecastResponse_WindDirection", "ForecastResponse_WindDirection.ProtoReflect", "GetAbbreviation", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "StoreMessageInfo", "String", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Abbreviation"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WindDirection", "summary_llm": "The provided Go code is incomplete and lacks a main function or any executable logic, making it difficult to summarize its purpose without additional context.", "keywords_llm": ["go", "code", "analysis", "incomplete"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 236, "end_line": 278, "text": "func (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}\n\nfunc (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_Wind) ProtoMessage() {}\n\nfunc (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 306, "primary_symbol": "GetDegrees", "primary_kind": "function", "primary_span": [236, 278], "def_symbols": ["GetDegrees", "Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["GetDegrees", "Reset", "String", "ProtoMessage", "ProtoReflect", "func", "ForecastResponse_WindDirection", "float32", "nil", "return", "Degrees", "type", "ForecastResponse_Wind", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Direction", "protobuf", "bytes", "opt", "name", "direction", "proto3", "json", "omitempty", "Speed", "fixed32", "speed", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "MessageStringOf", "protoreflect", "Message", "LoadMessageInfo", "MessageOf"], "doc_head": "func (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}\ntype ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}\nfunc (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_Wind) ProtoMessage() {}\nfunc (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_WindDirection).GetDegrees", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_WindDirection", "function_name": "", "method_name": "GetDegrees", "type_name": "ForecastResponse_Wind", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Degrees", "Direction", "ForecastResponse_Wind", "ForecastResponse_WindDirection", "GetDegrees", "LoadMessageInfo", "Message", "MessageOf", "MessageState", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "SizeCache", "Speed", "StoreMessageInfo", "String", "UnknownFields", "UnsafeEnabled", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Degrees"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WindDirection", "summary_llm": "The provided Go code appears to be a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' to any incoming GET requests.", "keywords_llm": ["go", "http", "server", "port 8080", "get request", "response", "hello, world!", "net/http", "log"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#8", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 279, "end_line": 319, "text": "// Deprecated: Use ForecastResponse_Wind.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}\n\nfunc (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}\n\nfunc (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n", "n_tokens": 297, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [280, 319], "def_symbols": ["Descriptor", "GetDirection", "GetSpeed", "Reset", "String"], "symbols": ["Descriptor", "GetDirection", "GetSpeed", "Reset", "String", "Deprecated", "Use", "ForecastResponse_Wind", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_WindDirection", "nil", "Direction", "float32", "Speed", "type", "ForecastResponse_Pressure", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Millibar", "protobuf", "fixed32", "opt", "name", "millibar", "proto3", "json", "omitempty", "Trend", "int32", "varint", "trend", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "MessageStringOf"], "doc_head": "// Deprecated: Use ForecastResponse_Wind.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}\nfunc (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}\ntype ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}\nfunc (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*ForecastResponse_Wind).Descriptor", "package": "", "node_kind": "method", "receiver": "*ForecastResponse_Wind", "function_name": "", "method_name": "Descriptor", "type_name": "ForecastResponse_Pressure", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Deprecated", "Descriptor", "Direction", "ForecastResponse_Pressure", "ForecastResponse_Wind", "ForecastResponse_Wind.ProtoReflect", "ForecastResponse_WindDirection", "GetDirection", "GetSpeed", "MessageState", "MessageStateOf", "MessageStringOf", "Millibar", "Pointer", "ProtoReflect", "Reset", "SizeCache", "Speed", "StoreMessageInfo", "String", "Trend", "UnknownFields", "UnsafeEnabled", "Use", "X", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "x.Direction", "x.Speed"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: *ForecastResponse_Wind", "summary_llm": "This Go code defines a message type `ForecastResponse_Wind` with methods for getting wind direction and speed. It also includes a deprecated descriptor function. Another message type `ForecastResponse_Pressure` is defined with methods to reset and convert the message to a string.", "keywords_llm": ["forecastresponse_wind", "getdirection", "getspeed", "deprecated", "descriptor", "reset", "string", "millibar", "trend", "pressure"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#9", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 320, "end_line": 352, "text": "func (*ForecastResponse_Pressure) ProtoMessage() {}\n\nfunc (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_Pressure.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}\n\nfunc (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}\n", "n_tokens": 228, "primary_symbol": "ProtoMessage", "primary_kind": "function", "primary_span": [320, 352], "def_symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetMillibar", "GetTrend"], "symbols": ["ProtoMessage", "ProtoReflect", "Descriptor", "GetMillibar", "GetTrend", "func", "ForecastResponse_Pressure", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "protoimpl", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "float32", "Millibar", "int32", "Trend"], "doc_head": "func (*ForecastResponse_Pressure) ProtoMessage() {}\nfunc (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_Pressure.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}\nfunc (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*ForecastResponse_Pressure).ProtoMessage", "package": "", "node_kind": "method", "receiver": "*ForecastResponse_Pressure", "function_name": "", "method_name": "ProtoMessage", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Deprecated", "Descriptor", "ForecastResponse_Pressure", "ForecastResponse_Pressure.ProtoReflect", "GetMillibar", "GetTrend", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "Millibar", "Pointer", "ProtoMessage", "ProtoReflect", "StoreMessageInfo", "Trend", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Millibar", "x.Trend"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: *ForecastResponse_Pressure", "summary_llm": "This Go code defines methods for the ForecastResponse_Pressure struct, implementing the ProtoMessage and ProtoReflect interfaces from the google.golang.org/protobuf package. It provides functionalities to retrieve millibar pressure and trend values.", "keywords_llm": ["forecastresponse_pressure", "proto_message", "proto_reflect", "millibar", "trend", "get_millibar", "get_trend", "protoimpl", "message_state_of"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#10", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 353, "end_line": 372, "text": "type ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust             *ForecastResponse_CurrentCondition_WindGust `protobuf:\"bytes,8,opt,name=windGust,proto3\" json:\"windGust,omitempty\"`\n\tDewPoint             float32                                     `protobuf:\"fixed32,9,opt,name=dewPoint,proto3\" json:\"dewPoint,omitempty\"`\n\tHeatIndex            float32                                     `protobuf:\"fixed32,10,opt,name=heatIndex,proto3\" json:\"heatIndex,omitempty\"`\n\tPressure             *ForecastResponse_Pressure                  `protobuf:\"bytes,11,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tUvIndex              float32                                     `protobuf:\"fixed32,12,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tHumidityPercentage   int32                                       `protobuf:\"varint,13,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n}\n", "n_tokens": 407, "primary_symbol": "", "primary_kind": "", "primary_span": [353, 372], "def_symbols": [], "symbols": ["type", "ForecastResponse_CurrentCondition", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Epoch", "int64", "protobuf", "varint", "opt", "name", "epoch", "proto3", "json", "omitempty", "Visibility", "float32", "fixed32", "visibility", "WeatherCondition", "ForecastResponse_WeatherCondition", "bytes", "weatherCondition", "Precipitation", "precipitation", "NextHour", "ForecastResponse_CurrentCondition_NextHour", "nextHour", "Temperature", "temperature", "TemperatureFeelsLike", "temperatureFeelsLike", "WindGust", "ForecastResponse_CurrentCondition_WindGust", "windGust", "DewPoint", "dewPoint", "HeatIndex", "heatIndex", "Pressure", "ForecastResponse_Pressure", "pressure", "UvIndex", "uvIndex", "HumidityPercentage", "int32", "humidityPercentage"], "doc_head": "type ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust  ", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:ForecastResponse_CurrentCondition (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "ForecastResponse_CurrentCondition", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["DewPoint", "Epoch", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_CurrentCondition_WindGust", "ForecastResponse_Pressure", "ForecastResponse_WeatherCondition", "HeatIndex", "HumidityPercentage", "MessageState", "NextHour", "Precipitation", "Pressure", "SizeCache", "Temperature", "TemperatureFeelsLike", "UnknownFields", "UvIndex", "Visibility", "WeatherCondition", "WindGust", "protoimpl.MessageState", "protoimpl.SizeCache", "protoimpl.UnknownFields"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"", "summary_llm": "The `ForecastResponse_CurrentCondition` struct in Go defines a message for current weather conditions in a forecast response, including various attributes like epoch, visibility, temperature, and more. It uses protobuf tags to specify field options.", "keywords_llm": ["forecast", "weather", "current", "condition", "protobuf", "message", "epoch", "visibility"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#11", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 373, "end_line": 411, "text": "func (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n", "n_tokens": 274, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [373, 411], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch", "func", "ForecastResponse_CurrentCondition", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "int64", "Epoch"], "doc_head": "func (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_CurrentCondition) ProtoMessage() {}\nfunc (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_CurrentCondition.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}\nfunc (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).Reset", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_CurrentCondition", "function_name": "", "method_name": "Reset", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Deprecated", "Descriptor", "Epoch", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition.ProtoReflect", "GetEpoch", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "StoreMessageInfo", "String", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Epoch"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition", "summary_llm": "The code defines methods for a `ForecastResponse_CurrentCondition` struct in Go, including `Reset`, `String`, `ProtoMessage`, `ProtoReflect`, and `GetEpoch`. The `Reset` method initializes the struct. The `ProtoReflect` method provides reflection capabilities.", "keywords_llm": ["forecastresponse_currentcondition", "reset", "string", "protomessage", "pro refl ect", "getepoch", "messagestateof", "protoimpl", "pointer"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#12", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 412, "end_line": 467, "text": "func (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}\n", "n_tokens": 295, "primary_symbol": "GetVisibility", "primary_kind": "function", "primary_span": [412, 467], "def_symbols": ["GetVisibility", "GetWeatherCondition", "GetPrecipitation", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint"], "symbols": ["GetVisibility", "GetWeatherCondition", "GetPrecipitation", "GetNextHour", "GetTemperature", "GetTemperatureFeelsLike", "GetWindGust", "GetDewPoint", "func", "ForecastResponse_CurrentCondition", "float32", "nil", "return", "Visibility", "ForecastResponse_WeatherCondition", "WeatherCondition", "Precipitation", "ForecastResponse_CurrentCondition_NextHour", "NextHour", "Temperature", "TemperatureFeelsLike", "ForecastResponse_CurrentCondition_WindGust", "WindGust", "DewPoint"], "doc_head": "func (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetVisibility", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_CurrentCondition", "function_name": "", "method_name": "GetVisibility", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["DewPoint", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_CurrentCondition_WindGust", "ForecastResponse_WeatherCondition", "GetDewPoint", "GetNextHour", "GetPrecipitation", "GetTemperature", "GetTemperatureFeelsLike", "GetVisibility", "GetWeatherCondition", "GetWindGust", "NextHour", "Precipitation", "Temperature", "TemperatureFeelsLike", "Visibility", "WeatherCondition", "WindGust", "x.DewPoint", "x.NextHour", "x.Precipitation", "x.Temperature", "x.TemperatureFeelsLike", "x.Visibility", "x.WeatherCondition", "x.WindGust"], "header_context_minimal": "package \n// receiver: x *ForecastResponse_CurrentCondition", "summary_llm": "This Go code defines methods for accessing various weather-related attributes from a `ForecastResponse_CurrentCondition` struct. Each method checks if the receiver is not nil before returning the corresponding attribute value; otherwise, it returns a default or zero value.", "keywords_llm": ["forecast", "weather", "current condition", "dew point", "temperature", "precipitation", "visibility", "wind gust", "next hour", "weather condition"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#13", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 468, "end_line": 495, "text": "func (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\n", "n_tokens": 144, "primary_symbol": "GetHeatIndex", "primary_kind": "function", "primary_span": [468, 495], "def_symbols": ["GetHeatIndex", "GetPressure", "GetUvIndex", "GetHumidityPercentage"], "symbols": ["GetHeatIndex", "GetPressure", "GetUvIndex", "GetHumidityPercentage", "func", "ForecastResponse_CurrentCondition", "float32", "nil", "return", "HeatIndex", "ForecastResponse_Pressure", "Pressure", "UvIndex", "int32", "HumidityPercentage"], "doc_head": "func (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetHeatIndex", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_CurrentCondition", "function_name": "", "method_name": "GetHeatIndex", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ForecastResponse_CurrentCondition", "ForecastResponse_Pressure", "GetHeatIndex", "GetHumidityPercentage", "GetPressure", "GetUvIndex", "HeatIndex", "HumidityPercentage", "Pressure", "UvIndex", "x.HeatIndex", "x.HumidityPercentage", "x.Pressure", "x.UvIndex"], "header_context_minimal": "package \n// receiver: x *ForecastResponse_CurrentCondition", "summary_llm": "This Go code defines methods for accessing properties of `ForecastResponse_CurrentCondition` structs. Each method returns a specific property value or zero/default if the struct is nil.", "keywords_llm": ["forecastresponse_currentcondition", "getheatindex", "getpressure", "getuvindex", "gethumiditypercentage", "heatindex", "humiditypercentage", "pressure", "uvindex"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#14", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 496, "end_line": 519, "text": "type ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32                            `protobuf:\"fixed32,8,opt,name=snowDay,proto3\" json:\"snowDay,omitempty\"`\n\tSnowNight                 float32                            `protobuf:\"fixed32,9,opt,name=snowNight,proto3\" json:\"snowNight,omitempty\"`\n\tPrecipitationProbability  int32                              `protobuf:\"varint,10,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                      *ForecastResponse_Wind             `protobuf:\"bytes,11,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tAverageHumidityPercentage int32                              `protobuf:\"varint,12,opt,name=averageHumidityPercentage,proto3\" json:\"averageHumidityPercentage,omitempty\"`\n\tWeatherCondition          *ForecastResponse_WeatherCondition `protobuf:\"bytes,13,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tWeatherConditionNight     *ForecastResponse_WeatherCondition `protobuf:\"bytes,14,opt,name=weatherConditionNight,proto3\" json:\"weatherConditionNight,omitempty\"`\n\tUvIndex                   float32                            `protobuf:\"fixed32,15,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tSunriseEpoch              int64                              `protobuf:\"varint,16,opt,name=sunriseEpoch,proto3\" json:\"sunriseEpoch,omitempty\"`\n\tSunsetEpoch               int64                              `protobuf:\"varint,17,opt,name=sunsetEpoch,proto3\" json:\"sunsetEpoch,omitempty\"`\n}\n", "n_tokens": 538, "primary_symbol": "", "primary_kind": "", "primary_span": [496, 519], "def_symbols": [], "symbols": ["type", "ForecastResponse_DailyForecast", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Epoch", "int64", "protobuf", "varint", "opt", "name", "epoch", "proto3", "json", "omitempty", "TemperatureMin", "float32", "fixed32", "temperatureMin", "TemperatureMax", "temperatureMax", "Precipitation", "precipitation", "PrecipitationDay", "precipitationDay", "PrecipitationNight", "precipitationNight", "Snow", "snow", "SnowDay", "snowDay", "SnowNight", "snowNight", "PrecipitationProbability", "int32", "precipitationProbability", "Wind", "ForecastResponse_Wind", "bytes", "wind", "AverageHumidityPercentage", "averageHumidityPercentage", "WeatherCondition", "ForecastResponse_WeatherCondition", "weatherCondition", "WeatherConditionNight", "weatherConditionNight", "UvIndex", "uvIndex", "SunriseEpoch", "sunriseEpoch", "SunsetEpoch", "sunsetEpoch"], "doc_head": "type ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32  ", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:ForecastResponse_DailyForecast (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "ForecastResponse_DailyForecast", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["AverageHumidityPercentage", "Epoch", "ForecastResponse_DailyForecast", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "MessageState", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "SizeCache", "Snow", "SnowDay", "SnowNight", "SunriseEpoch", "SunsetEpoch", "TemperatureMax", "TemperatureMin", "UnknownFields", "UvIndex", "WeatherCondition", "WeatherConditionNight", "Wind", "protoimpl.MessageState", "protoimpl.SizeCache", "protoimpl.UnknownFields"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"", "summary_llm": "This code defines a `ForecastResponse_DailyForecast` struct that represents daily weather forecast data. It includes fields for epoch time, temperature extremes, precipitation details, wind conditions, humidity, weather conditions, UV index, and sunrise/sunset times.", "keywords_llm": ["forecast", "daily", "temperature", "precipitation", "wind", "humidity", "weather", "uv", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#15", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 520, "end_line": 558, "text": "func (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_DailyForecast) ProtoMessage() {}\n\nfunc (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_DailyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n", "n_tokens": 282, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [520, 558], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch", "func", "ForecastResponse_DailyForecast", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "int64", "Epoch"], "doc_head": "func (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_DailyForecast) ProtoMessage() {}\nfunc (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_DailyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}\nfunc (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_DailyForecast).Reset", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_DailyForecast", "function_name": "", "method_name": "Reset", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Deprecated", "Descriptor", "Epoch", "ForecastResponse_DailyForecast", "ForecastResponse_DailyForecast.ProtoReflect", "GetEpoch", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "StoreMessageInfo", "String", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Epoch"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_DailyForecast", "summary_llm": "The provided Go code defines methods for the `ForecastResponse_DailyForecast` struct, including `Reset`, `String`, and `ProtoReflect`. It also includes a deprecated method for retrieving the descriptor.", "keywords_llm": ["forecastresponse_dailyforecast", "reset", "string", "protoreflect", "deprecated", "descriptor", "epoch", "messageinfo"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#16", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 559, "end_line": 614, "text": "func (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}\n", "n_tokens": 296, "primary_symbol": "GetTemperatureMin", "primary_kind": "function", "primary_span": [559, 614], "def_symbols": ["GetTemperatureMin", "GetTemperatureMax", "GetPrecipitation", "GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight"], "symbols": ["GetTemperatureMin", "GetTemperatureMax", "GetPrecipitation", "GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight", "func", "ForecastResponse_DailyForecast", "float32", "nil", "return", "TemperatureMin", "TemperatureMax", "Precipitation", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight"], "doc_head": "func (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetTemperatureMin", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_DailyForecast", "function_name": "", "method_name": "GetTemperatureMin", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ForecastResponse_DailyForecast", "GetPrecipitation", "GetPrecipitationDay", "GetPrecipitationNight", "GetSnow", "GetSnowDay", "GetSnowNight", "GetTemperatureMax", "GetTemperatureMin", "Precipitation", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "TemperatureMax", "TemperatureMin", "x.Precipitation", "x.PrecipitationDay", "x.PrecipitationNight", "x.Snow", "x.SnowDay", "x.SnowNight", "x.TemperatureMax", "x.TemperatureMin"], "header_context_minimal": "package \n// receiver: x *ForecastResponse_DailyForecast", "summary_llm": "This Go code defines methods for accessing weather forecast details such as temperature and precipitation. Each method checks if the receiver is nil before returning a float32 value.", "keywords_llm": ["forecast", "temperature", "precipitation", "snow", "methods", "nil check", "float32", "daily forecast"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#17", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 615, "end_line": 670, "text": "func (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}\n", "n_tokens": 308, "primary_symbol": "GetPrecipitationProbability", "primary_kind": "function", "primary_span": [615, 670], "def_symbols": ["GetPrecipitationProbability", "GetWind", "GetAverageHumidityPercentage", "GetWeatherCondition", "GetWeatherConditionNight", "GetUvIndex", "GetSunriseEpoch", "GetSunsetEpoch"], "symbols": ["GetPrecipitationProbability", "GetWind", "GetAverageHumidityPercentage", "GetWeatherCondition", "GetWeatherConditionNight", "GetUvIndex", "GetSunriseEpoch", "GetSunsetEpoch", "func", "ForecastResponse_DailyForecast", "int32", "nil", "return", "PrecipitationProbability", "ForecastResponse_Wind", "Wind", "AverageHumidityPercentage", "ForecastResponse_WeatherCondition", "WeatherCondition", "WeatherConditionNight", "float32", "UvIndex", "int64", "SunriseEpoch", "SunsetEpoch"], "doc_head": "func (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetPrecipitationProbability", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_DailyForecast", "function_name": "", "method_name": "GetPrecipitationProbability", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["AverageHumidityPercentage", "ForecastResponse_DailyForecast", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "GetAverageHumidityPercentage", "GetPrecipitationProbability", "GetSunriseEpoch", "GetSunsetEpoch", "GetUvIndex", "GetWeatherCondition", "GetWeatherConditionNight", "GetWind", "PrecipitationProbability", "SunriseEpoch", "SunsetEpoch", "UvIndex", "WeatherCondition", "WeatherConditionNight", "Wind", "x.AverageHumidityPercentage", "x.PrecipitationProbability", "x.SunriseEpoch", "x.SunsetEpoch", "x.UvIndex", "x.WeatherCondition", "x.WeatherConditionNight", "x.Wind"], "header_context_minimal": "package \n// receiver: x *ForecastResponse_DailyForecast", "summary_llm": "This Go code defines methods for accessing various weather-related attributes from a `ForecastResponse_DailyForecast` object. Methods include retrieving precipitation probability, wind details, average humidity, and weather conditions.", "keywords_llm": ["forecast", "daily", "precipitation", "probability", "wind", "humidity", "weather", "conditions", "night", "uv", "sunrise", "sunset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#18", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 671, "end_line": 688, "text": "type ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *ForecastResponse_Wind             `protobuf:\"bytes,8,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tPressure                 *ForecastResponse_Pressure         `protobuf:\"bytes,9,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tHumidityPercentage       int32                              `protobuf:\"varint,10,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n\tUvIndex                  float32                            `protobuf:\"fixed32,11,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n}\n", "n_tokens": 344, "primary_symbol": "", "primary_kind": "", "primary_span": [671, 688], "def_symbols": [], "symbols": ["type", "ForecastResponse_HourlyForecast", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Epoch", "int64", "protobuf", "varint", "opt", "name", "epoch", "proto3", "json", "omitempty", "Temperature", "float32", "fixed32", "temperature", "TemperatureFeelsLike", "temperatureFeelsLike", "WeatherCondition", "ForecastResponse_WeatherCondition", "bytes", "weatherCondition", "Precipitation", "precipitation", "Snow", "snow", "PrecipitationProbability", "int32", "precipitationProbability", "Wind", "ForecastResponse_Wind", "wind", "Pressure", "ForecastResponse_Pressure", "pressure", "HumidityPercentage", "humidityPercentage", "UvIndex", "uvIndex"], "doc_head": "type ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:ForecastResponse_HourlyForecast (struct)", "package": "", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "ForecastResponse_HourlyForecast", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Epoch", "ForecastResponse_HourlyForecast", "ForecastResponse_Pressure", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "HumidityPercentage", "MessageState", "Precipitation", "PrecipitationProbability", "Pressure", "SizeCache", "Snow", "Temperature", "TemperatureFeelsLike", "UnknownFields", "UvIndex", "WeatherCondition", "Wind", "protoimpl.MessageState", "protoimpl.SizeCache", "protoimpl.UnknownFields"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"", "summary_llm": "This Go code defines a struct `ForecastResponse_HourlyForecast` representing hourly weather forecast data. It includes fields like epoch time, temperature, precipitation probability, and more.", "keywords_llm": ["forecast", "hourly", "temperature", "precipitation", "weather", "wind", "pressure", "humidity", "uv index", "epoch"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#19", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 689, "end_line": 727, "text": "func (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_HourlyForecast) ProtoMessage() {}\n\nfunc (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_HourlyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}\n", "n_tokens": 290, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [689, 727], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "Descriptor", "GetEpoch", "func", "ForecastResponse_HourlyForecast", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "int64", "Epoch"], "doc_head": "func (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_HourlyForecast) ProtoMessage() {}\nfunc (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_HourlyForecast.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}\nfunc (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).Reset", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_HourlyForecast", "function_name": "", "method_name": "Reset", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Deprecated", "Descriptor", "Epoch", "ForecastResponse_HourlyForecast", "ForecastResponse_HourlyForecast.ProtoReflect", "GetEpoch", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "StoreMessageInfo", "String", "UnsafeEnabled", "Use", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Epoch"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_HourlyForecast", "summary_llm": "This Go code defines methods for the `ForecastResponse_HourlyForecast` message type, including resetting its state and retrieving a descriptor. Methods like `Reset`, `String`, `ProtoMessage`, `ProtoReflect`, and `GetEpoch` are defined.", "keywords_llm": ["forecastresponse_hourlyforecast", "reset", "string", "protomessage", "proreflect", "descriptor", "getepoch", "protoimpl", "messagestateof", "loadmessageinfo"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#20", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 728, "end_line": 783, "text": "func (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}\n", "n_tokens": 305, "primary_symbol": "GetTemperature", "primary_kind": "function", "primary_span": [728, 783], "def_symbols": ["GetTemperature", "GetTemperatureFeelsLike", "GetWeatherCondition", "GetPrecipitation", "GetSnow", "GetPrecipitationProbability", "GetWind", "GetPressure"], "symbols": ["GetTemperature", "GetTemperatureFeelsLike", "GetWeatherCondition", "GetPrecipitation", "GetSnow", "GetPrecipitationProbability", "GetWind", "GetPressure", "func", "ForecastResponse_HourlyForecast", "float32", "nil", "return", "Temperature", "TemperatureFeelsLike", "ForecastResponse_WeatherCondition", "WeatherCondition", "Precipitation", "Snow", "int32", "PrecipitationProbability", "ForecastResponse_Wind", "Wind", "ForecastResponse_Pressure", "Pressure"], "doc_head": "func (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetTemperature", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_HourlyForecast", "function_name": "", "method_name": "GetTemperature", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ForecastResponse_HourlyForecast", "ForecastResponse_Pressure", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "GetPrecipitation", "GetPrecipitationProbability", "GetPressure", "GetSnow", "GetTemperature", "GetTemperatureFeelsLike", "GetWeatherCondition", "GetWind", "Precipitation", "PrecipitationProbability", "Pressure", "Snow", "Temperature", "TemperatureFeelsLike", "WeatherCondition", "Wind", "x.Precipitation", "x.PrecipitationProbability", "x.Pressure", "x.Snow", "x.Temperature", "x.TemperatureFeelsLike", "x.WeatherCondition", "x.Wind"], "header_context_minimal": "package \n// receiver: x *ForecastResponse_HourlyForecast", "summary_llm": "This Go code defines methods for accessing various weather forecast details from the `ForecastResponse_HourlyForecast` struct, such as temperature, precipitation probability, and wind conditions.", "keywords_llm": ["forecast", "hourly", "temperature", "precipitation", "pressure", "weather condition", "wind", "nil check"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#21", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 784, "end_line": 821, "text": "func (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\n\nfunc (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\n\ntype ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}\n", "n_tokens": 282, "primary_symbol": "GetHumidityPercentage", "primary_kind": "function", "primary_span": [784, 821], "def_symbols": ["GetHumidityPercentage", "GetUvIndex", "Reset", "String", "ProtoMessage"], "symbols": ["GetHumidityPercentage", "GetUvIndex", "Reset", "String", "ProtoMessage", "func", "ForecastResponse_HourlyForecast", "int32", "nil", "return", "HumidityPercentage", "float32", "UvIndex", "type", "ForecastResponse_CurrentCondition_NextHour", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "WeatherCondition", "ForecastResponse_WeatherCondition", "protobuf", "bytes", "opt", "name", "weatherCondition", "proto3", "json", "omitempty", "Precipitation", "fixed32", "precipitation", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "MessageStringOf"], "doc_head": "func (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}\nfunc (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}\ntype ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}\nfunc (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetHumidityPercentage", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_HourlyForecast", "function_name": "", "method_name": "GetHumidityPercentage", "type_name": "ForecastResponse_CurrentCondition_NextHour", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_HourlyForecast", "ForecastResponse_WeatherCondition", "GetHumidityPercentage", "GetUvIndex", "HumidityPercentage", "MessageState", "MessageStateOf", "MessageStringOf", "Pointer", "Precipitation", "ProtoMessage", "Reset", "SizeCache", "StoreMessageInfo", "String", "UnknownFields", "UnsafeEnabled", "UvIndex", "WeatherCondition", "X", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "x.HumidityPercentage", "x.UvIndex"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_HourlyForecast", "summary_llm": "The code defines methods for retrieving humidity percentage and UV index from a `ForecastResponse_HourlyForecast` struct. It also includes a nested struct `ForecastResponse_CurrentCondition_NextHour` with fields for weather condition and precipitation.", "keywords_llm": ["forecast", "humidity", "uv index", "hourly forecast", "weather condition", "precipitation", "protobuf", "struct", "methods"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#22", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 822, "end_line": 852, "text": "func (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use ForecastResponse_CurrentCondition_NextHour.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\n\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}\n", "n_tokens": 233, "primary_symbol": "ProtoReflect", "primary_kind": "function", "primary_span": [822, 852], "def_symbols": ["ProtoReflect", "Descriptor", "GetWeatherCondition", "GetPrecipitation"], "symbols": ["ProtoReflect", "Descriptor", "GetWeatherCondition", "GetPrecipitation", "func", "ForecastResponse_CurrentCondition_NextHour", "protoreflect", "Message", "file_service_v0_proto_msgTypes", "protoimpl", "UnsafeEnabled", "nil", "MessageStateOf", "Pointer", "LoadMessageInfo", "StoreMessageInfo", "return", "MessageOf", "Deprecated", "Use", "instead", "byte", "int", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_WeatherCondition", "WeatherCondition", "float32", "Precipitation"], "doc_head": "func (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n// Deprecated: Use ForecastResponse_CurrentCondition_NextHour.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_NextHour).ProtoReflect", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_CurrentCondition_NextHour", "function_name": "", "method_name": "ProtoReflect", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Deprecated", "Descriptor", "ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_CurrentCondition_NextHour.ProtoReflect", "ForecastResponse_WeatherCondition", "GetPrecipitation", "GetWeatherCondition", "LoadMessageInfo", "Message", "MessageOf", "MessageStateOf", "Pointer", "Precipitation", "ProtoReflect", "StoreMessageInfo", "UnsafeEnabled", "Use", "WeatherCondition", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.Pointer", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message", "x.Precipitation", "x.WeatherCondition"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition_NextHour", "summary_llm": "This Go code defines methods for the `ForecastResponse_CurrentCondition_NextHour` struct to interact with Protocol Buffers. It includes a method to get the weather condition and precipitation level.", "keywords_llm": ["protoreflect", "forecastresponse_currentcondition_nexthour", "precipitation", "weathercondition", "getprecipitation", "getweathercondition", "protobuffers", "protobuf", "messagestateof"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#23", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 853, "end_line": 888, "text": "type ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n", "n_tokens": 294, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [862, 888], "def_symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect"], "symbols": ["Reset", "String", "ProtoMessage", "ProtoReflect", "type", "ForecastResponse_CurrentCondition_WindGust", "struct", "state", "protoimpl", "MessageState", "sizeCache", "SizeCache", "unknownFields", "UnknownFields", "Wind", "ForecastResponse_Wind", "protobuf", "bytes", "opt", "name", "wind", "proto3", "json", "omitempty", "Gust", "float32", "fixed32", "gust", "func", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "MessageStateOf", "Pointer", "StoreMessageInfo", "string", "return", "MessageStringOf", "protoreflect", "Message", "nil", "LoadMessageInfo", "MessageOf"], "doc_head": "type ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}\nfunc (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\nfunc (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\nfunc (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}\nfunc (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).Reset", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_CurrentCondition_WindGust", "function_name": "", "method_name": "Reset", "type_name": "ForecastResponse_CurrentCondition_WindGust", "type_kind": "struct", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect", "google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["ForecastResponse_CurrentCondition_WindGust", "ForecastResponse_Wind", "Gust", "LoadMessageInfo", "Message", "MessageOf", "MessageState", "MessageStateOf", "MessageStringOf", "Pointer", "ProtoMessage", "ProtoReflect", "Reset", "SizeCache", "StoreMessageInfo", "String", "UnknownFields", "UnsafeEnabled", "Wind", "X", "mi.MessageOf", "ms.LoadMessageInfo", "ms.StoreMessageInfo", "protoimpl.MessageState", "protoimpl.Pointer", "protoimpl.SizeCache", "protoimpl.UnknownFields", "protoimpl.UnsafeEnabled", "protoimpl.X", "protoreflect.Message"], "header_context_minimal": "package \nimport (\n    \"google.golang.org/protobuf/reflect/protoreflect\"\n    \"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition_WindGust", "summary_llm": "The Go code defines a struct `ForecastResponse_CurrentCondition_WindGust` with fields for wind data and gust strength, including methods to reset the message, convert it to a string, and reflect its proto properties.", "keywords_llm": ["go", "struct", "reset", "string", "protobuf", "message", "wind", "gust", "forecast", "current condition"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#24", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 889, "end_line": 900, "text": "// Deprecated: Use ForecastResponse_CurrentCondition_WindGust.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}\n\nfunc (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}\n", "n_tokens": 101, "primary_symbol": "Descriptor", "primary_kind": "function", "primary_span": [890, 900], "def_symbols": ["Descriptor", "GetWind"], "symbols": ["Descriptor", "GetWind", "Deprecated", "Use", "ForecastResponse_CurrentCondition_WindGust", "ProtoReflect", "instead", "func", "byte", "int", "return", "file_service_v0_proto_rawDescGZIP", "ForecastResponse_Wind", "nil", "Wind"], "doc_head": "// Deprecated: Use ForecastResponse_CurrentCondition_WindGust.ProtoReflect.Descriptor instead.\nfunc (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}\nfunc (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*ForecastResponse_CurrentCondition_WindGust).Descriptor", "package": "", "node_kind": "method", "receiver": "*ForecastResponse_CurrentCondition_WindGust", "function_name": "", "method_name": "Descriptor", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Deprecated", "Descriptor", "ForecastResponse_CurrentCondition_WindGust", "ForecastResponse_CurrentCondition_WindGust.ProtoReflect", "ForecastResponse_Wind", "GetWind", "ProtoReflect", "Use", "Wind", "x.Wind"], "header_context_minimal": "package \n// receiver: *ForecastResponse_CurrentCondition_WindGust", "summary_llm": "This code snippet is a simple HTTP server in Go that responds with 'Hello, World!' to any incoming GET request.", "keywords_llm": ["go", "http server", "get request", "response handler", "listenandserve", "net/http package", "http.responsewriter", "http.request", "fmt package", "println function"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#25", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 901, "end_line": 1128, "text": "func (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}\n\nvar File_service_v0_proto protoreflect.FileDescriptor\n\nvar file_service_v0_proto_rawDesc = []byte{\n\t0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x12, 0x1a, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x22, 0x31,\n\t0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n\t0x64, 0x22, 0x92, 0x18, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,\n\t0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63,\n\t0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f,\n\t0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,\n\t0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,\n\t0x00, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,\n\t0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,\n\t0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69,\n\t0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c,\n\t0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x68, 0x6f,\n\t0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,\n\t0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f,\n\t0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30,\n\t0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x52, 0x0f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x73, 0x1a, 0x48, 0x0a, 0x10, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,\n\t0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,\n\t0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4d, 0x0a, 0x0d, 0x57,\n\t0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,\n\t0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x1a, 0x76, 0x0a, 0x04, 0x57, 0x69,\n\t0x6e, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,\n\t0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,\n\t0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,\n\t0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,\n\t0x65, 0x64, 0x1a, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a,\n\t0x0a, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x62, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,\n\t0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64,\n\t0x1a, 0xd3, 0x07, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x76,\n\t0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,\n\t0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x10, 0x77,\n\t0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,\n\t0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,\n\t0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70,\n\t0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,\n\t0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x08,\n\t0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,\n\t0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72,\n\t0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,\n\t0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72,\n\t0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,\n\t0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,\n\t0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,\n\t0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65,\n\t0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75,\n\t0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,\n\t0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,\n\t0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74,\n\t0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,\n\t0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65,\n\t0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e,\n\t0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49,\n\t0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,\n\t0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64,\n\t0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65,\n\t0x78, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,\n\t0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x68,\n\t0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,\n\t0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x69,\n\t0x0a, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,\n\t0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,\n\t0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,\n\t0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65,\n\t0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,\n\t0x65, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x77,\n\t0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x61, 0x74,\n\t0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72,\n\t0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,\n\t0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x77, 0x69,\n\t0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,\n\t0x52, 0x04, 0x67, 0x75, 0x73, 0x74, 0x1a, 0xc4, 0x06, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79,\n\t0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,\n\t0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x26,\n\t0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,\n\t0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,\n\t0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,\n\t0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24,\n\t0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,\n\t0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,\n\t0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x72,\n\t0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74,\n\t0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,\n\t0x73, 0x6e, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x18,\n\t0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x12, 0x1c,\n\t0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,\n\t0x02, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x18,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,\n\t0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,\n\t0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x64,\n\t0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x64, 0x12,\n\t0x3c, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,\n\t0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,\n\t0x28, 0x05, 0x52, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64,\n\t0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a,\n\t0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,\n\t0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,\n\t0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78,\n\t0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,\n\t0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x74,\n\t0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68,\n\t0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,\n\t0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78,\n\t0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,\n\t0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,\n\t0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,\n\t0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x69,\n\t0x73, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,\n\t0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73,\n\t0x75, 0x6e, 0x73, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,\n\t0x52, 0x0b, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0xc1, 0x04,\n\t0x0a, 0x0e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,\n\t0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,\n\t0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,\n\t0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,\n\t0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70,\n\t0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65,\n\t0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,\n\t0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x69, 0x0a, 0x10,\n\t0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n\t0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,\n\t0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,\n\t0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69,\n\t0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,\n\t0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,\n\t0x04, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x6e, 0x6f,\n\t0x77, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,\n\t0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a,\n\t0x04, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65,\n\t0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e,\n\t0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,\n\t0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x04,\n\t0x77, 0x69, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,\n\t0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n\t0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,\n\t0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,\n\t0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64,\n\t0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,\n\t0x01, 0x28, 0x05, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,\n\t0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64,\n\t0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65,\n\t0x78, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,\n\t0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x77, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,\n\t0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,\n\t0x30, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x46,\n\t0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,\n\t0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x6c, 0x61, 0x73, 0x74, 0x75, 0x64,\n\t0x69, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f,\n\t0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x6b, 0x67,\n\t0x2f, 0x70, 0x62, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_service_v0_proto_rawDescOnce sync.Once\n\tfile_service_v0_proto_rawDescData = file_service_v0_proto_rawDesc\n)\n", "n_tokens": 17683, "primary_symbol": "GetGust", "primary_kind": "function", "primary_span": [901, 1128], "def_symbols": ["GetGust"], "symbols": ["GetGust", "func", "ForecastResponse_CurrentCondition_WindGust", "float32", "nil", "return", "Gust", "var", "File_service_v0_proto", "protoreflect", "FileDescriptor", "file_service_v0_proto_rawDesc", "byte", "file_service_v0_proto_rawDescOnce", "sync", "Once", "file_service_v0_proto_rawDescData"], "doc_head": "func (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}\nvar File_service_v0_proto protoreflect.FileDescriptor\nvar file_service_v0_proto_rawDesc = []byte{\n\t0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x12, 0x1a, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,\n\t0x63, 0x61, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x30, 0x22, 0x31,\n\t0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,\n\t0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n\t0x64, 0x22, 0x92, 0x18, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,\n\t0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,\n\t0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,\n\t0x32, 0x3d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x63,\n\t0x61, 0x73, ", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).GetGust", "package": "", "node_kind": "method", "receiver": "x *ForecastResponse_CurrentCondition_WindGust", "function_name": "", "method_name": "GetGust", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/reflect/protoreflect"], "symbols_referenced_strict": ["FileDescriptor", "File_service_v0_proto", "ForecastResponse_CurrentCondition_WindGust", "GetGust", "Gust", "Once", "protoreflect.FileDescriptor", "sync.Once", "x.Gust"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/reflect/protoreflect\"\n// receiver: x *ForecastResponse_CurrentCondition_WindGust", "summary_llm": "LLM enrichment unavailable", "keywords_llm": ["error", "unavailable", "llm", "failed", "enrichment", "chunk", "code", "analysis"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#26", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 1129, "end_line": 1136, "text": "func file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}\n\nvar file_service_v0_proto_msgTypes = make([]protoimpl.MessageInfo, 11)", "n_tokens": 84, "primary_symbol": "file_service_v0_proto_rawDescGZIP", "primary_kind": "function", "primary_span": [1129, 1136], "def_symbols": ["file_service_v0_proto_rawDescGZIP"], "symbols": ["file_service_v0_proto_rawDescGZIP", "func", "byte", "file_service_v0_proto_rawDescOnce", "file_service_v0_proto_rawDescData", "protoimpl", "CompressGZIP", "return", "var", "file_service_v0_proto_msgTypes", "make", "MessageInfo"], "doc_head": "func file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}\nvar file_service_v0_proto_msgTypes = make([]protoimpl.MessageInfo, 11)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:file_service_v0_proto_rawDescGZIP", "package": "", "node_kind": "function", "receiver": "", "function_name": "file_service_v0_proto_rawDescGZIP", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["CompressGZIP", "Do", "MessageInfo", "X", "file_service_v0_proto_rawDescOnce.Do", "protoimpl.MessageInfo", "protoimpl.X"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"", "summary_llm": "This Go code defines a function `file_service_v0_proto_rawDescGZIP` that compresses raw protocol buffer descriptor data using GZIP. It ensures this operation is performed only once via a sync.Once mechanism. The code also initializes an array of message types for protocol buffers.", "keywords_llm": ["sync.once", "compressgzip", "file_service_v0_proto_rawdescdata", "protoimpl.messageinfo", "file_service_v0_proto_msgtypes", "do", "rawdesconce", "messagetypes", "protocol buffer", "compression"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#27", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 27, "start_line": 1137, "end_line": 1175, "text": "var file_service_v0_proto_goTypes = []interface{}{\n\t(*ForecastRequest)(nil),                            // 0: weather.forecasts.proxy.v0.ForecastRequest\n\t(*ForecastResponse)(nil),                           // 1: weather.forecasts.proxy.v0.ForecastResponse\n\t(*ForecastResponse_WeatherCondition)(nil),          // 2: weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t(*ForecastResponse_WindDirection)(nil),             // 3: weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t(*ForecastResponse_Wind)(nil),                      // 4: weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t(*ForecastResponse_Pressure)(nil),                  // 5: weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t(*ForecastResponse_CurrentCondition)(nil),          // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t(*ForecastResponse_DailyForecast)(nil),             // 7: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t(*ForecastResponse_HourlyForecast)(nil),            // 8: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t(*ForecastResponse_CurrentCondition_NextHour)(nil), // 9: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t(*ForecastResponse_CurrentCondition_WindGust)(nil), // 10: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust\n}\nvar file_service_v0_proto_depIdxs = []int32{\n\t6,  // 0: weather.forecasts.proxy.v0.ForecastResponse.currentCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t7,  // 1: weather.forecasts.proxy.v0.ForecastResponse.dailyForecasts:type_name -> weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t8,  // 2: weather.forecasts.proxy.v0.ForecastResponse.hourlyForecasts:type_name -> weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t3,  // 3: weather.forecasts.proxy.v0.ForecastResponse.Wind.direction:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t2,  // 4: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t9,  // 5: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.nextHour:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t10, // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.windGust:type_name -> weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust\n\t5,  // 7: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.pressure:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t4,  // 8: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t2,  // 9: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t2,  // 10: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast.weatherConditionNight:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t2,  // 11: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t4,  // 12: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t5,  // 13: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast.pressure:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t2,  // 14: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour.weatherCondition:type_name -> weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t4,  // 15: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.WindGust.wind:type_name -> weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t0,  // 16: weather.forecasts.proxy.v0.ForecaProxy.GetForecast:input_type -> weather.forecasts.proxy.v0.ForecastRequest\n\t1,  // 17: weather.forecasts.proxy.v0.ForecaProxy.GetForecast:output_type -> weather.forecasts.proxy.v0.ForecastResponse\n\t17, // [17:18] is the sub-list for method output_type\n\t16, // [16:17] is the sub-list for method input_type\n\t16, // [16:16] is the sub-list for extension type_name\n\t16, // [16:16] is the sub-list for extension extendee\n\t0,  // [0:16] is the sub-list for field type_name\n}\n", "n_tokens": 1083, "primary_symbol": "", "primary_kind": "", "primary_span": [1137, 1175], "def_symbols": [], "symbols": ["var", "file_service_v0_proto_goTypes", "interface", "ForecastRequest", "nil", "weather", "forecasts", "proxy", "ForecastResponse", "ForecastResponse_WeatherCondition", "WeatherCondition", "ForecastResponse_WindDirection", "WindDirection", "ForecastResponse_Wind", "Wind", "ForecastResponse_Pressure", "Pressure", "ForecastResponse_CurrentCondition", "CurrentCondition", "ForecastResponse_DailyForecast", "DailyForecast", "ForecastResponse_HourlyForecast", "HourlyForecast", "ForecastResponse_CurrentCondition_NextHour", "NextHour", "ForecastResponse_CurrentCondition_WindGust", "WindGust", "file_service_v0_proto_depIdxs", "int32", "currentCondition", "type_name", "dailyForecasts", "hourlyForecasts", "direction", "weatherCondition", "nextHour", "windGust", "pressure", "wind", "weatherConditionNight", "ForecaProxy", "GetForecast", "input_type", "output_type", "the", "sub", "list", "for", "method", "extension", "extendee", "field"], "doc_head": "var file_service_v0_proto_goTypes = []interface{}{\n\t(*ForecastRequest)(nil),                            // 0: weather.forecasts.proxy.v0.ForecastRequest\n\t(*ForecastResponse)(nil),                           // 1: weather.forecasts.proxy.v0.ForecastResponse\n\t(*ForecastResponse_WeatherCondition)(nil),          // 2: weather.forecasts.proxy.v0.ForecastResponse.WeatherCondition\n\t(*ForecastResponse_WindDirection)(nil),             // 3: weather.forecasts.proxy.v0.ForecastResponse.WindDirection\n\t(*ForecastResponse_Wind)(nil),                      // 4: weather.forecasts.proxy.v0.ForecastResponse.Wind\n\t(*ForecastResponse_Pressure)(nil),                  // 5: weather.forecasts.proxy.v0.ForecastResponse.Pressure\n\t(*ForecastResponse_CurrentCondition)(nil),          // 6: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition\n\t(*ForecastResponse_DailyForecast)(nil),             // 7: weather.forecasts.proxy.v0.ForecastResponse.DailyForecast\n\t(*ForecastResponse_HourlyForecast)(nil),            // 8: weather.forecasts.proxy.v0.ForecastResponse.HourlyForecast\n\t(*ForecastResponse_CurrentCondition_NextHour)(nil), // 9: weather.forecasts.proxy.v0.ForecastResponse.CurrentCondition.NextHour\n\t(*", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DailyForecast", "ForecaProxy", "ForecaProxy.GetForecast", "ForecastRequest", "ForecastResponse", "ForecastResponse.CurrentCondition", "ForecastResponse.DailyForecast", "ForecastResponse.HourlyForecast", "ForecastResponse.Pressure", "ForecastResponse.WeatherCondition", "ForecastResponse.Wind", "ForecastResponse.WindDirection", "ForecastResponse.currentCondition", "ForecastResponse.dailyForecasts", "ForecastResponse.hourlyForecasts", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_CurrentCondition_WindGust", "ForecastResponse_DailyForecast", "ForecastResponse_HourlyForecast", "ForecastResponse_Pressure", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "ForecastResponse_WindDirection", "GetForecast", "HourlyForecast", "NextHour", "NextHour.weatherCondition", "Pressure", "WeatherCondition", "Wind", "WindDirection", "WindGust", "WindGust.wind", "proxy.v0", "weather.forecasts"], "header_context_minimal": "package ", "summary_llm": "This Go code defines the data structures and dependencies for a weather forecast service. It includes message types such as ForecastRequest, ForecastResponse, and sub-types like CurrentCondition, DailyForecast, and HourlyForecast.", "keywords_llm": ["forecastrequest", "forecastresponse", "weathercondition", "winddirection", "wind", "pressure", "currentcondition", "dailyforecast", "hourlyforecast", "forecaproxy", "getforecast"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#28", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 28, "start_line": 1176, "end_line": 1217, "text": "func init() { file_service_v0_proto_init() }\nfunc file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 292, "primary_symbol": "init", "primary_kind": "function", "primary_span": [1176, 1217], "def_symbols": ["init", "file_service_v0_proto_init"], "symbols": ["init", "file_service_v0_proto_init", "func", "File_service_v0_proto", "nil", "return", "protoimpl", "UnsafeEnabled", "file_service_v0_proto_msgTypes", "Exporter", "interface", "int", "switch", "ForecastRequest", "case", "state", "sizeCache", "unknownFields", "default", "ForecastResponse", "ForecastResponse_WeatherCondition"], "doc_head": "func init() { file_service_v0_proto_init() }\nfunc file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:init", "package": "", "node_kind": "function", "receiver": "", "function_name": "init", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Exporter", "File_service_v0_proto", "ForecastRequest", "ForecastResponse", "ForecastResponse_WeatherCondition", "UnsafeEnabled", "protoimpl.UnsafeEnabled", "v.sizeCache", "v.state", "v.unknownFields"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"", "summary_llm": "The code defines initialization functions for protocol buffer messages in the `service.v0.pb.go` file. It sets up export functions for `ForecastRequest`, `ForecastResponse`, and `ForecastResponse_WeatherCondition` messages to access their state, size cache, and unknown fields.", "keywords_llm": ["init", "file_service_v0_proto_init", "exporter", "protoimpl.unsafeenabled", "forecastrequest", "forecastresponse", "forecastresponse_weathercondition", "state", "sizecache", "unknownfields"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#29", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 29, "start_line": 1218, "end_line": 1253, "text": "\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 254, "primary_symbol": "", "primary_kind": "", "primary_span": [1218, 1253], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_WindDirection", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_Wind", "ForecastResponse_Pressure"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Exporter", "ForecastResponse_Pressure", "ForecastResponse_Wind", "ForecastResponse_WindDirection", "v.sizeCache", "v.state", "v.unknownFields"], "header_context_minimal": "package ", "summary_llm": "This Go code defines a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' to any GET requests.", "keywords_llm": ["go", "http server", "port 8080", "get request", "response", "hello, world!"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#30", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 30, "start_line": 1254, "end_line": 1289, "text": "\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "n_tokens": 255, "primary_symbol": "", "primary_kind": "", "primary_span": [1254, 1289], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_CurrentCondition", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_DailyForecast", "ForecastResponse_HourlyForecast"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Exporter", "ForecastResponse_CurrentCondition", "ForecastResponse_DailyForecast", "ForecastResponse_HourlyForecast", "v.sizeCache", "v.state", "v.unknownFields"], "header_context_minimal": "package ", "summary_llm": "This code defines export functions for message types in a Go package. It maps fields to their respective states and caches.", "keywords_llm": ["exporter", "forecastresponse_currentcondition", "forecastresponse_dailyforecast", "forecastresponse_hourlyforecast", "state", "sizecache", "unknownfields", "interface{}", "switch", "default"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#31", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 31, "start_line": 1290, "end_line": 1315, "text": "\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}", "n_tokens": 196, "primary_symbol": "", "primary_kind": "", "primary_span": [1290, 1315], "def_symbols": [], "symbols": ["file_service_v0_proto_msgTypes", "Exporter", "func", "interface", "int", "switch", "ForecastResponse_CurrentCondition_NextHour", "case", "return", "state", "sizeCache", "unknownFields", "default", "nil", "ForecastResponse_CurrentCondition_WindGust", "OneofWrappers"], "doc_head": "\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Exporter", "ForecastResponse_CurrentCondition_NextHour", "ForecastResponse_CurrentCondition_WindGust", "OneofWrappers", "v.sizeCache", "v.state", "v.unknownFields"], "header_context_minimal": "package ", "summary_llm": "This Go code defines exporters for message types `ForecastResponse_CurrentCondition_NextHour` and `ForecastResponse_CurrentCondition_WindGust`, providing access to their state, size cache, and unknown fields. It also sets up an empty slice of oneof wrappers for a message type.", "keywords_llm": ["exporter", "message types", "current condition next hour", "current condition wind gust", "state", "size cache", "unknown fields", "oneof wrappers", "file_service_v0_proto_msgtypes"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go#32", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go", "rel_path": "pkg/pb/v0/service.v0.pb.go", "ext": "go", "language": "go", "chunk_number": 32, "start_line": 1316, "end_line": 1335, "text": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()\n\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}\n", "n_tokens": 171, "primary_symbol": "", "primary_kind": "", "primary_span": [1316, 1335], "def_symbols": [], "symbols": ["type", "struct", "out", "protoimpl", "TypeBuilder", "File", "DescBuilder", "GoPackagePath", "reflect", "TypeOf", "PkgPath", "RawDescriptor", "file_service_v0_proto_rawDesc", "NumEnums", "NumMessages", "NumExtensions", "NumServices", "GoTypes", "file_service_v0_proto_goTypes", "DependencyIndexes", "file_service_v0_proto_depIdxs", "MessageInfos", "file_service_v0_proto_msgTypes", "Build", "File_service_v0_proto", "nil"], "doc_head": "\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()\n\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["google.golang.org/protobuf/runtime/protoimpl"], "symbols_referenced_strict": ["Build", "DependencyIndexes", "DescBuilder", "File", "File_service_v0_proto", "GoPackagePath", "GoTypes", "MessageInfos", "NumEnums", "NumExtensions", "NumMessages", "NumServices", "PkgPath", "RawDescriptor", "TypeBuilder", "TypeOf", "out.File", "protoimpl.DescBuilder", "protoimpl.TypeBuilder", "reflect.TypeOf"], "header_context_minimal": "package \nimport \"google.golang.org/protobuf/runtime/protoimpl\"", "summary_llm": "This Go code defines a function that takes an integer as input and returns the square of that number.", "keywords_llm": ["go", "function", "integer", "square", "return"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 35, "text": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: service.v0.proto\n\npackage v0\n\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7\n\n// ForecaProxyClient is the client API for ForecaProxy service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}\n\ntype forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}\n", "n_tokens": 270, "primary_symbol": "NewForecaProxyClient", "primary_kind": "function", "primary_span": [32, 35], "def_symbols": ["NewForecaProxyClient"], "symbols": ["NewForecaProxyClient", "Code", "generated", "protoc", "gen", "grpc", "NOT", "EDIT", "versions", "source", "service", "proto", "package", "import", "context", "google", "golang", "org", "codes", "status", "This", "compile", "time", "assertion", "ensure", "that", "this", "file", "compatible", "with", "the", "being", "compiled", "against", "Requires", "gRPC", "later", "const", "SupportPackageIsVersion7", "ForecaProxyClient", "client", "API", "for", "ForecaProxy", "For", "semantics", "around", "ctx", "use", "and", "closing", "ending", "streaming", "RPCs", "please", "refer", "https", "pkg", "dev", "tab", "doc", "ClientConn", "NewStream", "type", "interface", "GetForecast", "Context", "ForecastRequest", "opts", "CallOption", "ForecastResponse", "error", "forecaProxyClient", "struct", "ClientConnInterface", "func", "return"], "doc_head": "// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: service.v0.proto\npackage v0\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7\n// ForecaProxyClient is the client API for ForecaProxy service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}\ntype forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}\nfunc NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewForecaProxyClient", "package": "v0", "node_kind": "function", "receiver": "", "function_name": "NewForecaProxyClient", "method_name": "", "type_name": "ForecaProxyClient", "type_kind": "interface", "imports_used_minimal": [], "symbols_referenced_strict": ["API", "CallOption", "ClientConn", "ClientConn.NewStream", "ClientConnInterface", "Code", "Context", "DO", "EDIT", "For", "ForecaProxy", "ForecaProxyClient", "ForecastRequest", "ForecastResponse", "GetForecast", "Go", "NOT", "NewForecaProxyClient", "NewStream", "RPCs", "Requires", "SupportPackageIsVersion7", "This", "context.Context", "google.golang", "grpc.CallOption", "grpc.ClientConnInterface", "grpc.SupportPackageIsVersion7", "pkg.go", "service.v0"], "header_context_minimal": "package v0", "summary_llm": "This Go code defines a gRPC client for the `ForecaProxy` service. It includes the `NewForecaProxyClient` function to create a new client and the `GetForecast` method for making forecast requests.", "keywords_llm": ["grpc", "client", "foreca_proxy_client", "new_foreca_proxy_client", "get_forecast", "forecast_request", "forecast_response", "context_context", "google_golang_org_grpc", "supportpackageisversion7"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 36, "end_line": 68, "text": "func (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// ForecaProxyServer is the server API for ForecaProxy service.\n// All implementations must embed UnimplementedForecaProxyServer\n// for forward compatibility\ntype ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n\n// UnimplementedForecaProxyServer must be embedded to have forward compatible implementations.\ntype UnimplementedForecaProxyServer struct {\n}\n\nfunc (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}\nfunc (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}\n\n// UnsafeForecaProxyServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ForecaProxyServer will\n// result in compilation errors.\ntype UnsafeForecaProxyServer interface {\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n", "n_tokens": 303, "primary_symbol": "GetForecast", "primary_kind": "function", "primary_span": [36, 68], "def_symbols": ["GetForecast", "mustEmbedUnimplementedForecaProxyServer"], "symbols": ["GetForecast", "mustEmbedUnimplementedForecaProxyServer", "func", "forecaProxyClient", "ctx", "context", "Context", "ForecastRequest", "opts", "grpc", "CallOption", "ForecastResponse", "error", "out", "new", "err", "Invoke", "weather", "forecasts", "proxy", "ForecaProxy", "nil", "return", "ForecaProxyServer", "the", "server", "API", "for", "service", "All", "implementations", "must", "embed", "UnimplementedForecaProxyServer", "forward", "compatibility", "type", "interface", "embedded", "have", "compatible", "struct", "status", "Errorf", "codes", "Unimplemented", "method", "not", "implemented", "UnsafeForecaProxyServer", "may", "opt", "this", "Use", "recommended", "added", "methods", "will", "result", "compilation", "errors"], "doc_head": "func (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n// ForecaProxyServer is the server API for ForecaProxy service.\n// All implementations must embed UnimplementedForecaProxyServer\n// for forward compatibility\ntype ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}\n// UnimplementedForecaProxyServer must be embedded to have forward compatible implementations.\ntype UnimplementedForecaProxyServer struct {\n}\nfunc (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}\nfunc (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}\n// UnsafeForecaProxyServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommende", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(c *forecaProxyClient).GetForecast", "package": "", "node_kind": "method", "receiver": "c *forecaProxyClient", "function_name": "", "method_name": "GetForecast", "type_name": "ForecaProxyServer", "type_kind": "interface", "imports_used_minimal": [], "symbols_referenced_strict": ["API", "All", "CallOption", "Context", "Errorf", "ForecaProxy", "ForecaProxyServer", "ForecastRequest", "ForecastResponse", "GetForecast", "Invoke", "Unimplemented", "UnimplementedForecaProxyServer", "UnsafeForecaProxyServer", "Use", "c.cc", "codes.Unimplemented", "context.Context", "grpc.CallOption", "proxy.v0", "status.Errorf", "weather.forecasts"], "header_context_minimal": "package \n// receiver: c *forecaProxyClient", "summary_llm": "This Go code defines a gRPC client (`forecaProxyClient`) and server interface (`ForecaProxyServer`) for a weather forecast service. The client includes a `GetForecast` method to retrieve forecasts, while the server provides an unimplemented placeholder for this method.", "keywords_llm": ["grpc", "client", "server", "forecast", "getforecast", "invoke", "unimplemented", "context", "options", "response", "weather", "service", "proxy"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 69, "end_line": 84, "text": "func RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}\n\nfunc _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}", "n_tokens": 150, "primary_symbol": "RegisterForecaProxyServer", "primary_kind": "function", "primary_span": [69, 84], "def_symbols": ["RegisterForecaProxyServer", "_ForecaProxy_GetForecast_Handler"], "symbols": ["RegisterForecaProxyServer", "_ForecaProxy_GetForecast_Handler", "func", "grpc", "ServiceRegistrar", "srv", "ForecaProxyServer", "RegisterService", "ForecaProxy_ServiceDesc", "interface", "ctx", "context", "Context", "dec", "error", "interceptor", "UnaryServerInterceptor", "new", "ForecastRequest", "err", "nil", "return", "GetForecast", "info", "UnaryServerInfo", "Server", "FullMethod", "weather", "forecasts", "proxy", "ForecaProxy"], "doc_head": "func RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}\nfunc _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:RegisterForecaProxyServer", "package": "", "node_kind": "function", "receiver": "", "function_name": "RegisterForecaProxyServer", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Context", "ForecaProxy", "ForecaProxyServer", "ForecaProxy_ServiceDesc", "ForecastRequest", "FullMethod", "GetForecast", "RegisterForecaProxyServer", "RegisterService", "Server", "ServiceRegistrar", "UnaryServerInfo", "UnaryServerInterceptor", "context.Context", "grpc.ServiceRegistrar", "grpc.UnaryServerInfo", "grpc.UnaryServerInterceptor", "proxy.v0", "s.RegisterService", "weather.forecasts"], "header_context_minimal": "package ", "summary_llm": "The `RegisterForecaProxyServer` function registers a service with a gRPC server. The `_ForecaProxy_GetForecast_Handler` function handles the GetForecast RPC method.", "keywords_llm": ["grpc", "service", "server", "register", "handle", "request", "forecast", "context", "interceptor"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go", "rel_path": "pkg/pb/v0/service.v0_grpc.pb.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 85, "end_line": 106, "text": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// ForecaProxy_ServiceDesc is the grpc.ServiceDesc for ForecaProxy service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar ForecaProxy_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"weather.forecasts.proxy.v0.ForecaProxy\",\n\tHandlerType: (*ForecaProxyServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetForecast\",\n\t\t\tHandler:    _ForecaProxy_GetForecast_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"service.v0.proto\",\n}\n", "n_tokens": 185, "primary_symbol": "", "primary_kind": "", "primary_span": [85, 106], "def_symbols": [], "symbols": ["handler", "func", "ctx", "context", "Context", "req", "interface", "error", "return", "srv", "ForecaProxyServer", "GetForecast", "ForecastRequest", "interceptor", "info", "ForecaProxy_ServiceDesc", "the", "grpc", "ServiceDesc", "for", "ForecaProxy", "service", "only", "intended", "direct", "use", "with", "RegisterService", "and", "not", "introspected", "modified", "even", "copy", "var", "ServiceName", "weather", "forecasts", "proxy", "HandlerType", "nil", "Methods", "MethodDesc", "MethodName", "Handler", "_ForecaProxy_GetForecast_Handler", "Streams", "StreamDesc", "Metadata", "proto"], "doc_head": "\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n// ForecaProxy_ServiceDesc is the grpc.ServiceDesc for ForecaProxy service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar ForecaProxy_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"weather.forecasts.proxy.v0.ForecaProxy\",\n\tHandlerType: (*ForecaProxyServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetForecast\",\n\t\t\tHandler:    _ForecaProxy_GetForecast_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"service.v0.proto\",\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:block", "package": "", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Context", "ForecaProxy", "ForecaProxyServer", "ForecaProxy_ServiceDesc", "ForecastRequest", "GetForecast", "Handler", "HandlerType", "It", "Metadata", "MethodDesc", "MethodName", "Methods", "RegisterService", "ServiceDesc", "ServiceName", "StreamDesc", "Streams", "context.Context", "grpc.MethodDesc", "grpc.RegisterService", "grpc.ServiceDesc", "grpc.StreamDesc", "proxy.v0", "service.v0", "weather.forecasts"], "header_context_minimal": "package ", "summary_llm": "This code defines a handler function for the 'GetForecast' method of the 'ForecaProxy' service. It also declares the gRPC service descriptor for 'ForecaProxy'.", "keywords_llm": ["handler", "ctx", "req", "srv", "getforecast", ".forecaproxyserver", "servicedesc", "grpc.servicedesc", "weather.forecasts", "proxy.v0", "service.v0", "weather.forecasts"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 24, "text": "package xotel\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\tmetricsdk \"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n// TracerProviderConfig is the configuration for the OpenTelemetry Tracer provider\ntype TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}\n", "n_tokens": 215, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 24], "def_symbols": [], "symbols": ["package", "xotel", "import", "context", "opentelemetry", "otel", "metric", "time", "github", "com", "cockroachdb", "errors", "spf13", "viper", "exporters", "otlp", "otlpmetric", "otlpmetricgrpc", "otlptrace", "otlptracegrpc", "metricsdk", "sdk", "resource", "tracesdk", "trace", "semconv", "TracerProviderConfig", "the", "configuration", "for", "OpenTelemetry", "Tracer", "provider", "type", "struct", "Endpoint", "string", "mapstructure", "endpoint"], "doc_head": "package xotel\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\tmetricsdk \"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n// TracerProviderConfig is the configuration for the OpenTelemetry Tracer provider\ntype TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:TracerProviderConfig (struct)", "package": "xotel", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "TracerProviderConfig", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Endpoint", "OpenTelemetry", "Tracer", "TracerProviderConfig", "github.com", "go.opentelemetry"], "header_context_minimal": "package xotel", "summary_llm": "The provided Go code defines a function to calculate the Fibonacci sequence up to a given number of terms.", "keywords_llm": ["go language", "fibonacci sequence", "recursive function", "loop", "array", "integer arithmetic"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 25, "end_line": 63, "text": "// NewTracerProvider creates a new TracerProvider provider\n// Usage:\n//\n//\ttp, err := xotel.NewTracerProvider(ctx, cfg)\n//\tif err != nil {\n//\t\treturn nil, errors.Wrap(err, \"failed to create trace provider\")\n//\t}\n//\totel.SetTracerProvider(tp)\n//\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n//\n//\tdefer tp.Shutdown(ctx)\nfunc NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\n\treturn tp, nil\n}\n\n// Tracer is the global tracer\nvar Tracer trace.Tracer = nil\n", "n_tokens": 297, "primary_symbol": "NewTracerProvider", "primary_kind": "function", "primary_span": [36, 63], "def_symbols": ["NewTracerProvider"], "symbols": ["NewTracerProvider", "creates", "new", "TracerProvider", "provider", "Usage", "err", "xotel", "ctx", "cfg", "nil", "return", "errors", "Wrap", "failed", "create", "trace", "otel", "SetTracerProvider", "SetGlobalTracer", "Tracer", "viper", "GetString", "app", "name", "defer", "Shutdown", "func", "context", "Context", "TracerProviderConfig", "tracesdk", "error", "getResource", "cannot", "get", "resource", "tracer", "otlptracegrpc", "NewClient", "WithEndpoint", "Endpoint", "WithInsecure", "exporter", "otlptrace", "New", "initialize", "Always", "sure", "batch", "production", "WithBatcher", "WithResource", "WithSampler", "ParentBased", "AlwaysSample", "the", "global", "var"], "doc_head": "// NewTracerProvider creates a new TracerProvider provider\n// Usage:\n//\n//\ttp, err := xotel.NewTracerProvider(ctx, cfg)\n//\tif err != nil {\n//\t\treturn nil, errors.Wrap(err, \"failed to create trace provider\")\n//\t}\n//\totel.SetTracerProvider(tp)\n//\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n//\n//\tdefer tp.Shutdown(ctx)\nfunc NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\treturn tp, nil\n}\n// Tracer is the global tracer\nvar Tracer trace.Tracer = nil", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewTracerProvider", "package": "", "node_kind": "function", "receiver": "", "function_name": "NewTracerProvider", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/otel"], "symbols_referenced_strict": ["Always", "AlwaysSample", "Context", "Endpoint", "GetString", "New", "NewClient", "NewTracerProvider", "ParentBased", "SetGlobalTracer", "SetTracerProvider", "Shutdown", "Tracer", "TracerProvider", "TracerProviderConfig", "Usage", "WithBatcher", "WithEndpoint", "WithInsecure", "WithResource", "WithSampler", "Wrap", "app.name", "cfg.Endpoint", "context.Context", "errors.Wrap", "otel.SetTracerProvider", "otlptrace.New", "otlptracegrpc.NewClient", "otlptracegrpc.WithEndpoint", "otlptracegrpc.WithInsecure", "tp.Shutdown", "tp.Tracer", "trace.Tracer", "tracesdk.AlwaysSample", "tracesdk.NewTracerProvider", "tracesdk.ParentBased", "tracesdk.TracerProvider", "tracesdk.WithBatcher", "tracesdk.WithResource", "tracesdk.WithSampler", "viper.GetString", "xotel.NewTracerProvider", "xotel.SetGlobalTracer"], "header_context_minimal": "package \nimport \"go.impalastudios.com/otel\"", "summary_llm": "The `NewTracerProvider` function creates and configures a new tracer provider for OpenTelemetry tracing. It initializes an exporter with specified endpoint and options, then sets up the tracer provider with batching, resource information, and sampling.", "keywords_llm": ["tracer", "provider", "otlp", "batching", "resource", "sampling", "exporter", "endpoint", "context", "error"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 64, "end_line": 111, "text": "// SetGlobalTracer sets global tracer\nfunc SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}\n\n// MeterProviderConfig is the configuration for the OpenTelemetry providers\ntype MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}\n\nfunc NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\n\treturn provider, nil\n}\n\n// Meter is the global tracer\nvar Meter metric.Meter = nil\n\n// SetGlobalMeter sets global tracer\nfunc SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}\n", "n_tokens": 287, "primary_symbol": "SetGlobalTracer", "primary_kind": "function", "primary_span": [65, 111], "def_symbols": ["SetGlobalTracer", "NewMeterProvider", "SetGlobalMeter"], "symbols": ["SetGlobalTracer", "NewMeterProvider", "SetGlobalMeter", "sets", "global", "tracer", "func", "trace", "Tracer", "MeterProviderConfig", "the", "configuration", "for", "OpenTelemetry", "providers", "type", "struct", "Endpoint", "string", "mapstructure", "endpoint", "Interval", "time", "Duration", "interval", "ctx", "context", "Context", "cfg", "metricsdk", "MeterProvider", "error", "cancel", "WithTimeout", "Second", "defer", "err", "getResource", "nil", "return", "errors", "Wrap", "cannot", "get", "resource", "exporter", "otlpmetricgrpc", "New", "WithEndpoint", "WithInsecure", "failed", "initialize", "metric", "reader", "NewPeriodicReader", "WithInterval", "provider", "WithResource", "WithReader", "Meter", "var", "meter"], "doc_head": "// SetGlobalTracer sets global tracer\nfunc SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}\n// MeterProviderConfig is the configuration for the OpenTelemetry providers\ntype MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}\nfunc NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\treturn provider, nil\n}\n// Meter is the global tracer\nvar Meter metric.Meter = nil\n// SetGlobalMeter sets global tracer\nfunc SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:SetGlobalTracer", "package": "", "node_kind": "function", "receiver": "", "function_name": "SetGlobalTracer", "method_name": "", "type_name": "MeterProviderConfig", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Context", "Duration", "Endpoint", "Interval", "Meter", "MeterProvider", "MeterProviderConfig", "New", "NewMeterProvider", "NewPeriodicReader", "OpenTelemetry", "Second", "SetGlobalMeter", "SetGlobalTracer", "Tracer", "WithEndpoint", "WithInsecure", "WithInterval", "WithReader", "WithResource", "WithTimeout", "Wrap", "cfg.Endpoint", "cfg.Interval", "context.Context", "context.WithTimeout", "errors.Wrap", "metric.Meter", "metricsdk.MeterProvider", "metricsdk.NewMeterProvider", "metricsdk.NewPeriodicReader", "metricsdk.WithInterval", "metricsdk.WithReader", "metricsdk.WithResource", "otlpmetricgrpc.New", "otlpmetricgrpc.WithEndpoint", "otlpmetricgrpc.WithInsecure", "time.Duration", "time.Second", "trace.Tracer"], "header_context_minimal": "package \nimport \"time\"", "summary_llm": "This Go code provides functions to set global tracers and meter providers for OpenTelemetry. It includes configuration structures, constructors for meter providers, and global variables to manage these components.", "keywords_llm": ["opentelemetry", "global tracer", "meter provider", "set global tracer", "set global meter", "meter provider config", "new meter provider", "periodic reader", "otlpmetricgrpc", "with endpoint", "with insecure"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go", "rel_path": "pkg/xotel/provider.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 112, "end_line": 126, "text": "func getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\n\treturn r, nil\n}\n", "n_tokens": 78, "primary_symbol": "getResource", "primary_kind": "function", "primary_span": [112, 126], "def_symbols": ["getResource"], "symbols": ["getResource", "func", "resource", "Resource", "error", "err", "Merge", "Default", "NewWithAttributes", "semconv", "SchemaURL", "ServiceNameKey", "String", "viper", "GetString", "app", "name", "nil", "return", "errors", "Wrap", "cannot", "merge"], "doc_head": "func getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\treturn r, nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:getResource", "package": "", "node_kind": "function", "receiver": "", "function_name": "getResource", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Default", "GetString", "Merge", "NewWithAttributes", "Resource", "SchemaURL", "ServiceNameKey", "String", "Wrap", "app.name", "errors.Wrap", "resource.Default", "resource.Merge", "resource.NewWithAttributes", "resource.Resource", "semconv.SchemaURL", "semconv.ServiceNameKey", "viper.GetString"], "header_context_minimal": "package ", "summary_llm": "The `getResource` function merges a default resource with a new resource that includes the service name attribute from viper configuration. It returns the merged resource or an error if merging fails.", "keywords_llm": ["resource", "merge", "default", "attributes", "service name", "viper", "error", "wrap"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go", "rel_path": "pkg/cache/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "package cache\n\ntype Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 22, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["package", "cache", "type", "Item", "struct", "Key", "string", "Value", "byte", "Expiration", "int32"], "doc_head": "package cache\ntype Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Item (struct)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Item", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Expiration", "Item", "Key", "Value"], "header_context_minimal": "package cache", "summary_llm": "The Go code defines a `cache.Item` struct with fields for a cache item's key, value, and expiration time.", "keywords_llm": ["cache", "item", "key", "value", "expiration", "struct", "string", "byte", "int32"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go", "rel_path": "pkg/cache/memcached.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 52, "text": "package cache\n\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n\ntype Memcached struct {\n\tc memcache.Client\n}\n\nfunc NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}\n\nfunc (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}\n\nfunc (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\n\treturn response.Error()\n}\n\nfunc (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\n\treturn response.Error()\n}\n", "n_tokens": 260, "primary_symbol": "NewMemcached", "primary_kind": "function", "primary_span": [12, 52], "def_symbols": ["NewMemcached", "Get", "Set", "SetWithExpiration"], "symbols": ["NewMemcached", "Get", "Set", "SetWithExpiration", "package", "cache", "import", "github", "com", "dropbox", "godropbox", "memcache", "time", "type", "Memcached", "struct", "Client", "func", "client", "return", "key", "string", "Item", "error", "response", "Status", "StatusNoError", "switch", "case", "StatusKeyNotFound", "nil", "ErrCacheMiss", "default", "ErrCacheGeneric", "Key", "Value", "value", "byte", "Error", "exp", "Time", "Expiration", "uint32", "Unix"], "doc_head": "package cache\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\ntype Memcached struct {\n\tc memcache.Client\n}\nfunc NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}\nfunc (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}\nfunc (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\treturn response.Error()\n}\nfunc (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\treturn response.Error()\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(m *Memcached).Get", "package": "cache", "node_kind": "method", "receiver": "m *Memcached", "function_name": "NewMemcached", "method_name": "Get", "type_name": "Memcached", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Client", "ErrCacheGeneric", "ErrCacheMiss", "Error", "Expiration", "Get", "Item", "Key", "Memcached", "NewMemcached", "Set", "SetWithExpiration", "Status", "StatusKeyNotFound", "StatusNoError", "Time", "Unix", "Value", "exp.Unix", "github.com", "m.c", "memcache.Client", "memcache.Item", "memcache.StatusKeyNotFound", "memcache.StatusNoError", "response.Error", "response.Key", "response.Status", "response.Value", "time.Time"], "header_context_minimal": "package cache\nimport \"time\"\n// receiver: m *Memcached", "summary_llm": "This Go code defines a `Memcached` struct with methods to interact with a memcache server. The `Get`, `Set`, and `SetWithExpiration` methods provide functionality to retrieve, store, and store with expiration times items in the memcache.", "keywords_llm": ["memcached", "get", "set", "expiration", "client", "response", "error", "item", "key", "value"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go", "rel_path": "pkg/cache/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 9, "text": "package cache\n\nimport \"errors\"\n\nvar (\n\tErrCacheMiss    = errors.New(\"cache miss\")\n\tErrCacheGeneric = errors.New(\"cache generic\")\n)\n", "n_tokens": 33, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 9], "def_symbols": [], "symbols": ["package", "cache", "import", "errors", "var", "ErrCacheMiss", "New", "miss", "ErrCacheGeneric", "generic"], "doc_head": "package cache\nimport \"errors\"\nvar (\n\tErrCacheMiss    = errors.New(\"cache miss\")\n\tErrCacheGeneric = errors.New(\"cache generic\")\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ErrCacheGeneric", "ErrCacheMiss", "New", "errors.New"], "header_context_minimal": "package cache", "summary_llm": "This Go code defines two error variables within the `cache` package: `ErrCacheMiss` for indicating a cache miss and `ErrCacheGeneric` for generic cache-related errors. These errors are created using `errors.New` from the Go standard library.", "keywords_llm": ["cache", "error", "errcachemiss", "errcachegeneric", "errors.new", "package", "go", "standard library"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go", "rel_path": "pkg/utilities/units.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 18, "text": "package utilities\n\nfunc CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}\n\nfunc FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}\n\nfunc KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}\n\nfunc MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}\n", "n_tokens": 107, "primary_symbol": "CelsiusToFahrenheit", "primary_kind": "function", "primary_span": [3, 18], "def_symbols": ["CelsiusToFahrenheit", "FahrenheitToCelsius", "KilometersToMiles", "MilesToKilometers"], "symbols": ["CelsiusToFahrenheit", "FahrenheitToCelsius", "KilometersToMiles", "MilesToKilometers", "package", "utilities", "func", "celsius", "float64", "return", "fahrenheit"], "doc_head": "package utilities\nfunc CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}\nfunc FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}\nfunc KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}\nfunc MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:CelsiusToFahrenheit", "package": "utilities", "node_kind": "function", "receiver": "", "function_name": "CelsiusToFahrenheit", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["CelsiusToFahrenheit", "FahrenheitToCelsius", "KilometersToMiles", "MilesToKilometers"], "header_context_minimal": "package utilities", "summary_llm": "This Go package contains utility functions for converting temperature between Celsius and Fahrenheit, as well as distance between kilometers and miles.", "keywords_llm": ["celsius", "fahrenheit", "kilometers", "miles", "conversion", "utility", "package", "go"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go", "rel_path": "pkg/utilities/slices.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 12, "text": "package utilities\n\nfunc ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n", "n_tokens": 41, "primary_symbol": "ContainsString", "primary_kind": "function", "primary_span": [3, 12], "def_symbols": ["ContainsString"], "symbols": ["ContainsString", "package", "utilities", "func", "string", "bool", "for", "range", "return", "true", "false"], "doc_head": "package utilities\nfunc ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:ContainsString", "package": "utilities", "node_kind": "function", "receiver": "", "function_name": "ContainsString", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ContainsString"], "header_context_minimal": "package utilities", "summary_llm": "The Go code provided is a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' to any incoming requests.", "keywords_llm": ["go", "http server", "port 8080", "response", "hello world"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go", "rel_path": "pkg/utilities/math.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 22, "text": "package utilities\n\nimport \"math\"\n\nfunc Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Floor(v*base) / base\n}\n\nfunc Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Round(v*base) / base\n}\n\nfunc Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Ceil(v*base) / base\n}\n", "n_tokens": 102, "primary_symbol": "Floor", "primary_kind": "function", "primary_span": [5, 22], "def_symbols": ["Floor", "Round", "Ceil"], "symbols": ["Floor", "Round", "Ceil", "package", "utilities", "import", "math", "func", "float64", "precision", "int", "base", "Pow10", "return"], "doc_head": "package utilities\nimport \"math\"\nfunc Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\treturn math.Floor(v*base) / base\n}\nfunc Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\treturn math.Round(v*base) / base\n}\nfunc Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\treturn math.Ceil(v*base) / base\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:Floor", "package": "utilities", "node_kind": "function", "receiver": "", "function_name": "Floor", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Ceil", "Floor", "Pow10", "Round", "math.Ceil", "math.Floor", "math.Pow10", "math.Round"], "header_context_minimal": "package utilities", "summary_llm": "The code defines functions for rounding floating-point numbers up (Ceil), down (Floor), and to the nearest value (Round) with a specified precision.", "keywords_llm": ["floor", "ceil", "round", "precision", "math.pow10", "math.ceil", "math.floor", "math.round", "utilities"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 35, "text": "package ratelimit_test\n\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\n\tmockController *gomock.Controller\n}\n\nfunc (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}\n", "n_tokens": 225, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [18, 35], "def_symbols": ["SetupSuite", "TestSingleThreadLimiter_PeekEmpty"], "symbols": ["SetupSuite", "TestSingleThreadLimiter_PeekEmpty", "package", "ratelimit_test", "import", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "pkg", "ratelimit", "mocks", "uber", "org", "mock", "gomock", "testing", "time", "type", "singleThreadLimiterTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController", "storage", "NewMockstorage", "EXPECT", "Get", "test", "Return", "nil", "NewSingleThreadLimiter", "Second", "Start", "defer", "Stop", "err", "Peek", "Assert", "NotNil", "ErrorIs", "ErrNotFound", "Zero"], "doc_head": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\ntype singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\tmockController *gomock.Controller\n}\nfunc (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).SetupSuite", "package": "ratelimit_test", "node_kind": "method", "receiver": "suite *singleThreadLimiterTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "singleThreadLimiterTestSuite", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Assert", "Controller", "EXPECT", "ErrNotFound", "ErrorIs", "Get", "NewController", "NewMockstorage", "NewSingleThreadLimiter", "NotNil", "Peek", "Return", "Second", "SetupSuite", "Start", "Stop", "Suite", "T", "TestSingleThreadLimiter_PeekEmpty", "Zero", "github.com", "go.impalastudios", "go.uber", "gomock.Controller", "gomock.NewController", "l.Peek", "l.Start", "l.Stop", "mocks.NewMockstorage", "ratelimit.ErrNotFound", "ratelimit.NewSingleThreadLimiter", "storage.EXPECT", "suite.Assert", "suite.Suite", "suite.T", "suite.mockController", "time.Second"], "header_context_minimal": "package ratelimit_test\nimport \"time\"\n// receiver: suite *singleThreadLimiterTestSuite", "summary_llm": "This code is a function in Go that takes two integers as input and returns their sum.", "keywords_llm": ["go", "function", "integers", "sum"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 36, "end_line": 54, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}\n", "n_tokens": 144, "primary_symbol": "TestSingleThreadLimiter_PeekNotEmpty", "primary_kind": "function", "primary_span": [36, 54], "def_symbols": ["TestSingleThreadLimiter_PeekNotEmpty"], "symbols": ["TestSingleThreadLimiter_PeekNotEmpty", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "ratelimit", "TokenBucket", "Used", "LastAccessTime", "time", "Now", "Limit", "Duration", "Second", "nil", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "Peek", "Assert", "Nil", "NotNil", "EqualValues"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_PeekNotEmpty", "package": "", "node_kind": "method", "receiver": "suite *singleThreadLimiterTestSuite", "function_name": "", "method_name": "TestSingleThreadLimiter_PeekNotEmpty", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Assert", "Duration", "EXPECT", "EqualValues", "Get", "LastAccessTime", "Limit", "NewMockstorage", "NewSingleThreadLimiter", "Nil", "NotNil", "Now", "Peek", "Return", "Second", "Start", "Stop", "TestSingleThreadLimiter_PeekNotEmpty", "TokenBucket", "Used", "l.Peek", "l.Start", "l.Stop", "mocks.NewMockstorage", "ratelimit.NewSingleThreadLimiter", "ratelimit.TokenBucket", "storage.EXPECT", "suite.Assert", "suite.mockController", "time.Now", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *singleThreadLimiterTestSuite", "summary_llm": "The function `TestSingleThreadLimiter_PeekNotEmpty` tests the `Peek` method of a single-thread limiter. It sets up a mock storage with initial token bucket values and verifies that `Peek` returns the correct number of used tokens without errors.", "keywords_llm": ["limiter", "peek", "test", "mockstorage", "tokenbucket", "usedtokens", "assertions", "singlethread", "starttime", "stoptime"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 55, "end_line": 74, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}\n", "n_tokens": 171, "primary_symbol": "TestSingleThreadLimiter_AcquireNewBucket", "primary_kind": "function", "primary_span": [55, 74], "def_symbols": ["TestSingleThreadLimiter_AcquireNewBucket"], "symbols": ["TestSingleThreadLimiter_AcquireNewBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "nil", "Set", "gomock", "Any", "time", "Second", "DoAndReturn", "arg0", "string", "arg1", "ratelimit", "TokenBucket", "arg2", "Duration", "error", "Assert", "Equal", "float64", "Used", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "Acquire", "Nil", "NotNil", "EqualValues"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireNewBucket", "package": "", "node_kind": "method", "receiver": "suite *singleThreadLimiterTestSuite", "function_name": "", "method_name": "TestSingleThreadLimiter_AcquireNewBucket", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "DoAndReturn", "Duration", "EXPECT", "Equal", "EqualValues", "Get", "NewMockstorage", "NewSingleThreadLimiter", "Nil", "NotNil", "Return", "Second", "Set", "Start", "Stop", "TestSingleThreadLimiter_AcquireNewBucket", "TokenBucket", "Used", "arg1.Used", "gomock.Any", "l.Acquire", "l.Start", "l.Stop", "mocks.NewMockstorage", "ratelimit.NewSingleThreadLimiter", "ratelimit.TokenBucket", "storage.EXPECT", "suite.Assert", "suite.mockController", "time.Duration", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *singleThreadLimiterTestSuite", "summary_llm": "This Go test function `TestSingleThreadLimiter_AcquireNewBucket` in `limiter_test.go` verifies the behavior of a single-threaded rate limiter. It sets up a mock storage to simulate bucket retrieval and updates, then tests acquiring a new bucket with expected values.", "keywords_llm": ["test", "single-threaded", "rate limiter", "mock storage", "acquire bucket", "assertions", "start", "stop", "used tokens"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 75, "end_line": 99, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\n", "n_tokens": 214, "primary_symbol": "TestSingleThreadLimiter_AcquireExistingBucket", "primary_kind": "function", "primary_span": [75, 99], "def_symbols": ["TestSingleThreadLimiter_AcquireExistingBucket"], "symbols": ["TestSingleThreadLimiter_AcquireExistingBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "ratelimit", "TokenBucket", "Used", "LastAccessTime", "time", "Now", "Limit", "Duration", "Second", "nil", "Set", "gomock", "Any", "DoAndReturn", "arg0", "string", "arg1", "arg2", "error", "Assert", "GreaterOrEqual", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "Acquire", "Nil", "NotNil", "Equal", "int64"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireExistingBucket", "package": "", "node_kind": "method", "receiver": "suite *singleThreadLimiterTestSuite", "function_name": "", "method_name": "TestSingleThreadLimiter_AcquireExistingBucket", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "DoAndReturn", "Duration", "EXPECT", "Equal", "Get", "GreaterOrEqual", "LastAccessTime", "Limit", "NewMockstorage", "NewSingleThreadLimiter", "Nil", "NotNil", "Now", "Return", "Second", "Set", "Start", "Stop", "TestSingleThreadLimiter_AcquireExistingBucket", "TokenBucket", "Used", "arg1.Used", "gomock.Any", "l.Acquire", "l.Start", "l.Stop", "mocks.NewMockstorage", "ratelimit.NewSingleThreadLimiter", "ratelimit.TokenBucket", "storage.EXPECT", "suite.Assert", "suite.mockController", "time.Duration", "time.Now", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *singleThreadLimiterTestSuite", "summary_llm": "The `TestSingleThreadLimiter_AcquireExistingBucket` function tests the acquisition of a token bucket from a storage mock. It verifies that an existing bucket is correctly retrieved and updated.", "keywords_llm": ["test", "ratelimit", "limiter", "singlethreadlimiter", "acquire", "tokenbucket", "storage", "mock", "assert", "start", "stop"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 100, "end_line": 119, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}\n", "n_tokens": 176, "primary_symbol": "TestSingleThreadLimiter_AcquireNNewBucket", "primary_kind": "function", "primary_span": [100, 119], "def_symbols": ["TestSingleThreadLimiter_AcquireNNewBucket"], "symbols": ["TestSingleThreadLimiter_AcquireNNewBucket", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "nil", "Set", "gomock", "Any", "time", "Second", "DoAndReturn", "arg0", "string", "arg1", "ratelimit", "TokenBucket", "arg2", "Duration", "error", "Assert", "Equal", "float64", "Used", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "AcquireN", "Nil", "NotNil", "EqualValues"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireNNewBucket", "package": "", "node_kind": "method", "receiver": "suite *singleThreadLimiterTestSuite", "function_name": "", "method_name": "TestSingleThreadLimiter_AcquireNNewBucket", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AcquireN", "Any", "Assert", "DoAndReturn", "Duration", "EXPECT", "Equal", "EqualValues", "Get", "NewMockstorage", "NewSingleThreadLimiter", "Nil", "NotNil", "Return", "Second", "Set", "Start", "Stop", "TestSingleThreadLimiter_AcquireNNewBucket", "TokenBucket", "Used", "arg1.Used", "gomock.Any", "l.AcquireN", "l.Start", "l.Stop", "mocks.NewMockstorage", "ratelimit.NewSingleThreadLimiter", "ratelimit.TokenBucket", "storage.EXPECT", "suite.Assert", "suite.mockController", "time.Duration", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *singleThreadLimiterTestSuite", "summary_llm": "The `TestSingleThreadLimiter_AcquireNNewBucket` function tests the `AcquireN` method of a single-threaded rate limiter. It sets up a mock storage, expects specific interactions with it, and verifies that the limiter successfully acquires tokens.", "keywords_llm": ["test", "singlethreadlimitertestsuite", "acquiren", "storage", "mocks.newmockstorage", "ratelimit.newsinglethreadlimiter", "start", "stop", "defer", "err", "assert", "nil", "notnil", "equalvalues"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 120, "end_line": 156, "text": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\n\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}\n", "n_tokens": 300, "primary_symbol": "TestSingleThreadLimiter_AcquireNExistingBucket", "primary_kind": "function", "primary_span": [120, 156], "def_symbols": ["TestSingleThreadLimiter_AcquireNExistingBucket", "TestSingleThreadLimiter_Reset"], "symbols": ["TestSingleThreadLimiter_AcquireNExistingBucket", "TestSingleThreadLimiter_Reset", "func", "suite", "singleThreadLimiterTestSuite", "storage", "mocks", "NewMockstorage", "mockController", "EXPECT", "Get", "test", "Return", "ratelimit", "TokenBucket", "Used", "LastAccessTime", "time", "Now", "Limit", "Duration", "Second", "nil", "Set", "gomock", "Any", "DoAndReturn", "arg0", "string", "arg1", "arg2", "error", "Assert", "GreaterOrEqual", "return", "NewSingleThreadLimiter", "Start", "defer", "Stop", "err", "AcquireN", "Nil", "NotNil", "Equal", "int64", "Delete", "Reset"], "doc_head": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\t\t\treturn nil\n\t\t})\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireNExistingBucket", "package": "", "node_kind": "method", "receiver": "suite *singleThreadLimiterTestSuite", "function_name": "", "method_name": "TestSingleThreadLimiter_AcquireNExistingBucket", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AcquireN", "Any", "Assert", "Delete", "DoAndReturn", "Duration", "EXPECT", "Equal", "Get", "GreaterOrEqual", "LastAccessTime", "Limit", "NewMockstorage", "NewSingleThreadLimiter", "Nil", "NotNil", "Now", "Reset", "Return", "Second", "Set", "Start", "Stop", "TestSingleThreadLimiter_AcquireNExistingBucket", "TestSingleThreadLimiter_Reset", "TokenBucket", "Used", "arg1.Used", "gomock.Any", "l.AcquireN", "l.Reset", "l.Start", "l.Stop", "mocks.NewMockstorage", "ratelimit.NewSingleThreadLimiter", "ratelimit.TokenBucket", "storage.EXPECT", "suite.Assert", "suite.mockController", "time.Duration", "time.Now", "time.Second"], "header_context_minimal": "package \nimport \"time\"\n// receiver: suite *singleThreadLimiterTestSuite", "summary_llm": "The Go code defines test functions for a single-thread limiter. `TestSingleThreadLimiter_AcquireNExistingBucket` tests acquiring multiple tokens from an existing bucket and checks the used token count and error. `TestSingleThreadLimiter_Reset` tests resetting a bucket in storage.", "keywords_llm": ["singlethreadlimitertestsuite", "acquiren", "storage", "tokenbucket", "ratelimit", "limiter", "newsinglethreadlimiter", "start", "stop", "mocks.newmockstorage", "delete", "reset"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go#7", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go", "rel_path": "pkg/ratelimit/limiter_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 157, "end_line": 160, "text": "func TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}\n", "n_tokens": 25, "primary_symbol": "TestSingleThreadLimiter", "primary_kind": "function", "primary_span": [157, 160], "def_symbols": ["TestSingleThreadLimiter"], "symbols": ["TestSingleThreadLimiter", "func", "testing", "suite", "Run", "new", "singleThreadLimiterTestSuite"], "doc_head": "func TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:TestSingleThreadLimiter", "package": "", "node_kind": "function", "receiver": "", "function_name": "TestSingleThreadLimiter", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Run", "T", "TestSingleThreadLimiter", "suite.Run", "testing.T"], "header_context_minimal": "package ", "summary_llm": "The code is a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' to any GET requests.", "keywords_llm": ["http", "server", "port", "8080", "get", "request", "response", "hello, world!", "net/http", "listenandserve"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go", "rel_path": "pkg/ratelimit/interfaces.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "package ratelimit\n\nimport \"context\"\n\ntype IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}\n", "n_tokens": 27, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 8], "def_symbols": [], "symbols": ["package", "ratelimit", "import", "context", "type", "IRateLimit", "interface", "Allow", "ctx", "Context", "key", "string", "bool"], "doc_head": "package ratelimit\nimport \"context\"\ntype IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:IRateLimit (interface)", "package": "ratelimit", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "IRateLimit", "type_kind": "interface", "imports_used_minimal": [], "symbols_referenced_strict": ["Allow", "Context", "IRateLimit", "context.Context"], "header_context_minimal": "package ratelimit", "summary_llm": "The `IRateLimit` interface defines a method `Allow` that takes a `context.Context` and a key string, returning a boolean indicating whether the action is allowed based on rate limiting criteria.", "keywords_llm": ["iratelimit", "allow", "context", "key", "bool", "rate limiting", "interface", "method"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go", "rel_path": "pkg/ratelimit/tokenbucket.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 48, "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\nvar (\n\tErrLimitReached = errors.New(\"limit reached\")\n)\n\ntype TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}\n\nfunc NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}\n\nfunc (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\n\treturn ErrLimitReached\n}\n\nfunc (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}\n", "n_tokens": 253, "primary_symbol": "NewTokenBucket", "primary_kind": "function", "primary_span": [19, 48], "def_symbols": ["NewTokenBucket", "Consume", "GetAdjustedUsage"], "symbols": ["NewTokenBucket", "Consume", "GetAdjustedUsage", "package", "ratelimit", "import", "errors", "time", "var", "ErrLimitReached", "New", "limit", "reached", "type", "TokenBucket", "struct", "Used", "float64", "LastAccessTime", "Time", "Limit", "Duration", "func", "duration", "return", "Now", "bucket", "count", "error", "now", "used", "nil", "Unix", "elapsed", "Sub", "back"], "doc_head": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\nvar (\n\tErrLimitReached = errors.New(\"limit reached\")\n)\ntype TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}\nfunc NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}\nfunc (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\treturn ErrLimitReached\n}\nfunc (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(bucket *TokenBucket).Consume", "package": "ratelimit", "node_kind": "method", "receiver": "bucket *TokenBucket", "function_name": "NewTokenBucket", "method_name": "Consume", "type_name": "TokenBucket", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Consume", "Duration", "ErrLimitReached", "GetAdjustedUsage", "LastAccessTime", "Limit", "New", "NewTokenBucket", "Now", "Sub", "Time", "TokenBucket", "Unix", "Used", "bucket.Duration", "bucket.GetAdjustedUsage", "bucket.LastAccessTime", "bucket.Limit", "bucket.Used", "errors.New", "now.Sub", "time.Duration", "time.Now", "time.Time"], "header_context_minimal": "package ratelimit\nimport \"time\"\n// receiver: bucket *TokenBucket", "summary_llm": "The Go code defines a `TokenBucket` struct and associated methods to manage rate limiting. The `Consume` method checks if the bucket can fulfill a request based on its limit and duration, adjusting usage accordingly.", "keywords_llm": ["tokenbucket", "rate limiting", "consume", "limit reached", "adjust usage", "last access time", "used", "duration", "new tokenbucket"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go", "rel_path": "pkg/ratelimit/storage_memcached.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 50, "text": "package ratelimit\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n\ntype MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}\n\nfunc NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}\n\nfunc (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}\n\nfunc (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}\n", "n_tokens": 294, "primary_symbol": "NewMemcachedStorage", "primary_kind": "function", "primary_span": [15, 50], "def_symbols": ["NewMemcachedStorage", "Get", "Set"], "symbols": ["NewMemcachedStorage", "Get", "Set", "package", "ratelimit", "import", "bytes", "encoding", "gob", "github", "com", "dropbox", "godropbox", "memcache", "time", "type", "MemcachedStorage", "struct", "client", "Client", "prefix", "string", "func", "return", "key", "TokenBucket", "error", "var", "err", "resp", "Status", "StatusNoError", "StatusKeyNotFound", "nil", "else", "Error", "bucket", "new", "dec", "NewDecoder", "NewBuffer", "Value", "Decode", "duration", "Duration", "buffer", "enc", "NewEncoder", "Encode", "item", "Item", "Key", "Bytes", "Expiration", "uint32", "Seconds"], "doc_head": "package ratelimit\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\ntype MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}\nfunc NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}\nfunc (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}\nfunc (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(ms *MemcachedStorage).Get", "package": "ratelimit", "node_kind": "method", "receiver": "ms *MemcachedStorage", "function_name": "NewMemcachedStorage", "method_name": "Get", "type_name": "MemcachedStorage", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Bytes", "Client", "Decode", "Duration", "Encode", "Error", "Expiration", "Get", "Item", "Key", "MemcachedStorage", "NewBuffer", "NewDecoder", "NewEncoder", "NewMemcachedStorage", "Seconds", "Set", "Status", "StatusKeyNotFound", "StatusNoError", "TokenBucket", "Value", "buffer.Bytes", "bytes.NewBuffer", "dec.Decode", "duration.Seconds", "enc.Encode", "github.com", "gob.NewDecoder", "gob.NewEncoder", "memcache.Client", "memcache.Item", "memcache.StatusKeyNotFound", "memcache.StatusNoError", "ms.client", "ms.prefix", "resp.Error", "resp.Status", "resp.Value", "time.Duration"], "header_context_minimal": "package ratelimit\nimport \"time\"\n// receiver: ms *MemcachedStorage", "summary_llm": "The code defines a `MemcachedStorage` struct with methods to get and set token buckets in memcache. The `Get` method retrieves a token bucket by key, while the `Set` method stores a token bucket in memcache with an expiration duration.", "keywords_llm": ["memcachedstorage", "get", "set", "tokenbucket", "client", "prefix", "expiration", "duration", "gob", "buffer", "item"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go", "rel_path": "pkg/ratelimit/storage_memcached.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 51, "end_line": 55, "text": "func (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}\n", "n_tokens": 29, "primary_symbol": "Delete", "primary_kind": "function", "primary_span": [51, 55], "def_symbols": ["Delete"], "symbols": ["Delete", "func", "MemcachedStorage", "key", "string", "error", "resp", "client", "prefix", "return", "Error"], "doc_head": "func (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(ms *MemcachedStorage).Delete", "package": "", "node_kind": "method", "receiver": "ms *MemcachedStorage", "function_name": "", "method_name": "Delete", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Delete", "Error", "MemcachedStorage", "ms.client", "ms.prefix", "resp.Error"], "header_context_minimal": "package \n// receiver: ms *MemcachedStorage", "summary_llm": "This Go code defines a simple HTTP server that listens on port 8080 and responds to GET requests with 'Hello, World!'", "keywords_llm": ["go language", "http server", "port 8080", "get request", "response 'hello, world!'", "net/http package", "listenandserve function", "handlerfunc type", "servehttp method"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go", "rel_path": "pkg/ratelimit/storage.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 43, "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\nvar (\n\tErrNotFound = errors.New(\"not found\")\n)\n\ntype Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}\n\ntype DummyStorage struct {\n\tdata map[string]*TokenBucket\n}\n\nfunc NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}\n\nfunc (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}\n\nfunc (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}\n\nfunc (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}\n", "n_tokens": 198, "primary_symbol": "NewDummyStorage", "primary_kind": "function", "primary_span": [22, 43], "def_symbols": ["NewDummyStorage", "Get", "Set", "Delete"], "symbols": ["NewDummyStorage", "Get", "Set", "Delete", "package", "ratelimit", "import", "errors", "time", "var", "ErrNotFound", "New", "not", "found", "type", "Storage", "interface", "key", "string", "TokenBucket", "error", "bucket", "expire", "Duration", "DummyStorage", "struct", "data", "map", "func", "return", "make", "nil", "delete"], "doc_head": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\nvar (\n\tErrNotFound = errors.New(\"not found\")\n)\ntype Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}\ntype DummyStorage struct {\n\tdata map[string]*TokenBucket\n}\nfunc NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}\nfunc (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}\nfunc (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}\nfunc (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(d *DummyStorage).Get", "package": "ratelimit", "node_kind": "method", "receiver": "d *DummyStorage", "function_name": "NewDummyStorage", "method_name": "Get", "type_name": "Storage", "type_kind": "interface", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Delete", "DummyStorage", "Duration", "ErrNotFound", "Get", "New", "NewDummyStorage", "Set", "Storage", "TokenBucket", "d.data", "errors.New", "time.Duration"], "header_context_minimal": "package ratelimit\nimport \"time\"\n// receiver: d *DummyStorage", "summary_llm": "This Go code defines a rate limiting storage system using a dummy in-memory map. It includes a `Storage` interface with methods for getting, setting, and deleting token buckets.", "keywords_llm": ["storage", "interface", "get", "set", "delete", "token bucket", "dummy storage", "map", "errors"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar (\n\tErrKeyEmpty     = errors.New(\"key cannot be empty\")\n\tErrCountZero    = errors.New(\"count should be greater than zero\")\n\tErrLimitZero    = errors.New(\"limit should be greater than zero\")\n\tErrCountLimit   = errors.New(\"limit should be greater than count\")\n\tErrZeroDuration = errors.New(\"duration cannot be zero\")\n)\n\n//go:generate /go/bin/mockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\ntype (\n\tlimiter interface {\n\t\tPeek(string) (int64, error)\n\t\tAcquireN(string, int64) (int64, error)\n\t\tAcquire(string) (int64, error)\n\t\tReset(string) error\n\t}\n\tstorage interface {\n\t\tGet(string) (*TokenBucket, error)\n\t\tSet(string, *TokenBucket, time.Duration) error\n\t\tDelete(string) error\n\t}\n)\n\ntype SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}\n\nfunc NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}\n", "n_tokens": 301, "primary_symbol": "NewSingleThreadLimiter", "primary_kind": "function", "primary_span": [41, 44], "def_symbols": ["NewSingleThreadLimiter"], "symbols": ["NewSingleThreadLimiter", "package", "ratelimit", "import", "errors", "math", "strings", "time", "var", "ErrKeyEmpty", "New", "key", "cannot", "empty", "ErrCountZero", "count", "should", "greater", "than", "zero", "ErrLimitZero", "limit", "ErrCountLimit", "ErrZeroDuration", "duration", "generate", "bin", "mockgen", "source", "limiter", "destination", "mocks", "limiter_mocks", "type", "interface", "Peek", "string", "int64", "error", "AcquireN", "Acquire", "Reset", "storage", "Get", "TokenBucket", "Set", "Duration", "Delete", "SingleThreadLimiter", "struct", "reqChan", "chan", "request", "stopChan", "bool", "func", "return", "make"], "doc_head": "package ratelimit\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\nvar (\n\tErrKeyEmpty     = errors.New(\"key cannot be empty\")\n\tErrCountZero    = errors.New(\"count should be greater than zero\")\n\tErrLimitZero    = errors.New(\"limit should be greater than zero\")\n\tErrCountLimit   = errors.New(\"limit should be greater than count\")\n\tErrZeroDuration = errors.New(\"duration cannot be zero\")\n)\n//go:generate /go/bin/mockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\ntype (\n\tlimiter interface {\n\t\tPeek(string) (int64, error)\n\t\tAcquireN(string, int64) (int64, error)\n\t\tAcquire(string) (int64, error)\n\t\tReset(string) error\n\t}\n\tstorage interface {\n\t\tGet(string) (*TokenBucket, error)\n\t\tSet(string, *TokenBucket, time.Duration) error\n\t\tDelete(string) error\n\t}\n)\ntype SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}\nfunc NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewSingleThreadLimiter", "package": "ratelimit", "node_kind": "function", "receiver": "", "function_name": "NewSingleThreadLimiter", "method_name": "", "type_name": "SingleThreadLimiter", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Acquire", "AcquireN", "Delete", "Duration", "ErrCountLimit", "ErrCountZero", "ErrKeyEmpty", "ErrLimitZero", "ErrZeroDuration", "Get", "New", "NewSingleThreadLimiter", "Peek", "Reset", "Set", "SingleThreadLimiter", "TokenBucket", "errors.New", "limiter.go", "limiter_mocks.go", "time.Duration"], "header_context_minimal": "package ratelimit\nimport \"time\"", "summary_llm": "This Go code defines a rate limiting mechanism using the SingleThreadLimiter struct and implements the limiter interface. It includes methods for acquiring tokens, resetting, and peeking at token counts.", "keywords_llm": ["limiter", "singlethreadlimiter", "acquiren", "acquire", "reset", "peek", "storage", "reqchan", "stopchan", "limit", "duration"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 105, "text": "func (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}\n\nfunc (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}\n\nfunc (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\n\nfunc (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}\n\nfunc (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\n\nfunc (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.err\n}\n", "n_tokens": 308, "primary_symbol": "Start", "primary_kind": "function", "primary_span": [45, 105], "def_symbols": ["Start", "Stop", "AcquireN", "Acquire", "Peek", "Reset"], "symbols": ["Start", "Stop", "AcquireN", "Acquire", "Peek", "Reset", "func", "SingleThreadLimiter", "serve", "stopChan", "true", "key", "string", "count", "int64", "error", "err", "checkAcquireArgs", "limit", "duration", "nil", "return", "req", "request", "ACQUIRE", "make", "chan", "response", "reqChan", "res", "used", "PEEK", "RESET"], "doc_head": "func (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}\nfunc (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}\nfunc (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\nfunc (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}\nfunc (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}\nfunc (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(l *SingleThreadLimiter).Start", "package": "", "node_kind": "method", "receiver": "l *SingleThreadLimiter", "function_name": "", "method_name": "Start", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["ACQUIRE", "Acquire", "AcquireN", "PEEK", "Peek", "RESET", "Reset", "SingleThreadLimiter", "Start", "Stop", "l.AcquireN", "l.duration", "l.limit", "l.reqChan", "l.serve", "l.stopChan", "req.response", "res.err", "res.used"], "header_context_minimal": "package \n// receiver: l *SingleThreadLimiter", "summary_llm": "The code defines a `SingleThreadLimiter` struct with methods to control rate limiting. It includes functionality to start and stop the limiter, acquire permits (`Acquire`, `AcquireN`), peek at permit availability (`Peek`), and reset permits (`Reset`).", "keywords_llm": ["limiter", "start", "stop", "acquire", "acquiren", "peek", "reset", "singlethreadlimiter", "serve", "request", "response", "channel"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 106, "end_line": 163, "text": "func (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n\n\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treq.response <- response{usage(bucket.Used), nil}\n\t\t\tdefault:\n\t\t\t\treq.response <- response{0, errors.New(\"undefined method\")}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}\n", "n_tokens": 364, "primary_symbol": "serve", "primary_kind": "function", "primary_span": [106, 163], "def_symbols": ["serve"], "symbols": ["serve", "func", "SingleThreadLimiter", "for", "select", "case", "stopChan", "return", "req", "reqChan", "switch", "action", "PEEK", "bucket", "err", "storage", "Get", "key", "nil", "response", "continue", "ErrNotFound", "now", "time", "Now", "usage", "GetAdjustedUsage", "RESET", "Delete", "ACQUIRE", "count", "limit", "float64", "duration", "NewTokenBucket", "else", "Limit", "Duration", "Consume", "Used", "Set", "default", "errors", "New", "undefined", "method"], "doc_head": "func (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\t", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(l *SingleThreadLimiter).serve", "package": "", "node_kind": "method", "receiver": "l *SingleThreadLimiter", "function_name": "", "method_name": "serve", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["ACQUIRE", "Consume", "Delete", "Duration", "ErrNotFound", "Get", "GetAdjustedUsage", "Limit", "New", "NewTokenBucket", "Now", "PEEK", "RESET", "Set", "SingleThreadLimiter", "Used", "bucket.Consume", "bucket.Duration", "bucket.GetAdjustedUsage", "bucket.Limit", "bucket.Used", "errors.New", "l.reqChan", "l.stopChan", "l.storage", "req.action", "req.count", "req.duration", "req.key", "req.limit", "req.response", "time.Now"], "header_context_minimal": "package \nimport \"time\"\n// receiver: l *SingleThreadLimiter", "summary_llm": "This Go code defines a `SingleThreadLimiter` struct with methods to handle rate limiting requests. It uses channels (`reqChan`, `stopChan`) for communication and a storage interface for persisting token buckets.", "keywords_llm": ["limiter", "rate", "tokenbucket", "storage", "concurrency", "channel", "select", "response"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go", "rel_path": "pkg/ratelimit/limiter.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 164, "end_line": 203, "text": "func checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}\n\ntype response struct {\n\tused int64\n\terr  error\n}\n\nconst (\n\tPEEK = iota\n\tACQUIRE\n\tRESET\n)\n\ntype request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}\n\nfunc usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}\n", "n_tokens": 172, "primary_symbol": "checkAcquireArgs", "primary_kind": "function", "primary_span": [164, 203], "def_symbols": ["checkAcquireArgs", "usage"], "symbols": ["checkAcquireArgs", "usage", "func", "key", "string", "count", "limit", "int64", "duration", "time", "Duration", "error", "switch", "true", "case", "len", "strings", "TrimSpace", "return", "ErrKeyEmpty", "ErrCountZero", "ErrLimitZero", "ErrCountLimit", "ErrZeroDuration", "nil", "type", "response", "struct", "used", "err", "const", "PEEK", "iota", "ACQUIRE", "RESET", "request", "action", "int", "chan", "float64", "math", "Ceil"], "doc_head": "func checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}\ntype response struct {\n\tused int64\n\terr  error\n}\nconst (\n\tPEEK = iota\n\tACQUIRE\n\tRESET\n)\ntype request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}\nfunc usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:checkAcquireArgs", "package": "", "node_kind": "function", "receiver": "", "function_name": "checkAcquireArgs", "method_name": "", "type_name": "response", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["ACQUIRE", "Ceil", "Duration", "ErrCountLimit", "ErrCountZero", "ErrKeyEmpty", "ErrLimitZero", "ErrZeroDuration", "PEEK", "RESET", "TrimSpace", "math.Ceil", "strings.TrimSpace", "time.Duration"], "header_context_minimal": "package \nimport \"time\"", "summary_llm": "This Go code defines functions to validate arguments for acquiring a rate limit. It includes error handling for key and count values.", "keywords_llm": ["checkacquireargs", "errkeyempty", "errcountzero", "duration", "time.duration", "peek", "acquire", "reset", "usage", "math.ceil"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 42, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: limiter.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tratelimit \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// Mocklimiter is a mock of limiter interface.\ntype Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}\n\n// MocklimiterMockRecorder is the mock recorder for Mocklimiter.\ntype MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}\n\n// NewMocklimiter creates a new mock instance.\nfunc NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 268, "primary_symbol": "NewMocklimiter", "primary_kind": "function", "primary_span": [32, 42], "def_symbols": ["NewMocklimiter", "EXPECT"], "symbols": ["NewMocklimiter", "EXPECT", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "limiter", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "limiter_mocks", "package", "Package", "GoMock", "import", "reflect", "time", "ratelimit", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "gomock", "uber", "org", "mock", "Mocklimiter", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MocklimiterMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: limiter.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=limiter.go -destination=mocks/limiter_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\treflect \"reflect\"\n\ttime \"time\"\n\tratelimit \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// Mocklimiter is a mock of limiter interface.\ntype Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}\n// MocklimiterMockRecorder is the mock recorder for Mocklimiter.\ntype MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}\n// NewMocklimiter creates a new mock instance.\nfunc NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *Mocklimiter).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *Mocklimiter", "function_name": "NewMocklimiter", "method_name": "EXPECT", "type_name": "Mocklimiter", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Code", "Controller", "DO", "EDIT", "EXPECT", "Generated", "GoMock", "MockGen", "Mocklimiter", "MocklimiterMockRecorder", "NOT", "NewMocklimiter", "Package", "Source", "go.impalastudios", "go.uber", "gomock.Controller", "limiter.go", "limiter_mocks.go", "m.recorder", "mock.recorder"], "header_context_minimal": "package mocks\n// receiver: m *Mocklimiter", "summary_llm": "This Go code defines a function that takes two integers as input, adds them together, and returns the result.", "keywords_llm": ["go", "function", "integers", "addition", "return"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#2", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 43, "end_line": 66, "text": "// Acquire mocks base method.\nfunc (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}\n\n// AcquireN mocks base method.\nfunc (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 243, "primary_symbol": "Acquire", "primary_kind": "function", "primary_span": [44, 66], "def_symbols": ["Acquire", "AcquireN"], "symbols": ["Acquire", "AcquireN", "mocks", "base", "method", "func", "Mocklimiter", "arg0", "string", "int64", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MocklimiterMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "arg1"], "doc_head": "// Acquire mocks base method.\nfunc (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}\n// AcquireN mocks base method.\nfunc (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *Mocklimiter).Acquire", "package": "", "node_kind": "method", "receiver": "m *Mocklimiter", "function_name": "", "method_name": "Acquire", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Acquire", "AcquireN", "Call", "Helper", "Mocklimiter", "MocklimiterMockRecorder", "RecordCallWithMethodType", "T", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: m *Mocklimiter", "summary_llm": "The Go code defines mocks for a `Mocklimiter` type with methods `Acquire` and `AcquireN`. These methods simulate the behavior of acquiring resources with rate limiting. The `AcquireMockRecorder` struct records calls to these methods.", "keywords_llm": ["mocklimiter", "acquire", "acquiren", "mockrecorder", "call", "methodtype", "helper", "reflect.typeof", "gomock.call", "ctrl.recordcallwithmethodtype"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#3", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 67, "end_line": 95, "text": "// AcquireN indicates an expected call of AcquireN.\nfunc (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}\n\n// Peek mocks base method.\nfunc (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Peek indicates an expected call of Peek.\nfunc (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}\n\n// Reset mocks base method.\nfunc (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 286, "primary_symbol": "AcquireN", "primary_kind": "function", "primary_span": [68, 95], "def_symbols": ["AcquireN", "Peek", "Reset"], "symbols": ["AcquireN", "Peek", "Reset", "indicates", "expected", "call", "func", "MocklimiterMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocklimiter", "nil", "mocks", "base", "method", "string", "int64", "error", "ret", "ret0", "ret1"], "doc_head": "// AcquireN indicates an expected call of AcquireN.\nfunc (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}\n// Peek mocks base method.\nfunc (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Peek indicates an expected call of Peek.\nfunc (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}\n// Reset mocks base method.\nfunc (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(mr *MocklimiterMockRecorder).AcquireN", "package": "", "node_kind": "method", "receiver": "mr *MocklimiterMockRecorder", "function_name": "", "method_name": "AcquireN", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["AcquireN", "Call", "Helper", "Mocklimiter", "MocklimiterMockRecorder", "Peek", "RecordCallWithMethodType", "Reset", "T", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: mr *MocklimiterMockRecorder", "summary_llm": "This Go code defines methods for mocking a `Mocklimiter` type and its recorder. It includes expected call indicators for `AcquireN` and `Peek`, as well as mock implementations for these methods.", "keywords_llm": ["mock", "recorder", "acquiren", "peek", "expected call", "method type", "helper", "call with method type", "reset", "string", "error"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#4", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 96, "end_line": 132, "text": "// Reset indicates an expected call of Reset.\nfunc (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}\n\n// Mockstorage is a mock of storage interface.\ntype Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}\n\n// MockstorageMockRecorder is the mock recorder for Mockstorage.\ntype MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}\n\n// NewMockstorage creates a new mock instance.\nfunc NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}\n\n// Delete mocks base method.\nfunc (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 264, "primary_symbol": "Reset", "primary_kind": "function", "primary_span": [97, 132], "def_symbols": ["Reset", "NewMockstorage", "EXPECT", "Delete"], "symbols": ["Reset", "NewMockstorage", "EXPECT", "Delete", "indicates", "expected", "call", "func", "MocklimiterMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mocklimiter", "nil", "Mockstorage", "storage", "interface", "type", "struct", "Controller", "recorder", "MockstorageMockRecorder", "the", "for", "creates", "new", "instance", "returns", "object", "that", "allows", "caller", "indicate", "use", "mocks", "base", "method", "string", "error", "ret", "ret0"], "doc_head": "// Reset indicates an expected call of Reset.\nfunc (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}\n// Mockstorage is a mock of storage interface.\ntype Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}\n// MockstorageMockRecorder is the mock recorder for Mockstorage.\ntype MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}\n// NewMockstorage creates a new mock instance.\nfunc NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}\n// Delete mocks base method.\nfunc (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(mr *MocklimiterMockRecorder).Reset", "package": "", "node_kind": "method", "receiver": "mr *MocklimiterMockRecorder", "function_name": "NewMockstorage", "method_name": "Reset", "type_name": "Mockstorage", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Controller", "Delete", "EXPECT", "Helper", "Mocklimiter", "MocklimiterMockRecorder", "Mockstorage", "MockstorageMockRecorder", "NewMockstorage", "RecordCallWithMethodType", "Reset", "T", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: mr *MocklimiterMockRecorder", "summary_llm": "This Go code defines mock implementations for a `Mocklimiter` and `Mockstorage` interface using the `gomock` library. The `Reset` method in `MocklimiterMockRecorder` records an expected call to the `Reset` method of `Mocklimiter`. The `Mockstorage` type has methods like `EXPECT` and `Delete`, with mock recorders for verification.", "keywords_llm": ["mocklimiter", "mockstorage", "gomock", "reset", "delete", "controller", "recorder", "call", "helper", "methodtype"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#5", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 133, "end_line": 161, "text": "// Delete indicates an expected call of Delete.\nfunc (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}\n\n// Get mocks base method.\nfunc (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}\n\n// Set mocks base method.\nfunc (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 287, "primary_symbol": "Delete", "primary_kind": "function", "primary_span": [134, 161], "def_symbols": ["Delete", "Get", "Set"], "symbols": ["Delete", "Get", "Set", "indicates", "expected", "call", "func", "MockstorageMockRecorder", "arg0", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockstorage", "nil", "mocks", "base", "method", "string", "ratelimit", "TokenBucket", "error", "ret", "ret0", "ret1", "arg1", "arg2", "time", "Duration"], "doc_head": "// Delete indicates an expected call of Delete.\nfunc (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}\n// Get mocks base method.\nfunc (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}\n// Set mocks base method.\nfunc (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(mr *MockstorageMockRecorder).Delete", "package": "", "node_kind": "method", "receiver": "mr *MockstorageMockRecorder", "function_name": "", "method_name": "Delete", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Call", "Delete", "Duration", "Get", "Helper", "Mockstorage", "MockstorageMockRecorder", "RecordCallWithMethodType", "Set", "T", "T.Helper", "TokenBucket", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "ratelimit.TokenBucket", "reflect.TypeOf", "time.Duration"], "header_context_minimal": "package \nimport \"time\"\n// receiver: mr *MockstorageMockRecorder", "summary_llm": "The code defines methods and recorders for a mock storage implementation in Go. It includes `Delete`, `Get`, and `Set` methods for interacting with token buckets and managing them, as well as corresponding recorder methods to mock these calls.", "keywords_llm": ["mock", "storage", "limiter", "tokenbucket", "delete", "get", "set", "gomock", "call", "helper", "reflect", "typeof"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go#6", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go", "rel_path": "pkg/ratelimit/mocks/limiter_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 162, "end_line": 167, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}\n", "n_tokens": 77, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [163, 167], "def_symbols": ["Set"], "symbols": ["Set", "indicates", "expected", "call", "func", "MockstorageMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockstorage", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(mr *MockstorageMockRecorder).Set", "package": "", "node_kind": "method", "receiver": "mr *MockstorageMockRecorder", "function_name": "", "method_name": "Set", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Call", "Helper", "Mockstorage", "MockstorageMockRecorder", "RecordCallWithMethodType", "Set", "T", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package \n// receiver: mr *MockstorageMockRecorder", "summary_llm": "The `Set` method in the `MockstorageMockRecorder` struct records an expected call to the `Set` method of the `Mockstorage` interface with specific arguments. It uses the `RecordCallWithMethodType` function from the `gomock` package to achieve this.", "keywords_llm": ["mock", "recorder", "set", "expected call", "method type", "arguments", "record call", "reflection", "interface", "helper", "ctrl"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go", "rel_path": "pkg/aws/config.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "package aws\n\nimport (\n\t\"context\"\n\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\tawsConfig \"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\n\nfunc GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {\n\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\n\treturn cfg\n}\n", "n_tokens": 275, "primary_symbol": "GetConfig", "primary_kind": "function", "primary_span": [11, 44], "def_symbols": ["GetConfig"], "symbols": ["GetConfig", "package", "aws", "import", "context", "awsSdk", "github", "com", "sdk", "awsConfig", "config", "credentials", "func", "accessKey", "secretKey", "sessionToken", "string", "reg", "endpoint", "Config", "endpointResolver", "EndpointResolverWithOptionsFunc", "service", "region", "options", "interface", "Endpoint", "error", "return", "PartitionID", "URL", "SigningRegion", "nil", "EndpointNotFoundError", "optFns", "LoadOptions", "WithEndpointResolverWithOptions", "append", "WithCredentialsProvider", "NewStaticCredentialsProvider", "cfg", "err", "LoadDefaultConfig", "TODO"], "doc_head": "package aws\nimport (\n\t\"context\"\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\tawsConfig \"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\nfunc GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {\n\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\treturn cfg\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:GetConfig", "package": "aws", "node_kind": "function", "receiver": "", "function_name": "GetConfig", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Config", "Endpoint", "EndpointNotFoundError", "EndpointResolverWithOptionsFunc", "GetConfig", "LoadDefaultConfig", "LoadOptions", "NewStaticCredentialsProvider", "PartitionID", "SigningRegion", "TODO", "URL", "WithCredentialsProvider", "WithEndpointResolverWithOptions", "awsConfig.LoadDefaultConfig", "awsConfig.LoadOptions", "awsConfig.WithCredentialsProvider", "awsConfig.WithEndpointResolverWithOptions", "awsSdk.Config", "awsSdk.Endpoint", "awsSdk.EndpointNotFoundError", "awsSdk.EndpointResolverWithOptionsFunc", "context.TODO", "credentials.NewStaticCredentialsProvider", "github.com"], "header_context_minimal": "package aws", "summary_llm": "The `GetConfig` function in the AWS package configures and loads an AWS SDK configuration with specified access credentials and endpoint options.", "keywords_llm": ["aws", "config", "credentials", "endpoint", "accesskey", "secretkey", "sessiontoken", "region", "context.todo", "loaddefaultconfig", "withcredentialsprovider", "newstaticcredentialsprovider"]}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go#1", "repo_id": "crunding-weather_foreca_proxy_service-8aae91880849", "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go", "rel_path": "pkg/aws/client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 15, "text": "package aws\n\nimport (\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\n\nfunc NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}\n\nfunc NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}\n", "n_tokens": 111, "primary_symbol": "NewDynamoDbClientFromConfig", "primary_kind": "function", "primary_span": [8, 15], "def_symbols": ["NewDynamoDbClientFromConfig", "NewDynamoDbClient"], "symbols": ["NewDynamoDbClientFromConfig", "NewDynamoDbClient", "package", "aws", "import", "awsSdk", "github", "com", "sdk", "service", "dynamodb", "func", "cfg", "Config", "Client", "return", "NewFromConfig", "accessKey", "secretKey", "sessionToken", "string", "region", "endpoint", "GetConfig"], "doc_head": "package aws\nimport (\n\tawsSdk \"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\nfunc NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}\nfunc NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewDynamoDbClientFromConfig", "package": "aws", "node_kind": "function", "receiver": "", "function_name": "NewDynamoDbClientFromConfig", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": ["Client", "Config", "GetConfig", "NewDynamoDbClient", "NewDynamoDbClientFromConfig", "NewFromConfig", "awsSdk.Config", "dynamodb.Client", "dynamodb.NewFromConfig", "github.com"], "header_context_minimal": "package aws", "summary_llm": "This Go code defines functions to create DynamoDB clients from configurations. `NewDynamoDbClientFromConfig` takes an AWS SDK config and returns a DynamoDB client. `NewDynamoDbClient` uses helper functions to generate a config based on access key, secret key, session token, region, and endpoint.", "keywords_llm": ["aws", "dynamodb", "client", "config", "accesskey", "secretkey", "sessiontoken", "region", "endpoint"]}
