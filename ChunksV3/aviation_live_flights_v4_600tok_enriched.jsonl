{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "main.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package main\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "main"], "doc_head": "package main", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "main", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package main", "summary_en": "Main package with a single function, though its purpose is not clear from the provided code", "keywords_en": ["package main", "purpose unclear", "single function"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:14.426472", "file_synopsis_hash": "e6eb8fa37a60a3e2", "chunk_text_hash": "df1d036cbbf3df46", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "main.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 6, "text": "import (\n\t\"go.impalastudios.com/aviation/liveflights/cmd\"\n)\n", "n_tokens": 18, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 6], "def_symbols": [], "symbols": ["import", "impalastudios", "com", "aviation", "liveflights", "cmd"], "doc_head": "import (\n\t\"go.impalastudios.com/aviation/liveflights/cmd\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "main", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package main", "summary_en": "This code imports the 'cmd' package from a Go module for live flights", "keywords_en": ["go package import", "live flights", "module cmd"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:19.438625", "file_synopsis_hash": "e6eb8fa37a60a3e2", "chunk_text_hash": "f7cc1caca850c9d2", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "main.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go", "rel_path": "main.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 7, "end_line": 12, "text": "func main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "n_tokens": 23, "primary_symbol": "main", "primary_kind": "function", "primary_span": [7, 12], "def_symbols": [], "symbols": ["main", "func", "err", "cmd", "RunRootCmd", "nil", "panic"], "doc_head": "func main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:main/complete", "package": "main", "node_kind": "function", "receiver": "", "function_name": "main", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["main"], "all_kinds": ["function"], "all_ast_paths": ["go:function:main/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [75], "all_end_bytes": [148], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/cmd"], "symbols_referenced_strict": ["RunRootCmd", "cmd.RunRootCmd"], "header_context_minimal": "package main\nimport \"go.impalastudios.com/aviation/liveflights/cmd\"", "summary_en": "Runs the root command and panics on error", "keywords_en": ["command execution", "error handling", "root command"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:21.795357", "file_synopsis_hash": "e6eb8fa37a60a3e2", "chunk_text_hash": "43471dbc716bf874", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/main.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package cmd\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "cmd"], "doc_head": "package cmd", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cmd", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cmd", "summary_en": "This package contains command-line interface functions for managing user data", "keywords_en": ["command line interface", "data handling", "error reporting", "input validation", "output formatting", "user management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:21.802874", "file_synopsis_hash": "d15828ae8dc1f3c4", "chunk_text_hash": "9c78355c4da37df8", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 14, "text": "import (\n\t\"go.impalastudios.com/aviation/liveflights/cmd/data_processor\"\n\t\"strings\"\n\t\"time\"\n\n\t\"go.impalastudios.com/aviation/liveflights/cmd/scraper\"\n\t\"go.impalastudios.com/aviation/liveflights/cmd/serve\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n", "n_tokens": 79, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 14], "def_symbols": [], "symbols": ["import", "impalastudios", "com", "aviation", "liveflights", "cmd", "data_processor", "strings", "time", "scraper", "serve", "github", "spf13", "cobra", "viper"], "doc_head": "import (\n\t\"go.impalastudios.com/aviation/liveflights/cmd/data_processor\"\n\t\"strings\"\n\t\"time\"\n\t\"go.impalastudios.com/aviation/liveflights/cmd/scraper\"\n\t\"go.impalastudios.com/aviation/liveflights/cmd/serve\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cmd", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cmd", "summary_en": "Initializes and manages command-line interface for live flight data processing", "keywords_en": ["command line interface", "data processor", "flight data", "live processing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:24.898078", "file_synopsis_hash": "d15828ae8dc1f3c4", "chunk_text_hash": "6f15e3dd33f748e4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go", "rel_path": "cmd/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 15, "end_line": 59, "text": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"liveflights\",\n\t\tShort:   \"[Aviation] Live Flights Service\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\tcmd.AddCommand(scraper.New())\n\tcmd.AddCommand(data_processor.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Aviation] Live Flights\", \"The application name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"Whether to use path style URLs when calling S3 APIs.\")\n\n\tcmd.PersistentFlags().String(\"mongodb.name\", \"live_flights\", \"DB name for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.host\", \"localhost\", \"Host name for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.user\", \"root\", \"User for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.password\", \"example\", \"Password for the database\")\n\tcmd.PersistentFlags().Int(\"mongodb.port\", 27019, \"Port for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.replica-set\", \"rs0\", \"Replica set name for the database\")\n\tcmd.PersistentFlags().String(\"mongodb.uri\", \"\", \"URI for the database\")\n\n\tcmd.PersistentFlags().String(\"cache.host\", \"localhost\", \"The cache host.\")\n\tcmd.PersistentFlags().Int(\"cache.port\", 6379, \"The cache port.\")\n\tcmd.PersistentFlags().String(\"cache.user\", \"default\", \"The cache user.\")\n\tcmd.PersistentFlags().String(\"cache.password\", \"\", \"The cache password.\")\n\tcmd.PersistentFlags().Duration(\"cache.ttl.default\", 7*(24*time.Hour), \"The default ttl for cache items.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}\n", "n_tokens": 527, "primary_symbol": "RunRootCmd", "primary_kind": "function", "primary_span": [16, 59], "def_symbols": [], "symbols": ["RunRootCmd", "entrypoint", "the", "root", "command", "func", "error", "viper", "AutomaticEnv", "SetEnvKeyReplacer", "strings", "NewReplacer", "cmd", "cobra", "Command", "Use", "liveflights", "Short", "Aviation", "Live", "Flights", "Service", "Version", "AddCommand", "serve", "New", "scraper", "data_processor", "PersistentFlags", "Bool", "logging", "debug", "false", "Whether", "emit", "level", "logs", "not", "String", "encoding", "json", "The", "log", "strategy", "StringP", "app", "name", "application", "aws", "access", "key", "AWS", "secret", "session", "token", "endpoint", "url", "region", "use", "path", "style", "URLs", "when", "calling", "APIs", "mongodb", "live_flights", "for", "database", "host", "localhost", "Host", "user", "User", "password", "example", "Password", "Int", "port", "Port", "replica", "set", "rs0", "Replica", "uri", "URI", "cache", "default", "Duration", "ttl", "time", "Hour", "items", "BindPFlags", "return", "Execute"], "doc_head": "// RunRootCmd entrypoint of the root command\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\tcmd := &cobra.Command{\n\t\tUse:     \"liveflights\",\n\t\tShort:   \"[Aviation] Live Flights Service\",\n\t\tVersion: \"1.0.0\",\n\t}\n\tcmd.AddCommand(serve.New())\n\tcmd.AddCommand(scraper.New())\n\tcmd.AddCommand(data_processor.New())\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Aviation] Live Flights\", \"The application name.\")\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\tcmd.PersistentFlags().Bool(\"aws.s3.use-path-style\", false, \"Whether to use path style URLs when calling S3 APIs.\")", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:RunRootCmd/complete", "package": "cmd", "node_kind": "function", "receiver": "", "function_name": "RunRootCmd", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["RunRootCmd"], "all_kinds": ["function"], "all_ast_paths": ["go:function:RunRootCmd/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [319], "all_end_bytes": [2510], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["github.com/spf13/cobra", "github.com/spf13/viper", "go.impalastudios.com/aviation/liveflights/cmd/data_processor", "go.impalastudios.com/aviation/liveflights/cmd/scraper", "go.impalastudios.com/aviation/liveflights/cmd/serve", "strings", "time"], "symbols_referenced_strict": ["AddCommand", "AutomaticEnv", "BindPFlags", "Bool", "Command", "Duration", "Execute", "Hour", "Int", "New", "NewReplacer", "PersistentFlags", "RunRootCmd", "SetEnvKeyReplacer", "Short", "String", "StringP", "Version", "cmd.AddCommand", "cmd.Execute", "cmd.PersistentFlags", "cobra.Command", "data_processor.New", "scraper.New", "serve.New", "strings.NewReplacer", "time.Hour", "viper.AutomaticEnv", "viper.BindPFlags", "viper.SetEnvKeyReplacer"], "header_context_minimal": "package cmd\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n    \"go.impalastudios.com/aviation/liveflights/cmd/data_processor\"\n    \"go.impalastudios.com/aviation/liveflights/cmd/scraper\"\n    \"go.impalastudios.com/aviation/liveflights/cmd/serve\"\n)", "summary_en": "Initializes root command for Live Flights Service with subcommands and persistent flags", "keywords_en": ["aws credentials", "cobra command", "flag management", "logging configuration", "subcommand setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:24.902816", "file_synopsis_hash": "d15828ae8dc1f3c4", "chunk_text_hash": "7d91017d7b1b917a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/root.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package scraper\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "scraper"], "doc_head": "package scraper", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "scraper", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package scraper", "summary_en": "manages scraping tasks, handles errors", "keywords_en": ["error handling", "scraping management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:26.984076", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "29103c7421f69be9", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 23, "text": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\tradarboxtcp \"go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)\n", "n_tokens": 199, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 23], "def_symbols": [], "symbols": ["import", "context", "github", "com", "cockroachdb", "errors", "spf13", "cobra", "viper", "mongoadapter", "impalastudios", "aviation", "liveflights", "internal", "adapters", "mongodb", "radarboxtcp", "radarbox_tcp", "core", "pkg", "xmongodb", "grpc", "dnssrvresolver", "log", "xotel", "otel", "opentelemetry", "propagation", "uber", "org", "zap", "google", "golang", "resolver", "signal", "time"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\tradarboxtcp \"go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "scraper", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package scraper", "summary_en": "Sets up a live flight scraping application with MongoDB and gRPC", "keywords_en": ["error handling", "grpc setup", "mongodb adapter", "otel tracing", "signal handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:30.575702", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "eb3c446d0d0877c4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 24, "end_line": 45, "text": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"scrape\",\n\t\tShort: \"Scrape radarbox data and persist\",\n\t\tLong:  \"Scrapes radarbox data through TCP client and persists the data in a database\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runScrape,\n\t}\n\n\tcmd.PersistentFlags().String(\"radarbox.host\", \"\", \"Radarbox TCP host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.host\", \"\", \"Radarbox SSH host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.private-key\", \"\", \"Radarbox SSH private key\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.user\", \"impala\", \"Radarbox SSH user\")\n\n\tcmd.PersistentFlags().Duration(\"services.scraper.batch_store_interval\", 5*time.Minute, \"The duration between each flush of scraped batches of data.\")\n\n\treturn cmd\n}\n", "n_tokens": 225, "primary_symbol": "New", "primary_kind": "function", "primary_span": [25, 45], "def_symbols": [], "symbols": ["New", "creates", "new", "scrape", "command", "func", "cobra", "Command", "cmd", "Use", "Short", "Scrape", "radarbox", "data", "and", "persist", "Long", "Scrapes", "through", "TCP", "client", "persists", "the", "database", "PreRunE", "args", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runScrape", "PersistentFlags", "String", "host", "Radarbox", "ssh", "SSH", "private", "key", "user", "impala", "Duration", "services", "scraper", "batch_store_interval", "time", "Minute", "The", "duration", "between", "each", "flush", "scraped", "batches"], "doc_head": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"scrape\",\n\t\tShort: \"Scrape radarbox data and persist\",\n\t\tLong:  \"Scrapes radarbox data through TCP client and persists the data in a database\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runScrape,\n\t}\n\tcmd.PersistentFlags().String(\"radarbox.host\", \"\", \"Radarbox TCP host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.host\", \"\", \"Radarbox SSH host\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.private-key\", \"\", \"Radarbox SSH private key\")\n\tcmd.PersistentFlags().String(\"radarbox.ssh.user\", \"impala\", \"Radarbox SSH user\")\n\tcmd.PersistentFlags().Duration(\"services.scraper.batch_store_interval\", 5*time.Minute, \"The duration between each flush of scraped batches of data.\")\n\treturn cmd\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:New/complete", "package": "scraper", "node_kind": "function", "receiver": "", "function_name": "New", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["New"], "all_kinds": ["function"], "all_ast_paths": ["go:function:New/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [706], "all_end_bytes": [1524], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["github.com/spf13/cobra", "github.com/spf13/viper", "time"], "symbols_referenced_strict": ["BindPFlags", "Command", "Duration", "Flags", "Long", "Minute", "New", "PersistentFlags", "PreRunE", "RunE", "Short", "String", "cmd.Flags", "cmd.PersistentFlags", "cobra.Command", "time.Minute", "viper.BindPFlags"], "header_context_minimal": "package scraper\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n    \"time\"\n)", "summary_en": "Creates a Cobra command for scraping radarbox data, setting up flags and handling errors", "keywords_en": ["cobra command", "database persistence", "error handling", "flag setup", "scraping data", "tcp client"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:34.474278", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "13deb5a067ff170f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 46, "end_line": 46, "text": "type scrapeConfig struct {", "n_tokens": 5, "primary_symbol": "scrapeConfig", "primary_kind": "type", "primary_span": [46, 46], "def_symbols": [], "symbols": ["type", "scrapeConfig", "struct"], "doc_head": "type scrapeConfig struct {", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:scrapeConfig (struct)", "package": "scraper", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "scrapeConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["scrapeConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:scrapeConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["scrapeConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1531], "all_end_bytes": [2073], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package scraper", "summary_en": "Defines a configuration struct for scraping operations", "keywords_en": ["cache management", "configuration struct", "data retrieval", "error handling", "scraping operations", "web scraping"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:37.100847", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "d985f532da396f62", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 47, "end_line": 50, "text": "\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`", "n_tokens": 30, "primary_symbol": "scrapeConfig", "primary_kind": "type", "primary_span": [47, 50], "def_symbols": [], "symbols": ["App", "struct", "Name", "string", "mapstructure", "name", "Key", "key", "app"], "doc_head": "\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:scrapeConfig (struct)", "package": "scraper", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "scrapeConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["scrapeConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:scrapeConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["scrapeConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1531], "all_end_bytes": [2073], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["App", "Key", "Name"], "header_context_minimal": "package scraper", "summary_en": "Defines a structure for application configuration with name and key fields", "keywords_en": ["app config", "application details", "configuration struct", "key field", "mapstructure tags", "name field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:39.830998", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "0f04a7488846bb82", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 51, "end_line": 56, "text": "\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tRadarBox radarboxtcp.Config `mapstructure:\"radarbox\"`\n\tMongo    xmongodb.Config    `mapstructure:\"mongodb\"`", "n_tokens": 61, "primary_symbol": "scrapeConfig", "primary_kind": "type", "primary_span": [51, 56], "def_symbols": [], "symbols": ["Logging", "struct", "Debug", "bool", "mapstructure", "debug", "Encoding", "string", "encoding", "logging", "RadarBox", "radarboxtcp", "Config", "radarbox", "Mongo", "xmongodb", "mongodb"], "doc_head": "\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tRadarBox radarboxtcp.Config `mapstructure:\"radarbox\"`\n\tMongo    xmongodb.Config    `mapstructure:\"mongodb\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:scrapeConfig (struct)", "package": "scraper", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "scrapeConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["scrapeConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:scrapeConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["scrapeConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1531], "all_end_bytes": [2073], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp", "go.impalastudios.com/aviation/liveflights/pkg/xmongodb"], "symbols_referenced_strict": ["Config", "Debug", "Encoding", "Logging", "Mongo", "RadarBox", "radarboxtcp.Config", "xmongodb.Config"], "header_context_minimal": "package scraper\nimport (\n    \"go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp\"\n    \"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n)", "summary_en": "Defines configuration settings for logging, radarbox TCP, and MongoDB", "keywords_en": ["logging config", "mongodb config", "radarbox config"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:42.308545", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "e7674d2ce797d73d", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 57, "end_line": 57, "text": "\tServices struct {", "n_tokens": 4, "primary_symbol": "scrapeConfig", "primary_kind": "type", "primary_span": [57, 57], "def_symbols": [], "symbols": ["Services", "struct"], "doc_head": "\tServices struct {", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:scrapeConfig (struct)", "package": "scraper", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "scrapeConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["scrapeConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:scrapeConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["scrapeConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1531], "all_end_bytes": [2073], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Services"], "header_context_minimal": "package scraper", "summary_en": "Defines a struct for managing scraping configurations", "keywords_en": ["cache management", "config management", "error handling", "scraping setup", "struct definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:44.726863", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "29d489e1e973be8a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 58, "end_line": 63, "text": "\t\tScraper struct {\n\t\t\tBatchStoreInterval time.Duration `mapstructure:\"batch_store_interval\"`\n\t\t} `mapstructure:\"scraper\"`\n\t} `mapstructure:\"services\"`\n}\n", "n_tokens": 40, "primary_symbol": "scrapeConfig", "primary_kind": "type", "primary_span": [58, 63], "def_symbols": [], "symbols": ["Scraper", "struct", "BatchStoreInterval", "time", "Duration", "mapstructure", "batch_store_interval", "scraper", "services"], "doc_head": "\t\tScraper struct {\n\t\t\tBatchStoreInterval time.Duration `mapstructure:\"batch_store_interval\"`\n\t\t} `mapstructure:\"scraper\"`\n\t} `mapstructure:\"services\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:scrapeConfig (struct)", "package": "scraper", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "scrapeConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["scrapeConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:scrapeConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["scrapeConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1531], "all_end_bytes": [2073], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["BatchStoreInterval", "Duration", "Scraper", "time.Duration"], "header_context_minimal": "package scraper\nimport \"time\"", "summary_en": "defines configuration for a scraper service, including batch store interval", "keywords_en": [], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:47.182626", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "f6dd15e2a2dd7e25", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/scraper/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go", "rel_path": "cmd/scraper/root.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 64, "end_line": 159, "text": "func runScrape(cmd *cobra.Command, _ []string) error {\n\tvar cfg scrapeConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\tctx := cmd.Context()\n\n\t// Make connections\n\tresolver.Register(dnssrvresolver.New())\n\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(\"go.impalastudios.com/otel\"))\n\n\t// Database\n\tdb, err := xmongodb.Connect(ctx, cfg.Mongo)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to mongodb\")\n\t}\n\n\tif err := xmongodb.Migrate(ctx, cfg.Mongo.DB, db.Client); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate mongodb\")\n\t}\n\n\tdatabase := db.Database(cfg.Mongo.DB)\n\tflightsUpdateRepo := mongoadapter.NewFlightsUpdateRepository(database)\n\n\t// External provider\n\tclient := radarboxtcp.New(cfg.RadarBox)\n\tif err := client.Connect(ctx); err != nil {\n\t\treturn err\n\t}\n\tdefer func() { _ = client.Close() }()\n\n\t// Service\n\tsvc := core.NewFlightsIngestService(\n\t\tflightsUpdateRepo,\n\t\tclient,\n\t\tcfg.Services.Scraper.BatchStoreInterval,\n\t)\n\n\tquit := make(chan os.Signal, 1)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\tlog.Info(ctx, \"Starting to consume flight updates\")\n\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\n\tgo func() {\n\t\tif err := svc.ConsumeFlightUpdates(ctx); err != nil {\n\t\t\tlog.Error(ctx, \"Failed to consume flight updates\", zap.Error(err))\n\t\t\tcancel()\n\t\t}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(ctx, \"Context done, terminating the realtime live flights service\")\n\tcase <-quit:\n\t\tlog.Info(ctx, \"Received interrupt signal, terminating the realtime live flights service\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 645, "primary_symbol": "runScrape", "primary_kind": "function", "primary_span": [64, 159], "def_symbols": [], "symbols": ["runScrape", "func", "cmd", "cobra", "Command", "string", "error", "var", "cfg", "scrapeConfig", "err", "viper", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "logger", "log", "New", "WithService", "GetString", "app", "name", "WithEncoding", "logging", "encoding", "WithDebugEnabled", "GetBool", "debug", "SetLogger", "ctx", "Context", "Make", "connections", "resolver", "Register", "dnssrvresolver", "Tracing", "xotel", "NewTracerProvider", "TracerProviderConfig", "ServiceName", "App", "Name", "Endpoint", "otel", "tracer", "endpoint", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "impalastudios", "com", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "Database", "xmongodb", "Connect", "Mongo", "connect", "mongodb", "Migrate", "Client", "migrate", "database", "flightsUpdateRepo", "mongoadapter", "NewFlightsUpdateRepository", "External", "client", "radarboxtcp", "RadarBox", "defer", "Close", "Service", "svc", "core", "NewFlightsIngestService", "Services", "Scraper", "BatchStoreInterval", "quit", "make", "chan", "Signal", "signal", "Notify", "Interrupt", "Info", "Starting", "consume", "flight", "updates", "cancel", "context", "WithCancel", "ConsumeFlightUpdates", "Error", "Failed", "zap", "select", "case", "Done", "done", "terminating", "the", "realtime", "live", "flights", "service", "Received", "interrupt"], "doc_head": "func runScrape(cmd *cobra.Command, _ []string) error {\n\tvar cfg scrapeConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\tctx := cmd.Context()\n\t// Make connections\n\tresolver.Register(dnssrvresolver.New())\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:runScrape/complete", "package": "scraper", "node_kind": "function", "receiver": "", "function_name": "runScrape", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["runScrape"], "all_kinds": ["function"], "all_ast_paths": ["go:function:runScrape/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [2075], "all_end_bytes": [4668], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context", "github.com/cockroachdb/errors", "github.com/spf13/cobra", "github.com/spf13/viper", "go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb", "go.impalastudios.com/aviation/liveflights/internal/adapters/radarbox_tcp", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/aviation/liveflights/pkg/xmongodb", "go.impalastudios.com/grpc/dnssrvresolver", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.opentelemetry.io/otel", "go.opentelemetry.io/otel/propagation", "go.uber.org/zap", "google.golang.org/grpc/resolver", "os", "os/signal"], "symbols_referenced_strict": ["App", "Baggage", "BatchStoreInterval", "Client", "Close", "Command", "Connect", "ConsumeFlightUpdates", "Context", "Database", "Done", "Endpoint", "Error", "GetBool", "GetDuration", "GetString", "Info", "Interrupt", "Interval", "Meter", "MeterProviderConfig", "Migrate", "Mongo", "Name", "New", "NewCompositeTextMapPropagator", "NewFlightsIngestService", "NewFlightsUpdateRepository", "NewMeterProvider", "NewTracerProvider", "Notify", "RadarBox", "Register", "Scraper", "Scraper.BatchStoreInterval", "ServiceName", "Services", "SetGlobalMeter", "SetGlobalTracer", "SetLogger", "SetMeterProvider", "SetTextMapPropagator", "SetTracerProvider", "Signal", "TraceContext", "Tracer", "TracerProviderConfig", "Unmarshal", "WithCancel", "WithDebugEnabled", "WithEncoding", "WithService", "Wrap", "cfg.App", "cfg.Mongo", "cfg.RadarBox", "cfg.Services", "client.Close", "client.Connect", "cmd.Context", "cobra.Command", "context.WithCancel", "core.NewFlightsIngestService", "ctx.Done", "db.Client", "db.Database", "dnssrvresolver.New", "errors.Wrap", "log.Error", "log.Info", "log.New", "log.SetLogger", "log.WithDebugEnabled", "log.WithEncoding", "log.WithService", "mongoadapter.NewFlightsUpdateRepository", "mp.Meter", "os.Interrupt", "os.Signal", "otel.SetMeterProvider", "otel.SetTextMapPropagator", "otel.SetTracerProvider", "propagation.Baggage", "propagation.NewCompositeTextMapPropagator", "propagation.TraceContext", "radarboxtcp.New", "resolver.Register", "signal.Notify", "svc.ConsumeFlightUpdates", "tp.Tracer", "viper.GetBool", "viper.GetDuration", "viper.GetString", "viper.Unmarshal", "xmongodb.Connect", "xmongodb.Migrate", "xotel.MeterProviderConfig", "xotel.NewMeterProvider", "xotel.NewTracerProvider", "xotel.SetGlobalMeter", "xotel.SetGlobalTracer", "xotel.TracerProviderConfig", "zap.Error"], "header_context_minimal": "package scraper\nimport (\n    \"context\"\n    \"github.com/cockroachdb/errors\"\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n    \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n)", "summary_en": "Initializes and configures dependencies for scraping operations", "keywords_en": ["configuration loading", "database connection", "error handling", "logging setup", "meter provider setup", "tracing provider initialization"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:47.190198", "file_synopsis_hash": "4fd9a40a9b6c540c", "chunk_text_hash": "97cbaa48b8e70b2d", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/scraper/root.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package data_processor\n", "n_tokens": 4, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "data_processor"], "doc_head": "package data_processor", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "data_processor", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package data_processor", "summary_en": "The package data_processor contains types and functions for processing data", "keywords_en": ["data processing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:47.204747", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "bfd5af55f29beae7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 31, "text": "import (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tadapters \"go.impalastudios.com/aviation/liveflights/internal/adapters\"\n\tadapterscache \"go.impalastudios.com/aviation/liveflights/internal/adapters/cache\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/cache\"\n\tairlinesv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\tairportsv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xgrpc\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)\n", "n_tokens": 348, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 31], "def_symbols": [], "symbols": ["import", "context", "github", "com", "aws", "sdk", "service", "cockroachdb", "errors", "spf13", "cobra", "viper", "adapters", "impalastudios", "aviation", "liveflights", "internal", "adapterscache", "cache", "filesystem", "mongoadapter", "mongodb", "core", "pkg", "airlinesv0", "grpc", "airlines", "airportsv0", "airports", "xaws", "xgrpc", "xmongodb", "dnssrvresolver", "log", "xotel", "otel", "opentelemetry", "propagation", "uber", "org", "zap", "google", "golang", "resolver", "signal", "time"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\tadapters \"go.impalastudios.com/aviation/liveflights/internal/adapters\"\n\tadapterscache \"go.impalastudios.com/aviation/liveflights/internal/adapters/cache\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\tmongoadapter \"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/cache\"\n\tairlinesv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\tairportsv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xgrpc\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc/resolver\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "data_processor", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package data_processor", "summary_en": "Handles data processing for live flights, integrating S3, MongoDB, and caching", "keywords_en": ["cache management", "data processing", "error handling", "live flights", "mongodb handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:47.205868", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "2d81aaf6c60df5ac", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 32, "end_line": 52, "text": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"data-processor\",\n\t\tShort: \"Enrich, archive and clean live flights data\",\n\t\tLong:  \"Retrieves new live flights from database, to enrich the data. And archives and removes old data from the database.\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runDataProcessor,\n\t}\n\n\tcmd.PersistentFlags().String(\"services.airlines.endpoint\", \"\", \"airlines service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airlines.cache.ttl\", 5*time.Minute, \"The cache TTL for airlines\")\n\tcmd.PersistentFlags().String(\"services.airports.endpoint\", \"\", \"airports service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airports.cache.ttl\", 5*time.Minute, \"The cache TTL for airports\")\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\n\treturn cmd\n}\n", "n_tokens": 229, "primary_symbol": "New", "primary_kind": "function", "primary_span": [33, 52], "def_symbols": [], "symbols": ["New", "creates", "new", "scrape", "command", "func", "cobra", "Command", "cmd", "Use", "data", "processor", "Short", "Enrich", "archive", "and", "clean", "live", "flights", "Long", "Retrieves", "from", "database", "enrich", "the", "And", "archives", "removes", "old", "PreRunE", "args", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runDataProcessor", "PersistentFlags", "String", "services", "airlines", "endpoint", "service", "Duration", "cache", "ttl", "time", "Minute", "The", "TTL", "for", "airports", "stores", "bucket", "name", "where", "are", "archived"], "doc_head": "// New creates a new scrape command\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"data-processor\",\n\t\tShort: \"Enrich, archive and clean live flights data\",\n\t\tLong:  \"Retrieves new live flights from database, to enrich the data. And archives and removes old data from the database.\",\n\t\tPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runDataProcessor,\n\t}\n\tcmd.PersistentFlags().String(\"services.airlines.endpoint\", \"\", \"airlines service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airlines.cache.ttl\", 5*time.Minute, \"The cache TTL for airlines\")\n\tcmd.PersistentFlags().String(\"services.airports.endpoint\", \"\", \"airports service endpoint\")\n\tcmd.PersistentFlags().Duration(\"services.airports.cache.ttl\", 5*time.Minute, \"The cache TTL for airports\")\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\treturn cmd\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:New/complete", "package": "data_processor", "node_kind": "function", "receiver": "", "function_name": "New", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["New"], "all_kinds": ["function"], "all_ast_paths": ["go:function:New/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [1215], "all_end_bytes": [2150], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["github.com/spf13/cobra", "github.com/spf13/viper", "time"], "symbols_referenced_strict": ["BindPFlags", "Command", "Duration", "Flags", "Long", "Minute", "New", "PersistentFlags", "PreRunE", "RunE", "Short", "String", "cmd.Flags", "cmd.PersistentFlags", "cobra.Command", "time.Minute", "viper.BindPFlags"], "header_context_minimal": "package data_processor\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n    \"time\"\n)", "summary_en": "Creates a new Cobra command for data processing, including flags for service endpoints and cache TTLs", "keywords_en": ["cache management", "cobra command", "data processing", "service endpoints", "ttl settings"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:50.827351", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "e1eeae7c8df4c49e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 53, "end_line": 54, "text": "type dataProcessorConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`", "n_tokens": 17, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [53, 54], "def_symbols": [], "symbols": ["type", "dataProcessorConfig", "struct", "AWS", "xaws", "Config", "mapstructure", "aws"], "doc_head": "type dataProcessorConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/xaws"], "symbols_referenced_strict": ["Config", "xaws.Config"], "header_context_minimal": "package data_processor\nimport \"go.impalastudios.com/aviation/liveflights/pkg/xaws\"", "summary_en": "Defines a data processor configuration struct with AWS settings", "keywords_en": ["aws config", "cache management", "configuration struct", "data processing", "error handling", "service integration"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:53.429684", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "7e5f72bb546972cc", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 55, "end_line": 58, "text": "\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`", "n_tokens": 30, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [55, 58], "def_symbols": [], "symbols": ["App", "struct", "Name", "string", "mapstructure", "name", "Key", "key", "app"], "doc_head": "\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`\n\t} `mapstructure:\"app\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["App", "Key", "Name"], "header_context_minimal": "package data_processor", "summary_en": "Defines a configuration structure for an application with name and key fields", "keywords_en": ["app configuration", "application settings", "data structure", "key field", "mapstructure tag", "name field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:56.170656", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "0f04a7488846bb82", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 59, "end_line": 64, "text": "\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`\n\tCache  cache.Config    `mapstructure:\"cache\"`", "n_tokens": 57, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [59, 64], "def_symbols": [], "symbols": ["Logging", "struct", "Debug", "bool", "mapstructure", "debug", "Encoding", "string", "encoding", "logging", "Mongo", "xmongodb", "Config", "mongodb", "Cache", "cache"], "doc_head": "\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`\n\tCache  cache.Config    `mapstructure:\"cache\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/cache", "go.impalastudios.com/aviation/liveflights/pkg/xmongodb"], "symbols_referenced_strict": ["Cache", "Config", "Debug", "Encoding", "Logging", "Mongo", "cache.Config", "xmongodb.Config"], "header_context_minimal": "package data_processor\nimport (\n    \"go.impalastudios.com/aviation/liveflights/pkg/cache\"\n    \"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n)", "summary_en": "Defines configuration settings for logging, MongoDB, and cache management", "keywords_en": ["cache management", "logging config", "mongodb settings"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:12:58.563140", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "0c16a3b6e8dcda98", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 65, "end_line": 65, "text": "\tStores struct {", "n_tokens": 4, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [65, 65], "def_symbols": [], "symbols": ["Stores", "struct"], "doc_head": "\tStores struct {", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Stores"], "header_context_minimal": "package data_processor", "summary_en": "Defines a struct to store configuration for data processing tasks", "keywords_en": ["data processing", "struct definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:00.707858", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "9cbec4b1519e3f05", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 66, "end_line": 69, "text": "\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`", "n_tokens": 34, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [66, 69], "def_symbols": [], "symbols": ["Archive", "struct", "BucketName", "string", "mapstructure", "bucket", "name", "archive", "stores"], "doc_head": "\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Archive", "BucketName"], "header_context_minimal": "package data_processor", "summary_en": "Defines a configuration struct for data processing that includes settings for storing data in an archive bucket", "keywords_en": ["archive config", "bucket name", "data storage", "map structure"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:03.390741", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "6b9c25872b390687", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 70, "end_line": 70, "text": "\tServices struct {", "n_tokens": 4, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [70, 70], "def_symbols": [], "symbols": ["Services", "struct"], "doc_head": "\tServices struct {", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Services"], "header_context_minimal": "package data_processor", "summary_en": "Defines a configuration structure for data processing services", "keywords_en": ["configuration struct", "data processing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:05.964752", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "29d489e1e973be8a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 71, "end_line": 72, "text": "\t\tAirlines struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`", "n_tokens": 15, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [71, 72], "def_symbols": [], "symbols": ["Airlines", "struct", "Endpoint", "string", "mapstructure", "endpoint"], "doc_head": "\t\tAirlines struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Airlines", "Endpoint"], "header_context_minimal": "package data_processor", "summary_en": "Defines a struct for storing configuration details related to an airline data processing endpoint", "keywords_en": ["airline processing", "configuration management", "data structure", "endpoint configuration", "json mapping", "map structure tag", "string type", "struct definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:09.149744", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "2dda80ee08098dd1", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 73, "end_line": 76, "text": "\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airlines\"`", "n_tokens": 36, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [73, 76], "def_symbols": [], "symbols": ["Cache", "struct", "TTL", "time", "Duration", "mapstructure", "ttl", "cache", "airlines"], "doc_head": "\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airlines\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Cache", "Duration", "time.Duration"], "header_context_minimal": "package data_processor\nimport \"time\"", "summary_en": "Defines a configuration struct for the data processor with settings for cache TTL", "keywords_en": ["cache ttl", "configuration struct", "data processor", "mapstructure tags"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:11.839110", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "390fd246de9f012e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 77, "end_line": 78, "text": "\t\tAirports struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`", "n_tokens": 16, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [77, 78], "def_symbols": [], "symbols": ["Airports", "struct", "Endpoint", "string", "mapstructure", "endpoint"], "doc_head": "\t\tAirports struct {\n\t\t\tEndpoint string `mapstructure:\"endpoint\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Airports", "Endpoint"], "header_context_minimal": "package data_processor", "summary_en": "Defines a struct for airport data configuration with an endpoint field", "keywords_en": ["airport config", "data structure", "endpoint field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:14.129511", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "320f6fe4ae9dfec4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 79, "end_line": 85, "text": "\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airports\"`\n\t} `mapstructure:\"services\"`\n}\n", "n_tokens": 45, "primary_symbol": "dataProcessorConfig", "primary_kind": "type", "primary_span": [79, 85], "def_symbols": [], "symbols": ["Cache", "struct", "TTL", "time", "Duration", "mapstructure", "ttl", "cache", "airports", "services"], "doc_head": "\t\t\tCache    struct {\n\t\t\t\tTTL time.Duration `mapstructure:\"ttl\"`\n\t\t\t} `mapstructure:\"cache\"`\n\t\t} `mapstructure:\"airports\"`\n\t} `mapstructure:\"services\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:dataProcessorConfig (struct)", "package": "data_processor", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "dataProcessorConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["dataProcessorConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:dataProcessorConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["dataProcessorConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [2157], "all_end_bytes": [3125], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Cache", "Duration", "time.Duration"], "header_context_minimal": "package data_processor\nimport \"time\"", "summary_en": "Defines cache settings within a data processor configuration", "keywords_en": ["cache settings", "configuration management", "data processing", "map structure", "ttl duration"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:16.687262", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "eed527948ef7a32e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/data_processor/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go", "rel_path": "cmd/data_processor/root.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 86, "end_line": 260, "text": "func runDataProcessor(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\n\t// Config\n\tvar cfg dataProcessorConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(\"go.impalastudios.com/otel\"))\n\n\t// Database\n\tdb, err := xmongodb.Connect(ctx, cfg.Mongo)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to mongodb\")\n\t}\n\n\tif err := xmongodb.Migrate(ctx, cfg.Mongo.DB, db.Client); err != nil {\n\t\treturn errors.Wrap(err, \"failed to migrate mongodb\")\n\t}\n\n\tdatabase := db.Database(cfg.Mongo.DB)\n\n\t// Cache\n\tcacheClient := cache.Connect(cmd.Context(), cfg.Cache)\n\n\tairlinesCache := adapterscache.NewAirlinesCache(cacheClient, cfg.Services.Airlines.Cache.TTL)\n\tairportsCache := adapterscache.NewAirportsCache(cacheClient, cfg.Services.Airports.Cache.TTL)\n\n\t// Services\n\ts3Client := xaws.NewS3ClientFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\n\tarchiveFilesystem := filesystem.NewS3Filesystem(cfg.Stores.Archive.BucketName, s3Client)\n\n\tflightsArchiveRepo := mongoadapter.NewFlightsArchiveRepository(database)\n\n\tarchiveSvc := core.NewFlightArchiveService(\n\t\tflightsArchiveRepo,\n\t\tarchiveFilesystem,\n\t\t1000,\n\t\t10,\n\t)\n\n\tflightsEnrichRepo := mongoadapter.NewFlightsEnrichRepository(database)\n\n\tairlines := adapters.NewAirlinesGrpcClient(\n\t\tairlinesv0.NewAirlinesServiceClient(\n\t\t\txgrpc.MustConnect(cfg.Services.Airlines.Endpoint),\n\t\t),\n\t\tairlinesCache,\n\t)\n\n\tairports := adapters.NewAirportsGrpcClient(\n\t\tairportsv0.NewAirportsServiceClient(\n\t\t\txgrpc.MustConnect(cfg.Services.Airports.Endpoint),\n\t\t),\n\t\tairportsCache,\n\t\t25,\n\t)\n\n\tenrichSvc := core.NewFlightsEnrichService(\n\t\tflightsEnrichRepo,\n\t\tairlines,\n\t\tairports,\n\t\t1000,\n\t\t10,\n\t)\n\n\tlog.Info(ctx, \"Starting to process data\")\n\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\n\tmaxStepDuration := viper.GetDuration(\"max_duration\")\n\tif maxStepDuration == 0 {\n\t\tmaxStepDuration = 150 * time.Second\n\t}\n\tsleepDuration := viper.GetDuration(\"sleep_duration\")\n\tif sleepDuration == 0 {\n\t\tsleepDuration = time.Minute\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Context done, exiting processor loop\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\n\t\tstartArchive := time.Now()\n\t\terr := archiveSvc.Archive(ctx)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to archive flights\", zap.Error(err))\n\t\t}\n\n\t\tarchiveDur := time.Since(startArchive)\n\t\tif archiveDur > maxStepDuration {\n\t\t\tlog.Warn(ctx, \"Clean/archive step took longer than expected\",\n\t\t\t\tzap.Duration(\"duration\", archiveDur),\n\t\t\t\tzap.Duration(\"max_duration\", maxStepDuration),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\n\t\tstartEnrich := time.Now()\n\t\terr = enrichSvc.Enrich(ctx)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to enrich live flights data\", zap.Error(err))\n\t\t}\n\n\t\tenrichDur := time.Since(startEnrich)\n\t\tif enrichDur > maxStepDuration {\n\t\t\tlog.Warn(ctx, \"Enrich step took longer than expected\",\n\t\t\t\tzap.Duration(\"duration\", enrichDur),\n\t\t\t\tzap.Duration(\"max_duration\", maxStepDuration),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Context done, exiting processor loop\")\n\t\t\treturn nil\n\t\tcase <-time.After(sleepDuration):\n\t\t}\n\t}\n}\n", "n_tokens": 1182, "primary_symbol": "runDataProcessor", "primary_kind": "function", "primary_span": [86, 260], "def_symbols": [], "symbols": ["runDataProcessor", "func", "cmd", "cobra", "Command", "string", "error", "ctx", "Context", "Config", "var", "cfg", "dataProcessorConfig", "err", "viper", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "awsCfg", "xaws", "LoadAWSConfig", "AWS", "log", "Error", "Failed", "load", "zap", "quit", "make", "chan", "Signal", "defer", "close", "signal", "Notify", "Interrupt", "Logging", "logger", "New", "WithService", "App", "Name", "WithEncoding", "Encoding", "WithDebugEnabled", "Debug", "SetLogger", "DNS", "resolver", "Register", "dnssrvresolver", "Tracing", "xotel", "NewTracerProvider", "TracerProviderConfig", "ServiceName", "Endpoint", "GetString", "otel", "tracer", "endpoint", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "impalastudios", "com", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "Database", "xmongodb", "Connect", "Mongo", "connect", "mongodb", "Migrate", "Client", "migrate", "database", "Cache", "cacheClient", "cache", "airlinesCache", "adapterscache", "NewAirlinesCache", "Services", "Airlines", "TTL", "airportsCache", "NewAirportsCache", "Airports", "s3Client", "NewS3ClientFromConfig", "Options", "UsePathStyle", "archiveFilesystem", "filesystem", "NewS3Filesystem", "Stores", "Archive", "BucketName", "flightsArchiveRepo", "mongoadapter", "NewFlightsArchiveRepository", "archiveSvc", "core", "NewFlightArchiveService", "flightsEnrichRepo", "NewFlightsEnrichRepository", "airlines", "adapters", "NewAirlinesGrpcClient", "airlinesv0", "NewAirlinesServiceClient", "xgrpc", "MustConnect", "airports", "NewAirportsGrpcClient", "airportsv0", "NewAirportsServiceClient", "enrichSvc", "NewFlightsEnrichService", "Info", "Starting", "process", "data", "cancel", "context", "WithCancel", "maxStepDuration", "max_duration", "time", "Second", "sleepDuration", "sleep_duration", "Minute", "for", "select", "case", "Done", "done", "exiting", "processor", "loop", "default", "startArchive", "Now", "archive", "flights", "archiveDur", "Since", "Warn", "Clean", "step", "took", "longer", "than", "expected", "Duration", "duration", "startEnrich", "Enrich", "enrich", "live", "enrichDur", "After"], "doc_head": "func runDataProcessor(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\t// Config\n\tvar cfg dataProcessorConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal config\")\n\t}\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tsignal.Notify(quit, os.Interrupt)\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:runDataProcessor/complete", "package": "data_processor", "node_kind": "function", "receiver": "", "function_name": "runDataProcessor", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["runDataProcessor"], "all_kinds": ["function"], "all_ast_paths": ["go:function:runDataProcessor/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [3127], "all_end_bytes": [7598], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context", "github.com/aws/aws-sdk-go-v2/service/s3", "github.com/cockroachdb/errors", "github.com/spf13/cobra", "github.com/spf13/viper", "go.impalastudios.com/aviation/liveflights/internal/adapters", "go.impalastudios.com/aviation/liveflights/internal/adapters/cache", "go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem", "go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/aviation/liveflights/pkg/cache", "go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0", "go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0", "go.impalastudios.com/aviation/liveflights/pkg/xaws", "go.impalastudios.com/aviation/liveflights/pkg/xgrpc", "go.impalastudios.com/aviation/liveflights/pkg/xmongodb", "go.impalastudios.com/grpc/dnssrvresolver", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.opentelemetry.io/otel", "go.opentelemetry.io/otel/propagation", "go.uber.org/zap", "google.golang.org/grpc/resolver", "os", "os/signal", "time"], "symbols_referenced_strict": ["Airlines", "Airlines.Cache", "Airlines.Endpoint", "Airports", "Airports.Cache", "Airports.Endpoint", "App", "Archive", "Archive.BucketName", "Baggage", "BucketName", "Cache", "Client", "Command", "Connect", "Context", "Database", "Debug", "Done", "Duration", "Encoding", "Endpoint", "Enrich", "Error", "GetDuration", "GetString", "Info", "Interrupt", "Interval", "LoadAWSConfig", "Logging", "Meter", "MeterProviderConfig", "Migrate", "Minute", "Mongo", "MustConnect", "Name", "New", "NewAirlinesCache", "NewAirlinesGrpcClient", "NewAirlinesServiceClient", "NewAirportsCache", "NewAirportsGrpcClient", "NewAirportsServiceClient", "NewCompositeTextMapPropagator", "NewFlightArchiveService", "NewFlightsArchiveRepository", "NewFlightsEnrichRepository", "NewFlightsEnrichService", "NewMeterProvider", "NewS3ClientFromConfig", "NewS3Filesystem", "NewTracerProvider", "Notify", "Now", "Options", "Register", "S3.UsePathStyle", "Second", "ServiceName", "Services", "SetGlobalMeter", "SetGlobalTracer", "SetLogger", "SetMeterProvider", "SetTextMapPropagator", "SetTracerProvider", "Signal", "Since", "Stores", "TraceContext", "Tracer", "TracerProviderConfig", "Unmarshal", "UsePathStyle", "Warn", "WithCancel", "WithDebugEnabled", "WithEncoding", "WithService", "Wrap", "adapters.NewAirlinesGrpcClient", "adapters.NewAirportsGrpcClient", "adapterscache.NewAirlinesCache", "adapterscache.NewAirportsCache", "airlinesv0.NewAirlinesServiceClient", "airportsv0.NewAirportsServiceClient", "archiveSvc.Archive", "cache.Connect", "cfg.AWS", "cfg.App", "cfg.Cache", "cfg.Logging", "cfg.Mongo", "cfg.Services", "cfg.Stores", "cmd.Context", "cobra.Command", "context.WithCancel", "core.NewFlightArchiveService", "core.NewFlightsEnrichService", "ctx.Done", "db.Client", "db.Database", "dnssrvresolver.New", "enrichSvc.Enrich", "errors.Wrap", "filesystem.NewS3Filesystem", "log.Error", "log.Info", "log.New", "log.SetLogger", "log.Warn", "log.WithDebugEnabled", "log.WithEncoding", "log.WithService", "mongoadapter.NewFlightsArchiveRepository", "mongoadapter.NewFlightsEnrichRepository", "mp.Meter", "o.UsePathStyle", "os.Interrupt", "os.Signal", "otel.SetMeterProvider", "otel.SetTextMapPropagator", "otel.SetTracerProvider", "propagation.Baggage", "propagation.NewCompositeTextMapPropagator", "propagation.TraceContext", "resolver.Register", "s3.Options", "signal.Notify", "time.After", "time.Minute", "time.Now", "time.Second", "time.Since", "tp.Tracer", "viper.GetDuration", "viper.GetString", "viper.Unmarshal", "xaws.LoadAWSConfig", "xaws.NewS3ClientFromConfig", "xgrpc.MustConnect", "xmongodb.Connect", "xmongodb.Migrate", "xotel.MeterProviderConfig", "xotel.NewMeterProvider", "xotel.NewTracerProvider", "xotel.SetGlobalMeter", "xotel.SetGlobalTracer", "xotel.TracerProviderConfig", "zap.Duration", "zap.Error"], "header_context_minimal": "package data_processor\nimport (\n    \"context\"\n    \"github.com/aws/aws-sdk-go-v2/service/s3\"\n    \"github.com/cockroachdb/errors\"\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n)", "summary_en": "Initializes and configures components for a data processing application, including AWS, logging, DNS resolver, tracing, and database connections", "keywords_en": ["aws configuration", "database connection", "dns resolver", "error handling", "logging setup", "tracing initialization"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:16.693584", "file_synopsis_hash": "cc461cd106ce77b8", "chunk_text_hash": "d740a7d79bcc1718", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/data_processor/root.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "serve", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package serve", "summary_en": "Handles HTTP requests, serving data efficiently with error checking", "keywords_en": ["cache utilization", "data serving", "error checking", "http handling", "performance optimization", "request management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:16.705298", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "d04ac135de6af195", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 45, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"slices\"\n\t\"time\"\n\n\t\"github.com/go-playground/validator/v10\"\n\thttphandlers \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\n\t\"github.com/cockroachdb/errors\"\n\tginzap \"github.com/gin-contrib/zap\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\totelginmetric \"go.impalastudios.com/otel/gingonic\"\n\trequestid \"go.impalastudios.com/requestid/gin\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.uber.org/zap/zapcore\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.uber.org/zap\"\n\n\t\"go.impalastudios.com/grpc/dnssrvresolver\"\n\t\"go.impalastudios.com/validation/customrules\"\n\n\t\"google.golang.org/grpc/resolver\"\n)\n", "n_tokens": 412, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 45], "def_symbols": [], "symbols": ["import", "context", "fmt", "github", "com", "aws", "sdk", "service", "impalastudios", "aviation", "liveflights", "internal", "adapters", "filesystem", "pkg", "xaws", "net", "http", "signal", "slices", "time", "playground", "validator", "v10", "httphandlers", "handlers", "mongodb", "core", "opentelemetry", "otel", "propagation", "cockroachdb", "errors", "ginzap", "gin", "contrib", "zap", "gonic", "binding", "i18n", "xmongodb", "log", "xotel", "otelginmetric", "gingonic", "requestid", "instrumentation", "otelgin", "uber", "org", "zapcore", "spf13", "cobra", "viper", "grpc", "dnssrvresolver", "validation", "customrules", "google", "golang", "resolver"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xaws\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"slices\"\n\t\"time\"\n\t\"github.com/go-playground/validator/v10\"\n\thttphandlers \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http/v0\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"github.com/cockroachdb/errors\"\n\tginzap \"github.com/gin-contrib/zap\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/i18n\"\n\t\"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\totelginmetric \"go.impalastudios.com/otel/gingonic\"\n\trequestid \"go.impalastudios.com/requestid/gin\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.uber.org/zap/zapcore\"", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "serve", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package serve", "summary_en": "The code sets up a web server using Gin, handles HTTP requests, interacts with MongoDB for data storage, and uses AWS S3 for file management", "keywords_en": ["error handling", "http requests", "mongodb interaction", "web server"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:16.707015", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "0a983afb92a05884", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 46, "end_line": 64, "text": "// Serve is a function that starts the http server\nfunc newServeHttpCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"http\",\n\t\tShort: \"Start HTTP REST server\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeHttp,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.http.port\", 8080, \"HTTP service port\")\n\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\n\treturn cmd\n}\n", "n_tokens": 144, "primary_symbol": "newServeHttpCommand", "primary_kind": "function", "primary_span": [47, 64], "def_symbols": [], "symbols": ["newServeHttpCommand", "Serve", "function", "that", "starts", "the", "http", "server", "func", "cobra", "Command", "cmd", "Use", "Short", "Start", "HTTP", "REST", "PreRunE", "string", "error", "return", "viper", "BindPFlags", "Flags", "RunE", "runServeHttp", "Args", "ExactArgs", "PersistentFlags", "Int", "app", "port", "service", "String", "stores", "archive", "bucket", "name", "The", "where", "live", "flights", "are", "archived"], "doc_head": "// Serve is a function that starts the http server\nfunc newServeHttpCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"http\",\n\t\tShort: \"Start HTTP REST server\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeHttp,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\tcmd.PersistentFlags().Int(\"app.http.port\", 8080, \"HTTP service port\")\n\tcmd.PersistentFlags().String(\"stores.archive.bucket-name\", \"\", \"The S3 bucket name where the live flights are archived.\")\n\treturn cmd\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:newServeHttpCommand/complete", "package": "serve", "node_kind": "function", "receiver": "", "function_name": "newServeHttpCommand", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["newServeHttpCommand"], "all_kinds": ["function"], "all_ast_paths": ["go:function:newServeHttpCommand/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [1447], "all_end_bytes": [1931], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["github.com/spf13/cobra", "github.com/spf13/viper"], "symbols_referenced_strict": ["Args", "BindPFlags", "Command", "ExactArgs", "Flags", "Int", "PersistentFlags", "PreRunE", "RunE", "Short", "String", "cmd.Flags", "cmd.PersistentFlags", "cobra.Command", "cobra.ExactArgs", "viper.BindPFlags"], "header_context_minimal": "package serve\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n)", "summary_en": "This code defines a Cobra command to start an HTTP REST server with configuration options", "keywords_en": ["command line interface", "configuration flags", "error handling", "http server", "port configuration", "rest api"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:20.511763", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "9bf870ad44854358", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 65, "end_line": 66, "text": "type serveHttpConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`", "n_tokens": 17, "primary_symbol": "serveHttpConfig", "primary_kind": "type", "primary_span": [65, 66], "def_symbols": [], "symbols": ["type", "serveHttpConfig", "struct", "AWS", "xaws", "Config", "mapstructure", "aws"], "doc_head": "type serveHttpConfig struct {\n\tAWS xaws.Config `mapstructure:\"aws\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:serveHttpConfig (struct)", "package": "serve", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "serveHttpConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["serveHttpConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:serveHttpConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["serveHttpConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1938], "all_end_bytes": [2509], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/xaws"], "symbols_referenced_strict": ["Config", "xaws.Config"], "header_context_minimal": "package serve\nimport \"go.impalastudios.com/aviation/liveflights/pkg/xaws\"", "summary_en": "Defines configuration structure for HTTP server with AWS settings", "keywords_en": ["aws config", "configuration struct", "http server", "mapstructure tag"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:22.994887", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "93ac5a6f69b4ae6e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 67, "end_line": 69, "text": "\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`", "n_tokens": 22, "primary_symbol": "serveHttpConfig", "primary_kind": "type", "primary_span": [67, 69], "def_symbols": [], "symbols": ["App", "struct", "Name", "string", "mapstructure", "name", "Key", "key"], "doc_head": "\tApp struct {\n\t\tName string `mapstructure:\"name\"`\n\t\tKey  string `mapstructure:\"key\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:serveHttpConfig (struct)", "package": "serve", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "serveHttpConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["serveHttpConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:serveHttpConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["serveHttpConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1938], "all_end_bytes": [2509], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["App", "Key", "Name"], "header_context_minimal": "package serve", "summary_en": "Defines an App struct with name and key fields for configuration purposes", "keywords_en": ["app config", "configuration management", "key field", "mapping structure", "name field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:25.533144", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "c3c47cd3d8a35fbb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 70, "end_line": 73, "text": "\t\tHTTP struct {\n\t\t\tPort int `mapstructure:\"port\"`\n\t\t} `mapstructure:\"http\"`\n\t} `mapstructure:\"app\"`", "n_tokens": 31, "primary_symbol": "serveHttpConfig", "primary_kind": "type", "primary_span": [70, 73], "def_symbols": [], "symbols": ["HTTP", "struct", "Port", "int", "mapstructure", "port", "http", "app"], "doc_head": "\t\tHTTP struct {\n\t\t\tPort int `mapstructure:\"port\"`\n\t\t} `mapstructure:\"http\"`\n\t} `mapstructure:\"app\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:serveHttpConfig (struct)", "package": "serve", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "serveHttpConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["serveHttpConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:serveHttpConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["serveHttpConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1938], "all_end_bytes": [2509], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Port"], "header_context_minimal": "package serve", "summary_en": "Defines configuration for HTTP server port", "keywords_en": ["app settings", "http config", "port setting", "server setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:27.714558", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "21ca0eeb95262b05", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 74, "end_line": 78, "text": "\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`", "n_tokens": 45, "primary_symbol": "serveHttpConfig", "primary_kind": "type", "primary_span": [74, 78], "def_symbols": [], "symbols": ["Logging", "struct", "Debug", "bool", "mapstructure", "debug", "Encoding", "string", "encoding", "logging", "Mongo", "xmongodb", "Config", "mongodb"], "doc_head": "\tLogging struct {\n\t\tDebug    bool   `mapstructure:\"debug\"`\n\t\tEncoding string `mapstructure:\"encoding\"`\n\t} `mapstructure:\"logging\"`\n\tMongo  xmongodb.Config `mapstructure:\"mongodb\"`", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:serveHttpConfig (struct)", "package": "serve", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "serveHttpConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["serveHttpConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:serveHttpConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["serveHttpConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1938], "all_end_bytes": [2509], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/xmongodb"], "symbols_referenced_strict": ["Config", "Debug", "Encoding", "Logging", "Mongo", "xmongodb.Config"], "header_context_minimal": "package serve\nimport \"go.impalastudios.com/aviation/liveflights/pkg/xmongodb\"", "summary_en": "Defines configuration settings for logging and MongoDB in a Go package", "keywords_en": ["debug mode", "logging config", "mongodb config"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:30.311810", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "27fc99e45dd95ffe", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 79, "end_line": 79, "text": "\tStores struct {", "n_tokens": 4, "primary_symbol": "serveHttpConfig", "primary_kind": "type", "primary_span": [79, 79], "def_symbols": [], "symbols": ["Stores", "struct"], "doc_head": "\tStores struct {", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:serveHttpConfig (struct)", "package": "serve", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "serveHttpConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["serveHttpConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:serveHttpConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["serveHttpConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1938], "all_end_bytes": [2509], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Stores"], "header_context_minimal": "package serve", "summary_en": "Stores configuration for HTTP server settings", "keywords_en": ["cache management", "error handling", "http settings", "request processing", "response formatting", "server configuration"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:32.792714", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "9cbec4b1519e3f05", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 80, "end_line": 85, "text": "\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`\n}\n", "n_tokens": 35, "primary_symbol": "serveHttpConfig", "primary_kind": "type", "primary_span": [80, 85], "def_symbols": [], "symbols": ["Archive", "struct", "BucketName", "string", "mapstructure", "bucket", "name", "archive", "stores"], "doc_head": "\t\tArchive struct {\n\t\t\tBucketName string `mapstructure:\"bucket-name\"`\n\t\t} `mapstructure:\"archive\"`\n\t} `mapstructure:\"stores\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:serveHttpConfig (struct)", "package": "serve", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "serveHttpConfig", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["serveHttpConfig"], "all_kinds": ["type"], "all_ast_paths": ["go:type:serveHttpConfig (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["serveHttpConfig"], "all_type_kinds": ["struct"], "all_start_bytes": [1938], "all_end_bytes": [2509], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Archive", "BucketName"], "header_context_minimal": "package serve", "summary_en": "Defines a struct for configuration related to storing archives in an S3 bucket", "keywords_en": ["archive storage", "bucket configuration", "configuration mapping", "mapstructure usage", "struct definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:35.633885", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "5c5f6bad10a68a43", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/http.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go", "rel_path": "cmd/serve/http.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 86, "end_line": 240, "text": "func runServeHttp(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\n\t// Config\n\tvar cfg serveHttpConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal db config\")\n\t}\n\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tsignal.Notify(quit, os.Interrupt)\n\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\n\t// i18n\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\ti18n.Register(v)\n\t\tcustomrules.Register(v)\n\t}\n\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(\"go.impalastudios.com/otel\"))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(\"go.impalastudios.com/otel\"))\n\n\t// Database\n\tdb, err := xmongodb.Connect(ctx, cfg.Mongo)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to connect to mongodb\")\n\t}\n\n\tdatabase := db.Database(cfg.Mongo.DB)\n\n\t// Services\n\tflightsUpdateRepo := mongodb.NewFlightsUpdateRepository(database)\n\n\ts3Client := xaws.NewS3ClientFromConfig(awsCfg, func(o *s3.Options) {\n\t\to.UsePathStyle = cfg.AWS.S3.UsePathStyle\n\t})\n\n\tsvc := core.NewService(flightsUpdateRepo, filesystem.NewS3Filesystem(cfg.Stores.Archive.BucketName, s3Client))\n\n\t// Routing\n\trouter := gin.New()\n\trouter.Use(otelginmetric.Middleware(\n\t\totelginmetric.WithRecordFilter(func(route string, _ *http.Request) bool {\n\t\t\treturn route != \"/__gw/health\"\n\t\t}),\n\t))\n\trouter.Use(requestid.New()...)\n\trouter.Use(\n\t\tginzap.GinzapWithConfig(logger, &ginzap.Config{\n\t\t\tTimeFormat: time.RFC3339,\n\t\t\tUTC:        true,\n\t\t\tSkipPaths:  []string{\"/__gw/health\"},\n\t\t\tContext: func(c *gin.Context) []zapcore.Field {\n\t\t\t\treturn []zapcore.Field{log.RequestIDExtractor(c), zap.String(\"type\", \"access_log\")}\n\t\t\t},\n\t\t}),\n\t\tginzap.RecoveryWithZap(logger, true),\n\t)\n\trouter.Use(otelgin.Middleware(\n\t\tcfg.App.Name,\n\t\totelgin.WithTracerProvider(tp),\n\t\totelgin.WithFilter(func(req *http.Request) bool {\n\t\t\treturn slices.Contains([]string{\"/__gw/health\"}, req.URL.Path)\n\t\t}),\n\t))\n\n\tgw := router.Group(\"/__gw\")\n\n\thandlersV0 := v0.New(svc)\n\thandlersV0.Register(gw)\n\n\thealthHandler := httphandlers.NewHealthHandler()\n\thealthHandler.Register(gw)\n\n\tsrv := http.Server{\n\t\tAddr:    fmt.Sprintf(\":%d\", viper.GetInt(\"app.http.port\")),\n\t\tHandler: router,\n\t}\n\n\tgo func() {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Error(context.TODO(), \"Error occurred while listening.\", zap.Error(err))\n\t\t}\n\t}()\n\n\t// Shutting down\n\t<-quit\n\n\tlog.Info(context.TODO(), \"Shutting down the REST server...\")\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Error(cmd.Context(), \"Error occurred while shutting down.\", zap.Error(err))\n\t}\n\n\tif err := tp.Shutdown(ctx); err != nil {\n\t\tlog.Error(cmd.Context(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tif err := mp.Shutdown(ctx); err != nil {\n\t\tlog.Error(cmd.Context(), \"Error occurred while shutting down the meter.\", zap.Error(err))\n\t}\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Info(context.TODO(), \"REST server shutdown timed out.\")\n\tdefault:\n\t\tlog.Info(context.TODO(), \"REST server shutdown gracefully.\")\n\t}\n\n\treturn nil\n}\n", "n_tokens": 1118, "primary_symbol": "runServeHttp", "primary_kind": "function", "primary_span": [86, 240], "def_symbols": [], "symbols": ["runServeHttp", "func", "cmd", "cobra", "Command", "string", "error", "ctx", "Context", "Config", "var", "cfg", "serveHttpConfig", "err", "viper", "Unmarshal", "nil", "return", "errors", "Wrap", "failed", "unmarshal", "config", "awsCfg", "xaws", "LoadAWSConfig", "AWS", "log", "Error", "Failed", "load", "zap", "quit", "make", "chan", "Signal", "defer", "close", "signal", "Notify", "Interrupt", "Logging", "logger", "New", "WithService", "App", "Name", "WithEncoding", "Encoding", "WithDebugEnabled", "Debug", "SetLogger", "DNS", "resolver", "Register", "dnssrvresolver", "i18n", "binding", "Validator", "Engine", "validator", "Validate", "customrules", "Tracing", "xotel", "NewTracerProvider", "TracerProviderConfig", "ServiceName", "Endpoint", "GetString", "otel", "tracer", "endpoint", "create", "provider", "SetTracerProvider", "SetTextMapPropagator", "propagation", "NewCompositeTextMapPropagator", "TraceContext", "Baggage", "SetGlobalTracer", "Tracer", "impalastudios", "com", "NewMeterProvider", "MeterProviderConfig", "meter", "Interval", "GetDuration", "interval", "SetMeterProvider", "SetGlobalMeter", "Meter", "Database", "xmongodb", "Connect", "Mongo", "connect", "mongodb", "database", "Services", "flightsUpdateRepo", "NewFlightsUpdateRepository", "s3Client", "NewS3ClientFromConfig", "Options", "UsePathStyle", "svc", "core", "NewService", "filesystem", "NewS3Filesystem", "Stores", "Archive", "BucketName", "Routing", "router", "gin", "Use", "otelginmetric", "Middleware", "WithRecordFilter", "route", "http", "Request", "bool", "__gw", "health", "requestid", "ginzap", "GinzapWithConfig", "TimeFormat", "time", "RFC3339", "UTC", "true", "SkipPaths", "zapcore", "Field", "RequestIDExtractor", "String", "type", "access_log", "RecoveryWithZap", "otelgin", "WithTracerProvider", "WithFilter", "req", "slices", "Contains", "URL", "Path", "Group", "handlersV0", "healthHandler", "httphandlers", "NewHealthHandler", "srv", "Server", "Addr", "fmt", "Sprintf", "GetInt", "app", "port", "Handler", "Info", "started", "Ready", "accept", "incoming", "requests", "ListenAndServe", "ErrServerClosed", "context", "TODO", "occurred", "while", "listening", "Shutting", "down", "the", "REST", "server", "cancel", "WithTimeout", "Background", "Second", "Shutdown", "shutting", "select", "case", "Done", "shutdown", "timed", "out", "default", "gracefully"], "doc_head": "func runServeHttp(cmd *cobra.Command, _ []string) error {\n\tctx := cmd.Context()\n\t// Config\n\tvar cfg serveHttpConfig\n\tif err := viper.Unmarshal(&cfg); err != nil {\n\t\treturn errors.Wrap(err, \"failed to unmarshal db config\")\n\t}\n\tawsCfg, err := xaws.LoadAWSConfig(ctx, &cfg.AWS)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to load AWS config\", zap.Error(err))\n\t}\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\tsignal.Notify(quit, os.Interrupt)\n\t// Logging\n\tlogger := log.New(\n\t\tlog.WithService(cfg.App.Name),\n\t\tlog.WithEncoding(cfg.Logging.Encoding),\n\t\tlog.WithDebugEnabled(cfg.Logging.Debug),\n\t)\n\tlog.SetLogger(logger)\n\t// DNS resolver\n\tresolver.Register(dnssrvresolver.New())\n\t// i18n\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\ti18n.Register(v)\n\t\tcustomrules.Register(v)\n\t}\n\t// Tracing\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: cfg.App.Name,\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\totel.SetTracerProvider(tp)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:runServeHttp/complete", "package": "serve", "node_kind": "function", "receiver": "", "function_name": "runServeHttp", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["runServeHttp"], "all_kinds": ["function"], "all_ast_paths": ["go:function:runServeHttp/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [2511], "all_end_bytes": [6759], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context", "fmt", "github.com/aws/aws-sdk-go-v2/service/s3", "github.com/cockroachdb/errors", "github.com/gin-contrib/zap", "github.com/gin-gonic/gin", "github.com/gin-gonic/gin/binding", "github.com/spf13/cobra", "github.com/spf13/viper", "go.impalastudios.com/aviation/liveflights/internal/adapters/filesystem", "go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http", "go.impalastudios.com/aviation/liveflights/internal/adapters/handlers/http/v0", "go.impalastudios.com/aviation/liveflights/internal/adapters/mongodb", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/aviation/liveflights/pkg/i18n", "go.impalastudios.com/aviation/liveflights/pkg/xaws", "go.impalastudios.com/aviation/liveflights/pkg/xmongodb", "go.impalastudios.com/grpc/dnssrvresolver", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.impalastudios.com/otel/gingonic", "go.impalastudios.com/requestid/gin", "go.impalastudios.com/validation/customrules", "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin", "go.opentelemetry.io/otel", "go.opentelemetry.io/otel/propagation", "go.uber.org/zap", "go.uber.org/zap/zapcore", "google.golang.org/grpc/resolver", "net/http", "os", "os/signal", "slices", "time"], "symbols_referenced_strict": ["Addr", "App", "Archive", "Archive.BucketName", "Background", "Baggage", "BucketName", "Command", "Config", "Connect", "Contains", "Context", "Database", "Debug", "Done", "Encoding", "Endpoint", "Engine", "ErrServerClosed", "Error", "Field", "GetDuration", "GetInt", "GetString", "GinzapWithConfig", "Group", "Handler", "Info", "Interrupt", "Interval", "ListenAndServe", "LoadAWSConfig", "Logging", "Meter", "MeterProviderConfig", "Middleware", "Mongo", "Name", "New", "NewCompositeTextMapPropagator", "NewFlightsUpdateRepository", "NewHealthHandler", "NewMeterProvider", "NewS3ClientFromConfig", "NewS3Filesystem", "NewService", "NewTracerProvider", "Notify", "Options", "Path", "RecoveryWithZap", "Register", "Request", "RequestIDExtractor", "S3.UsePathStyle", "Second", "Server", "ServiceName", "SetGlobalMeter", "SetGlobalTracer", "SetLogger", "SetMeterProvider", "SetTextMapPropagator", "SetTracerProvider", "Shutdown", "Signal", "SkipPaths", "Sprintf", "Stores", "String", "TimeFormat", "TraceContext", "Tracer", "TracerProviderConfig", "Unmarshal", "UsePathStyle", "Validate", "Validator", "WithDebugEnabled", "WithEncoding", "WithFilter", "WithRecordFilter", "WithService", "WithTimeout", "WithTracerProvider", "Wrap", "binding.Validator", "cfg.AWS", "cfg.App", "cfg.Logging", "cfg.Mongo", "cfg.Stores", "cmd.Context", "cobra.Command", "context.Background", "context.TODO", "context.WithTimeout", "core.NewService", "ctx.Done", "customrules.Register", "db.Database", "dnssrvresolver.New", "errors.Is", "errors.Wrap", "filesystem.NewS3Filesystem", "fmt.Sprintf", "gin.Context", "gin.New", "ginzap.Config", "ginzap.GinzapWithConfig", "ginzap.RecoveryWithZap", "handlersV0.Register", "healthHandler.Register", "http.ErrServerClosed", "http.Request", "http.Server", "httphandlers.NewHealthHandler", "i18n.Register", "log.Error", "log.Info", "log.New", "log.RequestIDExtractor", "log.SetLogger", "log.WithDebugEnabled", "log.WithEncoding", "log.WithService", "logger.Info", "mongodb.NewFlightsUpdateRepository", "mp.Meter", "mp.Shutdown", "o.UsePathStyle", "os.Interrupt", "os.Signal", "otel.SetMeterProvider", "otel.SetTextMapPropagator", "otel.SetTracerProvider", "otelgin.Middleware", "otelgin.WithFilter", "otelgin.WithTracerProvider", "otelginmetric.Middleware", "otelginmetric.WithRecordFilter", "propagation.Baggage", "propagation.NewCompositeTextMapPropagator", "propagation.TraceContext", "req.URL", "requestid.New", "resolver.Register", "router.Group", "router.Use", "s3.Options", "signal.Notify", "slices.Contains", "srv.ListenAndServe", "srv.Shutdown", "time.RFC3339", "time.Second", "tp.Shutdown", "tp.Tracer", "v0.New", "validator.Validate", "viper.GetDuration", "viper.GetInt", "viper.GetString", "viper.Unmarshal", "xaws.LoadAWSConfig", "xaws.NewS3ClientFromConfig", "xmongodb.Connect", "xotel.MeterProviderConfig", "xotel.NewMeterProvider", "xotel.NewTracerProvider", "xotel.SetGlobalMeter", "xotel.SetGlobalTracer", "xotel.TracerProviderConfig", "zap.Error", "zap.String", "zapcore.Field"], "header_context_minimal": "package serve\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/aws/aws-sdk-go-v2/service/s3\"\n    \"github.com/cockroachdb/errors\"\n    \"github.com/gin-contrib/zap\"\n)", "summary_en": "Initializes and starts HTTP server with configuration, logging, AWS, DNS resolver, i18n, tracing, and metering", "keywords_en": ["aws initialization", "configuration loading", "dns resolver registration", "logging configuration", "meter provider", "server setup", "tracing provider"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:35.638037", "file_synopsis_hash": "18802098ce21e620", "chunk_text_hash": "da711400c8e5c27f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/http.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package serve\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "serve"], "doc_head": "package serve", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "serve", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package serve", "summary_en": "Handles HTTP requests, serving data efficiently with error checking", "keywords_en": ["cache utilization", "data serving", "error checking", "http handling", "performance optimization", "request management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:35.642531", "file_synopsis_hash": "a0f4e10c3c8279b7", "chunk_text_hash": "d04ac135de6af195", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 7, "text": "import (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\n", "n_tokens": 15, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 7], "def_symbols": [], "symbols": ["import", "github", "com", "spf13", "cobra", "time"], "doc_head": "import (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "serve", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package serve", "summary_en": "Imports packages for command-line operations and time handling in a Go application", "keywords_en": ["command line operations", "package imports", "time package"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:38.305172", "file_synopsis_hash": "a0f4e10c3c8279b7", "chunk_text_hash": "eec1e5f2543d58ca", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "cmd/serve/root.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go", "rel_path": "cmd/serve/root.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 8, "end_line": 22, "text": "func New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeHttpCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}\n", "n_tokens": 120, "primary_symbol": "New", "primary_kind": "function", "primary_span": [8, 22], "def_symbols": [], "symbols": ["New", "func", "cobra", "Command", "cmd", "Use", "serve", "Short", "Serve", "AddCommand", "newServeHttpCommand", "PersistentFlags", "String", "otel", "tracer", "endpoint", "localhost", "The", "URL", "the", "tracing", "collector", "meter", "Duration", "interval", "time", "Second", "which", "metrics", "will", "reported", "return"], "doc_head": "func New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\tcmd.AddCommand(newServeHttpCommand())\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\treturn cmd\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:New/complete", "package": "serve", "node_kind": "function", "receiver": "", "function_name": "New", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["New"], "all_kinds": ["function"], "all_ast_paths": ["go:function:New/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [61], "all_end_bytes": [564], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["github.com/spf13/cobra", "time"], "symbols_referenced_strict": ["AddCommand", "Command", "Duration", "New", "PersistentFlags", "Second", "Short", "String", "cmd.AddCommand", "cmd.PersistentFlags", "cobra.Command", "time.Second"], "header_context_minimal": "package serve\nimport (\n    \"github.com/spf13/cobra\"\n    \"time\"\n)", "summary_en": "Creates a new Cobra command for serving with tracing and metrics", "keywords_en": ["cobra command", "metrics interval", "serve command", "tracing endpoint"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:41.351217", "file_synopsis_hash": "a0f4e10c3c8279b7", "chunk_text_hash": "59128c7df5b3177f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/cmd/serve/root.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package core\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "core"], "doc_head": "package core", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Contains core utilities and functions", "keywords_en": ["core utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:43.205316", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "668b5c25d17e472b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 6, "text": "import (\n\t\"time\"\n)\n", "n_tokens": 6, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 6], "def_symbols": [], "symbols": ["import", "time"], "doc_head": "import (\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Imports time package for managing time-related operations", "keywords_en": ["time management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:45.090187", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "4f2b468a11f8a8cb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 7, "end_line": 18, "text": "// ClassificationComparator is a comparator for airlines and airports classification\ntype ClassificationComparator int8\n\nconst (\n\t// ClassificationGreaterComparator is a comparator for greater than\n\tClassificationGreaterComparator ClassificationComparator = iota + 1\n\t// ClassificationEqualComparator is a comparator for equal\n\tClassificationEqualComparator\n\t// ClassificationLesserComparator is a comparator for lesser than\n\tClassificationLesserComparator\n)\n", "n_tokens": 80, "primary_symbol": "ClassificationComparator", "primary_kind": "type", "primary_span": [7, 18], "def_symbols": [], "symbols": ["ClassificationComparator", "comparator", "for", "airlines", "and", "airports", "classification", "type", "int8", "const", "ClassificationGreaterComparator", "greater", "than", "iota", "ClassificationEqualComparator", "equal", "ClassificationLesserComparator", "lesser"], "doc_head": "// ClassificationComparator is a comparator for airlines and airports classification\ntype ClassificationComparator int8\nconst (\n\t// ClassificationGreaterComparator is a comparator for greater than\n\tClassificationGreaterComparator ClassificationComparator = iota + 1\n\t// ClassificationEqualComparator is a comparator for equal\n\tClassificationEqualComparator\n\t// ClassificationLesserComparator is a comparator for lesser than\n\tClassificationLesserComparator\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:ClassificationComparator (alias)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "ClassificationComparator", "type_kind": "alias", "is_multi_declaration": false, "all_symbols": ["ClassificationComparator"], "all_kinds": ["type"], "all_ast_paths": ["go:type:ClassificationComparator (alias)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["ClassificationComparator"], "all_type_kinds": ["alias"], "all_start_bytes": [124], "all_end_bytes": [153], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["ClassificationComparator", "ClassificationEqualComparator", "ClassificationGreaterComparator", "ClassificationLesserComparator"], "header_context_minimal": "package core", "summary_en": "Defines comparators for airline and airport classifications", "keywords_en": ["classification comparators"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:47.504403", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "b02f5bd7779e0589", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 19, "end_line": 19, "text": "type (", "n_tokens": 2, "primary_symbol": "", "primary_kind": "unknown", "primary_span": [19, 19], "def_symbols": [], "symbols": ["type"], "doc_head": "type (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "core", "node_kind": "unknown", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Handles user input and calls weather API to fetch forecast", "keywords_en": ["cache management", "error handling", "user input", "weather api"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:47.507393", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "bd71d395ba645586", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 20, "end_line": 24, "text": "\tClassification struct {\n\t\tC          int8\n\t\tComparator ClassificationComparator\n\t}\n", "n_tokens": 18, "primary_symbol": "Classification", "primary_kind": "type", "primary_span": [20, 24], "def_symbols": [], "symbols": ["Classification", "struct", "int8", "Comparator", "ClassificationComparator"], "doc_head": "\tClassification struct {\n\t\tC          int8\n\t\tComparator ClassificationComparator\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Classification (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Classification", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["Classification"], "all_kinds": ["type"], "all_ast_paths": ["go:type:Classification (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["Classification"], "all_type_kinds": ["struct"], "all_start_bytes": [502], "all_end_bytes": [584], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Classification", "ClassificationComparator", "Comparator"], "header_context_minimal": "package core", "summary_en": "Defines a structure for classification with an integer and comparator", "keywords_en": ["classification struct", "comparator field", "integer field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:49.721498", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "d8eacf3d05b9b55f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 25, "end_line": 32, "text": "\tAirline struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}\n", "n_tokens": 40, "primary_symbol": "Airline", "primary_kind": "type", "primary_span": [25, 32], "def_symbols": [], "symbols": ["Airline", "struct", "string", "Designator", "IATA", "ICAO", "Classification", "int64"], "doc_head": "\tAirline struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Airline (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Airline", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["Airline"], "all_kinds": ["type"], "all_ast_paths": ["go:type:Airline (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["Airline"], "all_type_kinds": ["struct"], "all_start_bytes": [587], "all_end_bytes": [727], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Airline", "Classification", "Designator"], "header_context_minimal": "package core", "summary_en": "Defines an Airline struct with fields for ID, Designator, IATA, ICAO, and Classification", "keywords_en": [], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:52.691898", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "10d4c1abcccddb17", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 33, "end_line": 40, "text": "\tAirport struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}\n", "n_tokens": 40, "primary_symbol": "Airport", "primary_kind": "type", "primary_span": [33, 40], "def_symbols": [], "symbols": ["Airport", "struct", "string", "Designator", "IATA", "ICAO", "Classification", "int64"], "doc_head": "\tAirport struct {\n\t\tID             string\n\t\tDesignator     string\n\t\tIATA           *string\n\t\tICAO           *string\n\t\tClassification int64\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Airport (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Airport", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["Airport"], "all_kinds": ["type"], "all_ast_paths": ["go:type:Airport (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["Airport"], "all_type_kinds": ["struct"], "all_start_bytes": [730], "all_end_bytes": [870], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Airport", "Classification", "Designator"], "header_context_minimal": "package core", "summary_en": "Defines an Airport struct with ID, Designator, IATA, ICAO, and Classification fields", "keywords_en": ["airport definition", "classification field", "designator field", "iata pointer", "icao pointer", "id field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:56.017900", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "5d5e940d9d2266ed", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 41, "end_line": 62, "text": "\tLiveFlight struct {\n\t\tID                    string\n\t\tFlightID              *string\n\t\tFlightNumber          string\n\t\tAirlineDesignator     string\n\t\tAirlineClassification int\n\t\tDepartureTime         time.Time\n\t\tDepartureAirportIATA  string\n\t\tDepartureAirportICAO  string\n\t\tArrivalAirportIATA    string\n\t\tArrivalAirportICAO    string\n\t\tPosition              Coordinate\n\t\tAltitude              float64\n\t\tHeadingDirection      float64\n\t\tGroundSpeed           float64\n\t\tVerticalSpeed         float64\n\t\tSquawk                int\n\t\tTracks                []TrackPoint\n\t\tCreatedAt             time.Time\n\t\tUpdatedAt             time.Time\n\t}\n", "n_tokens": 159, "primary_symbol": "LiveFlight", "primary_kind": "type", "primary_span": [41, 62], "def_symbols": [], "symbols": ["LiveFlight", "struct", "string", "FlightID", "FlightNumber", "AirlineDesignator", "AirlineClassification", "int", "DepartureTime", "time", "Time", "DepartureAirportIATA", "DepartureAirportICAO", "ArrivalAirportIATA", "ArrivalAirportICAO", "Position", "Coordinate", "Altitude", "float64", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "Tracks", "TrackPoint", "CreatedAt", "UpdatedAt"], "doc_head": "\tLiveFlight struct {\n\t\tID                    string\n\t\tFlightID              *string\n\t\tFlightNumber          string\n\t\tAirlineDesignator     string\n\t\tAirlineClassification int\n\t\tDepartureTime         time.Time\n\t\tDepartureAirportIATA  string\n\t\tDepartureAirportICAO  string\n\t\tArrivalAirportIATA    string\n\t\tArrivalAirportICAO    string\n\t\tPosition              Coordinate\n\t\tAltitude              float64\n\t\tHeadingDirection      float64\n\t\tGroundSpeed           float64\n\t\tVerticalSpeed         float64\n\t\tSquawk                int\n\t\tTracks                []TrackPoint\n\t\tCreatedAt             time.Time\n\t\tUpdatedAt             time.Time\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:LiveFlight (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "LiveFlight", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["LiveFlight"], "all_kinds": ["type"], "all_ast_paths": ["go:type:LiveFlight (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["LiveFlight"], "all_type_kinds": ["struct"], "all_start_bytes": [873], "all_end_bytes": [1502], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirlineClassification", "AirlineDesignator", "Altitude", "ArrivalAirportIATA", "ArrivalAirportICAO", "Coordinate", "CreatedAt", "DepartureAirportIATA", "DepartureAirportICAO", "DepartureTime", "FlightID", "FlightNumber", "GroundSpeed", "HeadingDirection", "LiveFlight", "Position", "Squawk", "Time", "TrackPoint", "Tracks", "UpdatedAt", "VerticalSpeed", "time.Time"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Defines a structure for live flight data including details like ID, departure and arrival times, position, altitude, and tracks", "keywords_en": ["altitude tracking", "departure time", "flight details", "live flight data", "position coordinates", "track points"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:13:59.845212", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "252d3940e84113c5", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 63, "end_line": 67, "text": "\tCoordinate struct {\n\t\tLat float64\n\t\tLon float64\n\t}\n", "n_tokens": 19, "primary_symbol": "Coordinate", "primary_kind": "type", "primary_span": [63, 67], "def_symbols": [], "symbols": ["Coordinate", "struct", "Lat", "float64", "Lon"], "doc_head": "\tCoordinate struct {\n\t\tLat float64\n\t\tLon float64\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Coordinate (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Coordinate", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["Coordinate"], "all_kinds": ["type"], "all_ast_paths": ["go:type:Coordinate (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["Coordinate"], "all_type_kinds": ["struct"], "all_start_bytes": [1505], "all_end_bytes": [1555], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Coordinate", "Lat", "Lon"], "header_context_minimal": "package core", "summary_en": "Defines a struct for geographic coordinates with latitude and longitude", "keywords_en": ["coordinate system", "data model", "geographic location", "struct definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:02.482474", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "0c43420e74d9c0c1", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 68, "end_line": 78, "text": "\tTrackPoint struct {\n\t\tLiveFlightID     string\n\t\tPosition         Coordinate\n\t\tAltitude         float64\n\t\tHeadingDirection float64\n\t\tGroundSpeed      float64\n\t\tVerticalSpeed    float64\n\t\tSquawk           int\n\t\tCreatedAt        time.Time\n\t}\n", "n_tokens": 66, "primary_symbol": "TrackPoint", "primary_kind": "type", "primary_span": [68, 78], "def_symbols": [], "symbols": ["TrackPoint", "struct", "LiveFlightID", "string", "Position", "Coordinate", "Altitude", "float64", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "int", "CreatedAt", "time", "Time"], "doc_head": "\tTrackPoint struct {\n\t\tLiveFlightID     string\n\t\tPosition         Coordinate\n\t\tAltitude         float64\n\t\tHeadingDirection float64\n\t\tGroundSpeed      float64\n\t\tVerticalSpeed    float64\n\t\tSquawk           int\n\t\tCreatedAt        time.Time\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:TrackPoint (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "TrackPoint", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["TrackPoint"], "all_kinds": ["type"], "all_ast_paths": ["go:type:TrackPoint (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["TrackPoint"], "all_type_kinds": ["struct"], "all_start_bytes": [1558], "all_end_bytes": [1796], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Altitude", "Coordinate", "CreatedAt", "GroundSpeed", "HeadingDirection", "LiveFlightID", "Position", "Squawk", "Time", "TrackPoint", "VerticalSpeed", "time.Time"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Defines a struct for track points with flight details", "keywords_en": ["airspace parameters", "flight details", "geographic coordinates", "struct definition", "time tracking", "track point"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:05.398778", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "960f8eca0e6df8ee", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 79, "end_line": 96, "text": "\tLiveFlightUpdate struct {\n\t\tID                   string\n\t\tFlightNumber         string\n\t\tAirlineDesignator    string\n\t\tDepartureTime        time.Time\n\t\tDepartureAirportIATA string\n\t\tDepartureAirportICAO string\n\t\tArrivalAirportIATA   string\n\t\tArrivalAirportICAO   string\n\t\tPosition             Coordinate\n\t\tAltitude             float64\n\t\tHeadingDirection     float64\n\t\tGroundSpeed          float64\n\t\tVerticalSpeed        float64\n\t\tSquawk               int\n\t\tCreatedAt            time.Time\n\t}\n", "n_tokens": 128, "primary_symbol": "LiveFlightUpdate", "primary_kind": "type", "primary_span": [79, 96], "def_symbols": [], "symbols": ["LiveFlightUpdate", "struct", "string", "FlightNumber", "AirlineDesignator", "DepartureTime", "time", "Time", "DepartureAirportIATA", "DepartureAirportICAO", "ArrivalAirportIATA", "ArrivalAirportICAO", "Position", "Coordinate", "Altitude", "float64", "HeadingDirection", "GroundSpeed", "VerticalSpeed", "Squawk", "int", "CreatedAt"], "doc_head": "\tLiveFlightUpdate struct {\n\t\tID                   string\n\t\tFlightNumber         string\n\t\tAirlineDesignator    string\n\t\tDepartureTime        time.Time\n\t\tDepartureAirportIATA string\n\t\tDepartureAirportICAO string\n\t\tArrivalAirportIATA   string\n\t\tArrivalAirportICAO   string\n\t\tPosition             Coordinate\n\t\tAltitude             float64\n\t\tHeadingDirection     float64\n\t\tGroundSpeed          float64\n\t\tVerticalSpeed        float64\n\t\tSquawk               int\n\t\tCreatedAt            time.Time\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:LiveFlightUpdate (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "LiveFlightUpdate", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["LiveFlightUpdate"], "all_kinds": ["type"], "all_ast_paths": ["go:type:LiveFlightUpdate (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["LiveFlightUpdate"], "all_type_kinds": ["struct"], "all_start_bytes": [1799], "all_end_bytes": [2288], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirlineDesignator", "Altitude", "ArrivalAirportIATA", "ArrivalAirportICAO", "Coordinate", "CreatedAt", "DepartureAirportIATA", "DepartureAirportICAO", "DepartureTime", "FlightNumber", "GroundSpeed", "HeadingDirection", "LiveFlightUpdate", "Position", "Squawk", "Time", "VerticalSpeed", "time.Time"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "This code defines a structure for representing live flight updates with various attributes", "keywords_en": ["airline information", "coordinate position", "live data", "safety codes", "time tracking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:08.718218", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "8a8881ab789af269", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 97, "end_line": 102, "text": "\tBoundingBox struct {\n\t\tTopLeft     *Coordinate\n\t\tBottomRight *Coordinate\n\t}\n)\n", "n_tokens": 22, "primary_symbol": "BoundingBox", "primary_kind": "type", "primary_span": [97, 102], "def_symbols": [], "symbols": ["BoundingBox", "struct", "TopLeft", "Coordinate", "BottomRight"], "doc_head": "\tBoundingBox struct {\n\t\tTopLeft     *Coordinate\n\t\tBottomRight *Coordinate\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:BoundingBox (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "BoundingBox", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["BoundingBox"], "all_kinds": ["type"], "all_ast_paths": ["go:type:BoundingBox (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["BoundingBox"], "all_type_kinds": ["struct"], "all_start_bytes": [2291], "all_end_bytes": [2366], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["BottomRight", "BoundingBox", "Coordinate", "TopLeft"], "header_context_minimal": "package core", "summary_en": "Defines a BoundingBox struct with top-left and bottom-right coordinates", "keywords_en": ["bounding box", "geometric shape"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:10.967622", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "09898c6253ac5cbf", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 103, "end_line": 103, "text": "type (", "n_tokens": 2, "primary_symbol": "", "primary_kind": "unknown", "primary_span": [103, 103], "def_symbols": [], "symbols": ["type"], "doc_head": "type (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "core", "node_kind": "unknown", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Handles user input and calls weather API to fetch forecast", "keywords_en": ["cache management", "error handling", "user input", "weather api"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:10.970390", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "bd71d395ba645586", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 104, "end_line": 110, "text": "\tEnrichedFlightData struct {\n\t\tLiveFlightID   string\n\t\tFlightID       *string\n\t\tClassification int64\n\t}\n)\n", "n_tokens": 33, "primary_symbol": "EnrichedFlightData", "primary_kind": "type", "primary_span": [104, 110], "def_symbols": [], "symbols": ["EnrichedFlightData", "struct", "LiveFlightID", "string", "FlightID", "Classification", "int64"], "doc_head": "\tEnrichedFlightData struct {\n\t\tLiveFlightID   string\n\t\tFlightID       *string\n\t\tClassification int64\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:EnrichedFlightData (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "EnrichedFlightData", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["EnrichedFlightData"], "all_kinds": ["type"], "all_ast_paths": ["go:type:EnrichedFlightData (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["EnrichedFlightData"], "all_type_kinds": ["struct"], "all_start_bytes": [2378], "all_end_bytes": [2480], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Classification", "EnrichedFlightData", "FlightID", "LiveFlightID"], "header_context_minimal": "package core", "summary_en": "Defines a structure for enriched flight data", "keywords_en": ["flight data", "live flight id", "structure definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:13.298655", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "2aa970a881d3d90f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#13", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 111, "end_line": 111, "text": "type (", "n_tokens": 2, "primary_symbol": "", "primary_kind": "unknown", "primary_span": [111, 111], "def_symbols": [], "symbols": ["type"], "doc_head": "type (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "core", "node_kind": "unknown", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Handles user input and calls weather API to fetch forecast", "keywords_en": ["cache management", "error handling", "user input", "weather api"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:13.301116", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "bd71d395ba645586", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#14", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go", "rel_path": "internal/core/models.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 112, "end_line": 118, "text": "\tFlightsWithin struct {\n\t\tBoundingBox           *BoundingBox\n\t\tMaxAge                time.Duration\n\t\tAirlineClassification *Classification\n\t}\n)\n", "n_tokens": 32, "primary_symbol": "FlightsWithin", "primary_kind": "type", "primary_span": [112, 118], "def_symbols": [], "symbols": ["FlightsWithin", "struct", "BoundingBox", "MaxAge", "time", "Duration", "AirlineClassification", "Classification"], "doc_head": "\tFlightsWithin struct {\n\t\tBoundingBox           *BoundingBox\n\t\tMaxAge                time.Duration\n\t\tAirlineClassification *Classification\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:FlightsWithin (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "FlightsWithin", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["FlightsWithin"], "all_kinds": ["type"], "all_ast_paths": ["go:type:FlightsWithin (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["FlightsWithin"], "all_type_kinds": ["struct"], "all_start_bytes": [2492], "all_end_bytes": [2632], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirlineClassification", "BoundingBox", "Classification", "Duration", "FlightsWithin", "MaxAge", "time.Duration"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Defines a struct for flights within a bounding box with max age and airline classification criteria", "keywords_en": ["bounding box", "classification criteria", "flights within", "max age"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:16.020934", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "5fcff170d6a5750e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/models.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package core\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "core"], "doc_head": "package core", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Contains core utilities and functions", "keywords_en": ["core utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:16.027784", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "668b5c25d17e472b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 7, "text": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n)\n", "n_tokens": 15, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 7], "def_symbols": [], "symbols": ["import", "context", "github", "com", "cockroachdb", "errors"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Imports context and errors packages for Go language", "keywords_en": ["context management", "error handling", "go language"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:18.385819", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "3765654b46e91dd3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 8, "end_line": 14, "text": "//go:generate mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype liveFlightsRepository interface {\n\tFilter(context.Context, *FlightsWithin) ([]*LiveFlight, error)\n\tGetFlightDetailsByLiveFlightID(context.Context, string) (*LiveFlight, error)\n\tGetFlightDetailsByFlightID(context.Context, string) (*LiveFlight, error)\n}\n", "n_tokens": 86, "primary_symbol": "liveFlightsRepository", "primary_kind": "type", "primary_span": [8, 14], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "service", "destination", "mocks", "service_mocks", "package", "type", "liveFlightsRepository", "interface", "Filter", "context", "Context", "FlightsWithin", "LiveFlight", "error", "GetFlightDetailsByLiveFlightID", "string", "GetFlightDetailsByFlightID"], "doc_head": "//go:generate mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype liveFlightsRepository interface {\n\tFilter(context.Context, *FlightsWithin) ([]*LiveFlight, error)\n\tGetFlightDetailsByLiveFlightID(context.Context, string) (*LiveFlight, error)\n\tGetFlightDetailsByFlightID(context.Context, string) (*LiveFlight, error)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:liveFlightsRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "liveFlightsRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["liveFlightsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:liveFlightsRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["liveFlightsRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [167], "all_end_bytes": [418], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "Filter", "FlightsWithin", "GetFlightDetailsByFlightID", "GetFlightDetailsByLiveFlightID", "LiveFlight", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for accessing flight details with filtering capabilities", "keywords_en": ["context management", "error handling", "filtering support", "flight access"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:21.162205", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "4996e7145217f562", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 15, "end_line": 19, "text": "type filesystemLiveFlightsRepository interface {\n\tGetLiveFlight(context.Context, string) (*LiveFlight, error)\n\tSaveLiveFlight(context.Context, string, *LiveFlight) error\n}\n", "n_tokens": 38, "primary_symbol": "filesystemLiveFlightsRepository", "primary_kind": "type", "primary_span": [15, 19], "def_symbols": [], "symbols": ["type", "filesystemLiveFlightsRepository", "interface", "GetLiveFlight", "context", "Context", "string", "LiveFlight", "error", "SaveLiveFlight"], "doc_head": "type filesystemLiveFlightsRepository interface {\n\tGetLiveFlight(context.Context, string) (*LiveFlight, error)\n\tSaveLiveFlight(context.Context, string, *LiveFlight) error\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:filesystemLiveFlightsRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "filesystemLiveFlightsRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["filesystemLiveFlightsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:filesystemLiveFlightsRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["filesystemLiveFlightsRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [425], "all_end_bytes": [591], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "GetLiveFlight", "LiveFlight", "SaveLiveFlight", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for a repository managing live flight data in the filesystem", "keywords_en": ["error handling", "filesystem management", "interface definition", "live flight", "repository operations"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:23.927477", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "17df672e6c247381", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 20, "end_line": 24, "text": "type Service struct {\n\trepo liveFlightsRepository\n\tfs   filesystemLiveFlightsRepository\n}\n", "n_tokens": 20, "primary_symbol": "Service", "primary_kind": "type", "primary_span": [20, 24], "def_symbols": [], "symbols": ["type", "Service", "struct", "repo", "liveFlightsRepository", "filesystemLiveFlightsRepository"], "doc_head": "type Service struct {\n\trepo liveFlightsRepository\n\tfs   filesystemLiveFlightsRepository\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Service (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Service", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["Service"], "all_kinds": ["type"], "all_ast_paths": ["go:type:Service (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["Service"], "all_type_kinds": ["struct"], "all_start_bytes": [598], "all_end_bytes": [682], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Service"], "header_context_minimal": "package core", "summary_en": "defines a Service struct with repositories for live flights and filesystem operations", "keywords_en": ["filesystem operations", "live flights", "repository management", "service definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:26.336028", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "176b63652bcfadf5", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 25, "end_line": 31, "text": "func NewService(repo liveFlightsRepository, fs filesystemLiveFlightsRepository) *Service {\n\treturn &Service{\n\t\trepo: repo,\n\t\tfs:   fs,\n\t}\n}\n", "n_tokens": 38, "primary_symbol": "NewService", "primary_kind": "function", "primary_span": [25, 31], "def_symbols": [], "symbols": ["NewService", "func", "repo", "liveFlightsRepository", "filesystemLiveFlightsRepository", "Service", "return"], "doc_head": "func NewService(repo liveFlightsRepository, fs filesystemLiveFlightsRepository) *Service {\n\treturn &Service{\n\t\trepo: repo,\n\t\tfs:   fs,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewService/complete", "package": "core", "node_kind": "function", "receiver": "", "function_name": "NewService", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewService"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewService/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [684], "all_end_bytes": [823], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["NewService", "Service"], "header_context_minimal": "package core", "summary_en": "Creates a new service instance with dependencies injected", "keywords_en": ["dependency injection", "repository setup", "service creation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:28.539368", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "f5e114f3d60e9e80", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 35, "text": "func (s *Service) FilterLiveFlights(ctx context.Context, f *FlightsWithin) ([]*LiveFlight, error) {\n\treturn s.repo.Filter(ctx, f)\n}\n", "n_tokens": 37, "primary_symbol": "FilterLiveFlights", "primary_kind": "method", "primary_span": [32, 35], "def_symbols": [], "symbols": ["FilterLiveFlights", "func", "Service", "ctx", "context", "Context", "FlightsWithin", "LiveFlight", "error", "return", "repo", "Filter"], "doc_head": "func (s *Service) FilterLiveFlights(ctx context.Context, f *FlightsWithin) ([]*LiveFlight, error) {\n\treturn s.repo.Filter(ctx, f)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*Service).FilterLiveFlights/complete", "package": "core", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "FilterLiveFlights", "type_name": "Service", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["FilterLiveFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*Service).FilterLiveFlights/complete"], "all_roles": ["complete"], "all_receivers": ["s *Service"], "all_type_names": ["Service"], "all_type_kinds": [null], "all_start_bytes": [825], "all_end_bytes": [956], "primary_index": 0, "all_receivers_normalized": ["(*Service)"], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "Filter", "FilterLiveFlights", "FlightsWithin", "LiveFlight", "Service", "context.Context", "s.repo"], "header_context_minimal": "package core\nimport \"context\"\n// receiver: s *Service", "summary_en": "This function filters live flights using a repository method", "keywords_en": ["context handling", "error management", "filter live flights", "flight filtering", "repository interaction", "service functionality"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:31.267771", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "248c79a49aedf09c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 36, "end_line": 39, "text": "func (s *Service) GetLiveFlightDetailsByLiveFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\treturn s.repo.GetFlightDetailsByLiveFlightID(ctx, id)\n}\n", "n_tokens": 43, "primary_symbol": "GetLiveFlightDetailsByLiveFlightID", "primary_kind": "method", "primary_span": [36, 39], "def_symbols": [], "symbols": ["GetLiveFlightDetailsByLiveFlightID", "func", "Service", "ctx", "context", "Context", "string", "LiveFlight", "error", "return", "repo", "GetFlightDetailsByLiveFlightID"], "doc_head": "func (s *Service) GetLiveFlightDetailsByLiveFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\treturn s.repo.GetFlightDetailsByLiveFlightID(ctx, id)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*Service).GetLiveFlightDetailsByLiveFlightID/complete", "package": "core", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "GetLiveFlightDetailsByLiveFlightID", "type_name": "Service", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetLiveFlightDetailsByLiveFlightID"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*Service).GetLiveFlightDetailsByLiveFlightID/complete"], "all_roles": ["complete"], "all_receivers": ["s *Service"], "all_type_names": ["Service"], "all_type_kinds": [null], "all_start_bytes": [958], "all_end_bytes": [1122], "primary_index": 0, "all_receivers_normalized": ["(*Service)"], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "GetFlightDetailsByLiveFlightID", "GetLiveFlightDetailsByLiveFlightID", "LiveFlight", "Service", "context.Context", "s.repo"], "header_context_minimal": "package core\nimport \"context\"\n// receiver: s *Service", "summary_en": "Retrieves live flight details by its ID using repository method", "keywords_en": ["context handling", "error management", "flight retrieval", "live flight details", "repository method", "service method"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:34.300330", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "969ce88d6aac22da", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go", "rel_path": "internal/core/service.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 40, "end_line": 52, "text": "func (s *Service) GetLiveFlightDetailsByFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\tf, err := s.fs.GetLiveFlight(ctx, id)\n\tif err != nil && !errors.Is(err, ErrFlightNotFound) {\n\t\treturn nil, errors.Wrap(err, \"failed to get flight tracks from filesystem\")\n\t}\n\n\tif f != nil {\n\t\treturn f, nil\n\t}\n\n\treturn s.repo.GetFlightDetailsByFlightID(ctx, id)\n}\n", "n_tokens": 101, "primary_symbol": "GetLiveFlightDetailsByFlightID", "primary_kind": "method", "primary_span": [40, 52], "def_symbols": [], "symbols": ["GetLiveFlightDetailsByFlightID", "func", "Service", "ctx", "context", "Context", "string", "LiveFlight", "error", "err", "GetLiveFlight", "nil", "errors", "ErrFlightNotFound", "return", "Wrap", "failed", "get", "flight", "tracks", "from", "filesystem", "repo", "GetFlightDetailsByFlightID"], "doc_head": "func (s *Service) GetLiveFlightDetailsByFlightID(ctx context.Context, id string) (*LiveFlight, error) {\n\tf, err := s.fs.GetLiveFlight(ctx, id)\n\tif err != nil && !errors.Is(err, ErrFlightNotFound) {\n\t\treturn nil, errors.Wrap(err, \"failed to get flight tracks from filesystem\")\n\t}\n\tif f != nil {\n\t\treturn f, nil\n\t}\n\treturn s.repo.GetFlightDetailsByFlightID(ctx, id)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*Service).GetLiveFlightDetailsByFlightID/complete", "package": "core", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "GetLiveFlightDetailsByFlightID", "type_name": "Service", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetLiveFlightDetailsByFlightID"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*Service).GetLiveFlightDetailsByFlightID/complete"], "all_roles": ["complete"], "all_receivers": ["s *Service"], "all_type_names": ["Service"], "all_type_kinds": [null], "all_start_bytes": [1124], "all_end_bytes": [1491], "primary_index": 0, "all_receivers_normalized": ["(*Service)"], "imports_used_minimal": ["context", "github.com/cockroachdb/errors"], "symbols_referenced_strict": ["Context", "ErrFlightNotFound", "GetFlightDetailsByFlightID", "GetLiveFlight", "GetLiveFlightDetailsByFlightID", "LiveFlight", "Service", "Wrap", "context.Context", "errors.Is", "errors.Wrap", "s.fs", "s.repo"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"github.com/cockroachdb/errors\"\n)\n// receiver: s *Service", "summary_en": "Retrieves live flight details by ID, first trying filesystem cache then database if not found", "keywords_en": ["cache lookup", "context propagation", "database query", "error handling", "flight retrieval"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:34.302943", "file_synopsis_hash": "20ea7f08954d4117", "chunk_text_hash": "7d29c31a37b8714e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/service.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package core\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "core"], "doc_head": "package core", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Contains core utilities and functions", "keywords_en": ["core utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:34.308140", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "668b5c25d17e472b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 9, "text": "import (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n", "n_tokens": 26, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 9], "def_symbols": [], "symbols": ["import", "context", "impalastudios", "com", "log", "uber", "org", "zap", "time"], "doc_head": "import (\n\t\"context\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Initializes logging and sets up a timer context", "keywords_en": ["go impala studios log", "logging setup", "timer context", "uber zap"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:36.810682", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "b1c51e766e623520", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 10, "end_line": 11, "text": "//go:generate mockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\ntype (", "n_tokens": 34, "primary_symbol": "", "primary_kind": "header", "primary_span": [10, 11], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "flights_archive_service", "destination", "mocks", "flights_archive_service_mocks", "package", "type"], "doc_head": "//go:generate mockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\ntype (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Generates mock implementations for the flights archive service", "keywords_en": ["flights archive", "mock generation", "service mocks", "test utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:39.139510", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "c66248680de6f4a8", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 12, "end_line": 17, "text": "\tflightArchivesRepository interface {\n\t\tGetArchivableFlights(context.Context, int) ([]*LiveFlight, error)\n\t\tDeleteFlights(context.Context, []*LiveFlight) error\n\t}\n)\n", "n_tokens": 41, "primary_symbol": "flightArchivesRepository", "primary_kind": "type", "primary_span": [12, 17], "def_symbols": [], "symbols": ["flightArchivesRepository", "interface", "GetArchivableFlights", "context", "Context", "int", "LiveFlight", "error", "DeleteFlights"], "doc_head": "\tflightArchivesRepository interface {\n\t\tGetArchivableFlights(context.Context, int) ([]*LiveFlight, error)\n\t\tDeleteFlights(context.Context, []*LiveFlight) error\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:flightArchivesRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "flightArchivesRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["flightArchivesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:flightArchivesRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["flightArchivesRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [224], "all_end_bytes": [385], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "DeleteFlights", "GetArchivableFlights", "LiveFlight", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for managing flight archives, including getting and deleting archivable flights", "keywords_en": ["context usage", "database operations", "error handling", "flight management", "interface definition", "live flight processing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:42.098678", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "98111abdbbc6420a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 18, "end_line": 25, "text": "type FlightArchiveService struct {\n\tarchives         flightArchivesRepository\n\tfilesystem       filesystemLiveFlightsRepository\n\tarchivePageSize  int\n\tmaxArchiveCycles int\n\tmetrics          archiveMetrics\n}\n", "n_tokens": 42, "primary_symbol": "FlightArchiveService", "primary_kind": "type", "primary_span": [18, 25], "def_symbols": [], "symbols": ["type", "FlightArchiveService", "struct", "archives", "flightArchivesRepository", "filesystem", "filesystemLiveFlightsRepository", "archivePageSize", "int", "maxArchiveCycles", "metrics", "archiveMetrics"], "doc_head": "type FlightArchiveService struct {\n\tarchives         flightArchivesRepository\n\tfilesystem       filesystemLiveFlightsRepository\n\tarchivePageSize  int\n\tmaxArchiveCycles int\n\tmetrics          archiveMetrics\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:FlightArchiveService (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "FlightArchiveService", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["FlightArchiveService"], "all_kinds": ["type"], "all_ast_paths": ["go:type:FlightArchiveService (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["FlightArchiveService"], "all_type_kinds": ["struct"], "all_start_bytes": [394], "all_end_bytes": [595], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["FlightArchiveService"], "header_context_minimal": "package core", "summary_en": "Manages flight archives with repositories and metrics", "keywords_en": ["archive management", "cycle limit", "filesystem handling", "flight repository", "metrics tracking", "page size"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:44.845264", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "435bfcf060e96f9b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 26, "end_line": 34, "text": "type archiveMetrics struct {\n\ttotalCalls    int\n\ttotalArchived int\n\ttotalSkipped  int\n\ttotalFailed   int\n\ttotalDeleted  int\n\tlastReport    time.Time\n}\n", "n_tokens": 38, "primary_symbol": "archiveMetrics", "primary_kind": "type", "primary_span": [26, 34], "def_symbols": [], "symbols": ["type", "archiveMetrics", "struct", "totalCalls", "int", "totalArchived", "totalSkipped", "totalFailed", "totalDeleted", "lastReport", "time", "Time"], "doc_head": "type archiveMetrics struct {\n\ttotalCalls    int\n\ttotalArchived int\n\ttotalSkipped  int\n\ttotalFailed   int\n\ttotalDeleted  int\n\tlastReport    time.Time\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:archiveMetrics (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "archiveMetrics", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["archiveMetrics"], "all_kinds": ["type"], "all_ast_paths": ["go:type:archiveMetrics (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["archiveMetrics"], "all_type_kinds": ["struct"], "all_start_bytes": [602], "all_end_bytes": [747], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Time", "time.Time"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Tracks various metrics for archive operations, including calls, archived items, skipped items, failed items, deleted items, and last report time", "keywords_en": ["archive operations", "error tracking", "item counts", "metrics tracking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:48.204393", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "d82b4dd85cf8e78f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 35, "end_line": 57, "text": "func NewFlightArchiveService(\n\tarchives flightArchivesRepository,\n\tfilesystem filesystemLiveFlightsRepository,\n\tarchivePageSize int,\n\tmaxArchiveCycles int,\n) *FlightArchiveService {\n\tif archivePageSize <= 0 {\n\t\tarchivePageSize = 100\n\t}\n\tif maxArchiveCycles <= 0 {\n\t\tmaxArchiveCycles = 1\n\t}\n\treturn &FlightArchiveService{\n\t\tarchives:         archives,\n\t\tfilesystem:       filesystem,\n\t\tarchivePageSize:  archivePageSize,\n\t\tmaxArchiveCycles: maxArchiveCycles,\n\t\tmetrics: archiveMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}\n", "n_tokens": 142, "primary_symbol": "NewFlightArchiveService", "primary_kind": "function", "primary_span": [35, 57], "def_symbols": [], "symbols": ["NewFlightArchiveService", "func", "archives", "flightArchivesRepository", "filesystem", "filesystemLiveFlightsRepository", "archivePageSize", "int", "maxArchiveCycles", "FlightArchiveService", "return", "metrics", "archiveMetrics", "lastReport", "time", "Now", "Add", "Minute"], "doc_head": "func NewFlightArchiveService(\n\tarchives flightArchivesRepository,\n\tfilesystem filesystemLiveFlightsRepository,\n\tarchivePageSize int,\n\tmaxArchiveCycles int,\n) *FlightArchiveService {\n\tif archivePageSize <= 0 {\n\t\tarchivePageSize = 100\n\t}\n\tif maxArchiveCycles <= 0 {\n\t\tmaxArchiveCycles = 1\n\t}\n\treturn &FlightArchiveService{\n\t\tarchives:         archives,\n\t\tfilesystem:       filesystem,\n\t\tarchivePageSize:  archivePageSize,\n\t\tmaxArchiveCycles: maxArchiveCycles,\n\t\tmetrics: archiveMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewFlightArchiveService/complete", "package": "core", "node_kind": "function", "receiver": "", "function_name": "NewFlightArchiveService", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewFlightArchiveService"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewFlightArchiveService/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [749], "all_end_bytes": [1292], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Add", "FlightArchiveService", "Minute", "NewFlightArchiveService", "Now", "time.Minute", "time.Now"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Initializes a flight archive service with repositories and pagination settings", "keywords_en": ["flight archive", "metrics tracking", "pagination configuration", "repository setup", "service initialization", "time handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:48.208479", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "bf69fc1b747205bf", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 58, "end_line": 106, "text": "func (s *FlightArchiveService) Archive(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\n\tvar totalArchived int\n\n\tfor i := 0; i < s.maxArchiveCycles; i++ {\n\t\tflights, err := s.archives.GetArchivableFlights(ctx, s.archivePageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to fetch archivable flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\n\t\tvar archived, skipped, failed int\n\n\t\tfor _, flight := range flights {\n\t\t\tif flight.FlightID == nil {\n\t\t\t\tskipped++\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif err := s.filesystem.SaveLiveFlight(ctx, *flight.FlightID, flight); err != nil {\n\t\t\t\tfailed++\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tarchived++\n\t\t}\n\n\t\tif err := s.archives.DeleteFlights(ctx, flights); err != nil {\n\t\t\tlog.Error(ctx, \"Failed to delete archived flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\n\t\ts.metrics.totalArchived += archived\n\t\ts.metrics.totalSkipped += skipped\n\t\ts.metrics.totalFailed += failed\n\t\ts.metrics.totalDeleted += len(flights)\n\n\t\ttotalArchived += archived\n\n\t\tif archived == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}\n", "n_tokens": 281, "primary_symbol": "Archive", "primary_kind": "method", "primary_span": [58, 106], "def_symbols": [], "symbols": ["Archive", "func", "FlightArchiveService", "ctx", "context", "Context", "error", "metrics", "totalCalls", "var", "totalArchived", "int", "for", "maxArchiveCycles", "flights", "err", "archives", "GetArchivableFlights", "archivePageSize", "nil", "log", "Error", "Failed", "fetch", "archivable", "zap", "return", "archived", "skipped", "failed", "flight", "range", "FlightID", "continue", "filesystem", "SaveLiveFlight", "DeleteFlights", "delete", "totalSkipped", "totalFailed", "totalDeleted", "len", "break", "logMetricsIfNeeded"], "doc_head": "func (s *FlightArchiveService) Archive(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\tvar totalArchived int\n\tfor i := 0; i < s.maxArchiveCycles; i++ {\n\t\tflights, err := s.archives.GetArchivableFlights(ctx, s.archivePageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to fetch archivable flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t\tvar archived, skipped, failed int\n\t\tfor _, flight := range flights {\n\t\t\tif flight.FlightID == nil {\n\t\t\t\tskipped++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err := s.filesystem.SaveLiveFlight(ctx, *flight.FlightID, flight); err != nil {\n\t\t\t\tfailed++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tarchived++\n\t\t}\n\t\tif err := s.archives.DeleteFlights(ctx, flights); err != nil {\n\t\t\tlog.Error(ctx, \"Failed to delete archived flights\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t\ts.metrics.totalArchived += archived\n\t\ts.metrics.totalSkipped += skipped\n\t\ts.metrics.totalFailed += failed\n\t\ts.metrics.totalDeleted += len(flights)\n\t\ttotalArchived += archived\n\t\tif archived == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightArchiveService).Archive/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightArchiveService", "function_name": "", "method_name": "Archive", "type_name": "FlightArchiveService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Archive"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightArchiveService).Archive/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightArchiveService"], "all_type_names": ["FlightArchiveService"], "all_type_kinds": [null], "all_start_bytes": [1294], "all_end_bytes": [2322], "primary_index": 0, "all_receivers_normalized": ["(*FlightArchiveService)"], "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.uber.org/zap"], "symbols_referenced_strict": ["Archive", "Context", "DeleteFlights", "Error", "FlightArchiveService", "FlightID", "GetArchivableFlights", "SaveLiveFlight", "context.Context", "flight.FlightID", "log.Error", "s.archivePageSize", "s.archives", "s.filesystem", "s.logMetricsIfNeeded", "s.maxArchiveCycles", "s.metrics", "zap.Error"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n)\n// receiver: s *FlightArchiveService", "summary_en": "Archives flights by fetching them, saving, and deleting", "keywords_en": ["archive flights", "error handling", "metrics tracking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:48.209526", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "71eef858d7355b43", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_archive_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go", "rel_path": "internal/core/flights_archive_service.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 107, "end_line": 125, "text": "func (s *FlightArchiveService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\n\tlog.Debug(ctx, \"Flight archiver metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"archived\", s.metrics.totalArchived),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"deleted\", s.metrics.totalDeleted),\n\t)\n\n\ts.metrics = archiveMetrics{\n\t\tlastReport: now,\n\t}\n}\n", "n_tokens": 136, "primary_symbol": "logMetricsIfNeeded", "primary_kind": "method", "primary_span": [107, 125], "def_symbols": [], "symbols": ["logMetricsIfNeeded", "func", "FlightArchiveService", "ctx", "context", "Context", "now", "time", "Now", "Sub", "metrics", "lastReport", "Minute", "return", "log", "Debug", "Flight", "archiver", "last", "min", "zap", "Int", "calls", "totalCalls", "archived", "totalArchived", "skipped", "totalSkipped", "failed", "totalFailed", "deleted", "totalDeleted", "archiveMetrics"], "doc_head": "func (s *FlightArchiveService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\tlog.Debug(ctx, \"Flight archiver metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"archived\", s.metrics.totalArchived),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"deleted\", s.metrics.totalDeleted),\n\t)\n\ts.metrics = archiveMetrics{\n\t\tlastReport: now,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightArchiveService).logMetricsIfNeeded/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightArchiveService", "function_name": "", "method_name": "logMetricsIfNeeded", "type_name": "FlightArchiveService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["logMetricsIfNeeded"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightArchiveService).logMetricsIfNeeded/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightArchiveService"], "all_type_names": ["FlightArchiveService"], "all_type_kinds": [null], "all_start_bytes": [2324], "all_end_bytes": [2819], "primary_index": 0, "all_receivers_normalized": ["(*FlightArchiveService)"], "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Context", "Debug", "FlightArchiveService", "Int", "Minute", "Now", "Sub", "context.Context", "log.Debug", "now.Sub", "s.metrics", "time.Minute", "time.Now", "zap.Int"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n    \"time\"\n)\n// receiver: s *FlightArchiveService", "summary_en": "Logs flight archiver metrics if the last report was more than 5 minutes ago", "keywords_en": ["debug logging", "last report", "log metrics"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:48.210157", "file_synopsis_hash": "f5219b26bd5f975c", "chunk_text_hash": "3d2f76c45af418e7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_archive_service.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package core\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "core"], "doc_head": "package core", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Contains core utilities and functions", "keywords_en": ["core utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:48.215414", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "668b5c25d17e472b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 10, "text": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)\n", "n_tokens": 26, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 10], "def_symbols": [], "symbols": ["import", "context", "time", "impalastudios", "com", "log", "uber", "org", "zap"], "doc_head": "import (\n\t\"context\"\n\t\"time\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Initializes logging configuration for the application", "keywords_en": ["context management", "error handling", "log level configuration", "logger initialization", "logging setup", "zap logger"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:51.023545", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "075b8a61375c2551", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 11, "end_line": 12, "text": "//go:generate mockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\ntype (", "n_tokens": 36, "primary_symbol": "", "primary_kind": "header", "primary_span": [11, 12], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "flights_ingest_service", "destination", "mocks", "flights_ingest_service_mocks", "package", "type"], "doc_head": "//go:generate mockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\ntype (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "This Go package defines a flights ingest service with methods for managing flight data", "keywords_en": ["data management", "ingest service", "method definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:53.740351", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "f9153737f89effba", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 13, "end_line": 16, "text": "\tflightUpdatesRepository interface {\n\t\tUpsertMany(context.Context, []*LiveFlightUpdate) error\n\t}\n", "n_tokens": 23, "primary_symbol": "flightUpdatesRepository", "primary_kind": "type", "primary_span": [13, 16], "def_symbols": [], "symbols": ["flightUpdatesRepository", "interface", "UpsertMany", "context", "Context", "LiveFlightUpdate", "error"], "doc_head": "\tflightUpdatesRepository interface {\n\t\tUpsertMany(context.Context, []*LiveFlightUpdate) error\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:flightUpdatesRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "flightUpdatesRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["flightUpdatesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:flightUpdatesRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["flightUpdatesRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [223], "all_end_bytes": [318], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "LiveFlightUpdate", "UpsertMany", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "The interface defines a method for upserting multiple live flight updates", "keywords_en": ["context handling", "error management", "interface definition", "live updates", "upsert method"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:56.637060", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "332abbc3989b38a6", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 17, "end_line": 21, "text": "\trealtimeFlightUpdatesClient interface {\n\t\tRead(context.Context, chan<- LiveFlightUpdate) error\n\t}\n)\n", "n_tokens": 23, "primary_symbol": "realtimeFlightUpdatesClient", "primary_kind": "type", "primary_span": [17, 21], "def_symbols": [], "symbols": ["realtimeFlightUpdatesClient", "interface", "Read", "context", "Context", "chan", "LiveFlightUpdate", "error"], "doc_head": "\trealtimeFlightUpdatesClient interface {\n\t\tRead(context.Context, chan<- LiveFlightUpdate) error\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:realtimeFlightUpdatesClient (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "realtimeFlightUpdatesClient", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["realtimeFlightUpdatesClient"], "all_kinds": ["type"], "all_ast_paths": ["go:type:realtimeFlightUpdatesClient (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["realtimeFlightUpdatesClient"], "all_type_kinds": ["interface"], "all_start_bytes": [321], "all_end_bytes": [418], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "LiveFlightUpdate", "Read", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for a client that reads live flight updates", "keywords_en": ["context handling", "error management", "flight updates", "live data stream", "read method"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:14:59.426530", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "8119774b66b7243f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 22, "end_line": 28, "text": "type ingestMetrics struct {\n\ttotalBatches  int\n\ttotalUpdates  int\n\ttotalDuration time.Duration\n\tlastReport    time.Time\n}\n", "n_tokens": 28, "primary_symbol": "ingestMetrics", "primary_kind": "type", "primary_span": [22, 28], "def_symbols": [], "symbols": ["type", "ingestMetrics", "struct", "totalBatches", "int", "totalUpdates", "totalDuration", "time", "Duration", "lastReport", "Time"], "doc_head": "type ingestMetrics struct {\n\ttotalBatches  int\n\ttotalUpdates  int\n\ttotalDuration time.Duration\n\tlastReport    time.Time\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:ingestMetrics (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "ingestMetrics", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["ingestMetrics"], "all_kinds": ["type"], "all_ast_paths": ["go:type:ingestMetrics (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["ingestMetrics"], "all_type_kinds": ["struct"], "all_start_bytes": [427], "all_end_bytes": [543], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Duration", "Time", "time.Duration", "time.Time"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Defines a struct for tracking metrics related to batch ingestion processes, including total batches, updates, duration, and last report time", "keywords_en": ["batch processing", "duration measurement", "metrics tracking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:02.603337", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "7d1731a66ed5b577", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 29, "end_line": 37, "text": "type FlightsIngestService struct {\n\tflightUpdatesRepo           flightUpdatesRepository\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient\n\n\tbatchStoreInterval time.Duration\n\n\tmetrics ingestMetrics\n}\n", "n_tokens": 40, "primary_symbol": "FlightsIngestService", "primary_kind": "type", "primary_span": [29, 37], "def_symbols": [], "symbols": ["type", "FlightsIngestService", "struct", "flightUpdatesRepo", "flightUpdatesRepository", "realtimeFlightUpdatesClient", "batchStoreInterval", "time", "Duration", "metrics", "ingestMetrics"], "doc_head": "type FlightsIngestService struct {\n\tflightUpdatesRepo           flightUpdatesRepository\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient\n\tbatchStoreInterval time.Duration\n\tmetrics ingestMetrics\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:FlightsIngestService (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "FlightsIngestService", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["FlightsIngestService"], "all_kinds": ["type"], "all_ast_paths": ["go:type:FlightsIngestService (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["FlightsIngestService"], "all_type_kinds": ["struct"], "all_start_bytes": [550], "all_end_bytes": [750], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Duration", "FlightsIngestService", "time.Duration"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Defines a service for ingesting flight updates", "keywords_en": ["batch storage", "flight data", "metrics tracking", "real time updates"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:05.019267", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "e22cbcf35558f2ff", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 38, "end_line": 52, "text": "func NewFlightsIngestService(\n\tflightUpdatesRepository flightUpdatesRepository,\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient,\n\tbatchStoreInterval time.Duration,\n) *FlightsIngestService {\n\treturn &FlightsIngestService{\n\t\tflightUpdatesRepo:           flightUpdatesRepository,\n\t\trealtimeFlightUpdatesClient: realtimeFlightUpdatesClient,\n\t\tbatchStoreInterval:          batchStoreInterval,\n\t\tmetrics: ingestMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}\n", "n_tokens": 110, "primary_symbol": "NewFlightsIngestService", "primary_kind": "function", "primary_span": [38, 52], "def_symbols": [], "symbols": ["NewFlightsIngestService", "func", "flightUpdatesRepository", "realtimeFlightUpdatesClient", "batchStoreInterval", "time", "Duration", "FlightsIngestService", "return", "flightUpdatesRepo", "metrics", "ingestMetrics", "lastReport", "Now", "Add", "Minute"], "doc_head": "func NewFlightsIngestService(\n\tflightUpdatesRepository flightUpdatesRepository,\n\trealtimeFlightUpdatesClient realtimeFlightUpdatesClient,\n\tbatchStoreInterval time.Duration,\n) *FlightsIngestService {\n\treturn &FlightsIngestService{\n\t\tflightUpdatesRepo:           flightUpdatesRepository,\n\t\trealtimeFlightUpdatesClient: realtimeFlightUpdatesClient,\n\t\tbatchStoreInterval:          batchStoreInterval,\n\t\tmetrics: ingestMetrics{\n\t\t\tlastReport: time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewFlightsIngestService/complete", "package": "core", "node_kind": "function", "receiver": "", "function_name": "NewFlightsIngestService", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewFlightsIngestService"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewFlightsIngestService/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [752], "all_end_bytes": [1233], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Add", "Duration", "FlightsIngestService", "Minute", "NewFlightsIngestService", "Now", "time.Duration", "time.Minute", "time.Now"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Initializes a new flights ingestion service with repository, client, and batch interval", "keywords_en": ["batch interval config", "client connection", "flights ingestion", "metrics initialization", "repository setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:08.134110", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "297c08455ce5321c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 53, "end_line": 84, "text": "// ConsumeFlightUpdates consumes flight updates from the realtime flight updates client\nfunc (s *FlightsIngestService) ConsumeFlightUpdates(ctx context.Context) error {\n\tsubscriber := make(chan LiveFlightUpdate)\n\n\trealtimeFlightDataStreamErr := make(chan error)\n\n\tgo func() {\n\t\tif err := s.realtimeFlightUpdatesClient.Read(ctx, subscriber); err != nil {\n\t\t\trealtimeFlightDataStreamErr <- err\n\t\t}\n\t}()\n\n\tuniqueFlightUpdates := make(map[string]LiveFlightUpdate)\n\tticker := time.NewTicker(s.batchStoreInterval)\n\n\tfor {\n\t\tselect {\n\t\tcase flightupdate := <-subscriber:\n\t\t\tuniqueFlightUpdates[flightupdate.ID] = flightupdate\n\t\tcase <-ticker.C:\n\t\t\ts.insertBatchFlightUpdates(ctx, uniqueFlightUpdates)\n\t\t\tclear(uniqueFlightUpdates)\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Shutting down the flight updates service...\")\n\t\t\treturn nil\n\t\tcase err := <-realtimeFlightDataStreamErr:\n\t\t\tlog.Error(ctx, \"Realtime data stream raised an error unexpectedly\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t}\n}\n", "n_tokens": 230, "primary_symbol": "ConsumeFlightUpdates", "primary_kind": "method", "primary_span": [54, 84], "def_symbols": [], "symbols": ["ConsumeFlightUpdates", "consumes", "flight", "updates", "from", "the", "realtime", "client", "func", "FlightsIngestService", "ctx", "context", "Context", "error", "subscriber", "make", "chan", "LiveFlightUpdate", "realtimeFlightDataStreamErr", "err", "realtimeFlightUpdatesClient", "Read", "nil", "uniqueFlightUpdates", "map", "string", "ticker", "time", "NewTicker", "batchStoreInterval", "for", "select", "case", "flightupdate", "insertBatchFlightUpdates", "clear", "Done", "log", "Info", "Shutting", "down", "service", "return", "Error", "Realtime", "data", "stream", "raised", "unexpectedly", "zap"], "doc_head": "// ConsumeFlightUpdates consumes flight updates from the realtime flight updates client\nfunc (s *FlightsIngestService) ConsumeFlightUpdates(ctx context.Context) error {\n\tsubscriber := make(chan LiveFlightUpdate)\n\trealtimeFlightDataStreamErr := make(chan error)\n\tgo func() {\n\t\tif err := s.realtimeFlightUpdatesClient.Read(ctx, subscriber); err != nil {\n\t\t\trealtimeFlightDataStreamErr <- err\n\t\t}\n\t}()\n\tuniqueFlightUpdates := make(map[string]LiveFlightUpdate)\n\tticker := time.NewTicker(s.batchStoreInterval)\n\tfor {\n\t\tselect {\n\t\tcase flightupdate := <-subscriber:\n\t\t\tuniqueFlightUpdates[flightupdate.ID] = flightupdate\n\t\tcase <-ticker.C:\n\t\t\ts.insertBatchFlightUpdates(ctx, uniqueFlightUpdates)\n\t\t\tclear(uniqueFlightUpdates)\n\t\tcase <-ctx.Done():\n\t\t\tlog.Info(ctx, \"Shutting down the flight updates service...\")\n\t\t\treturn nil\n\t\tcase err := <-realtimeFlightDataStreamErr:\n\t\t\tlog.Error(ctx, \"Realtime data stream raised an error unexpectedly\", zap.Error(err))\n\t\t\treturn err\n\t\t}\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightsIngestService).ConsumeFlightUpdates/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightsIngestService", "function_name": "", "method_name": "ConsumeFlightUpdates", "type_name": "FlightsIngestService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["ConsumeFlightUpdates"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightsIngestService).ConsumeFlightUpdates/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightsIngestService"], "all_type_names": ["FlightsIngestService"], "all_type_kinds": [null], "all_start_bytes": [1323], "all_end_bytes": [2212], "primary_index": 0, "all_receivers_normalized": ["(*FlightsIngestService)"], "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["ConsumeFlightUpdates", "Context", "Done", "Error", "FlightsIngestService", "Info", "LiveFlightUpdate", "NewTicker", "Read", "context.Context", "ctx.Done", "flightupdate.ID", "log.Error", "log.Info", "s.batchStoreInterval", "s.insertBatchFlightUpdates", "s.realtimeFlightUpdatesClient", "ticker.C", "time.NewTicker", "zap.Error"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n    \"time\"\n)\n// receiver: s *FlightsIngestService", "summary_en": "Consumes flight updates, processes them in batches, and handles errors", "keywords_en": ["batch processing", "channel communication", "context management", "error handling", "flight updates", "log messages", "ticker management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:08.140681", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "acb1f1be1576fb28", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 85, "end_line": 116, "text": "func (s *FlightsIngestService) insertBatchFlightUpdates(ctx context.Context, uniqueUpdates map[string]LiveFlightUpdate) {\n\tif len(uniqueUpdates) == 0 {\n\t\tlog.Debug(ctx, \"There are no flight updates to store\")\n\t\treturn\n\t}\n\n\tflightUpdatesBatch := make([]*LiveFlightUpdate, 0, len(uniqueUpdates))\n\n\tfor _, update := range uniqueUpdates {\n\t\tflightUpdatesBatch = append(flightUpdatesBatch, &update)\n\t}\n\n\tstart := time.Now()\n\terr := s.flightUpdatesRepo.UpsertMany(ctx, flightUpdatesBatch)\n\tdur := time.Since(start)\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to insert batch records of realtime flight updates\",\n\t\t\tzap.Error(err),\n\t\t\tzap.Int(\"count\", len(flightUpdatesBatch)),\n\t\t)\n\n\t\treturn\n\t}\n\n\ts.metrics.totalBatches++\n\ts.metrics.totalUpdates += len(flightUpdatesBatch)\n\ts.metrics.totalDuration += dur\n\n\ts.logMetricsIfNeeded(ctx)\n}\n", "n_tokens": 207, "primary_symbol": "insertBatchFlightUpdates", "primary_kind": "method", "primary_span": [85, 116], "def_symbols": [], "symbols": ["insertBatchFlightUpdates", "func", "FlightsIngestService", "ctx", "context", "Context", "uniqueUpdates", "map", "string", "LiveFlightUpdate", "len", "log", "Debug", "There", "are", "flight", "updates", "store", "return", "flightUpdatesBatch", "make", "for", "update", "range", "append", "start", "time", "Now", "err", "flightUpdatesRepo", "UpsertMany", "dur", "Since", "nil", "Error", "Failed", "insert", "batch", "records", "realtime", "zap", "Int", "count", "metrics", "totalBatches", "totalUpdates", "totalDuration", "logMetricsIfNeeded"], "doc_head": "func (s *FlightsIngestService) insertBatchFlightUpdates(ctx context.Context, uniqueUpdates map[string]LiveFlightUpdate) {\n\tif len(uniqueUpdates) == 0 {\n\t\tlog.Debug(ctx, \"There are no flight updates to store\")\n\t\treturn\n\t}\n\tflightUpdatesBatch := make([]*LiveFlightUpdate, 0, len(uniqueUpdates))\n\tfor _, update := range uniqueUpdates {\n\t\tflightUpdatesBatch = append(flightUpdatesBatch, &update)\n\t}\n\tstart := time.Now()\n\terr := s.flightUpdatesRepo.UpsertMany(ctx, flightUpdatesBatch)\n\tdur := time.Since(start)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Failed to insert batch records of realtime flight updates\",\n\t\t\tzap.Error(err),\n\t\t\tzap.Int(\"count\", len(flightUpdatesBatch)),\n\t\t)\n\t\treturn\n\t}\n\ts.metrics.totalBatches++\n\ts.metrics.totalUpdates += len(flightUpdatesBatch)\n\ts.metrics.totalDuration += dur\n\ts.logMetricsIfNeeded(ctx)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightsIngestService).insertBatchFlightUpdates/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightsIngestService", "function_name": "", "method_name": "insertBatchFlightUpdates", "type_name": "FlightsIngestService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["insertBatchFlightUpdates"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightsIngestService).insertBatchFlightUpdates/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightsIngestService"], "all_type_names": ["FlightsIngestService"], "all_type_kinds": [null], "all_start_bytes": [2214], "all_end_bytes": [3040], "primary_index": 0, "all_receivers_normalized": ["(*FlightsIngestService)"], "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Context", "Debug", "Error", "FlightsIngestService", "Int", "LiveFlightUpdate", "Now", "Since", "UpsertMany", "context.Context", "log.Debug", "log.Error", "s.flightUpdatesRepo", "s.logMetricsIfNeeded", "s.metrics", "time.Now", "time.Since", "zap.Error", "zap.Int"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n    \"time\"\n)\n// receiver: s *FlightsIngestService", "summary_en": "Inserts batch flight updates into the database and tracks metrics", "keywords_en": ["database insertion", "error handling", "metrics tracking", "time duration", "unique updates"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:08.141724", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "301f28ce82dd1193", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_ingest_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go", "rel_path": "internal/core/flights_ingest_service.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 117, "end_line": 140, "text": "func (s *FlightsIngestService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\n\tvar avgBatchDur time.Duration\n\tvar avgUpdatesPerBatch float64\n\n\tif s.metrics.totalBatches > 0 {\n\t\tavgBatchDur = s.metrics.totalDuration / time.Duration(s.metrics.totalBatches)\n\t\tavgUpdatesPerBatch = float64(s.metrics.totalUpdates) / float64(s.metrics.totalBatches)\n\t}\n\n\tlog.Debug(ctx, \"Ingest metrics report\",\n\t\tzap.Int(\"batches\", s.metrics.totalBatches),\n\t\tzap.Int(\"total_updates\", s.metrics.totalUpdates),\n\t\tzap.Duration(\"avg_batch_duration\", avgBatchDur),\n\t\tzap.Float64(\"avg_updates_per_batch\", avgUpdatesPerBatch),\n\t)\n\n\ts.metrics = ingestMetrics{lastReport: now}\n}\n", "n_tokens": 191, "primary_symbol": "logMetricsIfNeeded", "primary_kind": "method", "primary_span": [117, 140], "def_symbols": [], "symbols": ["logMetricsIfNeeded", "func", "FlightsIngestService", "ctx", "context", "Context", "now", "time", "Now", "Sub", "metrics", "lastReport", "Minute", "return", "var", "avgBatchDur", "Duration", "avgUpdatesPerBatch", "float64", "totalBatches", "totalDuration", "totalUpdates", "log", "Debug", "Ingest", "report", "zap", "Int", "batches", "total_updates", "avg_batch_duration", "Float64", "avg_updates_per_batch", "ingestMetrics"], "doc_head": "func (s *FlightsIngestService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\tvar avgBatchDur time.Duration\n\tvar avgUpdatesPerBatch float64\n\tif s.metrics.totalBatches > 0 {\n\t\tavgBatchDur = s.metrics.totalDuration / time.Duration(s.metrics.totalBatches)\n\t\tavgUpdatesPerBatch = float64(s.metrics.totalUpdates) / float64(s.metrics.totalBatches)\n\t}\n\tlog.Debug(ctx, \"Ingest metrics report\",\n\t\tzap.Int(\"batches\", s.metrics.totalBatches),\n\t\tzap.Int(\"total_updates\", s.metrics.totalUpdates),\n\t\tzap.Duration(\"avg_batch_duration\", avgBatchDur),\n\t\tzap.Float64(\"avg_updates_per_batch\", avgUpdatesPerBatch),\n\t)\n\ts.metrics = ingestMetrics{lastReport: now}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightsIngestService).logMetricsIfNeeded/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightsIngestService", "function_name": "", "method_name": "logMetricsIfNeeded", "type_name": "FlightsIngestService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["logMetricsIfNeeded"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightsIngestService).logMetricsIfNeeded/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightsIngestService"], "all_type_names": ["FlightsIngestService"], "all_type_kinds": [null], "all_start_bytes": [3042], "all_end_bytes": [3768], "primary_index": 0, "all_receivers_normalized": ["(*FlightsIngestService)"], "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Context", "Debug", "Duration", "FlightsIngestService", "Float64", "Int", "Minute", "Now", "Sub", "context.Context", "log.Debug", "now.Sub", "s.metrics", "time.Duration", "time.Minute", "time.Now", "zap.Duration", "zap.Float64", "zap.Int"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n    \"time\"\n)\n// receiver: s *FlightsIngestService", "summary_en": "Logs ingest metrics if more than five minutes have passed since the last report", "keywords_en": ["batch duration", "contextual logging", "time intervals", "updates per batch"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:08.142897", "file_synopsis_hash": "40d6ee02a1bfd90b", "chunk_text_hash": "68633917740f4d97", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_ingest_service.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package core\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "core"], "doc_head": "package core", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Contains core utilities and functions", "keywords_en": ["core utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:08.155191", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "668b5c25d17e472b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 11, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"sort\"\n\t\"time\"\n)\n", "n_tokens": 33, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 11], "def_symbols": [], "symbols": ["import", "context", "fmt", "impalastudios", "com", "log", "uber", "org", "zap", "sort", "time"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"sort\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Imports logging and time-related packages for application monitoring and timestamping", "keywords_en": ["log management", "time handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:10.474086", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "e9d10ec8144897fb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 13, "text": "//go:generate mockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\ntype (", "n_tokens": 36, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 13], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "flights_enrich_service", "destination", "mocks", "flights_enrich_service_mocks", "package", "type"], "doc_head": "//go:generate mockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\ntype (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Generates mock implementation for flights enrich service", "keywords_en": ["cache management", "error handling", "mock generation", "service interface"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:13.011557", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "919371c3daf74c93", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 14, "end_line": 17, "text": "\tairlinesRepository interface {\n\t\tGetByDesignator(context.Context, string) (*Airline, error)\n\t}\n", "n_tokens": 24, "primary_symbol": "airlinesRepository", "primary_kind": "type", "primary_span": [14, 17], "def_symbols": [], "symbols": ["airlinesRepository", "interface", "GetByDesignator", "context", "Context", "string", "Airline", "error"], "doc_head": "\tairlinesRepository interface {\n\t\tGetByDesignator(context.Context, string) (*Airline, error)\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:airlinesRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "airlinesRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["airlinesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:airlinesRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["airlinesRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [237], "all_end_bytes": [331], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Airline", "Context", "GetByDesignator", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for retrieving airlines by designator", "keywords_en": ["airline retrieval", "context handling", "designator based lookup", "error management", "interface definition", "repository pattern"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:15.807377", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "39b612abf3094999", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 18, "end_line": 21, "text": "\tairportsRepository interface {\n\t\tGetByICAOOrIATA(context.Context, *string, *string) (*Airport, error)\n\t}\n", "n_tokens": 30, "primary_symbol": "airportsRepository", "primary_kind": "type", "primary_span": [18, 21], "def_symbols": [], "symbols": ["airportsRepository", "interface", "GetByICAOOrIATA", "context", "Context", "string", "Airport", "error"], "doc_head": "\tairportsRepository interface {\n\t\tGetByICAOOrIATA(context.Context, *string, *string) (*Airport, error)\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:airportsRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "airportsRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["airportsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:airportsRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["airportsRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [334], "all_end_bytes": [438], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Airport", "Context", "GetByICAOOrIATA", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for retrieving airport data by ICAO or IATA codes", "keywords_en": ["airport retrieval", "airports repository", "context parameter", "error handling", "iata code", "icao code", "interface definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:18.988797", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "74345507b683c704", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 22, "end_line": 27, "text": "\tflightsEnrichRepository interface {\n\t\tGetUnenrichedFlights(ctx context.Context, limit int) ([]*LiveFlight, error)\n\t\tEnrichFlights(ctx context.Context, enriched []*EnrichedFlightData) error\n\t}\n)\n", "n_tokens": 52, "primary_symbol": "flightsEnrichRepository", "primary_kind": "type", "primary_span": [22, 27], "def_symbols": [], "symbols": ["flightsEnrichRepository", "interface", "GetUnenrichedFlights", "ctx", "context", "Context", "limit", "int", "LiveFlight", "error", "EnrichFlights", "enriched", "EnrichedFlightData"], "doc_head": "\tflightsEnrichRepository interface {\n\t\tGetUnenrichedFlights(ctx context.Context, limit int) ([]*LiveFlight, error)\n\t\tEnrichFlights(ctx context.Context, enriched []*EnrichedFlightData) error\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:flightsEnrichRepository (interface)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "flightsEnrichRepository", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["flightsEnrichRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:flightsEnrichRepository (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["flightsEnrichRepository"], "all_type_kinds": ["interface"], "all_start_bytes": [441], "all_end_bytes": [632], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Context", "EnrichFlights", "EnrichedFlightData", "GetUnenrichedFlights", "LiveFlight", "context.Context"], "header_context_minimal": "package core\nimport \"context\"", "summary_en": "Defines an interface for retrieving and enriching flight data", "keywords_en": ["context management", "error handling", "flight data", "interface definition", "limit parameter"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:21.761921", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "343a8c65b2a3f204", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 28, "end_line": 37, "text": "type FlightsEnrichService struct {\n\tenrichRepo flightsEnrichRepository\n\tairlines   airlinesRepository\n\tairports   airportsRepository\n\n\tenrichPageSize  int\n\tmaxEnrichCycles int\n\tmetrics         enrichMetrics\n}\n", "n_tokens": 50, "primary_symbol": "FlightsEnrichService", "primary_kind": "type", "primary_span": [28, 37], "def_symbols": [], "symbols": ["type", "FlightsEnrichService", "struct", "enrichRepo", "flightsEnrichRepository", "airlines", "airlinesRepository", "airports", "airportsRepository", "enrichPageSize", "int", "maxEnrichCycles", "metrics", "enrichMetrics"], "doc_head": "type FlightsEnrichService struct {\n\tenrichRepo flightsEnrichRepository\n\tairlines   airlinesRepository\n\tairports   airportsRepository\n\tenrichPageSize  int\n\tmaxEnrichCycles int\n\tmetrics         enrichMetrics\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:FlightsEnrichService (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "FlightsEnrichService", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["FlightsEnrichService"], "all_kinds": ["type"], "all_ast_paths": ["go:type:FlightsEnrichService (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["FlightsEnrichService"], "all_type_kinds": ["struct"], "all_start_bytes": [641], "all_end_bytes": [844], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["FlightsEnrichService"], "header_context_minimal": "package core", "summary_en": "Manages flight data enrichment processes using repositories and metrics", "keywords_en": ["flight data", "metrics tracking", "repository management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:24.299698", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "823c4c545f30bfce", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 38, "end_line": 51, "text": "type enrichMetrics struct {\n\ttotalCalls      int\n\ttotalEnriched   int\n\ttotalFailed     int\n\ttotalSkipped    int\n\tmissingFlightID int\n\n\tairlineNotFound          map[string]int\n\tdepartureAirportNotFound map[string]int\n\tarrivalAirportNotFound   map[string]int\n\n\tlastReport time.Time\n}\n", "n_tokens": 66, "primary_symbol": "enrichMetrics", "primary_kind": "type", "primary_span": [38, 51], "def_symbols": [], "symbols": ["type", "enrichMetrics", "struct", "totalCalls", "int", "totalEnriched", "totalFailed", "totalSkipped", "missingFlightID", "airlineNotFound", "map", "string", "departureAirportNotFound", "arrivalAirportNotFound", "lastReport", "time", "Time"], "doc_head": "type enrichMetrics struct {\n\ttotalCalls      int\n\ttotalEnriched   int\n\ttotalFailed     int\n\ttotalSkipped    int\n\tmissingFlightID int\n\tairlineNotFound          map[string]int\n\tdepartureAirportNotFound map[string]int\n\tarrivalAirportNotFound   map[string]int\n\tlastReport time.Time\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:enrichMetrics (struct)", "package": "core", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "enrichMetrics", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["enrichMetrics"], "all_kinds": ["type"], "all_ast_paths": ["go:type:enrichMetrics (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["enrichMetrics"], "all_type_kinds": ["struct"], "all_start_bytes": [851], "all_end_bytes": [1127], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Time", "time.Time"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Tracks statistics for data enrichment operations", "keywords_en": ["data tracking", "enrichment analysis", "error recording", "flight data handling", "last report", "metrics collection"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:27.732998", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "8db54628dc22a221", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 52, "end_line": 80, "text": "func NewFlightsEnrichService(\n\tenrichRepo flightsEnrichRepository,\n\tairlines airlinesRepository,\n\tairports airportsRepository,\n\tenrichPageSize int,\n\tmaxEnrichCycles int,\n) *FlightsEnrichService {\n\tif enrichPageSize <= 0 {\n\t\tenrichPageSize = 100\n\t}\n\tif maxEnrichCycles <= 0 {\n\t\tmaxEnrichCycles = 1\n\t}\n\n\treturn &FlightsEnrichService{\n\t\tenrichRepo:      enrichRepo,\n\t\tairlines:        airlines,\n\t\tairports:        airports,\n\t\tenrichPageSize:  enrichPageSize,\n\t\tmaxEnrichCycles: maxEnrichCycles,\n\t\tmetrics: enrichMetrics{\n\t\t\tairlineNotFound:          make(map[string]int),\n\t\t\tdepartureAirportNotFound: make(map[string]int),\n\t\t\tarrivalAirportNotFound:   make(map[string]int),\n\t\t\tlastReport:               time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}\n", "n_tokens": 205, "primary_symbol": "NewFlightsEnrichService", "primary_kind": "function", "primary_span": [52, 80], "def_symbols": [], "symbols": ["NewFlightsEnrichService", "func", "enrichRepo", "flightsEnrichRepository", "airlines", "airlinesRepository", "airports", "airportsRepository", "enrichPageSize", "int", "maxEnrichCycles", "FlightsEnrichService", "return", "metrics", "enrichMetrics", "airlineNotFound", "make", "map", "string", "departureAirportNotFound", "arrivalAirportNotFound", "lastReport", "time", "Now", "Add", "Minute"], "doc_head": "func NewFlightsEnrichService(\n\tenrichRepo flightsEnrichRepository,\n\tairlines airlinesRepository,\n\tairports airportsRepository,\n\tenrichPageSize int,\n\tmaxEnrichCycles int,\n) *FlightsEnrichService {\n\tif enrichPageSize <= 0 {\n\t\tenrichPageSize = 100\n\t}\n\tif maxEnrichCycles <= 0 {\n\t\tmaxEnrichCycles = 1\n\t}\n\treturn &FlightsEnrichService{\n\t\tenrichRepo:      enrichRepo,\n\t\tairlines:        airlines,\n\t\tairports:        airports,\n\t\tenrichPageSize:  enrichPageSize,\n\t\tmaxEnrichCycles: maxEnrichCycles,\n\t\tmetrics: enrichMetrics{\n\t\t\tairlineNotFound:          make(map[string]int),\n\t\t\tdepartureAirportNotFound: make(map[string]int),\n\t\t\tarrivalAirportNotFound:   make(map[string]int),\n\t\t\tlastReport:               time.Now().Add(-5 * time.Minute),\n\t\t},\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewFlightsEnrichService/complete", "package": "core", "node_kind": "function", "receiver": "", "function_name": "NewFlightsEnrichService", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewFlightsEnrichService"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewFlightsEnrichService/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [1129], "all_end_bytes": [1872], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Add", "FlightsEnrichService", "Minute", "NewFlightsEnrichService", "Now", "time.Minute", "time.Now"], "header_context_minimal": "package core\nimport \"time\"", "summary_en": "Creates a new instance of FlightsEnrichService with repositories and configuration settings", "keywords_en": ["configuration settings", "default values", "flights enrich service", "metrics tracking", "repositories initialization", "time management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:27.742662", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "d85e902abc611faa", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 81, "end_line": 124, "text": "func (s *FlightsEnrichService) Enrich(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\n\tfor i := 0; i < s.maxEnrichCycles; i++ {\n\t\tflights, err := s.enrichRepo.GetUnenrichedFlights(ctx, s.enrichPageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to retrieve unenriched flights\", zap.Error(err))\n\t\t\ts.metrics.totalFailed++\n\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\treturn err\n\t\t}\n\t\tif len(flights) == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\tvar enriched []*EnrichedFlightData\n\t\tfor _, flight := range flights {\n\t\t\tdata := s.buildEnrichedFlightData(ctx, flight)\n\t\t\tif data != nil {\n\t\t\t\tenriched = append(enriched, data)\n\t\t\t\ts.metrics.totalEnriched++\n\n\t\t\t\tif data.FlightID == nil {\n\t\t\t\t\ts.metrics.missingFlightID++\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ts.metrics.totalSkipped++\n\t\t\t}\n\t\t}\n\n\t\tif len(enriched) > 0 {\n\t\t\tif err := s.enrichRepo.EnrichFlights(ctx, enriched); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to bulk enrich flights\", zap.Error(err))\n\t\t\t\ts.metrics.totalFailed++\n\t\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}\n", "n_tokens": 304, "primary_symbol": "Enrich", "primary_kind": "method", "primary_span": [81, 124], "def_symbols": [], "symbols": ["Enrich", "func", "FlightsEnrichService", "ctx", "context", "Context", "error", "metrics", "totalCalls", "for", "maxEnrichCycles", "flights", "err", "enrichRepo", "GetUnenrichedFlights", "enrichPageSize", "nil", "log", "Error", "Failed", "retrieve", "unenriched", "zap", "totalFailed", "logMetricsIfNeeded", "return", "len", "break", "var", "enriched", "EnrichedFlightData", "flight", "range", "data", "buildEnrichedFlightData", "append", "totalEnriched", "FlightID", "missingFlightID", "else", "totalSkipped", "EnrichFlights", "bulk", "enrich"], "doc_head": "func (s *FlightsEnrichService) Enrich(ctx context.Context) error {\n\ts.metrics.totalCalls++\n\tfor i := 0; i < s.maxEnrichCycles; i++ {\n\t\tflights, err := s.enrichRepo.GetUnenrichedFlights(ctx, s.enrichPageSize)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Failed to retrieve unenriched flights\", zap.Error(err))\n\t\t\ts.metrics.totalFailed++\n\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\treturn err\n\t\t}\n\t\tif len(flights) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tvar enriched []*EnrichedFlightData\n\t\tfor _, flight := range flights {\n\t\t\tdata := s.buildEnrichedFlightData(ctx, flight)\n\t\t\tif data != nil {\n\t\t\t\tenriched = append(enriched, data)\n\t\t\t\ts.metrics.totalEnriched++\n\t\t\t\tif data.FlightID == nil {\n\t\t\t\t\ts.metrics.missingFlightID++\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ts.metrics.totalSkipped++\n\t\t\t}\n\t\t}\n\t\tif len(enriched) > 0 {\n\t\t\tif err := s.enrichRepo.EnrichFlights(ctx, enriched); err != nil {\n\t\t\t\tlog.Error(ctx, \"Failed to bulk enrich flights\", zap.Error(err))\n\t\t\t\ts.metrics.totalFailed++\n\t\t\t\ts.logMetricsIfNeeded(ctx)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\ts.logMetricsIfNeeded(ctx)\n\treturn nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightsEnrichService).Enrich/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightsEnrichService", "function_name": "", "method_name": "Enrich", "type_name": "FlightsEnrichService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Enrich"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightsEnrichService).Enrich/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightsEnrichService"], "all_type_names": ["FlightsEnrichService"], "all_type_kinds": [null], "all_start_bytes": [1874], "all_end_bytes": [2908], "primary_index": 0, "all_receivers_normalized": ["(*FlightsEnrichService)"], "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.uber.org/zap"], "symbols_referenced_strict": ["Context", "Enrich", "EnrichFlights", "EnrichedFlightData", "Error", "FlightID", "FlightsEnrichService", "GetUnenrichedFlights", "context.Context", "data.FlightID", "log.Error", "s.buildEnrichedFlightData", "s.enrichPageSize", "s.enrichRepo", "s.logMetricsIfNeeded", "s.maxEnrichCycles", "s.metrics", "zap.Error"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n)\n// receiver: s *FlightsEnrichService", "summary_en": "Enriches flight data by fetching unenriched flights and applying data transformations", "keywords_en": ["batch processing", "data transformation", "error handling", "flight enrichment", "metrics tracking", "pagination support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:27.747769", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "db73eab583503a90", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 125, "end_line": 190, "text": "func (s *FlightsEnrichService) buildEnrichedFlightData(ctx context.Context, flight *LiveFlight) *EnrichedFlightData {\n\tconst defaultClassification = 5\n\n\tdata := &EnrichedFlightData{\n\t\tLiveFlightID:   flight.ID,\n\t\tClassification: defaultClassification,\n\t}\n\n\tif flight.AirlineDesignator != \"\" {\n\t\tairline, err := s.airlines.GetByDesignator(ctx, flight.AirlineDesignator)\n\t\tif err != nil {\n\t\t\ts.metrics.airlineNotFound[flight.AirlineDesignator]++\n\t\t} else if airline != nil {\n\t\t\tdata.Classification = int64(airline.Classification)\n\t\t}\n\t}\n\n\tvar departureCode string\n\tif flight.DepartureAirportICAO != \"\" || flight.DepartureAirportIATA != \"\" {\n\t\tdeparture, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.DepartureAirportICAO),\n\t\t\toptionalString(flight.DepartureAirportIATA),\n\t\t)\n\t\tif err != nil {\n\t\t\tkey := flight.DepartureAirportICAO + \"/\" + flight.DepartureAirportIATA\n\t\t\ts.metrics.departureAirportNotFound[key]++\n\t\t} else if departure != nil {\n\t\t\tdepartureCode = departure.Designator\n\t\t}\n\t}\n\n\tvar arrivalCode string\n\tif flight.ArrivalAirportICAO != \"\" || flight.ArrivalAirportIATA != \"\" {\n\t\tarrival, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.ArrivalAirportICAO),\n\t\t\toptionalString(flight.ArrivalAirportIATA),\n\t\t)\n\n\t\tif err != nil {\n\t\t\tkey := flight.ArrivalAirportICAO + \"/\" + flight.ArrivalAirportIATA\n\t\t\ts.metrics.arrivalAirportNotFound[key]++\n\t\t} else if arrival != nil {\n\t\t\tarrivalCode = arrival.Designator\n\t\t}\n\t}\n\n\tif !flight.DepartureTime.IsZero() && flight.FlightNumber != \"\" &&\n\t\tflight.AirlineDesignator != \"\" && departureCode != \"\" && arrivalCode != \"\" {\n\n\t\t//TODO: FlightID logic\n\t\tflightID := fmt.Sprintf(\n\t\t\t\"%s_%s_%s_%s_%s\",\n\t\t\tflight.DepartureTime.Format(\"20060102\"),\n\t\t\tflight.AirlineDesignator,\n\t\t\tflight.FlightNumber,\n\t\t\tdepartureCode,\n\t\t\tarrivalCode,\n\t\t)\n\t\tdata.FlightID = &flightID\n\t}\n\n\treturn data\n}\n", "n_tokens": 545, "primary_symbol": "buildEnrichedFlightData", "primary_kind": "method", "primary_span": [125, 190], "def_symbols": [], "symbols": ["buildEnrichedFlightData", "func", "FlightsEnrichService", "ctx", "context", "Context", "flight", "LiveFlight", "EnrichedFlightData", "const", "defaultClassification", "data", "LiveFlightID", "Classification", "AirlineDesignator", "airline", "err", "airlines", "GetByDesignator", "nil", "metrics", "airlineNotFound", "else", "int64", "var", "departureCode", "string", "DepartureAirportICAO", "DepartureAirportIATA", "departure", "airports", "GetByICAOOrIATA", "optionalString", "key", "departureAirportNotFound", "Designator", "arrivalCode", "ArrivalAirportICAO", "ArrivalAirportIATA", "arrival", "arrivalAirportNotFound", "DepartureTime", "IsZero", "FlightNumber", "TODO", "FlightID", "logic", "flightID", "fmt", "Sprintf", "Format", "return"], "doc_head": "func (s *FlightsEnrichService) buildEnrichedFlightData(ctx context.Context, flight *LiveFlight) *EnrichedFlightData {\n\tconst defaultClassification = 5\n\tdata := &EnrichedFlightData{\n\t\tLiveFlightID:   flight.ID,\n\t\tClassification: defaultClassification,\n\t}\n\tif flight.AirlineDesignator != \"\" {\n\t\tairline, err := s.airlines.GetByDesignator(ctx, flight.AirlineDesignator)\n\t\tif err != nil {\n\t\t\ts.metrics.airlineNotFound[flight.AirlineDesignator]++\n\t\t} else if airline != nil {\n\t\t\tdata.Classification = int64(airline.Classification)\n\t\t}\n\t}\n\tvar departureCode string\n\tif flight.DepartureAirportICAO != \"\" || flight.DepartureAirportIATA != \"\" {\n\t\tdeparture, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,\n\t\t\toptionalString(flight.DepartureAirportICAO),\n\t\t\toptionalString(flight.DepartureAirportIATA),\n\t\t)\n\t\tif err != nil {\n\t\t\tkey := flight.DepartureAirportICAO + \"/\" + flight.DepartureAirportIATA\n\t\t\ts.metrics.departureAirportNotFound[key]++\n\t\t} else if departure != nil {\n\t\t\tdepartureCode = departure.Designator\n\t\t}\n\t}\n\tvar arrivalCode string\n\tif flight.ArrivalAirportICAO != \"\" || flight.ArrivalAirportIATA != \"\" {\n\t\tarrival, err := s.airports.GetByICAOOrIATA(\n\t\t\tctx,", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightsEnrichService).buildEnrichedFlightData/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightsEnrichService", "function_name": "", "method_name": "buildEnrichedFlightData", "type_name": "FlightsEnrichService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["buildEnrichedFlightData"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightsEnrichService).buildEnrichedFlightData/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightsEnrichService"], "all_type_names": ["FlightsEnrichService"], "all_type_kinds": [null], "all_start_bytes": [2910], "all_end_bytes": [4774], "primary_index": 0, "all_receivers_normalized": ["(*FlightsEnrichService)"], "imports_used_minimal": ["context", "fmt"], "symbols_referenced_strict": ["AirlineDesignator", "ArrivalAirportIATA", "ArrivalAirportICAO", "Classification", "Context", "DepartureAirportIATA", "DepartureAirportICAO", "DepartureTime", "Designator", "EnrichedFlightData", "FlightID", "FlightNumber", "FlightsEnrichService", "Format", "GetByDesignator", "GetByICAOOrIATA", "IsZero", "LiveFlight", "LiveFlightID", "Sprintf", "airline.Classification", "arrival.Designator", "context.Context", "data.Classification", "data.FlightID", "departure.Designator", "flight.AirlineDesignator", "flight.ArrivalAirportIATA", "flight.ArrivalAirportICAO", "flight.DepartureAirportIATA", "flight.DepartureAirportICAO", "flight.DepartureTime", "flight.FlightNumber", "flight.ID", "fmt.Sprintf", "s.airlines", "s.airports", "s.metrics"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"fmt\"\n)\n// receiver: s *FlightsEnrichService", "summary_en": "Enriches flight data based on airline and airport information, handling errors and updating metrics", "keywords_en": ["airline classification", "airport retrieval", "data caching", "error handling", "flight enrichment", "metrics tracking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:27.752000", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "fac24139103d3ba8", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 191, "end_line": 197, "text": "func optionalString(s string) *string {\n\tif s == \"\" {\n\t\treturn nil\n\t}\n\treturn &s\n}\n", "n_tokens": 25, "primary_symbol": "optionalString", "primary_kind": "function", "primary_span": [191, 197], "def_symbols": [], "symbols": ["optionalString", "func", "string", "return", "nil"], "doc_head": "func optionalString(s string) *string {\n\tif s == \"\" {\n\t\treturn nil\n\t}\n\treturn &s\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:optionalString/complete", "package": "core", "node_kind": "function", "receiver": "", "function_name": "optionalString", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["optionalString"], "all_kinds": ["function"], "all_ast_paths": ["go:function:optionalString/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [4776], "all_end_bytes": [4858], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Converts a string to a pointer, or returns nil if the string is empty", "keywords_en": ["conditional logic", "nil value handling", "optional values", "pointer conversion", "string manipulation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:31.202872", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "97a407ccfc2e50be", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/flights_enrich_service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go", "rel_path": "internal/core/flights_enrich_service.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 198, "end_line": 270, "text": "func (s *FlightsEnrichService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\n\tlog.Debug(ctx, \"Flights enrich metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"enriched\", s.metrics.totalEnriched),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"missing_flight_id\", s.metrics.missingFlightID),\n\t)\n\n\ttype pair struct {\n\t\tkey   string\n\t\tcount int\n\t}\n\texplain := func(data map[string]int) (distinct int, top10 []string) {\n\t\tdistinct = len(data)\n\n\t\tpairs := make([]pair, 0, distinct)\n\t\tfor k, v := range data {\n\t\t\tpairs = append(pairs, pair{k, v})\n\t\t}\n\n\t\tsort.Slice(pairs, func(i, j int) bool {\n\t\t\treturn pairs[i].count > pairs[j].count\n\t\t})\n\n\t\tn := 10\n\t\tif len(pairs) < n {\n\t\t\tn = len(pairs)\n\t\t}\n\t\ttop10 = make([]string, 0, n)\n\t\tfor i := 0; i < n; i++ {\n\t\t\ttop10 = append(top10, fmt.Sprintf(\"%s(%d)\", pairs[i].key, pairs[i].count))\n\t\t}\n\t\treturn\n\t}\n\n\taDistinct, aTop := explain(s.metrics.airlineNotFound)\n\tif aDistinct > 0 {\n\t\tlog.Debug(ctx, \"Airlines not found summary\",\n\t\t\tzap.Int(\"distinct_airlines_not_found_count\", aDistinct),\n\t\t\tzap.Strings(\"top_airlines_not_found\", aTop),\n\t\t)\n\t}\n\n\tdDistinct, dTop := explain(s.metrics.departureAirportNotFound)\n\tif dDistinct > 0 {\n\t\tlog.Debug(ctx, \"Departure airports not found summary\",\n\t\t\tzap.Int(\"distinct_departures_not_found_count\", dDistinct),\n\t\t\tzap.Strings(\"top_departures_not_found\", dTop),\n\t\t)\n\t}\n\n\trDistinct, rTop := explain(s.metrics.arrivalAirportNotFound)\n\tif rDistinct > 0 {\n\t\tlog.Debug(ctx, \"Arrival airports not found summary\",\n\t\t\tzap.Int(\"distinct_arrivals_not_found_count\", rDistinct),\n\t\t\tzap.Strings(\"top_arrivals_not_found\", rTop),\n\t\t)\n\t}\n\n\ts.metrics = enrichMetrics{\n\t\tairlineNotFound:          make(map[string]int),\n\t\tdepartureAirportNotFound: make(map[string]int),\n\t\tarrivalAirportNotFound:   make(map[string]int),\n\t\tlastReport:               now,\n\t}\n}\n", "n_tokens": 575, "primary_symbol": "logMetricsIfNeeded", "primary_kind": "method", "primary_span": [198, 270], "def_symbols": [], "symbols": ["logMetricsIfNeeded", "func", "FlightsEnrichService", "ctx", "context", "Context", "now", "time", "Now", "Sub", "metrics", "lastReport", "Minute", "return", "log", "Debug", "Flights", "enrich", "last", "min", "zap", "Int", "calls", "totalCalls", "enriched", "totalEnriched", "failed", "totalFailed", "skipped", "totalSkipped", "missing_flight_id", "missingFlightID", "type", "pair", "struct", "key", "string", "count", "int", "explain", "data", "map", "distinct", "top10", "len", "pairs", "make", "for", "range", "append", "sort", "Slice", "bool", "fmt", "Sprintf", "aDistinct", "aTop", "airlineNotFound", "Airlines", "not", "found", "summary", "distinct_airlines_not_found_count", "Strings", "top_airlines_not_found", "dDistinct", "dTop", "departureAirportNotFound", "Departure", "airports", "distinct_departures_not_found_count", "top_departures_not_found", "rDistinct", "rTop", "arrivalAirportNotFound", "Arrival", "distinct_arrivals_not_found_count", "top_arrivals_not_found", "enrichMetrics"], "doc_head": "func (s *FlightsEnrichService) logMetricsIfNeeded(ctx context.Context) {\n\tnow := time.Now()\n\tif now.Sub(s.metrics.lastReport) < 5*time.Minute {\n\t\treturn\n\t}\n\tlog.Debug(ctx, \"Flights enrich metrics (last 5 min)\",\n\t\tzap.Int(\"calls\", s.metrics.totalCalls),\n\t\tzap.Int(\"enriched\", s.metrics.totalEnriched),\n\t\tzap.Int(\"failed\", s.metrics.totalFailed),\n\t\tzap.Int(\"skipped\", s.metrics.totalSkipped),\n\t\tzap.Int(\"missing_flight_id\", s.metrics.missingFlightID),\n\t)\n\ttype pair struct {\n\t\tkey   string\n\t\tcount int\n\t}\n\texplain := func(data map[string]int) (distinct int, top10 []string) {\n\t\tdistinct = len(data)\n\t\tpairs := make([]pair, 0, distinct)\n\t\tfor k, v := range data {\n\t\t\tpairs = append(pairs, pair{k, v})\n\t\t}\n\t\tsort.Slice(pairs, func(i, j int) bool {\n\t\t\treturn pairs[i].count > pairs[j].count\n\t\t})\n\t\tn := 10\n\t\tif len(pairs) < n {\n\t\t\tn = len(pairs)\n\t\t}\n\t\ttop10 = make([]string, 0, n)\n\t\tfor i := 0; i < n; i++ {\n\t\t\ttop10 = append(top10, fmt.Sprintf(\"%s(%d)\", pairs[i].key, pairs[i].count))\n\t\t}\n\t\treturn\n\t}\n\taDistinct, aTop := explain(s.metrics.airlineNotFound)\n\tif aDistinct > 0 {\n\t\tlog.Debug(ctx, \"Airlines not found summary\",\n\t\t\tzap.Int(\"distinct_airlines_not_found_count\", aDistinct),", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*FlightsEnrichService).logMetricsIfNeeded/complete", "package": "core", "node_kind": "method", "receiver": "s *FlightsEnrichService", "function_name": "", "method_name": "logMetricsIfNeeded", "type_name": "FlightsEnrichService", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["logMetricsIfNeeded"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*FlightsEnrichService).logMetricsIfNeeded/complete"], "all_roles": ["complete"], "all_receivers": ["s *FlightsEnrichService"], "all_type_names": ["FlightsEnrichService"], "all_type_kinds": [null], "all_start_bytes": [4860], "all_end_bytes": [6830], "primary_index": 0, "all_receivers_normalized": ["(*FlightsEnrichService)"], "imports_used_minimal": ["context", "fmt", "go.impalastudios.com/log", "go.uber.org/zap", "sort", "time"], "symbols_referenced_strict": ["Context", "Debug", "FlightsEnrichService", "Int", "Minute", "Now", "Slice", "Sprintf", "Strings", "Sub", "context.Context", "fmt.Sprintf", "log.Debug", "now.Sub", "s.metrics", "sort.Slice", "time.Minute", "time.Now", "zap.Int", "zap.Strings"], "header_context_minimal": "package core\nimport (\n    \"context\"\n    \"fmt\"\n    \"go.impalastudios.com/log\"\n    \"go.uber.org/zap\"\n    \"sort\"\n)\n// receiver: s *FlightsEnrichService", "summary_en": "Logs metrics for flights enrichment if the last report was more than 5 minutes ago, including summaries of distinct and top entries", "keywords_en": ["airline not found", "arrival airport not found", "departure airport not found", "log metrics", "metrics reporting", "time interval"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:36.743364", "file_synopsis_hash": "1d09e639ba45223e", "chunk_text_hash": "6e8c658a16146304", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/flights_enrich_service.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/errors.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go", "rel_path": "internal/core/errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package core\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "core"], "doc_head": "package core", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "core", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package core", "summary_en": "Contains core utilities and functions", "keywords_en": ["core utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:36.756712", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "668b5c25d17e472b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/errors.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go", "rel_path": "internal/core/errors.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 9, "text": "import \"github.com/cockroachdb/errors\"\n\nvar (\n\tErrFlightNotFound = errors.New(\"flight not found\")\n\tErrCacheMiss      = errors.New(\"cache miss\")\n)\n", "n_tokens": 37, "primary_symbol": "", "primary_kind": "unknown", "primary_span": [3, 9], "def_symbols": [], "symbols": ["import", "github", "com", "cockroachdb", "errors", "var", "ErrFlightNotFound", "New", "flight", "not", "found", "ErrCacheMiss", "cache", "miss"], "doc_head": "import \"github.com/cockroachdb/errors\"\nvar (\n\tErrFlightNotFound = errors.New(\"flight not found\")\n\tErrCacheMiss      = errors.New(\"cache miss\")\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "core", "node_kind": "unknown", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": ["github.com/cockroachdb/errors"], "symbols_referenced_strict": ["ErrCacheMiss", "ErrFlightNotFound", "New", "errors.New"], "header_context_minimal": "package core\nimport \"github.com/cockroachdb/errors\"", "summary_en": "Defines error messages for flight-related operations", "keywords_en": ["cache miss", "error handling", "flight not found"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:38.984962", "file_synopsis_hash": "7380a743ea10b7ea", "chunk_text_hash": "33d4af04bdd61ecb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/errors.go#1"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n", "n_tokens": 49, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "service_mocks", "package"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Generates mock implementations for service methods", "keywords_en": ["destination file", "method mocks", "mock generation", "package creation", "service interfaces", "source code"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:38.999778", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "bafddb51f88d3f65", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 11, "text": "// Package mocks is a generated GoMock package.\npackage mocks\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "header", "primary_span": [9, 11], "def_symbols": [], "symbols": ["Package", "mocks", "generated", "GoMock", "package"], "doc_head": "// Package mocks is a generated GoMock package.\npackage mocks", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Package mocks contains generated GoMock types and methods for testing purposes", "keywords_en": ["code stubs", "go mock", "method implementations", "package generation", "testing tools", "type definitions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:39.001056", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "6048227566d0ec95", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 19, "text": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 42, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 19], "def_symbols": [], "symbols": ["import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock"], "doc_head": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This Go package contains mocks for core components, including context and reflection", "keywords_en": ["context mocking", "core components", "mock generation", "reflection utilities", "testing support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:41.804865", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "2c1ac07328a2a65a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 20, "end_line": 23, "text": "// MockliveFlightsRepository is a mock of liveFlightsRepository interface.\ntype MockliveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockliveFlightsRepositoryMockRecorder", "n_tokens": 41, "primary_symbol": "MockliveFlightsRepository", "primary_kind": "type", "primary_span": [20, 23], "def_symbols": [], "symbols": ["MockliveFlightsRepository", "mock", "liveFlightsRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockliveFlightsRepositoryMockRecorder"], "doc_head": "// MockliveFlightsRepository is a mock of liveFlightsRepository interface.\ntype MockliveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockliveFlightsRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockliveFlightsRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockliveFlightsRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockliveFlightsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockliveFlightsRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [478], "all_end_bytes": [611], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Defines a mock implementation of the liveFlightsRepository interface for testing purposes", "keywords_en": ["interface implementation", "mock repository", "testing support", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:44.396534", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "54cf1abac24aa462", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 24, "end_line": 26, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockliveFlightsRepository", "primary_kind": "type", "primary_span": [24, 26], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockliveFlightsRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockliveFlightsRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockliveFlightsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockliveFlightsRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [478], "all_end_bytes": [611], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Represents a mock live flights repository for testing", "keywords_en": ["flight data", "mock repository", "repository interface", "test setup", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:46.895180", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 27, "end_line": 31, "text": "// MockliveFlightsRepositoryMockRecorder is the mock recorder for MockliveFlightsRepository.\ntype MockliveFlightsRepositoryMockRecorder struct {\n\tmock *MockliveFlightsRepository\n}\n", "n_tokens": 38, "primary_symbol": "MockliveFlightsRepositoryMockRecorder", "primary_kind": "type", "primary_span": [27, 31], "def_symbols": [], "symbols": ["MockliveFlightsRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockliveFlightsRepository", "type", "struct"], "doc_head": "// MockliveFlightsRepositoryMockRecorder is the mock recorder for MockliveFlightsRepository.\ntype MockliveFlightsRepositoryMockRecorder struct {\n\tmock *MockliveFlightsRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockliveFlightsRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockliveFlightsRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockliveFlightsRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockliveFlightsRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockliveFlightsRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [711], "all_end_bytes": [792], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "defines a struct for recording method calls on MockliveFlightsRepository mock objects", "keywords_en": ["interface mocking", "method calls", "mock recorder", "record behavior", "repository methods", "test doubles", "testing framework"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:49.958276", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "fd3d770d9d7cfe9c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 38, "text": "// NewMockliveFlightsRepository creates a new mock instance.\nfunc NewMockliveFlightsRepository(ctrl *gomock.Controller) *MockliveFlightsRepository {\n\tmock := &MockliveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockliveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 65, "primary_symbol": "NewMockliveFlightsRepository", "primary_kind": "function", "primary_span": [33, 38], "def_symbols": [], "symbols": ["NewMockliveFlightsRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockliveFlightsRepository", "recorder", "MockliveFlightsRepositoryMockRecorder", "return"], "doc_head": "// NewMockliveFlightsRepository creates a new mock instance.\nfunc NewMockliveFlightsRepository(ctrl *gomock.Controller) *MockliveFlightsRepository {\n\tmock := &MockliveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockliveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockliveFlightsRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockliveFlightsRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockliveFlightsRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockliveFlightsRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [855], "all_end_bytes": [1067], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "NewMockliveFlightsRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock live flights repository for testing", "keywords_en": ["controller setup", "mock instance", "recorder initialization", "repository creation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:52.520300", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "39350e2ab84da811", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 39, "end_line": 43, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockliveFlightsRepository) EXPECT() *MockliveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 41, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [40, 43], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockliveFlightsRepository) EXPECT() *MockliveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockliveFlightsRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockliveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockliveFlightsRepository"], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [1146], "all_end_bytes": [1252], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockliveFlightsRepository", "summary_en": "returns a recorder object for expected method calls on the mock live flights repository", "keywords_en": ["method expectations", "mock setup", "recorder object", "repository interface", "test preparation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:55.728607", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "53d4585871cd4ba1", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 44, "end_line": 52, "text": "// Filter mocks base method.\nfunc (m *MockliveFlightsRepository) Filter(arg0 context.Context, arg1 *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Filter\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 94, "primary_symbol": "Filter", "primary_kind": "method", "primary_span": [45, 52], "def_symbols": [], "symbols": ["Filter", "mocks", "base", "method", "func", "MockliveFlightsRepository", "arg0", "context", "Context", "arg1", "core", "FlightsWithin", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// Filter mocks base method.\nfunc (m *MockliveFlightsRepository) Filter(arg0 context.Context, arg1 *core.FlightsWithin) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Filter\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepository).Filter/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockliveFlightsRepository", "function_name": "", "method_name": "Filter", "type_name": "MockliveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Filter"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepository).Filter/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockliveFlightsRepository"], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [1283], "all_end_bytes": [1555], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "Filter", "FlightsWithin", "Helper", "LiveFlight", "MockliveFlightsRepository", "T.Helper", "context.Context", "core.FlightsWithin", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockliveFlightsRepository", "summary_en": "Mock implementation of Filter method for live flights repository", "keywords_en": ["filter method", "live flights", "mock implementation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:15:58.362770", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "0762fe50a94b0a6f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 53, "end_line": 58, "text": "// Filter indicates an expected call of Filter.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) Filter(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Filter\", reflect.TypeOf((*MockliveFlightsRepository)(nil).Filter), arg0, arg1)\n}\n", "n_tokens": 77, "primary_symbol": "Filter", "primary_kind": "method", "primary_span": [54, 58], "def_symbols": [], "symbols": ["Filter", "indicates", "expected", "call", "func", "MockliveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockliveFlightsRepository", "nil"], "doc_head": "// Filter indicates an expected call of Filter.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) Filter(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Filter\", reflect.TypeOf((*MockliveFlightsRepository)(nil).Filter), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepositoryMockRecorder).Filter/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockliveFlightsRepositoryMockRecorder", "function_name": "", "method_name": "Filter", "type_name": "MockliveFlightsRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Filter"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepositoryMockRecorder).Filter/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockliveFlightsRepositoryMockRecorder"], "all_type_names": ["MockliveFlightsRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1605], "all_end_bytes": [1853], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Filter", "Helper", "MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockliveFlightsRepositoryMockRecorder", "summary_en": "Records an expected call to Filter method with parameters", "keywords_en": ["method invocation", "parameter handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:00.821811", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "4a77a146c0573aa2", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 59, "end_line": 67, "text": "// GetFlightDetailsByFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 104, "primary_symbol": "GetFlightDetailsByFlightID", "primary_kind": "method", "primary_span": [60, 67], "def_symbols": [], "symbols": ["GetFlightDetailsByFlightID", "mocks", "base", "method", "func", "MockliveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetFlightDetailsByFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepository).GetFlightDetailsByFlightID/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockliveFlightsRepository", "function_name": "", "method_name": "GetFlightDetailsByFlightID", "type_name": "MockliveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetFlightDetailsByFlightID"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepository).GetFlightDetailsByFlightID/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockliveFlightsRepository"], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [1904], "all_end_bytes": [2199], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "GetFlightDetailsByFlightID", "Helper", "LiveFlight", "MockliveFlightsRepository", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockliveFlightsRepository", "summary_en": "Mocks a method to retrieve flight details by flight ID", "keywords_en": ["error handling", "flight details"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:03.840306", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "023e34743cbc5382", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 68, "end_line": 73, "text": "// GetFlightDetailsByFlightID indicates an expected call of GetFlightDetailsByFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByFlightID), arg0, arg1)\n}\n", "n_tokens": 102, "primary_symbol": "GetFlightDetailsByFlightID", "primary_kind": "method", "primary_span": [69, 73], "def_symbols": [], "symbols": ["GetFlightDetailsByFlightID", "indicates", "expected", "call", "func", "MockliveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockliveFlightsRepository", "nil"], "doc_head": "// GetFlightDetailsByFlightID indicates an expected call of GetFlightDetailsByFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByFlightID), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepositoryMockRecorder).GetFlightDetailsByFlightID/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockliveFlightsRepositoryMockRecorder", "function_name": "", "method_name": "GetFlightDetailsByFlightID", "type_name": "MockliveFlightsRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetFlightDetailsByFlightID"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepositoryMockRecorder).GetFlightDetailsByFlightID/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockliveFlightsRepositoryMockRecorder"], "all_type_names": ["MockliveFlightsRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [2289], "all_end_bytes": [2597], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetFlightDetailsByFlightID", "Helper", "MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockliveFlightsRepositoryMockRecorder", "summary_en": "Records a call to GetFlightDetailsByFlightID method in mock repository", "keywords_en": ["interface implementation", "mock control", "mock repository", "test doubles"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:07.131794", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "f79b6e2eeae2d400", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 74, "end_line": 82, "text": "// GetFlightDetailsByLiveFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByLiveFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByLiveFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 107, "primary_symbol": "GetFlightDetailsByLiveFlightID", "primary_kind": "method", "primary_span": [75, 82], "def_symbols": [], "symbols": ["GetFlightDetailsByLiveFlightID", "mocks", "base", "method", "func", "MockliveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetFlightDetailsByLiveFlightID mocks base method.\nfunc (m *MockliveFlightsRepository) GetFlightDetailsByLiveFlightID(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetFlightDetailsByLiveFlightID\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepository).GetFlightDetailsByLiveFlightID/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockliveFlightsRepository", "function_name": "", "method_name": "GetFlightDetailsByLiveFlightID", "type_name": "MockliveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetFlightDetailsByLiveFlightID"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepository).GetFlightDetailsByLiveFlightID/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockliveFlightsRepository"], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [2652], "all_end_bytes": [2955], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "GetFlightDetailsByLiveFlightID", "Helper", "LiveFlight", "MockliveFlightsRepository", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockliveFlightsRepository", "summary_en": "This function mocks retrieving flight details by live flight ID", "keywords_en": ["context handling", "error response", "flight retrieval", "method stubbing", "repository interface"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:10.287693", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "c9af906c5a2e53dd", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 83, "end_line": 88, "text": "// GetFlightDetailsByLiveFlightID indicates an expected call of GetFlightDetailsByLiveFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByLiveFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByLiveFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByLiveFlightID), arg0, arg1)\n}\n", "n_tokens": 107, "primary_symbol": "GetFlightDetailsByLiveFlightID", "primary_kind": "method", "primary_span": [84, 88], "def_symbols": [], "symbols": ["GetFlightDetailsByLiveFlightID", "indicates", "expected", "call", "func", "MockliveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockliveFlightsRepository", "nil"], "doc_head": "// GetFlightDetailsByLiveFlightID indicates an expected call of GetFlightDetailsByLiveFlightID.\nfunc (mr *MockliveFlightsRepositoryMockRecorder) GetFlightDetailsByLiveFlightID(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetFlightDetailsByLiveFlightID\", reflect.TypeOf((*MockliveFlightsRepository)(nil).GetFlightDetailsByLiveFlightID), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockliveFlightsRepositoryMockRecorder).GetFlightDetailsByLiveFlightID/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockliveFlightsRepositoryMockRecorder", "function_name": "", "method_name": "GetFlightDetailsByLiveFlightID", "type_name": "MockliveFlightsRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetFlightDetailsByLiveFlightID"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockliveFlightsRepositoryMockRecorder).GetFlightDetailsByLiveFlightID/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockliveFlightsRepositoryMockRecorder"], "all_type_names": ["MockliveFlightsRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [3053], "all_end_bytes": [3373], "primary_index": 0, "all_receivers_normalized": ["(*MockliveFlightsRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetFlightDetailsByLiveFlightID", "Helper", "MockliveFlightsRepository", "MockliveFlightsRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockliveFlightsRepositoryMockRecorder", "summary_en": "Records a call to GetFlightDetailsByLiveFlightID method with arguments", "keywords_en": ["argument recording", "flight details", "live flight id", "method invocation", "mock recorder"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:13.866119", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "5e05e9e0f986a2f1", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#13", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 89, "end_line": 92, "text": "// MockfilesystemLiveFlightsRepository is a mock of filesystemLiveFlightsRepository interface.\ntype MockfilesystemLiveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockfilesystemLiveFlightsRepositoryMockRecorder", "n_tokens": 45, "primary_symbol": "MockfilesystemLiveFlightsRepository", "primary_kind": "type", "primary_span": [89, 92], "def_symbols": [], "symbols": ["MockfilesystemLiveFlightsRepository", "mock", "filesystemLiveFlightsRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockfilesystemLiveFlightsRepositoryMockRecorder"], "doc_head": "// MockfilesystemLiveFlightsRepository is a mock of filesystemLiveFlightsRepository interface.\ntype MockfilesystemLiveFlightsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockfilesystemLiveFlightsRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockfilesystemLiveFlightsRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockfilesystemLiveFlightsRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockfilesystemLiveFlightsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockfilesystemLiveFlightsRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockfilesystemLiveFlightsRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [3475], "all_end_bytes": [3628], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Defines a mock implementation of the filesystemLiveFlightsRepository interface for testing purposes", "keywords_en": ["controller management", "interface mocking", "mock repository", "recorder setup", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:16.702277", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "b95f5f8cff74d0b0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#14", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 93, "end_line": 95, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockliveFlightsRepository", "primary_kind": "type", "primary_span": [93, 95], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockliveFlightsRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockliveFlightsRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockliveFlightsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockliveFlightsRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockliveFlightsRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [478], "all_end_bytes": [611], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Represents a mock live flights repository for testing", "keywords_en": ["flight data", "mock repository", "repository interface", "test setup", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:16.704116", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#15", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#17"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 96, "end_line": 100, "text": "// MockfilesystemLiveFlightsRepositoryMockRecorder is the mock recorder for MockfilesystemLiveFlightsRepository.\ntype MockfilesystemLiveFlightsRepositoryMockRecorder struct {\n\tmock *MockfilesystemLiveFlightsRepository\n}\n", "n_tokens": 42, "primary_symbol": "MockfilesystemLiveFlightsRepositoryMockRecorder", "primary_kind": "type", "primary_span": [96, 100], "def_symbols": [], "symbols": ["MockfilesystemLiveFlightsRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockfilesystemLiveFlightsRepository", "type", "struct"], "doc_head": "// MockfilesystemLiveFlightsRepositoryMockRecorder is the mock recorder for MockfilesystemLiveFlightsRepository.\ntype MockfilesystemLiveFlightsRepositoryMockRecorder struct {\n\tmock *MockfilesystemLiveFlightsRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockfilesystemLiveFlightsRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockfilesystemLiveFlightsRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockfilesystemLiveFlightsRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockfilesystemLiveFlightsRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockfilesystemLiveFlightsRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [3748], "all_end_bytes": [3849], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "This code defines a mock recorder for a filesystem live flights repository", "keywords_en": ["filesystem repository", "live flights", "mock recorder", "recorder implementation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:19.266471", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "ffe4dacff7ee0df8", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#16", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#18"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#18", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 101, "end_line": 107, "text": "// NewMockfilesystemLiveFlightsRepository creates a new mock instance.\nfunc NewMockfilesystemLiveFlightsRepository(ctrl *gomock.Controller) *MockfilesystemLiveFlightsRepository {\n\tmock := &MockfilesystemLiveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockfilesystemLiveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 70, "primary_symbol": "NewMockfilesystemLiveFlightsRepository", "primary_kind": "function", "primary_span": [102, 107], "def_symbols": [], "symbols": ["NewMockfilesystemLiveFlightsRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockfilesystemLiveFlightsRepository", "recorder", "MockfilesystemLiveFlightsRepositoryMockRecorder", "return"], "doc_head": "// NewMockfilesystemLiveFlightsRepository creates a new mock instance.\nfunc NewMockfilesystemLiveFlightsRepository(ctrl *gomock.Controller) *MockfilesystemLiveFlightsRepository {\n\tmock := &MockfilesystemLiveFlightsRepository{ctrl: ctrl}\n\tmock.recorder = &MockfilesystemLiveFlightsRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockfilesystemLiveFlightsRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockfilesystemLiveFlightsRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockfilesystemLiveFlightsRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockfilesystemLiveFlightsRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [3922], "all_end_bytes": [4174], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder", "NewMockfilesystemLiveFlightsRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock filesystem live flights repository instance", "keywords_en": ["controller management", "instance creation", "live flights", "mock repository", "recorder setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:22.079678", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "4bb4d2afdffb97d7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#17", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#19"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#19", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 108, "end_line": 112, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockfilesystemLiveFlightsRepository) EXPECT() *MockfilesystemLiveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 43, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [109, 112], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockfilesystemLiveFlightsRepository) EXPECT() *MockfilesystemLiveFlightsRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockfilesystemLiveFlightsRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockfilesystemLiveFlightsRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockfilesystemLiveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockfilesystemLiveFlightsRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockfilesystemLiveFlightsRepository"], "all_type_names": ["MockfilesystemLiveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [4253], "all_end_bytes": [4379], "primary_index": 0, "all_receivers_normalized": ["(*MockfilesystemLiveFlightsRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockfilesystemLiveFlightsRepository", "summary_en": "Enables setting expected interactions for the mock filesystem live flights repository", "keywords_en": ["mock recorder", "repository interaction", "testing framework"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:24.593744", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "b36ff629234f8f54", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#18", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#20"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#20", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 113, "end_line": 121, "text": "// GetLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) GetLiveFlight(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 96, "primary_symbol": "GetLiveFlight", "primary_kind": "method", "primary_span": [114, 121], "def_symbols": [], "symbols": ["GetLiveFlight", "mocks", "base", "method", "func", "MockfilesystemLiveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) GetLiveFlight(arg0 context.Context, arg1 string) (*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetLiveFlight\", arg0, arg1)\n\tret0, _ := ret[0].(*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockfilesystemLiveFlightsRepository).GetLiveFlight/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockfilesystemLiveFlightsRepository", "function_name": "", "method_name": "GetLiveFlight", "type_name": "MockfilesystemLiveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetLiveFlight"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockfilesystemLiveFlightsRepository).GetLiveFlight/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockfilesystemLiveFlightsRepository"], "all_type_names": ["MockfilesystemLiveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [4417], "all_end_bytes": [4696], "primary_index": 0, "all_receivers_normalized": ["(*MockfilesystemLiveFlightsRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "GetLiveFlight", "Helper", "LiveFlight", "MockfilesystemLiveFlightsRepository", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockfilesystemLiveFlightsRepository", "summary_en": "This function mocks the retrieval of a live flight", "keywords_en": ["context handling", "error management", "live flight retrieval", "mock function", "repository method"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:27.586527", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "573fb444fbb45d66", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#19", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#21"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#21", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 122, "end_line": 127, "text": "// GetLiveFlight indicates an expected call of GetLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) GetLiveFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).GetLiveFlight), arg0, arg1)\n}\n", "n_tokens": 89, "primary_symbol": "GetLiveFlight", "primary_kind": "method", "primary_span": [123, 127], "def_symbols": [], "symbols": ["GetLiveFlight", "indicates", "expected", "call", "func", "MockfilesystemLiveFlightsRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockfilesystemLiveFlightsRepository", "nil"], "doc_head": "// GetLiveFlight indicates an expected call of GetLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) GetLiveFlight(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).GetLiveFlight), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockfilesystemLiveFlightsRepositoryMockRecorder).GetLiveFlight/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockfilesystemLiveFlightsRepositoryMockRecorder", "function_name": "", "method_name": "GetLiveFlight", "type_name": "MockfilesystemLiveFlightsRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetLiveFlight"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockfilesystemLiveFlightsRepositoryMockRecorder).GetLiveFlight/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockfilesystemLiveFlightsRepositoryMockRecorder"], "all_type_names": ["MockfilesystemLiveFlightsRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [4760], "all_end_bytes": [5049], "primary_index": 0, "all_receivers_normalized": ["(*MockfilesystemLiveFlightsRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetLiveFlight", "Helper", "MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockfilesystemLiveFlightsRepositoryMockRecorder", "summary_en": "Records an expected call to GetLiveFlight method", "keywords_en": ["interface methods", "method recording", "mock recorder", "test utility", "testing framework", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:30.794350", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "d8880cf315c2b6da", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#20", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#22"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#22", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 128, "end_line": 135, "text": "// SaveLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) SaveLiveFlight(arg0 context.Context, arg1 string, arg2 *core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"SaveLiveFlight\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 83, "primary_symbol": "SaveLiveFlight", "primary_kind": "method", "primary_span": [129, 135], "def_symbols": [], "symbols": ["SaveLiveFlight", "mocks", "base", "method", "func", "MockfilesystemLiveFlightsRepository", "arg0", "context", "Context", "arg1", "string", "arg2", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// SaveLiveFlight mocks base method.\nfunc (m *MockfilesystemLiveFlightsRepository) SaveLiveFlight(arg0 context.Context, arg1 string, arg2 *core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"SaveLiveFlight\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockfilesystemLiveFlightsRepository).SaveLiveFlight/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockfilesystemLiveFlightsRepository", "function_name": "", "method_name": "SaveLiveFlight", "type_name": "MockfilesystemLiveFlightsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["SaveLiveFlight"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockfilesystemLiveFlightsRepository).SaveLiveFlight/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockfilesystemLiveFlightsRepository"], "all_type_names": ["MockfilesystemLiveFlightsRepository"], "all_type_kinds": [null], "all_start_bytes": [5088], "all_end_bytes": [5334], "primary_index": 0, "all_receivers_normalized": ["(*MockfilesystemLiveFlightsRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "Helper", "LiveFlight", "MockfilesystemLiveFlightsRepository", "SaveLiveFlight", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockfilesystemLiveFlightsRepository", "summary_en": "The SaveLiveFlight function mocks saving a live flight in a filesystem repository", "keywords_en": ["error handling", "live flight"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:34.037154", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "0cf95578613798e0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#21", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#23"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#23", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go", "rel_path": "internal/core/mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 136, "end_line": 141, "text": "// SaveLiveFlight indicates an expected call of SaveLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) SaveLiveFlight(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"SaveLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).SaveLiveFlight), arg0, arg1, arg2)\n}\n", "n_tokens": 95, "primary_symbol": "SaveLiveFlight", "primary_kind": "method", "primary_span": [137, 141], "def_symbols": [], "symbols": ["SaveLiveFlight", "indicates", "expected", "call", "func", "MockfilesystemLiveFlightsRepositoryMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockfilesystemLiveFlightsRepository", "nil"], "doc_head": "// SaveLiveFlight indicates an expected call of SaveLiveFlight.\nfunc (mr *MockfilesystemLiveFlightsRepositoryMockRecorder) SaveLiveFlight(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"SaveLiveFlight\", reflect.TypeOf((*MockfilesystemLiveFlightsRepository)(nil).SaveLiveFlight), arg0, arg1, arg2)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockfilesystemLiveFlightsRepositoryMockRecorder).SaveLiveFlight/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockfilesystemLiveFlightsRepositoryMockRecorder", "function_name": "", "method_name": "SaveLiveFlight", "type_name": "MockfilesystemLiveFlightsRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["SaveLiveFlight"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockfilesystemLiveFlightsRepositoryMockRecorder).SaveLiveFlight/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockfilesystemLiveFlightsRepositoryMockRecorder"], "all_type_names": ["MockfilesystemLiveFlightsRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [5400], "all_end_bytes": [5704], "primary_index": 0, "all_receivers_normalized": ["(*MockfilesystemLiveFlightsRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Helper", "MockfilesystemLiveFlightsRepository", "MockfilesystemLiveFlightsRepositoryMockRecorder", "RecordCallWithMethodType", "SaveLiveFlight", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockfilesystemLiveFlightsRepositoryMockRecorder", "summary_en": "Records an expected call to SaveLiveFlight method on MockfilesystemLiveFlightsRepositoryMockRecorder", "keywords_en": ["method type", "mock recorder", "reflect type", "test helper"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:37.310155", "file_synopsis_hash": "b5cf63571c5ab015", "chunk_text_hash": "c5a2a20d457fbf3f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/service_mocks.go#22"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_ingest_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\n//\n", "n_tokens": 60, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "flights_ingest_service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "flights_ingest_service_mocks", "package"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_ingest_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_ingest_service.go -destination=mocks/flights_ingest_service_mocks.go -package=mocks\n//", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Mock definitions for flight ingestion service", "keywords_en": ["go package"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:39.760430", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "dd44f49e192ff1fa", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 11, "text": "// Package mocks is a generated GoMock package.\npackage mocks\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "header", "primary_span": [9, 11], "def_symbols": [], "symbols": ["Package", "mocks", "generated", "GoMock", "package"], "doc_head": "// Package mocks is a generated GoMock package.\npackage mocks", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Package mocks contains generated GoMock types and methods for testing purposes", "keywords_en": ["code stubs", "go mock", "method implementations", "package generation", "testing tools", "type definitions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:39.765620", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "6048227566d0ec95", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 19, "text": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 42, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 19], "def_symbols": [], "symbols": ["import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock"], "doc_head": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This Go package contains mocks for core components, including context and reflection", "keywords_en": ["context mocking", "core components", "mock generation", "reflection utilities", "testing support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:39.766389", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "2c1ac07328a2a65a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 20, "end_line": 23, "text": "// MockflightUpdatesRepository is a mock of flightUpdatesRepository interface.\ntype MockflightUpdatesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightUpdatesRepositoryMockRecorder", "n_tokens": 37, "primary_symbol": "MockflightUpdatesRepository", "primary_kind": "type", "primary_span": [20, 23], "def_symbols": [], "symbols": ["MockflightUpdatesRepository", "mock", "flightUpdatesRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockflightUpdatesRepositoryMockRecorder"], "doc_head": "// MockflightUpdatesRepository is a mock of flightUpdatesRepository interface.\ntype MockflightUpdatesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightUpdatesRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightUpdatesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightUpdatesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightUpdatesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightUpdatesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightUpdatesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [527], "all_end_bytes": [664], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockflightUpdatesRepository", "MockflightUpdatesRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Defines a mock implementation of flight updates repository", "keywords_en": ["controller management", "flight updates repository", "mock implementation", "recorder interface"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:42.455530", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "498c4add4524079d", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 24, "end_line": 26, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockflightUpdatesRepository", "primary_kind": "type", "primary_span": [24, 26], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightUpdatesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightUpdatesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightUpdatesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightUpdatesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightUpdatesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [527], "all_end_bytes": [664], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Mock struct for flight updates repository", "keywords_en": ["flight updates"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:44.751103", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 27, "end_line": 31, "text": "// MockflightUpdatesRepositoryMockRecorder is the mock recorder for MockflightUpdatesRepository.\ntype MockflightUpdatesRepositoryMockRecorder struct {\n\tmock *MockflightUpdatesRepository\n}\n", "n_tokens": 34, "primary_symbol": "MockflightUpdatesRepositoryMockRecorder", "primary_kind": "type", "primary_span": [27, 31], "def_symbols": [], "symbols": ["MockflightUpdatesRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockflightUpdatesRepository", "type", "struct"], "doc_head": "// MockflightUpdatesRepositoryMockRecorder is the mock recorder for MockflightUpdatesRepository.\ntype MockflightUpdatesRepositoryMockRecorder struct {\n\tmock *MockflightUpdatesRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightUpdatesRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightUpdatesRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightUpdatesRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightUpdatesRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightUpdatesRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [768], "all_end_bytes": [853], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockflightUpdatesRepository", "MockflightUpdatesRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "Defines a mock recorder for a flight updates repository", "keywords_en": ["flight updates repository", "mock recorder", "test doubles"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:47.034877", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "feaa634ca286a405", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 38, "text": "// NewMockflightUpdatesRepository creates a new mock instance.\nfunc NewMockflightUpdatesRepository(ctrl *gomock.Controller) *MockflightUpdatesRepository {\n\tmock := &MockflightUpdatesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightUpdatesRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 60, "primary_symbol": "NewMockflightUpdatesRepository", "primary_kind": "function", "primary_span": [33, 38], "def_symbols": [], "symbols": ["NewMockflightUpdatesRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockflightUpdatesRepository", "recorder", "MockflightUpdatesRepositoryMockRecorder", "return"], "doc_head": "// NewMockflightUpdatesRepository creates a new mock instance.\nfunc NewMockflightUpdatesRepository(ctrl *gomock.Controller) *MockflightUpdatesRepository {\n\tmock := &MockflightUpdatesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightUpdatesRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockflightUpdatesRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockflightUpdatesRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockflightUpdatesRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockflightUpdatesRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [918], "all_end_bytes": [1138], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockflightUpdatesRepository", "MockflightUpdatesRepositoryMockRecorder", "NewMockflightUpdatesRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a mock instance for flight updates repository", "keywords_en": ["dependency injection", "mock instance", "repository creation", "testing framework"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:49.502159", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "c6b976f8f07f6f44", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 39, "end_line": 43, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightUpdatesRepository) EXPECT() *MockflightUpdatesRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 39, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [40, 43], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockflightUpdatesRepository", "MockflightUpdatesRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightUpdatesRepository) EXPECT() *MockflightUpdatesRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightUpdatesRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightUpdatesRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockflightUpdatesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightUpdatesRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightUpdatesRepository"], "all_type_names": ["MockflightUpdatesRepository"], "all_type_kinds": [null], "all_start_bytes": [1217], "all_end_bytes": [1327], "primary_index": 0, "all_receivers_normalized": ["(*MockflightUpdatesRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockflightUpdatesRepository", "MockflightUpdatesRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockflightUpdatesRepository", "summary_en": "Returns a recorder object for expected calls on the mock flight updates repository", "keywords_en": ["expected calls", "mock repository", "recorder object"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:51.952095", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "b00ba8a7c65e12c2", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 44, "end_line": 51, "text": "// UpsertMany mocks base method.\nfunc (m *MockflightUpdatesRepository) UpsertMany(arg0 context.Context, arg1 []*core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"UpsertMany\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 75, "primary_symbol": "UpsertMany", "primary_kind": "method", "primary_span": [45, 51], "def_symbols": [], "symbols": ["UpsertMany", "mocks", "base", "method", "func", "MockflightUpdatesRepository", "arg0", "context", "Context", "arg1", "core", "LiveFlightUpdate", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// UpsertMany mocks base method.\nfunc (m *MockflightUpdatesRepository) UpsertMany(arg0 context.Context, arg1 []*core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"UpsertMany\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightUpdatesRepository).UpsertMany/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightUpdatesRepository", "function_name": "", "method_name": "UpsertMany", "type_name": "MockflightUpdatesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["UpsertMany"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightUpdatesRepository).UpsertMany/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightUpdatesRepository"], "all_type_names": ["MockflightUpdatesRepository"], "all_type_kinds": [null], "all_start_bytes": [1362], "all_end_bytes": [1581], "primary_index": 0, "all_receivers_normalized": ["(*MockflightUpdatesRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "Helper", "LiveFlightUpdate", "MockflightUpdatesRepository", "T.Helper", "UpsertMany", "context.Context", "core.LiveFlightUpdate", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockflightUpdatesRepository", "summary_en": "Mock implementation of UpsertMany method for flight updates", "keywords_en": ["context handling", "error management", "flight updates", "mock implementation", "repository mock", "upsert many"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:54.856749", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "22a19c021b80a2f3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 52, "end_line": 57, "text": "// UpsertMany indicates an expected call of UpsertMany.\nfunc (mr *MockflightUpdatesRepositoryMockRecorder) UpsertMany(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"UpsertMany\", reflect.TypeOf((*MockflightUpdatesRepository)(nil).UpsertMany), arg0, arg1)\n}\n", "n_tokens": 85, "primary_symbol": "UpsertMany", "primary_kind": "method", "primary_span": [53, 57], "def_symbols": [], "symbols": ["UpsertMany", "indicates", "expected", "call", "func", "MockflightUpdatesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightUpdatesRepository", "nil"], "doc_head": "// UpsertMany indicates an expected call of UpsertMany.\nfunc (mr *MockflightUpdatesRepositoryMockRecorder) UpsertMany(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"UpsertMany\", reflect.TypeOf((*MockflightUpdatesRepository)(nil).UpsertMany), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightUpdatesRepositoryMockRecorder).UpsertMany/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockflightUpdatesRepositoryMockRecorder", "function_name": "", "method_name": "UpsertMany", "type_name": "MockflightUpdatesRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["UpsertMany"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightUpdatesRepositoryMockRecorder).UpsertMany/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockflightUpdatesRepositoryMockRecorder"], "all_type_names": ["MockflightUpdatesRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1639], "all_end_bytes": [1903], "primary_index": 0, "all_receivers_normalized": ["(*MockflightUpdatesRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Helper", "MockflightUpdatesRepository", "MockflightUpdatesRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "UpsertMany", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockflightUpdatesRepositoryMockRecorder", "summary_en": "Records an expected call to UpsertMany method", "keywords_en": ["argument recording", "method recording", "mock recorder", "upsertmany method"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:16:57.860298", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "7e07ca2b4cabe4f3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 58, "end_line": 61, "text": "// MockrealtimeFlightUpdatesClient is a mock of realtimeFlightUpdatesClient interface.\ntype MockrealtimeFlightUpdatesClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrealtimeFlightUpdatesClientMockRecorder", "n_tokens": 44, "primary_symbol": "MockrealtimeFlightUpdatesClient", "primary_kind": "type", "primary_span": [58, 61], "def_symbols": [], "symbols": ["MockrealtimeFlightUpdatesClient", "mock", "realtimeFlightUpdatesClient", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockrealtimeFlightUpdatesClientMockRecorder"], "doc_head": "// MockrealtimeFlightUpdatesClient is a mock of realtimeFlightUpdatesClient interface.\ntype MockrealtimeFlightUpdatesClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrealtimeFlightUpdatesClientMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockrealtimeFlightUpdatesClient (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockrealtimeFlightUpdatesClient", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockrealtimeFlightUpdatesClient"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockrealtimeFlightUpdatesClient (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockrealtimeFlightUpdatesClient"], "all_type_kinds": ["struct"], "all_start_bytes": [1997], "all_end_bytes": [2142], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockrealtimeFlightUpdatesClient", "MockrealtimeFlightUpdatesClientMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "defines a mock client for the realtimeFlightUpdatesClient interface, enabling unit testing with GoMock", "keywords_en": ["controller setup", "interface implementation", "mock client", "recorder management", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:00.938171", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "e4ea44c4137d5db5", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 62, "end_line": 64, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockflightUpdatesRepository", "primary_kind": "type", "primary_span": [62, 64], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightUpdatesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightUpdatesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightUpdatesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightUpdatesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightUpdatesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [527], "all_end_bytes": [664], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Mock struct for flight updates repository", "keywords_en": ["flight updates"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:00.942344", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 65, "end_line": 69, "text": "// MockrealtimeFlightUpdatesClientMockRecorder is the mock recorder for MockrealtimeFlightUpdatesClient.\ntype MockrealtimeFlightUpdatesClientMockRecorder struct {\n\tmock *MockrealtimeFlightUpdatesClient\n}\n", "n_tokens": 42, "primary_symbol": "MockrealtimeFlightUpdatesClientMockRecorder", "primary_kind": "type", "primary_span": [65, 69], "def_symbols": [], "symbols": ["MockrealtimeFlightUpdatesClientMockRecorder", "the", "mock", "recorder", "for", "MockrealtimeFlightUpdatesClient", "type", "struct"], "doc_head": "// MockrealtimeFlightUpdatesClientMockRecorder is the mock recorder for MockrealtimeFlightUpdatesClient.\ntype MockrealtimeFlightUpdatesClientMockRecorder struct {\n\tmock *MockrealtimeFlightUpdatesClient\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockrealtimeFlightUpdatesClientMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockrealtimeFlightUpdatesClientMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockrealtimeFlightUpdatesClientMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockrealtimeFlightUpdatesClientMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockrealtimeFlightUpdatesClientMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [2254], "all_end_bytes": [2347], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockrealtimeFlightUpdatesClient", "MockrealtimeFlightUpdatesClientMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "This struct represents a mock recorder for the MockrealtimeFlightUpdatesClient, used in testing", "keywords_en": ["cache management", "client interface", "error handling", "flight updates", "mock recorder", "testing framework"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:03.984033", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "25417e3c0ccaf92e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 70, "end_line": 76, "text": "// NewMockrealtimeFlightUpdatesClient creates a new mock instance.\nfunc NewMockrealtimeFlightUpdatesClient(ctrl *gomock.Controller) *MockrealtimeFlightUpdatesClient {\n\tmock := &MockrealtimeFlightUpdatesClient{ctrl: ctrl}\n\tmock.recorder = &MockrealtimeFlightUpdatesClientMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 70, "primary_symbol": "NewMockrealtimeFlightUpdatesClient", "primary_kind": "function", "primary_span": [71, 76], "def_symbols": [], "symbols": ["NewMockrealtimeFlightUpdatesClient", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockrealtimeFlightUpdatesClient", "recorder", "MockrealtimeFlightUpdatesClientMockRecorder", "return"], "doc_head": "// NewMockrealtimeFlightUpdatesClient creates a new mock instance.\nfunc NewMockrealtimeFlightUpdatesClient(ctrl *gomock.Controller) *MockrealtimeFlightUpdatesClient {\n\tmock := &MockrealtimeFlightUpdatesClient{ctrl: ctrl}\n\tmock.recorder = &MockrealtimeFlightUpdatesClientMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockrealtimeFlightUpdatesClient/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockrealtimeFlightUpdatesClient", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockrealtimeFlightUpdatesClient"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockrealtimeFlightUpdatesClient/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [2416], "all_end_bytes": [2652], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockrealtimeFlightUpdatesClient", "MockrealtimeFlightUpdatesClientMockRecorder", "NewMockrealtimeFlightUpdatesClient", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a mock instance for realtime flight updates client", "keywords_en": ["client simulation", "control interface", "mock creation", "recorder setup", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:06.989747", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "d488f80471629714", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#13", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 77, "end_line": 81, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrealtimeFlightUpdatesClient) EXPECT() *MockrealtimeFlightUpdatesClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 43, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [78, 81], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockrealtimeFlightUpdatesClient", "MockrealtimeFlightUpdatesClientMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrealtimeFlightUpdatesClient) EXPECT() *MockrealtimeFlightUpdatesClientMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockrealtimeFlightUpdatesClient).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockrealtimeFlightUpdatesClient", "function_name": "", "method_name": "EXPECT", "type_name": "MockrealtimeFlightUpdatesClient", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockrealtimeFlightUpdatesClient).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockrealtimeFlightUpdatesClient"], "all_type_names": ["MockrealtimeFlightUpdatesClient"], "all_type_kinds": [null], "all_start_bytes": [2731], "all_end_bytes": [2849], "primary_index": 0, "all_receivers_normalized": ["(*MockrealtimeFlightUpdatesClient)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockrealtimeFlightUpdatesClient", "MockrealtimeFlightUpdatesClientMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockrealtimeFlightUpdatesClient", "summary_en": "Returns a recorder object for setting expected interactions with the mock client", "keywords_en": ["expected interactions", "method chaining", "mock client", "recorder object"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:09.555060", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "0092fdc2fae8d1d4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#14", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 82, "end_line": 89, "text": "// Read mocks base method.\nfunc (m *MockrealtimeFlightUpdatesClient) Read(arg0 context.Context, arg1 chan<- core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Read\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 72, "primary_symbol": "Read", "primary_kind": "method", "primary_span": [83, 89], "def_symbols": [], "symbols": ["Read", "mocks", "base", "method", "func", "MockrealtimeFlightUpdatesClient", "arg0", "context", "Context", "arg1", "chan", "core", "LiveFlightUpdate", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// Read mocks base method.\nfunc (m *MockrealtimeFlightUpdatesClient) Read(arg0 context.Context, arg1 chan<- core.LiveFlightUpdate) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Read\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockrealtimeFlightUpdatesClient).Read/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockrealtimeFlightUpdatesClient", "function_name": "", "method_name": "Read", "type_name": "MockrealtimeFlightUpdatesClient", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Read"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockrealtimeFlightUpdatesClient).Read/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockrealtimeFlightUpdatesClient"], "all_type_names": ["MockrealtimeFlightUpdatesClient"], "all_type_kinds": [null], "all_start_bytes": [2878], "all_end_bytes": [3093], "primary_index": 0, "all_receivers_normalized": ["(*MockrealtimeFlightUpdatesClient)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "Helper", "LiveFlightUpdate", "MockrealtimeFlightUpdatesClient", "Read", "T.Helper", "context.Context", "core.LiveFlightUpdate", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockrealtimeFlightUpdatesClient", "summary_en": "Mock implementation of Read method for client, handling context and live flight updates channel", "keywords_en": ["channel communication", "context management", "error handling", "flight updates", "mock client", "realtime data"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:12.638578", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "34d5fa3a0ec64148", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#15", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#17"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_ingest_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go", "rel_path": "internal/core/mocks/flights_ingest_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 90, "end_line": 95, "text": "// Read indicates an expected call of Read.\nfunc (mr *MockrealtimeFlightUpdatesClientMockRecorder) Read(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Read\", reflect.TypeOf((*MockrealtimeFlightUpdatesClient)(nil).Read), arg0, arg1)\n}\n", "n_tokens": 79, "primary_symbol": "Read", "primary_kind": "method", "primary_span": [91, 95], "def_symbols": [], "symbols": ["Read", "indicates", "expected", "call", "func", "MockrealtimeFlightUpdatesClientMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockrealtimeFlightUpdatesClient", "nil"], "doc_head": "// Read indicates an expected call of Read.\nfunc (mr *MockrealtimeFlightUpdatesClientMockRecorder) Read(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Read\", reflect.TypeOf((*MockrealtimeFlightUpdatesClient)(nil).Read), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockrealtimeFlightUpdatesClientMockRecorder).Read/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockrealtimeFlightUpdatesClientMockRecorder", "function_name": "", "method_name": "Read", "type_name": "MockrealtimeFlightUpdatesClientMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Read"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockrealtimeFlightUpdatesClientMockRecorder).Read/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockrealtimeFlightUpdatesClientMockRecorder"], "all_type_names": ["MockrealtimeFlightUpdatesClientMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [3139], "all_end_bytes": [3393], "primary_index": 0, "all_receivers_normalized": ["(*MockrealtimeFlightUpdatesClientMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Helper", "MockrealtimeFlightUpdatesClient", "MockrealtimeFlightUpdatesClientMockRecorder", "Read", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockrealtimeFlightUpdatesClientMockRecorder", "summary_en": "Records an expected call to the Read method of a mock real-time flight updates client", "keywords_en": ["client simulation", "method recording", "mock recorder", "read method", "real time flight updates"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:15.808861", "file_synopsis_hash": "04a499326205bf21", "chunk_text_hash": "7633960bf77564ad", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_ingest_service_mocks.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_enrich_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\n//\n", "n_tokens": 60, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "flights_enrich_service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "flights_enrich_service_mocks", "package"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_enrich_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_enrich_service.go -destination=mocks/flights_enrich_service_mocks.go -package=mocks\n//", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Generates mock implementations for the flights enrich service", "keywords_en": ["code generation", "flights enrichment", "mock generation", "service mocks", "test doubles"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:18.534606", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "40da2cc2a5b766f0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 11, "text": "// Package mocks is a generated GoMock package.\npackage mocks\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "header", "primary_span": [9, 11], "def_symbols": [], "symbols": ["Package", "mocks", "generated", "GoMock", "package"], "doc_head": "// Package mocks is a generated GoMock package.\npackage mocks", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Package mocks contains generated GoMock types and methods for testing purposes", "keywords_en": ["code stubs", "go mock", "method implementations", "package generation", "testing tools", "type definitions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:18.537252", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "6048227566d0ec95", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 19, "text": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 42, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 19], "def_symbols": [], "symbols": ["import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock"], "doc_head": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This Go package contains mocks for core components, including context and reflection", "keywords_en": ["context mocking", "core components", "mock generation", "reflection utilities", "testing support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:18.538295", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "2c1ac07328a2a65a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 20, "end_line": 23, "text": "// MockairlinesRepository is a mock of airlinesRepository interface.\ntype MockairlinesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairlinesRepositoryMockRecorder", "n_tokens": 36, "primary_symbol": "MockairlinesRepository", "primary_kind": "type", "primary_span": [20, 23], "def_symbols": [], "symbols": ["MockairlinesRepository", "mock", "airlinesRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockairlinesRepositoryMockRecorder"], "doc_head": "// MockairlinesRepository is a mock of airlinesRepository interface.\ntype MockairlinesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairlinesRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairlinesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairlinesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairlinesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairlinesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairlinesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [517], "all_end_bytes": [644], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockairlinesRepository", "MockairlinesRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Defines a mock implementation for the airlinesRepository interface", "keywords_en": ["airlines repository", "controller management", "interface methods", "mock implementation", "recorder setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:21.163436", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "c975b5709374bb9e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 24, "end_line": 26, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockairlinesRepository", "primary_kind": "type", "primary_span": [24, 26], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairlinesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairlinesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairlinesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairlinesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairlinesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [517], "all_end_bytes": [644], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Represents a mock version of an airlines repository for testing purposes", "keywords_en": ["airlines repository", "mock implementation", "repository mocking", "testing tools", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:23.882462", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 27, "end_line": 31, "text": "// MockairlinesRepositoryMockRecorder is the mock recorder for MockairlinesRepository.\ntype MockairlinesRepositoryMockRecorder struct {\n\tmock *MockairlinesRepository\n}\n", "n_tokens": 34, "primary_symbol": "MockairlinesRepositoryMockRecorder", "primary_kind": "type", "primary_span": [27, 31], "def_symbols": [], "symbols": ["MockairlinesRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockairlinesRepository", "type", "struct"], "doc_head": "// MockairlinesRepositoryMockRecorder is the mock recorder for MockairlinesRepository.\ntype MockairlinesRepositoryMockRecorder struct {\n\tmock *MockairlinesRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairlinesRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairlinesRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairlinesRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairlinesRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairlinesRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [738], "all_end_bytes": [813], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockairlinesRepository", "MockairlinesRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "This code defines a mock recorder for the MockairlinesRepository, aiding in testing by tracking method calls", "keywords_en": ["code testing", "interface simulation", "method tracking", "mock recording", "repository mock", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:26.992217", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "ac639a2d1dd0c8f4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 38, "text": "// NewMockairlinesRepository creates a new mock instance.\nfunc NewMockairlinesRepository(ctrl *gomock.Controller) *MockairlinesRepository {\n\tmock := &MockairlinesRepository{ctrl: ctrl}\n\tmock.recorder = &MockairlinesRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 60, "primary_symbol": "NewMockairlinesRepository", "primary_kind": "function", "primary_span": [33, 38], "def_symbols": [], "symbols": ["NewMockairlinesRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockairlinesRepository", "recorder", "MockairlinesRepositoryMockRecorder", "return"], "doc_head": "// NewMockairlinesRepository creates a new mock instance.\nfunc NewMockairlinesRepository(ctrl *gomock.Controller) *MockairlinesRepository {\n\tmock := &MockairlinesRepository{ctrl: ctrl}\n\tmock.recorder = &MockairlinesRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockairlinesRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockairlinesRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockairlinesRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockairlinesRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [873], "all_end_bytes": [1073], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockairlinesRepository", "MockairlinesRepositoryMockRecorder", "NewMockairlinesRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock instance for airlines repository", "keywords_en": ["airlines repository", "dependency injection", "mock instance", "test utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:29.757690", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "77f3cddf4ff32a60", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 39, "end_line": 43, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairlinesRepository) EXPECT() *MockairlinesRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 39, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [40, 43], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockairlinesRepository", "MockairlinesRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairlinesRepository) EXPECT() *MockairlinesRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockairlinesRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockairlinesRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockairlinesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockairlinesRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockairlinesRepository"], "all_type_names": ["MockairlinesRepository"], "all_type_kinds": [null], "all_start_bytes": [1152], "all_end_bytes": [1252], "primary_index": 0, "all_receivers_normalized": ["(*MockairlinesRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockairlinesRepository", "MockairlinesRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockairlinesRepository", "summary_en": "Allows setting expected calls for the mock repository", "keywords_en": [], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:32.044349", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "5eb5b24a937be2a4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 44, "end_line": 52, "text": "// GetByDesignator mocks base method.\nfunc (m *MockairlinesRepository) GetByDesignator(arg0 context.Context, arg1 string) (*core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 99, "primary_symbol": "GetByDesignator", "primary_kind": "method", "primary_span": [45, 52], "def_symbols": [], "symbols": ["GetByDesignator", "mocks", "base", "method", "func", "MockairlinesRepository", "arg0", "context", "Context", "arg1", "string", "core", "Airline", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetByDesignator mocks base method.\nfunc (m *MockairlinesRepository) GetByDesignator(arg0 context.Context, arg1 string) (*core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByDesignator\", arg0, arg1)\n\tret0, _ := ret[0].(*core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockairlinesRepository).GetByDesignator/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockairlinesRepository", "function_name": "", "method_name": "GetByDesignator", "type_name": "MockairlinesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetByDesignator"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockairlinesRepository).GetByDesignator/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockairlinesRepository"], "all_type_names": ["MockairlinesRepository"], "all_type_kinds": [null], "all_start_bytes": [1292], "all_end_bytes": [1556], "primary_index": 0, "all_receivers_normalized": ["(*MockairlinesRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airline", "Call", "Context", "GetByDesignator", "Helper", "MockairlinesRepository", "T.Helper", "context.Context", "core.Airline", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockairlinesRepository", "summary_en": "Mocks the GetByDesignator method of a repository, handling errors and returning an airline object", "keywords_en": ["airline retrieval", "error handling", "mocking method", "repository interaction"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:35.098529", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "4f838bc11ecb32fd", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 53, "end_line": 58, "text": "// GetByDesignator indicates an expected call of GetByDesignator.\nfunc (mr *MockairlinesRepositoryMockRecorder) GetByDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByDesignator\", reflect.TypeOf((*MockairlinesRepository)(nil).GetByDesignator), arg0, arg1)\n}\n", "n_tokens": 90, "primary_symbol": "GetByDesignator", "primary_kind": "method", "primary_span": [54, 58], "def_symbols": [], "symbols": ["GetByDesignator", "indicates", "expected", "call", "func", "MockairlinesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockairlinesRepository", "nil"], "doc_head": "// GetByDesignator indicates an expected call of GetByDesignator.\nfunc (mr *MockairlinesRepositoryMockRecorder) GetByDesignator(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByDesignator\", reflect.TypeOf((*MockairlinesRepository)(nil).GetByDesignator), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockairlinesRepositoryMockRecorder).GetByDesignator/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockairlinesRepositoryMockRecorder", "function_name": "", "method_name": "GetByDesignator", "type_name": "MockairlinesRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetByDesignator"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockairlinesRepositoryMockRecorder).GetByDesignator/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockairlinesRepositoryMockRecorder"], "all_type_names": ["MockairlinesRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1624], "all_end_bytes": [1893], "primary_index": 0, "all_receivers_normalized": ["(*MockairlinesRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetByDesignator", "Helper", "MockairlinesRepository", "MockairlinesRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockairlinesRepositoryMockRecorder", "summary_en": "Records a call to the GetByDesignator method with arguments", "keywords_en": ["helper function", "method type", "mock recorder"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:38.228946", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "f979050525020f6f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 59, "end_line": 62, "text": "// MockairportsRepository is a mock of airportsRepository interface.\ntype MockairportsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairportsRepositoryMockRecorder", "n_tokens": 36, "primary_symbol": "MockairportsRepository", "primary_kind": "type", "primary_span": [59, 62], "def_symbols": [], "symbols": ["MockairportsRepository", "mock", "airportsRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockairportsRepositoryMockRecorder"], "doc_head": "// MockairportsRepository is a mock of airportsRepository interface.\ntype MockairportsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockairportsRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairportsRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairportsRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairportsRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairportsRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairportsRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [1969], "all_end_bytes": [2096], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockairportsRepository", "MockairportsRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Represents a mock implementation of the airportsRepository interface for testing purposes", "keywords_en": ["airports management", "controller setup", "interface mocking", "mock repository", "recorder initialization", "test preparation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:41.235406", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "f78d52d6b78fe797", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 63, "end_line": 65, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockairlinesRepository", "primary_kind": "type", "primary_span": [63, 65], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairlinesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairlinesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairlinesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairlinesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairlinesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [517], "all_end_bytes": [644], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Represents a mock version of an airlines repository for testing purposes", "keywords_en": ["airlines repository", "mock implementation", "repository mocking", "testing tools", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:41.238482", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#13", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 66, "end_line": 70, "text": "// MockairportsRepositoryMockRecorder is the mock recorder for MockairportsRepository.\ntype MockairportsRepositoryMockRecorder struct {\n\tmock *MockairportsRepository\n}\n", "n_tokens": 34, "primary_symbol": "MockairportsRepositoryMockRecorder", "primary_kind": "type", "primary_span": [66, 70], "def_symbols": [], "symbols": ["MockairportsRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockairportsRepository", "type", "struct"], "doc_head": "// MockairportsRepositoryMockRecorder is the mock recorder for MockairportsRepository.\ntype MockairportsRepositoryMockRecorder struct {\n\tmock *MockairportsRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairportsRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairportsRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairportsRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairportsRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairportsRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [2190], "all_end_bytes": [2265], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockairportsRepository", "MockairportsRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "This struct defines a mock recorder for the MockairportsRepository type, facilitating method calls on mocks", "keywords_en": ["interface implementation", "method mocking", "mock recorder", "repository interface", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:44.169883", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "a1d9fe253ddd46be", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#14", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 71, "end_line": 77, "text": "// NewMockairportsRepository creates a new mock instance.\nfunc NewMockairportsRepository(ctrl *gomock.Controller) *MockairportsRepository {\n\tmock := &MockairportsRepository{ctrl: ctrl}\n\tmock.recorder = &MockairportsRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 60, "primary_symbol": "NewMockairportsRepository", "primary_kind": "function", "primary_span": [72, 77], "def_symbols": [], "symbols": ["NewMockairportsRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockairportsRepository", "recorder", "MockairportsRepositoryMockRecorder", "return"], "doc_head": "// NewMockairportsRepository creates a new mock instance.\nfunc NewMockairportsRepository(ctrl *gomock.Controller) *MockairportsRepository {\n\tmock := &MockairportsRepository{ctrl: ctrl}\n\tmock.recorder = &MockairportsRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockairportsRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockairportsRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockairportsRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockairportsRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [2325], "all_end_bytes": [2525], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockairportsRepository", "MockairportsRepositoryMockRecorder", "NewMockairportsRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock instance for airports repository", "keywords_en": ["airports repository", "controller creation", "mock instance", "recorder setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:46.705003", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "73924e407fd2c248", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#13", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#15", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 78, "end_line": 82, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairportsRepository) EXPECT() *MockairportsRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 39, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [79, 82], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockairportsRepository", "MockairportsRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockairportsRepository) EXPECT() *MockairportsRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockairportsRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockairportsRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockairportsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockairportsRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockairportsRepository"], "all_type_names": ["MockairportsRepository"], "all_type_kinds": [null], "all_start_bytes": [2604], "all_end_bytes": [2704], "primary_index": 0, "all_receivers_normalized": ["(*MockairportsRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockairportsRepository", "MockairportsRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockairportsRepository", "summary_en": "This function returns an object for indicating expected use in the repository mock", "keywords_en": ["interface simulation", "method stubbing", "mock setup", "repository expectations", "test utilities", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:49.602227", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "0eff052962ad7571", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#14", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#16", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 83, "end_line": 91, "text": "// GetByICAOOrIATA mocks base method.\nfunc (m *MockairportsRepository) GetByICAOOrIATA(arg0 context.Context, arg1, arg2 *string) (*core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByICAOOrIATA\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 115, "primary_symbol": "GetByICAOOrIATA", "primary_kind": "method", "primary_span": [84, 91], "def_symbols": [], "symbols": ["GetByICAOOrIATA", "mocks", "base", "method", "func", "MockairportsRepository", "arg0", "context", "Context", "arg1", "arg2", "string", "core", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetByICAOOrIATA mocks base method.\nfunc (m *MockairportsRepository) GetByICAOOrIATA(arg0 context.Context, arg1, arg2 *string) (*core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetByICAOOrIATA\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(*core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockairportsRepository).GetByICAOOrIATA/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockairportsRepository", "function_name": "", "method_name": "GetByICAOOrIATA", "type_name": "MockairportsRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetByICAOOrIATA"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockairportsRepository).GetByICAOOrIATA/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockairportsRepository"], "all_type_names": ["MockairportsRepository"], "all_type_kinds": [null], "all_start_bytes": [2744], "all_end_bytes": [3021], "primary_index": 0, "all_receivers_normalized": ["(*MockairportsRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airport", "Call", "Context", "GetByICAOOrIATA", "Helper", "MockairportsRepository", "T.Helper", "context.Context", "core.Airport", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockairportsRepository", "summary_en": "Mock implementation of GetByICAOOrIATA method for airport repository", "keywords_en": ["airports repository", "context handling", "error management", "mock implementation", "repository methods"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:52.987689", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "b237bf1148289f1c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#15", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#17"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#17", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 92, "end_line": 97, "text": "// GetByICAOOrIATA indicates an expected call of GetByICAOOrIATA.\nfunc (mr *MockairportsRepositoryMockRecorder) GetByICAOOrIATA(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByICAOOrIATA\", reflect.TypeOf((*MockairportsRepository)(nil).GetByICAOOrIATA), arg0, arg1, arg2)\n}\n", "n_tokens": 111, "primary_symbol": "GetByICAOOrIATA", "primary_kind": "method", "primary_span": [93, 97], "def_symbols": [], "symbols": ["GetByICAOOrIATA", "indicates", "expected", "call", "func", "MockairportsRepositoryMockRecorder", "arg0", "arg1", "arg2", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockairportsRepository", "nil"], "doc_head": "// GetByICAOOrIATA indicates an expected call of GetByICAOOrIATA.\nfunc (mr *MockairportsRepositoryMockRecorder) GetByICAOOrIATA(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetByICAOOrIATA\", reflect.TypeOf((*MockairportsRepository)(nil).GetByICAOOrIATA), arg0, arg1, arg2)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockairportsRepositoryMockRecorder).GetByICAOOrIATA/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockairportsRepositoryMockRecorder", "function_name": "", "method_name": "GetByICAOOrIATA", "type_name": "MockairportsRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetByICAOOrIATA"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockairportsRepositoryMockRecorder).GetByICAOOrIATA/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockairportsRepositoryMockRecorder"], "all_type_names": ["MockairportsRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [3089], "all_end_bytes": [3370], "primary_index": 0, "all_receivers_normalized": ["(*MockairportsRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetByICAOOrIATA", "Helper", "MockairportsRepository", "MockairportsRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockairportsRepositoryMockRecorder", "summary_en": "Records expected call for GetByICAOOrIATA method with parameters", "keywords_en": ["interface simulation", "method recording", "mock recorder", "parameter handling", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:56.242959", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "0e6dd5877147ebeb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#16", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#18"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#18", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 98, "end_line": 101, "text": "// MockflightsEnrichRepository is a mock of flightsEnrichRepository interface.\ntype MockflightsEnrichRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightsEnrichRepositoryMockRecorder", "n_tokens": 44, "primary_symbol": "MockflightsEnrichRepository", "primary_kind": "type", "primary_span": [98, 101], "def_symbols": [], "symbols": ["MockflightsEnrichRepository", "mock", "flightsEnrichRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockflightsEnrichRepositoryMockRecorder"], "doc_head": "// MockflightsEnrichRepository is a mock of flightsEnrichRepository interface.\ntype MockflightsEnrichRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightsEnrichRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightsEnrichRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightsEnrichRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightsEnrichRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightsEnrichRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightsEnrichRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [3456], "all_end_bytes": [3593], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "This code defines a mock for the flightsEnrichRepository interface, used in Go tests", "keywords_en": ["controller management", "error handling", "flight enrichment", "go language", "mock repository", "repository interface", "test mocking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:59.403148", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "c4a1124bb6984263", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#17", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#19"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#19", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 102, "end_line": 104, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockairlinesRepository", "primary_kind": "type", "primary_span": [102, 104], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockairlinesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockairlinesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockairlinesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockairlinesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockairlinesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [517], "all_end_bytes": [644], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Represents a mock version of an airlines repository for testing purposes", "keywords_en": ["airlines repository", "mock implementation", "repository mocking", "testing tools", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:17:59.405819", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#18", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#20"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#20", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 105, "end_line": 109, "text": "// MockflightsEnrichRepositoryMockRecorder is the mock recorder for MockflightsEnrichRepository.\ntype MockflightsEnrichRepositoryMockRecorder struct {\n\tmock *MockflightsEnrichRepository\n}\n", "n_tokens": 42, "primary_symbol": "MockflightsEnrichRepositoryMockRecorder", "primary_kind": "type", "primary_span": [105, 109], "def_symbols": [], "symbols": ["MockflightsEnrichRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockflightsEnrichRepository", "type", "struct"], "doc_head": "// MockflightsEnrichRepositoryMockRecorder is the mock recorder for MockflightsEnrichRepository.\ntype MockflightsEnrichRepositoryMockRecorder struct {\n\tmock *MockflightsEnrichRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightsEnrichRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightsEnrichRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightsEnrichRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightsEnrichRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightsEnrichRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [3697], "all_end_bytes": [3782], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "defines a mock recorder for the MockflightsEnrichRepository", "keywords_en": ["mock recorder", "repository interface", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:01.765937", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "02e94c91a898fc59", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#19", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#21"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#21", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 110, "end_line": 116, "text": "// NewMockflightsEnrichRepository creates a new mock instance.\nfunc NewMockflightsEnrichRepository(ctrl *gomock.Controller) *MockflightsEnrichRepository {\n\tmock := &MockflightsEnrichRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightsEnrichRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 70, "primary_symbol": "NewMockflightsEnrichRepository", "primary_kind": "function", "primary_span": [111, 116], "def_symbols": [], "symbols": ["NewMockflightsEnrichRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockflightsEnrichRepository", "recorder", "MockflightsEnrichRepositoryMockRecorder", "return"], "doc_head": "// NewMockflightsEnrichRepository creates a new mock instance.\nfunc NewMockflightsEnrichRepository(ctrl *gomock.Controller) *MockflightsEnrichRepository {\n\tmock := &MockflightsEnrichRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightsEnrichRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockflightsEnrichRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockflightsEnrichRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockflightsEnrichRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockflightsEnrichRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [3847], "all_end_bytes": [4067], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder", "NewMockflightsEnrichRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock instance for flights enrich repository", "keywords_en": ["controller based", "dependency injection", "flights enrich repository", "mock instance", "repository mock", "test setup", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:04.805184", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "1436677d440d8e87", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#20", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#22"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#22", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 117, "end_line": 121, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightsEnrichRepository) EXPECT() *MockflightsEnrichRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 43, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [118, 121], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightsEnrichRepository) EXPECT() *MockflightsEnrichRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightsEnrichRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightsEnrichRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockflightsEnrichRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightsEnrichRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightsEnrichRepository"], "all_type_names": ["MockflightsEnrichRepository"], "all_type_kinds": [null], "all_start_bytes": [4146], "all_end_bytes": [4256], "primary_index": 0, "all_receivers_normalized": ["(*MockflightsEnrichRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockflightsEnrichRepository", "summary_en": "Returns an object for setting up expected method calls on the mock repository", "keywords_en": ["interface simulation", "method expectation", "mock management", "repository testing", "test setup", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:07.658744", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "3a7e98318b105963", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#21", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#23"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#23", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 122, "end_line": 129, "text": "// EnrichFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) EnrichFlights(ctx context.Context, enriched []*core.EnrichedFlightData) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"EnrichFlights\", ctx, enriched)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 78, "primary_symbol": "EnrichFlights", "primary_kind": "method", "primary_span": [123, 129], "def_symbols": [], "symbols": ["EnrichFlights", "mocks", "base", "method", "func", "MockflightsEnrichRepository", "ctx", "context", "Context", "enriched", "core", "EnrichedFlightData", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// EnrichFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) EnrichFlights(ctx context.Context, enriched []*core.EnrichedFlightData) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"EnrichFlights\", ctx, enriched)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightsEnrichRepository).EnrichFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightsEnrichRepository", "function_name": "", "method_name": "EnrichFlights", "type_name": "MockflightsEnrichRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EnrichFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightsEnrichRepository).EnrichFlights/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightsEnrichRepository"], "all_type_names": ["MockflightsEnrichRepository"], "all_type_kinds": [null], "all_start_bytes": [4294], "all_end_bytes": [4527], "primary_index": 0, "all_receivers_normalized": ["(*MockflightsEnrichRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "EnrichFlights", "EnrichedFlightData", "Helper", "MockflightsEnrichRepository", "T.Helper", "context.Context", "core.EnrichedFlightData", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockflightsEnrichRepository", "summary_en": "Mock implementation of EnrichFlights method for testing purposes", "keywords_en": ["context management", "enrichment operation", "error handling", "flight data", "mock implementation", "repository simulation", "test support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:10.776169", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "78bb7acc9b9dd70c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#22", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#24"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#24", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 130, "end_line": 135, "text": "// EnrichFlights indicates an expected call of EnrichFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) EnrichFlights(ctx, enriched any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"EnrichFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).EnrichFlights), ctx, enriched)\n}\n", "n_tokens": 90, "primary_symbol": "EnrichFlights", "primary_kind": "method", "primary_span": [131, 135], "def_symbols": [], "symbols": ["EnrichFlights", "indicates", "expected", "call", "func", "MockflightsEnrichRepositoryMockRecorder", "ctx", "enriched", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightsEnrichRepository", "nil"], "doc_head": "// EnrichFlights indicates an expected call of EnrichFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) EnrichFlights(ctx, enriched any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"EnrichFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).EnrichFlights), ctx, enriched)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightsEnrichRepositoryMockRecorder).EnrichFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockflightsEnrichRepositoryMockRecorder", "function_name": "", "method_name": "EnrichFlights", "type_name": "MockflightsEnrichRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EnrichFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightsEnrichRepositoryMockRecorder).EnrichFlights/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockflightsEnrichRepositoryMockRecorder"], "all_type_names": ["MockflightsEnrichRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [4591], "all_end_bytes": [4870], "primary_index": 0, "all_receivers_normalized": ["(*MockflightsEnrichRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "EnrichFlights", "Helper", "MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockflightsEnrichRepositoryMockRecorder", "summary_en": "EnrichFlights records an expected call for enriching flights", "keywords_en": ["any type", "context handling", "enrich flights", "method recording", "mock recorder"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:13.881707", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "df4dc14b4d182622", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#23", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#25"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#25", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 25, "start_line": 136, "end_line": 144, "text": "// GetUnenrichedFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) GetUnenrichedFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetUnenrichedFlights\", ctx, limit)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 105, "primary_symbol": "GetUnenrichedFlights", "primary_kind": "method", "primary_span": [137, 144], "def_symbols": [], "symbols": ["GetUnenrichedFlights", "mocks", "base", "method", "func", "MockflightsEnrichRepository", "ctx", "context", "Context", "limit", "int", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetUnenrichedFlights mocks base method.\nfunc (m *MockflightsEnrichRepository) GetUnenrichedFlights(ctx context.Context, limit int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetUnenrichedFlights\", ctx, limit)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightsEnrichRepository).GetUnenrichedFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightsEnrichRepository", "function_name": "", "method_name": "GetUnenrichedFlights", "type_name": "MockflightsEnrichRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetUnenrichedFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightsEnrichRepository).GetUnenrichedFlights/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightsEnrichRepository"], "all_type_names": ["MockflightsEnrichRepository"], "all_type_kinds": [null], "all_start_bytes": [4915], "all_end_bytes": [5201], "primary_index": 0, "all_receivers_normalized": ["(*MockflightsEnrichRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "GetUnenrichedFlights", "Helper", "LiveFlight", "MockflightsEnrichRepository", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockflightsEnrichRepository", "summary_en": "Mocks retrieval of unenriched flights using a context and limit", "keywords_en": ["context usage", "error handling", "flight data", "limit parameter", "mocks retrieval", "unenriched flights"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:17.154755", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "674be353f02b8a1a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#24", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#26"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#26", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_enrich_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go", "rel_path": "internal/core/mocks/flights_enrich_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 26, "start_line": 145, "end_line": 150, "text": "// GetUnenrichedFlights indicates an expected call of GetUnenrichedFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) GetUnenrichedFlights(ctx, limit any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetUnenrichedFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).GetUnenrichedFlights), ctx, limit)\n}\n", "n_tokens": 105, "primary_symbol": "GetUnenrichedFlights", "primary_kind": "method", "primary_span": [146, 150], "def_symbols": [], "symbols": ["GetUnenrichedFlights", "indicates", "expected", "call", "func", "MockflightsEnrichRepositoryMockRecorder", "ctx", "limit", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightsEnrichRepository", "nil"], "doc_head": "// GetUnenrichedFlights indicates an expected call of GetUnenrichedFlights.\nfunc (mr *MockflightsEnrichRepositoryMockRecorder) GetUnenrichedFlights(ctx, limit any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetUnenrichedFlights\", reflect.TypeOf((*MockflightsEnrichRepository)(nil).GetUnenrichedFlights), ctx, limit)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightsEnrichRepositoryMockRecorder).GetUnenrichedFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockflightsEnrichRepositoryMockRecorder", "function_name": "", "method_name": "GetUnenrichedFlights", "type_name": "MockflightsEnrichRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetUnenrichedFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightsEnrichRepositoryMockRecorder).GetUnenrichedFlights/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockflightsEnrichRepositoryMockRecorder"], "all_type_names": ["MockflightsEnrichRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [5279], "all_end_bytes": [5573], "primary_index": 0, "all_receivers_normalized": ["(*MockflightsEnrichRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetUnenrichedFlights", "Helper", "MockflightsEnrichRepository", "MockflightsEnrichRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockflightsEnrichRepositoryMockRecorder", "summary_en": "Records a call to GetUnenrichedFlights method with context and limit parameters", "keywords_en": ["context parameter", "flights repository", "limit parameter", "method type", "mock recorder"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:20.455581", "file_synopsis_hash": "130344a623587609", "chunk_text_hash": "1f5cb2470307e64f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_enrich_service_mocks.go#25"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_archive_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\n//\n", "n_tokens": 57, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "flights_archive_service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "flights_archive_service_mocks", "package"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: flights_archive_service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=flights_archive_service.go -destination=mocks/flights_archive_service_mocks.go -package=mocks\n//", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This code generates mock implementations for the flights archive service", "keywords_en": ["code generation", "flights archive", "go language", "mock implementations", "service mocks", "testing tools"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:23.404651", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "b1ad90da76265bfb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 11, "text": "// Package mocks is a generated GoMock package.\npackage mocks\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "header", "primary_span": [9, 11], "def_symbols": [], "symbols": ["Package", "mocks", "generated", "GoMock", "package"], "doc_head": "// Package mocks is a generated GoMock package.\npackage mocks", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Package mocks contains generated GoMock types and methods for testing purposes", "keywords_en": ["code stubs", "go mock", "method implementations", "package generation", "testing tools", "type definitions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:23.406720", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "6048227566d0ec95", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 19, "text": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 42, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 19], "def_symbols": [], "symbols": ["import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock"], "doc_head": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This Go package contains mocks for core components, including context and reflection", "keywords_en": ["context mocking", "core components", "mock generation", "reflection utilities", "testing support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:23.407177", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "2c1ac07328a2a65a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 20, "end_line": 23, "text": "// MockflightArchivesRepository is a mock of flightArchivesRepository interface.\ntype MockflightArchivesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightArchivesRepositoryMockRecorder", "n_tokens": 41, "primary_symbol": "MockflightArchivesRepository", "primary_kind": "type", "primary_span": [20, 23], "def_symbols": [], "symbols": ["MockflightArchivesRepository", "mock", "flightArchivesRepository", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockflightArchivesRepositoryMockRecorder"], "doc_head": "// MockflightArchivesRepository is a mock of flightArchivesRepository interface.\ntype MockflightArchivesRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockflightArchivesRepositoryMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightArchivesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightArchivesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightArchivesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightArchivesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightArchivesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [532], "all_end_bytes": [671], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Defines a mock struct for the flightArchivesRepository interface, suitable for unit testing", "keywords_en": ["flight archives repository", "mock struct", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:25.953425", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "de15f773caf44874", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 24, "end_line": 26, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockflightArchivesRepository", "primary_kind": "type", "primary_span": [24, 26], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightArchivesRepository (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightArchivesRepository", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightArchivesRepository"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightArchivesRepository (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightArchivesRepository"], "all_type_kinds": ["struct"], "all_start_bytes": [532], "all_end_bytes": [671], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Represents a mock implementation of flight archives repository", "keywords_en": ["flight archives"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:28.100091", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 27, "end_line": 31, "text": "// MockflightArchivesRepositoryMockRecorder is the mock recorder for MockflightArchivesRepository.\ntype MockflightArchivesRepositoryMockRecorder struct {\n\tmock *MockflightArchivesRepository\n}\n", "n_tokens": 38, "primary_symbol": "MockflightArchivesRepositoryMockRecorder", "primary_kind": "type", "primary_span": [27, 31], "def_symbols": [], "symbols": ["MockflightArchivesRepositoryMockRecorder", "the", "mock", "recorder", "for", "MockflightArchivesRepository", "type", "struct"], "doc_head": "// MockflightArchivesRepositoryMockRecorder is the mock recorder for MockflightArchivesRepository.\ntype MockflightArchivesRepositoryMockRecorder struct {\n\tmock *MockflightArchivesRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockflightArchivesRepositoryMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockflightArchivesRepositoryMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockflightArchivesRepositoryMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockflightArchivesRepositoryMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockflightArchivesRepositoryMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [777], "all_end_bytes": [864], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "Mock recorder for flight archives repository, aiding in mocking method calls", "keywords_en": ["flight archives", "interface simulation", "method calls", "mock recorder", "repository mock", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:30.945558", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "bba9da3547b6b1fa", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 38, "text": "// NewMockflightArchivesRepository creates a new mock instance.\nfunc NewMockflightArchivesRepository(ctrl *gomock.Controller) *MockflightArchivesRepository {\n\tmock := &MockflightArchivesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightArchivesRepositoryMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 65, "primary_symbol": "NewMockflightArchivesRepository", "primary_kind": "function", "primary_span": [33, 38], "def_symbols": [], "symbols": ["NewMockflightArchivesRepository", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockflightArchivesRepository", "recorder", "MockflightArchivesRepositoryMockRecorder", "return"], "doc_head": "// NewMockflightArchivesRepository creates a new mock instance.\nfunc NewMockflightArchivesRepository(ctrl *gomock.Controller) *MockflightArchivesRepository {\n\tmock := &MockflightArchivesRepository{ctrl: ctrl}\n\tmock.recorder = &MockflightArchivesRepositoryMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockflightArchivesRepository/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockflightArchivesRepository", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockflightArchivesRepository"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockflightArchivesRepository/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [930], "all_end_bytes": [1154], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder", "NewMockflightArchivesRepository", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock instance for flight archives repository", "keywords_en": ["controller injection", "flight data simulation", "mock creation", "recorder setup", "repository mocking", "test doubles"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:33.823262", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "ae6c9f0324e6c4ad", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 39, "end_line": 43, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightArchivesRepository) EXPECT() *MockflightArchivesRepositoryMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 41, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [40, 43], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockflightArchivesRepository) EXPECT() *MockflightArchivesRepositoryMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightArchivesRepository).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightArchivesRepository", "function_name": "", "method_name": "EXPECT", "type_name": "MockflightArchivesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightArchivesRepository).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightArchivesRepository"], "all_type_names": ["MockflightArchivesRepository"], "all_type_kinds": [null], "all_start_bytes": [1233], "all_end_bytes": [1345], "primary_index": 0, "all_receivers_normalized": ["(*MockflightArchivesRepository)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockflightArchivesRepository", "summary_en": "Allows setting up expected method calls on a mock flight archives repository", "keywords_en": ["interface simulation", "method expectations", "mock setup", "repository mock", "testing utilities", "unit testing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:36.705526", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "a684cc16ac09515a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 44, "end_line": 51, "text": "// DeleteFlights mocks base method.\nfunc (m *MockflightArchivesRepository) DeleteFlights(arg0 context.Context, arg1 []*core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"DeleteFlights\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 75, "primary_symbol": "DeleteFlights", "primary_kind": "method", "primary_span": [45, 51], "def_symbols": [], "symbols": ["DeleteFlights", "mocks", "base", "method", "func", "MockflightArchivesRepository", "arg0", "context", "Context", "arg1", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// DeleteFlights mocks base method.\nfunc (m *MockflightArchivesRepository) DeleteFlights(arg0 context.Context, arg1 []*core.LiveFlight) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"DeleteFlights\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightArchivesRepository).DeleteFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightArchivesRepository", "function_name": "", "method_name": "DeleteFlights", "type_name": "MockflightArchivesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["DeleteFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightArchivesRepository).DeleteFlights/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightArchivesRepository"], "all_type_names": ["MockflightArchivesRepository"], "all_type_kinds": [null], "all_start_bytes": [1383], "all_end_bytes": [1603], "primary_index": 0, "all_receivers_normalized": ["(*MockflightArchivesRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "DeleteFlights", "Helper", "LiveFlight", "MockflightArchivesRepository", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockflightArchivesRepository", "summary_en": "Mock function for deleting flights", "keywords_en": ["context management", "error handling", "flight records", "mock function"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:39.300652", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "07df69546501a520", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 52, "end_line": 57, "text": "// DeleteFlights indicates an expected call of DeleteFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) DeleteFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).DeleteFlights), arg0, arg1)\n}\n", "n_tokens": 87, "primary_symbol": "DeleteFlights", "primary_kind": "method", "primary_span": [53, 57], "def_symbols": [], "symbols": ["DeleteFlights", "indicates", "expected", "call", "func", "MockflightArchivesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightArchivesRepository", "nil"], "doc_head": "// DeleteFlights indicates an expected call of DeleteFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) DeleteFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).DeleteFlights), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightArchivesRepositoryMockRecorder).DeleteFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockflightArchivesRepositoryMockRecorder", "function_name": "", "method_name": "DeleteFlights", "type_name": "MockflightArchivesRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["DeleteFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightArchivesRepositoryMockRecorder).DeleteFlights/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockflightArchivesRepositoryMockRecorder"], "all_type_names": ["MockflightArchivesRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1667], "all_end_bytes": [1942], "primary_index": 0, "all_receivers_normalized": ["(*MockflightArchivesRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "DeleteFlights", "Helper", "MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockflightArchivesRepositoryMockRecorder", "summary_en": "Records an expected call to the DeleteFlights method", "keywords_en": ["helper function", "method invocation", "reflection usage", "test mocking"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:42.325209", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "d0e763e6c35f9c76", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 58, "end_line": 66, "text": "// GetArchivableFlights mocks base method.\nfunc (m *MockflightArchivesRepository) GetArchivableFlights(arg0 context.Context, arg1 int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetArchivableFlights\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 102, "primary_symbol": "GetArchivableFlights", "primary_kind": "method", "primary_span": [59, 66], "def_symbols": [], "symbols": ["GetArchivableFlights", "mocks", "base", "method", "func", "MockflightArchivesRepository", "arg0", "context", "Context", "arg1", "int", "core", "LiveFlight", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// GetArchivableFlights mocks base method.\nfunc (m *MockflightArchivesRepository) GetArchivableFlights(arg0 context.Context, arg1 int) ([]*core.LiveFlight, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetArchivableFlights\", arg0, arg1)\n\tret0, _ := ret[0].([]*core.LiveFlight)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightArchivesRepository).GetArchivableFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockflightArchivesRepository", "function_name": "", "method_name": "GetArchivableFlights", "type_name": "MockflightArchivesRepository", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetArchivableFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightArchivesRepository).GetArchivableFlights/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockflightArchivesRepository"], "all_type_names": ["MockflightArchivesRepository"], "all_type_kinds": [null], "all_start_bytes": [1987], "all_end_bytes": [2274], "primary_index": 0, "all_receivers_normalized": ["(*MockflightArchivesRepository)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Call", "Context", "GetArchivableFlights", "Helper", "LiveFlight", "MockflightArchivesRepository", "T.Helper", "context.Context", "core.LiveFlight", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockflightArchivesRepository", "summary_en": "Mocks the GetArchivableFlights method of a flight archives repository, handling context and integer arguments to return live flights and errors", "keywords_en": ["context handling", "error management", "integer parameters", "repository method"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:45.876276", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "4f377888171a24ac", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/core/mocks/flights_archive_service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go", "rel_path": "internal/core/mocks/flights_archive_service_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 67, "end_line": 72, "text": "// GetArchivableFlights indicates an expected call of GetArchivableFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) GetArchivableFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetArchivableFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).GetArchivableFlights), arg0, arg1)\n}\n", "n_tokens": 97, "primary_symbol": "GetArchivableFlights", "primary_kind": "method", "primary_span": [68, 72], "def_symbols": [], "symbols": ["GetArchivableFlights", "indicates", "expected", "call", "func", "MockflightArchivesRepositoryMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockflightArchivesRepository", "nil"], "doc_head": "// GetArchivableFlights indicates an expected call of GetArchivableFlights.\nfunc (mr *MockflightArchivesRepositoryMockRecorder) GetArchivableFlights(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetArchivableFlights\", reflect.TypeOf((*MockflightArchivesRepository)(nil).GetArchivableFlights), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockflightArchivesRepositoryMockRecorder).GetArchivableFlights/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockflightArchivesRepositoryMockRecorder", "function_name": "", "method_name": "GetArchivableFlights", "type_name": "MockflightArchivesRepositoryMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetArchivableFlights"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockflightArchivesRepositoryMockRecorder).GetArchivableFlights/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockflightArchivesRepositoryMockRecorder"], "all_type_names": ["MockflightArchivesRepositoryMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [2352], "all_end_bytes": [2648], "primary_index": 0, "all_receivers_normalized": ["(*MockflightArchivesRepositoryMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "GetArchivableFlights", "Helper", "MockflightArchivesRepository", "MockflightArchivesRepositoryMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockflightArchivesRepositoryMockRecorder", "summary_en": "Mock recorder method for tracking calls to GetArchivableFlights", "keywords_en": ["flight archives", "helper function", "method tracking", "mock recording"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:45.879532", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "14462f0bdad96949", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/core/mocks/flights_archive_service_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airlines_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package adapter\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "adapter"], "doc_head": "package adapter", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "adapter", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package adapter", "summary_en": "Package/import header — code.", "keywords_en": ["code", "chunk", "go", "method", "function", "type", "implementation", "logic"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:45.886012", "file_synopsis_hash": "f1997eaa6174300e", "chunk_text_hash": "cc1c18e264ac0966", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airlines_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 17, "text": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n", "n_tokens": 119, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 17], "def_symbols": [], "symbols": ["import", "context", "github", "com", "cockroachdb", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "pkg", "grpc", "airlines", "log", "uber", "org", "zap", "strings", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "adapter", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package adapter", "summary_en": "This code adapts grpc API calls to internal core logic, handling errors and tracing with OpenTelemetry", "keywords_en": ["core logic", "error handling", "grpc adapter"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:49.265980", "file_synopsis_hash": "f1997eaa6174300e", "chunk_text_hash": "f7fcb37cd7a738d7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airlines_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 18, "end_line": 23, "text": "//go:generate mockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\ntype AirlinesCache interface {\n\tGet(ctx context.Context, designator string) (core.Airline, error)\n\tSet(ctx context.Context, designator string, airline core.Airline) error\n}\n", "n_tokens": 75, "primary_symbol": "AirlinesCache", "primary_kind": "type", "primary_span": [18, 23], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "airlines_grpc_client", "destination", "mocks", "airlines_grpc_client_mocks", "package", "type", "AirlinesCache", "interface", "Get", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "Set", "airline"], "doc_head": "//go:generate mockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\ntype AirlinesCache interface {\n\tGet(ctx context.Context, designator string) (core.Airline, error)\n\tSet(ctx context.Context, designator string, airline core.Airline) error\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:AirlinesCache (interface)", "package": "adapter", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "AirlinesCache", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["AirlinesCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:AirlinesCache (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["AirlinesCache"], "all_type_kinds": ["interface"], "all_start_bytes": [524], "all_end_bytes": [691], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airline", "AirlinesCache", "Context", "Get", "Set", "context.Context", "core.Airline"], "header_context_minimal": "package adapter\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)", "summary_en": "Defines an interface for managing airline data cache, including getting and setting airline information", "keywords_en": ["airline info", "cache management", "context handling", "error handling", "interface definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:52.485604", "file_synopsis_hash": "f1997eaa6174300e", "chunk_text_hash": "2aea1eac76d78c35", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airlines_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 24, "end_line": 30, "text": "// AirlineGrpcClient is a wrapper around the grpc client for the airline service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AirlinesGrpcClient struct {\n\tclient v0.AirlinesServiceClient\n\tcache  AirlinesCache\n}\n", "n_tokens": 52, "primary_symbol": "AirlinesGrpcClient", "primary_kind": "type", "primary_span": [24, 30], "def_symbols": [], "symbols": ["AirlineGrpcClient", "wrapper", "around", "the", "grpc", "client", "for", "airline", "service", "contains", "cache", "avoid", "unnecessary", "calls", "type", "AirlinesGrpcClient", "struct", "AirlinesServiceClient", "AirlinesCache"], "doc_head": "// AirlineGrpcClient is a wrapper around the grpc client for the airline service.\n// It contains a cache to avoid unnecessary calls to the service.\ntype AirlinesGrpcClient struct {\n\tclient v0.AirlinesServiceClient\n\tcache  AirlinesCache\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:AirlinesGrpcClient (struct)", "package": "adapter", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "AirlinesGrpcClient", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["AirlinesGrpcClient"], "all_kinds": ["type"], "all_ast_paths": ["go:type:AirlinesGrpcClient (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["AirlinesGrpcClient"], "all_type_kinds": ["struct"], "all_start_bytes": [846], "all_end_bytes": [930], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0"], "symbols_referenced_strict": ["AirlinesCache", "AirlinesGrpcClient", "AirlinesServiceClient", "v0.AirlinesServiceClient"], "header_context_minimal": "package adapter\nimport \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"", "summary_en": "Wraps a gRPC client for airlines, using a cache to reduce unnecessary service calls", "keywords_en": ["airlines service", "cache management", "client optimization", "grpc wrapper", "service reduction"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:55.566677", "file_synopsis_hash": "f1997eaa6174300e", "chunk_text_hash": "d21323a3d40b46d3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airlines_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 31, "end_line": 37, "text": "func NewAirlinesGrpcClient(client v0.AirlinesServiceClient, cache AirlinesCache) *AirlinesGrpcClient {\n\treturn &AirlinesGrpcClient{\n\t\tclient: client,\n\t\tcache:  cache,\n\t}\n}\n", "n_tokens": 48, "primary_symbol": "NewAirlinesGrpcClient", "primary_kind": "function", "primary_span": [31, 37], "def_symbols": [], "symbols": ["NewAirlinesGrpcClient", "func", "client", "AirlinesServiceClient", "cache", "AirlinesCache", "AirlinesGrpcClient", "return"], "doc_head": "func NewAirlinesGrpcClient(client v0.AirlinesServiceClient, cache AirlinesCache) *AirlinesGrpcClient {\n\treturn &AirlinesGrpcClient{\n\t\tclient: client,\n\t\tcache:  cache,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewAirlinesGrpcClient/complete", "package": "adapter", "node_kind": "function", "receiver": "", "function_name": "NewAirlinesGrpcClient", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewAirlinesGrpcClient"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewAirlinesGrpcClient/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [932], "all_end_bytes": [1103], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0"], "symbols_referenced_strict": ["AirlinesCache", "AirlinesGrpcClient", "AirlinesServiceClient", "NewAirlinesGrpcClient", "v0.AirlinesServiceClient"], "header_context_minimal": "package adapter\nimport \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"", "summary_en": "Creates an AirlinesGrpcClient instance with a gRPC client and cache", "keywords_en": ["cache management", "client creation", "grpc client"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:58.041661", "file_synopsis_hash": "f1997eaa6174300e", "chunk_text_hash": "e220a827b8a564ad", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airlines_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go", "rel_path": "internal/adapters/airlines_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 38, "end_line": 92, "text": "func (c *AirlinesGrpcClient) GetByDesignator(ctx context.Context, designator string) (*core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesGrpcClient:GetByDesignator\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t)\n\n\tkey := strings.ToUpper(strings.TrimSpace(designator))\n\n\tif c.cache != nil {\n\t\tairline, err := c.cache.Get(ctx, key)\n\t\tif err == nil {\n\t\t\treturn &airline, nil\n\t\t}\n\t\tif !errors.Is(err, core.ErrCacheMiss) {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t\t}\n\t}\n\n\treq := &v0.GetByDesignatorRequest{Designator: designator}\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\treturn nil, errors.Wrap(err, \"failed to request airline\")\n\t}\n\tif resp.Airline == nil {\n\t\treturn nil, nil\n\t}\n\n\tcacheDesignator := key\n\tif resp.Airline.Designator != nil {\n\t\tcacheDesignator = strings.ToUpper(strings.TrimSpace(*resp.Airline.Designator))\n\t}\n\n\tairline := &core.Airline{\n\t\tID:             resp.Airline.Id,\n\t\tDesignator:     cacheDesignator,\n\t\tIATA:           resp.Airline.Iata,\n\t\tICAO:           resp.Airline.Icao,\n\t\tClassification: resp.Airline.Classification,\n\t}\n\n\tif c.cache != nil {\n\t\t_ = c.cache.Set(ctx, cacheDesignator, *airline)\n\t}\n\n\treturn airline, nil\n}\n", "n_tokens": 402, "primary_symbol": "GetByDesignator", "primary_kind": "method", "primary_span": [38, 92], "def_symbols": [], "symbols": ["GetByDesignator", "func", "AirlinesGrpcClient", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "key", "strings", "ToUpper", "TrimSpace", "cache", "nil", "airline", "err", "Get", "return", "errors", "ErrCacheMiss", "RecordError", "SetStatus", "codes", "Error", "log", "Warn", "Cache", "failure", "zap", "req", "GetByDesignatorRequest", "Designator", "resp", "client", "Wrap", "failed", "request", "cacheDesignator", "IATA", "Iata", "ICAO", "Icao", "Classification", "Set"], "doc_head": "func (c *AirlinesGrpcClient) GetByDesignator(ctx context.Context, designator string) (*core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesGrpcClient:GetByDesignator\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t)\n\tkey := strings.ToUpper(strings.TrimSpace(designator))\n\tif c.cache != nil {\n\t\tairline, err := c.cache.Get(ctx, key)\n\t\tif err == nil {\n\t\t\treturn &airline, nil\n\t\t}\n\t\tif !errors.Is(err, core.ErrCacheMiss) {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t\t}\n\t}\n\treq := &v0.GetByDesignatorRequest{Designator: designator}\n\tresp, err := c.client.GetByDesignator(ctx, req)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\treturn nil, errors.Wrap(err, \"failed to request airline\")\n\t}\n\tif resp.Airline == nil {\n\t\treturn nil, nil\n\t}\n\tcacheDesignator := key\n\tif resp.Airline.Designator != nil {\n\t\tcacheDesignator = strings.ToUpper(strings.TrimSpace(*resp.Airline.Designator))\n\t}\n\tairline := &core.Airline{\n\t\tID:             resp.Airline.Id,\n\t\tDesignator:     cacheDesignator,", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*AirlinesGrpcClient).GetByDesignator/complete", "package": "adapter", "node_kind": "method", "receiver": "c *AirlinesGrpcClient", "function_name": "", "method_name": "GetByDesignator", "type_name": "AirlinesGrpcClient", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetByDesignator"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*AirlinesGrpcClient).GetByDesignator/complete"], "all_roles": ["complete"], "all_receivers": ["c *AirlinesGrpcClient"], "all_type_names": ["AirlinesGrpcClient"], "all_type_kinds": [null], "all_start_bytes": [1105], "all_end_bytes": [2525], "primary_index": 0, "all_receivers_normalized": ["(*AirlinesGrpcClient)"], "imports_used_minimal": ["context", "github.com/cockroachdb/errors", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.opentelemetry.io/otel/trace", "go.uber.org/zap", "strings"], "symbols_referenced_strict": ["Airline", "AirlinesGrpcClient", "Classification", "Context", "Designator", "End", "ErrCacheMiss", "Error", "Get", "GetByDesignator", "GetByDesignatorRequest", "Iata", "Icao", "RecordError", "Set", "SetAttributes", "SetStatus", "SpanKindClient", "Start", "String", "ToUpper", "Tracer", "TrimSpace", "Warn", "WithSpanKind", "Wrap", "attribute.String", "c.cache", "c.client", "codes.Error", "context.Context", "core.Airline", "core.ErrCacheMiss", "err.Error", "errors.Is", "errors.Wrap", "log.Warn", "resp.Airline", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "strings.ToUpper", "strings.TrimSpace", "trace.SpanKindClient", "trace.WithSpanKind", "v0.GetByDesignatorRequest", "xotel.Tracer", "zap.Error"], "header_context_minimal": "package adapter\nimport (\n    \"context\"\n    \"github.com/cockroachdb/errors\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n    \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airlines/v0\"\n    \"go.impalastudios.com/log\"\n)\n// receiver: c *AirlinesGrpcClient", "summary_en": "Retrieves an airline by designator, caching results for subsequent requests", "keywords_en": ["cache management", "designator lookup", "error handling", "grpc client", "log warnings", "span tracing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:58.045823", "file_synopsis_hash": "f1997eaa6174300e", "chunk_text_hash": "178970471bc5e9ca", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airlines_grpc_client.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package adapter\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "adapter"], "doc_head": "package adapter", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "adapter", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package adapter", "summary_en": "Package/import header — code.", "keywords_en": ["code", "chunk", "go", "method", "function", "type", "implementation", "logic"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:18:58.052540", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "cc1c18e264ac0966", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 19, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n", "n_tokens": 122, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 19], "def_symbols": [], "symbols": ["import", "context", "fmt", "impalastudios", "com", "log", "uber", "org", "zap", "strings", "github", "cockroachdb", "errors", "aviation", "liveflights", "internal", "core", "pkg", "grpc", "airports", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"go.impalastudios.com/log\"\n\t\"go.uber.org/zap\"\n\t\"strings\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tv0 \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "adapter", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package adapter", "summary_en": "Handles logging, tracing, and error management for live flight data operations", "keywords_en": ["context management", "error handling", "flight data"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:01.196052", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "f5327c47aebd79de", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 20, "end_line": 25, "text": "//go:generate mockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\ntype AirportsCache interface {\n\tGet(ctx context.Context, key string) (core.Airport, error)\n\tSet(ctx context.Context, key string, airport core.Airport) error\n}\n", "n_tokens": 77, "primary_symbol": "AirportsCache", "primary_kind": "type", "primary_span": [20, 25], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "airports_grpc_client", "destination", "mocks", "airports_grpc_client_grpc_client_mocks", "package", "type", "AirportsCache", "interface", "Get", "ctx", "context", "Context", "key", "string", "core", "Airport", "error", "Set", "airport"], "doc_head": "//go:generate mockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\ntype AirportsCache interface {\n\tGet(ctx context.Context, key string) (core.Airport, error)\n\tSet(ctx context.Context, key string, airport core.Airport) error\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:AirportsCache (interface)", "package": "adapter", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "AirportsCache", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["AirportsCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:AirportsCache (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["AirportsCache"], "all_type_kinds": ["interface"], "all_start_bytes": [544], "all_end_bytes": [697], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airport", "AirportsCache", "Context", "Get", "Set", "context.Context", "core.Airport"], "header_context_minimal": "package adapter\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)", "summary_en": "Defines an interface for caching airports, including methods to get and set airport data", "keywords_en": ["airport data", "cache management", "context usage", "error handling", "interface definition"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:04.093232", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "8cef25305dfb25cb", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 26, "end_line": 31, "text": "type AirportsGrpcClient struct {\n\tclient      v0.AirportsServiceClient\n\tcache       AirportsCache\n\tsearchLimit int\n}\n", "n_tokens": 29, "primary_symbol": "AirportsGrpcClient", "primary_kind": "type", "primary_span": [26, 31], "def_symbols": [], "symbols": ["type", "AirportsGrpcClient", "struct", "client", "AirportsServiceClient", "cache", "AirportsCache", "searchLimit", "int"], "doc_head": "type AirportsGrpcClient struct {\n\tclient      v0.AirportsServiceClient\n\tcache       AirportsCache\n\tsearchLimit int\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:AirportsGrpcClient (struct)", "package": "adapter", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "AirportsGrpcClient", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["AirportsGrpcClient"], "all_kinds": ["type"], "all_ast_paths": ["go:type:AirportsGrpcClient (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["AirportsGrpcClient"], "all_type_kinds": ["struct"], "all_start_bytes": [704], "all_end_bytes": [815], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0"], "symbols_referenced_strict": ["AirportsCache", "AirportsGrpcClient", "AirportsServiceClient", "v0.AirportsServiceClient"], "header_context_minimal": "package adapter\nimport \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"", "summary_en": "Defines a gRPC client for airports with caching and search limits", "keywords_en": ["airports client", "cache management", "grpc client", "search limit"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:06.767137", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "41251887f063352f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 32, "end_line": 35, "text": "func NewAirportsGrpcClient(client v0.AirportsServiceClient, cache AirportsCache, searchLimit int) *AirportsGrpcClient {\n\treturn &AirportsGrpcClient{client: client, cache: cache, searchLimit: searchLimit}\n}\n", "n_tokens": 55, "primary_symbol": "NewAirportsGrpcClient", "primary_kind": "function", "primary_span": [32, 35], "def_symbols": [], "symbols": ["NewAirportsGrpcClient", "func", "client", "AirportsServiceClient", "cache", "AirportsCache", "searchLimit", "int", "AirportsGrpcClient", "return"], "doc_head": "func NewAirportsGrpcClient(client v0.AirportsServiceClient, cache AirportsCache, searchLimit int) *AirportsGrpcClient {\n\treturn &AirportsGrpcClient{client: client, cache: cache, searchLimit: searchLimit}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewAirportsGrpcClient/complete", "package": "adapter", "node_kind": "function", "receiver": "", "function_name": "NewAirportsGrpcClient", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewAirportsGrpcClient"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewAirportsGrpcClient/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [817], "all_end_bytes": [1022], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0"], "symbols_referenced_strict": ["AirportsCache", "AirportsGrpcClient", "AirportsServiceClient", "NewAirportsGrpcClient", "v0.AirportsServiceClient"], "header_context_minimal": "package adapter\nimport \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"", "summary_en": "Creates a new gRPC client for airport data with caching and search limits", "keywords_en": ["airport data", "cache management", "grpc client", "search limits"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:09.481575", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "47b68fdcf5b5119b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 36, "end_line": 140, "text": "func (c *AirportsGrpcClient) GetByICAOOrIATA(ctx context.Context, icao, iata *string) (*core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsGrpcClient:GetByICAOOrIATA\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"icao\", str(icao)),\n\t\tattribute.String(\"iata\", str(iata)),\n\t)\n\n\tvar icaoCode, iataCode string\n\tif icao != nil {\n\t\ticaoCode = strings.ToUpper(strings.TrimSpace(*icao))\n\t}\n\tif iata != nil {\n\t\tiataCode = strings.ToUpper(strings.TrimSpace(*iata))\n\t}\n\tcompositeKey := fmt.Sprintf(\"%s:%s\", icaoCode, iataCode)\n\n\tif a, err := c.cache.Get(ctx, compositeKey); err == nil {\n\t\treturn &a, nil\n\t} else if !errors.Is(err, core.ErrCacheMiss) {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t}\n\n\tvar airportsList []*v0.Airport\n\tif icaoCode != \"\" {\n\t\tresp, err := c.client.Search(ctx, &v0.SearchAirportsRequest{Q: icaoCode, Limit: uint32(c.searchLimit)})\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\tlog.Debug(ctx, \"ICAO search failed\", zap.Error(err))\n\t\t}\n\t\tairportsList = append(airportsList, resp.Result...)\n\t}\n\tif iataCode != \"\" {\n\t\tresp, err := c.client.Search(ctx, &v0.SearchAirportsRequest{Q: iataCode, Limit: uint32(c.searchLimit)})\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\t\tlog.Debug(ctx, \"ICAO search failed\", zap.Error(err))\n\t\t}\n\t\tairportsList = append(airportsList, resp.Result...)\n\t}\n\n\tvar bestBoth, bestIATA, bestICAO *core.Airport\n\tseen := make(map[string]struct{})\n\n\tfor _, airportResult := range airportsList {\n\t\tif airportResult.Designator == nil {\n\t\t\tcontinue\n\t\t}\n\t\ta := &core.Airport{\n\t\t\tID:             airportResult.Id,\n\t\t\tDesignator:     *airportResult.Designator,\n\t\t\tIATA:           airportResult.Iata,\n\t\t\tICAO:           airportResult.Icao,\n\t\t\tClassification: airportResult.Classification,\n\t\t}\n\t\tvar dbICAO, dbIATA string\n\t\tif a.ICAO != nil {\n\t\t\tdbICAO = strings.ToUpper(strings.TrimSpace(*a.ICAO))\n\t\t}\n\t\tif a.IATA != nil {\n\t\t\tdbIATA = strings.ToUpper(strings.TrimSpace(*a.IATA))\n\t\t}\n\t\tkey := fmt.Sprintf(\"%s:%s\", dbICAO, dbIATA)\n\t\tif _, exists := seen[key]; exists {\n\t\t\tcontinue\n\t\t}\n\t\tseen[key] = struct{}{}\n\t\t_ = c.cache.Set(ctx, key, *a)\n\n\t\tbothMatch := icaoCode != \"\" && iataCode != \"\" && dbICAO == icaoCode && dbIATA == iataCode\n\t\tiataMatch := iataCode != \"\" && dbIATA == iataCode\n\t\ticaoMatch := icaoCode != \"\" && dbICAO == icaoCode\n\n\t\tif bothMatch {\n\t\t\tbestBoth = a\n\t\t\tbreak\n\t\t}\n\t\tif bestIATA == nil && iataMatch {\n\t\t\tbestIATA = a\n\t\t}\n\t\tif bestICAO == nil && icaoMatch {\n\t\t\tbestICAO = a\n\t\t}\n\t}\n\n\tif bestBoth != nil {\n\t\treturn bestBoth, nil\n\t}\n\tif bestIATA != nil {\n\t\treturn bestIATA, nil\n\t}\n\tif bestICAO != nil {\n\t\treturn bestICAO, nil\n\t}\n\treturn nil, nil\n}\n", "n_tokens": 877, "primary_symbol": "GetByICAOOrIATA", "primary_kind": "method", "primary_span": [36, 140], "def_symbols": [], "symbols": ["GetByICAOOrIATA", "func", "AirportsGrpcClient", "ctx", "context", "Context", "icao", "iata", "string", "core", "Airport", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "str", "var", "icaoCode", "iataCode", "nil", "strings", "ToUpper", "TrimSpace", "compositeKey", "fmt", "Sprintf", "err", "cache", "Get", "return", "else", "errors", "ErrCacheMiss", "RecordError", "SetStatus", "codes", "Error", "log", "Warn", "Cache", "failure", "zap", "airportsList", "resp", "client", "Search", "SearchAirportsRequest", "Limit", "uint32", "searchLimit", "Debug", "ICAO", "search", "failed", "append", "Result", "bestBoth", "bestIATA", "bestICAO", "seen", "make", "map", "struct", "for", "airportResult", "range", "Designator", "continue", "IATA", "Iata", "Icao", "Classification", "dbICAO", "dbIATA", "key", "exists", "Set", "bothMatch", "iataMatch", "icaoMatch", "break"], "doc_head": "func (c *AirportsGrpcClient) GetByICAOOrIATA(ctx context.Context, icao, iata *string) (*core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsGrpcClient:GetByICAOOrIATA\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"icao\", str(icao)),\n\t\tattribute.String(\"iata\", str(iata)),\n\t)\n\tvar icaoCode, iataCode string\n\tif icao != nil {\n\t\ticaoCode = strings.ToUpper(strings.TrimSpace(*icao))\n\t}\n\tif iata != nil {\n\t\tiataCode = strings.ToUpper(strings.TrimSpace(*iata))\n\t}\n\tcompositeKey := fmt.Sprintf(\"%s:%s\", icaoCode, iataCode)\n\tif a, err := c.cache.Get(ctx, compositeKey); err == nil {\n\t\treturn &a, nil\n\t} else if !errors.Is(err, core.ErrCacheMiss) {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tlog.Warn(ctx, \"Cache failure\", zap.Error(err))\n\t}\n\tvar airportsList []*v0.Airport\n\tif icaoCode != \"\" {\n\t\tresp, err := c.client.Search(ctx, &v0.SearchAirportsRequest{Q: icaoCode, Limit: uint32(c.searchLimit)})\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\tlog.Debug(ctx, \"ICAO search failed\", zap.Error(err))\n\t\t}\n\t\tairportsList = append(airportsList, resp.Result...)\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*AirportsGrpcClient).GetByICAOOrIATA/complete", "package": "adapter", "node_kind": "method", "receiver": "c *AirportsGrpcClient", "function_name": "", "method_name": "GetByICAOOrIATA", "type_name": "AirportsGrpcClient", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["GetByICAOOrIATA"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*AirportsGrpcClient).GetByICAOOrIATA/complete"], "all_roles": ["complete"], "all_receivers": ["c *AirportsGrpcClient"], "all_type_names": ["AirportsGrpcClient"], "all_type_kinds": [null], "all_start_bytes": [1024], "all_end_bytes": [3849], "primary_index": 0, "all_receivers_normalized": ["(*AirportsGrpcClient)"], "imports_used_minimal": ["context", "fmt", "github.com/cockroachdb/errors", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.opentelemetry.io/otel/trace", "go.uber.org/zap", "strings"], "symbols_referenced_strict": ["Airport", "AirportsGrpcClient", "Classification", "Context", "Debug", "Designator", "End", "ErrCacheMiss", "Error", "Get", "GetByICAOOrIATA", "Iata", "Icao", "Limit", "RecordError", "Result", "Search", "SearchAirportsRequest", "Set", "SetAttributes", "SetStatus", "SpanKindClient", "Sprintf", "Start", "String", "ToUpper", "Tracer", "TrimSpace", "Warn", "WithSpanKind", "a.IATA", "a.ICAO", "airportResult.Classification", "airportResult.Designator", "airportResult.Iata", "airportResult.Icao", "airportResult.Id", "attribute.String", "c.cache", "c.client", "c.searchLimit", "codes.Error", "context.Context", "core.Airport", "core.ErrCacheMiss", "err.Error", "errors.Is", "fmt.Sprintf", "log.Debug", "log.Warn", "resp.Result", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "strings.ToUpper", "strings.TrimSpace", "trace.SpanKindClient", "trace.WithSpanKind", "v0.Airport", "v0.SearchAirportsRequest", "xotel.Tracer", "zap.Error"], "header_context_minimal": "package adapter\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/cockroachdb/errors\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n    \"go.impalastudios.com/aviation/liveflights/pkg/grpc/airports/v0\"\n)\n// receiver: c *AirportsGrpcClient", "summary_en": "Retrieves airport details by ICAO or IATA code, caching results and handling errors", "keywords_en": ["airports retrieval", "cache management", "composite key", "error handling", "iata search", "icao search"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:14.875252", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "c6b93f67b335dfa7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/airports_grpc_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go", "rel_path": "internal/adapters/airports_grpc_client.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 141, "end_line": 147, "text": "func str(s *string) string {\n\tif s != nil {\n\t\treturn *s\n\t}\n\treturn \"\"\n}\n", "n_tokens": 23, "primary_symbol": "str", "primary_kind": "function", "primary_span": [141, 147], "def_symbols": [], "symbols": ["str", "func", "string", "nil", "return"], "doc_head": "func str(s *string) string {\n\tif s != nil {\n\t\treturn *s\n\t}\n\treturn \"\"\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:str/complete", "package": "adapter", "node_kind": "function", "receiver": "", "function_name": "str", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["str"], "all_kinds": ["function"], "all_ast_paths": ["go:function:str/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [3851], "all_end_bytes": [3922], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package adapter", "summary_en": "The function str returns the value of a string pointer if it's not nil, otherwise it returns an empty string", "keywords_en": ["empty string", "pointer handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:17.615887", "file_synopsis_hash": "491ed43b7e4e8d07", "chunk_text_hash": "dcfb3f5795de2290", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/airports_grpc_client.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airlines_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\n//\n", "n_tokens": 61, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "airlines_grpc_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "airlines_grpc_client_mocks", "package"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airlines_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airlines_grpc_client.go -destination=mocks/airlines_grpc_client_mocks.go -package=mocks\n//", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Generates mock implementations for GRPC client methods", "keywords_en": ["destination file", "grpc client", "mock generation", "mock methods", "package mocks", "source code"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:20.486372", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "e566268208a0539c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 11, "text": "// Package mocks is a generated GoMock package.\npackage mocks\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "header", "primary_span": [9, 11], "def_symbols": [], "symbols": ["Package", "mocks", "generated", "GoMock", "package"], "doc_head": "// Package mocks is a generated GoMock package.\npackage mocks", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Package mocks contains generated GoMock types and methods for testing purposes", "keywords_en": ["code stubs", "go mock", "method implementations", "package generation", "testing tools", "type definitions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:20.489567", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "6048227566d0ec95", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 19, "text": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 42, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 19], "def_symbols": [], "symbols": ["import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock"], "doc_head": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This Go package contains mocks for core components, including context and reflection", "keywords_en": ["context mocking", "core components", "mock generation", "reflection utilities", "testing support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:20.490210", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "2c1ac07328a2a65a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 20, "end_line": 23, "text": "// MockAirlinesCache is a mock of AirlinesCache interface.\ntype MockAirlinesCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirlinesCacheMockRecorder", "n_tokens": 36, "primary_symbol": "MockAirlinesCache", "primary_kind": "type", "primary_span": [20, 23], "def_symbols": [], "symbols": ["MockAirlinesCache", "mock", "AirlinesCache", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockAirlinesCacheMockRecorder"], "doc_head": "// MockAirlinesCache is a mock of AirlinesCache interface.\ntype MockAirlinesCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirlinesCacheMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockAirlinesCache (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockAirlinesCache", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockAirlinesCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockAirlinesCache (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockAirlinesCache"], "all_type_kinds": ["struct"], "all_start_bytes": [501], "all_end_bytes": [618], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockAirlinesCache", "MockAirlinesCacheMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Defines a mock for the AirlinesCache interface for testing purposes", "keywords_en": ["cache management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:22.726642", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "386fc845bcdf6dac", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 24, "end_line": 26, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockAirlinesCache", "primary_kind": "type", "primary_span": [24, 26], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockAirlinesCache (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockAirlinesCache", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockAirlinesCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockAirlinesCache (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockAirlinesCache"], "all_type_kinds": ["struct"], "all_start_bytes": [501], "all_end_bytes": [618], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "defines a mock cache for airlines data", "keywords_en": ["airlines data", "cache management", "error handling", "interface implementation", "mock cache"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:25.089039", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 27, "end_line": 31, "text": "// MockAirlinesCacheMockRecorder is the mock recorder for MockAirlinesCache.\ntype MockAirlinesCacheMockRecorder struct {\n\tmock *MockAirlinesCache\n}\n", "n_tokens": 34, "primary_symbol": "MockAirlinesCacheMockRecorder", "primary_kind": "type", "primary_span": [27, 31], "def_symbols": [], "symbols": ["MockAirlinesCacheMockRecorder", "the", "mock", "recorder", "for", "MockAirlinesCache", "type", "struct"], "doc_head": "// MockAirlinesCacheMockRecorder is the mock recorder for MockAirlinesCache.\ntype MockAirlinesCacheMockRecorder struct {\n\tmock *MockAirlinesCache\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockAirlinesCacheMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockAirlinesCacheMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockAirlinesCacheMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockAirlinesCacheMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockAirlinesCacheMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [702], "all_end_bytes": [767], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockAirlinesCache", "MockAirlinesCacheMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "This code defines a mock recorder for managing airline cache operations", "keywords_en": ["airline cache", "cache management", "go package mocks", "mock recorder"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:27.623234", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "c25581f1a1e8b3d2", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 38, "text": "// NewMockAirlinesCache creates a new mock instance.\nfunc NewMockAirlinesCache(ctrl *gomock.Controller) *MockAirlinesCache {\n\tmock := &MockAirlinesCache{ctrl: ctrl}\n\tmock.recorder = &MockAirlinesCacheMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 60, "primary_symbol": "NewMockAirlinesCache", "primary_kind": "function", "primary_span": [33, 38], "def_symbols": [], "symbols": ["NewMockAirlinesCache", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockAirlinesCache", "recorder", "MockAirlinesCacheMockRecorder", "return"], "doc_head": "// NewMockAirlinesCache creates a new mock instance.\nfunc NewMockAirlinesCache(ctrl *gomock.Controller) *MockAirlinesCache {\n\tmock := &MockAirlinesCache{ctrl: ctrl}\n\tmock.recorder = &MockAirlinesCacheMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockAirlinesCache/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockAirlinesCache", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockAirlinesCache"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockAirlinesCache/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [822], "all_end_bytes": [1002], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockAirlinesCache", "MockAirlinesCacheMockRecorder", "NewMockAirlinesCache", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock instance for airlines cache", "keywords_en": ["airlines cache", "controller management", "mock instance", "recorder setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:30.156687", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "7f6372f0cb1f65b6", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 39, "end_line": 43, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirlinesCache) EXPECT() *MockAirlinesCacheMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 39, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [40, 43], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockAirlinesCache", "MockAirlinesCacheMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirlinesCache) EXPECT() *MockAirlinesCacheMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirlinesCache).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockAirlinesCache", "function_name": "", "method_name": "EXPECT", "type_name": "MockAirlinesCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirlinesCache).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockAirlinesCache"], "all_type_names": ["MockAirlinesCache"], "all_type_kinds": [null], "all_start_bytes": [1081], "all_end_bytes": [1171], "primary_index": 0, "all_receivers_normalized": ["(*MockAirlinesCache)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockAirlinesCache", "MockAirlinesCacheMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockAirlinesCache", "summary_en": "Mock method for airlines cache expectations", "keywords_en": ["cache management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:32.394834", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "46d40042c9af458a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 44, "end_line": 52, "text": "// Get mocks base method.\nfunc (m *MockAirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, designator)\n\tret0, _ := ret[0].(core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 88, "primary_symbol": "Get", "primary_kind": "method", "primary_span": [45, 52], "def_symbols": [], "symbols": ["Get", "mocks", "base", "method", "func", "MockAirlinesCache", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// Get mocks base method.\nfunc (m *MockAirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, designator)\n\tret0, _ := ret[0].(core.Airline)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirlinesCache).Get/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockAirlinesCache", "function_name": "", "method_name": "Get", "type_name": "MockAirlinesCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Get"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirlinesCache).Get/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockAirlinesCache"], "all_type_names": ["MockAirlinesCache"], "all_type_kinds": [null], "all_start_bytes": [1199], "all_end_bytes": [1442], "primary_index": 0, "all_receivers_normalized": ["(*MockAirlinesCache)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airline", "Call", "Context", "Get", "Helper", "MockAirlinesCache", "T.Helper", "context.Context", "core.Airline", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockAirlinesCache", "summary_en": "Mock implementation of Get method for AirlinesCache, handling context and returning an airline object or error", "keywords_en": ["airline retrieval", "cache management", "context handling", "error handling", "method overriding", "mock implementation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:35.727502", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "1f16660dfe55612f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 53, "end_line": 58, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockAirlinesCacheMockRecorder) Get(ctx, designator any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirlinesCache)(nil).Get), ctx, designator)\n}\n", "n_tokens": 73, "primary_symbol": "Get", "primary_kind": "method", "primary_span": [54, 58], "def_symbols": [], "symbols": ["Get", "indicates", "expected", "call", "func", "MockAirlinesCacheMockRecorder", "ctx", "designator", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirlinesCache", "nil"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockAirlinesCacheMockRecorder) Get(ctx, designator any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirlinesCache)(nil).Get), ctx, designator)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirlinesCacheMockRecorder).Get/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockAirlinesCacheMockRecorder", "function_name": "", "method_name": "Get", "type_name": "MockAirlinesCacheMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Get"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirlinesCacheMockRecorder).Get/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockAirlinesCacheMockRecorder"], "all_type_names": ["MockAirlinesCacheMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1486], "all_end_bytes": [1719], "primary_index": 0, "all_receivers_normalized": ["(*MockAirlinesCacheMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Get", "Helper", "MockAirlinesCache", "MockAirlinesCacheMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockAirlinesCacheMockRecorder", "summary_en": "This function records a call to get data from an airline cache using the provided context and designator", "keywords_en": ["cache management", "data retrieval", "error handling", "function recording", "mock object"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:38.886745", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "8db9a9ca6e0c7cbd", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 59, "end_line": 66, "text": "// Set mocks base method.\nfunc (m *MockAirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, designator, airline)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 71, "primary_symbol": "Set", "primary_kind": "method", "primary_span": [60, 66], "def_symbols": [], "symbols": ["Set", "mocks", "base", "method", "func", "MockAirlinesCache", "ctx", "context", "Context", "designator", "string", "airline", "core", "Airline", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// Set mocks base method.\nfunc (m *MockAirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, designator, airline)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirlinesCache).Set/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockAirlinesCache", "function_name": "", "method_name": "Set", "type_name": "MockAirlinesCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Set"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirlinesCache).Set/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockAirlinesCache"], "all_type_names": ["MockAirlinesCache"], "all_type_kinds": [null], "all_start_bytes": [1747], "all_end_bytes": [1965], "primary_index": 0, "all_receivers_normalized": ["(*MockAirlinesCache)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airline", "Call", "Context", "Helper", "MockAirlinesCache", "Set", "T.Helper", "context.Context", "core.Airline", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockAirlinesCache", "summary_en": "MockAirlinesCache Set method mocks setting an airline in a cache", "keywords_en": ["cache management", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:41.801564", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "442ec73aff090702", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airlines_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 67, "end_line": 72, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockAirlinesCacheMockRecorder) Set(ctx, designator, airline any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirlinesCache)(nil).Set), ctx, designator, airline)\n}\n", "n_tokens": 77, "primary_symbol": "Set", "primary_kind": "method", "primary_span": [68, 72], "def_symbols": [], "symbols": ["Set", "indicates", "expected", "call", "func", "MockAirlinesCacheMockRecorder", "ctx", "designator", "airline", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirlinesCache", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockAirlinesCacheMockRecorder) Set(ctx, designator, airline any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirlinesCache)(nil).Set), ctx, designator, airline)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirlinesCacheMockRecorder).Set/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockAirlinesCacheMockRecorder", "function_name": "", "method_name": "Set", "type_name": "MockAirlinesCacheMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Set"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirlinesCacheMockRecorder).Set/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockAirlinesCacheMockRecorder"], "all_type_names": ["MockAirlinesCacheMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [2009], "all_end_bytes": [2260], "primary_index": 0, "all_receivers_normalized": ["(*MockAirlinesCacheMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Helper", "MockAirlinesCache", "MockAirlinesCacheMockRecorder", "RecordCallWithMethodType", "Set", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockAirlinesCacheMockRecorder", "summary_en": "This function records an expected call to the 'Set' method of a mock AirlinesCache object", "keywords_en": ["cache management", "context handling", "expected calls", "method recording", "mock recording", "testing framework"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:41.804703", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "4d40c11b1e06a0b0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airlines_grpc_client_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 8, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airports_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\n//\n", "n_tokens": 64, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 8], "def_symbols": [], "symbols": ["Code", "generated", "MockGen", "NOT", "EDIT", "Source", "airports_grpc_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "airports_grpc_client_grpc_client_mocks", "package"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: airports_grpc_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=airports_grpc_client.go -destination=mocks/airports_grpc_client_grpc_client_mocks.go -package=mocks\n//", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This code generates mock implementations for the airports gRPC client", "keywords_en": ["airports grpc", "api stubbing", "client mocks", "code generation", "mock generation", "service simulation", "test doubles", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:45.097380", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "1508fe554fbd1390", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 9, "end_line": 11, "text": "// Package mocks is a generated GoMock package.\npackage mocks\n", "n_tokens": 13, "primary_symbol": "", "primary_kind": "header", "primary_span": [9, 11], "def_symbols": [], "symbols": ["Package", "mocks", "generated", "GoMock", "package"], "doc_head": "// Package mocks is a generated GoMock package.\npackage mocks", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "Package mocks contains generated GoMock types and methods for testing purposes", "keywords_en": ["code stubs", "go mock", "method implementations", "package generation", "testing tools", "type definitions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:45.101886", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "6048227566d0ec95", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 12, "end_line": 19, "text": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n", "n_tokens": 42, "primary_symbol": "", "primary_kind": "header", "primary_span": [12, 19], "def_symbols": [], "symbols": ["import", "context", "reflect", "core", "impalastudios", "com", "aviation", "liveflights", "internal", "gomock", "uber", "org", "mock"], "doc_head": "import (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tcore \"go.impalastudios.com/aviation/liveflights/internal/core\"\n\tgomock \"go.uber.org/mock/gomock\"\n)", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:file_header", "package": "mocks", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This Go package contains mocks for core components, including context and reflection", "keywords_en": ["context mocking", "core components", "mock generation", "reflection utilities", "testing support"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:45.102364", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "2c1ac07328a2a65a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 20, "end_line": 23, "text": "// MockAirportsCache is a mock of AirportsCache interface.\ntype MockAirportsCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirportsCacheMockRecorder", "n_tokens": 37, "primary_symbol": "MockAirportsCache", "primary_kind": "type", "primary_span": [20, 23], "def_symbols": [], "symbols": ["MockAirportsCache", "mock", "AirportsCache", "interface", "type", "struct", "ctrl", "gomock", "Controller", "recorder", "MockAirportsCacheMockRecorder"], "doc_head": "// MockAirportsCache is a mock of AirportsCache interface.\ntype MockAirportsCache struct {\n\tctrl     *gomock.Controller\n\trecorder *MockAirportsCacheMockRecorder", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockAirportsCache (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockAirportsCache", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockAirportsCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockAirportsCache (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockAirportsCache"], "all_type_kinds": ["struct"], "all_start_bytes": [513], "all_end_bytes": [630], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockAirportsCache", "MockAirportsCacheMockRecorder", "gomock.Controller"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "This code defines a mock for an airports cache interface using GoMock, enabling controlled tests", "keywords_en": ["cache management", "error handling", "gomock library", "interface implementation", "mock object", "test setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:48.290905", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "542b932384a77df0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 24, "end_line": 26, "text": "\tisgomock struct{}\n}\n", "n_tokens": 6, "primary_symbol": "MockAirportsCache", "primary_kind": "type", "primary_span": [24, 26], "def_symbols": [], "symbols": ["isgomock", "struct"], "doc_head": "\tisgomock struct{}\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockAirportsCache (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockAirportsCache", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockAirportsCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockAirportsCache (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockAirportsCache"], "all_type_kinds": ["struct"], "all_start_bytes": [513], "all_end_bytes": [630], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package mocks", "summary_en": "This code defines a mock struct for cache management, possibly for use in unit testing", "keywords_en": ["cache management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:50.656098", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "a115a2e7099febd0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 27, "end_line": 31, "text": "// MockAirportsCacheMockRecorder is the mock recorder for MockAirportsCache.\ntype MockAirportsCacheMockRecorder struct {\n\tmock *MockAirportsCache\n}\n", "n_tokens": 34, "primary_symbol": "MockAirportsCacheMockRecorder", "primary_kind": "type", "primary_span": [27, 31], "def_symbols": [], "symbols": ["MockAirportsCacheMockRecorder", "the", "mock", "recorder", "for", "MockAirportsCache", "type", "struct"], "doc_head": "// MockAirportsCacheMockRecorder is the mock recorder for MockAirportsCache.\ntype MockAirportsCacheMockRecorder struct {\n\tmock *MockAirportsCache\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockAirportsCacheMockRecorder (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "MockAirportsCacheMockRecorder", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["MockAirportsCacheMockRecorder"], "all_kinds": ["type"], "all_ast_paths": ["go:type:MockAirportsCacheMockRecorder (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["MockAirportsCacheMockRecorder"], "all_type_kinds": ["struct"], "all_start_bytes": [714], "all_end_bytes": [779], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["MockAirportsCache", "MockAirportsCacheMockRecorder"], "header_context_minimal": "package mocks", "summary_en": "Represents a mock recorder for managing airport cache operations", "keywords_en": ["airport cache", "cache management", "mock recorder"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:52.987455", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "472acb9ea9d73d5e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 32, "end_line": 38, "text": "// NewMockAirportsCache creates a new mock instance.\nfunc NewMockAirportsCache(ctrl *gomock.Controller) *MockAirportsCache {\n\tmock := &MockAirportsCache{ctrl: ctrl}\n\tmock.recorder = &MockAirportsCacheMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 60, "primary_symbol": "NewMockAirportsCache", "primary_kind": "function", "primary_span": [33, 38], "def_symbols": [], "symbols": ["NewMockAirportsCache", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockAirportsCache", "recorder", "MockAirportsCacheMockRecorder", "return"], "doc_head": "// NewMockAirportsCache creates a new mock instance.\nfunc NewMockAirportsCache(ctrl *gomock.Controller) *MockAirportsCache {\n\tmock := &MockAirportsCache{ctrl: ctrl}\n\tmock.recorder = &MockAirportsCacheMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:function:NewMockAirportsCache/complete", "package": "mocks", "node_kind": "function", "receiver": "", "function_name": "NewMockAirportsCache", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewMockAirportsCache"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewMockAirportsCache/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [834], "all_end_bytes": [1014], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockAirportsCache", "MockAirportsCacheMockRecorder", "NewMockAirportsCache", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Creates a new mock instance for airport cache management", "keywords_en": ["airports data", "cache management", "controller interface", "mock creation", "recorder setup", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:55.876834", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "ebe01b7535669113", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 39, "end_line": 43, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirportsCache) EXPECT() *MockAirportsCacheMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 39, "primary_symbol": "EXPECT", "primary_kind": "method", "primary_span": [40, 43], "def_symbols": [], "symbols": ["EXPECT", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockAirportsCache", "MockAirportsCacheMockRecorder", "return", "recorder"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockAirportsCache) EXPECT() *MockAirportsCacheMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirportsCache).EXPECT/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockAirportsCache", "function_name": "", "method_name": "EXPECT", "type_name": "MockAirportsCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["EXPECT"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirportsCache).EXPECT/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockAirportsCache"], "all_type_names": ["MockAirportsCache"], "all_type_kinds": [null], "all_start_bytes": [1093], "all_end_bytes": [1183], "primary_index": 0, "all_receivers_normalized": ["(*MockAirportsCache)"], "imports_used_minimal": [], "symbols_referenced_strict": ["MockAirportsCache", "MockAirportsCacheMockRecorder", "m.recorder"], "header_context_minimal": "package mocks\n// receiver: m *MockAirportsCache", "summary_en": "MockAirportsCache EXPECT method returns an object to indicate expected use", "keywords_en": ["cache management", "expectation recording", "mock object", "recorder pattern", "test setup", "testing utilities"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:19:58.909258", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "5d5e0255b6b66b6a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#9", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 44, "end_line": 52, "text": "// Get mocks base method.\nfunc (m *MockAirportsCache) Get(ctx context.Context, key string) (core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, key)\n\tret0, _ := ret[0].(core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n", "n_tokens": 86, "primary_symbol": "Get", "primary_kind": "method", "primary_span": [45, 52], "def_symbols": [], "symbols": ["Get", "mocks", "base", "method", "func", "MockAirportsCache", "ctx", "context", "Context", "key", "string", "core", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return"], "doc_head": "// Get mocks base method.\nfunc (m *MockAirportsCache) Get(ctx context.Context, key string) (core.Airport, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, key)\n\tret0, _ := ret[0].(core.Airport)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirportsCache).Get/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockAirportsCache", "function_name": "", "method_name": "Get", "type_name": "MockAirportsCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Get"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirportsCache).Get/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockAirportsCache"], "all_type_names": ["MockAirportsCache"], "all_type_kinds": [null], "all_start_bytes": [1211], "all_end_bytes": [1440], "primary_index": 0, "all_receivers_normalized": ["(*MockAirportsCache)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airport", "Call", "Context", "Get", "Helper", "MockAirportsCache", "T.Helper", "context.Context", "core.Airport", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockAirportsCache", "summary_en": "Mock implementation for retrieving an airport using a cache", "keywords_en": ["airport data", "cache retrieval", "context handling", "error management"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:01.660041", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "ae865481cb3a7790", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#10", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 53, "end_line": 58, "text": "// Get indicates an expected call of Get.\nfunc (mr *MockAirportsCacheMockRecorder) Get(ctx, key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirportsCache)(nil).Get), ctx, key)\n}\n", "n_tokens": 71, "primary_symbol": "Get", "primary_kind": "method", "primary_span": [54, 58], "def_symbols": [], "symbols": ["Get", "indicates", "expected", "call", "func", "MockAirportsCacheMockRecorder", "ctx", "key", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirportsCache", "nil"], "doc_head": "// Get indicates an expected call of Get.\nfunc (mr *MockAirportsCacheMockRecorder) Get(ctx, key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockAirportsCache)(nil).Get), ctx, key)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirportsCacheMockRecorder).Get/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockAirportsCacheMockRecorder", "function_name": "", "method_name": "Get", "type_name": "MockAirportsCacheMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Get"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirportsCacheMockRecorder).Get/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockAirportsCacheMockRecorder"], "all_type_names": ["MockAirportsCacheMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1484], "all_end_bytes": [1703], "primary_index": 0, "all_receivers_normalized": ["(*MockAirportsCacheMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Get", "Helper", "MockAirportsCache", "MockAirportsCacheMockRecorder", "RecordCallWithMethodType", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockAirportsCacheMockRecorder", "summary_en": "records an expected call to the Get method of a mock airport cache", "keywords_en": ["cache retrieval", "interface implementation", "method recording", "mock object", "test setup"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:04.641760", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "144508698382759a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#11", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 59, "end_line": 66, "text": "// Set mocks base method.\nfunc (m *MockAirportsCache) Set(ctx context.Context, key string, airport core.Airport) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, key, airport)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n", "n_tokens": 69, "primary_symbol": "Set", "primary_kind": "method", "primary_span": [60, 66], "def_symbols": [], "symbols": ["Set", "mocks", "base", "method", "func", "MockAirportsCache", "ctx", "context", "Context", "key", "string", "airport", "core", "Airport", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return"], "doc_head": "// Set mocks base method.\nfunc (m *MockAirportsCache) Set(ctx context.Context, key string, airport core.Airport) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", ctx, key, airport)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirportsCache).Set/complete", "package": "mocks", "node_kind": "method", "receiver": "m *MockAirportsCache", "function_name": "", "method_name": "Set", "type_name": "MockAirportsCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Set"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirportsCache).Set/complete"], "all_roles": ["complete"], "all_receivers": ["m *MockAirportsCache"], "all_type_names": ["MockAirportsCache"], "all_type_kinds": [null], "all_start_bytes": [1731], "all_end_bytes": [1935], "primary_index": 0, "all_receivers_normalized": ["(*MockAirportsCache)"], "imports_used_minimal": ["context", "go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airport", "Call", "Context", "Helper", "MockAirportsCache", "Set", "T.Helper", "context.Context", "core.Airport", "m.ctrl"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n)\n// receiver: m *MockAirportsCache", "summary_en": "Mocks the Set method for airport cache management, handling errors", "keywords_en": ["airport data", "cache management", "context passing", "error handling", "helper function"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:07.736711", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "06ae3359493c4047", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#12", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "rel_path": "internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 67, "end_line": 72, "text": "// Set indicates an expected call of Set.\nfunc (mr *MockAirportsCacheMockRecorder) Set(ctx, key, airport any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirportsCache)(nil).Set), ctx, key, airport)\n}\n", "n_tokens": 75, "primary_symbol": "Set", "primary_kind": "method", "primary_span": [68, 72], "def_symbols": [], "symbols": ["Set", "indicates", "expected", "call", "func", "MockAirportsCacheMockRecorder", "ctx", "key", "airport", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "MockAirportsCache", "nil"], "doc_head": "// Set indicates an expected call of Set.\nfunc (mr *MockAirportsCacheMockRecorder) Set(ctx, key, airport any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockAirportsCache)(nil).Set), ctx, key, airport)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(*MockAirportsCacheMockRecorder).Set/complete", "package": "mocks", "node_kind": "method", "receiver": "mr *MockAirportsCacheMockRecorder", "function_name": "", "method_name": "Set", "type_name": "MockAirportsCacheMockRecorder", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Set"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*MockAirportsCacheMockRecorder).Set/complete"], "all_roles": ["complete"], "all_receivers": ["mr *MockAirportsCacheMockRecorder"], "all_type_names": ["MockAirportsCacheMockRecorder"], "all_type_kinds": [null], "all_start_bytes": [1979], "all_end_bytes": [2216], "primary_index": 0, "all_receivers_normalized": ["(*MockAirportsCacheMockRecorder)"], "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Helper", "MockAirportsCache", "MockAirportsCacheMockRecorder", "RecordCallWithMethodType", "Set", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockAirportsCacheMockRecorder", "summary_en": "This function records an expected call to set airport data in a cache", "keywords_en": ["airports data", "cache management", "mock recording"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:10.303419", "file_synopsis_hash": "91b9bdc31a3758ff", "chunk_text_hash": "acc98b666b897d18", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/mocks/airports_grpc_client_grpc_client_mocks.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package cache\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "cache"], "doc_head": "package cache", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "manages caching operations and handles errors gracefully", "keywords_en": ["cache management", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:12.441559", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "6d03f451326be162", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 4, "text": "import \"go.impalastudios.com/aviation/liveflights/internal/core\"\n", "n_tokens": 17, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 4], "def_symbols": [], "symbols": ["import", "impalastudios", "com", "aviation", "liveflights", "internal", "core"], "doc_head": "import \"go.impalastudios.com/aviation/liveflights/internal/core\"", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "Manages live flight data cache with error handling", "keywords_en": ["cache management", "data caching", "error handling", "flight data", "live updates"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:14.843748", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "c787f9013351e255", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 5, "end_line": 12, "text": "type airline struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}\n", "n_tokens": 60, "primary_symbol": "airline", "primary_kind": "type", "primary_span": [5, 12], "def_symbols": [], "symbols": ["type", "airline", "struct", "string", "json", "Designator", "designator", "ICAO", "icao", "omitempty", "IATA", "iata", "Classification", "int64", "classification"], "doc_head": "type airline struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:airline (struct)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "airline", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["airline"], "all_kinds": ["type"], "all_ast_paths": ["go:type:airline (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["airline"], "all_type_kinds": ["struct"], "all_start_bytes": [86], "all_end_bytes": [328], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Classification", "Designator"], "header_context_minimal": "package cache", "summary_en": "Defines an airline structure with fields for ID, designator, ICAO code, IATA code, and classification", "keywords_en": ["airline struct", "classification field", "designator field", "iata code", "icao code", "id field"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:18.390553", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "bff20330bc053f46", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 13, "end_line": 20, "text": "type airport struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}\n", "n_tokens": 60, "primary_symbol": "airport", "primary_kind": "type", "primary_span": [13, 20], "def_symbols": [], "symbols": ["type", "airport", "struct", "string", "json", "Designator", "designator", "ICAO", "icao", "omitempty", "IATA", "iata", "Classification", "int64", "classification"], "doc_head": "type airport struct {\n\tID             string  `json:\"id\"`\n\tDesignator     string  `json:\"designator\"`\n\tICAO           *string `json:\"icao,omitempty\"`\n\tIATA           *string `json:\"iata,omitempty\"`\n\tClassification int64   `json:\"classification\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:airport (struct)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "airport", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["airport"], "all_kinds": ["type"], "all_ast_paths": ["go:type:airport (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["airport"], "all_type_kinds": ["struct"], "all_start_bytes": [335], "all_end_bytes": [577], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Classification", "Designator"], "header_context_minimal": "package cache", "summary_en": "Defines an airport data structure with various identifiers and classification", "keywords_en": ["airport data", "iata code", "icao code"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:21.112853", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "b52ddcd9607d8e61", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 21, "end_line": 30, "text": "func airlineFromDomain(a core.Airline) airline {\n\treturn airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n", "n_tokens": 62, "primary_symbol": "airlineFromDomain", "primary_kind": "function", "primary_span": [21, 30], "def_symbols": [], "symbols": ["airlineFromDomain", "func", "core", "Airline", "airline", "return", "Designator", "ICAO", "IATA", "Classification"], "doc_head": "func airlineFromDomain(a core.Airline) airline {\n\treturn airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:airlineFromDomain/complete", "package": "cache", "node_kind": "function", "receiver": "", "function_name": "airlineFromDomain", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["airlineFromDomain"], "all_kinds": ["function"], "all_ast_paths": ["go:function:airlineFromDomain/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [579], "all_end_bytes": [793], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airline", "Classification", "Designator", "a.Classification", "a.Designator", "a.IATA", "a.ICAO", "a.ID", "core.Airline"], "header_context_minimal": "package cache\nimport \"go.impalastudios.com/aviation/liveflights/internal/core\"", "summary_en": "Transforms an airline struct into another format", "keywords_en": ["airline transformation", "data conversion", "struct manipulation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:23.467076", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "3700a6bb89af0a91", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 31, "end_line": 40, "text": "func (a airline) toDomain() core.Airline {\n\treturn core.Airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n", "n_tokens": 66, "primary_symbol": "toDomain", "primary_kind": "method", "primary_span": [31, 40], "def_symbols": [], "symbols": ["toDomain", "func", "airline", "core", "Airline", "return", "Designator", "ICAO", "IATA", "Classification"], "doc_head": "func (a airline) toDomain() core.Airline {\n\treturn core.Airline{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(airline).toDomain/complete", "package": "cache", "node_kind": "method", "receiver": "a airline", "function_name": "", "method_name": "toDomain", "type_name": "airline", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["toDomain"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(airline).toDomain/complete"], "all_roles": ["complete"], "all_receivers": ["a airline"], "all_type_names": ["airline"], "all_type_kinds": [null], "all_start_bytes": [795], "all_end_bytes": [1008], "primary_index": 0, "all_receivers_normalized": ["(airline)"], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airline", "Classification", "Designator", "a.Classification", "a.Designator", "a.IATA", "a.ICAO", "a.ID", "core.Airline"], "header_context_minimal": "package cache\nimport \"go.impalastudios.com/aviation/liveflights/internal/core\"\n// receiver: a airline", "summary_en": "Converts airline data to domain model", "keywords_en": ["airline conversion", "data transformation", "domain modeling", "flight information", "object mapping", "travel industry"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:26.263298", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "509db807cd2bdaa3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#7", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 41, "end_line": 50, "text": "func airportFromDomain(a core.Airport) airport {\n\treturn airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n", "n_tokens": 62, "primary_symbol": "airportFromDomain", "primary_kind": "function", "primary_span": [41, 50], "def_symbols": [], "symbols": ["airportFromDomain", "func", "core", "Airport", "airport", "return", "Designator", "ICAO", "IATA", "Classification"], "doc_head": "func airportFromDomain(a core.Airport) airport {\n\treturn airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:airportFromDomain/complete", "package": "cache", "node_kind": "function", "receiver": "", "function_name": "airportFromDomain", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["airportFromDomain"], "all_kinds": ["function"], "all_ast_paths": ["go:function:airportFromDomain/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [1010], "all_end_bytes": [1224], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airport", "Classification", "Designator", "a.Classification", "a.Designator", "a.IATA", "a.ICAO", "a.ID", "core.Airport"], "header_context_minimal": "package cache\nimport \"go.impalastudios.com/aviation/liveflights/internal/core\"", "summary_en": "Converts an airport domain object to an internal airport struct", "keywords_en": ["airport conversion", "domain object mapping", "internal struct"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:28.742905", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "449d9308540e8f36", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#8", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go", "rel_path": "internal/adapters/cache/models.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 51, "end_line": 60, "text": "func (a airport) toDomain() core.Airport {\n\treturn core.Airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}\n", "n_tokens": 66, "primary_symbol": "toDomain", "primary_kind": "method", "primary_span": [51, 60], "def_symbols": [], "symbols": ["toDomain", "func", "airport", "core", "Airport", "return", "Designator", "ICAO", "IATA", "Classification"], "doc_head": "func (a airport) toDomain() core.Airport {\n\treturn core.Airport{\n\t\tID:             a.ID,\n\t\tDesignator:     a.Designator,\n\t\tICAO:           a.ICAO,\n\t\tIATA:           a.IATA,\n\t\tClassification: a.Classification,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(airport).toDomain/complete", "package": "cache", "node_kind": "method", "receiver": "a airport", "function_name": "", "method_name": "toDomain", "type_name": "airport", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["toDomain"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(airport).toDomain/complete"], "all_roles": ["complete"], "all_receivers": ["a airport"], "all_type_names": ["airport"], "all_type_kinds": [null], "all_start_bytes": [1226], "all_end_bytes": [1439], "primary_index": 0, "all_receivers_normalized": ["(airport)"], "imports_used_minimal": ["go.impalastudios.com/aviation/liveflights/internal/core"], "symbols_referenced_strict": ["Airport", "Classification", "Designator", "a.Classification", "a.Designator", "a.IATA", "a.ICAO", "a.ID", "core.Airport"], "header_context_minimal": "package cache\nimport \"go.impalastudios.com/aviation/liveflights/internal/core\"\n// receiver: a airport", "summary_en": "Converts airport data to domain model", "keywords_en": ["airport conversion", "data transformation", "domain model"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:31.147428", "file_synopsis_hash": "2b47ef0f879444fd", "chunk_text_hash": "3f77429df8711316", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/models.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airlines_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package cache\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "cache"], "doc_head": "package cache", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "manages caching operations and handles errors gracefully", "keywords_en": ["cache management", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:31.162279", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "6d03f451326be162", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airlines_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 15, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)\n", "n_tokens": 89, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 15], "def_symbols": [], "symbols": ["import", "context", "fmt", "github", "com", "redis", "cache", "pkg", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "time"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "Manages Redis cache for live flight data, handles errors, and logs trace information", "keywords_en": ["cache management", "error handling", "flight data", "trace logging"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:34.205492", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "c320f2ea436103a3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airlines_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 16, "end_line": 20, "text": "type AirlinesCache struct {\n\tclient client\n\tttl    time.Duration\n}\n", "n_tokens": 15, "primary_symbol": "AirlinesCache", "primary_kind": "type", "primary_span": [16, 20], "def_symbols": [], "symbols": ["type", "AirlinesCache", "struct", "client", "ttl", "time", "Duration"], "doc_head": "type AirlinesCache struct {\n\tclient client\n\tttl    time.Duration\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:AirlinesCache (struct)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "AirlinesCache", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["AirlinesCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:AirlinesCache (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["AirlinesCache"], "all_type_kinds": ["struct"], "all_start_bytes": [315], "all_end_bytes": [376], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirlinesCache", "Duration", "time.Duration"], "header_context_minimal": "package cache\nimport \"time\"", "summary_en": "Defines a cache structure for airline data with a client and time-to-live duration", "keywords_en": ["airline data", "cache management", "error handling", "time to live"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:37.035506", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "30416a79630c4cdf", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airlines_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 21, "end_line": 27, "text": "func NewAirlinesCache(client client, ttl time.Duration) *AirlinesCache {\n\treturn &AirlinesCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}\n", "n_tokens": 38, "primary_symbol": "NewAirlinesCache", "primary_kind": "function", "primary_span": [21, 27], "def_symbols": [], "symbols": ["NewAirlinesCache", "func", "client", "ttl", "time", "Duration", "AirlinesCache", "return"], "doc_head": "func NewAirlinesCache(client client, ttl time.Duration) *AirlinesCache {\n\treturn &AirlinesCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewAirlinesCache/complete", "package": "cache", "node_kind": "function", "receiver": "", "function_name": "NewAirlinesCache", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewAirlinesCache"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewAirlinesCache/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [378], "all_end_bytes": [512], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirlinesCache", "Duration", "NewAirlinesCache", "time.Duration"], "header_context_minimal": "package cache\nimport \"time\"", "summary_en": "Creates a new cache instance for managing airline data with a specified client and time-to-live duration", "keywords_en": ["airline data", "cache management", "client connection", "time to live"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:39.833137", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "2c16ea4c9657b01c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airlines_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 28, "end_line": 50, "text": "func (c *AirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\n\tvar item airline\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airline{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airline{}, errors.Wrap(err, \"failed to get airline from cache\")\n\t}\n\n\treturn item.toDomain(), nil\n}\n", "n_tokens": 178, "primary_symbol": "Get", "primary_kind": "method", "primary_span": [28, 50], "def_symbols": [], "symbols": ["Get", "func", "AirlinesCache", "ctx", "context", "Context", "designator", "string", "core", "Airline", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "key", "fmt", "Sprintf", "airlines", "var", "item", "airline", "err", "client", "nil", "RecordError", "SetStatus", "codes", "Error", "errors", "cache", "ErrCacheMiss", "return", "Wrap", "failed", "get", "from", "toDomain"], "doc_head": "func (c *AirlinesCache) Get(ctx context.Context, designator string) (core.Airline, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\tvar item airline\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airline{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airline{}, errors.Wrap(err, \"failed to get airline from cache\")\n\t}\n\treturn item.toDomain(), nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*AirlinesCache).Get/complete", "package": "cache", "node_kind": "method", "receiver": "c *AirlinesCache", "function_name": "", "method_name": "Get", "type_name": "AirlinesCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Get"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*AirlinesCache).Get/complete"], "all_roles": ["complete"], "all_receivers": ["c *AirlinesCache"], "all_type_names": ["AirlinesCache"], "all_type_kinds": [null], "all_start_bytes": [514], "all_end_bytes": [1182], "primary_index": 0, "all_receivers_normalized": ["(*AirlinesCache)"], "imports_used_minimal": ["context", "fmt", "github.com/pkg/errors", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.opentelemetry.io/otel/trace"], "symbols_referenced_strict": ["Airline", "AirlinesCache", "Context", "End", "ErrCacheMiss", "Error", "Get", "RecordError", "SetAttributes", "SetStatus", "SpanKindClient", "Sprintf", "Start", "String", "Tracer", "WithSpanKind", "Wrap", "attribute.String", "c.client", "cache.ErrCacheMiss", "codes.Error", "context.Context", "core.Airline", "core.ErrCacheMiss", "err.Error", "errors.Is", "errors.Wrap", "fmt.Sprintf", "item.toDomain", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "trace.SpanKindClient", "trace.WithSpanKind", "xotel.Tracer"], "header_context_minimal": "package cache\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/pkg/errors\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n    \"go.impalastudios.com/otel\"\n)\n// receiver: c *AirlinesCache", "summary_en": "Retrieves an airline from the cache using a designator, handling errors and spans", "keywords_en": ["airline data", "cache retrieval", "context management", "designator based", "domain conversion", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:39.837103", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "17bbed3c2b2af5a3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airlines_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go", "rel_path": "internal/adapters/cache/airlines_cache.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 51, "end_line": 69, "text": "func (c *AirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t\tattribute.String(\"cache_ttl\", c.ttl.String()),\n\t)\n\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airlineFromDomain(airline),\n\t\tTTL:   c.ttl,\n\t})\n}\n", "n_tokens": 142, "primary_symbol": "Set", "primary_kind": "method", "primary_span": [51, 69], "def_symbols": [], "symbols": ["Set", "func", "AirlinesCache", "ctx", "context", "Context", "designator", "string", "airline", "core", "Airline", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "cache_ttl", "ttl", "key", "fmt", "Sprintf", "airlines", "return", "client", "cache", "Item", "Ctx", "Key", "Value", "airlineFromDomain", "TTL"], "doc_head": "func (c *AirlinesCache) Set(ctx context.Context, designator string, airline core.Airline) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirlinesCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(\n\t\tattribute.String(\"designator\", designator),\n\t\tattribute.String(\"cache_ttl\", c.ttl.String()),\n\t)\n\tkey := fmt.Sprintf(\"airlines:%s\", designator)\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airlineFromDomain(airline),\n\t\tTTL:   c.ttl,\n\t})\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*AirlinesCache).Set/complete", "package": "cache", "node_kind": "method", "receiver": "c *AirlinesCache", "function_name": "", "method_name": "Set", "type_name": "AirlinesCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Set"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*AirlinesCache).Set/complete"], "all_roles": ["complete"], "all_receivers": ["c *AirlinesCache"], "all_type_names": ["AirlinesCache"], "all_type_kinds": [null], "all_start_bytes": [1184], "all_end_bytes": [1690], "primary_index": 0, "all_receivers_normalized": ["(*AirlinesCache)"], "imports_used_minimal": ["context", "fmt", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/trace"], "symbols_referenced_strict": ["Airline", "AirlinesCache", "Context", "Ctx", "End", "Item", "Key", "Set", "SetAttributes", "SpanKindClient", "Sprintf", "Start", "String", "Tracer", "Value", "WithSpanKind", "attribute.String", "c.client", "c.ttl", "cache.Item", "context.Context", "core.Airline", "fmt.Sprintf", "span.End", "span.SetAttributes", "trace.SpanKindClient", "trace.WithSpanKind", "xotel.Tracer"], "header_context_minimal": "package cache\nimport (\n    \"context\"\n    \"fmt\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n    \"go.impalastudios.com/otel\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n// receiver: c *AirlinesCache", "summary_en": "The function updates an airline's cache entry using a designator and airline data", "keywords_en": ["cache item", "cache management", "error handling", "key generation", "span attributes", "trace context", "ttl setting", "value assignment"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:39.838119", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "adbc2be4fca6a46f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airlines_cache.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airports_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package cache\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "cache"], "doc_head": "package cache", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "manages caching operations and handles errors gracefully", "keywords_en": ["cache management", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:39.842576", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "6d03f451326be162", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airports_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 15, "text": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)\n", "n_tokens": 89, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 15], "def_symbols": [], "symbols": ["import", "context", "fmt", "github", "com", "redis", "cache", "pkg", "errors", "impalastudios", "aviation", "liveflights", "internal", "core", "xotel", "otel", "opentelemetry", "attribute", "codes", "trace", "time"], "doc_head": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/aviation/liveflights/internal/core\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"time\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "Manages Redis cache for live flight data, handles errors, and logs trace information", "keywords_en": ["cache management", "error handling", "flight data", "trace logging"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:39.843195", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "c320f2ea436103a3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airports_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 16, "end_line": 20, "text": "type AirportsCache struct {\n\tclient client\n\tttl    time.Duration\n}\n", "n_tokens": 16, "primary_symbol": "AirportsCache", "primary_kind": "type", "primary_span": [16, 20], "def_symbols": [], "symbols": ["type", "AirportsCache", "struct", "client", "ttl", "time", "Duration"], "doc_head": "type AirportsCache struct {\n\tclient client\n\tttl    time.Duration\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:AirportsCache (struct)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "AirportsCache", "type_kind": "struct", "is_multi_declaration": false, "all_symbols": ["AirportsCache"], "all_kinds": ["type"], "all_ast_paths": ["go:type:AirportsCache (struct)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["AirportsCache"], "all_type_kinds": ["struct"], "all_start_bytes": [315], "all_end_bytes": [376], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirportsCache", "Duration", "time.Duration"], "header_context_minimal": "package cache\nimport \"time\"", "summary_en": "Defines a cache structure for managing airport data", "keywords_en": ["cache management", "client connection", "time to live"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:42.046586", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "168dd9c414b01d6e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airports_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 21, "end_line": 27, "text": "func NewAirportsCache(client client, ttl time.Duration) *AirportsCache {\n\treturn &AirportsCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}\n", "n_tokens": 38, "primary_symbol": "NewAirportsCache", "primary_kind": "function", "primary_span": [21, 27], "def_symbols": [], "symbols": ["NewAirportsCache", "func", "client", "ttl", "time", "Duration", "AirportsCache", "return"], "doc_head": "func NewAirportsCache(client client, ttl time.Duration) *AirportsCache {\n\treturn &AirportsCache{\n\t\tclient: client,\n\t\tttl:    ttl,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewAirportsCache/complete", "package": "cache", "node_kind": "function", "receiver": "", "function_name": "NewAirportsCache", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["NewAirportsCache"], "all_kinds": ["function"], "all_ast_paths": ["go:function:NewAirportsCache/complete"], "all_roles": ["complete"], "all_receivers": [""], "all_type_names": [""], "all_type_kinds": [null], "all_start_bytes": [378], "all_end_bytes": [512], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["time"], "symbols_referenced_strict": ["AirportsCache", "Duration", "NewAirportsCache", "time.Duration"], "header_context_minimal": "package cache\nimport \"time\"", "summary_en": "Creates a new airports cache with specified client and time-to-live duration", "keywords_en": ["airport data caching", "cache creation", "client management", "time to live"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:44.674146", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "e024b3167704db29", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#5", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airports_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 28, "end_line": 50, "text": "func (c *AirportsCache) Get(ctx context.Context, designator string) (core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\n\tvar item airport\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airport{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airport{}, errors.Wrap(err, \"failed to get airport from cache\")\n\t}\n\n\treturn item.toDomain(), nil\n}\n", "n_tokens": 178, "primary_symbol": "Get", "primary_kind": "method", "primary_span": [28, 50], "def_symbols": [], "symbols": ["Get", "func", "AirportsCache", "ctx", "context", "Context", "designator", "string", "core", "Airport", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "key", "fmt", "Sprintf", "airports", "var", "item", "airport", "err", "client", "nil", "RecordError", "SetStatus", "codes", "Error", "errors", "cache", "ErrCacheMiss", "return", "Wrap", "failed", "get", "from", "toDomain"], "doc_head": "func (c *AirportsCache) Get(ctx context.Context, designator string) (core.Airport, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\tvar item airport\n\terr := c.client.Get(ctx, key, &item)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t\tif errors.Is(err, cache.ErrCacheMiss) {\n\t\t\treturn core.Airport{}, core.ErrCacheMiss\n\t\t}\n\t\treturn core.Airport{}, errors.Wrap(err, \"failed to get airport from cache\")\n\t}\n\treturn item.toDomain(), nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*AirportsCache).Get/complete", "package": "cache", "node_kind": "method", "receiver": "c *AirportsCache", "function_name": "", "method_name": "Get", "type_name": "AirportsCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Get"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*AirportsCache).Get/complete"], "all_roles": ["complete"], "all_receivers": ["c *AirportsCache"], "all_type_names": ["AirportsCache"], "all_type_kinds": [null], "all_start_bytes": [514], "all_end_bytes": [1182], "primary_index": 0, "all_receivers_normalized": ["(*AirportsCache)"], "imports_used_minimal": ["context", "fmt", "github.com/pkg/errors", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.opentelemetry.io/otel/trace"], "symbols_referenced_strict": ["Airport", "AirportsCache", "Context", "End", "ErrCacheMiss", "Error", "Get", "RecordError", "SetAttributes", "SetStatus", "SpanKindClient", "Sprintf", "Start", "String", "Tracer", "WithSpanKind", "Wrap", "attribute.String", "c.client", "cache.ErrCacheMiss", "codes.Error", "context.Context", "core.Airport", "core.ErrCacheMiss", "err.Error", "errors.Is", "errors.Wrap", "fmt.Sprintf", "item.toDomain", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "trace.SpanKindClient", "trace.WithSpanKind", "xotel.Tracer"], "header_context_minimal": "package cache\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/pkg/errors\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n    \"go.impalastudios.com/otel\"\n)\n// receiver: c *AirportsCache", "summary_en": "This function retrieves airport data from a cache using a designator", "keywords_en": ["airport retrieval", "cache management", "cache miss", "context management", "domain conversion", "error handling", "span tracing"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:44.676824", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "5e3b125d3ecb5e80", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#6", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/airports_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go", "rel_path": "internal/adapters/cache/airports_cache.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 51, "end_line": 67, "text": "func (c *AirportsCache) Set(ctx context.Context, designator string, airport core.Airport) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tspan.SetAttributes(attribute.String(\"cache_ttl\", c.ttl.String()))\n\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airportFromDomain(airport),\n\t\tTTL:   c.ttl,\n\t})\n}\n", "n_tokens": 138, "primary_symbol": "Set", "primary_kind": "method", "primary_span": [51, 67], "def_symbols": [], "symbols": ["Set", "func", "AirportsCache", "ctx", "context", "Context", "designator", "string", "airport", "core", "Airport", "error", "span", "xotel", "Tracer", "Start", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "String", "cache_ttl", "ttl", "key", "fmt", "Sprintf", "airports", "return", "client", "cache", "Item", "Ctx", "Key", "Value", "airportFromDomain", "TTL"], "doc_head": "func (c *AirportsCache) Set(ctx context.Context, designator string, airport core.Airport) error {\n\tctx, span := xotel.Tracer.Start(ctx, \"AirportsCache:Set\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.String(\"designator\", designator))\n\tspan.SetAttributes(attribute.String(\"cache_ttl\", c.ttl.String()))\n\tkey := fmt.Sprintf(\"airports:%s\", designator)\n\treturn c.client.Set(&cache.Item{\n\t\tCtx:   ctx,\n\t\tKey:   key,\n\t\tValue: airportFromDomain(airport),\n\t\tTTL:   c.ttl,\n\t})\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(*AirportsCache).Set/complete", "package": "cache", "node_kind": "method", "receiver": "c *AirportsCache", "function_name": "", "method_name": "Set", "type_name": "AirportsCache", "type_kind": "", "is_multi_declaration": false, "all_symbols": ["Set"], "all_kinds": ["method"], "all_ast_paths": ["go:method:(*AirportsCache).Set/complete"], "all_roles": ["complete"], "all_receivers": ["c *AirportsCache"], "all_type_names": ["AirportsCache"], "all_type_kinds": [null], "all_start_bytes": [1184], "all_end_bytes": [1702], "primary_index": 0, "all_receivers_normalized": ["(*AirportsCache)"], "imports_used_minimal": ["context", "fmt", "go.impalastudios.com/aviation/liveflights/internal/core", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/trace"], "symbols_referenced_strict": ["Airport", "AirportsCache", "Context", "Ctx", "End", "Item", "Key", "Set", "SetAttributes", "SpanKindClient", "Sprintf", "Start", "String", "Tracer", "Value", "WithSpanKind", "attribute.String", "c.client", "c.ttl", "cache.Item", "context.Context", "core.Airport", "fmt.Sprintf", "span.End", "span.SetAttributes", "trace.SpanKindClient", "trace.WithSpanKind", "xotel.Tracer"], "header_context_minimal": "package cache\nimport (\n    \"context\"\n    \"fmt\"\n    \"go.impalastudios.com/aviation/liveflights/internal/core\"\n    \"go.impalastudios.com/otel\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n// receiver: c *AirportsCache", "summary_en": "Sets an airport in the cache with a given designator and TTL", "keywords_en": ["cache management", "context propagation", "error handling", "key generation", "span attributes", "time to live", "value storage"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:44.677704", "file_synopsis_hash": "fe2b949b707165aa", "chunk_text_hash": "02287eb6cf193ae3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/airports_cache.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#1", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/redis_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go", "rel_path": "internal/adapters/cache/redis_cache.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 2, "text": "package cache\n", "n_tokens": 3, "primary_symbol": "", "primary_kind": "header", "primary_span": [1, 2], "def_symbols": [], "symbols": ["package", "cache"], "doc_head": "package cache", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "manages caching operations and handles errors gracefully", "keywords_en": ["cache management", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:44.679837", "file_synopsis_hash": "e25c6859902f3cfb", "chunk_text_hash": "6d03f451326be162", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#2", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/redis_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go", "rel_path": "internal/adapters/cache/redis_cache.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 3, "end_line": 8, "text": "import (\n\t\"context\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/redis/go-redis/v9\"\n)\n", "n_tokens": 27, "primary_symbol": "", "primary_kind": "header", "primary_span": [3, 8], "def_symbols": [], "symbols": ["import", "context", "github", "com", "redis", "cache"], "doc_head": "import (\n\t\"context\"\n\t\"github.com/go-redis/cache/v9\"\n\t\"github.com/redis/go-redis/v9\"\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "cache", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "is_multi_declaration": false, "all_symbols": [], "all_kinds": [], "all_ast_paths": [], "all_roles": [], "all_receivers": [], "all_type_names": [], "all_type_kinds": [], "all_start_bytes": [], "all_end_bytes": [], "primary_index": 0, "all_receivers_normalized": [], "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package cache", "summary_en": "Imports Redis libraries for cache management", "keywords_en": ["cache management", "context management", "error handling", "go redis package", "redis import", "redis library"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:47.323374", "file_synopsis_hash": "e25c6859902f3cfb", "chunk_text_hash": "8e3adf8d05878593", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#3", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/redis_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go", "rel_path": "internal/adapters/cache/redis_cache.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 9, "end_line": 11, "text": "//go:generate mockgen -source=redis_cache.go -destination=mocks/redis_cache_mocks.go -package=mocks\ntype client interface {\n\tSet(*cache.Item) error", "n_tokens": 39, "primary_symbol": "client", "primary_kind": "type", "primary_span": [9, 11], "def_symbols": [], "symbols": ["generate", "mockgen", "source", "redis_cache", "destination", "mocks", "redis_cache_mocks", "package", "type", "client", "interface", "Set", "cache", "Item", "error"], "doc_head": "//go:generate mockgen -source=redis_cache.go -destination=mocks/redis_cache_mocks.go -package=mocks\ntype client interface {\n\tSet(*cache.Item) error", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:client (interface)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "client", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["client"], "all_kinds": ["type"], "all_ast_paths": ["go:type:client (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["client"], "all_type_kinds": ["interface"], "all_start_bytes": [207], "all_end_bytes": [510], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": [], "symbols_referenced_strict": ["Item", "Set", "cache.Item"], "header_context_minimal": "package cache", "summary_en": "Defines an interface for cache operations, including setting items", "keywords_en": ["cache management", "client methods", "error handling", "interface definition", "item storage", "mock generation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:50.281532", "file_synopsis_hash": "e25c6859902f3cfb", "chunk_text_hash": "4c84d8563231e45a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#4", "repo_id": "crunding-aviation_live_flights_service-fe0676d3f5f0", "path": "internal/adapters/cache/redis_cache.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go", "rel_path": "internal/adapters/cache/redis_cache.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 12, "end_line": 18, "text": "\tGet(context.Context, string, interface{}) error\n\tDelete(context.Context, string) error\n\tKeys(context.Context, string) *redis.StringSliceCmd\n\tPipelined(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)\n\tExists(context.Context, string) bool\n}\n", "n_tokens": 63, "primary_symbol": "client", "primary_kind": "type", "primary_span": [12, 18], "def_symbols": [], "symbols": ["Get", "context", "Context", "string", "interface", "error", "Delete", "Keys", "redis", "StringSliceCmd", "Pipelined", "func", "Pipeliner", "Cmder", "Exists", "bool"], "doc_head": "\tGet(context.Context, string, interface{}) error\n\tDelete(context.Context, string) error\n\tKeys(context.Context, string) *redis.StringSliceCmd\n\tPipelined(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)\n\tExists(context.Context, string) bool\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:client (interface)", "package": "cache", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "client", "type_kind": "interface", "is_multi_declaration": false, "all_symbols": ["client"], "all_kinds": ["type"], "all_ast_paths": ["go:type:client (interface)"], "all_roles": ["declaration"], "all_receivers": [""], "all_type_names": ["client"], "all_type_kinds": ["interface"], "all_start_bytes": [207], "all_end_bytes": [510], "primary_index": 0, "all_receivers_normalized": [""], "imports_used_minimal": ["context"], "symbols_referenced_strict": ["Cmder", "Context", "Delete", "Exists", "Get", "Keys", "Pipelined", "Pipeliner", "StringSliceCmd", "context.Context", "redis.Cmder", "redis.Pipeliner", "redis.StringSliceCmd"], "header_context_minimal": "package cache\nimport \"context\"", "summary_en": "This code provides a client interface for interacting with Redis cache, including get, delete, keys, pipelined operations, and existence checks", "keywords_en": ["cache management", "data retrieval", "error handling", "redis interactions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-13T11:20:53.702652", "file_synopsis_hash": "e25c6859902f3cfb", "chunk_text_hash": "2022c017fb4193bd", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-aviation_live_flights_service-fe0676d3f5f0/internal/adapters/cache/redis_cache.go#3"}}
