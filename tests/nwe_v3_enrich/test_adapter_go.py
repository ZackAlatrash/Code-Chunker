"""
Tests for Go adapter functions.
"""

import pytest
from pathlib import Path
import sys
import os

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "src"))

from nwe_v3_enrich.adapter import (
    is_generated_file,
    normalize_rel_path,
    compute_minimal_imports,
    compute_symbols_referenced,
    build_header_context_minimal,
    infer_go_structure,
)


class TestGeneratedFileDetection:
    """Test generated file detection."""
    
    def test_generated_filename_patterns(self):
        """Test detection based on filename patterns."""
        # Test various generated file patterns
        assert is_generated_file("service.pb.go", "package main")
        assert is_generated_file("mock_service.go", "package main")
        assert is_generated_file("zz_generated.go", "package main")
        assert is_generated_file("generated_types.go", "package main")
        assert is_generated_file("mocks_test.go", "package main")
        
        # Test non-generated files
        assert not is_generated_file("service.go", "package main")
        assert not is_generated_file("handler.go", "package main")
    
    def test_generated_content_markers(self):
        """Test detection based on content markers."""
        generated_content = """
        // Code generated by protoc-gen-go. DO NOT EDIT.
        package main
        """
        assert is_generated_file("service.go", generated_content)
        
        generated_content2 = """
        // This file is generated. Do not edit manually.
        package main
        """
        assert is_generated_file("types.go", generated_content2)
        
        normal_content = """
        package main
        
        func main() {
            fmt.Println("Hello, world!")
        }
        """
        assert not is_generated_file("main.go", normal_content)


class TestPathNormalization:
    """Test path normalization."""
    
    def test_normalize_relative_path(self):
        """Test normalization of relative paths."""
        result = normalize_rel_path("src/service.go", None)
        assert result == "src/service.go"
        
        result = normalize_rel_path("src\\service.go", None)  # Windows style
        assert result == "src/service.go"  # Converted to POSIX
    
    def test_normalize_absolute_path(self):
        """Test normalization of absolute paths."""
        repo_root = Path("/repo")
        result = normalize_rel_path("/repo/src/service.go", repo_root)
        assert result == "src/service.go"
        
        # Path outside repo root
        result = normalize_rel_path("/other/service.go", repo_root)
        assert result == "/other/service.go"


class TestGoStructureInference:
    """Test Go structure inference."""
    
    def test_package_header(self):
        """Test package header detection."""
        code = """
        package main
        
        import "fmt"
        import "time"
        """
        result = infer_go_structure(code)
        assert result["package"] == "main"
        assert result["node_kind"] == "header"
        assert result["ast_path"] == "go:file_header"
        assert result["is_header"] is True
    
    def test_type_definition(self):
        """Test type definition detection."""
        code = """
        type ForecastResponse struct {
            Temperature float64 `json:"temperature"`
            Humidity    int     `json:"humidity"`
        }
        """
        result = infer_go_structure(code)
        assert result["type_name"] == "ForecastResponse"
        assert result["type_kind"] == "struct"
        assert result["node_kind"] == "type"
        assert result["ast_path"] == "go:type:ForecastResponse (struct)"
    
    def test_method_definition(self):
        """Test method definition detection."""
        code = """
        func (x *ForecastResponse) Reset() {
            x.Temperature = 0
            x.Humidity = 0
        }
        """
        result = infer_go_structure(code)
        assert result["receiver"] == "x *ForecastResponse"
        assert result["method_name"] == "Reset"
        assert result["node_kind"] == "method"
        assert result["ast_path"] == "go:method:(*ForecastResponse).Reset"
    
    def test_function_definition(self):
        """Test function definition detection."""
        code = """
        func NewService(config *Config) *Service {
            return &Service{config: config}
        }
        """
        result = infer_go_structure(code)
        assert result["function_name"] == "NewService"
        assert result["node_kind"] == "function"
        assert result["ast_path"] == "go:function:NewService"
    
    def test_block_fallback(self):
        """Test block fallback for unrecognized content."""
        code = """
        // Some comment
        var x = 42
        """
        result = infer_go_structure(code)
        assert result["node_kind"] == "block"
        assert result["ast_path"] == "go:block"


class TestImportComputation:
    """Test import computation."""
    
    def test_minimal_imports(self):
        """Test minimal import computation."""
        code = """
        package main
        
        import "time"
        
        func main() {
            loc := time.LoadLocation("UTC")
            fmt.Println(loc)
        }
        """
        imports = compute_minimal_imports(code)
        assert "time" in imports
    
    def test_qualified_identifiers(self):
        """Test import detection from qualified identifiers."""
        code = """
        func processData(data *protoimpl.MessageState) {
            json.Marshal(data)
        }
        """
        imports = compute_minimal_imports(code)
        assert "encoding/json" in imports
        assert "google.golang.org/protobuf/runtime/protoimpl" in imports


class TestSymbolComputation:
    """Test symbol computation."""
    
    def test_symbols_referenced(self):
        """Test symbol reference computation."""
        code = """
        func processData(data *protoimpl.MessageState) error {
            json.Marshal(data)
            return nil
        }
        """
        symbols = compute_symbols_referenced(code)
        
        # Should include qualified identifiers
        assert "protoimpl.MessageState" in symbols
        assert "json.Marshal" in symbols
        
        # Should exclude Go builtins
        assert "error" not in symbols
        assert "nil" not in symbols
        assert "string" not in symbols


class TestHeaderContext:
    """Test header context building."""
    
    def test_header_context_single_import(self):
        """Test header context with single import."""
        result = build_header_context_minimal("main", ["fmt"], "function", "")
        expected = """package main
import "fmt" """
        assert result == expected
    
    def test_header_context_multiple_imports(self):
        """Test header context with multiple imports."""
        imports = ["fmt", "time", "encoding/json"]
        result = build_header_context_minimal("main", imports, "function", "")
        expected = """package main
import (
    "encoding/json"
    "fmt"
    "time"
)"""
        assert result == expected
    
    def test_header_context_method(self):
        """Test header context for method with receiver."""
        result = build_header_context_minimal("main", ["fmt"], "method", "x *Service")
        expected = """package main
import "fmt"
// receiver: x *Service"""
        assert result == expected
    
    def test_header_context_limit_imports(self):
        """Test that imports are limited to 5."""
        imports = ["fmt", "time", "encoding/json", "os", "net/http", "context", "log"]
        result = build_header_context_minimal("main", imports, "function", "")
        lines = result.split("\n")
        import_lines = [line for line in lines if line.strip().startswith('"')]
        assert len(import_lines) <= 5
