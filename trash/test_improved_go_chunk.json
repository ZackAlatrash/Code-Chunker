{"chunk_id":"1a064361ee58357ac28c0f1630ab6fa1da6e8f377a285db47f12d30ccfbe9a7c","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":22,"end_line":24,"ast_path":"go:type:providerClient (interface)","text":"import (\n\t\"context\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)\nproviderClient interface {\nGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n}","header_context":"import (\n\t\"context\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)","core":"providerClient interface {\nGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n}","footer_context":"","symbols_defined":["providerClient"],"symbols_referenced":[],"imports_used":["context","golang.org/x/sync/singleflight","time"],"neighbors":{"prev":null,"next":"8984da7d9afee40f00fed09a33dc1eec6761090aea72ee0da573a7a8b76b862b"},"summary_1l":"Go interface providerClient for weather forecasting","qa_terms":"providerClient, interface, context, time, foreca, weather, proxy","token_counts":{"header":19,"core":26,"footer":0,"total":45},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.139407+00:00","v":3}
{"chunk_id":"8984da7d9afee40f00fed09a33dc1eec6761090aea72ee0da573a7a8b76b862b","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":26,"end_line":28,"ast_path":"go:type:mappingsRepository (interface)","text":"import (\n\t\"context\"\n\t\"golang.org/x/sync/singleflight\"\n)\nmappingsRepository interface {\nGet(ctx context.Context, id int) (*Mapping, error)\n}","header_context":"import (\n\t\"context\"\n\t\"golang.org/x/sync/singleflight\"\n)","core":"mappingsRepository interface {\nGet(ctx context.Context, id int) (*Mapping, error)\n}","footer_context":"","symbols_defined":["mappingsRepository"],"symbols_referenced":[],"imports_used":["context","golang.org/x/sync/singleflight"],"neighbors":{"prev":"1a064361ee58357ac28c0f1630ab6fa1da6e8f377a285db47f12d30ccfbe9a7c","next":"eb209eb78c36e98c569d9213c3ba8e47d7bc909c77cc272903454d11d98309b9"},"summary_1l":"Go interface mappingsRepository for weather forecasting","qa_terms":"mappingsRepository, interface, context, foreca, weather, proxy","token_counts":{"header":16,"core":19,"footer":0,"total":35},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.140303+00:00","v":3}
{"chunk_id":"eb209eb78c36e98c569d9213c3ba8e47d7bc909c77cc272903454d11d98309b9","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":30,"end_line":33,"ast_path":"go:type:cacheClient (interface)","text":"import \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\ncacheClient interface {\nGet(key string) (*cache.Item, error)\nSet(key string, value []byte) error\n}","header_context":"import \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"","core":"cacheClient interface {\nGet(key string) (*cache.Item, error)\nSet(key string, value []byte) error\n}","footer_context":"","symbols_defined":["cacheClient"],"symbols_referenced":[],"imports_used":["go.impalastudios.com/weather/foreca_proxy/pkg/cache"],"neighbors":{"prev":"8984da7d9afee40f00fed09a33dc1eec6761090aea72ee0da573a7a8b76b862b","next":"76197c56e23648cfcfa4d8ccb0b5a54ab06fc254a8b5ecaa562029511cca61db"},"summary_1l":"Go interface cacheClient for weather forecasting","qa_terms":"cacheClient, interface, cache, foreca, weather, proxy","token_counts":{"header":16,"core":25,"footer":0,"total":41},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.140400+00:00","v":3}
{"chunk_id":"76197c56e23648cfcfa4d8ccb0b5a54ab06fc254a8b5ecaa562029511cca61db","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":36,"end_line":43,"ast_path":"go:type:Service (struct)","text":"import (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}","header_context":"import (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)","core":"type Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}","footer_context":"","symbols_defined":["Service"],"symbols_referenced":[],"imports_used":["go.impalastudios.com/weather/foreca_proxy/pkg/cache","golang.org/x/sync/singleflight","time"],"neighbors":{"prev":"eb209eb78c36e98c569d9213c3ba8e47d7bc909c77cc272903454d11d98309b9","next":"3eeace8209fcd53a4bf208a73d455b983df48fb0dbb3227b2175428e6ee19443"},"summary_1l":"Go struct Service for weather forecasting","qa_terms":"Service, struct, cache, time, foreca, weather, proxy","token_counts":{"header":31,"core":40,"footer":0,"total":71},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.140555+00:00","v":3}
{"chunk_id":"3eeace8209fcd53a4bf208a73d455b983df48fb0dbb3227b2175428e6ee19443","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":45,"end_line":53,"ast_path":"go:function:","text":"import (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)\nfunc NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}","header_context":"import (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)","core":"func NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}","footer_context":"","symbols_defined":[],"symbols_referenced":[],"imports_used":["go.impalastudios.com/weather/foreca_proxy/pkg/cache","golang.org/x/sync/singleflight","time"],"neighbors":{"prev":"76197c56e23648cfcfa4d8ccb0b5a54ab06fc254a8b5ecaa562029511cca61db","next":"df6341581d14ba20574c00354a26965456f44bf6a3aca9d8f8294be42fff0505"},"summary_1l":"Go function  for weather forecasting","qa_terms":"cache, foreca, proxy, singleflight, weather","token_counts":{"header":31,"core":75,"footer":0,"total":106},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.140714+00:00","v":3}
{"chunk_id":"df6341581d14ba20574c00354a26965456f44bf6a3aca9d8f8294be42fff0505","repo":"","path":".","rel_path":".","language":"go","start_line":55,"end_line":70,"ast_path":"go:method_declaration_part_1","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\nfunc (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"3eeace8209fcd53a4bf208a73d455b983df48fb0dbb3227b2175428e6ee19443","next":"dea10a19721e3e1b09a6fe0c18ece7a249c4a5b0a7b8858901eb3122438b644b"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":149,"footer":0,"total":190},"file_sha":"","created_at":"2025-10-06T14:56:22.141322+00:00","v":3}
{"chunk_id":"dea10a19721e3e1b09a6fe0c18ece7a249c4a5b0a7b8858901eb3122438b644b","repo":"","path":".","rel_path":".","language":"go","start_line":71,"end_line":86,"ast_path":"go:method_declaration_part_2","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"df6341581d14ba20574c00354a26965456f44bf6a3aca9d8f8294be42fff0505","next":"129600bb6a17e8865dbc8c71e9202e0d22829dc20532a9cbe488efa86df1f82f"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":99,"footer":0,"total":140},"file_sha":"","created_at":"2025-10-06T14:56:22.141407+00:00","v":3}
{"chunk_id":"129600bb6a17e8865dbc8c71e9202e0d22829dc20532a9cbe488efa86df1f82f","repo":"","path":".","rel_path":".","language":"go","start_line":87,"end_line":101,"ast_path":"go:method_declaration_part_3","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\n\n\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"\n\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"dea10a19721e3e1b09a6fe0c18ece7a249c4a5b0a7b8858901eb3122438b644b","next":"76410c3516925e27d135485a147457da80af5d6c7671372ce3f879e94e2dae29"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":146,"footer":0,"total":187},"file_sha":"","created_at":"2025-10-06T14:56:22.141502+00:00","v":3}
{"chunk_id":"76410c3516925e27d135485a147457da80af5d6c7671372ce3f879e94e2dae29","repo":"","path":".","rel_path":".","language":"go","start_line":102,"end_line":115,"ast_path":"go:method_declaration_part_4","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"129600bb6a17e8865dbc8c71e9202e0d22829dc20532a9cbe488efa86df1f82f","next":"aecaf1735753f1f836650244cc90b774bbba73da8baefaa7c50325611d57de6e"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":130,"footer":0,"total":171},"file_sha":"","created_at":"2025-10-06T14:56:22.141597+00:00","v":3}
{"chunk_id":"aecaf1735753f1f836650244cc90b774bbba73da8baefaa7c50325611d57de6e","repo":"","path":".","rel_path":".","language":"go","start_line":116,"end_line":127,"ast_path":"go:method_declaration_part_5","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"76410c3516925e27d135485a147457da80af5d6c7671372ce3f879e94e2dae29","next":"5b057bdb20af01c8623e26c212a16ba81ac657e3526c94febf59d15583d37d6e"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":75,"footer":0,"total":116},"file_sha":"","created_at":"2025-10-06T14:56:22.141668+00:00","v":3}
{"chunk_id":"5b057bdb20af01c8623e26c212a16ba81ac657e3526c94febf59d15583d37d6e","repo":"","path":".","rel_path":".","language":"go","start_line":128,"end_line":146,"ast_path":"go:method_declaration_part_6","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"aecaf1735753f1f836650244cc90b774bbba73da8baefaa7c50325611d57de6e","next":"0edc91a279a9e80522587b4cce4f1bcaa7ee463f4cb5c145bb7e1dbed2597ed7"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":140,"footer":0,"total":181},"file_sha":"","created_at":"2025-10-06T14:56:22.141767+00:00","v":3}
{"chunk_id":"0edc91a279a9e80522587b4cce4f1bcaa7ee463f4cb5c145bb7e1dbed2597ed7","repo":"","path":".","rel_path":".","language":"go","start_line":147,"end_line":159,"ast_path":"go:method_declaration_part_7","text":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service\n\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}","header_context":"import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/otel\"\n)\n// receiver: s *Service","core":"\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}","footer_context":"","symbols_defined":["GetForecastForLocation"],"symbols_referenced":[],"imports_used":[],"neighbors":{"prev":"5b057bdb20af01c8623e26c212a16ba81ac657e3526c94febf59d15583d37d6e","next":"ec73a61989d65248ed9f6867a3784894dfc01b95a39d27528325ec292c52bc62"},"summary_1l":"Go method GetForecastForLocation on s *Service","qa_terms":"GetForecastForLocation, s Service","token_counts":{"header":41,"core":79,"footer":0,"total":120},"file_sha":"","created_at":"2025-10-06T14:56:22.141834+00:00","v":3}
{"chunk_id":"ec73a61989d65248ed9f6867a3784894dfc01b95a39d27528325ec292c52bc62","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":161,"end_line":163,"ast_path":"go:method:(s *Service).getCacheKeyForLocation","text":"import (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n)\n// receiver: s *Service\nfunc (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}","header_context":"import (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n)\n// receiver: s *Service","core":"func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}","footer_context":"","symbols_defined":["getCacheKeyForLocation"],"symbols_referenced":[],"imports_used":["fmt","go.impalastudios.com/weather/foreca_proxy/pkg/cache","golang.org/x/sync/singleflight","strings"],"neighbors":{"prev":"0edc91a279a9e80522587b4cce4f1bcaa7ee463f4cb5c145bb7e1dbed2597ed7","next":"10f12957025fd21ab5336963d0f557d84bf69a052ff2c321a0ea582d2eab391b"},"summary_1l":"Go method getCacheKeyForLocation on s *Service for weather forecasting","qa_terms":"cache, foreca, getCacheKeyForLocation, proxy, s Service, singleflight, weather","token_counts":{"header":40,"core":36,"footer":0,"total":76},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.142029+00:00","v":3}
{"chunk_id":"10f12957025fd21ab5336963d0f557d84bf69a052ff2c321a0ea582d2eab391b","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":165,"end_line":167,"ast_path":"go:method:(s *Service).getSingleFlightKey","text":"import (\n\t\"fmt\"\n\t\"golang.org/x/sync/singleflight\"\n)\n// receiver: s *Service\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}","header_context":"import (\n\t\"fmt\"\n\t\"golang.org/x/sync/singleflight\"\n)\n// receiver: s *Service","core":"func (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}","footer_context":"","symbols_defined":["getSingleFlightKey"],"symbols_referenced":[],"imports_used":["fmt","golang.org/x/sync/singleflight"],"neighbors":{"prev":"ec73a61989d65248ed9f6867a3784894dfc01b95a39d27528325ec292c52bc62","next":"b0718fac690e4fd1666c63cd9b81c790cea703b43b0fc50ac296e26a7f95a508"},"summary_1l":"Go method getSingleFlightKey on s *Service for weather forecasting","qa_terms":"foreca, getSingleFlightKey, proxy, s Service, singleflight, weather","token_counts":{"header":22,"core":32,"footer":0,"total":54},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.142114+00:00","v":3}
{"chunk_id":"b0718fac690e4fd1666c63cd9b81c790cea703b43b0fc50ac296e26a7f95a508","repo":"foreca","path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","rel_path":"Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go","language":"go","start_line":169,"end_line":172,"ast_path":"go:type:expirableCacheItem (struct)","text":"import (\n\t\"encoding/json\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n)\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}","header_context":"import (\n\t\"encoding/json\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n)","core":"type expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}","footer_context":"","symbols_defined":["expirableCacheItem"],"symbols_referenced":[],"imports_used":["encoding/json","go.impalastudios.com/weather/foreca_proxy/pkg/cache","golang.org/x/sync/singleflight"],"neighbors":{"prev":"10f12957025fd21ab5336963d0f557d84bf69a052ff2c321a0ea582d2eab391b","next":null},"summary_1l":"Go struct expirableCacheItem for weather forecasting","qa_terms":"expirableCacheItem, struct, cache, foreca, weather, proxy","token_counts":{"header":32,"core":30,"footer":0,"total":62},"file_sha":"ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31","created_at":"2025-10-06T14:56:22.142206+00:00","v":3}
