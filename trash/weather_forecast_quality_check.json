[
  {
    "chunk_id": "61c0fba6bb9a5d00adfb7d612a257f60aee44abba5dc2da6a43a9ef23a12f20f",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/CHANGELOG.md",
    "language": "markdown",
    "start_line": 1,
    "end_line": 38,
    "ast_path": "block_1",
    "text": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [1.0.6] - 2024-01-25\n### Added\n- Unit tests for utilities\n\n## [1.0.5] - 2024-01-25\n### Added\n- Unit tests for foreca_service\n\n## [1.0.4] - 2024-01-25\n### Added\n- Unit tests for foreca_client\n- Makefile command to run unit tests\n\n## [1.0.3] - 2023-03-16\n### Changed\n- Min and Max values for min temperatures use positive and negative infinity\n- Bumps up failing 1.18 golang image static check to 1.19\n\n## [1.0.2] - 2022-12-20\n### Fixed\n- Possible panic in Service client when Foreca API returns an error.\n\n## [1.0.1] - 2022-12-19\n### Fixed\n- Missing `AWS_DEFAULT_REGION` env variable in service CloudFormation template.\n\n## [1.0.0] - 2022-12-09\n### Added\n- Initial Foreca proxy service implementation.",
    "header_context": "",
    "core": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [1.0.6] - 2024-01-25\n### Added\n- Unit tests for utilities\n\n## [1.0.5] - 2024-01-25\n### Added\n- Unit tests for foreca_service\n\n## [1.0.4] - 2024-01-25\n### Added\n- Unit tests for foreca_client\n- Makefile command to run unit tests\n\n## [1.0.3] - 2023-03-16\n### Changed\n- Min and Max values for min temperatures use positive and negative infinity\n- Bumps up failing 1.18 golang image static check to 1.19\n\n## [1.0.2] - 2022-12-20\n### Fixed\n- Possible panic in Service client when Foreca API returns an error.\n\n## [1.0.1] - 2022-12-19\n### Fixed\n- Missing `AWS_DEFAULT_REGION` env variable in service CloudFormation template.\n\n## [1.0.0] - 2022-12-09\n### Added\n- Initial Foreca proxy service implementation.",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Markdown code block with 38 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 146,
      "footer": 0,
      "total": 146
    },
    "file_sha": "8833acf693c9af9c6cd5357f9a856738b7127e39639aa641a32e1b932a9797a0",
    "created_at": "2025-10-07T09:26:56.885999+00:00",
    "v": 3
  },
  {
    "chunk_id": "a508caa4c11121366331852d49f46ab029e8d89f1aa609fc368bfe6a5b635f12",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/README.md",
    "language": "markdown",
    "start_line": 1,
    "end_line": 30,
    "ast_path": "block_1",
    "text": "# [Weather] Foreca Proxy\n\n## Objectives\n\nWIP\n\n## Environment Variables\n\nWIP\n\n## Running Local Environment\n\nWIP\n\n## Running Unit Tests\n\nWIP\n\n## Where Can I Find More Information About the Project?\n\nWIP\n\n## Who May I Talk To?\n\nWIP\n\n## Resources\n\n- [AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) - anything missing in SAM specification can be found here.\n- [LocalStack](https://docs.localstack.cloud/overview/) - for more information about local environment.",
    "header_context": "",
    "core": "# [Weather] Foreca Proxy\n\n## Objectives\n\nWIP\n\n## Environment Variables\n\nWIP\n\n## Running Local Environment\n\nWIP\n\n## Running Unit Tests\n\nWIP\n\n## Where Can I Find More Information About the Project?\n\nWIP\n\n## Who May I Talk To?\n\nWIP\n\n## Resources\n\n- [AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) - anything missing in SAM specification can be found here.\n- [LocalStack](https://docs.localstack.cloud/overview/) - for more information about local environment.",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Markdown code block with 30 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 63,
      "footer": 0,
      "total": 63
    },
    "file_sha": "cf0385ae4dee6d3ded3df4bcd82142adf8eff6a73c7f1d39096c0fb952592d73",
    "created_at": "2025-10-07T09:26:56.887265+00:00",
    "v": 3
  },
  {
    "chunk_id": "ec4abcd14035b73126fdf629a6a084c8065de520f7deb79031063743ceb91bfd",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 50,
    "ast_path": "block_1",
    "text": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: CloudFormation template to create the Foreca proxy service.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: General Configuration\n        Parameters:\n          - Version\n      - Label:\n          default: Network Configuration\n        Parameters:\n          - VpcId\n          - VpcCidr\n          - Subnets\n      - Label:\n          default: ECS Cluster Configuration\n        Parameters:\n          - EcsClusterName\n          - EcsCapacityProviderName\n          - EcsEc2SecurityGroupIdParameterName\n      - Label:\n          default: Service Discovery Configuration\n        Parameters:\n          - PrivateDnsNamespaceId\n      - Label:\n          default: Service Configuration\n        Parameters:\n          - ImageTag\n          - GrpcLaunchType\n          - GrpcDesiredCount\n      - Label:\n          default: Mappings Table Configuration\n        Parameters:\n          - MappingsTableBillingMode\n          - MappingsTableProvisionedMinReadCapacityUnits\n          - MappingsTableProvisionedMaxReadCapacityUnits\n          - MappingsTableProvisionedMinReadCapacityUnitsPeakTime\n          - MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\n          - MappingsTableImportCompressionType\n          - MappingsTableImportFormat\n          - MappingsTableImportImportBucketName\n          - MappingsTableImportImportBucketFolder\n      - Label:\n          default: ElastiCache Cluster Configuration\n        Parameters:\n          - ElastiCacheNodeType\n          - ElastiCacheNodes\n    ParameterLabels:",
    "header_context": "",
    "core": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: CloudFormation template to create the Foreca proxy service.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: General Configuration\n        Parameters:\n          - Version\n      - Label:\n          default: Network Configuration\n        Parameters:\n          - VpcId\n          - VpcCidr\n          - Subnets\n      - Label:\n          default: ECS Cluster Configuration\n        Parameters:\n          - EcsClusterName\n          - EcsCapacityProviderName\n          - EcsEc2SecurityGroupIdParameterName\n      - Label:\n          default: Service Discovery Configuration\n        Parameters:\n          - PrivateDnsNamespaceId\n      - Label:\n          default: Service Configuration\n        Parameters:\n          - ImageTag\n          - GrpcLaunchType\n          - GrpcDesiredCount\n      - Label:\n          default: Mappings Table Configuration\n        Parameters:\n          - MappingsTableBillingMode\n          - MappingsTableProvisionedMinReadCapacityUnits\n          - MappingsTableProvisionedMaxReadCapacityUnits\n          - MappingsTableProvisionedMinReadCapacityUnitsPeakTime\n          - MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\n          - MappingsTableImportCompressionType\n          - MappingsTableImportFormat\n          - MappingsTableImportImportBucketName\n          - MappingsTableImportImportBucketFolder\n      - Label:\n          default: ElastiCache Cluster Configuration\n        Parameters:\n          - ElastiCacheNodeType\n          - ElastiCacheNodes\n    ParameterLabels:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 105,
      "footer": 0,
      "total": 105
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.885310+00:00",
    "v": 3
  },
  {
    "chunk_id": "4fa9cc9cbd08f064e6f2463c773e48bd32863946db7df4137736f8872c9620e8",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 51,
    "end_line": 100,
    "ast_path": "block_2",
    "text": "      Version:\n        default: Version\n      VpcId:\n        default: VPC ID\n      VpcCidr:\n        default: VPC CIDR\n      Subnets:\n        default: Subnets\n      ImageTag:\n        default: Docker Image Tag\n      GrpcLaunchType:\n        default: gRPC Launch Type\n      GrpcDesiredCount:\n        default: gRPC Desired Instances Count\n      ServiceAutoScalingStrategy:\n        default: Auto Scaling Strategy\n      EcsClusterName:\n        default: Cluster\n      EcsCapacityProviderName:\n        default: Capacity Provider Name\n      EcsEc2SecurityGroupIdParameterName:\n        default: Capacity Provider Security Group ID Parameter\n      PrivateDnsNamespaceId:\n        default: Private DNS Namespace ID\n      MappingsTableBillingMode:\n        default: Billing Mode\n      MappingsTableProvisionedMinReadCapacityUnits:\n        default: Provisioned Minimum Read Capacity Units\n      MappingsTableProvisionedMaxReadCapacityUnits:\n        default: Provisioned Maximum Read Capacity Units\n      MappingsTableProvisionedMinReadCapacityUnitsPeakTime:\n        default: Provisioned Minimum Read Capacity Units\n      MappingsTableProvisionedMaxReadCapacityUnitsPeakTime:\n        default: Provisioned Maximum Read Capacity Units\n      MappingsTableImportCompressionType:\n        default: Input Compression Type\n      MappingsTableImportFormat:\n        default: Input Format\n      MappingsTableImportImportBucketName:\n        default: Input Bucket Name\n      MappingsTableImportImportBucketFolder:\n        default: Input Bucket Folder\n      ElastiCacheNodeType:\n        default: Node Type\n      ElastiCacheNodes:\n        default: Nodes Count\n\nParameters:\n  Version:\n    Type: Number",
    "header_context": "",
    "core": "      Version:\n        default: Version\n      VpcId:\n        default: VPC ID\n      VpcCidr:\n        default: VPC CIDR\n      Subnets:\n        default: Subnets\n      ImageTag:\n        default: Docker Image Tag\n      GrpcLaunchType:\n        default: gRPC Launch Type\n      GrpcDesiredCount:\n        default: gRPC Desired Instances Count\n      ServiceAutoScalingStrategy:\n        default: Auto Scaling Strategy\n      EcsClusterName:\n        default: Cluster\n      EcsCapacityProviderName:\n        default: Capacity Provider Name\n      EcsEc2SecurityGroupIdParameterName:\n        default: Capacity Provider Security Group ID Parameter\n      PrivateDnsNamespaceId:\n        default: Private DNS Namespace ID\n      MappingsTableBillingMode:\n        default: Billing Mode\n      MappingsTableProvisionedMinReadCapacityUnits:\n        default: Provisioned Minimum Read Capacity Units\n      MappingsTableProvisionedMaxReadCapacityUnits:\n        default: Provisioned Maximum Read Capacity Units\n      MappingsTableProvisionedMinReadCapacityUnitsPeakTime:\n        default: Provisioned Minimum Read Capacity Units\n      MappingsTableProvisionedMaxReadCapacityUnitsPeakTime:\n        default: Provisioned Maximum Read Capacity Units\n      MappingsTableImportCompressionType:\n        default: Input Compression Type\n      MappingsTableImportFormat:\n        default: Input Format\n      MappingsTableImportImportBucketName:\n        default: Input Bucket Name\n      MappingsTableImportImportBucketFolder:\n        default: Input Bucket Folder\n      ElastiCacheNodeType:\n        default: Node Type\n      ElastiCacheNodes:\n        default: Nodes Count\n\nParameters:\n  Version:\n    Type: Number",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 120,
      "footer": 0,
      "total": 120
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.885763+00:00",
    "v": 3
  },
  {
    "chunk_id": "bfd11bd68582708c71af0680db3230bd9c8a0ea72aa0d2f84082613c25229620",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 101,
    "end_line": 150,
    "ast_path": "block_3",
    "text": "    Default: 0\n    Description: The version of the service. Version 0 is default.\n    MinValue: 0\n    ConstraintDescription: It must be a non negative integer.\n\n  VpcId:\n    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>\n    Description: The ID of the VPC you want to deploy the service into.\n    Default: /platform/network/v0/vpcs/default/id\n\n  VpcCidr:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The CIDR of the VPC.\n    Default: /platform/network/v0/vpcs/default/cidr\n\n  Subnets:\n    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>\n    Description: Subnet IDs for high availability.\n    Default: /platform/network/v0/vpcs/default/subnets/public/ids\n\n  EcsClusterName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The name of the ECS cluster the service will be deployed into.\n    Default: /weather/platform/v0/ecs/cluster/name\n\n  EcsCapacityProviderName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The ECS capacity provider name to be used to deploy the service.\n\n  EcsEc2SecurityGroupIdParameterName:\n    Type: String\n    Default: ''\n    Description: The security group ID of the EC2 container instance to allow traffic to OpenSearch domain.\n    AllowedPattern: ^|^/weather/platform/v[0-9]+/ecs/.*$\n\n  ImageTag:\n    Type: String\n    Description: The Docker image tag to launch.\n\n  GrpcLaunchType:\n    Type: String\n    Default: FARGATE\n    Description: The launch type on which to run your service.\n    AllowedValues:\n      - EC2\n      - FARGATE\n\n  GrpcDesiredCount:\n    Type: Number\n    Description: The number of instantiations of the specified task definition to place and keep running on your cluster.",
    "header_context": "",
    "core": "    Default: 0\n    Description: The version of the service. Version 0 is default.\n    MinValue: 0\n    ConstraintDescription: It must be a non negative integer.\n\n  VpcId:\n    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>\n    Description: The ID of the VPC you want to deploy the service into.\n    Default: /platform/network/v0/vpcs/default/id\n\n  VpcCidr:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The CIDR of the VPC.\n    Default: /platform/network/v0/vpcs/default/cidr\n\n  Subnets:\n    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>\n    Description: Subnet IDs for high availability.\n    Default: /platform/network/v0/vpcs/default/subnets/public/ids\n\n  EcsClusterName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The name of the ECS cluster the service will be deployed into.\n    Default: /weather/platform/v0/ecs/cluster/name\n\n  EcsCapacityProviderName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The ECS capacity provider name to be used to deploy the service.\n\n  EcsEc2SecurityGroupIdParameterName:\n    Type: String\n    Default: ''\n    Description: The security group ID of the EC2 container instance to allow traffic to OpenSearch domain.\n    AllowedPattern: ^|^/weather/platform/v[0-9]+/ecs/.*$\n\n  ImageTag:\n    Type: String\n    Description: The Docker image tag to launch.\n\n  GrpcLaunchType:\n    Type: String\n    Default: FARGATE\n    Description: The launch type on which to run your service.\n    AllowedValues:\n      - EC2\n      - FARGATE\n\n  GrpcDesiredCount:\n    Type: Number\n    Description: The number of instantiations of the specified task definition to place and keep running on your cluster.",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 170,
      "footer": 0,
      "total": 170
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.885844+00:00",
    "v": 3
  },
  {
    "chunk_id": "0b6e5cd6340e7ea7176c42c26bf53fbb43b67656673aad7846545341c8cf09fa",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 151,
    "end_line": 200,
    "ast_path": "block_4",
    "text": "    Default: 1\n\n  ServiceAutoScalingStrategy:\n    Type: String\n    Default: NONE\n    Description: |\n      The auto-scaling strategy to apply to the service.\n      Use NONE if you don't want to apply any aut-scaling strategy.\n      Use WORKDAYS if you want to run the service only during working days.\n      Use RESOURCES_CONSUMPTION if you want to scale the service based on CPU and memory consumption.\n    AllowedValues:\n      - NONE\n      - WORKDAYS\n      - RESOURCES_CONSUMPTION\n\n  PrivateDnsNamespaceId:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The ID of the namespace that was used to create the service.\n    Default: /platform/private_namespaces/v0/default/id\n\n  MappingsTableBillingMode:\n    Type: String\n    Default: PAY_PER_REQUEST\n    AllowedValues:\n      - PAY_PER_REQUEST\n      - PROVISIONED\n    Description: Specify how you are charged for read and write throughput and how you manage capacity.\n\n  MappingsTableProvisionedMinReadCapacityUnits:\n    Type: Number\n    Default: 5\n    MinValue: 5\n    Description: The minimum number of strongly consistent reads consumed per second to provision the mapping table with.\n\n  MappingsTableProvisionedMaxReadCapacityUnits:\n    Type: Number\n    Default: 10\n    MinValue: 10\n    Description: The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.\n\n  MappingsTableProvisionedMinReadCapacityUnitsPeakTime:\n    Type: Number\n    Default: 50\n    Description: \"Min Read capacity units during peak time for DynamoDB table.\"\n\n  MappingsTableProvisionedMaxReadCapacityUnitsPeakTime:\n    Type: Number\n    Default: 100\n    Description: \"Max Read capacity units during peak time for DynamoDB table.\"\n",
    "header_context": "",
    "core": "    Default: 1\n\n  ServiceAutoScalingStrategy:\n    Type: String\n    Default: NONE\n    Description: |\n      The auto-scaling strategy to apply to the service.\n      Use NONE if you don't want to apply any aut-scaling strategy.\n      Use WORKDAYS if you want to run the service only during working days.\n      Use RESOURCES_CONSUMPTION if you want to scale the service based on CPU and memory consumption.\n    AllowedValues:\n      - NONE\n      - WORKDAYS\n      - RESOURCES_CONSUMPTION\n\n  PrivateDnsNamespaceId:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The ID of the namespace that was used to create the service.\n    Default: /platform/private_namespaces/v0/default/id\n\n  MappingsTableBillingMode:\n    Type: String\n    Default: PAY_PER_REQUEST\n    AllowedValues:\n      - PAY_PER_REQUEST\n      - PROVISIONED\n    Description: Specify how you are charged for read and write throughput and how you manage capacity.\n\n  MappingsTableProvisionedMinReadCapacityUnits:\n    Type: Number\n    Default: 5\n    MinValue: 5\n    Description: The minimum number of strongly consistent reads consumed per second to provision the mapping table with.\n\n  MappingsTableProvisionedMaxReadCapacityUnits:\n    Type: Number\n    Default: 10\n    MinValue: 10\n    Description: The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.\n\n  MappingsTableProvisionedMinReadCapacityUnitsPeakTime:\n    Type: Number\n    Default: 50\n    Description: \"Min Read capacity units during peak time for DynamoDB table.\"\n\n  MappingsTableProvisionedMaxReadCapacityUnitsPeakTime:\n    Type: Number\n    Default: 100\n    Description: \"Max Read capacity units during peak time for DynamoDB table.\"\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 186,
      "footer": 0,
      "total": 186
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.885915+00:00",
    "v": 3
  },
  {
    "chunk_id": "59a3823e1267906d57dc77aa337bb2290727b428eafb4dfd2293c391a4c1346b",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 201,
    "end_line": 250,
    "ast_path": "block_5",
    "text": "  MappingsTableImportCompressionType:\n    Type: String\n    Default: NONE\n    Description: The type of compression to be used on the input coming from the imported table.\n    AllowedValues:\n      - NONE\n      - GZIP\n      - ZSTD\n\n  MappingsTableImportFormat:\n    Type: String\n    Default: DYNAMODB_JSON\n    Description: The format of the source data.\n    AllowedValues:\n      - DYNAMODB_JSON\n\n  MappingsTableImportImportBucketName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Default: /weather/platform/v0/loading_bucket/name\n    Description: The S3 bucket that is being imported from.\n\n  MappingsTableImportImportBucketFolder:\n    Type: String\n    Default: foreca-proxy/v0/dynamodb/mappings/\n    Description: The folder where all S3 Objects that are being imported are located.\n\n  ElastiCacheNodeType:\n    Type: String\n    Default: cache.t2.small\n    Description: The compute and memory capacity of the nodes in the node group (shard).\n    AllowedValues:\n      - cache.t2.micro\n      - cache.t2.small\n      - cache.t2.medium\n      - cache.t3.micro\n      - cache.t3.small\n      - cache.t3.medium\n      - cache.t3.micro\n      - cache.c1.xlarge\n      - cache.r5.large\n      - cache.r5.xlarge\n      - cache.r5.2xlarge\n      - cache.r5.4xlarge\n      - cache.r5.12xlarge\n      - cache.r5.24xlarge\n      - cache.t4g.micro\n      - cache.t4g.small\n      - cache.t4g.medium\n      - cache.r6g.large\n      - cache.r6g.xlarge",
    "header_context": "",
    "core": "  MappingsTableImportCompressionType:\n    Type: String\n    Default: NONE\n    Description: The type of compression to be used on the input coming from the imported table.\n    AllowedValues:\n      - NONE\n      - GZIP\n      - ZSTD\n\n  MappingsTableImportFormat:\n    Type: String\n    Default: DYNAMODB_JSON\n    Description: The format of the source data.\n    AllowedValues:\n      - DYNAMODB_JSON\n\n  MappingsTableImportImportBucketName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Default: /weather/platform/v0/loading_bucket/name\n    Description: The S3 bucket that is being imported from.\n\n  MappingsTableImportImportBucketFolder:\n    Type: String\n    Default: foreca-proxy/v0/dynamodb/mappings/\n    Description: The folder where all S3 Objects that are being imported are located.\n\n  ElastiCacheNodeType:\n    Type: String\n    Default: cache.t2.small\n    Description: The compute and memory capacity of the nodes in the node group (shard).\n    AllowedValues:\n      - cache.t2.micro\n      - cache.t2.small\n      - cache.t2.medium\n      - cache.t3.micro\n      - cache.t3.small\n      - cache.t3.medium\n      - cache.t3.micro\n      - cache.c1.xlarge\n      - cache.r5.large\n      - cache.r5.xlarge\n      - cache.r5.2xlarge\n      - cache.r5.4xlarge\n      - cache.r5.12xlarge\n      - cache.r5.24xlarge\n      - cache.t4g.micro\n      - cache.t4g.small\n      - cache.t4g.medium\n      - cache.r6g.large\n      - cache.r6g.xlarge",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 133,
      "footer": 0,
      "total": 133
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.885974+00:00",
    "v": 3
  },
  {
    "chunk_id": "21be8359aeaca054d39ccd42683767fdeb092bfa72a3b2e6ddb524bf940ff734",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 251,
    "end_line": 300,
    "ast_path": "block_6",
    "text": "      - cache.r6g.2xlarge\n      - cache.r6g.4xlarge\n      - cache.r6g.12xlarge\n      - cache.r6g.16xlarge\n\n  ElastiCacheNodes:\n    Type: Number\n    Description: The number of cache nodes that the cache cluster should have.\n    Default: 1\n    AllowedValues:\n      - 1\n      - 2\n      - 3\n      - 4\n      - 5\n      - 6\n\nConditions:\n  IsGrpcFargateType: !Equals [ !Ref GrpcLaunchType, FARGATE ]\n  IsMappingsTableBillingModeProvisioned: !Equals [ !Ref MappingsTableBillingMode, PROVISIONED ]\n  HasEcsEc2SecurityGroupParameter: !Not [ !Equals [ !Ref EcsEc2SecurityGroupIdParameterName, '' ] ]\n  ShouldEnableServiceAutoScaling: !Not [ !Equals [ !Ref ServiceAutoScalingStrategy, NONE ] ]\n  IsServiceAutoScalingWorkdays: !Equals [ !Ref ServiceAutoScalingStrategy, WORKDAYS ]\n  IsServiceAutoScalingResourcesConsumption: !Equals [ !Ref ServiceAutoScalingStrategy, RESOURCES_CONSUMPTION ]\n  ShouldEnablePeakTimeReadCapacityUnit: !Not [!Equals [ !Ref MappingsTableProvisionedMinReadCapacityUnitsPeakTime, 0 ]]\n\nResources:\n  Application:\n    Type: AWS::ServiceCatalogAppRegistry::Application\n    Properties:\n      Name: !Sub 'WeatherDomain-ForecaProxyService-V${Version}'\n      Tags:\n        Domain: weather\n        Service: foreca_proxy\n        Version: !Ref Version\n        AppManagerCFNStackKey: !Ref AWS::StackName\n\n  MappingsTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: N\n      BillingMode: !Ref MappingsTableBillingMode\n      ProvisionedThroughput: !If\n        - IsMappingsTableBillingModeProvisioned\n        - ReadCapacityUnits: !Ref MappingsTableProvisionedMinReadCapacityUnits",
    "header_context": "",
    "core": "      - cache.r6g.2xlarge\n      - cache.r6g.4xlarge\n      - cache.r6g.12xlarge\n      - cache.r6g.16xlarge\n\n  ElastiCacheNodes:\n    Type: Number\n    Description: The number of cache nodes that the cache cluster should have.\n    Default: 1\n    AllowedValues:\n      - 1\n      - 2\n      - 3\n      - 4\n      - 5\n      - 6\n\nConditions:\n  IsGrpcFargateType: !Equals [ !Ref GrpcLaunchType, FARGATE ]\n  IsMappingsTableBillingModeProvisioned: !Equals [ !Ref MappingsTableBillingMode, PROVISIONED ]\n  HasEcsEc2SecurityGroupParameter: !Not [ !Equals [ !Ref EcsEc2SecurityGroupIdParameterName, '' ] ]\n  ShouldEnableServiceAutoScaling: !Not [ !Equals [ !Ref ServiceAutoScalingStrategy, NONE ] ]\n  IsServiceAutoScalingWorkdays: !Equals [ !Ref ServiceAutoScalingStrategy, WORKDAYS ]\n  IsServiceAutoScalingResourcesConsumption: !Equals [ !Ref ServiceAutoScalingStrategy, RESOURCES_CONSUMPTION ]\n  ShouldEnablePeakTimeReadCapacityUnit: !Not [!Equals [ !Ref MappingsTableProvisionedMinReadCapacityUnitsPeakTime, 0 ]]\n\nResources:\n  Application:\n    Type: AWS::ServiceCatalogAppRegistry::Application\n    Properties:\n      Name: !Sub 'WeatherDomain-ForecaProxyService-V${Version}'\n      Tags:\n        Domain: weather\n        Service: foreca_proxy\n        Version: !Ref Version\n        AppManagerCFNStackKey: !Ref AWS::StackName\n\n  MappingsTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: N\n      BillingMode: !Ref MappingsTableBillingMode\n      ProvisionedThroughput: !If\n        - IsMappingsTableBillingModeProvisioned\n        - ReadCapacityUnits: !Ref MappingsTableProvisionedMinReadCapacityUnits",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 141,
      "footer": 0,
      "total": 141
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886082+00:00",
    "v": 3
  },
  {
    "chunk_id": "7069e040dd3b0c9a39e1c250dda807f13ec20f9efd4b16a8c6454de55a76389a",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 301,
    "end_line": 350,
    "ast_path": "block_7",
    "text": "          WriteCapacityUnits: 5\n        - !Ref AWS::NoValue\n      ImportSourceSpecification:\n        InputCompressionType: !Ref MappingsTableImportCompressionType\n        InputFormat: !Ref MappingsTableImportFormat\n        S3BucketSource:\n          S3Bucket: !Ref MappingsTableImportImportBucketName\n          S3KeyPrefix: !Ref MappingsTableImportImportBucketFolder\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Version\n          Value: !Ref Version\n        - Key: Service\n          Value: foreca_proxy\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  MappingsTableAutoScalingRole:\n    Type: AWS::IAM::Role\n    Condition: IsMappingsTableBillingModeProvisioned\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - dynamodb.application-autoscaling.amazonaws.com\n                - application-autoscaling.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: UpdateTablePolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:DescribeTable\n                  - dynamodb:UpdateTable\n                Resource: !GetAtt MappingsTable.Arn\n        - PolicyName: CloudWatchPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - cloudwatch:DescribeAlarms\n                  - cloudwatch:GetMetricStatistics",
    "header_context": "",
    "core": "          WriteCapacityUnits: 5\n        - !Ref AWS::NoValue\n      ImportSourceSpecification:\n        InputCompressionType: !Ref MappingsTableImportCompressionType\n        InputFormat: !Ref MappingsTableImportFormat\n        S3BucketSource:\n          S3Bucket: !Ref MappingsTableImportImportBucketName\n          S3KeyPrefix: !Ref MappingsTableImportImportBucketFolder\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Version\n          Value: !Ref Version\n        - Key: Service\n          Value: foreca_proxy\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  MappingsTableAutoScalingRole:\n    Type: AWS::IAM::Role\n    Condition: IsMappingsTableBillingModeProvisioned\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - dynamodb.application-autoscaling.amazonaws.com\n                - application-autoscaling.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: UpdateTablePolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:DescribeTable\n                  - dynamodb:UpdateTable\n                Resource: !GetAtt MappingsTable.Arn\n        - PolicyName: CloudWatchPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - cloudwatch:DescribeAlarms\n                  - cloudwatch:GetMetricStatistics",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 102,
      "footer": 0,
      "total": 102
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886173+00:00",
    "v": 3
  },
  {
    "chunk_id": "3efbe6a8b88026b780a004ff4202e7b28378079296ad3eaed7545ba60e2d78df",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 351,
    "end_line": 400,
    "ast_path": "block_8",
    "text": "                  - cloudwatch:DeleteAlarms\n                  - cloudwatch:PutMetricAlarm\n                Resource: '*'\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  MappingsAutoScalingScalableRcuTarget:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Condition: IsMappingsTableBillingModeProvisioned\n    Properties:\n      RoleARN: !GetAtt MappingsTableAutoScalingRole.Arn\n      ServiceNamespace: dynamodb\n      ScalableDimension: dynamodb:table:ReadCapacityUnits\n      MaxCapacity: !Ref MappingsTableProvisionedMaxReadCapacityUnits\n      MinCapacity: !Ref MappingsTableProvisionedMinReadCapacityUnits\n      ResourceId: !Sub \"table/${MappingsTable}\"\n      ScheduledActions:\n        - !If \n          - ShouldEnablePeakTimeReadCapacityUnit\n          - Schedule: \"cron(57 * * * ? *)\" # 3 minutes before the hour, every hour\n            ScheduledActionName: ScaleUpDuringPeakTime\n            ScalableTargetAction:\n              MinCapacity: !Ref MappingsTableProvisionedMinReadCapacityUnitsPeakTime\n              MaxCapacity: !Ref MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\n          - !Ref AWS::NoValue\n        - !If\n          - ShouldEnablePeakTimeReadCapacityUnit\n          - Schedule: \"cron(15 * * * ? *)\" # 15 minutes after the hour, every hour\n            ScheduledActionName: ScaleDownAfterPeakTime\n            ScalableTargetAction:\n              MinCapacity: !Ref MappingsTableProvisionedMinReadCapacityUnits\n              MaxCapacity: !Ref MappingsTableProvisionedMaxReadCapacityUnits\n          - !Ref AWS::NoValue\n\n  MappingsAutoScalingTargetPolicyRcu80:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Condition: IsMappingsTableBillingModeProvisioned\n    Properties:\n      PolicyName: !Sub 'weather-foreca-proxy-v${Version}-dynamodb-rcu-90'\n      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref MappingsAutoScalingScalableRcuTarget",
    "header_context": "",
    "core": "                  - cloudwatch:DeleteAlarms\n                  - cloudwatch:PutMetricAlarm\n                Resource: '*'\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  MappingsAutoScalingScalableRcuTarget:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Condition: IsMappingsTableBillingModeProvisioned\n    Properties:\n      RoleARN: !GetAtt MappingsTableAutoScalingRole.Arn\n      ServiceNamespace: dynamodb\n      ScalableDimension: dynamodb:table:ReadCapacityUnits\n      MaxCapacity: !Ref MappingsTableProvisionedMaxReadCapacityUnits\n      MinCapacity: !Ref MappingsTableProvisionedMinReadCapacityUnits\n      ResourceId: !Sub \"table/${MappingsTable}\"\n      ScheduledActions:\n        - !If \n          - ShouldEnablePeakTimeReadCapacityUnit\n          - Schedule: \"cron(57 * * * ? *)\" # 3 minutes before the hour, every hour\n            ScheduledActionName: ScaleUpDuringPeakTime\n            ScalableTargetAction:\n              MinCapacity: !Ref MappingsTableProvisionedMinReadCapacityUnitsPeakTime\n              MaxCapacity: !Ref MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\n          - !Ref AWS::NoValue\n        - !If\n          - ShouldEnablePeakTimeReadCapacityUnit\n          - Schedule: \"cron(15 * * * ? *)\" # 15 minutes after the hour, every hour\n            ScheduledActionName: ScaleDownAfterPeakTime\n            ScalableTargetAction:\n              MinCapacity: !Ref MappingsTableProvisionedMinReadCapacityUnits\n              MaxCapacity: !Ref MappingsTableProvisionedMaxReadCapacityUnits\n          - !Ref AWS::NoValue\n\n  MappingsAutoScalingTargetPolicyRcu80:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Condition: IsMappingsTableBillingModeProvisioned\n    Properties:\n      PolicyName: !Sub 'weather-foreca-proxy-v${Version}-dynamodb-rcu-90'\n      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref MappingsAutoScalingScalableRcuTarget",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 137,
      "footer": 0,
      "total": 137
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886277+00:00",
    "v": 3
  },
  {
    "chunk_id": "f03c40d1f41b75723edbda1ad1df5624745e7e6bfda979153e5c8b19f31b550b",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 401,
    "end_line": 450,
    "ast_path": "block_9",
    "text": "      TargetTrackingScalingPolicyConfiguration:\n        TargetValue: 90.0\n        ScaleInCooldown: 60\n        ScaleOutCooldown: 60\n        PredefinedMetricSpecification:\n          PredefinedMetricType: DynamoDBReadCapacityUtilization\n  \n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Condition: IsGrpcFargateType\n    Properties:\n      VpcId: !Ref VpcId\n      GroupDescription: Allow traffic to weather Foreca proxy service.\n      SecurityGroupIngress:\n        - Description: Ingress from within the same VPC.\n          IpProtocol: -1\n          CidrIp: !Ref VpcCidr\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  ElastiCacheSubnetGroup:\n    Type: AWS::ElastiCache::SubnetGroup\n    Properties:\n      CacheSubnetGroupName: !Sub 'weather-foreca-proxy-v${Version}-subnet-group'\n      Description: !Sub 'Weather - Foreca Proxy v${Version} - Subnet group.'\n      SubnetIds: !Ref Subnets\n\n  ElastiCacheSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: !Sub 'weather - Foreca proxy v${Version} - ElastiCache security group.'\n      VpcId: !Ref VpcId\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName",
    "header_context": "",
    "core": "      TargetTrackingScalingPolicyConfiguration:\n        TargetValue: 90.0\n        ScaleInCooldown: 60\n        ScaleOutCooldown: 60\n        PredefinedMetricSpecification:\n          PredefinedMetricType: DynamoDBReadCapacityUtilization\n  \n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Condition: IsGrpcFargateType\n    Properties:\n      VpcId: !Ref VpcId\n      GroupDescription: Allow traffic to weather Foreca proxy service.\n      SecurityGroupIngress:\n        - Description: Ingress from within the same VPC.\n          IpProtocol: -1\n          CidrIp: !Ref VpcCidr\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  ElastiCacheSubnetGroup:\n    Type: AWS::ElastiCache::SubnetGroup\n    Properties:\n      CacheSubnetGroupName: !Sub 'weather-foreca-proxy-v${Version}-subnet-group'\n      Description: !Sub 'Weather - Foreca Proxy v${Version} - Subnet group.'\n      SubnetIds: !Ref Subnets\n\n  ElastiCacheSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: !Sub 'weather - Foreca proxy v${Version} - ElastiCache security group.'\n      VpcId: !Ref VpcId\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 132,
      "footer": 0,
      "total": 132
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886343+00:00",
    "v": 3
  },
  {
    "chunk_id": "2709459d07bd8850c131517eb4f457ecef69c654d5765b127431462aab273cd6",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 451,
    "end_line": 500,
    "ast_path": "block_10",
    "text": "        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  ElastiCacheSecurityGroupIngressFromSelf:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      GroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      IpProtocol: -1\n      SourceSecurityGroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      Description: Allow traffic from self.\n\n  ElastiCacheSecurityGroupAllowTrafficFromEcsEc2ContainerInstance:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: HasEcsEc2SecurityGroupParameter\n    Properties:\n      GroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      Description: Allow traffic from ECS container instance.\n      IpProtocol: tcp\n      FromPort: 11211\n      ToPort: 11211\n      SourceSecurityGroupId: !Sub '{{resolve:ssm:${EcsEc2SecurityGroupIdParameterName}}}'\n\n  ElastiCacheSecurityGroupAllowTrafficFromEcsFargate:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: IsGrpcFargateType\n    Properties:\n      GroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      Description: Allow traffic from ECS fargate service.\n      IpProtocol: tcp\n      FromPort: 11211\n      ToPort: 11211\n      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId\n\n  ElastiCacheCluster:\n    Type: AWS::ElastiCache::CacheCluster\n    Properties:\n      AZMode: single-az\n      CacheNodeType: !Ref ElastiCacheNodeType\n      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup\n      Engine: memcached\n      NumCacheNodes: !Ref ElastiCacheNodes\n      Port: 11211\n      VpcSecurityGroupIds:\n        - !Ref ElastiCacheSecurityGroup\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version",
    "header_context": "",
    "core": "        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  ElastiCacheSecurityGroupIngressFromSelf:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      GroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      IpProtocol: -1\n      SourceSecurityGroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      Description: Allow traffic from self.\n\n  ElastiCacheSecurityGroupAllowTrafficFromEcsEc2ContainerInstance:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: HasEcsEc2SecurityGroupParameter\n    Properties:\n      GroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      Description: Allow traffic from ECS container instance.\n      IpProtocol: tcp\n      FromPort: 11211\n      ToPort: 11211\n      SourceSecurityGroupId: !Sub '{{resolve:ssm:${EcsEc2SecurityGroupIdParameterName}}}'\n\n  ElastiCacheSecurityGroupAllowTrafficFromEcsFargate:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: IsGrpcFargateType\n    Properties:\n      GroupId: !GetAtt ElastiCacheSecurityGroup.GroupId\n      Description: Allow traffic from ECS fargate service.\n      IpProtocol: tcp\n      FromPort: 11211\n      ToPort: 11211\n      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId\n\n  ElastiCacheCluster:\n    Type: AWS::ElastiCache::CacheCluster\n    Properties:\n      AZMode: single-az\n      CacheNodeType: !Ref ElastiCacheNodeType\n      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup\n      Engine: memcached\n      NumCacheNodes: !Ref ElastiCacheNodes\n      Port: 11211\n      VpcSecurityGroupIds:\n        - !Ref ElastiCacheSecurityGroup\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 111,
      "footer": 0,
      "total": 111
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886435+00:00",
    "v": 3
  },
  {
    "chunk_id": "2c96079ba6969bce828a737b1b2ac8232bc11114710f12037b8bc53564dcc0ae",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 501,
    "end_line": 550,
    "ast_path": "block_11",
    "text": "          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  LogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub '/ecs/weather/foreca_proxy/v${Version}'\n      RetentionInDays: 14\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Version\n          Value: !Ref Version\n        - Key: Service\n          Value: foreca_proxy\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  TaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n                - ecs.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: EcsTaskExecutionRoleEcrAccessPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ecr:GetAuthorizationToken\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                Resource: \"*\"\n        - PolicyName: EcsTaskExecutionRoleCloudWatchAccessPolicy\n          PolicyDocument:\n            Statement:",
    "header_context": "",
    "core": "          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  LogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub '/ecs/weather/foreca_proxy/v${Version}'\n      RetentionInDays: 14\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Version\n          Value: !Ref Version\n        - Key: Service\n          Value: foreca_proxy\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  TaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n                - ecs.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: EcsTaskExecutionRoleEcrAccessPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ecr:GetAuthorizationToken\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                Resource: \"*\"\n        - PolicyName: EcsTaskExecutionRoleCloudWatchAccessPolicy\n          PolicyDocument:\n            Statement:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 101,
      "footer": 0,
      "total": 101
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886504+00:00",
    "v": 3
  },
  {
    "chunk_id": "2bd43d7e66a10ed13f800040bb8534d3699ddd6464dabc60ae39c116063a2aa5",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 551,
    "end_line": 600,
    "ast_path": "block_12",
    "text": "              - Effect: Allow\n                Action:\n                  - logs:CreateLogStream\n                  - logs:CreateLogGroup\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:DescribeLogStreams\n                Resource: \"*\"\n        - PolicyName: EcsTaskExecutionRoleSsmAccessPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ssm:GetParameters\n                  - secretsmanager:GetSecretValue\n                  - kms:Decrypt\n                Resource: \"*\"\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: CloudWatchLogsPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                  - logs:CreateLogStream\n                  - logs:CreateLogGroup",
    "header_context": "",
    "core": "              - Effect: Allow\n                Action:\n                  - logs:CreateLogStream\n                  - logs:CreateLogGroup\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:DescribeLogStreams\n                Resource: \"*\"\n        - PolicyName: EcsTaskExecutionRoleSsmAccessPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ssm:GetParameters\n                  - secretsmanager:GetSecretValue\n                  - kms:Decrypt\n                Resource: \"*\"\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: CloudWatchLogsPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                  - logs:CreateLogStream\n                  - logs:CreateLogGroup",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 98,
      "footer": 0,
      "total": 98
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886597+00:00",
    "v": 3
  },
  {
    "chunk_id": "7a52ec026706e9d38d2eea53a5871d52ba1131700eae01c260a17f8cad5faf2d",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 601,
    "end_line": 650,
    "ast_path": "block_13",
    "text": "                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:DescribeLogStreams\n        - PolicyName: DynamoDBPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Resource:\n                  - !GetAtt MappingsTable.Arn\n                  - !Sub '${MappingsTable.Arn}/index/*'\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:BatchGetItem\n                  - dynamodb:Query\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub 'weather_foreca_proxy_v${Version}_grpc'\n      Cpu: 1024\n      Memory: 2048\n      NetworkMode: !If [ IsGrpcFargateType, awsvpc, !Ref AWS::NoValue ]\n      RequiresCompatibilities:\n        - !Ref GrpcLaunchType\n      RuntimePlatform:\n        CpuArchitecture: ARM64\n        OperatingSystemFamily: LINUX\n      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt TaskRole.Arn\n      ContainerDefinitions:\n        - Name: otel\n          Image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.122.0\n          Command: [\"--config\", \"env:OTEL_CONFIG\"]\n          Essential: false\n          Environment:\n            - Name: OTEL_RESOURCE_ATTRIBUTES\n              Value: !Sub 'service.namespace=weather,service.name=com.impalastudios.weather.foreca-proxy.v0,service.version=${Version},service.module=grpc'\n          Secrets:\n            - Name: OTEL_CONFIG",
    "header_context": "",
    "core": "                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:DescribeLogStreams\n        - PolicyName: DynamoDBPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Resource:\n                  - !GetAtt MappingsTable.Arn\n                  - !Sub '${MappingsTable.Arn}/index/*'\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:BatchGetItem\n                  - dynamodb:Query\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub 'weather_foreca_proxy_v${Version}_grpc'\n      Cpu: 1024\n      Memory: 2048\n      NetworkMode: !If [ IsGrpcFargateType, awsvpc, !Ref AWS::NoValue ]\n      RequiresCompatibilities:\n        - !Ref GrpcLaunchType\n      RuntimePlatform:\n        CpuArchitecture: ARM64\n        OperatingSystemFamily: LINUX\n      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt TaskRole.Arn\n      ContainerDefinitions:\n        - Name: otel\n          Image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.122.0\n          Command: [\"--config\", \"env:OTEL_CONFIG\"]\n          Essential: false\n          Environment:\n            - Name: OTEL_RESOURCE_ATTRIBUTES\n              Value: !Sub 'service.namespace=weather,service.name=com.impalastudios.weather.foreca-proxy.v0,service.version=${Version},service.module=grpc'\n          Secrets:\n            - Name: OTEL_CONFIG",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 114,
      "footer": 0,
      "total": 114
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886691+00:00",
    "v": 3
  },
  {
    "chunk_id": "30d22b7e3d3b4b06ce268c73fd83b2a9461754898a882782495b7534a72145e1",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 651,
    "end_line": 700,
    "ast_path": "block_14",
    "text": "              ValueFrom: !Sub /weather/foreca_proxy/v${Version}/telemetry/otel/collector_config\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref LogGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: containers\n        - Name: grpc\n          Image: !Sub '598094125568.dkr.ecr.us-east-1.amazonaws.com/weather/foreca_proxy:${ImageTag}'\n          Command: [\"serve\", \"grpc\"]\n          Environment:\n            - Name: APP_NAME\n              Value: !Sub 'com.impalastudios.weather.foreca-proxy.v${Version}'\n            - Name: MAPPINGS_DYNAMODB_TABLE_NAME\n              Value: !Ref MappingsTable\n            - Name: AWS_REGION\n              Value: !Ref AWS::Region\n            - Name: MEMCACHED_ADDRESS\n              Value: !Sub\n                - '${Endpoint}:${Port}'\n                - Endpoint: !GetAtt ElastiCacheCluster.ConfigurationEndpoint.Address\n                  Port: !GetAtt ElastiCacheCluster.ConfigurationEndpoint.Port\n            - Name: OTEL_TRACER_ENDPOINT\n              Value: localhost:4317\n            - Name: OTEL_METER_ENDPOINT\n              Value: localhost:4317\n            - Name: OTEL_METER_INTERVAL\n              Value: 60s\n          Secrets:\n            - Name: LOGGING_DEBUG\n              ValueFrom: !Sub '/weather/foreca_proxy/v${Version}/logging/debug'\n            - Name: FORECA_REQUESTS_PER_SECOND\n              ValueFrom: !Sub '/weather/foreca_proxy/v${Version}/provider/requests_per_second'\n            - Name: FORECA_EXPIRATION_DURATION\n              ValueFrom: !Sub '/weather/foreca_proxy/v${Version}/provider/expiration_duration'\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref LogGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: containers\n          PortMappings:\n            - ContainerPort: 50051\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Version\n          Value: !Ref Version\n        - Key: Service\n          Value: foreca_proxy",
    "header_context": "",
    "core": "              ValueFrom: !Sub /weather/foreca_proxy/v${Version}/telemetry/otel/collector_config\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref LogGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: containers\n        - Name: grpc\n          Image: !Sub '598094125568.dkr.ecr.us-east-1.amazonaws.com/weather/foreca_proxy:${ImageTag}'\n          Command: [\"serve\", \"grpc\"]\n          Environment:\n            - Name: APP_NAME\n              Value: !Sub 'com.impalastudios.weather.foreca-proxy.v${Version}'\n            - Name: MAPPINGS_DYNAMODB_TABLE_NAME\n              Value: !Ref MappingsTable\n            - Name: AWS_REGION\n              Value: !Ref AWS::Region\n            - Name: MEMCACHED_ADDRESS\n              Value: !Sub\n                - '${Endpoint}:${Port}'\n                - Endpoint: !GetAtt ElastiCacheCluster.ConfigurationEndpoint.Address\n                  Port: !GetAtt ElastiCacheCluster.ConfigurationEndpoint.Port\n            - Name: OTEL_TRACER_ENDPOINT\n              Value: localhost:4317\n            - Name: OTEL_METER_ENDPOINT\n              Value: localhost:4317\n            - Name: OTEL_METER_INTERVAL\n              Value: 60s\n          Secrets:\n            - Name: LOGGING_DEBUG\n              ValueFrom: !Sub '/weather/foreca_proxy/v${Version}/logging/debug'\n            - Name: FORECA_REQUESTS_PER_SECOND\n              ValueFrom: !Sub '/weather/foreca_proxy/v${Version}/provider/requests_per_second'\n            - Name: FORECA_EXPIRATION_DURATION\n              ValueFrom: !Sub '/weather/foreca_proxy/v${Version}/provider/expiration_duration'\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref LogGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: containers\n          PortMappings:\n            - ContainerPort: 50051\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Version\n          Value: !Ref Version\n        - Key: Service\n          Value: foreca_proxy",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 124,
      "footer": 0,
      "total": 124
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886764+00:00",
    "v": 3
  },
  {
    "chunk_id": "805756e8ba94980bd8f20cd0b4146dda158f2013b55a00d08a1ade3fe7a69e9b",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 701,
    "end_line": 750,
    "ast_path": "block_15",
    "text": "        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcServiceDiscoveryService:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      Name: !Sub '_weather_foreca_proxy_v${Version}_grpc._tcp'\n      NamespaceId: !Ref PrivateDnsNamespaceId\n      DnsConfig:\n        DnsRecords:\n          - Type: SRV\n            TTL: 60\n        RoutingPolicy: MULTIVALUE\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcService:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - MappingsTable\n    Properties:\n      ServiceName: !Sub 'foreca_proxy_v${Version}_grpc'\n      Cluster: !Ref EcsClusterName\n      CapacityProviderStrategy:\n        - CapacityProvider: !Ref EcsCapacityProviderName\n          Weight: 1\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref GrpcDesiredCount\n      PropagateTags: SERVICE\n      NetworkConfiguration: !If\n        - IsGrpcFargateType\n        - AwsvpcConfiguration:\n            AssignPublicIp: ENABLED\n            SecurityGroups:\n              - !Ref ServiceSecurityGroup",
    "header_context": "",
    "core": "        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcServiceDiscoveryService:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      Name: !Sub '_weather_foreca_proxy_v${Version}_grpc._tcp'\n      NamespaceId: !Ref PrivateDnsNamespaceId\n      DnsConfig:\n        DnsRecords:\n          - Type: SRV\n            TTL: 60\n        RoutingPolicy: MULTIVALUE\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcService:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - MappingsTable\n    Properties:\n      ServiceName: !Sub 'foreca_proxy_v${Version}_grpc'\n      Cluster: !Ref EcsClusterName\n      CapacityProviderStrategy:\n        - CapacityProvider: !Ref EcsCapacityProviderName\n          Weight: 1\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref GrpcDesiredCount\n      PropagateTags: SERVICE\n      NetworkConfiguration: !If\n        - IsGrpcFargateType\n        - AwsvpcConfiguration:\n            AssignPublicIp: ENABLED\n            SecurityGroups:\n              - !Ref ServiceSecurityGroup",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 107,
      "footer": 0,
      "total": 107
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886827+00:00",
    "v": 3
  },
  {
    "chunk_id": "baf86b5d404f786334429e4ab99049efbd5d518029fa8f48abaef3d055f1e259",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 751,
    "end_line": 800,
    "ast_path": "block_16",
    "text": "            Subnets: !Ref Subnets\n        - !Ref AWS::NoValue\n      TaskDefinition: !Ref GrpcTaskDefinition\n      ServiceRegistries:\n        - ContainerName: grpc\n          ContainerPort: 50051\n          RegistryArn: !GetAtt GrpcServiceDiscoveryService.Arn\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  ApplicationAutoScalingRole:\n    Type: AWS::IAM::Role\n    Condition: ShouldEnableServiceAutoScaling\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - application-autoscaling.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: ServiceAutoscalingPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - application-autoscaling:*\n                  - ecs:DescribeServices\n                  - ecs:UpdateService\n                  - cloudwatch:DescribeAlarms\n                  - cloudwatch:PutMetricAlarm\n                  - cloudwatch:DeleteAlarms\n                  - cloudwatch:DescribeAlarmHistory\n                  - cloudwatch:DescribeAlarmsForMetric\n                  - cloudwatch:GetMetricStatistics\n                  - cloudwatch:ListMetrics\n                  - cloudwatch:DisableAlarmActions",
    "header_context": "",
    "core": "            Subnets: !Ref Subnets\n        - !Ref AWS::NoValue\n      TaskDefinition: !Ref GrpcTaskDefinition\n      ServiceRegistries:\n        - ContainerName: grpc\n          ContainerPort: 50051\n          RegistryArn: !GetAtt GrpcServiceDiscoveryService.Arn\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  ApplicationAutoScalingRole:\n    Type: AWS::IAM::Role\n    Condition: ShouldEnableServiceAutoScaling\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - application-autoscaling.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: !Sub /weather/foreca_proxy/v${Version}/\n      Policies:\n        - PolicyName: ServiceAutoscalingPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - application-autoscaling:*\n                  - ecs:DescribeServices\n                  - ecs:UpdateService\n                  - cloudwatch:DescribeAlarms\n                  - cloudwatch:PutMetricAlarm\n                  - cloudwatch:DeleteAlarms\n                  - cloudwatch:DescribeAlarmHistory\n                  - cloudwatch:DescribeAlarmsForMetric\n                  - cloudwatch:GetMetricStatistics\n                  - cloudwatch:ListMetrics\n                  - cloudwatch:DisableAlarmActions",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 103,
      "footer": 0,
      "total": 103
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886889+00:00",
    "v": 3
  },
  {
    "chunk_id": "6469464f2f164ab25651102c7c2768e95473b26ab0e92b14cd42322f007c2a55",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 801,
    "end_line": 850,
    "ast_path": "block_17",
    "text": "                  - cloudwatch:EnableAlarmActions\n                  - iam:CreateServiceLinkedRole\n                  - sns:CreateTopic\n                  - sns:Subscribe\n                  - sns:Get*\n                  - sns:List*\n                Resource: '*'\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcServiceScalableTarget:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Condition: ShouldEnableServiceAutoScaling\n    Properties:\n      ServiceNamespace: ecs\n      ResourceId: !Sub 'service/${EcsClusterName}/${GrpcService.Name}'\n      MinCapacity: !Ref GrpcDesiredCount\n      MaxCapacity: 5\n      ScalableDimension: ecs:service:DesiredCount\n      ScheduledActions: !If\n        - IsServiceAutoScalingWorkdays\n        - - ScheduledActionName: scale-in\n            Schedule: cron(0 8 ? * MON-FRI *)\n            Timezone: Europe/Amsterdam\n            ScalableTargetAction:\n              MinCapacity: 1\n              MaxCapacity: 2\n          - ScheduledActionName: scale-out\n            Schedule: cron(30 18 ? * MON-FRI *)\n            Timezone: Europe/Amsterdam\n            ScalableTargetAction:\n              MinCapacity: 0\n              MaxCapacity: 0\n        - !Ref AWS::NoValue\n      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn\n\n  GrpcServiceAutoScalingCpu80PercentPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Condition: IsServiceAutoScalingResourcesConsumption\n    Properties:\n      PolicyName: !Sub 'weather-foreca-proxy-v${Version}-grpc-cpu-80'",
    "header_context": "",
    "core": "                  - cloudwatch:EnableAlarmActions\n                  - iam:CreateServiceLinkedRole\n                  - sns:CreateTopic\n                  - sns:Subscribe\n                  - sns:Get*\n                  - sns:List*\n                Resource: '*'\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n        - Key: Version\n          Value: !Ref Version\n        - Key: AppManagerCFNStackKey\n          Value: !Ref AWS::StackName\n        - Key: !GetAtt Application.ApplicationTagKey\n          Value: !GetAtt Application.ApplicationTagValue\n\n  GrpcServiceScalableTarget:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Condition: ShouldEnableServiceAutoScaling\n    Properties:\n      ServiceNamespace: ecs\n      ResourceId: !Sub 'service/${EcsClusterName}/${GrpcService.Name}'\n      MinCapacity: !Ref GrpcDesiredCount\n      MaxCapacity: 5\n      ScalableDimension: ecs:service:DesiredCount\n      ScheduledActions: !If\n        - IsServiceAutoScalingWorkdays\n        - - ScheduledActionName: scale-in\n            Schedule: cron(0 8 ? * MON-FRI *)\n            Timezone: Europe/Amsterdam\n            ScalableTargetAction:\n              MinCapacity: 1\n              MaxCapacity: 2\n          - ScheduledActionName: scale-out\n            Schedule: cron(30 18 ? * MON-FRI *)\n            Timezone: Europe/Amsterdam\n            ScalableTargetAction:\n              MinCapacity: 0\n              MaxCapacity: 0\n        - !Ref AWS::NoValue\n      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn\n\n  GrpcServiceAutoScalingCpu80PercentPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Condition: IsServiceAutoScalingResourcesConsumption\n    Properties:\n      PolicyName: !Sub 'weather-foreca-proxy-v${Version}-grpc-cpu-80'",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 116,
      "footer": 0,
      "total": 116
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.886950+00:00",
    "v": 3
  },
  {
    "chunk_id": "ad4949de45f7d8ad1594ec7d9e444783141ee6c2b718d68f061290bd812c37f1",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 851,
    "end_line": 900,
    "ast_path": "block_18",
    "text": "      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref GrpcServiceScalableTarget\n      TargetTrackingScalingPolicyConfiguration:\n        TargetValue: 80.0\n        ScaleInCooldown: 300\n        ScaleOutCooldown: 300\n        PredefinedMetricSpecification:\n          PredefinedMetricType: ECSServiceAverageCPUUtilization\n\n  GrpcServiceAutoScalingMemory80PercentPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Condition: IsServiceAutoScalingResourcesConsumption\n    Properties:\n      PolicyName: !Sub 'weather-foreca-proxy-v${Version}-grpc-memory-80'\n      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref GrpcServiceScalableTarget\n      TargetTrackingScalingPolicyConfiguration:\n        TargetValue: 80.0\n        ScaleInCooldown: 300\n        ScaleOutCooldown: 300\n        PredefinedMetricSpecification:\n          PredefinedMetricType: ECSServiceAverageMemoryUtilization\n\nOutputs:\n  TaskRoleName:\n    Description: The task's role name.\n    Value: !Ref TaskRole\n\n  TaskRoleArn:\n    Description: The Amazon Resource Name (ARN) of the task' role.\n    Value: !GetAtt TaskRole.Arn\n\n  GrpcServiceDiscoveryServiceId:\n    Description: The ID of the Cloud Map gRPC service.\n    Value: !Ref GrpcServiceDiscoveryService\n\n  GrpcServiceDiscoveryServiceArn:\n    Description: The Amazon Resource Name (ARN) of the Cloud Map gRPC service.\n    Value: !GetAtt GrpcServiceDiscoveryService.Arn\n\n  GrpcServiceDiscoveryServiceName:\n    Description: The service Amazon Resource Name (ARN) of the Cloud Map gRPC service.\n    Value: !GetAtt GrpcServiceDiscoveryService.Name\n\n  ElastiCacheClusterArn:\n    Description: The Amazon Resource Name (ARN) of the ElastiCache cluster.\n    Value: !Sub 'arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:cluster:${ElastiCacheCluster}'\n\n  ElastiCacheClusterName:\n    Description: The name of the ElastiCache cluster.",
    "header_context": "",
    "core": "      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref GrpcServiceScalableTarget\n      TargetTrackingScalingPolicyConfiguration:\n        TargetValue: 80.0\n        ScaleInCooldown: 300\n        ScaleOutCooldown: 300\n        PredefinedMetricSpecification:\n          PredefinedMetricType: ECSServiceAverageCPUUtilization\n\n  GrpcServiceAutoScalingMemory80PercentPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Condition: IsServiceAutoScalingResourcesConsumption\n    Properties:\n      PolicyName: !Sub 'weather-foreca-proxy-v${Version}-grpc-memory-80'\n      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref GrpcServiceScalableTarget\n      TargetTrackingScalingPolicyConfiguration:\n        TargetValue: 80.0\n        ScaleInCooldown: 300\n        ScaleOutCooldown: 300\n        PredefinedMetricSpecification:\n          PredefinedMetricType: ECSServiceAverageMemoryUtilization\n\nOutputs:\n  TaskRoleName:\n    Description: The task's role name.\n    Value: !Ref TaskRole\n\n  TaskRoleArn:\n    Description: The Amazon Resource Name (ARN) of the task' role.\n    Value: !GetAtt TaskRole.Arn\n\n  GrpcServiceDiscoveryServiceId:\n    Description: The ID of the Cloud Map gRPC service.\n    Value: !Ref GrpcServiceDiscoveryService\n\n  GrpcServiceDiscoveryServiceArn:\n    Description: The Amazon Resource Name (ARN) of the Cloud Map gRPC service.\n    Value: !GetAtt GrpcServiceDiscoveryService.Arn\n\n  GrpcServiceDiscoveryServiceName:\n    Description: The service Amazon Resource Name (ARN) of the Cloud Map gRPC service.\n    Value: !GetAtt GrpcServiceDiscoveryService.Name\n\n  ElastiCacheClusterArn:\n    Description: The Amazon Resource Name (ARN) of the ElastiCache cluster.\n    Value: !Sub 'arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:cluster:${ElastiCacheCluster}'\n\n  ElastiCacheClusterName:\n    Description: The name of the ElastiCache cluster.",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 131,
      "footer": 0,
      "total": 131
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.887132+00:00",
    "v": 3
  },
  {
    "chunk_id": "5dbe7bc1c39d0bde04ade4639e48307d3b6496ac07e1f9d9b6a743f8ea6fdb96",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/template.yml",
    "language": "yaml",
    "start_line": 901,
    "end_line": 926,
    "ast_path": "block_19",
    "text": "    Value: !Ref ElastiCacheCluster\n\n  MappingsTableName:\n    Description: The name of the DynamoDB table which contains the mappings from Impala IDs to Foreca IDs.\n    Value: !Ref MappingsTable\n\n  MappingsTableArn:\n    Description: The Amazon Resource Name (ARN) of the DynamoDB table which contains the mappings from Impala IDs to Foreca IDs.\n    Value: !GetAtt MappingsTable.Arn\n\n  LogGroupName:\n    Description: The name of the ECS' service log group.\n    Value: !Ref LogGroup\n\n  LogGroupArn:\n    Description: The Amazon Resource Name (ARN) of the ECS' service log group.\n    Value: !GetAtt LogGroup.Arn\n\n  GrpcServiceArn:\n    Description: The Amazon Resource Name (ARN) of the ECS gRPC service.\n    Value: !Ref GrpcService\n\n  GrpcServiceName:\n    Description: The name of the Amazon ECS gRPC service.\n    Value: !GetAtt GrpcService.Name\n",
    "header_context": "",
    "core": "    Value: !Ref ElastiCacheCluster\n\n  MappingsTableName:\n    Description: The name of the DynamoDB table which contains the mappings from Impala IDs to Foreca IDs.\n    Value: !Ref MappingsTable\n\n  MappingsTableArn:\n    Description: The Amazon Resource Name (ARN) of the DynamoDB table which contains the mappings from Impala IDs to Foreca IDs.\n    Value: !GetAtt MappingsTable.Arn\n\n  LogGroupName:\n    Description: The name of the ECS' service log group.\n    Value: !Ref LogGroup\n\n  LogGroupArn:\n    Description: The Amazon Resource Name (ARN) of the ECS' service log group.\n    Value: !GetAtt LogGroup.Arn\n\n  GrpcServiceArn:\n    Description: The Amazon Resource Name (ARN) of the ECS gRPC service.\n    Value: !Ref GrpcService\n\n  GrpcServiceName:\n    Description: The name of the Amazon ECS gRPC service.\n    Value: !GetAtt GrpcService.Name\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 26 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 105,
      "footer": 0,
      "total": 105
    },
    "file_sha": "0950ff4beef49308b3bde66a072e4c066e26d49d72a681576b0e2ee867a9e868",
    "created_at": "2025-10-07T09:26:56.887171+00:00",
    "v": 3
  },
  {
    "chunk_id": "4b83b2197551f5ab34c6a653a301509bb5aaeae2f2a23f6abea91670608452dd",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/docker-compose.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 50,
    "ast_path": "block_1",
    "text": "services:\n  grpc:\n    build:\n      context: ./\n      dockerfile: Dockerfile.dev\n      ssh: [default]\n    working_dir: /app\n    restart: always\n    command: [\"serve\", \"grpc\"]\n    volumes:\n      - .:/app\n      - ~/.ssh/id_rsa:/root/.ssh/id_rsa\n    environment:\n      GOPRIVATE: go.impalastudios.com\n      LOGGING_DEBUG: true\n      MAPPINGS_DYNAMODB_TABLE_NAME: weather-foreca-proxy-v0-mappings\n      MEMCACHED_ADDRESS: memcached:11211\n      AWS_REGION: us-east-1\n      AWS_ENDPOINT_URL: http://localstack:4566\n      AWS_ACCESS_KEY_ID: test\n      AWS_SECRET_ACCESS_KEY: test\n      AWS_SESSION_TOKEN: test\n      OTEL_TRACER_ENDPOINT: collector:4317\n      OTEL_METER_ENDPOINT: collector:4317\n      OTEL_METER_INTERVAL: 60s\n    ports:\n      - '${FORWARD_APP_GRPC_PORT:-50051}:50051'\n    networks:\n      - weather\n    depends_on:\n      - memcached\n      - localstack\n      - collector\n\n  jaeger:\n    image: jaegertracing/all-in-one:1.58\n    ports:\n      - \"${FORWARD_JAEGER_CONFIGS_PORT:-5778}:5778\" # serve configs\n      - \"${FORWARD_JAEGER_FE_PORT:-16686}:16686\" # serve frontend UI\n    environment:\n      COLLECTOR_OTLP_ENABLED: true\n    networks:\n      - math\n    restart: on-failure\n\n  collector:\n    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.114.0\n    depends_on:\n      - prometheus\n      - jaeger",
    "header_context": "",
    "core": "services:\n  grpc:\n    build:\n      context: ./\n      dockerfile: Dockerfile.dev\n      ssh: [default]\n    working_dir: /app\n    restart: always\n    command: [\"serve\", \"grpc\"]\n    volumes:\n      - .:/app\n      - ~/.ssh/id_rsa:/root/.ssh/id_rsa\n    environment:\n      GOPRIVATE: go.impalastudios.com\n      LOGGING_DEBUG: true\n      MAPPINGS_DYNAMODB_TABLE_NAME: weather-foreca-proxy-v0-mappings\n      MEMCACHED_ADDRESS: memcached:11211\n      AWS_REGION: us-east-1\n      AWS_ENDPOINT_URL: http://localstack:4566\n      AWS_ACCESS_KEY_ID: test\n      AWS_SECRET_ACCESS_KEY: test\n      AWS_SESSION_TOKEN: test\n      OTEL_TRACER_ENDPOINT: collector:4317\n      OTEL_METER_ENDPOINT: collector:4317\n      OTEL_METER_INTERVAL: 60s\n    ports:\n      - '${FORWARD_APP_GRPC_PORT:-50051}:50051'\n    networks:\n      - weather\n    depends_on:\n      - memcached\n      - localstack\n      - collector\n\n  jaeger:\n    image: jaegertracing/all-in-one:1.58\n    ports:\n      - \"${FORWARD_JAEGER_CONFIGS_PORT:-5778}:5778\" # serve configs\n      - \"${FORWARD_JAEGER_FE_PORT:-16686}:16686\" # serve frontend UI\n    environment:\n      COLLECTOR_OTLP_ENABLED: true\n    networks:\n      - math\n    restart: on-failure\n\n  collector:\n    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.114.0\n    depends_on:\n      - prometheus\n      - jaeger",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 90,
      "footer": 0,
      "total": 90
    },
    "file_sha": "75b113643414c82b8e27bc5454f5a1f5774c7290c4411f122ee5733f985a85b2",
    "created_at": "2025-10-07T09:26:56.888370+00:00",
    "v": 3
  },
  {
    "chunk_id": "7b1f7f1334522ad68920c72492d406860c9fc5f7f811adcdf365ec63dbeeb551",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/docker-compose.yml",
    "language": "yaml",
    "start_line": 51,
    "end_line": 100,
    "ast_path": "block_2",
    "text": "    environment:\n      OTEL_RESOURCE_ATTRIBUTES: service.domain=weather,service.version=0,service.name=foreca_proxy,aws.ecs.task.id=task-id\n      OTEL_CONFIG: |\n        receivers:\n          otlp:\n            protocols:\n              grpc:\n                endpoint: 0.0.0.0:4317\n\n        processors:\n          batch:\n\n          resourcedetection/env:\n            detectors: [ env ]\n            timeout: 2s\n\n          transform/service:\n            trace_statements:\n              - context: span\n                statements:\n                  - set(attributes[\"service.domain\"], resource.attributes[\"service.domain\"])\n                  - set(attributes[\"service.version\"], resource.attributes[\"service.version\"])\n                  - set(attributes[\"service.name\"], resource.attributes[\"service.name\"])\n                  - set(attributes[\"aws.ecs.task.id\"], resource.attributes[\"aws.ecs.task.id\"])\n            metric_statements:\n              - context: datapoint\n                statements:\n                  - set(attributes[\"service.domain\"], resource.attributes[\"service.domain\"])\n                  - set(attributes[\"service.version\"], resource.attributes[\"service.version\"])\n                  - set(attributes[\"service.name\"], resource.attributes[\"service.name\"])\n                  - set(attributes[\"aws.ecs.task.id\"], resource.attributes[\"aws.ecs.task.id\"])\n\n        exporters:\n          otlp/jaeger:\n            endpoint: jaeger:4317\n            tls:\n              insecure: true\n\n          debug/detailed:\n            verbosity: detailed\n            sampling_initial: 2\n            sampling_thereafter: 1\n\n          prometheusremotewrite:\n            endpoint: \"http://prometheus:9090/api/v1/write\"\n            tls:\n              insecure: true\n            add_metric_suffixes: false\n\n        service:",
    "header_context": "",
    "core": "    environment:\n      OTEL_RESOURCE_ATTRIBUTES: service.domain=weather,service.version=0,service.name=foreca_proxy,aws.ecs.task.id=task-id\n      OTEL_CONFIG: |\n        receivers:\n          otlp:\n            protocols:\n              grpc:\n                endpoint: 0.0.0.0:4317\n\n        processors:\n          batch:\n\n          resourcedetection/env:\n            detectors: [ env ]\n            timeout: 2s\n\n          transform/service:\n            trace_statements:\n              - context: span\n                statements:\n                  - set(attributes[\"service.domain\"], resource.attributes[\"service.domain\"])\n                  - set(attributes[\"service.version\"], resource.attributes[\"service.version\"])\n                  - set(attributes[\"service.name\"], resource.attributes[\"service.name\"])\n                  - set(attributes[\"aws.ecs.task.id\"], resource.attributes[\"aws.ecs.task.id\"])\n            metric_statements:\n              - context: datapoint\n                statements:\n                  - set(attributes[\"service.domain\"], resource.attributes[\"service.domain\"])\n                  - set(attributes[\"service.version\"], resource.attributes[\"service.version\"])\n                  - set(attributes[\"service.name\"], resource.attributes[\"service.name\"])\n                  - set(attributes[\"aws.ecs.task.id\"], resource.attributes[\"aws.ecs.task.id\"])\n\n        exporters:\n          otlp/jaeger:\n            endpoint: jaeger:4317\n            tls:\n              insecure: true\n\n          debug/detailed:\n            verbosity: detailed\n            sampling_initial: 2\n            sampling_thereafter: 1\n\n          prometheusremotewrite:\n            endpoint: \"http://prometheus:9090/api/v1/write\"\n            tls:\n              insecure: true\n            add_metric_suffixes: false\n\n        service:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 78,
      "footer": 0,
      "total": 78
    },
    "file_sha": "75b113643414c82b8e27bc5454f5a1f5774c7290c4411f122ee5733f985a85b2",
    "created_at": "2025-10-07T09:26:56.888450+00:00",
    "v": 3
  },
  {
    "chunk_id": "ec0b1e7698159cf4947d6aa2f636d7df8a105f52419619df879a7475c2071687",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/docker-compose.yml",
    "language": "yaml",
    "start_line": 101,
    "end_line": 150,
    "ast_path": "block_3",
    "text": "          pipelines:\n            traces:\n              receivers: [otlp]\n              processors: [resourcedetection/env, transform/service]\n              exporters: [debug/detailed, otlp/jaeger]\n            metrics:\n              receivers: [otlp]\n              processors: [resourcedetection/env, transform/service]\n              exporters: [debug/detailed, prometheusremotewrite]\n          telemetry:\n            logs:\n              level: debug\n    command: [\"--config\", \"env:OTEL_CONFIG\"]\n    networks:\n      - weather\n\n  memcached:\n    image: memcached:1.6\n    ports:\n      - '${FORWARD_MEMCACHED_PORT:-11211}:11211'\n    networks:\n      - weather\n\n  localstack:\n    image: localstack/localstack\n    ports:\n      - '${FORWARD_LOCALSTACK_PORT:-4566}:4566'\n      - '${FORWARD_LOCALSTACK_ELASTICSEARCH_PORT:-4571}:4571'\n    networks:\n      - weather\n    environment:\n      - EAGER_SERVICE_LOADING=1\n      - SERVICES=dynamodb\n      - PERSISTENCE=1\n    volumes:\n      - 'localstack:/var/lib/localstack'\n\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - '${FORWARD_PROMETHEUS_PORT:-9090}:9090'\n    command:\n      - --web.enable-remote-write-receiver\n      - --config.file=/etc/prometheus/prometheus.yml\n    networks:\n      - weather\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:",
    "header_context": "",
    "core": "          pipelines:\n            traces:\n              receivers: [otlp]\n              processors: [resourcedetection/env, transform/service]\n              exporters: [debug/detailed, otlp/jaeger]\n            metrics:\n              receivers: [otlp]\n              processors: [resourcedetection/env, transform/service]\n              exporters: [debug/detailed, prometheusremotewrite]\n          telemetry:\n            logs:\n              level: debug\n    command: [\"--config\", \"env:OTEL_CONFIG\"]\n    networks:\n      - weather\n\n  memcached:\n    image: memcached:1.6\n    ports:\n      - '${FORWARD_MEMCACHED_PORT:-11211}:11211'\n    networks:\n      - weather\n\n  localstack:\n    image: localstack/localstack\n    ports:\n      - '${FORWARD_LOCALSTACK_PORT:-4566}:4566'\n      - '${FORWARD_LOCALSTACK_ELASTICSEARCH_PORT:-4571}:4571'\n    networks:\n      - weather\n    environment:\n      - EAGER_SERVICE_LOADING=1\n      - SERVICES=dynamodb\n      - PERSISTENCE=1\n    volumes:\n      - 'localstack:/var/lib/localstack'\n\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - '${FORWARD_PROMETHEUS_PORT:-9090}:9090'\n    command:\n      - --web.enable-remote-write-receiver\n      - --config.file=/etc/prometheus/prometheus.yml\n    networks:\n      - weather\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 77,
      "footer": 0,
      "total": 77
    },
    "file_sha": "75b113643414c82b8e27bc5454f5a1f5774c7290c4411f122ee5733f985a85b2",
    "created_at": "2025-10-07T09:26:56.888511+00:00",
    "v": 3
  },
  {
    "chunk_id": "d2d98b19be1c8088398feaefe63cf4993730d6e037694da4f945c19cb5e4d615",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/docker-compose.yml",
    "language": "yaml",
    "start_line": 151,
    "end_line": 168,
    "ast_path": "block_4",
    "text": "      - '${FORWARD_GRAFANA_PORT:-3000}:3000'\n    volumes:\n      - \".docker/grafana/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml\"\n      - \".docker/grafana/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml\"\n    environment:\n      - GF_SECURITY_ADMIN_USER=root\n      - GF_SECURITY_ADMIN_PASSWORD=password\n    networks:\n      - weather\n\nnetworks:\n  weather:\n    driver: bridge\n\nvolumes:\n  localstack:\n    driver: local\n",
    "header_context": "",
    "core": "      - '${FORWARD_GRAFANA_PORT:-3000}:3000'\n    volumes:\n      - \".docker/grafana/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml\"\n      - \".docker/grafana/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml\"\n    environment:\n      - GF_SECURITY_ADMIN_USER=root\n      - GF_SECURITY_ADMIN_PASSWORD=password\n    networks:\n      - weather\n\nnetworks:\n  weather:\n    driver: bridge\n\nvolumes:\n  localstack:\n    driver: local\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 18 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 23,
      "footer": 0,
      "total": 23
    },
    "file_sha": "75b113643414c82b8e27bc5454f5a1f5774c7290c4411f122ee5733f985a85b2",
    "created_at": "2025-10-07T09:26:56.888574+00:00",
    "v": 3
  },
  {
    "chunk_id": "482e73ddbff8681417c5068ba2eeac692a27dd424ad08169370b5ce2769ecf72",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/catalog-info.yaml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 50,
    "ast_path": "block_1",
    "text": "apiVersion: backstage.io/v1alpha1\nkind: System\nmetadata:\n  name: weather-foreca-proxy-service-v0\n  namespace: services\n  description: The Weather - Foreca Proxy v0 service.\n  tags:\n    - runtime:go1-23\n    - domain:weather\n    - service:foreca-proxy\n    - version:0\n  labels:\n    runtime: go1.23\n  annotations:\n    bitbucket.org/project-slug: weather_foreca_proxy_service\nspec:\n  type: service\n  lifecycle: production\n  owner: group:default/team-api-services\n---\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: weather-foreca-proxy-service-v0-grpc\n  namespace: modules\n  description: The gRPC module of Weather - Foreca Proxy v0 service.\n  tags:\n    - runtime:go1-23\n    - domain:weather\n    - service:foreca-proxy\n    - version:0\n    - module:grpc\n  labels:\n    runtime: go1.23\n  annotations:\n    bitbucket.org/project-slug: weather_foreca_proxy_service\nspec:\n  type: module\n  lifecycle: production\n  owner: group:default/team-api-services\n  system: system:services/weather-foreca-proxy-service-v0\n---\napiVersion: backstage.io/v1alpha1\nkind: API\nmetadata:\n  name: weather-foreca-proxy-service-v0-grpc-api\n  namespace: apis\n  description: The Weather - Foreca Proxy v0 gRPC operations.\n  tags:\n    - domain:weather",
    "header_context": "",
    "core": "apiVersion: backstage.io/v1alpha1\nkind: System\nmetadata:\n  name: weather-foreca-proxy-service-v0\n  namespace: services\n  description: The Weather - Foreca Proxy v0 service.\n  tags:\n    - runtime:go1-23\n    - domain:weather\n    - service:foreca-proxy\n    - version:0\n  labels:\n    runtime: go1.23\n  annotations:\n    bitbucket.org/project-slug: weather_foreca_proxy_service\nspec:\n  type: service\n  lifecycle: production\n  owner: group:default/team-api-services\n---\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: weather-foreca-proxy-service-v0-grpc\n  namespace: modules\n  description: The gRPC module of Weather - Foreca Proxy v0 service.\n  tags:\n    - runtime:go1-23\n    - domain:weather\n    - service:foreca-proxy\n    - version:0\n    - module:grpc\n  labels:\n    runtime: go1.23\n  annotations:\n    bitbucket.org/project-slug: weather_foreca_proxy_service\nspec:\n  type: module\n  lifecycle: production\n  owner: group:default/team-api-services\n  system: system:services/weather-foreca-proxy-service-v0\n---\napiVersion: backstage.io/v1alpha1\nkind: API\nmetadata:\n  name: weather-foreca-proxy-service-v0-grpc-api\n  namespace: apis\n  description: The Weather - Foreca Proxy v0 gRPC operations.\n  tags:\n    - domain:weather",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 108,
      "footer": 0,
      "total": 108
    },
    "file_sha": "61a05dd4fcee56bbdf1f908fb5705c0f0d1e38cab2589fa78d309061baf3b652",
    "created_at": "2025-10-07T09:26:56.889301+00:00",
    "v": 3
  },
  {
    "chunk_id": "0865ebc65e6c4f4e1db8796860f73853f09c9931ea570f3802444335a5f7de5e",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/catalog-info.yaml",
    "language": "yaml",
    "start_line": 51,
    "end_line": 73,
    "ast_path": "block_2",
    "text": "    - service:foreca-proxy\n    - version:0\n    - module:grpc\nspec:\n  type: grpc\n  lifecycle: production\n  owner: group:default/team-api-services\n  system: system:services/weather-foreca-proxy-service-v0\n  definition:\n    $text: ./pkg/pb/v0/service.v0.proto\n---\napiVersion: backstage.io/v1alpha1\nkind: Resource\nmetadata:\n  name: foreca\n  namespace: providers\n  description: |\n    Foreca Ltd is a private Finnish weather forecasting company.\nspec:\n  type: provider\n  owner: group:default/team-api-services\n  system: system:services/weather-foreca-proxy-service-v0\n",
    "header_context": "",
    "core": "    - service:foreca-proxy\n    - version:0\n    - module:grpc\nspec:\n  type: grpc\n  lifecycle: production\n  owner: group:default/team-api-services\n  system: system:services/weather-foreca-proxy-service-v0\n  definition:\n    $text: ./pkg/pb/v0/service.v0.proto\n---\napiVersion: backstage.io/v1alpha1\nkind: Resource\nmetadata:\n  name: foreca\n  namespace: providers\n  description: |\n    Foreca Ltd is a private Finnish weather forecasting company.\nspec:\n  type: provider\n  owner: group:default/team-api-services\n  system: system:services/weather-foreca-proxy-service-v0\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 23 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 46,
      "footer": 0,
      "total": 46
    },
    "file_sha": "61a05dd4fcee56bbdf1f908fb5705c0f0d1e38cab2589fa78d309061baf3b652",
    "created_at": "2025-10-07T09:26:56.889342+00:00",
    "v": 3
  },
  {
    "chunk_id": "6c2c5fe5d4d8227b2fa4fbc627dc87bdbe0a62904187beec161d10fab9b4fe73",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/bitbucket-pipelines.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 50,
    "ast_path": "block_1",
    "text": "clone:\n  depth: full\nimage: atlassian/default-image:4\n\npipelines:\n  pull-requests:\n    \"feature/*\":\n      - step:\n          name: Fix Coding Standards\n          image: golang:1.23\n          script:\n            - gofmt -s -w .\n            - |\n              [ -n \"$(git status -s)\" ] \\\n              && git commit -am \"Fix Go coding standard.\" && git push \\\n              || echo \"Nothing to commit.\"\n\n      - step: &run-unit-tests\n          name: Run Unit Tests\n          image: golang:1.23\n          script:\n            - go env -w GOPRIVATE=go.impalastudios.com\n            - git config --global url.ssh://git@bitbucket.org/.insteadOf https://bitbucket.org/\n            - go mod download\n            - go install github.com/jstemmer/go-junit-report/v2@latest\n            - go install github.com/axw/gocov/gocov@latest\n            - go install github.com/AlekSi/gocov-xml@latest\n            - mkdir -p test-results\n            - go test -short -v -timeout 30s -race -coverprofile=coverage.out ./... --tags unit | tee test-results/test_output.txt\n            - cat test-results/test_output.txt | go-junit-report > test-results/report.xml\n            - gocov convert coverage.out | gocov-xml > test-results/coverage.xml\n          artifacts:\n            - test-results/*\n\n      - step: &publish-golang-metrics\n          name: Publish Golang Metrics\n          script:\n            - line_rate=$(grep -oP '(?<=line-rate=\")[^\"]*' test-results/coverage.xml | head -n 1)\n            - lines_valid=$(grep -oP '(?<=lines-valid=\")[^\"]*' test-results/coverage.xml | head -n 1)\n            - tests_run=$(grep -oP '(?<=tests=\")[^\"]*' test-results/report.xml | head -n 1)\n            - line_rate_percent=$(awk \"BEGIN {print $line_rate * 100}\")\n            - loc_template=0\n            - if [ -f template.yml ]; then\n              loc_template=$(wc -l < template.yml);\n              fi\n            - INFLUXDB_DOMAIN_ESCAPED=$(echo \"${INFLUXDB_DOMAIN}\" | sed 's/ /\\\\ /g')\n            - INFLUXDB_SERVICE_ESCAPED=$(echo \"${INFLUXDB_SERVICE}\" | sed 's/ /\\\\ /g')\n            - TIMESTAMP=$(date -u +%s)\n            - TAGS=\"domain=${INFLUXDB_DOMAIN_ESCAPED},service=${INFLUXDB_SERVICE_ESCAPED}\"\n            - |",
    "header_context": "",
    "core": "clone:\n  depth: full\nimage: atlassian/default-image:4\n\npipelines:\n  pull-requests:\n    \"feature/*\":\n      - step:\n          name: Fix Coding Standards\n          image: golang:1.23\n          script:\n            - gofmt -s -w .\n            - |\n              [ -n \"$(git status -s)\" ] \\\n              && git commit -am \"Fix Go coding standard.\" && git push \\\n              || echo \"Nothing to commit.\"\n\n      - step: &run-unit-tests\n          name: Run Unit Tests\n          image: golang:1.23\n          script:\n            - go env -w GOPRIVATE=go.impalastudios.com\n            - git config --global url.ssh://git@bitbucket.org/.insteadOf https://bitbucket.org/\n            - go mod download\n            - go install github.com/jstemmer/go-junit-report/v2@latest\n            - go install github.com/axw/gocov/gocov@latest\n            - go install github.com/AlekSi/gocov-xml@latest\n            - mkdir -p test-results\n            - go test -short -v -timeout 30s -race -coverprofile=coverage.out ./... --tags unit | tee test-results/test_output.txt\n            - cat test-results/test_output.txt | go-junit-report > test-results/report.xml\n            - gocov convert coverage.out | gocov-xml > test-results/coverage.xml\n          artifacts:\n            - test-results/*\n\n      - step: &publish-golang-metrics\n          name: Publish Golang Metrics\n          script:\n            - line_rate=$(grep -oP '(?<=line-rate=\")[^\"]*' test-results/coverage.xml | head -n 1)\n            - lines_valid=$(grep -oP '(?<=lines-valid=\")[^\"]*' test-results/coverage.xml | head -n 1)\n            - tests_run=$(grep -oP '(?<=tests=\")[^\"]*' test-results/report.xml | head -n 1)\n            - line_rate_percent=$(awk \"BEGIN {print $line_rate * 100}\")\n            - loc_template=0\n            - if [ -f template.yml ]; then\n              loc_template=$(wc -l < template.yml);\n              fi\n            - INFLUXDB_DOMAIN_ESCAPED=$(echo \"${INFLUXDB_DOMAIN}\" | sed 's/ /\\\\ /g')\n            - INFLUXDB_SERVICE_ESCAPED=$(echo \"${INFLUXDB_SERVICE}\" | sed 's/ /\\\\ /g')\n            - TIMESTAMP=$(date -u +%s)\n            - TAGS=\"domain=${INFLUXDB_DOMAIN_ESCAPED},service=${INFLUXDB_SERVICE_ESCAPED}\"\n            - |",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 202,
      "footer": 0,
      "total": 202
    },
    "file_sha": "380062f49febe70ba7752130c8f1bf209f13472d244eb4dfb7dfafdb056c7a0d",
    "created_at": "2025-10-07T09:26:56.890041+00:00",
    "v": 3
  },
  {
    "chunk_id": "8f6d81def21be7ceda4df90b7db719e9f61d9481196671de65e924665e6af712",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/bitbucket-pipelines.yml",
    "language": "yaml",
    "start_line": 51,
    "end_line": 61,
    "ast_path": "block_2",
    "text": "              DATA=\"code_coverage,${TAGS} percent=${line_rate_percent} ${TIMESTAMP}\n              tests,${TAGS} total=${tests_run} ${TIMESTAMP}\n              loc,${TAGS} golang_loc=${lines_valid},cf_loc=${loc_template} ${TIMESTAMP}\"\n            - |\n              curl --request POST \"https://eu-central-1-1.aws.cloud2.influxdata.com/api/v2/write?bucket=${INFLUXDB_APIS_SERVICES_BUCKET_NAME}&org=${INFLUXDB_ORG_ID}&precision=s\" \\\n              --header \"Authorization: Token ${INFLUXDB_APIS_SERVICES_API_TOKEN}\" \\\n              --header \"Content-Type: text/plain; charset=utf-8\" \\\n              --data-binary \"$DATA\"\n          artifacts:\n            - test-results/*\n",
    "header_context": "",
    "core": "              DATA=\"code_coverage,${TAGS} percent=${line_rate_percent} ${TIMESTAMP}\n              tests,${TAGS} total=${tests_run} ${TIMESTAMP}\n              loc,${TAGS} golang_loc=${lines_valid},cf_loc=${loc_template} ${TIMESTAMP}\"\n            - |\n              curl --request POST \"https://eu-central-1-1.aws.cloud2.influxdata.com/api/v2/write?bucket=${INFLUXDB_APIS_SERVICES_BUCKET_NAME}&org=${INFLUXDB_ORG_ID}&precision=s\" \\\n              --header \"Authorization: Token ${INFLUXDB_APIS_SERVICES_API_TOKEN}\" \\\n              --header \"Content-Type: text/plain; charset=utf-8\" \\\n              --data-binary \"$DATA\"\n          artifacts:\n            - test-results/*\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 11 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 31,
      "footer": 0,
      "total": 31
    },
    "file_sha": "380062f49febe70ba7752130c8f1bf209f13472d244eb4dfb7dfafdb056c7a0d",
    "created_at": "2025-10-07T09:26:56.890081+00:00",
    "v": 3
  },
  {
    "chunk_id": "20a367514b2874c5c34d3996d6fa5c396c402895ad26a6507572af5757f24c58",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.docker/grafana/dashboards/all.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 12,
    "ast_path": "block_1",
    "text": "apiVersion: 1\n\nproviders:\n- name: 'default'\n  orgId: 1\n  folder: ''\n  type: file\n  disableDeletion: false\n  updateIntervalSeconds: 60\n  options:\n    path: /var/lib/grafana/dashboards\n",
    "header_context": "",
    "core": "apiVersion: 1\n\nproviders:\n- name: 'default'\n  orgId: 1\n  folder: ''\n  type: file\n  disableDeletion: false\n  updateIntervalSeconds: 60\n  options:\n    path: /var/lib/grafana/dashboards\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 12 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 19,
      "footer": 0,
      "total": 19
    },
    "file_sha": "b78a8a6db93304f756fb15ff769370c9012546a4271e358f95499856a1abd042",
    "created_at": "2025-10-07T09:26:56.892976+00:00",
    "v": 3
  },
  {
    "chunk_id": "3fe936458afc3f839dcd119b0047da5f1d22bf070d031f11f93be1b2d721fbaa",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.docker/grafana/datasources/prometheus.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 20,
    "ast_path": "block_1",
    "text": "apiVersion: 1\n\ndatasources:\n- access: proxy\n  id: 1\n  orgId: 1\n  name: Prometheus\n  type: prometheus\n  typeName: Prometheus\n  url: http://prometheus:9090\n  user: \"\"\n  database: \"\"\n  basicAuth: false\n  isDefault: true\n  jsonData:\n    httpMethod: POST\n  readOnly: false\n  editable: true\n  # This UID matches the one used in the dashboard settings file\n  uid: prometheus",
    "header_context": "",
    "core": "apiVersion: 1\n\ndatasources:\n- access: proxy\n  id: 1\n  orgId: 1\n  name: Prometheus\n  type: prometheus\n  typeName: Prometheus\n  url: http://prometheus:9090\n  user: \"\"\n  database: \"\"\n  basicAuth: false\n  isDefault: true\n  jsonData:\n    httpMethod: POST\n  readOnly: false\n  editable: true\n  # This UID matches the one used in the dashboard settings file\n  uid: prometheus",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 20 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 47,
      "footer": 0,
      "total": 47
    },
    "file_sha": "90b23890f2f42d7c2bf5575b24b3009be4e003b902636dc04e664ee6eb41c5ca",
    "created_at": "2025-10-07T09:26:56.893034+00:00",
    "v": 3
  },
  {
    "chunk_id": "e5a4233a1cc46526990526eccae5ce97dc289a23a7a738582ef32f95b613eb52",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/root.go",
    "language": "go",
    "start_line": 1,
    "end_line": 9,
    "ast_path": "go:file_header",
    "text": "package cmd\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)",
    "header_context": "",
    "core": "package cmd\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/cmd/serve",
      "strings",
      "github.com/spf13/cobra",
      "github.com/spf13/viper"
    ],
    "neighbors": {
      "prev": null,
      "next": "262a5630fe4e5edf80bbf5bcf85bc1e3d6c58ca568f8d4af0b8e43d7d32e3529"
    },
    "summary_1l": "Go package cmd",
    "qa_terms": "cmd, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 43,
      "footer": 0,
      "total": 43
    },
    "file_sha": "b2f12c7b3db711f3a3c61165dcaf59125a4ba6db089a5f5363d5538cf370dc0f",
    "created_at": "2025-10-07T09:26:57.014101+00:00",
    "v": 3
  },
  {
    "chunk_id": "262a5630fe4e5edf80bbf5bcf85bc1e3d6c58ca568f8d4af0b8e43d7d32e3529",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 12,
    "end_line": 26,
    "ast_path": "go:function_declaration#part1_block1",
    "text": "package cmd\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n)\nfunc RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")",
    "header_context": "package cmd\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n)",
    "core": "func RunRootCmd() error {\n\tviper.AutomaticEnv()\n\tviper.SetEnvKeyReplacer(strings.NewReplacer(\".\", \"_\", \"-\", \"_\"))\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"weather-foreca-proxy\",\n\t\tShort:   \"[Weather] Foreca Proxy Microservice\",\n\t\tVersion: \"1.0.0\",\n\t}\n\n\tcmd.AddCommand(serve.New())\n\n\tcmd.PersistentFlags().Bool(\"logging.debug\", false, \"Whether to emit debug level logs or not.\")\n\tcmd.PersistentFlags().String(\"logging.encoding\", \"json\", \"The log encoding strategy.\")\n\tcmd.PersistentFlags().StringP(\"app.name\", \"n\", \"[Weather] Foreca Proxy\", \"The application name.\")",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Command",
      "AutomaticEnv",
      "StringP",
      "AddCommand",
      "Short",
      "NewReplacer",
      "New",
      "String",
      "Version",
      "RunRootCmd",
      "SetEnvKeyReplacer",
      "Use",
      "error",
      "Bool",
      "PersistentFlags"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e5a4233a1cc46526990526eccae5ce97dc289a23a7a738582ef32f95b613eb52",
      "next": "2c7dce56fca789f3caef9e3df05fc16c036f8ad680be1dfec5f2850d64ff4a41"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 43,
      "core": 145,
      "footer": 0,
      "total": 188
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.019131+00:00",
    "v": 3
  },
  {
    "chunk_id": "2c7dce56fca789f3caef9e3df05fc16c036f8ad680be1dfec5f2850d64ff4a41",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 27,
    "end_line": 41,
    "ast_path": "go:function_declaration#part2_provider_call",
    "text": "package cmd\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n)\n\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times to request the forecasts about.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.temp-unit\", \"C\", \"The default temperature unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.wind-unit\", \"KMH\", \"The default wind speed unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.lang\", \"en\", \"The locale of the forecast's descriptions.\")\n\n\tcmd.PersistentFlags().String(\"mappings.dynamodb.table-name\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"memcached.address\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")",
    "header_context": "package cmd\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n)",
    "core": "\n\tcmd.PersistentFlags().String(\"foreca.endpoint-url\", \"https://pfa.foreca.com/data\", \"The provider endpoint.\")\n\tcmd.PersistentFlags().String(\"foreca.requests-per-second\", \"200\", \"The rate limit applied to Foreca.\")\n\tcmd.PersistentFlags().String(\"foreca.expiration-duration\", \"30m\", \"The amount of time an already requested forecast should be considered fresh.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.format\", \"xml/itwcalculator-jun17pres\", \"The default value for format query param.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.ftimes\", \"240/24h/0,240/1h\", \"The default times to request the forecasts about.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.temp-unit\", \"C\", \"The default temperature unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.wind-unit\", \"KMH\", \"The default wind speed unit.\")\n\tcmd.PersistentFlags().String(\"foreca.query.default.lang\", \"en\", \"The locale of the forecast's descriptions.\")\n\n\tcmd.PersistentFlags().String(\"mappings.dynamodb.table-name\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"memcached.address\", \"\", \"The DynamoDB table name.\")\n\n\tcmd.PersistentFlags().String(\"aws.access-key-id\", \"\", \"The AWS access key ID.\")",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "String",
      "PersistentFlags"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "262a5630fe4e5edf80bbf5bcf85bc1e3d6c58ca568f8d4af0b8e43d7d32e3529",
      "next": "ba06c744800a2eab667d2ce4fab4c697334540973028039b298a4ec824e3d5ef"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 43,
      "core": 277,
      "footer": 0,
      "total": 319
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.020024+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba06c744800a2eab667d2ce4fab4c697334540973028039b298a4ec824e3d5ef",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 42,
    "end_line": 50,
    "ast_path": "go:function_declaration#part3_block3",
    "text": "package cmd\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n)\n\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}",
    "header_context": "package cmd\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd/serve\"\n\t\"strings\"\n)",
    "core": "\tcmd.PersistentFlags().String(\"aws.secret-access-key\", \"\", \"The AWS secret access key.\")\n\tcmd.PersistentFlags().String(\"aws.session-token\", \"\", \"The AWS session token.\")\n\tcmd.PersistentFlags().String(\"aws.endpoint-url\", \"\", \"The AWS endpoint.\")\n\tcmd.PersistentFlags().String(\"aws.region\", \"\", \"The AWS region.\")\n\n\t_ = viper.BindPFlags(cmd.PersistentFlags())\n\n\treturn cmd.Execute()\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "BindPFlags",
      "Execute",
      "String",
      "PersistentFlags"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2c7dce56fca789f3caef9e3df05fc16c036f8ad680be1dfec5f2850d64ff4a41",
      "next": null
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 43,
      "core": 83,
      "footer": 0,
      "total": 126
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.020397+00:00",
    "v": 3
  },
  {
    "chunk_id": "c47c6744a1e98dd070510e8c84dee4e12739c7fc5fa84e4beda969cc82480752",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 10,
    "end_line": 12,
    "ast_path": "go:file_header",
    "text": "package mocks\n\nimport (",
    "header_context": "",
    "core": "package mocks\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "reflect",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": null,
      "next": "d0719962e0b9a5c200928190a06328355e73318762c5e2101b8982adf917c2f0"
    },
    "summary_1l": "Go package  with cache",
    "qa_terms": ", cache, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 5,
      "footer": 0,
      "total": 5
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.012592+00:00",
    "v": 3
  },
  {
    "chunk_id": "d0719962e0b9a5c200928190a06328355e73318762c5e2101b8982adf917c2f0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 23,
    "end_line": 26,
    "ast_path": "go:type:MockproviderClient (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockproviderClient"
    ],
    "symbols_referenced": [
      "MockproviderClientMockRecorder",
      "gomock.Controller"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "c47c6744a1e98dd070510e8c84dee4e12739c7fc5fa84e4beda969cc82480752",
      "next": "b4fd7e9df464c58e4f8b52c4cb5f6e7435a385aca2acdf6dee3a1ad34a56babc"
    },
    "summary_1l": "Go struct MockproviderClient for weather forecasting",
    "qa_terms": "MockproviderClient, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 23,
      "footer": 0,
      "total": 37
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.018459+00:00",
    "v": 3
  },
  {
    "chunk_id": "b4fd7e9df464c58e4f8b52c4cb5f6e7435a385aca2acdf6dee3a1ad34a56babc",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 29,
    "end_line": 31,
    "ast_path": "go:type:MockproviderClientMockRecorder (struct)",
    "text": "package main\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}",
    "header_context": "package main",
    "core": "type MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockproviderClientMockRecorder"
    ],
    "symbols_referenced": [
      "MockproviderClient"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d0719962e0b9a5c200928190a06328355e73318762c5e2101b8982adf917c2f0",
      "next": "ef763de68cf06d7076952ab3d8746419176337ee40ed8a26684a2f85bd1e593b"
    },
    "summary_1l": "Go struct MockproviderClientMockRecorder for weather forecasting",
    "qa_terms": "MockproviderClientMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 15,
      "footer": 0,
      "total": 18
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.018610+00:00",
    "v": 3
  },
  {
    "chunk_id": "ef763de68cf06d7076952ab3d8746419176337ee40ed8a26684a2f85bd1e593b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 34,
    "end_line": 38,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "gomock.Controller",
      "MockproviderClient",
      "MockproviderClientMockRecorder",
      "NewMockproviderClient",
      "mock"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "b4fd7e9df464c58e4f8b52c4cb5f6e7435a385aca2acdf6dee3a1ad34a56babc",
      "next": "6edd865d33ad8a8ad2ca6778410dbe35bdb7f62cb4f485fadfa3e594d1551bb2"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 44,
      "footer": 0,
      "total": 58
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.019046+00:00",
    "v": 3
  },
  {
    "chunk_id": "6edd865d33ad8a8ad2ca6778410dbe35bdb7f62cb4f485fadfa3e594d1551bb2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 41,
    "end_line": 43,
    "ast_path": "go:method:(m *MockproviderClient).EXPECT",
    "text": "package main\n// receiver: m *MockproviderClient\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *MockproviderClient",
    "core": "func (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockproviderClient",
      "MockproviderClientMockRecorder"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ef763de68cf06d7076952ab3d8746419176337ee40ed8a26684a2f85bd1e593b",
      "next": "aa7303a47ab6d593eca755b428ed682100597e3cc309eb625748199bc18311c9"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 11,
      "core": 23,
      "footer": 0,
      "total": 35
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.019294+00:00",
    "v": 3
  },
  {
    "chunk_id": "aa7303a47ab6d593eca755b428ed682100597e3cc309eb625748199bc18311c9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 46,
    "end_line": 52,
    "ast_path": "go:method:(m *MockproviderClient).GetForecastForLocation",
    "text": "package main\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"time\"\n)\n// receiver: m *MockproviderClient\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"time\"\n)\n// receiver: m *MockproviderClient",
    "core": "func (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "time.Location",
      "MockproviderClient",
      "Call",
      "foreca.Forecast",
      "context.Context",
      "Helper",
      "ret1",
      "loc",
      "error"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "context",
      "time"
    ],
    "neighbors": {
      "prev": "6edd865d33ad8a8ad2ca6778410dbe35bdb7f62cb4f485fadfa3e594d1551bb2",
      "next": "9e0f17383e87bbb5b6d747332d2d4254f0ec3fad927db2937cd20f3248bea142"
    },
    "summary_1l": "Go method GetForecastForLocation on m *MockproviderClient",
    "qa_terms": "GetForecastForLocation, foreca, m MockproviderClient, proxy, weather",
    "token_counts": {
      "header": 37,
      "core": 92,
      "footer": 0,
      "total": 130
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.019738+00:00",
    "v": 3
  },
  {
    "chunk_id": "9e0f17383e87bbb5b6d747332d2d4254f0ec3fad927db2937cd20f3248bea142",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 55,
    "end_line": 58,
    "ast_path": "go:method:(mr *MockproviderClientMockRecorder).GetForecastForLocation",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockproviderClientMockRecorder\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockproviderClientMockRecorder",
    "core": "func (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "RecordCallWithMethodType",
      "gomock.Call",
      "reflect.TypeOf",
      "any",
      "MockproviderClient",
      "MockproviderClientMockRecorder",
      "Helper",
      "loc"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "aa7303a47ab6d593eca755b428ed682100597e3cc309eb625748199bc18311c9",
      "next": "cc0ac44a9f176ca37dea5e4c110cb8161089b7a5885e17a9dd9f13b44061eb52"
    },
    "summary_1l": "Go method GetForecastForLocation on mr *MockproviderClientMockRecorder",
    "qa_terms": "GetForecastForLocation, foreca, mr MockproviderClientMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 73,
      "footer": 0,
      "total": 104
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.020109+00:00",
    "v": 3
  },
  {
    "chunk_id": "cc0ac44a9f176ca37dea5e4c110cb8161089b7a5885e17a9dd9f13b44061eb52",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 61,
    "end_line": 64,
    "ast_path": "go:type:MockmappingsRepository (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockmappingsRepository"
    ],
    "symbols_referenced": [
      "MockmappingsRepositoryMockRecorder",
      "gomock.Controller"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "9e0f17383e87bbb5b6d747332d2d4254f0ec3fad927db2937cd20f3248bea142",
      "next": "7a1100a513b0c93a2c19afc05a003c9289f9061873fec8b0fc85f28135564cf2"
    },
    "summary_1l": "Go struct MockmappingsRepository for weather forecasting",
    "qa_terms": "MockmappingsRepository, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 25,
      "footer": 0,
      "total": 39
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.020253+00:00",
    "v": 3
  },
  {
    "chunk_id": "7a1100a513b0c93a2c19afc05a003c9289f9061873fec8b0fc85f28135564cf2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 67,
    "end_line": 69,
    "ast_path": "go:type:MockmappingsRepositoryMockRecorder (struct)",
    "text": "package main\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}",
    "header_context": "package main",
    "core": "type MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockmappingsRepositoryMockRecorder"
    ],
    "symbols_referenced": [
      "MockmappingsRepository"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "cc0ac44a9f176ca37dea5e4c110cb8161089b7a5885e17a9dd9f13b44061eb52",
      "next": "b013c0fec59c668d9bd6cf5a01ad5c8ff8acc6288b62b33aa2b1271e87477969"
    },
    "summary_1l": "Go struct MockmappingsRepositoryMockRecorder for weather forecasting",
    "qa_terms": "MockmappingsRepositoryMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 17,
      "footer": 0,
      "total": 20
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.020494+00:00",
    "v": 3
  },
  {
    "chunk_id": "b013c0fec59c668d9bd6cf5a01ad5c8ff8acc6288b62b33aa2b1271e87477969",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 72,
    "end_line": 76,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "MockmappingsRepository",
      "gomock.Controller",
      "NewMockmappingsRepository",
      "MockmappingsRepositoryMockRecorder",
      "mock"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "7a1100a513b0c93a2c19afc05a003c9289f9061873fec8b0fc85f28135564cf2",
      "next": "fefa3f436b4e7a98d7e46b3b4f0874b45c1e123a36cd3d5f985c42f35039ff7e"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 48,
      "footer": 0,
      "total": 62
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.021719+00:00",
    "v": 3
  },
  {
    "chunk_id": "fefa3f436b4e7a98d7e46b3b4f0874b45c1e123a36cd3d5f985c42f35039ff7e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 79,
    "end_line": 81,
    "ast_path": "go:method:(m *MockmappingsRepository).EXPECT",
    "text": "package main\n// receiver: m *MockmappingsRepository\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *MockmappingsRepository",
    "core": "func (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockmappingsRepository",
      "MockmappingsRepositoryMockRecorder"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b013c0fec59c668d9bd6cf5a01ad5c8ff8acc6288b62b33aa2b1271e87477969",
      "next": "d671872b315b1b14bc37221441206c64e8f77c2604264e0cf114654ee5afe428"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 12,
      "core": 25,
      "footer": 0,
      "total": 38
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.022106+00:00",
    "v": 3
  },
  {
    "chunk_id": "d671872b315b1b14bc37221441206c64e8f77c2604264e0cf114654ee5afe428",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 84,
    "end_line": 90,
    "ast_path": "go:method:(m *MockmappingsRepository).Get",
    "text": "package main\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n)\n// receiver: m *MockmappingsRepository\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n)\n// receiver: m *MockmappingsRepository",
    "core": "func (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "MockmappingsRepository",
      "id",
      "error",
      "Call",
      "Helper",
      "context.Context",
      "ret1",
      "foreca.Mapping"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "context"
    ],
    "neighbors": {
      "prev": "fefa3f436b4e7a98d7e46b3b4f0874b45c1e123a36cd3d5f985c42f35039ff7e",
      "next": "d03ad0fd08f85f2a6a1597824f5afb600ee65a7719d4fff1960a1779e148228e"
    },
    "summary_1l": "Go method Get on m *MockmappingsRepository",
    "qa_terms": "Get, foreca, m MockmappingsRepository, proxy, weather",
    "token_counts": {
      "header": 35,
      "core": 78,
      "footer": 0,
      "total": 114
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.022539+00:00",
    "v": 3
  },
  {
    "chunk_id": "d03ad0fd08f85f2a6a1597824f5afb600ee65a7719d4fff1960a1779e148228e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 93,
    "end_line": 96,
    "ast_path": "go:method:(mr *MockmappingsRepositoryMockRecorder).Get",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockmappingsRepositoryMockRecorder\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockmappingsRepositoryMockRecorder",
    "core": "func (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "RecordCallWithMethodType",
      "gomock.Call",
      "MockmappingsRepository",
      "reflect.TypeOf",
      "any",
      "id",
      "Helper",
      "MockmappingsRepositoryMockRecorder"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "d671872b315b1b14bc37221441206c64e8f77c2604264e0cf114654ee5afe428",
      "next": "427fea644e89a3ebe00dfa335592deb278c8cb46eac7d99c5357303bb01673dc"
    },
    "summary_1l": "Go method Get on mr *MockmappingsRepositoryMockRecorder",
    "qa_terms": "Get, foreca, mr MockmappingsRepositoryMockRecorder, proxy, weather",
    "token_counts": {
      "header": 31,
      "core": 62,
      "footer": 0,
      "total": 94
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.022895+00:00",
    "v": 3
  },
  {
    "chunk_id": "427fea644e89a3ebe00dfa335592deb278c8cb46eac7d99c5357303bb01673dc",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 99,
    "end_line": 102,
    "ast_path": "go:type:MockcacheClient (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockcacheClient"
    ],
    "symbols_referenced": [
      "MockcacheClientMockRecorder",
      "gomock.Controller"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "d03ad0fd08f85f2a6a1597824f5afb600ee65a7719d4fff1960a1779e148228e",
      "next": "94b45b177bd3f9614aa06b8343f6890a804fa2e5a8674dd2648ddd395507b224"
    },
    "summary_1l": "Go struct MockcacheClient for weather forecasting",
    "qa_terms": "MockcacheClient, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 23,
      "footer": 0,
      "total": 37
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.023036+00:00",
    "v": 3
  },
  {
    "chunk_id": "94b45b177bd3f9614aa06b8343f6890a804fa2e5a8674dd2648ddd395507b224",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 105,
    "end_line": 107,
    "ast_path": "go:type:MockcacheClientMockRecorder (struct)",
    "text": "package main\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}",
    "header_context": "package main",
    "core": "type MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockcacheClientMockRecorder"
    ],
    "symbols_referenced": [
      "MockcacheClient"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "427fea644e89a3ebe00dfa335592deb278c8cb46eac7d99c5357303bb01673dc",
      "next": "95db05314d98d9c869f17acdcfd662877ad884ffa19e417973669fc43ac8572e"
    },
    "summary_1l": "Go struct MockcacheClientMockRecorder for weather forecasting",
    "qa_terms": "MockcacheClientMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 15,
      "footer": 0,
      "total": 18
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.023114+00:00",
    "v": 3
  },
  {
    "chunk_id": "95db05314d98d9c869f17acdcfd662877ad884ffa19e417973669fc43ac8572e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 110,
    "end_line": 114,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "MockcacheClient",
      "gomock.Controller",
      "MockcacheClientMockRecorder",
      "NewMockcacheClient",
      "mock"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "94b45b177bd3f9614aa06b8343f6890a804fa2e5a8674dd2648ddd395507b224",
      "next": "53fe88e86350f069c3e397a603cf83566af0229adc341f5777459c27907958af"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 44,
      "footer": 0,
      "total": 58
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.023378+00:00",
    "v": 3
  },
  {
    "chunk_id": "53fe88e86350f069c3e397a603cf83566af0229adc341f5777459c27907958af",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 117,
    "end_line": 119,
    "ast_path": "go:method:(m *MockcacheClient).EXPECT",
    "text": "package main\n// receiver: m *MockcacheClient\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *MockcacheClient",
    "core": "func (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockcacheClient",
      "MockcacheClientMockRecorder"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "95db05314d98d9c869f17acdcfd662877ad884ffa19e417973669fc43ac8572e",
      "next": "c099af04bfe2b6555a50e08571f4953138d72011ec88bebfc6e0d5bc7020bf82"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 11,
      "core": 23,
      "footer": 0,
      "total": 35
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.023553+00:00",
    "v": 3
  },
  {
    "chunk_id": "c099af04bfe2b6555a50e08571f4953138d72011ec88bebfc6e0d5bc7020bf82",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 122,
    "end_line": 128,
    "ast_path": "go:method:(m *MockcacheClient).Get",
    "text": "package main\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n// receiver: m *MockcacheClient\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n// receiver: m *MockcacheClient",
    "core": "func (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "MockcacheClient",
      "Call",
      "Helper",
      "ret1",
      "key",
      "cache.Item",
      "error"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache"
    ],
    "neighbors": {
      "prev": "53fe88e86350f069c3e397a603cf83566af0229adc341f5777459c27907958af",
      "next": "2baaed7010dc1fc1866288adafdd8d24952c368151b43fafec35d1145b287547"
    },
    "summary_1l": "Go method Get on m *MockcacheClient",
    "qa_terms": "Get, cache, foreca, m MockcacheClient, proxy, weather",
    "token_counts": {
      "header": 27,
      "core": 69,
      "footer": 0,
      "total": 97
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.024448+00:00",
    "v": 3
  },
  {
    "chunk_id": "2baaed7010dc1fc1866288adafdd8d24952c368151b43fafec35d1145b287547",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 131,
    "end_line": 134,
    "ast_path": "go:method:(mr *MockcacheClientMockRecorder).Get",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheClientMockRecorder\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheClientMockRecorder",
    "core": "func (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "MockcacheClient",
      "RecordCallWithMethodType",
      "gomock.Call",
      "reflect.TypeOf",
      "any",
      "MockcacheClientMockRecorder",
      "Helper",
      "key"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "c099af04bfe2b6555a50e08571f4953138d72011ec88bebfc6e0d5bc7020bf82",
      "next": "93220cf1f409d2cbc4e8156d0e10e0fa2594aec97ff91d94a48363fdc926366c"
    },
    "summary_1l": "Go method Get on mr *MockcacheClientMockRecorder",
    "qa_terms": "Get, foreca, mr MockcacheClientMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 56,
      "footer": 0,
      "total": 87
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.024845+00:00",
    "v": 3
  },
  {
    "chunk_id": "93220cf1f409d2cbc4e8156d0e10e0fa2594aec97ff91d94a48363fdc926366c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 137,
    "end_line": 142,
    "ast_path": "go:method:(m *MockcacheClient).Set",
    "text": "package main\n// receiver: m *MockcacheClient\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "header_context": "package main\n// receiver: m *MockcacheClient",
    "core": "func (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "MockcacheClient",
      "Call",
      "Helper",
      "ret0",
      "value",
      "error"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2baaed7010dc1fc1866288adafdd8d24952c368151b43fafec35d1145b287547",
      "next": "af9b7f4da8940a9d6e72915c75dff482095d6f57cdf8ba76e62542a9851ed7d7"
    },
    "summary_1l": "Go method Set on m *MockcacheClient",
    "qa_terms": "Set, foreca, m MockcacheClient, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 54,
      "footer": 0,
      "total": 66
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.025106+00:00",
    "v": 3
  },
  {
    "chunk_id": "af9b7f4da8940a9d6e72915c75dff482095d6f57cdf8ba76e62542a9851ed7d7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go",
    "language": "go",
    "start_line": 145,
    "end_line": 148,
    "ast_path": "go:method:(mr *MockcacheClientMockRecorder).Set",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheClientMockRecorder\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheClientMockRecorder",
    "core": "func (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "MockcacheClient",
      "RecordCallWithMethodType",
      "gomock.Call",
      "reflect.TypeOf",
      "any",
      "MockcacheClientMockRecorder",
      "Helper",
      "value"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "93220cf1f409d2cbc4e8156d0e10e0fa2594aec97ff91d94a48363fdc926366c",
      "next": null
    },
    "summary_1l": "Go method Set on mr *MockcacheClientMockRecorder",
    "qa_terms": "Set, foreca, mr MockcacheClientMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 60,
      "footer": 0,
      "total": 91
    },
    "file_sha": "5f42273ac56c95467b1becf6c39607974099c981a739c1cc1c02ad2d607625d9",
    "created_at": "2025-10-07T09:26:57.025396+00:00",
    "v": 3
  },
  {
    "chunk_id": "53dc81d7ce4bb0013af9f6d3b6cca713f82d9f746351e04cdf7ea5c8f1ffad7d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go",
    "language": "go",
    "start_line": 1,
    "end_line": 6,
    "ast_path": "go:file_header",
    "text": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package serve\n\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "github.com/spf13/cobra",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "78f013cd872b418c56b6ba978d107671d6e6a2a62d3501c3f00ef6ac1c5d2d08"
    },
    "summary_1l": "Go package serve",
    "qa_terms": "serve, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 18,
      "footer": 0,
      "total": 18
    },
    "file_sha": "54dc594c83cf3451a4877b2d9650d7156e0ccf6dd9f7de949cf6d78d6c526b3e",
    "created_at": "2025-10-07T09:26:57.023217+00:00",
    "v": 3
  },
  {
    "chunk_id": "78f013cd872b418c56b6ba978d107671d6e6a2a62d3501c3f00ef6ac1c5d2d08",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/root.go",
    "language": "go",
    "start_line": 8,
    "end_line": 21,
    "ast_path": "go:function:",
    "text": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)\nfunc New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeGrpcCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}",
    "header_context": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"time\"\n)",
    "core": "func New() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve\",\n\t}\n\n\tcmd.AddCommand(newServeGrpcCommand())\n\n\tcmd.PersistentFlags().String(\"otel.tracer.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().String(\"otel.meter.endpoint\", \"localhost:4317\", \"The URL of the tracing collector.\")\n\tcmd.PersistentFlags().Duration(\"otel.meter.interval\", 60*time.Second, \"The interval which the metrics will be reported to the collector.\")\n\n\treturn cmd\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "time.Second",
      "Duration",
      "AddCommand",
      "New",
      "cobra.Command",
      "Use",
      "cmd",
      "String",
      "PersistentFlags",
      "Short"
    ],
    "imports_used": [
      "time",
      "github.com/spf13/cobra"
    ],
    "neighbors": {
      "prev": "53dc81d7ce4bb0013af9f6d3b6cca713f82d9f746351e04cdf7ea5c8f1ffad7d",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 18,
      "core": 121,
      "footer": 0,
      "total": 139
    },
    "file_sha": "54dc594c83cf3451a4877b2d9650d7156e0ccf6dd9f7de949cf6d78d6c526b3e",
    "created_at": "2025-10-07T09:26:57.027770+00:00",
    "v": 3
  },
  {
    "chunk_id": "0b2e28cb8cbfa611d1f9c4e7115dee5c8110229652a749776554f7fd7ea3d0e3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 1,
    "end_line": 8,
    "ast_path": "go:file_header",
    "text": "package foreca\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"",
    "header_context": "",
    "core": "package foreca\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "encoding/json",
      "fmt",
      "github.com/pkg/errors",
      "go.impalastudios.com/log",
      "go.impalastudios.com/otel",
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "go.opentelemetry.io/otel/attribute",
      "go.opentelemetry.io/otel/codes",
      "go.opentelemetry.io/otel/trace",
      "go.uber.org/zap",
      "golang.org/x/sync/singleflight",
      "strings",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "a88f604a95041cf6b110e48a252b2d2ebde3c7c23d645b1dadad979fded03bf7"
    },
    "summary_1l": "Go package foreca with otel, cache, attribute",
    "qa_terms": "foreca, otel, cache, attribute, codes, trace, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 31,
      "footer": 0,
      "total": 31
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.020516+00:00",
    "v": 3
  },
  {
    "chunk_id": "a88f604a95041cf6b110e48a252b2d2ebde3c7c23d645b1dadad979fded03bf7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 22,
    "end_line": 24,
    "ast_path": "go:type:providerClient (interface)",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"time\"\n)\nproviderClient interface {\nGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n}",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"time\"\n)",
    "core": "providerClient interface {\nGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "providerClient"
    ],
    "symbols_referenced": [
      "context.Context",
      "time.Location",
      "GetForecastForLocation",
      "error",
      "Forecast"
    ],
    "imports_used": [
      "context",
      "time"
    ],
    "neighbors": {
      "prev": "0b2e28cb8cbfa611d1f9c4e7115dee5c8110229652a749776554f7fd7ea3d0e3",
      "next": "f4c993d8d8f0e8e828b7eae65fe4a1b716241d9c9895eaab231b4386a614e7a2"
    },
    "summary_1l": "Go interface providerClient for weather forecasting",
    "qa_terms": "providerClient, interface, context, time, foreca, weather, proxy",
    "token_counts": {
      "header": 13,
      "core": 26,
      "footer": 0,
      "total": 39
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.021549+00:00",
    "v": 3
  },
  {
    "chunk_id": "f4c993d8d8f0e8e828b7eae65fe4a1b716241d9c9895eaab231b4386a614e7a2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 26,
    "end_line": 28,
    "ast_path": "go:type:mappingsRepository (interface)",
    "text": "package foreca\nimport \"context\"\nmappingsRepository interface {\nGet(ctx context.Context, id int) (*Mapping, error)\n}",
    "header_context": "package foreca\nimport \"context\"",
    "core": "mappingsRepository interface {\nGet(ctx context.Context, id int) (*Mapping, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "mappingsRepository"
    ],
    "symbols_referenced": [
      "context.Context",
      "Mapping",
      "Get",
      "error"
    ],
    "imports_used": [
      "context"
    ],
    "neighbors": {
      "prev": "a88f604a95041cf6b110e48a252b2d2ebde3c7c23d645b1dadad979fded03bf7",
      "next": "919b67cbafb83d1f1909ae979ec94ff853f2e7d921d2049be711e7d382564913"
    },
    "summary_1l": "Go interface mappingsRepository for weather forecasting",
    "qa_terms": "mappingsRepository, interface, context, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 19,
      "footer": 0,
      "total": 27
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.021661+00:00",
    "v": 3
  },
  {
    "chunk_id": "919b67cbafb83d1f1909ae979ec94ff853f2e7d921d2049be711e7d382564913",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 30,
    "end_line": 33,
    "ast_path": "go:type:cacheClient (interface)",
    "text": "package foreca\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\ncacheClient interface {\nGet(key string) (*cache.Item, error)\nSet(key string, value []byte) error\n}",
    "header_context": "package foreca\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"",
    "core": "cacheClient interface {\nGet(key string) (*cache.Item, error)\nSet(key string, value []byte) error\n}",
    "footer_context": "",
    "symbols_defined": [
      "cacheClient"
    ],
    "symbols_referenced": [
      "cache.Item",
      "Get",
      "Set",
      "error"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache"
    ],
    "neighbors": {
      "prev": "f4c993d8d8f0e8e828b7eae65fe4a1b716241d9c9895eaab231b4386a614e7a2",
      "next": "340a754b6a835c5c48ccd0a629041365ad74da0ac72b4575139c81344cd40f67"
    },
    "summary_1l": "Go interface cacheClient for weather forecasting",
    "qa_terms": "cacheClient, interface, cache, foreca, weather, proxy",
    "token_counts": {
      "header": 20,
      "core": 25,
      "footer": 0,
      "total": 45
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.021780+00:00",
    "v": 3
  },
  {
    "chunk_id": "340a754b6a835c5c48ccd0a629041365ad74da0ac72b4575139c81344cd40f67",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 36,
    "end_line": 43,
    "ast_path": "go:type:Service (struct)",
    "text": "package foreca\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}",
    "header_context": "package foreca\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"time\"\n)",
    "core": "type Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}",
    "footer_context": "",
    "symbols_defined": [
      "Service"
    ],
    "symbols_referenced": [
      "providerClient",
      "singleflight.Group",
      "cacheClient",
      "time.Duration",
      "mappingsRepository"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "golang.org/x/sync/singleflight",
      "time"
    ],
    "neighbors": {
      "prev": "919b67cbafb83d1f1909ae979ec94ff853f2e7d921d2049be711e7d382564913",
      "next": "a52ce9416947e4b7699752f2a42fcd7c0026d34c8e123b1ed55639c5af9105be"
    },
    "summary_1l": "Go struct Service for weather forecasting",
    "qa_terms": "Service, struct, cache, time, foreca, weather, proxy",
    "token_counts": {
      "header": 35,
      "core": 40,
      "footer": 0,
      "total": 75
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.022072+00:00",
    "v": 3
  },
  {
    "chunk_id": "a52ce9416947e4b7699752f2a42fcd7c0026d34c8e123b1ed55639c5af9105be",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 45,
    "end_line": 53,
    "ast_path": "go:function:",
    "text": "package foreca\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"time\"\n)\nfunc NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}",
    "header_context": "package foreca\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"time\"\n)",
    "core": "func NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewService",
      "time.Duration",
      "Service"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "time"
    ],
    "neighbors": {
      "prev": "340a754b6a835c5c48ccd0a629041365ad74da0ac72b4575139c81344cd40f67",
      "next": "8ea431e54c9d6e1952a84bcee84ed49a568cedc34459156c359d6c61ff61c3e6"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "cache, foreca, proxy, weather",
    "token_counts": {
      "header": 25,
      "core": 75,
      "footer": 0,
      "total": 100
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.022584+00:00",
    "v": 3
  },
  {
    "chunk_id": "8ea431e54c9d6e1952a84bcee84ed49a568cedc34459156c359d6c61ff61c3e6",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 55,
    "end_line": 75,
    "ast_path": "go:method:(*s Service).GetForecastForLocation#part1_timezone_load",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service\nfunc (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service",
    "core": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "SetStatus",
      "error",
      "Timezone",
      "RecordError",
      "Wrap",
      "Get",
      "ErrMappingNotFound",
      "id",
      "Service",
      "SetAttributes",
      "Forecast",
      "LoadLocation",
      "WithSpanKind",
      "Is",
      "End",
      "SpanKindInternal",
      "Start",
      "Context",
      "Int",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a52ce9416947e4b7699752f2a42fcd7c0026d34c8e123b1ed55639c5af9105be",
      "next": "1cd4bb8a96c0aeab2a5371d5ca18c5679f890eac7484edb4de1071e6029b570a"
    },
    "summary_1l": "Loads time zone via time.LoadLocation, records OTEL status on failure.",
    "qa_terms": "GetForecastForLocation, s Service",
    "token_counts": {
      "header": 94,
      "core": 177,
      "footer": 0,
      "total": 272
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.025068+00:00",
    "v": 3
  },
  {
    "chunk_id": "1cd4bb8a96c0aeab2a5371d5ca18c5679f890eac7484edb4de1071e6029b570a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 76,
    "end_line": 95,
    "ast_path": "go:method:(*s Service).GetForecastForLocation#part2_cache_lookup",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}\n\n\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service",
    "core": "\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}\n\n\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "item",
      "Any",
      "Error",
      "Do",
      "expirableCacheItem",
      "mapping",
      "RecordError",
      "Unmarshal",
      "ProviderID",
      "Wrap",
      "Get",
      "Debug",
      "SetStatus",
      "Int",
      "id",
      "Value",
      "error",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "8ea431e54c9d6e1952a84bcee84ed49a568cedc34459156c359d6c61ff61c3e6",
      "next": "fe45627baf19c22959b38466a4b2200f955897dcbb0859acc2395b012a9f09cc"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "GetForecastForLocation, s Service",
    "token_counts": {
      "header": 94,
      "core": 158,
      "footer": 0,
      "total": 253
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.025741+00:00",
    "v": 3
  },
  {
    "chunk_id": "fe45627baf19c22959b38466a4b2200f955897dcbb0859acc2395b012a9f09cc",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 96,
    "end_line": 111,
    "ast_path": "go:method:(*s Service).GetForecastForLocation#part3_cache_lookup",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service",
    "core": "\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "Bool",
      "ProviderID",
      "loc",
      "Unix",
      "error",
      "Debug",
      "UTC",
      "mapping",
      "id",
      "SetAttributes",
      "ExpiresAtUnix",
      "Forecast",
      "ErrRequestThrottled",
      "Is",
      "cacheHit",
      "Any",
      "Now",
      "Int",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1cd4bb8a96c0aeab2a5371d5ca18c5679f890eac7484edb4de1071e6029b570a",
      "next": "db429a685227d135bf898b6d9152a3626952f933660164390e38671f189cabfd"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "GetForecastForLocation, s Service",
    "token_counts": {
      "header": 94,
      "core": 147,
      "footer": 0,
      "total": 242
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.026299+00:00",
    "v": 3
  },
  {
    "chunk_id": "db429a685227d135bf898b6d9152a3626952f933660164390e38671f189cabfd",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 112,
    "end_line": 133,
    "ast_path": "go:method:(*s Service).GetForecastForLocation#part4_cache_lookup",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service",
    "core": "\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "item",
      "Error",
      "Bool",
      "Unix",
      "UTC",
      "mapping",
      "Unmarshal",
      "Add",
      "Info",
      "SetAttributes",
      "ExpiresAtUnix",
      "Forecast",
      "Marshal",
      "expirableCacheItem",
      "cacheExpirationDuration",
      "Value",
      "Any",
      "Now",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fe45627baf19c22959b38466a4b2200f955897dcbb0859acc2395b012a9f09cc",
      "next": "716d6c3e4017d962090b46ccf9b578e3bab70846afd1913723b53b089a14e708"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "GetForecastForLocation, s Service",
    "token_counts": {
      "header": 94,
      "core": 155,
      "footer": 0,
      "total": 250
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.026879+00:00",
    "v": 3
  },
  {
    "chunk_id": "716d6c3e4017d962090b46ccf9b578e3bab70846afd1913723b53b089a14e708",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 134,
    "end_line": 146,
    "ast_path": "go:method:(*s Service).GetForecastForLocation#part5_cache_lookup",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service",
    "core": "\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Any",
      "Error",
      "mapping",
      "b",
      "ProviderID",
      "Set",
      "Debug",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "db429a685227d135bf898b6d9152a3626952f933660164390e38671f189cabfd",
      "next": "5f34e3f49cfab2e8d9b8507e8bda59524e1338dc955792c8bfc07b72a1ccad12"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "GetForecastForLocation, s Service",
    "token_counts": {
      "header": 94,
      "core": 98,
      "footer": 0,
      "total": 193
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.027275+00:00",
    "v": 3
  },
  {
    "chunk_id": "5f34e3f49cfab2e8d9b8507e8bda59524e1338dc955792c8bfc07b72a1ccad12",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 147,
    "end_line": 159,
    "ast_path": "go:method:(*s Service).GetForecastForLocation#part6_error_handling",
    "text": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service\n\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}",
    "header_context": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"time\"\n)\n// receiver: s *Service",
    "core": "\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "RecordError",
      "id",
      "SetStatus",
      "Int",
      "Forecast",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "716d6c3e4017d962090b46ccf9b578e3bab70846afd1913723b53b089a14e708",
      "next": "1d3e3975efec3b34010dabc632bb577332a7f738af623c93e1fe015e06e1931b"
    },
    "summary_1l": "Error handling and logging with OTEL span status updates.",
    "qa_terms": "GetForecastForLocation, s Service",
    "token_counts": {
      "header": 94,
      "core": 79,
      "footer": 0,
      "total": 174
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.027628+00:00",
    "v": 3
  },
  {
    "chunk_id": "1d3e3975efec3b34010dabc632bb577332a7f738af623c93e1fe015e06e1931b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 161,
    "end_line": 163,
    "ast_path": "go:method:(s *Service).getCacheKeyForLocation",
    "text": "package foreca\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n// receiver: s *Service\nfunc (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}",
    "header_context": "package foreca\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n// receiver: s *Service",
    "core": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}",
    "footer_context": "",
    "symbols_defined": [
      "getCacheKeyForLocation"
    ],
    "symbols_referenced": [
      "fmt.Sprintf",
      "strings.Trim",
      "id",
      "Service"
    ],
    "imports_used": [
      "fmt",
      "strings"
    ],
    "neighbors": {
      "prev": "5f34e3f49cfab2e8d9b8507e8bda59524e1338dc955792c8bfc07b72a1ccad12",
      "next": "56b1c6814319e2ed375cf4485d7ac86a0d6ca71ea29f1bd00e021aeeec9abf0b"
    },
    "summary_1l": "Go method getCacheKeyForLocation on s *Service",
    "qa_terms": "foreca, getCacheKeyForLocation, proxy, s Service, weather",
    "token_counts": {
      "header": 19,
      "core": 36,
      "footer": 0,
      "total": 56
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.028030+00:00",
    "v": 3
  },
  {
    "chunk_id": "56b1c6814319e2ed375cf4485d7ac86a0d6ca71ea29f1bd00e021aeeec9abf0b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 165,
    "end_line": 167,
    "ast_path": "go:method:(s *Service).getSingleFlightKey",
    "text": "package foreca\nimport \"fmt\"\n// receiver: s *Service\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}",
    "header_context": "package foreca\nimport \"fmt\"\n// receiver: s *Service",
    "core": "func (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}",
    "footer_context": "",
    "symbols_defined": [
      "getSingleFlightKey"
    ],
    "symbols_referenced": [
      "fmt.Sprintf",
      "ProviderID",
      "Service",
      "Mapping"
    ],
    "imports_used": [
      "fmt"
    ],
    "neighbors": {
      "prev": "1d3e3975efec3b34010dabc632bb577332a7f738af623c93e1fe015e06e1931b",
      "next": "a1115d96f7b5048b3d9bbdd25256f37c0c76b8e8247ad4f1b3a4653379a9e1f5"
    },
    "summary_1l": "Go method getSingleFlightKey on s *Service",
    "qa_terms": "foreca, getSingleFlightKey, proxy, s Service, weather",
    "token_counts": {
      "header": 14,
      "core": 32,
      "footer": 0,
      "total": 47
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.028234+00:00",
    "v": 3
  },
  {
    "chunk_id": "a1115d96f7b5048b3d9bbdd25256f37c0c76b8e8247ad4f1b3a4653379a9e1f5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go",
    "language": "go",
    "start_line": 169,
    "end_line": 172,
    "ast_path": "go:type:expirableCacheItem (struct)",
    "text": "package foreca\nimport \"encoding/json\"\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}",
    "header_context": "package foreca\nimport \"encoding/json\"",
    "core": "type expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "expirableCacheItem"
    ],
    "symbols_referenced": [
      "Forecast"
    ],
    "imports_used": [
      "encoding/json"
    ],
    "neighbors": {
      "prev": "56b1c6814319e2ed375cf4485d7ac86a0d6ca71ea29f1bd00e021aeeec9abf0b",
      "next": null
    },
    "summary_1l": "Go struct expirableCacheItem for weather forecasting",
    "qa_terms": "expirableCacheItem, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 30,
      "footer": 0,
      "total": 39
    },
    "file_sha": "ac91139647dae1b7d2c55808db545fe289700b53fcc6e1eee601c932273c2c31",
    "created_at": "2025-10-07T09:26:57.028356+00:00",
    "v": 3
  },
  {
    "chunk_id": "18d30d433f778141f04c8cc94e8b6dad360c9c6e59199228af4532b45a403b30",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 1,
    "end_line": 14,
    "ast_path": "go:file_header",
    "text": "package foreca_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package foreca_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "errors",
      "fmt",
      "github.com/stretchr/testify/suite",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "go.uber.org/mock/gomock",
      "testing",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "59f4f2408551991788079772f9f49707d9d34bfe48f4d029d5cd85920604c18d"
    },
    "summary_1l": "Go package foreca_test with cache",
    "qa_terms": "foreca_test, cache, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 92,
      "footer": 0,
      "total": 92
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.019278+00:00",
    "v": 3
  },
  {
    "chunk_id": "59f4f2408551991788079772f9f49707d9d34bfe48f4d029d5cd85920604c18d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 17,
    "end_line": 21,
    "ast_path": "go:type:serviceTestSuite (struct)",
    "text": "package foreca_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\nserviceTestSuite struct {\nsuite.Suite\nmockController *gomock.Controller\n}",
    "header_context": "package foreca_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)",
    "core": "serviceTestSuite struct {\nsuite.Suite\nmockController *gomock.Controller\n}",
    "footer_context": "",
    "symbols_defined": [
      "serviceTestSuite"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "suite.Suite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "18d30d433f778141f04c8cc94e8b6dad360c9c6e59199228af4532b45a403b30",
      "next": "d8df1405473b9496666eb879da377d21d66d53f12f0dce8153034309d4af193d"
    },
    "summary_1l": "Go struct serviceTestSuite for weather forecasting",
    "qa_terms": "serviceTestSuite, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 26,
      "core": 17,
      "footer": 0,
      "total": 43
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.020321+00:00",
    "v": 3
  },
  {
    "chunk_id": "d8df1405473b9496666eb879da377d21d66d53f12f0dce8153034309d4af193d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 24,
    "end_line": 26,
    "ast_path": "go:method:(suite *serviceTestSuite).SetupSuite",
    "text": "package foreca_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *serviceTestSuite\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}",
    "header_context": "package foreca_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "func (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "gomock.NewController",
      "suite.mockController",
      "suite.T",
      "serviceTestSuite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "59f4f2408551991788079772f9f49707d9d34bfe48f4d029d5cd85920604c18d",
      "next": "5cf2d868f13eb1d627fae29a9ceb24e6c0f2ce43b42147050176a0a695387771"
    },
    "summary_1l": "Go method SetupSuite on suite *serviceTestSuite for the Foreca proxy",
    "qa_terms": "SetupSuite, foreca, proxy, suite serviceTestSuite, weather",
    "token_counts": {
      "header": 34,
      "core": 25,
      "footer": 0,
      "total": 60
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.020691+00:00",
    "v": 3
  },
  {
    "chunk_id": "5cf2d868f13eb1d627fae29a9ceb24e6c0f2ce43b42147050176a0a695387771",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 28,
    "end_line": 45,
    "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationMappingError",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\nfunc (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "func (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationMappingError"
    ],
    "symbols_referenced": [
      "mocks.NewMockproviderClient",
      "Get",
      "suite.mockController",
      "NotNil",
      "EXPECT",
      "gomock.Any",
      "context.TODO",
      "error",
      "ErrorContains",
      "time.Second",
      "errors.New",
      "foreca.NewService",
      "mocks.NewMockmappingsRepository",
      "serviceTestSuite",
      "mocks.NewMockcacheClient",
      "suite.Assert",
      "err",
      "Return",
      "GetForecastForLocation"
    ],
    "imports_used": [
      "errors",
      "context",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.uber.org/mock/gomock",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "d8df1405473b9496666eb879da377d21d66d53f12f0dce8153034309d4af193d",
      "next": "978bf0e5906ffdee4985f42a0ce24c3b4a6cc780fcd24dca021476589ba5f02c"
    },
    "summary_1l": "Go method TestGetForecastForLocationMappingError on suite *serviceTestSuite for the Foreca proxy",
    "qa_terms": "TestGetForecastForLocationMappingError, foreca, proxy, suite serviceTestSuite, weather",
    "token_counts": {
      "header": 79,
      "core": 140,
      "footer": 0,
      "total": 220
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.021351+00:00",
    "v": 3
  },
  {
    "chunk_id": "978bf0e5906ffdee4985f42a0ce24c3b4a6cc780fcd24dca021476589ba5f02c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 47,
    "end_line": 68,
    "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationInvalidLocation",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\nfunc (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationInvalidLocation"
    ],
    "symbols_referenced": [
      "mocks.NewMockproviderClient",
      "Get",
      "suite.mockController",
      "NotNil",
      "foreca.Mapping",
      "EXPECT",
      "gomock.Any",
      "context.TODO",
      "ErrorContains",
      "Timezone",
      "time.Second",
      "ID",
      "foreca.NewService",
      "mocks.NewMockmappingsRepository",
      "serviceTestSuite",
      "mocks.NewMockcacheClient",
      "suite.Assert",
      "err",
      "Return",
      "ProviderID",
      "GetForecastForLocation"
    ],
    "imports_used": [
      "context",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.uber.org/mock/gomock",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "5cf2d868f13eb1d627fae29a9ceb24e6c0f2ce43b42147050176a0a695387771",
      "next": "bad414066e641395628715252e48264bcea8cf35882ffbc2b9a23b1527db010a"
    },
    "summary_1l": "Go method TestGetForecastForLocationInvalidLocation on suite *serviceTestSuite for the Foreca proxy",
    "qa_terms": "TestGetForecastForLocationInvalidLocation, foreca, proxy, suite serviceTestSuite, weather",
    "token_counts": {
      "header": 76,
      "core": 165,
      "footer": 0,
      "total": 242
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.022037+00:00",
    "v": 3
  },
  {
    "chunk_id": "bad414066e641395628715252e48264bcea8cf35882ffbc2b9a23b1527db010a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 70,
    "end_line": 99,
    "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationNonCacheForecastError",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\nfunc (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationNonCacheForecastError"
    ],
    "symbols_referenced": [
      "mocks.NewMockproviderClient",
      "time.LoadLocation",
      "Get",
      "suite.mockController",
      "NotNil",
      "foreca.Mapping",
      "EXPECT",
      "gomock.Any",
      "context.TODO",
      "error",
      "ErrorContains",
      "Timezone",
      "time.Second",
      "loc",
      "errors.New",
      "ID",
      "foreca.NewService",
      "mocks.NewMockmappingsRepository",
      "mocks.NewMockcacheClient",
      "serviceTestSuite",
      "suite.Assert",
      "err",
      "String",
      "Return",
      "ProviderID",
      "GetForecastForLocation"
    ],
    "imports_used": [
      "errors",
      "context",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.uber.org/mock/gomock",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "978bf0e5906ffdee4985f42a0ce24c3b4a6cc780fcd24dca021476589ba5f02c",
      "next": "462b33a2405800424901161c6d24b0a8c771aceb2cd370dbba9bbbdc4f02393e"
    },
    "summary_1l": "Go method TestGetForecastForLocationNonCacheForecastError on suite *serviceTestSuite",
    "qa_terms": "LoadLocation, TestGetForecastForLocationNonCacheForecastError, cache, foreca, proxy, suite serviceTestSuite, weather",
    "token_counts": {
      "header": 94,
      "core": 247,
      "footer": 0,
      "total": 342
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.022962+00:00",
    "v": 3
  },
  {
    "chunk_id": "462b33a2405800424901161c6d24b0a8c771aceb2cd370dbba9bbbdc4f02393e",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 101,
    "end_line": 115,
    "ast_path": "go:method:(*suite serviceTestSuite).TestGetForecastForLocationSettingCacheError#part1_cache_lookup",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\nfunc (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationSettingCacheError"
    ],
    "symbols_referenced": [
      "foreca",
      "Any",
      "Get",
      "Mapping",
      "NewMockproviderClient",
      "DailyConditions",
      "EXPECT",
      "mockController",
      "Timezone",
      "Forecast",
      "loc",
      "LoadLocation",
      "ID",
      "CurrentCondition",
      "NewMockmappingsRepository",
      "serviceTestSuite",
      "DailyCondition",
      "String",
      "Return",
      "ProviderID",
      "GetForecastForLocation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "bad414066e641395628715252e48264bcea8cf35882ffbc2b9a23b1527db010a",
      "next": "fadd918e16f10c3d642dfd5609c35cc597b559f1af4a02e4f764d7eaa6e48eb1"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "TestGetForecastForLocationSettingCacheError, suite serviceTestSuite",
    "token_counts": {
      "header": 94,
      "core": 160,
      "footer": 0,
      "total": 255
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.024297+00:00",
    "v": 3
  },
  {
    "chunk_id": "fadd918e16f10c3d642dfd5609c35cc597b559f1af4a02e4f764d7eaa6e48eb1",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 116,
    "end_line": 130,
    "ast_path": "go:method:(*suite serviceTestSuite).TestGetForecastForLocationSettingCacheError#part2_cache_lookup",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationSettingCacheError"
    ],
    "symbols_referenced": [
      "EXPECT",
      "foreca",
      "Any",
      "New",
      "Second",
      "time",
      "error",
      "Get",
      "mockController",
      "Return",
      "HourlyConditions",
      "HourlyCondition",
      "NewMockcacheClient",
      "NewService",
      "Set"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "462b33a2405800424901161c6d24b0a8c771aceb2cd370dbba9bbbdc4f02393e",
      "next": "da2ce140d77280210868889b7f2b75d2b90456aff65fcd6fee12e47b6e5e5314"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "TestGetForecastForLocationSettingCacheError, suite serviceTestSuite",
    "token_counts": {
      "header": 94,
      "core": 133,
      "footer": 0,
      "total": 228
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.025015+00:00",
    "v": 3
  },
  {
    "chunk_id": "da2ce140d77280210868889b7f2b75d2b90456aff65fcd6fee12e47b6e5e5314",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 131,
    "end_line": 139,
    "ast_path": "go:method:(*suite serviceTestSuite).TestGetForecastForLocationSettingCacheError#part3_block3",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationSettingCacheError"
    ],
    "symbols_referenced": [
      "DailyConditions",
      "err",
      "Assert",
      "TODO",
      "HourlyConditions",
      "Nil",
      "f",
      "CurrentCondition",
      "NotNil",
      "GetForecastForLocation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fadd918e16f10c3d642dfd5609c35cc597b559f1af4a02e4f764d7eaa6e48eb1",
      "next": "b10587c03347e8753f39ff54e777139203aa6318cebce27b3d081883a59314e7"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationSettingCacheError, suite serviceTestSuite",
    "token_counts": {
      "header": 94,
      "core": 55,
      "footer": 0,
      "total": 149
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.025360+00:00",
    "v": 3
  },
  {
    "chunk_id": "b10587c03347e8753f39ff54e777139203aa6318cebce27b3d081883a59314e7",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 141,
    "end_line": 155,
    "ast_path": "go:method:(*suite serviceTestSuite).TestGetForecastForLocationFromCache#part1_cache_lookup",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\nfunc (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationFromCache"
    ],
    "symbols_referenced": [
      "Any",
      "Get",
      "Times",
      "Mapping",
      "NewMockproviderClient",
      "EXPECT",
      "mockController",
      "Timezone",
      "loc",
      "LoadLocation",
      "ID",
      "NewMockcacheClient",
      "NewMockmappingsRepository",
      "serviceTestSuite",
      "String",
      "Return",
      "ProviderID",
      "GetForecastForLocation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "da2ce140d77280210868889b7f2b75d2b90456aff65fcd6fee12e47b6e5e5314",
      "next": "1391cf17c0a6de61f1f5d514fa84c1973d3ceaba10ff7f9879cbb64ad6ca571e"
    },
    "summary_1l": "Checks cache and emits cache_hit attribute; returns cached forecast if fresh.",
    "qa_terms": "TestGetForecastForLocationFromCache, suite serviceTestSuite",
    "token_counts": {
      "header": 94,
      "core": 159,
      "footer": 0,
      "total": 254
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.027100+00:00",
    "v": 3
  },
  {
    "chunk_id": "1391cf17c0a6de61f1f5d514fa84c1973d3ceaba10ff7f9879cbb64ad6ca571e",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 156,
    "end_line": 170,
    "ast_path": "go:method:(*suite serviceTestSuite).TestGetForecastForLocationFromCache#part2_provider_call",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationFromCache"
    ],
    "symbols_referenced": [
      "Hour",
      "Now",
      "UTC",
      "Unix",
      "EXPECT",
      "Any",
      "Second",
      "Add",
      "time",
      "Return",
      "Value",
      "Times",
      "Sprintf",
      "Expiration",
      "Item",
      "NewService",
      "Set",
      "Key"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b10587c03347e8753f39ff54e777139203aa6318cebce27b3d081883a59314e7",
      "next": "b8ba21f8c271ae08a07d038414f92d14c0c66f87389cf87953417d71441769ae"
    },
    "summary_1l": "Calls provider, logs errors, handles throttling; sets OTEL attributes.",
    "qa_terms": "TestGetForecastForLocationFromCache, suite serviceTestSuite",
    "token_counts": {
      "header": 94,
      "core": 155,
      "footer": 0,
      "total": 250
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.028169+00:00",
    "v": 3
  },
  {
    "chunk_id": "b8ba21f8c271ae08a07d038414f92d14c0c66f87389cf87953417d71441769ae",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 171,
    "end_line": 179,
    "ast_path": "go:method:(*suite serviceTestSuite).TestGetForecastForLocationFromCache#part3_block3",
    "text": "package foreca_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}",
    "header_context": "package foreca_test\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *serviceTestSuite",
    "core": "\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationFromCache"
    ],
    "symbols_referenced": [
      "DailyConditions",
      "err",
      "Assert",
      "TODO",
      "HourlyConditions",
      "Nil",
      "f",
      "CurrentCondition",
      "NotNil",
      "GetForecastForLocation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1391cf17c0a6de61f1f5d514fa84c1973d3ceaba10ff7f9879cbb64ad6ca571e",
      "next": "55b977c673009f6d1650a8caa1a33138babfdda2d6432c249d19f6f4921a2ca1"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationFromCache, suite serviceTestSuite",
    "token_counts": {
      "header": 94,
      "core": 55,
      "footer": 0,
      "total": 149
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.028532+00:00",
    "v": 3
  },
  {
    "chunk_id": "55b977c673009f6d1650a8caa1a33138babfdda2d6432c249d19f6f4921a2ca1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go",
    "language": "go",
    "start_line": 181,
    "end_line": 183,
    "ast_path": "go:function:",
    "text": "package foreca_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)\nfunc TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}",
    "header_context": "package foreca_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)",
    "core": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "testing.T",
      "TestService",
      "suite.Run",
      "serviceTestSuite"
    ],
    "imports_used": [
      "testing",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "b8ba21f8c271ae08a07d038414f92d14c0c66f87389cf87953417d71441769ae",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 19,
      "core": 19,
      "footer": 0,
      "total": 38
    },
    "file_sha": "5dedb985abce7476e0515fd4c800b6008768c2d305a4603473bb45f85b541337",
    "created_at": "2025-10-07T09:26:57.028794+00:00",
    "v": 3
  },
  {
    "chunk_id": "a2e349f6723abd623dcfe1332e990d28290a22c8e110d890f0ceced534e92785",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go",
    "language": "go",
    "start_line": 1,
    "end_line": 9,
    "ast_path": "go:file_header",
    "text": "package adapters\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"",
    "header_context": "",
    "core": "package adapters\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "github.com/aws/aws-sdk-go-v2/aws",
      "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb",
      "github.com/pkg/errors",
      "go.impalastudios.com/log",
      "go.impalastudios.com/otel",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.opentelemetry.io/otel/attribute",
      "go.opentelemetry.io/otel/codes",
      "go.opentelemetry.io/otel/trace",
      "go.uber.org/zap"
    ],
    "neighbors": {
      "prev": null,
      "next": "d764ebfac90ab1a4ca733633171cfa054b8efae0a0e7073bbda468f2ea54e0ef"
    },
    "summary_1l": "Go package adapters with otel, attribute, codes",
    "qa_terms": "adapters, otel, attribute, codes, trace, zap, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 64,
      "footer": 0,
      "total": 64
    },
    "file_sha": "77f45e999f731255a8fcbb4a4371825388801f7de30bb717e963c91c3fb908a9",
    "created_at": "2025-10-07T09:26:57.029225+00:00",
    "v": 3
  },
  {
    "chunk_id": "d764ebfac90ab1a4ca733633171cfa054b8efae0a0e7073bbda468f2ea54e0ef",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go",
    "language": "go",
    "start_line": 18,
    "end_line": 22,
    "ast_path": "go:type:mappingDynamoDB (struct)",
    "text": "package adapters\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}",
    "header_context": "package adapters",
    "core": "type mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "mappingDynamoDB"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "a2e349f6723abd623dcfe1332e990d28290a22c8e110d890f0ceced534e92785",
      "next": "a0684fa0afa9c8d5492b9e4c9baf587d87f2e88a4754fc8871b3872898483599"
    },
    "summary_1l": "Go struct mappingDynamoDB for weather forecasting",
    "qa_terms": "mappingDynamoDB, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 56,
      "footer": 0,
      "total": 59
    },
    "file_sha": "77f45e999f731255a8fcbb4a4371825388801f7de30bb717e963c91c3fb908a9",
    "created_at": "2025-10-07T09:26:57.029463+00:00",
    "v": 3
  },
  {
    "chunk_id": "a0684fa0afa9c8d5492b9e4c9baf587d87f2e88a4754fc8871b3872898483599",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go",
    "language": "go",
    "start_line": 26,
    "end_line": 28,
    "ast_path": "go:type:mappingDynamoDBClient (interface)",
    "text": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\nmappingDynamoDBClient interface {\nGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n}",
    "header_context": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)",
    "core": "mappingDynamoDBClient interface {\nGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "mappingDynamoDBClient"
    ],
    "symbols_referenced": [
      "GetItem",
      "dynamodb.GetItemOutput",
      "dynamodb.Options",
      "error",
      "context.Context",
      "dynamodb.GetItemInput"
    ],
    "imports_used": [
      "context",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb"
    ],
    "neighbors": {
      "prev": "d764ebfac90ab1a4ca733633171cfa054b8efae0a0e7073bbda468f2ea54e0ef",
      "next": "3abb835918c023b6ff01723828e56d36e6a23ad60043b31f162ad1a96c5fd384"
    },
    "summary_1l": "Go interface mappingDynamoDBClient for weather forecasting",
    "qa_terms": "mappingDynamoDBClient, interface, context, foreca, weather, proxy",
    "token_counts": {
      "header": 22,
      "core": 39,
      "footer": 0,
      "total": 61
    },
    "file_sha": "77f45e999f731255a8fcbb4a4371825388801f7de30bb717e963c91c3fb908a9",
    "created_at": "2025-10-07T09:26:57.029666+00:00",
    "v": 3
  },
  {
    "chunk_id": "3abb835918c023b6ff01723828e56d36e6a23ad60043b31f162ad1a96c5fd384",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go",
    "language": "go",
    "start_line": 29,
    "end_line": 32,
    "ast_path": "go:type:cache[K (interface)",
    "text": "package adapters\ncache[K any, V any] interface {\nGet(K) (V, bool)\nAdd(K, V) bool\n}",
    "header_context": "package adapters",
    "core": "cache[K any, V any] interface {\nGet(K) (V, bool)\nAdd(K, V) bool\n}",
    "footer_context": "",
    "symbols_defined": [
      "cache[K"
    ],
    "symbols_referenced": [
      "Get",
      "Add",
      "K",
      "V"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a0684fa0afa9c8d5492b9e4c9baf587d87f2e88a4754fc8871b3872898483599",
      "next": "e445cec77dd13888d8755296b646c438e686c6128d5a74e9c1b582339b77631c"
    },
    "summary_1l": "Go interface cache[K for weather forecasting",
    "qa_terms": "cache[K, interface, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 25,
      "footer": 0,
      "total": 28
    },
    "file_sha": "77f45e999f731255a8fcbb4a4371825388801f7de30bb717e963c91c3fb908a9",
    "created_at": "2025-10-07T09:26:57.029755+00:00",
    "v": 3
  },
  {
    "chunk_id": "e445cec77dd13888d8755296b646c438e686c6128d5a74e9c1b582339b77631c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go",
    "language": "go",
    "start_line": 35,
    "end_line": 39,
    "ast_path": "go:type:MappingDynamoDBRepository (struct)",
    "text": "package adapters\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\ntype MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}",
    "header_context": "package adapters\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "core": "type MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}",
    "footer_context": "",
    "symbols_defined": [
      "MappingDynamoDBRepository"
    ],
    "symbols_referenced": [
      "foreca.Mapping",
      "mappingDynamoDBClient"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "3abb835918c023b6ff01723828e56d36e6a23ad60043b31f162ad1a96c5fd384",
      "next": "7cd0eb5cf37082e71e445814c55653116a24f40cd676c077d403efb4cab29cd7"
    },
    "summary_1l": "Go struct MappingDynamoDBRepository for weather forecasting",
    "qa_terms": "MappingDynamoDBRepository, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 21,
      "core": 31,
      "footer": 0,
      "total": 52
    },
    "file_sha": "77f45e999f731255a8fcbb4a4371825388801f7de30bb717e963c91c3fb908a9",
    "created_at": "2025-10-07T09:26:57.029913+00:00",
    "v": 3
  },
  {
    "chunk_id": "7cd0eb5cf37082e71e445814c55653116a24f40cd676c077d403efb4cab29cd7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go",
    "language": "go",
    "start_line": 41,
    "end_line": 47,
    "ast_path": "go:function:",
    "text": "package adapters\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}",
    "header_context": "package adapters\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "core": "func NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "MappingDynamoDBRepository",
      "foreca.Mapping",
      "NewMappingDynamoDBRepository"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "e445cec77dd13888d8755296b646c438e686c6128d5a74e9c1b582339b77631c",
      "next": "d8bad040cacd00449e788ccc93757a479420a13775b210e9e11a4ac37efa6894"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 21,
      "core": 62,
      "footer": 0,
      "total": 83
    },
    "file_sha": "77f45e999f731255a8fcbb4a4371825388801f7de30bb717e963c91c3fb908a9",
    "created_at": "2025-10-07T09:26:57.030310+00:00",
    "v": 3
  },
  {
    "chunk_id": "d8bad040cacd00449e788ccc93757a479420a13775b210e9e11a4ac37efa6894",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 49,
    "end_line": 60,
    "ast_path": "go:method:(*r MappingDynamoDBRepository).Get#part1_cache_lookup",
    "text": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository\nfunc (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}\n\n\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n",
    "header_context": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository",
    "core": "func (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}\n\n\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "SetAttributes",
      "mapping",
      "Mapping",
      "Bool",
      "SpanKindClient",
      "End",
      "WithSpanKind",
      "Debug",
      "MarshalMap",
      "id",
      "Context",
      "Start",
      "MappingDynamoDBRepository",
      "error",
      "foreca",
      "Any"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7cd0eb5cf37082e71e445814c55653116a24f40cd676c077d403efb4cab29cd7",
      "next": "4f684549ea6a9610537e1669167bc876dc59d41cded546a9185f5ec87eb681b4"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "Get, r MappingDynamoDBRepository",
    "token_counts": {
      "header": 133,
      "core": 124,
      "footer": 0,
      "total": 258
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.031979+00:00",
    "v": 3
  },
  {
    "chunk_id": "4f684549ea6a9610537e1669167bc876dc59d41cded546a9185f5ec87eb681b4",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 61,
    "end_line": 79,
    "ast_path": "go:method:(*r MappingDynamoDBRepository).Get#part2_error_handling",
    "text": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n",
    "header_context": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository",
    "core": "\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "err",
      "GetItem",
      "Wrap",
      "RecordError",
      "Bool",
      "Error",
      "String",
      "ConsistentRead",
      "Int",
      "id",
      "SetStatus",
      "TableName",
      "Key",
      "tableName",
      "error",
      "GetItemInput"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d8bad040cacd00449e788ccc93757a479420a13775b210e9e11a4ac37efa6894",
      "next": "a8a6fd4fc6f9a3746f4976038296d6e573f687a2658deeb73b67b265affb2619"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "Get, r MappingDynamoDBRepository",
    "token_counts": {
      "header": 133,
      "core": 159,
      "footer": 0,
      "total": 293
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.032576+00:00",
    "v": 3
  },
  {
    "chunk_id": "a8a6fd4fc6f9a3746f4976038296d6e573f687a2658deeb73b67b265affb2619",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 80,
    "end_line": 101,
    "ast_path": "go:method:(*r MappingDynamoDBRepository).Get#part3_cache_lookup",
    "text": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\n\tspan.SetAttributes(attribute.Bool(\"cache_hit\", false))\n\n\tm := &foreca.Mapping{\n\t\tID:         i.ID,\n\t\tProviderID: i.ProviderID,\n\t\tTimezone:   i.Timezone,\n\t}",
    "header_context": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository",
    "core": "\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\n\tspan.SetAttributes(attribute.Bool(\"cache_hit\", false))\n\n\tm := &foreca.Mapping{\n\t\tID:         i.ID,\n\t\tProviderID: i.ProviderID,\n\t\tTimezone:   i.Timezone,\n\t}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "err",
      "i",
      "Warn",
      "Bool",
      "ProviderID",
      "SetAttributes",
      "ID",
      "Int",
      "Item",
      "Wrap",
      "RecordError",
      "Mapping",
      "SetStatus",
      "error",
      "mappingDynamoDB",
      "Error",
      "UnmarshalMap",
      "id",
      "Timezone",
      "Any"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4f684549ea6a9610537e1669167bc876dc59d41cded546a9185f5ec87eb681b4",
      "next": "51aed8ecfc2ccce90d458e87d1d806ecd51fc6a336dbad4d3c8976230d539215"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "Get, r MappingDynamoDBRepository",
    "token_counts": {
      "header": 133,
      "core": 181,
      "footer": 0,
      "total": 315
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.033231+00:00",
    "v": 3
  },
  {
    "chunk_id": "51aed8ecfc2ccce90d458e87d1d806ecd51fc6a336dbad4d3c8976230d539215",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 102,
    "end_line": 105,
    "ast_path": "go:method:(*r MappingDynamoDBRepository).Get#part4_block4",
    "text": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository\n\tr.cache.Add(id, m)\n\n\treturn m, nil\n}",
    "header_context": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n// receiver: r *MappingDynamoDBRepository",
    "core": "\tr.cache.Add(id, m)\n\n\treturn m, nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "m",
      "Add"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a8a6fd4fc6f9a3746f4976038296d6e573f687a2658deeb73b67b265affb2619",
      "next": null
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "Get, r MappingDynamoDBRepository",
    "token_counts": {
      "header": 133,
      "core": 13,
      "footer": 0,
      "total": 147
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.033444+00:00",
    "v": 3
  },
  {
    "chunk_id": "b668df1f2919cbd243bab08ed485d648210efc3cf4d0e285d9b18f5e2e83b4b7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 10,
    "end_line": 12,
    "ast_path": "go:file_header",
    "text": "package mocks\n\nimport (",
    "header_context": "",
    "core": "package mocks\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "reflect",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": null,
      "next": "8405e4df43bef4714edd6d74fb44a74b01bba8079f1990a4d7bb7618b7f0660b"
    },
    "summary_1l": "Go package ",
    "qa_terms": ", foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 5,
      "footer": 0,
      "total": 5
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.032246+00:00",
    "v": 3
  },
  {
    "chunk_id": "8405e4df43bef4714edd6d74fb44a74b01bba8079f1990a4d7bb7618b7f0660b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 21,
    "end_line": 24,
    "ast_path": "go:type:MockmappingDynamoDBClient (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockmappingDynamoDBClient"
    ],
    "symbols_referenced": [
      "MockmappingDynamoDBClientMockRecorder",
      "gomock.Controller"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "b668df1f2919cbd243bab08ed485d648210efc3cf4d0e285d9b18f5e2e83b4b7",
      "next": "3cc9d64db0b035596f8d8ec3335c72cfdd457627a0250f01e80c4e46d5dc7e57"
    },
    "summary_1l": "Go struct MockmappingDynamoDBClient for weather forecasting",
    "qa_terms": "MockmappingDynamoDBClient, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 29,
      "footer": 0,
      "total": 43
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.032419+00:00",
    "v": 3
  },
  {
    "chunk_id": "3cc9d64db0b035596f8d8ec3335c72cfdd457627a0250f01e80c4e46d5dc7e57",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 27,
    "end_line": 29,
    "ast_path": "go:type:MockmappingDynamoDBClientMockRecorder (struct)",
    "text": "package main\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}",
    "header_context": "package main",
    "core": "type MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockmappingDynamoDBClientMockRecorder"
    ],
    "symbols_referenced": [
      "MockmappingDynamoDBClient"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "8405e4df43bef4714edd6d74fb44a74b01bba8079f1990a4d7bb7618b7f0660b",
      "next": "aff21754ab445fcb2b003824446c22aaf53d4a989e919534e61b66285effbc49"
    },
    "summary_1l": "Go struct MockmappingDynamoDBClientMockRecorder for weather forecasting",
    "qa_terms": "MockmappingDynamoDBClientMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 21,
      "footer": 0,
      "total": 24
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.032504+00:00",
    "v": 3
  },
  {
    "chunk_id": "aff21754ab445fcb2b003824446c22aaf53d4a989e919534e61b66285effbc49",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 32,
    "end_line": 36,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "gomock.Controller",
      "NewMockmappingDynamoDBClient",
      "MockmappingDynamoDBClientMockRecorder",
      "MockmappingDynamoDBClient",
      "mock"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "3cc9d64db0b035596f8d8ec3335c72cfdd457627a0250f01e80c4e46d5dc7e57",
      "next": "55a2132375124554ea9bfd9eb46bbf469d08fe2d198b941708cb3d5c69514ac6"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 56,
      "footer": 0,
      "total": 70
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.032793+00:00",
    "v": 3
  },
  {
    "chunk_id": "55a2132375124554ea9bfd9eb46bbf469d08fe2d198b941708cb3d5c69514ac6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 39,
    "end_line": 41,
    "ast_path": "go:method:(m *MockmappingDynamoDBClient).EXPECT",
    "text": "package main\n// receiver: m *MockmappingDynamoDBClient\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *MockmappingDynamoDBClient",
    "core": "func (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockmappingDynamoDBClientMockRecorder",
      "MockmappingDynamoDBClient"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "aff21754ab445fcb2b003824446c22aaf53d4a989e919534e61b66285effbc49",
      "next": "f8c9c5543f329c7e9307106e32a0c02887609170f8d609c9065201096c95ea9f"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 14,
      "core": 29,
      "footer": 0,
      "total": 44
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.032968+00:00",
    "v": 3
  },
  {
    "chunk_id": "f8c9c5543f329c7e9307106e32a0c02887609170f8d609c9065201096c95ea9f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 44,
    "end_line": 54,
    "ast_path": "go:method:(m *MockmappingDynamoDBClient).GetItem",
    "text": "package main\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\n// receiver: m *MockmappingDynamoDBClient\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\n// receiver: m *MockmappingDynamoDBClient",
    "core": "func (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetItem"
    ],
    "symbols_referenced": [
      "error",
      "Call",
      "Helper",
      "context.Context",
      "dynamodb.Options",
      "dynamodb.GetItemOutput",
      "ret1",
      "MockmappingDynamoDBClient",
      "a",
      "dynamodb.GetItemInput"
    ],
    "imports_used": [
      "github.com/aws/aws-sdk-go-v2/service/dynamodb",
      "context"
    ],
    "neighbors": {
      "prev": "55a2132375124554ea9bfd9eb46bbf469d08fe2d198b941708cb3d5c69514ac6",
      "next": "dcbd5099e2c9d2d47d379c6532061e3ba00700411904b206d41eb0ddca73c800"
    },
    "summary_1l": "Go method GetItem on m *MockmappingDynamoDBClient for the Foreca proxy",
    "qa_terms": "GetItem, foreca, m MockmappingDynamoDBClient, proxy, weather",
    "token_counts": {
      "header": 33,
      "core": 128,
      "footer": 0,
      "total": 162
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.033456+00:00",
    "v": 3
  },
  {
    "chunk_id": "dcbd5099e2c9d2d47d379c6532061e3ba00700411904b206d41eb0ddca73c800",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 57,
    "end_line": 61,
    "ast_path": "go:method:(mr *MockmappingDynamoDBClientMockRecorder).GetItem",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockmappingDynamoDBClientMockRecorder\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockmappingDynamoDBClientMockRecorder",
    "core": "func (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetItem"
    ],
    "symbols_referenced": [
      "RecordCallWithMethodType",
      "gomock.Call",
      "reflect.TypeOf",
      "any",
      "Helper",
      "MockmappingDynamoDBClientMockRecorder",
      "MockmappingDynamoDBClient"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "f8c9c5543f329c7e9307106e32a0c02887609170f8d609c9065201096c95ea9f",
      "next": "1fe9c0fc740ef92cf382f65c2c5dc7676f7ef889e0164f3e76362eeea2d143a8"
    },
    "summary_1l": "Go method GetItem on mr *MockmappingDynamoDBClientMockRecorder for the Foreca proxy",
    "qa_terms": "GetItem, foreca, mr MockmappingDynamoDBClientMockRecorder, proxy, weather",
    "token_counts": {
      "header": 33,
      "core": 89,
      "footer": 0,
      "total": 123
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.033821+00:00",
    "v": 3
  },
  {
    "chunk_id": "1fe9c0fc740ef92cf382f65c2c5dc7676f7ef889e0164f3e76362eeea2d143a8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 64,
    "end_line": 67,
    "ast_path": "go:type:Mockcache[K (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}",
    "footer_context": "",
    "symbols_defined": [
      "Mockcache[K"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "K",
      "MockcacheMockRecorder",
      "Mockcache"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "dcbd5099e2c9d2d47d379c6532061e3ba00700411904b206d41eb0ddca73c800",
      "next": "0d4c653357b73114dce83f60b57320b8d831645ac0e7804a140a45a9923ed686"
    },
    "summary_1l": "Go struct Mockcache[K for weather forecasting",
    "qa_terms": "Mockcache[K, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 30,
      "footer": 0,
      "total": 44
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.033960+00:00",
    "v": 3
  },
  {
    "chunk_id": "0d4c653357b73114dce83f60b57320b8d831645ac0e7804a140a45a9923ed686",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 70,
    "end_line": 72,
    "ast_path": "go:type:MockcacheMockRecorder[K (struct)",
    "text": "package main\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}",
    "header_context": "package main",
    "core": "type MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockcacheMockRecorder[K"
    ],
    "symbols_referenced": [
      "K",
      "MockcacheMockRecorder",
      "Mockcache"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1fe9c0fc740ef92cf382f65c2c5dc7676f7ef889e0164f3e76362eeea2d143a8",
      "next": "48bc565382465610cc30f2aa579347378f891c44e940e3cfe48336455477a177"
    },
    "summary_1l": "Go struct MockcacheMockRecorder[K for weather forecasting",
    "qa_terms": "MockcacheMockRecorder[K, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 22,
      "footer": 0,
      "total": 25
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.034044+00:00",
    "v": 3
  },
  {
    "chunk_id": "48bc565382465610cc30f2aa579347378f891c44e940e3cfe48336455477a177",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 75,
    "end_line": 79,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewMockcache",
      "gomock.Controller",
      "K",
      "MockcacheMockRecorder",
      "Mockcache",
      "mock"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "0d4c653357b73114dce83f60b57320b8d831645ac0e7804a140a45a9923ed686",
      "next": "383cd56f48ce7b036cb30da9ccd74259bde3a8b715df030b5f258c7007b6fac6"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 56,
      "footer": 0,
      "total": 70
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.034284+00:00",
    "v": 3
  },
  {
    "chunk_id": "383cd56f48ce7b036cb30da9ccd74259bde3a8b715df030b5f258c7007b6fac6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 82,
    "end_line": 84,
    "ast_path": "go:method:(m *Mockcache[K, V]).EXPECT",
    "text": "package main\n// receiver: m *Mockcache[K, V]\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *Mockcache[K, V]",
    "core": "func (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "K",
      "Mockcache",
      "MockcacheMockRecorder"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "48bc565382465610cc30f2aa579347378f891c44e940e3cfe48336455477a177",
      "next": "cc6fddb5a3a3e185c7610383055721f9caf41b272cac569c3909e7db931a19da"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 14,
      "core": 28,
      "footer": 0,
      "total": 42
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.034454+00:00",
    "v": 3
  },
  {
    "chunk_id": "cc6fddb5a3a3e185c7610383055721f9caf41b272cac569c3909e7db931a19da",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 87,
    "end_line": 92,
    "ast_path": "go:method:(m *Mockcache[K, V]).Add",
    "text": "package main\n// receiver: m *Mockcache[K, V]\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}",
    "header_context": "package main\n// receiver: m *Mockcache[K, V]",
    "core": "func (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}",
    "footer_context": "",
    "symbols_defined": [
      "Add"
    ],
    "symbols_referenced": [
      "arg1",
      "K",
      "Call",
      "Helper",
      "ret0",
      "V",
      "Mockcache"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "383cd56f48ce7b036cb30da9ccd74259bde3a8b715df030b5f258c7007b6fac6",
      "next": "4389f1ccff0769ba74349ee7ae0c2bbbc58bf317c5eb82b9b96f7a0f24f8f81d"
    },
    "summary_1l": "Go method Add on m *Mockcache[K, V]",
    "qa_terms": "Add, foreca, m Mockcache[K, V], proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 59,
      "footer": 0,
      "total": 73
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.034688+00:00",
    "v": 3
  },
  {
    "chunk_id": "4389f1ccff0769ba74349ee7ae0c2bbbc58bf317c5eb82b9b96f7a0f24f8f81d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 95,
    "end_line": 98,
    "ast_path": "go:method:(mr *MockcacheMockRecorder[K, V]).Add",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheMockRecorder[K, V]\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheMockRecorder[K, V]",
    "core": "func (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Add"
    ],
    "symbols_referenced": [
      "RecordCallWithMethodType",
      "gomock.Call",
      "reflect.TypeOf",
      "any",
      "arg1",
      "K",
      "Helper",
      "MockcacheMockRecorder",
      "Mockcache"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "cc6fddb5a3a3e185c7610383055721f9caf41b272cac569c3909e7db931a19da",
      "next": "417278a967ebdf6c5cd2f8648b956a1cec1f171a77e8c6464ff922eeb053157b"
    },
    "summary_1l": "Go method Add on mr *MockcacheMockRecorder[K, V]",
    "qa_terms": "Add, foreca, mr MockcacheMockRecorder[K, V], proxy, weather",
    "token_counts": {
      "header": 33,
      "core": 68,
      "footer": 0,
      "total": 101
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.034991+00:00",
    "v": 3
  },
  {
    "chunk_id": "417278a967ebdf6c5cd2f8648b956a1cec1f171a77e8c6464ff922eeb053157b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 101,
    "end_line": 107,
    "ast_path": "go:method:(m *Mockcache[K, V]).Get",
    "text": "package main\n// receiver: m *Mockcache[K, V]\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}",
    "header_context": "package main\n// receiver: m *Mockcache[K, V]",
    "core": "func (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "K",
      "Call",
      "Helper",
      "ret1",
      "arg0",
      "V",
      "Mockcache"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4389f1ccff0769ba74349ee7ae0c2bbbc58bf317c5eb82b9b96f7a0f24f8f81d",
      "next": "04e17efcdfd53ca9637bcdfb254de50dc3e9c934d663d6200ae99502d1cf26a1"
    },
    "summary_1l": "Go method Get on m *Mockcache[K, V]",
    "qa_terms": "Get, foreca, m Mockcache[K, V], proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 71,
      "footer": 0,
      "total": 85
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.035261+00:00",
    "v": 3
  },
  {
    "chunk_id": "04e17efcdfd53ca9637bcdfb254de50dc3e9c934d663d6200ae99502d1cf26a1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go",
    "language": "go",
    "start_line": 110,
    "end_line": 113,
    "ast_path": "go:method:(mr *MockcacheMockRecorder[K, V]).Get",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheMockRecorder[K, V]\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockcacheMockRecorder[K, V]",
    "core": "func (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "RecordCallWithMethodType",
      "gomock.Call",
      "reflect.TypeOf",
      "any",
      "K",
      "Helper",
      "MockcacheMockRecorder",
      "arg0",
      "Mockcache"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "reflect"
    ],
    "neighbors": {
      "prev": "417278a967ebdf6c5cd2f8648b956a1cec1f171a77e8c6464ff922eeb053157b",
      "next": null
    },
    "summary_1l": "Go method Get on mr *MockcacheMockRecorder[K, V]",
    "qa_terms": "Get, foreca, mr MockcacheMockRecorder[K, V], proxy, weather",
    "token_counts": {
      "header": 33,
      "core": 62,
      "footer": 0,
      "total": 95
    },
    "file_sha": "341a5cd9092c6eb56abaf8e65e3d4a8bfe4e25d8816f755e9a19cfa953caeadd",
    "created_at": "2025-10-07T09:26:57.035545+00:00",
    "v": 3
  },
  {
    "chunk_id": "8024b998f5b05af208f93e0802346241a866fda8e997ab2df648908f3cfec343",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 10,
    "end_line": 12,
    "ast_path": "go:file_header",
    "text": "package mocks\n\nimport (",
    "header_context": "",
    "core": "package mocks\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "net/http",
      "reflect",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": null,
      "next": "4283b173af31424f26e2723763e2793b485a72fd636a08feba6f9feae85ba973"
    },
    "summary_1l": "Go package ",
    "qa_terms": ", foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 5,
      "footer": 0,
      "total": 5
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.032266+00:00",
    "v": 3
  },
  {
    "chunk_id": "4283b173af31424f26e2723763e2793b485a72fd636a08feba6f9feae85ba973",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 23,
    "end_line": 26,
    "ast_path": "go:type:MockhttpClient (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockhttpClient"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "MockhttpClientMockRecorder"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "8024b998f5b05af208f93e0802346241a866fda8e997ab2df648908f3cfec343",
      "next": "c91222d2244759e8aba82744c87f18b43044eedd4fe938cc8aaedbeb028c6743"
    },
    "summary_1l": "Go struct MockhttpClient for weather forecasting",
    "qa_terms": "MockhttpClient, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 21,
      "footer": 0,
      "total": 35
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.032439+00:00",
    "v": 3
  },
  {
    "chunk_id": "c91222d2244759e8aba82744c87f18b43044eedd4fe938cc8aaedbeb028c6743",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 29,
    "end_line": 31,
    "ast_path": "go:type:MockhttpClientMockRecorder (struct)",
    "text": "package main\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}",
    "header_context": "package main",
    "core": "type MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockhttpClientMockRecorder"
    ],
    "symbols_referenced": [
      "MockhttpClient"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4283b173af31424f26e2723763e2793b485a72fd636a08feba6f9feae85ba973",
      "next": "d49e1c0e128a6e8eb72cf17b1bdd950eda19fd4d8def9853c373543f098ed19a"
    },
    "summary_1l": "Go struct MockhttpClientMockRecorder for weather forecasting",
    "qa_terms": "MockhttpClientMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 13,
      "footer": 0,
      "total": 16
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.032518+00:00",
    "v": 3
  },
  {
    "chunk_id": "d49e1c0e128a6e8eb72cf17b1bdd950eda19fd4d8def9853c373543f098ed19a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 34,
    "end_line": 38,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "gomock.Controller",
      "mock",
      "MockhttpClient",
      "MockhttpClientMockRecorder",
      "NewMockhttpClient"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "c91222d2244759e8aba82744c87f18b43044eedd4fe938cc8aaedbeb028c6743",
      "next": "b7d0b7f076da3b36fd4fb66be193a58e37176d79c02b42a39d7337d2a6821dde"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 40,
      "footer": 0,
      "total": 54
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.032866+00:00",
    "v": 3
  },
  {
    "chunk_id": "b7d0b7f076da3b36fd4fb66be193a58e37176d79c02b42a39d7337d2a6821dde",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 41,
    "end_line": 43,
    "ast_path": "go:method:(m *MockhttpClient).EXPECT",
    "text": "package main\n// receiver: m *MockhttpClient\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *MockhttpClient",
    "core": "func (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockhttpClientMockRecorder",
      "MockhttpClient"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d49e1c0e128a6e8eb72cf17b1bdd950eda19fd4d8def9853c373543f098ed19a",
      "next": "855e47c3fbea6147839e711b45f990a53caa41eb952ed693f422e82b119d6a47"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 10,
      "core": 21,
      "footer": 0,
      "total": 32
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.033071+00:00",
    "v": 3
  },
  {
    "chunk_id": "855e47c3fbea6147839e711b45f990a53caa41eb952ed693f422e82b119d6a47",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 46,
    "end_line": 52,
    "ast_path": "go:method:(m *MockhttpClient).Do",
    "text": "package main\nimport \"net/http\"\n// receiver: m *MockhttpClient\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\nimport \"net/http\"\n// receiver: m *MockhttpClient",
    "core": "func (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Do"
    ],
    "symbols_referenced": [
      "arg0",
      "ret1",
      "Helper",
      "error",
      "Call",
      "http.Request",
      "MockhttpClient",
      "http.Response"
    ],
    "imports_used": [
      "net/http"
    ],
    "neighbors": {
      "prev": "b7d0b7f076da3b36fd4fb66be193a58e37176d79c02b42a39d7337d2a6821dde",
      "next": "7619f2f8baeccb1487d3002b40ac0aa871d96758c1e16deff51b139a43454a67"
    },
    "summary_1l": "Go method Do on m *MockhttpClient for the Foreca proxy",
    "qa_terms": "Do, foreca, m MockhttpClient, proxy, weather",
    "token_counts": {
      "header": 15,
      "core": 72,
      "footer": 0,
      "total": 88
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.033450+00:00",
    "v": 3
  },
  {
    "chunk_id": "7619f2f8baeccb1487d3002b40ac0aa871d96758c1e16deff51b139a43454a67",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 55,
    "end_line": 58,
    "ast_path": "go:method:(mr *MockhttpClientMockRecorder).Do",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockhttpClientMockRecorder\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockhttpClientMockRecorder",
    "core": "func (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Do"
    ],
    "symbols_referenced": [
      "arg0",
      "Helper",
      "reflect.TypeOf",
      "RecordCallWithMethodType",
      "MockhttpClientMockRecorder",
      "MockhttpClient",
      "any",
      "gomock.Call"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "855e47c3fbea6147839e711b45f990a53caa41eb952ed693f422e82b119d6a47",
      "next": "f555ccd6e8253fccd1fe24c1871fe7d7c4838d60d1b2eba24d923044c2b305ad"
    },
    "summary_1l": "Go method Do on mr *MockhttpClientMockRecorder for the Foreca proxy",
    "qa_terms": "Do, foreca, mr MockhttpClientMockRecorder, proxy, weather",
    "token_counts": {
      "header": 29,
      "core": 56,
      "footer": 0,
      "total": 86
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.033794+00:00",
    "v": 3
  },
  {
    "chunk_id": "f555ccd6e8253fccd1fe24c1871fe7d7c4838d60d1b2eba24d923044c2b305ad",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 61,
    "end_line": 64,
    "ast_path": "go:type:MockrateLimiter (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockrateLimiter"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "MockrateLimiterMockRecorder"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "7619f2f8baeccb1487d3002b40ac0aa871d96758c1e16deff51b139a43454a67",
      "next": "cf4fd687389901f11e8cb71b971418fd45f6e6f3bbbf0b77dadac1c950b00a34"
    },
    "summary_1l": "Go struct MockrateLimiter for weather forecasting",
    "qa_terms": "MockrateLimiter, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 25,
      "footer": 0,
      "total": 39
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.033931+00:00",
    "v": 3
  },
  {
    "chunk_id": "cf4fd687389901f11e8cb71b971418fd45f6e6f3bbbf0b77dadac1c950b00a34",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 67,
    "end_line": 69,
    "ast_path": "go:type:MockrateLimiterMockRecorder (struct)",
    "text": "package main\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}",
    "header_context": "package main",
    "core": "type MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockrateLimiterMockRecorder"
    ],
    "symbols_referenced": [
      "MockrateLimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f555ccd6e8253fccd1fe24c1871fe7d7c4838d60d1b2eba24d923044c2b305ad",
      "next": "79968c80882d9e83dba45b4840f49029dc4573f09b01a8588089252271becf30"
    },
    "summary_1l": "Go struct MockrateLimiterMockRecorder for weather forecasting",
    "qa_terms": "MockrateLimiterMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 17,
      "footer": 0,
      "total": 20
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.034006+00:00",
    "v": 3
  },
  {
    "chunk_id": "79968c80882d9e83dba45b4840f49029dc4573f09b01a8588089252271becf30",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 72,
    "end_line": 76,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "MockrateLimiterMockRecorder",
      "gomock.Controller",
      "mock",
      "NewMockrateLimiter",
      "MockrateLimiter"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "cf4fd687389901f11e8cb71b971418fd45f6e6f3bbbf0b77dadac1c950b00a34",
      "next": "346ff27858229f64c1b14b720b6137fa76deeff3e9f6644e8e7e84bba8be331f"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 48,
      "footer": 0,
      "total": 62
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.034247+00:00",
    "v": 3
  },
  {
    "chunk_id": "346ff27858229f64c1b14b720b6137fa76deeff3e9f6644e8e7e84bba8be331f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 79,
    "end_line": 81,
    "ast_path": "go:method:(m *MockrateLimiter).EXPECT",
    "text": "package main\n// receiver: m *MockrateLimiter\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *MockrateLimiter",
    "core": "func (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockrateLimiter",
      "MockrateLimiterMockRecorder"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "79968c80882d9e83dba45b4840f49029dc4573f09b01a8588089252271becf30",
      "next": "8a18f9b256d2d7fe015c2841796dd89faf3cd9fea95dba809aa8903b9b7c4149"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 12,
      "core": 25,
      "footer": 0,
      "total": 38
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.034411+00:00",
    "v": 3
  },
  {
    "chunk_id": "8a18f9b256d2d7fe015c2841796dd89faf3cd9fea95dba809aa8903b9b7c4149",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 84,
    "end_line": 90,
    "ast_path": "go:method:(m *MockrateLimiter).Acquire",
    "text": "package main\n// receiver: m *MockrateLimiter\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\n// receiver: m *MockrateLimiter",
    "core": "func (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Acquire"
    ],
    "symbols_referenced": [
      "arg0",
      "ret1",
      "Helper",
      "error",
      "Call",
      "MockrateLimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "346ff27858229f64c1b14b720b6137fa76deeff3e9f6644e8e7e84bba8be331f",
      "next": "c15e0e474dd54c36f9302a67d9cf20e81bf48166ac406b1c515b696a0bc11411"
    },
    "summary_1l": "Go method Acquire on m *MockrateLimiter for the Foreca proxy",
    "qa_terms": "Acquire, foreca, m MockrateLimiter, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 74,
      "footer": 0,
      "total": 87
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.034815+00:00",
    "v": 3
  },
  {
    "chunk_id": "c15e0e474dd54c36f9302a67d9cf20e81bf48166ac406b1c515b696a0bc11411",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 93,
    "end_line": 96,
    "ast_path": "go:method:(mr *MockrateLimiterMockRecorder).Acquire",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockrateLimiterMockRecorder\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockrateLimiterMockRecorder",
    "core": "func (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Acquire"
    ],
    "symbols_referenced": [
      "arg0",
      "Helper",
      "reflect.TypeOf",
      "MockrateLimiterMockRecorder",
      "RecordCallWithMethodType",
      "any",
      "gomock.Call",
      "MockrateLimiter"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "8a18f9b256d2d7fe015c2841796dd89faf3cd9fea95dba809aa8903b9b7c4149",
      "next": "cab9dc8a671f692ad7fbcaad20d76fd61b6331ef6d74443b56f4dc2114e32281"
    },
    "summary_1l": "Go method Acquire on mr *MockrateLimiterMockRecorder for the Foreca proxy",
    "qa_terms": "Acquire, foreca, mr MockrateLimiterMockRecorder, proxy, weather",
    "token_counts": {
      "header": 31,
      "core": 63,
      "footer": 0,
      "total": 95
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.035163+00:00",
    "v": 3
  },
  {
    "chunk_id": "cab9dc8a671f692ad7fbcaad20d76fd61b6331ef6d74443b56f4dc2114e32281",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 99,
    "end_line": 102,
    "ast_path": "go:type:Mocktransformer (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "Mocktransformer"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "MocktransformerMockRecorder"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "c15e0e474dd54c36f9302a67d9cf20e81bf48166ac406b1c515b696a0bc11411",
      "next": "0e09b69b238fbc5e861b584f11be69859f89ab7d06662c16f63c3a93e35e547b"
    },
    "summary_1l": "Go struct Mocktransformer for weather forecasting",
    "qa_terms": "Mocktransformer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 23,
      "footer": 0,
      "total": 37
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.035405+00:00",
    "v": 3
  },
  {
    "chunk_id": "0e09b69b238fbc5e861b584f11be69859f89ab7d06662c16f63c3a93e35e547b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 105,
    "end_line": 107,
    "ast_path": "go:type:MocktransformerMockRecorder (struct)",
    "text": "package main\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}",
    "header_context": "package main",
    "core": "type MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}",
    "footer_context": "",
    "symbols_defined": [
      "MocktransformerMockRecorder"
    ],
    "symbols_referenced": [
      "Mocktransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "cab9dc8a671f692ad7fbcaad20d76fd61b6331ef6d74443b56f4dc2114e32281",
      "next": "469418e813cb3645fafb15786e173fc579005150ae0b21532ca6a9d7dd429406"
    },
    "summary_1l": "Go struct MocktransformerMockRecorder for weather forecasting",
    "qa_terms": "MocktransformerMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 15,
      "footer": 0,
      "total": 18
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.035547+00:00",
    "v": 3
  },
  {
    "chunk_id": "469418e813cb3645fafb15786e173fc579005150ae0b21532ca6a9d7dd429406",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 110,
    "end_line": 114,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "gomock.Controller",
      "mock",
      "NewMocktransformer",
      "Mocktransformer",
      "MocktransformerMockRecorder"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "0e09b69b238fbc5e861b584f11be69859f89ab7d06662c16f63c3a93e35e547b",
      "next": "40603c62f5f05cfc34019c8bacb8f90df2b9bf489183873fe3e98d5037d0ace5"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 44,
      "footer": 0,
      "total": 58
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.035832+00:00",
    "v": 3
  },
  {
    "chunk_id": "40603c62f5f05cfc34019c8bacb8f90df2b9bf489183873fe3e98d5037d0ace5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 117,
    "end_line": 119,
    "ast_path": "go:method:(m *Mocktransformer).EXPECT",
    "text": "package main\n// receiver: m *Mocktransformer\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *Mocktransformer",
    "core": "func (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "Mocktransformer",
      "MocktransformerMockRecorder"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "469418e813cb3645fafb15786e173fc579005150ae0b21532ca6a9d7dd429406",
      "next": "bada51a7e72564917463ea468e52aa98c510e5ce548f7840718e61b6dbde0486"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 11,
      "core": 23,
      "footer": 0,
      "total": 35
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.036020+00:00",
    "v": 3
  },
  {
    "chunk_id": "bada51a7e72564917463ea468e52aa98c510e5ce548f7840718e61b6dbde0486",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 122,
    "end_line": 127,
    "ast_path": "go:method:(m *Mocktransformer).Transform",
    "text": "package main\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: m *Mocktransformer\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}",
    "header_context": "package main\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: m *Mocktransformer",
    "core": "func (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "Helper",
      "Call",
      "arg1",
      "ret0",
      "clients.Response",
      "Mocktransformer",
      "time.Location",
      "foreca.Forecast"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "40603c62f5f05cfc34019c8bacb8f90df2b9bf489183873fe3e98d5037d0ace5",
      "next": "cc14453f3c01a252e8825ac655479b2b33273f7731235d912858d01890f3be1e"
    },
    "summary_1l": "Go method Transform on m *Mocktransformer",
    "qa_terms": "Transform, foreca, m Mocktransformer, proxy, weather",
    "token_counts": {
      "header": 55,
      "core": 68,
      "footer": 0,
      "total": 124
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.036449+00:00",
    "v": 3
  },
  {
    "chunk_id": "cc14453f3c01a252e8825ac655479b2b33273f7731235d912858d01890f3be1e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go",
    "language": "go",
    "start_line": 130,
    "end_line": 133,
    "ast_path": "go:method:(mr *MocktransformerMockRecorder).Transform",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocktransformerMockRecorder\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocktransformerMockRecorder",
    "core": "func (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "Helper",
      "reflect.TypeOf",
      "RecordCallWithMethodType",
      "arg1",
      "MocktransformerMockRecorder",
      "Mocktransformer",
      "any",
      "gomock.Call"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "bada51a7e72564917463ea468e52aa98c510e5ce548f7840718e61b6dbde0486",
      "next": null
    },
    "summary_1l": "Go method Transform on mr *MocktransformerMockRecorder",
    "qa_terms": "Transform, foreca, mr MocktransformerMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 64,
      "footer": 0,
      "total": 95
    },
    "file_sha": "a33f2adaec9066007f12cd47a1312a222927d68f51a4d1b3f6f1026efca98f6f",
    "created_at": "2025-10-07T09:26:57.037014+00:00",
    "v": 3
  },
  {
    "chunk_id": "8ce4e2770ee0e80ac204b7c89494194eaa0b2baeb642cae4027e7a04e3544bef",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go",
    "language": "go",
    "start_line": 1,
    "end_line": 6,
    "ast_path": "go:file_header",
    "text": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "header_context": "",
    "core": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "errors",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0",
      "google.golang.org/grpc/codes",
      "google.golang.org/grpc/status"
    ],
    "neighbors": {
      "prev": null,
      "next": "b5bda24dd522305b3192515486a7c3d44f5d9dcbd6347b2e24acb7f891eed2ef"
    },
    "summary_1l": "Go package v0",
    "qa_terms": "v0, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 29,
      "footer": 0,
      "total": 29
    },
    "file_sha": "709d54c45487b7957b0da9c171ab2e5a3b9a4b6f678f398ecdcd9d0d4e623371",
    "created_at": "2025-10-07T09:26:57.038666+00:00",
    "v": 3
  },
  {
    "chunk_id": "b5bda24dd522305b3192515486a7c3d44f5d9dcbd6347b2e24acb7f891eed2ef",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go",
    "language": "go",
    "start_line": 12,
    "end_line": 14,
    "ast_path": "go:type:forecastService (interface)",
    "text": "package v0\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n)\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}",
    "header_context": "package v0\nimport (\n\t\"context\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n)",
    "core": "type forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "forecastService"
    ],
    "symbols_referenced": [
      "foreca.Forecast",
      "context.Context",
      "GetForecastForLocation",
      "error"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "context"
    ],
    "neighbors": {
      "prev": "8ce4e2770ee0e80ac204b7c89494194eaa0b2baeb642cae4027e7a04e3544bef",
      "next": "edc8e82363d0bf4d5a8a37a2ccf80aa834cd7bc70914d61fa5e1a357bc6cfd33"
    },
    "summary_1l": "Go interface forecastService for weather forecasting",
    "qa_terms": "forecastService, interface, context, foreca, weather, proxy",
    "token_counts": {
      "header": 27,
      "core": 25,
      "footer": 0,
      "total": 52
    },
    "file_sha": "709d54c45487b7957b0da9c171ab2e5a3b9a4b6f678f398ecdcd9d0d4e623371",
    "created_at": "2025-10-07T09:26:57.038971+00:00",
    "v": 3
  },
  {
    "chunk_id": "edc8e82363d0bf4d5a8a37a2ccf80aa834cd7bc70914d61fa5e1a357bc6cfd33",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go",
    "language": "go",
    "start_line": 16,
    "end_line": 20,
    "ast_path": "go:type:Server (struct)",
    "text": "package v0\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}",
    "header_context": "package v0",
    "core": "type Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}",
    "footer_context": "",
    "symbols_defined": [
      "Server"
    ],
    "symbols_referenced": [
      "transformer",
      "forecastService"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b5bda24dd522305b3192515486a7c3d44f5d9dcbd6347b2e24acb7f891eed2ef",
      "next": "89234e92ea303dffbf46fb1ba9b4b1dc7d2dae9af127858044c8bdbaca227a6d"
    },
    "summary_1l": "Go struct Server for weather forecasting",
    "qa_terms": "Server, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 25,
      "footer": 0,
      "total": 29
    },
    "file_sha": "709d54c45487b7957b0da9c171ab2e5a3b9a4b6f678f398ecdcd9d0d4e623371",
    "created_at": "2025-10-07T09:26:57.039165+00:00",
    "v": 3
  },
  {
    "chunk_id": "89234e92ea303dffbf46fb1ba9b4b1dc7d2dae9af127858044c8bdbaca227a6d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go",
    "language": "go",
    "start_line": 22,
    "end_line": 24,
    "ast_path": "go:function:",
    "text": "package v0\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}",
    "header_context": "package v0",
    "core": "func NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewServer",
      "Server",
      "forecastService"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "edc8e82363d0bf4d5a8a37a2ccf80aa834cd7bc70914d61fa5e1a357bc6cfd33",
      "next": "5b7273ca5d11539a7e56ca1a3bec8e171b45eb8ad6c883f830857906278d4ddd"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 3,
      "core": 19,
      "footer": 0,
      "total": 23
    },
    "file_sha": "709d54c45487b7957b0da9c171ab2e5a3b9a4b6f678f398ecdcd9d0d4e623371",
    "created_at": "2025-10-07T09:26:57.039369+00:00",
    "v": 3
  },
  {
    "chunk_id": "5b7273ca5d11539a7e56ca1a3bec8e171b45eb8ad6c883f830857906278d4ddd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go",
    "language": "go",
    "start_line": 26,
    "end_line": 36,
    "ast_path": "go:method:(s *Server).toGrpcError",
    "text": "package v0\nimport (\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n// receiver: s *Server\nfunc (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}",
    "header_context": "package v0\nimport (\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n// receiver: s *Server",
    "core": "func (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "toGrpcError"
    ],
    "symbols_referenced": [
      "Server",
      "status.Error",
      "errors.Is",
      "foreca.ErrLocationNotFound",
      "codes.NotFound",
      "codes.ResourceExhausted",
      "codes.Internal",
      "foreca.ErrRequestThrottled",
      "error"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "errors",
      "google.golang.org/grpc/status",
      "google.golang.org/grpc/codes"
    ],
    "neighbors": {
      "prev": "89234e92ea303dffbf46fb1ba9b4b1dc7d2dae9af127858044c8bdbaca227a6d",
      "next": null
    },
    "summary_1l": "Go method toGrpcError on s *Server for the Foreca proxy",
    "qa_terms": "foreca, proxy, s Server, toGrpcError, weather",
    "token_counts": {
      "header": 52,
      "core": 90,
      "footer": 0,
      "total": 143
    },
    "file_sha": "709d54c45487b7957b0da9c171ab2e5a3b9a4b6f678f398ecdcd9d0d4e623371",
    "created_at": "2025-10-07T09:26:57.040161+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba331762e641644f6a48b67724472a92332b41659f1bd61a55fe9c1f9e6dfad9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go",
    "language": "go",
    "start_line": 1,
    "end_line": 4,
    "ast_path": "go:file_header",
    "text": "package v0\n\nimport (\n\t\"context\"",
    "header_context": "",
    "core": "package v0\n\nimport (\n\t\"context\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": null,
      "next": "0467f3a84aa2375dfa0aa09d21f6261e272c1f2616d9a33ae3067abe02a38dec"
    },
    "summary_1l": "Go package v0",
    "qa_terms": "v0, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 9,
      "footer": 0,
      "total": 9
    },
    "file_sha": "5a4a91440c441e0805fa8f7ad237ccff0947b07a56c2a9976b55850983d63cd3",
    "created_at": "2025-10-07T09:26:57.040669+00:00",
    "v": 3
  },
  {
    "chunk_id": "0467f3a84aa2375dfa0aa09d21f6261e272c1f2616d9a33ae3067abe02a38dec",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go",
    "language": "go",
    "start_line": 8,
    "end_line": 16,
    "ast_path": "go:method:(s *Server).GetForecast",
    "text": "package v0\nimport \"context\"\n// receiver: s *Server\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\n\treturn s.t.Transform(forecast), nil\n}",
    "header_context": "package v0\nimport \"context\"\n// receiver: s *Server",
    "core": "func (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\n\treturn s.t.Transform(forecast), nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecast"
    ],
    "symbols_referenced": [
      "ForecastRequest",
      "err",
      "Server",
      "context.Context",
      "GetLocationId",
      "error",
      "Transform",
      "ForecastResponse",
      "pbv0",
      "forecast",
      "GetForecastForLocation"
    ],
    "imports_used": [
      "context"
    ],
    "neighbors": {
      "prev": "ba331762e641644f6a48b67724472a92332b41659f1bd61a55fe9c1f9e6dfad9",
      "next": null
    },
    "summary_1l": "Go method GetForecast on s *Server for the Foreca proxy",
    "qa_terms": "GetForecast, foreca, proxy, s Server, weather",
    "token_counts": {
      "header": 14,
      "core": 81,
      "footer": 0,
      "total": 96
    },
    "file_sha": "5a4a91440c441e0805fa8f7ad237ccff0947b07a56c2a9976b55850983d63cd3",
    "created_at": "2025-10-07T09:26:57.041417+00:00",
    "v": 3
  },
  {
    "chunk_id": "56945828710ef93526ea254dd5f7fc589f20ec0b279962fcb20c9dbdd3d39da7",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/samples/dynamodb/2775563.json",
    "language": "json",
    "start_line": 1,
    "end_line": 11,
    "ast_path": "block_1",
    "text": "{\n  \"id\": {\n    \"N\": \"2775563\"\n  },\n  \"provider_id\": {\n    \"N\": \"102755003\"\n  },\n  \"tz\": {\n    \"S\": \"Europe/Amsterdam\"\n  }\n}",
    "header_context": "",
    "core": "{\n  \"id\": {\n    \"N\": \"2775563\"\n  },\n  \"provider_id\": {\n    \"N\": \"102755003\"\n  },\n  \"tz\": {\n    \"S\": \"Europe/Amsterdam\"\n  }\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Json code block with 11 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 17,
      "footer": 0,
      "total": 17
    },
    "file_sha": "86ec937a1cee9356952325b248d59026d3cc595abccaa6e3e73f1f97a5058190",
    "created_at": "2025-10-07T09:26:57.044995+00:00",
    "v": 3
  },
  {
    "chunk_id": "1aa69978acb14b3b5ee822d649b342a25108ee720190122597a99a9c57f91431",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go",
    "language": "go",
    "start_line": 1,
    "end_line": 3,
    "ast_path": "go:file_header",
    "text": "package foreca\n\nimport \"errors\"",
    "header_context": "",
    "core": "package foreca\n\nimport \"errors\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "errors"
    ],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Go package foreca",
    "qa_terms": "foreca, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 8,
      "footer": 0,
      "total": 8
    },
    "file_sha": "966c92b494d2700ac2f85ff643ec542e321c4b51d059b364c9e19bd684a0a1e0",
    "created_at": "2025-10-07T09:26:57.045167+00:00",
    "v": 3
  },
  {
    "chunk_id": "2391dfdc8aa76a91120389bc6de8849bfe06d70cf635e31d34c440ab9469ec5d",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 50,
    "ast_path": "block_1",
    "text": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Creates AWS CodePipeline pipeline for Weather - Foreca Proxy service.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Source Code Configuration\n        Parameters:\n          - CodeStarConnectionArn\n      - Label:\n          default: Artifacts Configuration\n        Parameters:\n          - ArtifactsBucketName\n          - ArtifactsKeyArn\n      - Label:\n          default: Credentials Configuration\n        Parameters:\n          - ImpalaStudiosKmsKeyArn\n          - BitbucketSshPrivateKeySecretArn\n      - Label:\n          default: DevOps Configuration\n        Parameters:\n          - CodePipelineCloudFormationRoleArn\n      - Label:\n          default: Docker Account Configuration\n        Parameters:\n          - DockerCodePipelineCloudFormationRoleArn\n          - DockerCloudFormationDeployerRoleArn\n      - Label:\n          default: Workload Accounts Configuration\n        Parameters:\n          - WorkloadTestCodePipelineCloudFormationRoleArn\n          - WorkloadTestCloudFormationDeployerRoleArn\n          - WorkloadProductionCodePipelineCloudFormationRoleArn\n          - WorkloadProductionCloudFormationDeployerRoleArn\n      - Label:\n          default: Notifications Configuration\n        Parameters:\n          - NotificationsTopicArn\n    ParameterLabels:\n      CodeStarConnectionArn:\n        default: CodeStar Connection ARN\n      ArtifactsBucketName:\n        default: Bucket Name\n      ArtifactsKeyArn:\n        default: KMS Key ARN\n      ImpalaStudiosKmsKeyArn:\n        default: Impala Studios KMS Key ARN\n      BitbucketSshPrivateKeySecretArn:",
    "header_context": "",
    "core": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Creates AWS CodePipeline pipeline for Weather - Foreca Proxy service.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Source Code Configuration\n        Parameters:\n          - CodeStarConnectionArn\n      - Label:\n          default: Artifacts Configuration\n        Parameters:\n          - ArtifactsBucketName\n          - ArtifactsKeyArn\n      - Label:\n          default: Credentials Configuration\n        Parameters:\n          - ImpalaStudiosKmsKeyArn\n          - BitbucketSshPrivateKeySecretArn\n      - Label:\n          default: DevOps Configuration\n        Parameters:\n          - CodePipelineCloudFormationRoleArn\n      - Label:\n          default: Docker Account Configuration\n        Parameters:\n          - DockerCodePipelineCloudFormationRoleArn\n          - DockerCloudFormationDeployerRoleArn\n      - Label:\n          default: Workload Accounts Configuration\n        Parameters:\n          - WorkloadTestCodePipelineCloudFormationRoleArn\n          - WorkloadTestCloudFormationDeployerRoleArn\n          - WorkloadProductionCodePipelineCloudFormationRoleArn\n          - WorkloadProductionCloudFormationDeployerRoleArn\n      - Label:\n          default: Notifications Configuration\n        Parameters:\n          - NotificationsTopicArn\n    ParameterLabels:\n      CodeStarConnectionArn:\n        default: CodeStar Connection ARN\n      ArtifactsBucketName:\n        default: Bucket Name\n      ArtifactsKeyArn:\n        default: KMS Key ARN\n      ImpalaStudiosKmsKeyArn:\n        default: Impala Studios KMS Key ARN\n      BitbucketSshPrivateKeySecretArn:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 110,
      "footer": 0,
      "total": 110
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045507+00:00",
    "v": 3
  },
  {
    "chunk_id": "283d941fc146b478a114a44932e69afb9447ddd3427dd8128ea31bdd1e748dfe",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 51,
    "end_line": 100,
    "ast_path": "block_2",
    "text": "        default: Bitbucket SSH Key Secret ARN\n      DockerCodePipelineCloudFormationRoleArn:\n        default: 'CodePipeline CloudFormation Role ARN'\n      DockerCloudFormationDeployerRoleArn:\n        default: 'CloudFormation Deployer Role ARN'\n      WorkloadTestCodePipelineCloudFormationRoleArn:\n        default: '[Test] CodePipeline CloudFormation Role ARN'\n      WorkloadTestCloudFormationDeployerRoleArn:\n        default: '[Test] CloudFormation Deployer Role ARN'\n      WorkloadProductionCodePipelineCloudFormationRoleArn:\n        default: '[Production] CodePipeline CloudFormation Role ARN'\n      WorkloadProductionCloudFormationDeployerRoleArn:\n        default: '[Production] CloudFormation Deployer Role ARN'\n      NotificationsTopicArn:\n        default: Topic ARN\n      CodePipelineCloudFormationRoleArn:\n        default: 'CloudFormation Self Update Role ARN'\n\nParameters:\n  ArtifactsBucketName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The name of bucket where to store the pipeline's artifacts.\n    Default: /platform/devops/v0/artifacts_stores/default/bucket/name\n\n  ArtifactsKeyArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the KMS key to be used to encrypt/decrypt pipeline's artifacts.\n    Default: /platform/devops/v0/artifacts_stores/default/key/arn\n\n  CodeStarConnectionArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the CodeStar connection to download the source code from.\n    Default: /platform/devops/v0/codestar_connections/impalastudios_bitbucket/arn\n\n  BitbucketSshPrivateKeySecretArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the secret containing the Bitbucket SSH private key.\n    Default: /platform/devops/v0/credentials/bitbucket/ssh/private_key/secret/arn\n\n  ImpalaStudiosKmsKeyArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the key to be used to decrypt the secret containing the KrakenD Enterprise license.\n    Default: /platform/devops/v0/keys/impalastudios/arn\n\n  DockerCodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CodePipeline to execute CloudFormation operations on your behalf.\n    Default: /platform/devops/v0/codepipeline/roles/docker/arn\n\n  DockerCloudFormationDeployerRoleArn:",
    "header_context": "",
    "core": "        default: Bitbucket SSH Key Secret ARN\n      DockerCodePipelineCloudFormationRoleArn:\n        default: 'CodePipeline CloudFormation Role ARN'\n      DockerCloudFormationDeployerRoleArn:\n        default: 'CloudFormation Deployer Role ARN'\n      WorkloadTestCodePipelineCloudFormationRoleArn:\n        default: '[Test] CodePipeline CloudFormation Role ARN'\n      WorkloadTestCloudFormationDeployerRoleArn:\n        default: '[Test] CloudFormation Deployer Role ARN'\n      WorkloadProductionCodePipelineCloudFormationRoleArn:\n        default: '[Production] CodePipeline CloudFormation Role ARN'\n      WorkloadProductionCloudFormationDeployerRoleArn:\n        default: '[Production] CloudFormation Deployer Role ARN'\n      NotificationsTopicArn:\n        default: Topic ARN\n      CodePipelineCloudFormationRoleArn:\n        default: 'CloudFormation Self Update Role ARN'\n\nParameters:\n  ArtifactsBucketName:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The name of bucket where to store the pipeline's artifacts.\n    Default: /platform/devops/v0/artifacts_stores/default/bucket/name\n\n  ArtifactsKeyArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the KMS key to be used to encrypt/decrypt pipeline's artifacts.\n    Default: /platform/devops/v0/artifacts_stores/default/key/arn\n\n  CodeStarConnectionArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the CodeStar connection to download the source code from.\n    Default: /platform/devops/v0/codestar_connections/impalastudios_bitbucket/arn\n\n  BitbucketSshPrivateKeySecretArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the secret containing the Bitbucket SSH private key.\n    Default: /platform/devops/v0/credentials/bitbucket/ssh/private_key/secret/arn\n\n  ImpalaStudiosKmsKeyArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the key to be used to decrypt the secret containing the KrakenD Enterprise license.\n    Default: /platform/devops/v0/keys/impalastudios/arn\n\n  DockerCodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CodePipeline to execute CloudFormation operations on your behalf.\n    Default: /platform/devops/v0/codepipeline/roles/docker/arn\n\n  DockerCloudFormationDeployerRoleArn:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 188,
      "footer": 0,
      "total": 188
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045598+00:00",
    "v": 3
  },
  {
    "chunk_id": "83fe104b5254cbfb7da89f82a4c29c42842af7f511f3b437499006900061aeb9",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 101,
    "end_line": 150,
    "ast_path": "block_3",
    "text": "    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/docker/arn\n\n  WorkloadTestCodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CodePipeline to execute CloudFormation operations on your behalf.\n    Default: /platform/devops/v0/codepipeline/roles/services/test/arn\n\n  WorkloadTestCloudFormationDeployerRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/services/test/arn\n\n  WorkloadProductionCodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CodePipeline to execute CloudFormation operations on your behalf.\n    Default: /platform/devops/v0/codepipeline/roles/services/production/arn\n\n  WorkloadProductionCloudFormationDeployerRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/services/production/arn\n\n  NotificationsTopicArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) SNS topic to send failed pipeline execution notifications to.\n    Default: /platform/devops/v0/notifications/topic/arn\n\n  CodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/codepipeline/arn\n\nResources:\n  BuildDockerImageProjectRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - codebuild.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Tags:\n        - Key: Domain",
    "header_context": "",
    "core": "    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/docker/arn\n\n  WorkloadTestCodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CodePipeline to execute CloudFormation operations on your behalf.\n    Default: /platform/devops/v0/codepipeline/roles/services/test/arn\n\n  WorkloadTestCloudFormationDeployerRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/services/test/arn\n\n  WorkloadProductionCodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CodePipeline to execute CloudFormation operations on your behalf.\n    Default: /platform/devops/v0/codepipeline/roles/services/production/arn\n\n  WorkloadProductionCloudFormationDeployerRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/services/production/arn\n\n  NotificationsTopicArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) SNS topic to send failed pipeline execution notifications to.\n    Default: /platform/devops/v0/notifications/topic/arn\n\n  CodePipelineCloudFormationRoleArn:\n    Type: AWS::SSM::Parameter::Value<String>\n    Description: The Amazon Resource Name (ARN) of the role used by CloudFormation to provision and manage resources on your behalf.\n    Default: /platform/devops/v0/cloudformation/roles/codepipeline/arn\n\nResources:\n  BuildDockerImageProjectRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - codebuild.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Tags:\n        - Key: Domain",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 192,
      "footer": 0,
      "total": 192
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045672+00:00",
    "v": 3
  },
  {
    "chunk_id": "3a3b4d0f56a37c5c172f07772242d10d45afdfa707c441e8a1070b49d88ff5a5",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 151,
    "end_line": 200,
    "ast_path": "block_4",
    "text": "          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  BuildDockerImageProjectPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: CodeBuildPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:GetBucketPolicy\n              - s3:GetObject\n              - s3:ListBucket\n            Resource:\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}'\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}/*'\n          - Effect: Allow\n            Action:\n              - kms:*\n            Resource: !Ref ArtifactsKeyArn\n          - Effect: Allow\n            Action:\n              - logs:CreateLogGroup\n              - logs:CreateLogStream\n              - logs:PutLogEvents\n            Resource: arn:aws:logs:*:*:*\n          - Effect: Allow\n            Action:\n              - ecr:BatchCheckLayerAvailability\n              - ecr:CompleteLayerUpload\n              - ecr:GetAuthorizationToken\n              - ecr:InitiateLayerUpload\n              - ecr:PutImage\n              - ecr:UploadLayerPart\n            Resource: '*'\n          - Effect: Allow\n            Action:\n              - secretsmanager:GetSecretValue\n            Resource:\n              - !Ref BitbucketSshPrivateKeySecretArn\n          - Effect: Allow\n            Action:\n              - kms:Decrypt\n            Resource:\n              - !Ref ImpalaStudiosKmsKeyArn\n      Roles:",
    "header_context": "",
    "core": "          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  BuildDockerImageProjectPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: CodeBuildPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:GetBucketPolicy\n              - s3:GetObject\n              - s3:ListBucket\n            Resource:\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}'\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}/*'\n          - Effect: Allow\n            Action:\n              - kms:*\n            Resource: !Ref ArtifactsKeyArn\n          - Effect: Allow\n            Action:\n              - logs:CreateLogGroup\n              - logs:CreateLogStream\n              - logs:PutLogEvents\n            Resource: arn:aws:logs:*:*:*\n          - Effect: Allow\n            Action:\n              - ecr:BatchCheckLayerAvailability\n              - ecr:CompleteLayerUpload\n              - ecr:GetAuthorizationToken\n              - ecr:InitiateLayerUpload\n              - ecr:PutImage\n              - ecr:UploadLayerPart\n            Resource: '*'\n          - Effect: Allow\n            Action:\n              - secretsmanager:GetSecretValue\n            Resource:\n              - !Ref BitbucketSshPrivateKeySecretArn\n          - Effect: Allow\n            Action:\n              - kms:Decrypt\n            Resource:\n              - !Ref ImpalaStudiosKmsKeyArn\n      Roles:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 96,
      "footer": 0,
      "total": 96
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045732+00:00",
    "v": 3
  },
  {
    "chunk_id": "21cee614293074fd64da4a35254ba56fd2eec44aec9c04a13dce6cefc3608b6f",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 201,
    "end_line": 250,
    "ast_path": "block_5",
    "text": "        - !Ref BuildDockerImageProjectRole\n\n  BuildDockerImageAmd64Project:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-BuildDockerImageAmd64\n      EncryptionKey: !Ref ArtifactsKeyArn\n      ServiceRole: !GetAtt BuildDockerImageProjectRole.Arn\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: LINUX_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: IMAGE_REPO_NAME\n            Value: weather/foreca_proxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          env:\n            exported-variables:\n              - IMAGE_TAG\n          phases:\n            install:\n              commands:\n                - docker-buildx version && docker buildx version\n            pre_build:\n              commands:\n                - echo 'Logging in to Amazon ECR...'\n                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n                - export IMAGE_TAG=\"${COMMIT_ID}-amd64\"\n                - echo \"$BITBUCKET_SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\n            build:\n              commands:\n                - echo Build started on `date`\n                - docker buildx build --secret id=sshkey,src=${HOME}/.ssh/id_rsa -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG --build-arg APP_ENV=release --build-arg APP_VERSION=\"$IMAGE_TAG\" -f Dockerfile .\n                - echo Build completed on `date`\n            post_build:\n              commands:\n                - echo Pushing Docker image to Amazon ECR...\n                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n      TimeoutInMinutes: 10\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy",
    "header_context": "",
    "core": "        - !Ref BuildDockerImageProjectRole\n\n  BuildDockerImageAmd64Project:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-BuildDockerImageAmd64\n      EncryptionKey: !Ref ArtifactsKeyArn\n      ServiceRole: !GetAtt BuildDockerImageProjectRole.Arn\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: LINUX_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: IMAGE_REPO_NAME\n            Value: weather/foreca_proxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          env:\n            exported-variables:\n              - IMAGE_TAG\n          phases:\n            install:\n              commands:\n                - docker-buildx version && docker buildx version\n            pre_build:\n              commands:\n                - echo 'Logging in to Amazon ECR...'\n                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n                - export IMAGE_TAG=\"${COMMIT_ID}-amd64\"\n                - echo \"$BITBUCKET_SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\n            build:\n              commands:\n                - echo Build started on `date`\n                - docker buildx build --secret id=sshkey,src=${HOME}/.ssh/id_rsa -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG --build-arg APP_ENV=release --build-arg APP_VERSION=\"$IMAGE_TAG\" -f Dockerfile .\n                - echo Build completed on `date`\n            post_build:\n              commands:\n                - echo Pushing Docker image to Amazon ECR...\n                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n      TimeoutInMinutes: 10\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 140,
      "footer": 0,
      "total": 140
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045802+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba8b29f41952d10df6ab3e67c3c241ef78a04da1f4386cb0e7172f92490eb823",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 251,
    "end_line": 300,
    "ast_path": "block_6",
    "text": "\n  BuildDockerImageArm64Project:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-BuildDockerImageArm64\n      EncryptionKey: !Ref ArtifactsKeyArn\n      ServiceRole: !GetAtt BuildDockerImageProjectRole.Arn\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: ARM_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: IMAGE_REPO_NAME\n            Value: weather/foreca_proxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          env:\n            exported-variables:\n              - IMAGE_TAG\n          phases:\n            install:\n              commands:\n                - docker-buildx version && docker buildx version\n            pre_build:\n              commands:\n                - echo 'Logging in to Amazon ECR...'\n                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n                - export IMAGE_TAG=\"${COMMIT_ID}-arm64\"\n                - echo \"$BITBUCKET_SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\n            build:\n              commands:\n                - echo Build started on `date`\n                - docker buildx build --secret id=sshkey,src=${HOME}/.ssh/id_rsa -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG --build-arg APP_ENV=release --build-arg APP_VERSION=\"$IMAGE_TAG\" -f Dockerfile .\n                - echo Build completed on `date`\n            post_build:\n              commands:\n                - echo Pushing Docker image to Amazon ECR...\n                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n      TimeoutInMinutes: 10\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n",
    "header_context": "",
    "core": "\n  BuildDockerImageArm64Project:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-BuildDockerImageArm64\n      EncryptionKey: !Ref ArtifactsKeyArn\n      ServiceRole: !GetAtt BuildDockerImageProjectRole.Arn\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: ARM_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: IMAGE_REPO_NAME\n            Value: weather/foreca_proxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          env:\n            exported-variables:\n              - IMAGE_TAG\n          phases:\n            install:\n              commands:\n                - docker-buildx version && docker buildx version\n            pre_build:\n              commands:\n                - echo 'Logging in to Amazon ECR...'\n                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n                - export IMAGE_TAG=\"${COMMIT_ID}-arm64\"\n                - echo \"$BITBUCKET_SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\n            build:\n              commands:\n                - echo Build started on `date`\n                - docker buildx build --secret id=sshkey,src=${HOME}/.ssh/id_rsa -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG --build-arg APP_ENV=release --build-arg APP_VERSION=\"$IMAGE_TAG\" -f Dockerfile .\n                - echo Build completed on `date`\n            post_build:\n              commands:\n                - echo Pushing Docker image to Amazon ECR...\n                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n      TimeoutInMinutes: 10\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 137,
      "footer": 0,
      "total": 137
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045869+00:00",
    "v": 3
  },
  {
    "chunk_id": "17bc14fa66144217f403dd99ca84aff4c7078c7f5c26ce87cdd99ef57c58bffa",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 301,
    "end_line": 350,
    "ast_path": "block_7",
    "text": "  CreateDockerManifestProjectRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - codebuild.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  CreateDockerManifestProjectPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: CodeBuildPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:GetBucketPolicy\n              - s3:GetObject\n              - s3:ListBucket\n            Resource:\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}'\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}/*'\n          - Effect: Allow\n            Action:\n              - kms:*\n            Resource: !Ref ArtifactsKeyArn\n          - Effect: Allow\n            Action:\n              - logs:CreateLogGroup\n              - logs:CreateLogStream\n              - logs:PutLogEvents\n            Resource: arn:aws:logs:*:*:*\n          - Effect: Allow\n            Action:\n              - ecr:BatchCheckLayerAvailability\n              - ecr:CompleteLayerUpload\n              - ecr:GetAuthorizationToken",
    "header_context": "",
    "core": "  CreateDockerManifestProjectRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - codebuild.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  CreateDockerManifestProjectPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: CodeBuildPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:GetBucketPolicy\n              - s3:GetObject\n              - s3:ListBucket\n            Resource:\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}'\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}/*'\n          - Effect: Allow\n            Action:\n              - kms:*\n            Resource: !Ref ArtifactsKeyArn\n          - Effect: Allow\n            Action:\n              - logs:CreateLogGroup\n              - logs:CreateLogStream\n              - logs:PutLogEvents\n            Resource: arn:aws:logs:*:*:*\n          - Effect: Allow\n            Action:\n              - ecr:BatchCheckLayerAvailability\n              - ecr:CompleteLayerUpload\n              - ecr:GetAuthorizationToken",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 91,
      "footer": 0,
      "total": 91
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045925+00:00",
    "v": 3
  },
  {
    "chunk_id": "442da6aef9cdf987792e7f71feab1f77124a004c932d4cf394e332460ddf80d5",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 351,
    "end_line": 400,
    "ast_path": "block_8",
    "text": "              - ecr:InitiateLayerUpload\n              - ecr:PutImage\n              - ecr:UploadLayerPart\n              - ecr:BatchGetImage\n              - ecr:GetDownloadUrlForLayer\n            Resource: '*'\n      Roles:\n        - !Ref CreateDockerManifestProjectRole\n\n  CreateDockerManifestProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-CreateDockerManifest\n      EncryptionKey: !Ref ArtifactsKeyArn\n      ServiceRole: !GetAtt CreateDockerManifestProjectRole.Arn\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: LINUX_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: IMAGE_REPO_NAME\n            Value: weather/foreca_proxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          env:\n            exported-variables:\n              - IMAGE_TAG\n          phases:\n            pre_build:\n              commands:\n                - echo 'Logging in to Amazon ECR...'\n                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n                - export IMAGE_TAG=\"${COMMIT_ID}\"\n            build:\n              commands:\n                - echo Build started on `date`\n                - export DOCKER_CLI_EXPERIMENTAL=enabled\n                - |\n                    docker manifest create $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64 \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                    docker manifest create $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64 \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                - |",
    "header_context": "",
    "core": "              - ecr:InitiateLayerUpload\n              - ecr:PutImage\n              - ecr:UploadLayerPart\n              - ecr:BatchGetImage\n              - ecr:GetDownloadUrlForLayer\n            Resource: '*'\n      Roles:\n        - !Ref CreateDockerManifestProjectRole\n\n  CreateDockerManifestProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-CreateDockerManifest\n      EncryptionKey: !Ref ArtifactsKeyArn\n      ServiceRole: !GetAtt CreateDockerManifestProjectRole.Arn\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: LINUX_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: IMAGE_REPO_NAME\n            Value: weather/foreca_proxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          env:\n            exported-variables:\n              - IMAGE_TAG\n          phases:\n            pre_build:\n              commands:\n                - echo 'Logging in to Amazon ECR...'\n                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n                - export IMAGE_TAG=\"${COMMIT_ID}\"\n            build:\n              commands:\n                - echo Build started on `date`\n                - export DOCKER_CLI_EXPERIMENTAL=enabled\n                - |\n                    docker manifest create $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64 \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                    docker manifest create $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64 \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                - |",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 114,
      "footer": 0,
      "total": 114
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.045991+00:00",
    "v": 3
  },
  {
    "chunk_id": "d1f894dae92b4e3abaeec91c0fa6e831306fe3197282f75f586327a01549ce07",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 401,
    "end_line": 450,
    "ast_path": "block_9",
    "text": "                    docker manifest annotate \\\n                      --arch amd64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64\n                    docker manifest annotate \\\n                      --arch amd64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64\n                - |\n                    docker manifest annotate \\\n                      --arch arm64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                    docker manifest annotate \\\n                      --arch arm64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                - echo Build completed on `date`\n            post_build:\n              commands:\n                - echo Pushing Docker manifest to Amazon ECR...\n                - docker manifest push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n                - docker manifest push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest\n                - docker manifest inspect $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n                - docker manifest inspect $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest\n      TimeoutInMinutes: 10\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  PipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  PipelinePolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: CodePipelinePolicy",
    "header_context": "",
    "core": "                    docker manifest annotate \\\n                      --arch amd64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64\n                    docker manifest annotate \\\n                      --arch amd64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_AMD64\n                - |\n                    docker manifest annotate \\\n                      --arch arm64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                    docker manifest annotate \\\n                      --arch arm64 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest \\\n                      $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_ARM64\n                - echo Build completed on `date`\n            post_build:\n              commands:\n                - echo Pushing Docker manifest to Amazon ECR...\n                - docker manifest push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n                - docker manifest push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest\n                - docker manifest inspect $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n                - docker manifest inspect $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest\n      TimeoutInMinutes: 10\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  PipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  PipelinePolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: CodePipelinePolicy",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 123,
      "footer": 0,
      "total": 123
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046058+00:00",
    "v": 3
  },
  {
    "chunk_id": "851f87c4da9011337d6a1fe0662c2d017318ac1ad3f57ede772a1bf0cc6dd43a",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 451,
    "end_line": 500,
    "ast_path": "block_10",
    "text": "      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Sid: CodePipelineAccess\n            Effect: Allow\n            Action:\n              - codepipeline:*\n            Resource: '*'\n          - Sid: CodeStarAccess\n            Effect: Allow\n            Action:\n              - codestar-connections:UseConnection\n            Resource: !Ref CodeStarConnectionArn\n          - Sid: CodeBuildAccess\n            Effect: Allow\n            Action:\n              - codebuild:BatchGetBuilds\n              - codebuild:StartBuild\n            Resource: '*'\n          - Sid: CloudFormationAccess\n            Effect: Allow\n            Action:\n              - cloudformation:Describe*\n              - cloudformation:List*\n              - cloudformation:CreateStack\n              - cloudformation:DeleteStack\n              - cloudformation:DescribeStacks\n              - cloudformation:UpdateStack\n              - cloudformation:CreateChangeSet\n              - cloudformation:DeleteChangeSet\n              - cloudformation:DescribeChangeSet\n              - cloudformation:ExecuteChangeSet\n              - cloudformation:SetStackPolicy\n              - cloudformation:ValidateTemplate\n            Resource: '*'\n          - Sid: IAMAccess\n            Effect: Allow\n            Action:\n              - iam:PassRole\n              - iam:ListRoles\n            Resource: '*'\n          - Sid: S3Access\n            Effect: Allow\n            Action:\n              - s3:ListAllMyBuckets\n              - s3:GetBucketLocation\n            Resource: '*'\n          - Sid: KMSAccess\n            Effect: Allow\n            Action:",
    "header_context": "",
    "core": "      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Sid: CodePipelineAccess\n            Effect: Allow\n            Action:\n              - codepipeline:*\n            Resource: '*'\n          - Sid: CodeStarAccess\n            Effect: Allow\n            Action:\n              - codestar-connections:UseConnection\n            Resource: !Ref CodeStarConnectionArn\n          - Sid: CodeBuildAccess\n            Effect: Allow\n            Action:\n              - codebuild:BatchGetBuilds\n              - codebuild:StartBuild\n            Resource: '*'\n          - Sid: CloudFormationAccess\n            Effect: Allow\n            Action:\n              - cloudformation:Describe*\n              - cloudformation:List*\n              - cloudformation:CreateStack\n              - cloudformation:DeleteStack\n              - cloudformation:DescribeStacks\n              - cloudformation:UpdateStack\n              - cloudformation:CreateChangeSet\n              - cloudformation:DeleteChangeSet\n              - cloudformation:DescribeChangeSet\n              - cloudformation:ExecuteChangeSet\n              - cloudformation:SetStackPolicy\n              - cloudformation:ValidateTemplate\n            Resource: '*'\n          - Sid: IAMAccess\n            Effect: Allow\n            Action:\n              - iam:PassRole\n              - iam:ListRoles\n            Resource: '*'\n          - Sid: S3Access\n            Effect: Allow\n            Action:\n              - s3:ListAllMyBuckets\n              - s3:GetBucketLocation\n            Resource: '*'\n          - Sid: KMSAccess\n            Effect: Allow\n            Action:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 99,
      "footer": 0,
      "total": 99
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046114+00:00",
    "v": 3
  },
  {
    "chunk_id": "81cf907cb031c2938fc20b95552bbdf65fc38a3827a8b2c6b353ec1c89615f4e",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 501,
    "end_line": 550,
    "ast_path": "block_11",
    "text": "              - kms:Decrypt\n              - kms:GenerateDataKey*\n            Resource: !Ref ArtifactsKeyArn\n          - Sid: ArtifactsS3Access\n            Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:GetObject\n              - s3:GetBucketPolicy\n              - S3:ListBucket\n            Resource:\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}'\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}/*'\n          - Effect: Allow\n            Action:\n              - sts:AssumeRole\n            Resource:\n              - !Ref DockerCodePipelineCloudFormationRoleArn\n              - !Ref WorkloadTestCodePipelineCloudFormationRoleArn\n              - !Ref WorkloadProductionCodePipelineCloudFormationRoleArn\n      Roles:\n        - !Ref PipelineRole\n\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn:\n      - PipelinePolicy\n    Properties:\n      RoleArn: !GetAtt PipelineRole.Arn\n      Name: WeatherDomain-ForecaProxyService\n      RestartExecutionOnUpdate: true\n      PipelineType: V2\n      ExecutionMode: SUPERSEDED\n      Triggers:\n        - ProviderType: CodeStarSourceConnection\n          GitConfiguration:\n            SourceActionName: GetSource\n            Push:\n              - Branches:\n                  Includes:\n                    - main\n                FilePaths:\n                  Excludes:\n                    - '{bitbucket-pipelines,docker-compose,catalog-info}.{yml,yaml}'\n                    - '*.{md,json}'\n                    - '.{env*,git*}'\n                    - Dockerfile.dev\n                    - '{art,.docker,samples}/**'\n                    - Makefile",
    "header_context": "",
    "core": "              - kms:Decrypt\n              - kms:GenerateDataKey*\n            Resource: !Ref ArtifactsKeyArn\n          - Sid: ArtifactsS3Access\n            Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:GetObject\n              - s3:GetBucketPolicy\n              - S3:ListBucket\n            Resource:\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}'\n              - !Sub 'arn:aws:s3:::${ArtifactsBucketName}/*'\n          - Effect: Allow\n            Action:\n              - sts:AssumeRole\n            Resource:\n              - !Ref DockerCodePipelineCloudFormationRoleArn\n              - !Ref WorkloadTestCodePipelineCloudFormationRoleArn\n              - !Ref WorkloadProductionCodePipelineCloudFormationRoleArn\n      Roles:\n        - !Ref PipelineRole\n\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn:\n      - PipelinePolicy\n    Properties:\n      RoleArn: !GetAtt PipelineRole.Arn\n      Name: WeatherDomain-ForecaProxyService\n      RestartExecutionOnUpdate: true\n      PipelineType: V2\n      ExecutionMode: SUPERSEDED\n      Triggers:\n        - ProviderType: CodeStarSourceConnection\n          GitConfiguration:\n            SourceActionName: GetSource\n            Push:\n              - Branches:\n                  Includes:\n                    - main\n                FilePaths:\n                  Excludes:\n                    - '{bitbucket-pipelines,docker-compose,catalog-info}.{yml,yaml}'\n                    - '*.{md,json}'\n                    - '.{env*,git*}'\n                    - Dockerfile.dev\n                    - '{art,.docker,samples}/**'\n                    - Makefile",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 93,
      "footer": 0,
      "total": 93
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046172+00:00",
    "v": 3
  },
  {
    "chunk_id": "797b8013f328835f94c1c2836d18d01a664084a798e4d74b9fe5ad9dab78f4fc",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 551,
    "end_line": 600,
    "ast_path": "block_12",
    "text": "      ArtifactStore:\n        Type: S3\n        Location: !Ref ArtifactsBucketName\n        EncryptionKey:\n          Id: !Ref ArtifactsKeyArn\n          Type: KMS\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: GetSource\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Version: 1\n                Provider: CodeStarSourceConnection\n              Configuration:\n                ConnectionArn: !Ref CodeStarConnectionArn\n                FullRepositoryId: crunding/weather_foreca_proxy_service\n                BranchName: main\n                OutputArtifactFormat: CODE_ZIP\n                DetectChanges: true\n              RunOrder: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Namespace: SourceVariables\n        - Name: DevOps\n          Actions:\n            - Name: CreatePipelineChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: CloudFormation\n                Version: 1\n              Configuration:\n                ActionMode: CHANGE_SET_REPLACE\n                RoleArn: !Ref CodePipelineCloudFormationRoleArn\n                StackName: WeatherDomainForecaProxyServicePipeline\n                ChangeSetName: WeatherDomainForecaProxyServicePipeline-#{SourceVariables.CommitId}\n                TemplatePath: SourceArtifact::.aws/pipeline.yml\n                Capabilities: CAPABILITY_NAMED_IAM\n              InputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n            - Name: CreateEcrChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:",
    "header_context": "",
    "core": "      ArtifactStore:\n        Type: S3\n        Location: !Ref ArtifactsBucketName\n        EncryptionKey:\n          Id: !Ref ArtifactsKeyArn\n          Type: KMS\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: GetSource\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Version: 1\n                Provider: CodeStarSourceConnection\n              Configuration:\n                ConnectionArn: !Ref CodeStarConnectionArn\n                FullRepositoryId: crunding/weather_foreca_proxy_service\n                BranchName: main\n                OutputArtifactFormat: CODE_ZIP\n                DetectChanges: true\n              RunOrder: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Namespace: SourceVariables\n        - Name: DevOps\n          Actions:\n            - Name: CreatePipelineChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: CloudFormation\n                Version: 1\n              Configuration:\n                ActionMode: CHANGE_SET_REPLACE\n                RoleArn: !Ref CodePipelineCloudFormationRoleArn\n                StackName: WeatherDomainForecaProxyServicePipeline\n                ChangeSetName: WeatherDomainForecaProxyServicePipeline-#{SourceVariables.CommitId}\n                TemplatePath: SourceArtifact::.aws/pipeline.yml\n                Capabilities: CAPABILITY_NAMED_IAM\n              InputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n            - Name: CreateEcrChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 98,
      "footer": 0,
      "total": 98
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046234+00:00",
    "v": 3
  },
  {
    "chunk_id": "c202d93244df462beb8f8740b00c072f615cdffa58ec4d14a7bb4ae50bfe94f6",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 601,
    "end_line": 650,
    "ast_path": "block_13",
    "text": "                ChangeSetName: 'WeatherDomainForecaProxyServiceRepository-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_REPLACE\n                Capabilities: CAPABILITY_NAMED_IAM\n                StackName: WeatherDomainForecaProxyServiceRepository\n                TemplatePath: SourceArtifact::.aws/ecr.yml\n                RoleArn: !Ref DockerCloudFormationDeployerRoleArn\n              RunOrder: 1\n              RoleArn: !Ref DockerCodePipelineCloudFormationRoleArn\n              InputArtifacts:\n                - Name: SourceArtifact\n            - Name: ExecutePipelineChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: CloudFormation\n                Version: 1\n              Configuration:\n                ActionMode: CHANGE_SET_EXECUTE\n                RoleArn: !Ref CodePipelineCloudFormationRoleArn\n                StackName: WeatherDomainForecaProxyServicePipeline\n                ChangeSetName: WeatherDomainForecaProxyServicePipeline-#{SourceVariables.CommitId}\n              RunOrder: 2\n            - Name: ExecuteEcrChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ChangeSetName: 'WeatherDomainForecaProxyServiceRepository-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_EXECUTE\n                StackName: WeatherDomainForecaProxyServiceRepository\n                RoleArn: !Ref DockerCloudFormationDeployerRoleArn\n              RunOrder: 2\n              RoleArn: !Ref DockerCodePipelineCloudFormationRoleArn\n        - Name: Build\n          Actions:\n            - Name: BuildDockerImageAmd64\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref BuildDockerImageAmd64Project\n                EnvironmentVariables: !Sub |\n                  [\n                    {\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"},\n                    {\"name\": \"AWS_ACCOUNT_ID\", \"value\": \"598094125568\"},\n                    {\"name\": \"COMMIT_ID\", \"value\": \"#{SourceVariables.CommitId}\"},",
    "header_context": "",
    "core": "                ChangeSetName: 'WeatherDomainForecaProxyServiceRepository-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_REPLACE\n                Capabilities: CAPABILITY_NAMED_IAM\n                StackName: WeatherDomainForecaProxyServiceRepository\n                TemplatePath: SourceArtifact::.aws/ecr.yml\n                RoleArn: !Ref DockerCloudFormationDeployerRoleArn\n              RunOrder: 1\n              RoleArn: !Ref DockerCodePipelineCloudFormationRoleArn\n              InputArtifacts:\n                - Name: SourceArtifact\n            - Name: ExecutePipelineChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: CloudFormation\n                Version: 1\n              Configuration:\n                ActionMode: CHANGE_SET_EXECUTE\n                RoleArn: !Ref CodePipelineCloudFormationRoleArn\n                StackName: WeatherDomainForecaProxyServicePipeline\n                ChangeSetName: WeatherDomainForecaProxyServicePipeline-#{SourceVariables.CommitId}\n              RunOrder: 2\n            - Name: ExecuteEcrChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ChangeSetName: 'WeatherDomainForecaProxyServiceRepository-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_EXECUTE\n                StackName: WeatherDomainForecaProxyServiceRepository\n                RoleArn: !Ref DockerCloudFormationDeployerRoleArn\n              RunOrder: 2\n              RoleArn: !Ref DockerCodePipelineCloudFormationRoleArn\n        - Name: Build\n          Actions:\n            - Name: BuildDockerImageAmd64\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref BuildDockerImageAmd64Project\n                EnvironmentVariables: !Sub |\n                  [\n                    {\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"},\n                    {\"name\": \"AWS_ACCOUNT_ID\", \"value\": \"598094125568\"},\n                    {\"name\": \"COMMIT_ID\", \"value\": \"#{SourceVariables.CommitId}\"},",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 109,
      "footer": 0,
      "total": 109
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046298+00:00",
    "v": 3
  },
  {
    "chunk_id": "df8ff0edeaf7596f9e3c081a4eebad6074d069698a9ccebcc2c8ad0214cd3e1d",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 651,
    "end_line": 700,
    "ast_path": "block_14",
    "text": "                    {\"name\": \"BITBUCKET_SSH_PRIVATE_KEY\", \"value\": \"${BitbucketSshPrivateKeySecretArn}\", \"type\": \"SECRETS_MANAGER\"}\n                  ]\n              RunOrder: 1\n              InputArtifacts:\n                - Name: SourceArtifact\n              Namespace: DockerBuildAmd64Variables\n            - Name: BuildDockerImageArm64\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref BuildDockerImageArm64Project\n                EnvironmentVariables: !Sub |\n                  [\n                    {\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"},\n                    {\"name\": \"AWS_ACCOUNT_ID\", \"value\": \"598094125568\"},\n                    {\"name\": \"COMMIT_ID\", \"value\": \"#{SourceVariables.CommitId}\"},\n                    {\"name\": \"BITBUCKET_SSH_PRIVATE_KEY\", \"value\": \"${BitbucketSshPrivateKeySecretArn}\", \"type\": \"SECRETS_MANAGER\"}\n                  ]\n              RunOrder: 1\n              InputArtifacts:\n                - Name: SourceArtifact\n              Namespace: DockerBuildArm64Variables\n            - Name: DockerCreateManifest\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CreateDockerManifestProject\n                EnvironmentVariables: |\n                  [\n                    {\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"},\n                    {\"name\": \"AWS_ACCOUNT_ID\", \"value\": \"598094125568\"},\n                    {\"name\": \"COMMIT_ID\", \"value\": \"#{SourceVariables.CommitId}\"},\n                    {\"name\": \"IMAGE_TAG_AMD64\", \"value\": \"#{DockerBuildAmd64Variables.IMAGE_TAG}\"},\n                    {\"name\": \"IMAGE_TAG_ARM64\", \"value\": \"#{DockerBuildArm64Variables.IMAGE_TAG}\"}\n                  ]\n              RunOrder: 2\n              Namespace: DockerManifestVariables\n              InputArtifacts:\n                - Name: SourceArtifact\n        - Name: DeployToTestEnvironment\n          Actions:\n            - Name: CreateOrUpdateStack\n              ActionTypeId:\n                Category: Deploy",
    "header_context": "",
    "core": "                    {\"name\": \"BITBUCKET_SSH_PRIVATE_KEY\", \"value\": \"${BitbucketSshPrivateKeySecretArn}\", \"type\": \"SECRETS_MANAGER\"}\n                  ]\n              RunOrder: 1\n              InputArtifacts:\n                - Name: SourceArtifact\n              Namespace: DockerBuildAmd64Variables\n            - Name: BuildDockerImageArm64\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref BuildDockerImageArm64Project\n                EnvironmentVariables: !Sub |\n                  [\n                    {\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"},\n                    {\"name\": \"AWS_ACCOUNT_ID\", \"value\": \"598094125568\"},\n                    {\"name\": \"COMMIT_ID\", \"value\": \"#{SourceVariables.CommitId}\"},\n                    {\"name\": \"BITBUCKET_SSH_PRIVATE_KEY\", \"value\": \"${BitbucketSshPrivateKeySecretArn}\", \"type\": \"SECRETS_MANAGER\"}\n                  ]\n              RunOrder: 1\n              InputArtifacts:\n                - Name: SourceArtifact\n              Namespace: DockerBuildArm64Variables\n            - Name: DockerCreateManifest\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CreateDockerManifestProject\n                EnvironmentVariables: |\n                  [\n                    {\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"},\n                    {\"name\": \"AWS_ACCOUNT_ID\", \"value\": \"598094125568\"},\n                    {\"name\": \"COMMIT_ID\", \"value\": \"#{SourceVariables.CommitId}\"},\n                    {\"name\": \"IMAGE_TAG_AMD64\", \"value\": \"#{DockerBuildAmd64Variables.IMAGE_TAG}\"},\n                    {\"name\": \"IMAGE_TAG_ARM64\", \"value\": \"#{DockerBuildArm64Variables.IMAGE_TAG}\"}\n                  ]\n              RunOrder: 2\n              Namespace: DockerManifestVariables\n              InputArtifacts:\n                - Name: SourceArtifact\n        - Name: DeployToTestEnvironment\n          Actions:\n            - Name: CreateOrUpdateStack\n              ActionTypeId:\n                Category: Deploy",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 120,
      "footer": 0,
      "total": 120
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046360+00:00",
    "v": 3
  },
  {
    "chunk_id": "ff79fd81b973d682173684c7ad56cefdb966dac5f67f446d4bbf533341ec5998",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 701,
    "end_line": 750,
    "ast_path": "block_15",
    "text": "                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: REPLACE_ON_FAILURE\n                Capabilities: CAPABILITY_NAMED_IAM\n                StackName: WeatherDomainForecaProxyServiceV0\n                TemplatePath: SourceArtifact::template.yml\n                TemplateConfiguration: SourceArtifact::.aws/cloudformation/test-stack-configuration.json\n                ParameterOverrides: '{\"ImageTag\": \"#{DockerManifestVariables.IMAGE_TAG}\"}'\n                RoleArn: !Ref WorkloadTestCloudFormationDeployerRoleArn\n              RunOrder: 1\n              RoleArn: !Ref WorkloadTestCodePipelineCloudFormationRoleArn\n              InputArtifacts:\n                - Name: SourceArtifact\n        - Name: ApproveChanges\n          Actions:\n            - Name: Approve\n              ActionTypeId:\n                Category: Approval\n                Owner: AWS\n                Version: 1\n                Provider: Manual\n              Configuration:\n                CustomData: 'Log in to https://api.test.impalastudios.com and test the changes before approving.'\n              RunOrder: 1\n        - Name: DeployToProductionEnvironment\n          Actions:\n            - Name: CreateChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ChangeSetName: 'WeatherDomainForecaProxyServiceV0-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_REPLACE\n                Capabilities: CAPABILITY_NAMED_IAM\n                StackName: WeatherDomainForecaProxyServiceV0\n                TemplatePath: SourceArtifact::template.yml\n                TemplateConfiguration: SourceArtifact::.aws/cloudformation/production-stack-configuration.json\n                ParameterOverrides: '{\"ImageTag\": \"#{DockerManifestVariables.IMAGE_TAG}\"}'\n                RoleArn: !Ref WorkloadProductionCloudFormationDeployerRoleArn\n              RunOrder: 1\n              RoleArn: !Ref WorkloadProductionCodePipelineCloudFormationRoleArn\n              InputArtifacts:\n                - Name: SourceArtifact\n            - Name: Approve\n              ActionTypeId:\n                Category: Approval",
    "header_context": "",
    "core": "                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: REPLACE_ON_FAILURE\n                Capabilities: CAPABILITY_NAMED_IAM\n                StackName: WeatherDomainForecaProxyServiceV0\n                TemplatePath: SourceArtifact::template.yml\n                TemplateConfiguration: SourceArtifact::.aws/cloudformation/test-stack-configuration.json\n                ParameterOverrides: '{\"ImageTag\": \"#{DockerManifestVariables.IMAGE_TAG}\"}'\n                RoleArn: !Ref WorkloadTestCloudFormationDeployerRoleArn\n              RunOrder: 1\n              RoleArn: !Ref WorkloadTestCodePipelineCloudFormationRoleArn\n              InputArtifacts:\n                - Name: SourceArtifact\n        - Name: ApproveChanges\n          Actions:\n            - Name: Approve\n              ActionTypeId:\n                Category: Approval\n                Owner: AWS\n                Version: 1\n                Provider: Manual\n              Configuration:\n                CustomData: 'Log in to https://api.test.impalastudios.com and test the changes before approving.'\n              RunOrder: 1\n        - Name: DeployToProductionEnvironment\n          Actions:\n            - Name: CreateChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ChangeSetName: 'WeatherDomainForecaProxyServiceV0-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_REPLACE\n                Capabilities: CAPABILITY_NAMED_IAM\n                StackName: WeatherDomainForecaProxyServiceV0\n                TemplatePath: SourceArtifact::template.yml\n                TemplateConfiguration: SourceArtifact::.aws/cloudformation/production-stack-configuration.json\n                ParameterOverrides: '{\"ImageTag\": \"#{DockerManifestVariables.IMAGE_TAG}\"}'\n                RoleArn: !Ref WorkloadProductionCloudFormationDeployerRoleArn\n              RunOrder: 1\n              RoleArn: !Ref WorkloadProductionCodePipelineCloudFormationRoleArn\n              InputArtifacts:\n                - Name: SourceArtifact\n            - Name: Approve\n              ActionTypeId:\n                Category: Approval",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 112,
      "footer": 0,
      "total": 112
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046424+00:00",
    "v": 3
  },
  {
    "chunk_id": "c69bef31e1ea237cca0e4cfd7e16df0fa898e8bacb395e00cff1b8fb6221d924",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/pipeline.yml",
    "language": "yaml",
    "start_line": 751,
    "end_line": 790,
    "ast_path": "block_16",
    "text": "                Owner: AWS\n                Version: 1\n                Provider: Manual\n              Configuration:\n                CustomData: 'Review the Change Set before approving the production deployment.'\n              RunOrder: 2\n            - Name: ExecuteChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ChangeSetName: 'WeatherDomainForecaProxyServiceV0-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_EXECUTE\n                StackName: WeatherDomainForecaProxyServiceV0\n                RoleArn: !Ref WorkloadProductionCloudFormationDeployerRoleArn\n              RunOrder: 3\n              RoleArn: !Ref WorkloadProductionCodePipelineCloudFormationRoleArn\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  FailedPipelineNotificationRule:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-Failed\n      Status: ENABLED\n      Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'\n      EventTypeIds:\n        - codepipeline-pipeline-pipeline-execution-failed\n      DetailType: FULL\n      Targets:\n        - TargetType: SNS\n          TargetAddress: !Ref NotificationsTopicArn\n      Tags:\n        Domain: weather\n        Service: foreca_proxy",
    "header_context": "",
    "core": "                Owner: AWS\n                Version: 1\n                Provider: Manual\n              Configuration:\n                CustomData: 'Review the Change Set before approving the production deployment.'\n              RunOrder: 2\n            - Name: ExecuteChangeSet\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ChangeSetName: 'WeatherDomainForecaProxyServiceV0-#{SourceVariables.CommitId}'\n                ActionMode: CHANGE_SET_EXECUTE\n                StackName: WeatherDomainForecaProxyServiceV0\n                RoleArn: !Ref WorkloadProductionCloudFormationDeployerRoleArn\n              RunOrder: 3\n              RoleArn: !Ref WorkloadProductionCodePipelineCloudFormationRoleArn\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n\n  FailedPipelineNotificationRule:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      Name: WeatherDomain-ForecaProxyService-Failed\n      Status: ENABLED\n      Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'\n      EventTypeIds:\n        - codepipeline-pipeline-pipeline-execution-failed\n      DetailType: FULL\n      Targets:\n        - TargetType: SNS\n          TargetAddress: !Ref NotificationsTopicArn\n      Tags:\n        Domain: weather\n        Service: foreca_proxy",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 40 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 85,
      "footer": 0,
      "total": 85
    },
    "file_sha": "8830cba6fa9bde3e32d5181a6bc733910f179c17481fbefc2738cae7e78fbcc1",
    "created_at": "2025-10-07T09:26:57.046475+00:00",
    "v": 3
  },
  {
    "chunk_id": "525a9558bef586553741b38de9fbb0f00a9780786890d4f6d5c0478d64be77bd",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/ecr.yml",
    "language": "yaml",
    "start_line": 1,
    "end_line": 50,
    "ast_path": "block_1",
    "text": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Creates ECR repository for Weather - Foreca Proxy service.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Organisation Configuration\n        Parameters:\n          - WorkloadAccountIds\n          - DevOpsAccountIds\n    ParameterLabels:\n      DevOpsAccountIds:\n        default: DevOps Account IDs\n      WorkloadAccountIds:\n        default: Workload Account IDs\n\nParameters:\n  WorkloadAccountIds:\n    Type: AWS::SSM::Parameter::Value<List<String>>\n    Description: The list of account IDs images will be pulled from.\n    Default: /organisation/accounts/services/ids\n  DevOpsAccountIds:\n    Type: AWS::SSM::Parameter::Value<List<String>>\n    Description: The list of account IDs images will be pushed from.\n    Default: /organisation/accounts/devops/ids\n\nResources:\n  Repository:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: weather/foreca_proxy\n      EmptyOnDelete: true\n      LifecyclePolicy:\n        LifecyclePolicyText: |-\n          {\n            \"rules\": [\n              {\n                \"rulePriority\": 1,\n                \"description\": \"Keep last 10 images\",\n                \"selection\": {\n                  \"tagStatus\": \"tagged\",\n                  \"tagPatternList\": [\n                    \"*\"\n                  ],\n                  \"countType\": \"imageCountMoreThan\",\n                  \"countNumber\": 10\n                },\n                \"action\": {\n                  \"type\": \"expire\"",
    "header_context": "",
    "core": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Creates ECR repository for Weather - Foreca Proxy service.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Organisation Configuration\n        Parameters:\n          - WorkloadAccountIds\n          - DevOpsAccountIds\n    ParameterLabels:\n      DevOpsAccountIds:\n        default: DevOps Account IDs\n      WorkloadAccountIds:\n        default: Workload Account IDs\n\nParameters:\n  WorkloadAccountIds:\n    Type: AWS::SSM::Parameter::Value<List<String>>\n    Description: The list of account IDs images will be pulled from.\n    Default: /organisation/accounts/services/ids\n  DevOpsAccountIds:\n    Type: AWS::SSM::Parameter::Value<List<String>>\n    Description: The list of account IDs images will be pushed from.\n    Default: /organisation/accounts/devops/ids\n\nResources:\n  Repository:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: weather/foreca_proxy\n      EmptyOnDelete: true\n      LifecyclePolicy:\n        LifecyclePolicyText: |-\n          {\n            \"rules\": [\n              {\n                \"rulePriority\": 1,\n                \"description\": \"Keep last 10 images\",\n                \"selection\": {\n                  \"tagStatus\": \"tagged\",\n                  \"tagPatternList\": [\n                    \"*\"\n                  ],\n                  \"countType\": \"imageCountMoreThan\",\n                  \"countNumber\": 10\n                },\n                \"action\": {\n                  \"type\": \"expire\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 50 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 109,
      "footer": 0,
      "total": 109
    },
    "file_sha": "0fdd3a49ff8e7669211a06e38e9175084da25d3a6e0676cf507bb2d23ea83e07",
    "created_at": "2025-10-07T09:26:57.046289+00:00",
    "v": 3
  },
  {
    "chunk_id": "46e1db13783088ac8c4a9e0cbdf8848b6ce8c21b982aa7967816c9fd94504fd2",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/ecr.yml",
    "language": "yaml",
    "start_line": 51,
    "end_line": 98,
    "ast_path": "block_2",
    "text": "                }\n              },\n              {\n                \"rulePriority\": 2,\n                \"description\": \"Delete untagged images\",\n                \"selection\": {\n                  \"tagStatus\": \"untagged\",\n                  \"countType\": \"sinceImagePushed\",\n                  \"countUnit\": \"days\",\n                  \"countNumber\": 1\n                },\n                \"action\": {\n                  \"type\": \"expire\"\n                }\n              }\n            ]\n          }\n      RepositoryPolicyText:\n        Version: '2012-10-17'\n        Statement:\n          - Sid: WorkloadsCrossAccountPermission\n            Principal:\n              AWS: !Ref WorkloadAccountIds\n            Effect: Allow\n            Action:\n              - ecr:GetDownloadUrlForLayer\n              - ecr:BatchGetImage\n              - ecr:BatchCheckLayerAvailability\n              - ecr:DescribeImages\n              - ecr:DescribeRepositories\n          - Sid: DockerRegistryCrossAccountPermission\n            Principal:\n              AWS: !Ref DevOpsAccountIds\n            Effect: Allow\n            Action:\n              - ecr:GetDownloadUrlForLayer\n              - ecr:BatchGetImage\n              - ecr:BatchCheckLayerAvailability\n              - ecr:PutImage\n              - ecr:InitiateLayerUpload\n              - ecr:UploadLayerPart\n              - ecr:CompleteLayerUpload\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n",
    "header_context": "",
    "core": "                }\n              },\n              {\n                \"rulePriority\": 2,\n                \"description\": \"Delete untagged images\",\n                \"selection\": {\n                  \"tagStatus\": \"untagged\",\n                  \"countType\": \"sinceImagePushed\",\n                  \"countUnit\": \"days\",\n                  \"countNumber\": 1\n                },\n                \"action\": {\n                  \"type\": \"expire\"\n                }\n              }\n            ]\n          }\n      RepositoryPolicyText:\n        Version: '2012-10-17'\n        Statement:\n          - Sid: WorkloadsCrossAccountPermission\n            Principal:\n              AWS: !Ref WorkloadAccountIds\n            Effect: Allow\n            Action:\n              - ecr:GetDownloadUrlForLayer\n              - ecr:BatchGetImage\n              - ecr:BatchCheckLayerAvailability\n              - ecr:DescribeImages\n              - ecr:DescribeRepositories\n          - Sid: DockerRegistryCrossAccountPermission\n            Principal:\n              AWS: !Ref DevOpsAccountIds\n            Effect: Allow\n            Action:\n              - ecr:GetDownloadUrlForLayer\n              - ecr:BatchGetImage\n              - ecr:BatchCheckLayerAvailability\n              - ecr:PutImage\n              - ecr:InitiateLayerUpload\n              - ecr:UploadLayerPart\n              - ecr:CompleteLayerUpload\n      Tags:\n        - Key: Domain\n          Value: weather\n        - Key: Service\n          Value: foreca_proxy\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Yaml code block with 48 lines",
    "qa_terms": "DELETE, GET, PATCH, POST, PUT",
    "token_counts": {
      "header": 0,
      "core": 87,
      "footer": 0,
      "total": 87
    },
    "file_sha": "0fdd3a49ff8e7669211a06e38e9175084da25d3a6e0676cf507bb2d23ea83e07",
    "created_at": "2025-10-07T09:26:57.046583+00:00",
    "v": 3
  },
  {
    "chunk_id": "94137e9266a15c6a7d5e91e8c1cfcc53ce4756c894e9da8ba85da831d5c4259f",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/cloudformation/test-stack-configuration.json",
    "language": "json",
    "start_line": 1,
    "end_line": 30,
    "ast_path": "block_1",
    "text": "{\n  \"Parameters\": {\n    \"Version\": \"0\",\n    \"VpcId\": \"/platform/network/v0/vpcs/default/id\",\n    \"VpcCidr\": \"/platform/network/v0/vpcs/default/cidr\",\n    \"Subnets\": \"/platform/network/v0/vpcs/default/subnets/public/ids\",\n    \"EcsClusterName\": \"/weather/platform/v0/ecs/cluster/name\",\n    \"EcsCapacityProviderName\": \"/weather/platform/v0/ecs/capacity_providers/fargate/name\",\n    \"PrivateDnsNamespaceId\": \"/platform/private_namespaces/v0/default/id\",\n    \"GrpcLaunchType\":  \"FARGATE\",\n    \"GrpcDesiredCount\": \"1\",\n    \"MappingsTableBillingMode\": \"PROVISIONED\",\n    \"MappingsTableProvisionedMinReadCapacityUnits\": \"5\",\n    \"MappingsTableProvisionedMaxReadCapacityUnits\":  \"10\",\n    \"MappingsTableProvisionedMinReadCapacityUnitsPeakTime\": \"0\",\n    \"MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\": \"0\",\n    \"MappingsTableImportCompressionType\": \"NONE\",\n    \"MappingsTableImportFormat\":  \"DYNAMODB_JSON\",\n    \"MappingsTableImportImportBucketName\": \"/weather/platform/v0/loading_bucket/name\",\n    \"MappingsTableImportImportBucketFolder\":  \"foreca-proxy/v0/dynamodb/mappings/\",\n    \"ElastiCacheNodeType\": \"cache.t4g.small\",\n    \"ElastiCacheNodes\":\"1\",\n    \"ServiceAutoScalingStrategy\":  \"WORKDAYS\"\n  },\n  \"Tags\": {\n    \"Domain\": \"weather\",\n    \"Service\": \"foreca_proxy\",\n    \"Version\": \"0\"\n  }\n}",
    "header_context": "",
    "core": "{\n  \"Parameters\": {\n    \"Version\": \"0\",\n    \"VpcId\": \"/platform/network/v0/vpcs/default/id\",\n    \"VpcCidr\": \"/platform/network/v0/vpcs/default/cidr\",\n    \"Subnets\": \"/platform/network/v0/vpcs/default/subnets/public/ids\",\n    \"EcsClusterName\": \"/weather/platform/v0/ecs/cluster/name\",\n    \"EcsCapacityProviderName\": \"/weather/platform/v0/ecs/capacity_providers/fargate/name\",\n    \"PrivateDnsNamespaceId\": \"/platform/private_namespaces/v0/default/id\",\n    \"GrpcLaunchType\":  \"FARGATE\",\n    \"GrpcDesiredCount\": \"1\",\n    \"MappingsTableBillingMode\": \"PROVISIONED\",\n    \"MappingsTableProvisionedMinReadCapacityUnits\": \"5\",\n    \"MappingsTableProvisionedMaxReadCapacityUnits\":  \"10\",\n    \"MappingsTableProvisionedMinReadCapacityUnitsPeakTime\": \"0\",\n    \"MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\": \"0\",\n    \"MappingsTableImportCompressionType\": \"NONE\",\n    \"MappingsTableImportFormat\":  \"DYNAMODB_JSON\",\n    \"MappingsTableImportImportBucketName\": \"/weather/platform/v0/loading_bucket/name\",\n    \"MappingsTableImportImportBucketFolder\":  \"foreca-proxy/v0/dynamodb/mappings/\",\n    \"ElastiCacheNodeType\": \"cache.t4g.small\",\n    \"ElastiCacheNodes\":\"1\",\n    \"ServiceAutoScalingStrategy\":  \"WORKDAYS\"\n  },\n  \"Tags\": {\n    \"Domain\": \"weather\",\n    \"Service\": \"foreca_proxy\",\n    \"Version\": \"0\"\n  }\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Json code block with 30 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 55,
      "footer": 0,
      "total": 55
    },
    "file_sha": "479ba7306c98a0d5204b59ec3588867c049b19849627d9511f878ad18945312a",
    "created_at": "2025-10-07T09:26:57.047592+00:00",
    "v": 3
  },
  {
    "chunk_id": "4250f0371ffed493acb5e8c04ea1ab16f095a18c9f05cea38047c1f10e9d413c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 1,
    "end_line": 1,
    "ast_path": "go:file_header",
    "text": "package foreca",
    "header_context": "",
    "core": "package foreca",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": "35dcfc8c49bbac472d02023b6e39645dd1b688025abe48a42713188153045b2b"
    },
    "summary_1l": "Go package foreca",
    "qa_terms": "foreca, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 3,
      "footer": 0,
      "total": 3
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.038328+00:00",
    "v": 3
  },
  {
    "chunk_id": "35dcfc8c49bbac472d02023b6e39645dd1b688025abe48a42713188153045b2b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 3,
    "end_line": 7,
    "ast_path": "go:type:Mapping (struct)",
    "text": "package foreca\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}",
    "header_context": "package foreca",
    "core": "type Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}",
    "footer_context": "",
    "symbols_defined": [
      "Mapping"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "4250f0371ffed493acb5e8c04ea1ab16f095a18c9f05cea38047c1f10e9d413c",
      "next": "b44d7dc56b0e9821e16ad5abc34292d8f2b6dd7c2f33526b5bae58f108737142"
    },
    "summary_1l": "Go struct Mapping for weather forecasting",
    "qa_terms": "Mapping, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 19,
      "footer": 0,
      "total": 23
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.043871+00:00",
    "v": 3
  },
  {
    "chunk_id": "b44d7dc56b0e9821e16ad5abc34292d8f2b6dd7c2f33526b5bae58f108737142",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 9,
    "end_line": 9,
    "ast_path": "go:type:PressureTrend ()",
    "text": "package foreca\ntype PressureTrend int",
    "header_context": "package foreca",
    "core": "type PressureTrend int",
    "footer_context": "",
    "symbols_defined": [
      "PressureTrend"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "35dcfc8c49bbac472d02023b6e39645dd1b688025abe48a42713188153045b2b",
      "next": "5cabe39e194e7870e9cea6a249126d52d9b1af810c1b7922d304fc81b6800fc9"
    },
    "summary_1l": "Go  PressureTrend for weather forecasting",
    "qa_terms": "PressureTrend, , foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 5,
      "footer": 0,
      "total": 9
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.043952+00:00",
    "v": 3
  },
  {
    "chunk_id": "5cabe39e194e7870e9cea6a249126d52d9b1af810c1b7922d304fc81b6800fc9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 17,
    "end_line": 19,
    "ast_path": "go:method:(t PressureTrend).String",
    "text": "package foreca\n// receiver: t PressureTrend\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}",
    "header_context": "package foreca\n// receiver: t PressureTrend",
    "core": "func (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "PressureTrend"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b44d7dc56b0e9821e16ad5abc34292d8f2b6dd7c2f33526b5bae58f108737142",
      "next": "07d2e6601d4844379127cffecc7520bba989907d061737f81806fc924f903e3c"
    },
    "summary_1l": "Go method String on t PressureTrend for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, t PressureTrend, weather",
    "token_counts": {
      "header": 11,
      "core": 33,
      "footer": 0,
      "total": 45
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.044277+00:00",
    "v": 3
  },
  {
    "chunk_id": "07d2e6601d4844379127cffecc7520bba989907d061737f81806fc924f903e3c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 21,
    "end_line": 24,
    "ast_path": "go:type:Pressure (struct)",
    "text": "package foreca\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}",
    "header_context": "package foreca",
    "core": "type Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "Pressure"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "5cabe39e194e7870e9cea6a249126d52d9b1af810c1b7922d304fc81b6800fc9",
      "next": "67b3fdbc448350590f7c2791c1817cf36593110ace2e0075ebaea0ccd94cacee"
    },
    "summary_1l": "Go struct Pressure for weather forecasting",
    "qa_terms": "Pressure, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 29,
      "footer": 0,
      "total": 33
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.044395+00:00",
    "v": 3
  },
  {
    "chunk_id": "67b3fdbc448350590f7c2791c1817cf36593110ace2e0075ebaea0ccd94cacee",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 26,
    "end_line": 28,
    "ast_path": "go:method:(p Pressure).IsFalling",
    "text": "package foreca\n// receiver: p Pressure\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}",
    "header_context": "package foreca\n// receiver: p Pressure",
    "core": "func (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}",
    "footer_context": "",
    "symbols_defined": [
      "IsFalling"
    ],
    "symbols_referenced": [
      "Trend",
      "Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "07d2e6601d4844379127cffecc7520bba989907d061737f81806fc924f903e3c",
      "next": "abb3422b33108021116ee7d8cf9fd0f0c64143bf74648035123d06863224cf43"
    },
    "summary_1l": "Go method IsFalling on p Pressure for the Foreca proxy",
    "qa_terms": "IsFalling, foreca, p Pressure, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 23,
      "footer": 0,
      "total": 33
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.044582+00:00",
    "v": 3
  },
  {
    "chunk_id": "abb3422b33108021116ee7d8cf9fd0f0c64143bf74648035123d06863224cf43",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 30,
    "end_line": 32,
    "ast_path": "go:method:(p Pressure).IsSteady",
    "text": "package foreca\n// receiver: p Pressure\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}",
    "header_context": "package foreca\n// receiver: p Pressure",
    "core": "func (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}",
    "footer_context": "",
    "symbols_defined": [
      "IsSteady"
    ],
    "symbols_referenced": [
      "Trend",
      "Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "67b3fdbc448350590f7c2791c1817cf36593110ace2e0075ebaea0ccd94cacee",
      "next": "512c201c893377c438ce8cc0d203168041a62abf64760af8a6dd7b59aa4af09a"
    },
    "summary_1l": "Go method IsSteady on p Pressure for the Foreca proxy",
    "qa_terms": "IsSteady, foreca, p Pressure, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 25,
      "footer": 0,
      "total": 35
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.044765+00:00",
    "v": 3
  },
  {
    "chunk_id": "512c201c893377c438ce8cc0d203168041a62abf64760af8a6dd7b59aa4af09a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 34,
    "end_line": 36,
    "ast_path": "go:method:(p Pressure).IsRising",
    "text": "package foreca\n// receiver: p Pressure\nfunc (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}",
    "header_context": "package foreca\n// receiver: p Pressure",
    "core": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}",
    "footer_context": "",
    "symbols_defined": [
      "IsRising"
    ],
    "symbols_referenced": [
      "Trend",
      "Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "abb3422b33108021116ee7d8cf9fd0f0c64143bf74648035123d06863224cf43",
      "next": "45d8bca06e4e419d45b4ac0dc3c7a263252794644b0d1017193b96b2d0768ca3"
    },
    "summary_1l": "Go method IsRising on p Pressure for the Foreca proxy",
    "qa_terms": "IsRising, foreca, p Pressure, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 23,
      "footer": 0,
      "total": 33
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.044921+00:00",
    "v": 3
  },
  {
    "chunk_id": "45d8bca06e4e419d45b4ac0dc3c7a263252794644b0d1017193b96b2d0768ca3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 56,
    "end_line": 56,
    "ast_path": "go:type:WeatherCode ()",
    "text": "package foreca\ntype WeatherCode string",
    "header_context": "package foreca",
    "core": "type WeatherCode string",
    "footer_context": "",
    "symbols_defined": [
      "WeatherCode"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "512c201c893377c438ce8cc0d203168041a62abf64760af8a6dd7b59aa4af09a",
      "next": "6637bd380a6a7c8d46109c7d546704de83c301bf9a0970171edfa791dd9b47fc"
    },
    "summary_1l": "Go  WeatherCode for weather forecasting",
    "qa_terms": "WeatherCode, , foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 4,
      "footer": 0,
      "total": 8
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.044992+00:00",
    "v": 3
  },
  {
    "chunk_id": "6637bd380a6a7c8d46109c7d546704de83c301bf9a0970171edfa791dd9b47fc",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 58,
    "end_line": 61,
    "ast_path": "go:type:WeatherCondition (struct)",
    "text": "package foreca\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}",
    "header_context": "package foreca",
    "core": "type WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "WeatherCondition"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "45d8bca06e4e419d45b4ac0dc3c7a263252794644b0d1017193b96b2d0768ca3",
      "next": "9ac96b8ce4e59dd55e35e8c3241b58b018b2ce259ce6506001347418843f5281"
    },
    "summary_1l": "Go struct WeatherCondition for weather forecasting",
    "qa_terms": "WeatherCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 23,
      "footer": 0,
      "total": 27
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.045099+00:00",
    "v": 3
  },
  {
    "chunk_id": "9ac96b8ce4e59dd55e35e8c3241b58b018b2ce259ce6506001347418843f5281",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 63,
    "end_line": 66,
    "ast_path": "go:type:WindDirection (struct)",
    "text": "package foreca\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}",
    "header_context": "package foreca",
    "core": "type WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "WindDirection"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "6637bd380a6a7c8d46109c7d546704de83c301bf9a0970171edfa791dd9b47fc",
      "next": "00bf2282d348ee73e306a3c5014477f5b7252621261ab3eb96927b4e48022ece"
    },
    "summary_1l": "Go struct WindDirection for weather forecasting",
    "qa_terms": "WindDirection, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 28,
      "footer": 0,
      "total": 32
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.045209+00:00",
    "v": 3
  },
  {
    "chunk_id": "00bf2282d348ee73e306a3c5014477f5b7252621261ab3eb96927b4e48022ece",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 68,
    "end_line": 71,
    "ast_path": "go:type:Wind (struct)",
    "text": "package foreca\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}",
    "header_context": "package foreca",
    "core": "type Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "Wind"
    ],
    "symbols_referenced": [
      "WindDirection"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9ac96b8ce4e59dd55e35e8c3241b58b018b2ce259ce6506001347418843f5281",
      "next": "1c4b2ce7f153d30edf578c79efafafb9901c4128ea4db5ec3055620975e8d885"
    },
    "summary_1l": "Go struct Wind for weather forecasting",
    "qa_terms": "Wind, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 26,
      "footer": 0,
      "total": 30
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.045304+00:00",
    "v": 3
  },
  {
    "chunk_id": "1c4b2ce7f153d30edf578c79efafafb9901c4128ea4db5ec3055620975e8d885",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 73,
    "end_line": 76,
    "ast_path": "go:type:WindGust (struct)",
    "text": "package foreca\ntype WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}",
    "header_context": "package foreca",
    "core": "type WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "WindGust"
    ],
    "symbols_referenced": [
      "Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "00bf2282d348ee73e306a3c5014477f5b7252621261ab3eb96927b4e48022ece",
      "next": "fd5564c7c9268e8b2661b698f22c4d9c02eace1901a9dab5fc7b0747052e11e3"
    },
    "summary_1l": "Go struct WindGust for weather forecasting",
    "qa_terms": "WindGust, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 26,
      "footer": 0,
      "total": 30
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.045395+00:00",
    "v": 3
  },
  {
    "chunk_id": "fd5564c7c9268e8b2661b698f22c4d9c02eace1901a9dab5fc7b0747052e11e3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 78,
    "end_line": 93,
    "ast_path": "go:type:CurrentCondition (struct)",
    "text": "package foreca\ntype CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}",
    "header_context": "package foreca",
    "core": "type CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "CurrentCondition"
    ],
    "symbols_referenced": [
      "WeatherCondition",
      "WindGust",
      "Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1c4b2ce7f153d30edf578c79efafafb9901c4128ea4db5ec3055620975e8d885",
      "next": "f0452763f3e706aca3c4602860991b3e8caf92eee3db5df662ac84772f5e91dc"
    },
    "summary_1l": "Go struct CurrentCondition for weather forecasting",
    "qa_terms": "CurrentCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 182,
      "footer": 0,
      "total": 186
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.046002+00:00",
    "v": 3
  },
  {
    "chunk_id": "f0452763f3e706aca3c4602860991b3e8caf92eee3db5df662ac84772f5e91dc",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 95,
    "end_line": 113,
    "ast_path": "go:type:DailyCondition (struct)",
    "text": "package foreca\ntype DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}",
    "header_context": "package foreca",
    "core": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "DailyCondition"
    ],
    "symbols_referenced": [
      "WeatherCondition",
      "Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fd5564c7c9268e8b2661b698f22c4d9c02eace1901a9dab5fc7b0747052e11e3",
      "next": "3cc12b9421cc38de6857eb1405e75f05893d699ad53a6b9cafd6e58e401a1dc0"
    },
    "summary_1l": "Go struct DailyCondition for weather forecasting",
    "qa_terms": "DailyCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 220,
      "footer": 0,
      "total": 224
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.046735+00:00",
    "v": 3
  },
  {
    "chunk_id": "3cc12b9421cc38de6857eb1405e75f05893d699ad53a6b9cafd6e58e401a1dc0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 115,
    "end_line": 127,
    "ast_path": "go:type:HourlyCondition (struct)",
    "text": "package foreca\ntype HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}",
    "header_context": "package foreca",
    "core": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "HourlyCondition"
    ],
    "symbols_referenced": [
      "WeatherCondition",
      "Wind",
      "Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f0452763f3e706aca3c4602860991b3e8caf92eee3db5df662ac84772f5e91dc",
      "next": "3685cd147b7df5c6423698a5ac66a649dd1f5e1835e3c392d56454049e72a09d"
    },
    "summary_1l": "Go struct HourlyCondition for weather forecasting",
    "qa_terms": "HourlyCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 137,
      "footer": 0,
      "total": 141
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.047201+00:00",
    "v": 3
  },
  {
    "chunk_id": "3685cd147b7df5c6423698a5ac66a649dd1f5e1835e3c392d56454049e72a09d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 129,
    "end_line": 133,
    "ast_path": "go:type:Forecast (struct)",
    "text": "package foreca\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}",
    "header_context": "package foreca",
    "core": "type Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "Forecast"
    ],
    "symbols_referenced": [
      "HourlyCondition",
      "DailyCondition",
      "DailyConditions",
      "CurrentCondition",
      "HourlyConditions"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3cc12b9421cc38de6857eb1405e75f05893d699ad53a6b9cafd6e58e401a1dc0",
      "next": "9e4d460656bb7c2607f8135a1e9a7d8e061f0ae5e2a3092b177248207c94bfb4"
    },
    "summary_1l": "Go struct Forecast for weather forecasting",
    "qa_terms": "Forecast, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 43,
      "footer": 0,
      "total": 47
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.047342+00:00",
    "v": 3
  },
  {
    "chunk_id": "9e4d460656bb7c2607f8135a1e9a7d8e061f0ae5e2a3092b177248207c94bfb4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go",
    "language": "go",
    "start_line": 135,
    "end_line": 139,
    "ast_path": "go:type:CachedForecast (struct)",
    "text": "package foreca\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}",
    "header_context": "package foreca",
    "core": "type CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}",
    "footer_context": "",
    "symbols_defined": [
      "CachedForecast"
    ],
    "symbols_referenced": [
      "Value"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3685cd147b7df5c6423698a5ac66a649dd1f5e1835e3c392d56454049e72a09d",
      "next": null
    },
    "summary_1l": "Go struct CachedForecast for weather forecasting",
    "qa_terms": "CachedForecast, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 20,
      "footer": 0,
      "total": 24
    },
    "file_sha": "4f125bd6c66ff1729c4d706a4830a21993f21ceacc38a0efb3f976c83f31e3a8",
    "created_at": "2025-10-07T09:26:57.047433+00:00",
    "v": 3
  },
  {
    "chunk_id": "5be9efe9a9387ee87a2ff60b116571844d1161f89be54fe9b6024a627afb11a7",
    "repo": "weather-forecast-service",
    "path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/.aws/cloudformation/production-stack-configuration.json",
    "language": "json",
    "start_line": 1,
    "end_line": 30,
    "ast_path": "block_1",
    "text": "{\n  \"Parameters\": {\n    \"Version\": \"0\",\n    \"VpcId\": \"/platform/network/v0/vpcs/default/id\",\n    \"VpcCidr\": \"/platform/network/v0/vpcs/default/cidr\",\n    \"Subnets\": \"/platform/network/v0/vpcs/default/subnets/public/ids\",\n    \"EcsClusterName\": \"/weather/platform/v0/ecs/cluster/name\",\n    \"EcsCapacityProviderName\": \"/weather/platform/v0/ecs/capacity_providers/fargate/name\",\n    \"PrivateDnsNamespaceId\": \"/platform/private_namespaces/v0/default/id\",\n    \"GrpcLaunchType\":  \"FARGATE\",\n    \"GrpcDesiredCount\": \"2\",\n    \"MappingsTableBillingMode\": \"PROVISIONED\",\n    \"MappingsTableProvisionedMinReadCapacityUnits\": \"50\",\n    \"MappingsTableProvisionedMaxReadCapacityUnits\":  \"200\",\n    \"MappingsTableProvisionedMinReadCapacityUnitsPeakTime\": \"250\",\n    \"MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\": \"350\",\n    \"MappingsTableImportCompressionType\": \"NONE\",\n    \"MappingsTableImportFormat\":  \"DYNAMODB_JSON\",\n    \"MappingsTableImportImportBucketName\": \"/weather/platform/v0/loading_bucket/name\",\n    \"MappingsTableImportImportBucketFolder\":  \"foreca-proxy/v0/dynamodb/mappings/\",\n    \"ElastiCacheNodeType\": \"cache.r6g.large\",\n    \"ElastiCacheNodes\":\"1\",\n    \"ServiceAutoScalingStrategy\":  \"RESOURCES_CONSUMPTION\"\n  },\n  \"Tags\": {\n    \"Domain\": \"weather\",\n    \"Service\": \"foreca_proxy\",\n    \"Version\": \"0\"\n  }\n}",
    "header_context": "",
    "core": "{\n  \"Parameters\": {\n    \"Version\": \"0\",\n    \"VpcId\": \"/platform/network/v0/vpcs/default/id\",\n    \"VpcCidr\": \"/platform/network/v0/vpcs/default/cidr\",\n    \"Subnets\": \"/platform/network/v0/vpcs/default/subnets/public/ids\",\n    \"EcsClusterName\": \"/weather/platform/v0/ecs/cluster/name\",\n    \"EcsCapacityProviderName\": \"/weather/platform/v0/ecs/capacity_providers/fargate/name\",\n    \"PrivateDnsNamespaceId\": \"/platform/private_namespaces/v0/default/id\",\n    \"GrpcLaunchType\":  \"FARGATE\",\n    \"GrpcDesiredCount\": \"2\",\n    \"MappingsTableBillingMode\": \"PROVISIONED\",\n    \"MappingsTableProvisionedMinReadCapacityUnits\": \"50\",\n    \"MappingsTableProvisionedMaxReadCapacityUnits\":  \"200\",\n    \"MappingsTableProvisionedMinReadCapacityUnitsPeakTime\": \"250\",\n    \"MappingsTableProvisionedMaxReadCapacityUnitsPeakTime\": \"350\",\n    \"MappingsTableImportCompressionType\": \"NONE\",\n    \"MappingsTableImportFormat\":  \"DYNAMODB_JSON\",\n    \"MappingsTableImportImportBucketName\": \"/weather/platform/v0/loading_bucket/name\",\n    \"MappingsTableImportImportBucketFolder\":  \"foreca-proxy/v0/dynamodb/mappings/\",\n    \"ElastiCacheNodeType\": \"cache.r6g.large\",\n    \"ElastiCacheNodes\":\"1\",\n    \"ServiceAutoScalingStrategy\":  \"RESOURCES_CONSUMPTION\"\n  },\n  \"Tags\": {\n    \"Domain\": \"weather\",\n    \"Service\": \"foreca_proxy\",\n    \"Version\": \"0\"\n  }\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Json code block with 30 lines",
    "qa_terms": "",
    "token_counts": {
      "header": 0,
      "core": 55,
      "footer": 0,
      "total": 55
    },
    "file_sha": "88d76e907698cca34ab6d7b322e66acb42eb005d16d4c47b6e97fe83f2f7b544",
    "created_at": "2025-10-07T09:26:57.047856+00:00",
    "v": 3
  },
  {
    "chunk_id": "ff86e9ca5dd68436c291c25d56412fcd1f6e1a005725bb6e2bd602af2d04be5e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/pb.go",
    "language": "go",
    "start_line": 1,
    "end_line": 1,
    "ast_path": "go:file_header",
    "text": "package v0",
    "header_context": "",
    "core": "package v0",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Go package v0",
    "qa_terms": "v0, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 3,
      "footer": 0,
      "total": 3
    },
    "file_sha": "901fd9e1790c69161c4ce86a482d31c25c100aa99fc31d8bc8ebd75cc3906681",
    "created_at": "2025-10-07T09:26:57.048176+00:00",
    "v": 3
  },
  {
    "chunk_id": "007ee9e4211f6d404268e8a54a261d2da03ee5f83f778b0a1ceed788bae04651",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/main.go",
    "language": "go",
    "start_line": 1,
    "end_line": 5,
    "ast_path": "go:file_header",
    "text": "package main\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)",
    "header_context": "",
    "core": "package main\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/cmd\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/cmd"
    ],
    "neighbors": {
      "prev": null,
      "next": "4d80cf1bbda9b3362b8023bbdc8e7ed26367cf189389cdb8c6cda83cdb5e7e97"
    },
    "summary_1l": "Go package main",
    "qa_terms": "main, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 20,
      "footer": 0,
      "total": 20
    },
    "file_sha": "910489b9af658b863345f8a0f52c5862310485b001fd1849299b35ec09c49bac",
    "created_at": "2025-10-07T09:26:57.048642+00:00",
    "v": 3
  },
  {
    "chunk_id": "4d80cf1bbda9b3362b8023bbdc8e7ed26367cf189389cdb8c6cda83cdb5e7e97",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/main.go",
    "language": "go",
    "start_line": 7,
    "end_line": 11,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.impalastudios.com/weather/foreca_proxy/cmd\"\nfunc main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}",
    "header_context": "package main\nimport \"go.impalastudios.com/weather/foreca_proxy/cmd\"",
    "core": "func main() {\n\tif err := cmd.RunRootCmd(); err != nil {\n\t\tpanic(err)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "cmd.RunRootCmd",
      "err"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/cmd"
    ],
    "neighbors": {
      "prev": "007ee9e4211f6d404268e8a54a261d2da03ee5f83f778b0a1ceed788bae04651",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 18,
      "core": 23,
      "footer": 0,
      "total": 41
    },
    "file_sha": "910489b9af658b863345f8a0f52c5862310485b001fd1849299b35ec09c49bac",
    "created_at": "2025-10-07T09:26:57.049751+00:00",
    "v": 3
  },
  {
    "chunk_id": "4c459d16a8dba0fe1649cc924159472b2a44bf4e18bff2b677a5a945e823817e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 1,
    "end_line": 4,
    "ast_path": "go:file_header",
    "text": "package v0\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "header_context": "",
    "core": "package v0\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": null,
      "next": "1b2d931f52cd18d234fd8d148808613dedeb3a45dc145c9a642e0d33b22cf34c"
    },
    "summary_1l": "Go package v0",
    "qa_terms": "v0, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 23,
      "footer": 0,
      "total": 23
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.044030+00:00",
    "v": 3
  },
  {
    "chunk_id": "1b2d931f52cd18d234fd8d148808613dedeb3a45dc145c9a642e0d33b22cf34c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 8,
    "end_line": 8,
    "ast_path": "go:type:transformer (struct)",
    "text": "package v0\ntype transformer struct{}",
    "header_context": "package v0",
    "core": "type transformer struct{}",
    "footer_context": "",
    "symbols_defined": [
      "transformer"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "4c459d16a8dba0fe1649cc924159472b2a44bf4e18bff2b677a5a945e823817e",
      "next": "9e4d632914289eca632f2cad9ff06772f6c2336bb08ff17de3d5f0a852768f3c"
    },
    "summary_1l": "Go struct transformer for weather forecasting",
    "qa_terms": "transformer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 4,
      "footer": 0,
      "total": 8
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.044107+00:00",
    "v": 3
  },
  {
    "chunk_id": "9e4d632914289eca632f2cad9ff06772f6c2336bb08ff17de3d5f0a852768f3c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 10,
    "end_line": 12,
    "ast_path": "go:function:",
    "text": "package v0\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}",
    "header_context": "package v0",
    "core": "func newTransformer() *transformer {\n\treturn &transformer{}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "transformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1b2d931f52cd18d234fd8d148808613dedeb3a45dc145c9a642e0d33b22cf34c",
      "next": "aa1c59d256a56cb198d66e39bfee56be077081e3d275bf1a28b64a217c0efaf2"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 3,
      "core": 14,
      "footer": 0,
      "total": 18
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.044296+00:00",
    "v": 3
  },
  {
    "chunk_id": "aa1c59d256a56cb198d66e39bfee56be077081e3d275bf1a28b64a217c0efaf2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 14,
    "end_line": 20,
    "ast_path": "go:method:(t *transformer).Transform",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "foreca.Forecast",
      "transformer",
      "CurrentCondition",
      "DailyForecasts",
      "HourlyConditions",
      "DailyConditions",
      "v0.ForecastResponse",
      "HourlyForecasts"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "9e4d632914289eca632f2cad9ff06772f6c2336bb08ff17de3d5f0a852768f3c",
      "next": "2f6183f93b2a6b7e0ad6e754d0bd9782179ed117b82d9a9871f4c0a48a64a5ed"
    },
    "summary_1l": "Go method Transform on t *transformer",
    "qa_terms": "Transform, foreca, proxy, t transformer, weather",
    "token_counts": {
      "header": 49,
      "core": 80,
      "footer": 0,
      "total": 130
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.044691+00:00",
    "v": 3
  },
  {
    "chunk_id": "2f6183f93b2a6b7e0ad6e754d0bd9782179ed117b82d9a9871f4c0a48a64a5ed",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 22,
    "end_line": 41,
    "ast_path": "go:method:(t *transformer).transformCurrentCondition",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformCurrentCondition"
    ],
    "symbols_referenced": [
      "WeatherConditionNextHour",
      "v0.ForecastResponse_CurrentCondition_NextHour",
      "Precipitation",
      "Epoch",
      "NextHour",
      "DewPoint",
      "Visibility",
      "UvIndex",
      "Temperature",
      "HumidityPercentage",
      "WindGust",
      "HeatIndex",
      "v0.ForecastResponse_CurrentCondition",
      "transformer",
      "PrecipitationNextHour",
      "foreca.CurrentCondition",
      "WeatherCondition",
      "Pressure",
      "UVIndex",
      "TemperatureFeelsLike"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "aa1c59d256a56cb198d66e39bfee56be077081e3d275bf1a28b64a217c0efaf2",
      "next": "ba547204dfe1cb5e5e6b6e5e571830748a282dbf87299d564aaac7e1ed9a6794"
    },
    "summary_1l": "Go method transformCurrentCondition on t *transformer",
    "qa_terms": "foreca, proxy, t transformer, transformCurrentCondition, weather",
    "token_counts": {
      "header": 49,
      "core": 249,
      "footer": 0,
      "total": 299
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.045571+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba547204dfe1cb5e5e6b6e5e571830748a282dbf87299d564aaac7e1ed9a6794",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 43,
    "end_line": 57,
    "ast_path": "go:method:(*t transformer).transformDailyConditions#part1_block1",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),",
    "footer_context": "",
    "symbols_defined": [
      "transformDailyConditions"
    ],
    "symbols_referenced": [
      "TemperatureMax",
      "v0",
      "DailyCondition",
      "transformer",
      "SnowNight",
      "Snow",
      "Precipitation",
      "PrecipitationNight",
      "MaxTemperature",
      "Epoch",
      "PrecipitationDay",
      "TemperatureMin",
      "ForecastResponse_DailyForecast",
      "foreca",
      "PrecipitationProbability",
      "MinTemperature",
      "SnowDay"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2f6183f93b2a6b7e0ad6e754d0bd9782179ed117b82d9a9871f4c0a48a64a5ed",
      "next": "00820f9dd3a5c18c4d083f1c2b09cff30a5120ebfc9191b98f530ad6fd2dcd3e"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for transformDailyConditions.",
    "qa_terms": "t transformer, transformDailyConditions",
    "token_counts": {
      "header": 49,
      "core": 198,
      "footer": 0,
      "total": 248
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.046967+00:00",
    "v": 3
  },
  {
    "chunk_id": "00820f9dd3a5c18c4d083f1c2b09cff30a5120ebfc9191b98f530ad6fd2dcd3e",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 58,
    "end_line": 71,
    "ast_path": "go:method:(*t transformer).transformDailyConditions#part2_block2",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.SunsetEpoch,\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.SunsetEpoch,\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformDailyConditions"
    ],
    "symbols_referenced": [
      "AverageHumidityPercentage",
      "UvIndex",
      "conditions",
      "SunsetEpoch",
      "WeatherCondition",
      "UVIndex",
      "SunriseEpoch",
      "Wind",
      "WeatherConditionNight",
      "condition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ba547204dfe1cb5e5e6b6e5e571830748a282dbf87299d564aaac7e1ed9a6794",
      "next": "ed3bd861cd26df19a2473ea3398e01196e9090ed5977f0981e741c242def154f"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for transformDailyConditions.",
    "qa_terms": "t transformer, transformDailyConditions",
    "token_counts": {
      "header": 49,
      "core": 116,
      "footer": 0,
      "total": 166
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.047395+00:00",
    "v": 3
  },
  {
    "chunk_id": "ed3bd861cd26df19a2473ea3398e01196e9090ed5977f0981e741c242def154f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 73,
    "end_line": 95,
    "ast_path": "go:method:(t *transformer).transformHourlyConditions",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformHourlyConditions"
    ],
    "symbols_referenced": [
      "v0.ForecastResponse_HourlyForecast",
      "Snow",
      "condition",
      "foreca.HourlyCondition",
      "Precipitation",
      "Epoch",
      "UvIndex",
      "Temperature",
      "HumidityPercentage",
      "Wind",
      "transformer",
      "conditions",
      "TemperatureFeelsLike",
      "WeatherCondition",
      "Pressure",
      "UVIndex",
      "PrecipitationProbability"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "00820f9dd3a5c18c4d083f1c2b09cff30a5120ebfc9191b98f530ad6fd2dcd3e",
      "next": "7621adb5c3b7a66747a70082c3d77c58d073dba662400c335a1ba54526830deb"
    },
    "summary_1l": "Go method transformHourlyConditions on t *transformer",
    "qa_terms": "foreca, proxy, t transformer, transformHourlyConditions, weather",
    "token_counts": {
      "header": 49,
      "core": 228,
      "footer": 0,
      "total": 278
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.048300+00:00",
    "v": 3
  },
  {
    "chunk_id": "7621adb5c3b7a66747a70082c3d77c58d073dba662400c335a1ba54526830deb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 97,
    "end_line": 109,
    "ast_path": "go:method:(t *transformer).transformWind",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformWind"
    ],
    "symbols_referenced": [
      "transformer",
      "Abbreviation",
      "v0.ForecastResponse_Wind",
      "Direction",
      "v0.ForecastResponse_WindDirection",
      "Degrees",
      "Speed",
      "foreca.Wind"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "ed3bd861cd26df19a2473ea3398e01196e9090ed5977f0981e741c242def154f",
      "next": "2e921b383c564fce96ea4b6a5a8b02e860b18d9681a2a404aa6113f3a3f70c01"
    },
    "summary_1l": "Go method transformWind on t *transformer",
    "qa_terms": "foreca, proxy, t transformer, transformWind, weather",
    "token_counts": {
      "header": 49,
      "core": 102,
      "footer": 0,
      "total": 152
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.048752+00:00",
    "v": 3
  },
  {
    "chunk_id": "2e921b383c564fce96ea4b6a5a8b02e860b18d9681a2a404aa6113f3a3f70c01",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 111,
    "end_line": 120,
    "ast_path": "go:method:(t *transformer).transformPressure",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformPressure"
    ],
    "symbols_referenced": [
      "Millibar",
      "transformer",
      "v0.ForecastResponse_Pressure",
      "Trend",
      "foreca.Pressure"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "7621adb5c3b7a66747a70082c3d77c58d073dba662400c335a1ba54526830deb",
      "next": "4ed515fc2cbecdcb09585797428f98b8d967d78b40667328a4aac939017cbb39"
    },
    "summary_1l": "Go method transformPressure on t *transformer",
    "qa_terms": "foreca, proxy, t transformer, transformPressure, weather",
    "token_counts": {
      "header": 49,
      "core": 77,
      "footer": 0,
      "total": 127
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.049079+00:00",
    "v": 3
  },
  {
    "chunk_id": "4ed515fc2cbecdcb09585797428f98b8d967d78b40667328a4aac939017cbb39",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 122,
    "end_line": 131,
    "ast_path": "go:method:(t *transformer).transformWeatherCondition",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformWeatherCondition"
    ],
    "symbols_referenced": [
      "Code",
      "transformer",
      "Description",
      "foreca.WeatherCondition",
      "v0.ForecastResponse_WeatherCondition"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "2e921b383c564fce96ea4b6a5a8b02e860b18d9681a2a404aa6113f3a3f70c01",
      "next": "f5ebecc1049921f80c44d64fa455bc4fd864831039f7f06b5e827260cc8b4cd7"
    },
    "summary_1l": "Go method transformWeatherCondition on t *transformer",
    "qa_terms": "foreca, proxy, t transformer, transformWeatherCondition, weather",
    "token_counts": {
      "header": 49,
      "core": 67,
      "footer": 0,
      "total": 117
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.049401+00:00",
    "v": 3
  },
  {
    "chunk_id": "f5ebecc1049921f80c44d64fa455bc4fd864831039f7f06b5e827260cc8b4cd7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go",
    "language": "go",
    "start_line": 133,
    "end_line": 142,
    "ast_path": "go:method:(t *transformer).transformWindGust",
    "text": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer\nfunc (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}",
    "header_context": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer",
    "core": "func (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformWindGust"
    ],
    "symbols_referenced": [
      "transformer",
      "Gust",
      "foreca.WindGust",
      "v0.ForecastResponse_CurrentCondition_WindGust",
      "Wind"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"
    ],
    "neighbors": {
      "prev": "4ed515fc2cbecdcb09585797428f98b8d967d78b40667328a4aac939017cbb39",
      "next": null
    },
    "summary_1l": "Go method transformWindGust on t *transformer",
    "qa_terms": "foreca, proxy, t transformer, transformWindGust, weather",
    "token_counts": {
      "header": 49,
      "core": 82,
      "footer": 0,
      "total": 132
    },
    "file_sha": "efc691b47b33d8d8fe5f0ef6c1a7b3f8fc9c3efd13976e7bc33fdcc8cff80102",
    "created_at": "2025-10-07T09:26:57.049722+00:00",
    "v": 3
  },
  {
    "chunk_id": "d2b2cd85ef1f4445e635524848848af1a11ea1739fea963227309234ed7997cd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go",
    "language": "go",
    "start_line": 1,
    "end_line": 1,
    "ast_path": "go:file_header",
    "text": "package cache",
    "header_context": "",
    "core": "package cache",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": "d8e7ddca7c3734127d1bb76ce39ea810bf43a31ee3f7ee016af3ed6b10dae75f"
    },
    "summary_1l": "Go package cache",
    "qa_terms": "cache, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 2,
      "footer": 0,
      "total": 2
    },
    "file_sha": "a7b8c580a73c9a2c0c69c96ebd5ce2d0ec69b9dbf11e03a3783c2252b54433de",
    "created_at": "2025-10-07T09:26:57.050645+00:00",
    "v": 3
  },
  {
    "chunk_id": "d8e7ddca7c3734127d1bb76ce39ea810bf43a31ee3f7ee016af3ed6b10dae75f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/models.go",
    "language": "go",
    "start_line": 3,
    "end_line": 7,
    "ast_path": "go:type:Item (struct)",
    "text": "package cache\ntype Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}",
    "header_context": "package cache",
    "core": "type Item struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}",
    "footer_context": "",
    "symbols_defined": [
      "Item"
    ],
    "symbols_referenced": [
      "Value"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d2b2cd85ef1f4445e635524848848af1a11ea1739fea963227309234ed7997cd",
      "next": null
    },
    "summary_1l": "Go struct Item for weather forecasting",
    "qa_terms": "Item, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 19,
      "footer": 0,
      "total": 22
    },
    "file_sha": "a7b8c580a73c9a2c0c69c96ebd5ce2d0ec69b9dbf11e03a3783c2252b54433de",
    "created_at": "2025-10-07T09:26:57.050787+00:00",
    "v": 3
  },
  {
    "chunk_id": "fbb8c79c2ea87c5f498c9c78ff5810efc8688fa2d59454d1db95903d7923fbd6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go",
    "language": "go",
    "start_line": 1,
    "end_line": 9,
    "ast_path": "go:file_header",
    "text": "package serve\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"",
    "header_context": "",
    "core": "package serve\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "fmt",
      "github.com/dropbox/godropbox/memcache",
      "github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors",
      "github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging",
      "github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery",
      "github.com/hashicorp/golang-lru/v2",
      "go.impalastudios.com/log",
      "go.impalastudios.com/otel",
      "go.impalastudios.com/requestid/grpc",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "go.impalastudios.com/weather/foreca_proxy/pkg/aws",
      "go.impalastudios.com/weather/foreca_proxy/pkg/cache",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc",
      "go.opentelemetry.io/otel",
      "go.opentelemetry.io/otel/propagation",
      "go.uber.org/zap",
      "google.golang.org/grpc/codes",
      "google.golang.org/grpc/metadata",
      "google.golang.org/grpc/status",
      "net/http",
      "time",
      "github.com/cockroachdb/errors",
      "github.com/spf13/cobra",
      "github.com/spf13/viper",
      "go.impalastudios.com/otel/grpc",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/handlers/grpc/v0",
      "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0",
      "go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws",
      "google.golang.org/grpc",
      "google.golang.org/grpc/reflection",
      "net",
      "os"
    ],
    "neighbors": {
      "prev": null,
      "next": "da7d3bab70e39bde01a64cd741bc2224ea333923b43fc35123c0d597c93faee9"
    },
    "summary_1l": "Go package serve with memcache, otel, cache",
    "qa_terms": "serve, memcache, otel, cache, otelgrpc, otel, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 85,
      "footer": 0,
      "total": 85
    },
    "file_sha": "9d2773b6d58072cd4b5af88988f8d2caddf410c76eadafb4ee252ee67dcdeec3",
    "created_at": "2025-10-07T09:26:57.030836+00:00",
    "v": 3
  },
  {
    "chunk_id": "da7d3bab70e39bde01a64cd741bc2224ea333923b43fc35123c0d597c93faee9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go",
    "language": "go",
    "start_line": 43,
    "end_line": 78,
    "ast_path": "go:function:",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"go.uber.org/zap\"\n)\nfunc InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\n\t\tlogger := l.With(f...)\n\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"go.uber.org/zap\"\n)",
    "core": "func InterceptorLogger(l *zap.Logger) logging.Logger {\n\treturn logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {\n\t\tf := make([]zap.Field, 0, len(fields)/2)\n\n\t\tfor i := 0; i < len(fields); i += 2 {\n\t\t\tkey := fields[i]\n\t\t\tvalue := fields[i+1]\n\n\t\t\tswitch v := value.(type) {\n\t\t\tcase string:\n\t\t\t\tf = append(f, zap.String(key.(string), v))\n\t\t\tcase int:\n\t\t\t\tf = append(f, zap.Int(key.(string), v))\n\t\t\tcase bool:\n\t\t\t\tf = append(f, zap.Bool(key.(string), v))\n\t\t\tdefault:\n\t\t\t\tf = append(f, zap.Any(key.(string), v))\n\t\t\t}\n\t\t}\n\n\t\tlogger := l.With(f...)\n\n\t\tswitch lvl {\n\t\tcase logging.LevelDebug:\n\t\t\tlogger.Debug(msg)\n\t\tcase logging.LevelInfo:\n\t\t\tlogger.Info(msg)\n\t\tcase logging.LevelWarn:\n\t\t\tlogger.Warn(msg)\n\t\tcase logging.LevelError:\n\t\t\tlogger.Error(msg)\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unknown level %v\", lvl))\n\t\t}\n\t})\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "logging.LevelDebug",
      "fmt.Sprintf",
      "lvl",
      "msg",
      "logging.LoggerFunc",
      "Warn",
      "logging.Level",
      "With",
      "logging.LevelError",
      "logging.Logger",
      "logging.LevelInfo",
      "Error",
      "zap.Logger",
      "any",
      "v",
      "zap.Any",
      "fields",
      "zap.Int",
      "logging.LevelWarn",
      "context.Context",
      "zap.String",
      "zap.Bool",
      "Debug",
      "InterceptorLogger",
      "zap.Field",
      "Info"
    ],
    "imports_used": [
      "context",
      "fmt",
      "go.uber.org/zap",
      "github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging"
    ],
    "neighbors": {
      "prev": "fbb8c79c2ea87c5f498c9c78ff5810efc8688fa2d59454d1db95903d7923fbd6",
      "next": "0fa167a5d2e16788f69d81c0ca7ad8596a9c039b3667055b5eedecbfa14c31c0"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather, zap",
    "token_counts": {
      "header": 40,
      "core": 242,
      "footer": 0,
      "total": 282
    },
    "file_sha": "9d2773b6d58072cd4b5af88988f8d2caddf410c76eadafb4ee252ee67dcdeec3",
    "created_at": "2025-10-07T09:26:57.036717+00:00",
    "v": 3
  },
  {
    "chunk_id": "0fa167a5d2e16788f69d81c0ca7ad8596a9c039b3667055b5eedecbfa14c31c0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/cmd/serve/grpc.go",
    "language": "go",
    "start_line": 80,
    "end_line": 94,
    "ast_path": "go:function:",
    "text": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n)\nfunc newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\n\treturn cmd\n}",
    "header_context": "package serve\nimport (\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n)",
    "core": "func newServeGrpcCommand() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"grpc\",\n\t\tShort: \"Start gRPC server.\",\n\t\tPreRunE: func(cmd *cobra.Command, _ []string) error {\n\t\t\treturn viper.BindPFlags(cmd.Flags())\n\t\t},\n\t\tRunE: runServeGrpc,\n\t\tArgs: cobra.ExactArgs(0),\n\t}\n\n\tcmd.PersistentFlags().Int(\"app.grpc.port\", 50051, \"gRPC service port\")\n\n\treturn cmd\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "PreRunE",
      "Use",
      "cmd",
      "viper.BindPFlags",
      "Int",
      "Args",
      "PersistentFlags",
      "RunE",
      "Flags",
      "Short",
      "error",
      "cobra.ExactArgs",
      "cobra.Command"
    ],
    "imports_used": [
      "google.golang.org/grpc",
      "github.com/spf13/viper",
      "github.com/spf13/cobra"
    ],
    "neighbors": {
      "prev": "da7d3bab70e39bde01a64cd741bc2224ea333923b43fc35123c0d597c93faee9",
      "next": "eb48440c8ff9615710e8a8d2c2e3865a95a9b818adf588e605905687b3082506"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 32,
      "core": 111,
      "footer": 0,
      "total": 143
    },
    "file_sha": "9d2773b6d58072cd4b5af88988f8d2caddf410c76eadafb4ee252ee67dcdeec3",
    "created_at": "2025-10-07T09:26:57.038643+00:00",
    "v": 3
  },
  {
    "chunk_id": "eb48440c8ff9615710e8a8d2c2e3865a95a9b818adf588e605905687b3082506",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 96,
    "end_line": 110,
    "ast_path": "go:function_declaration#part1_provider_call",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\nfunc runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "func runServeGrpc(cmd *cobra.Command, _ []string) error {\n\tquit := make(chan os.Signal, 1)\n\tdefer close(quit)\n\n\tlogger := log.New(\n\t\tlog.WithService(viper.GetString(\"app.name\")),\n\t\tlog.WithEncoding(viper.GetString(\"logging.encoding\")),\n\t\tlog.WithDebugEnabled(viper.GetBool(\"logging.debug\")),\n\t)\n\tlog.SetLogger(logger)\n\n\ttp, err := xotel.NewTracerProvider(cmd.Context(), xotel.TracerProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.tracer.endpoint\"),\n\t})",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "WithService",
      "GetString",
      "NewTracerProvider",
      "WithEncoding",
      "GetBool",
      "cobra",
      "quit",
      "ServiceName",
      "Endpoint",
      "WithDebugEnabled",
      "SetLogger",
      "New",
      "Context",
      "Command",
      "error",
      "Signal",
      "TracerProviderConfig",
      "logger"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0fa167a5d2e16788f69d81c0ca7ad8596a9c039b3667055b5eedecbfa14c31c0",
      "next": "0c05a0fae2308ffe80c32293b3c2cdc25ae86fbe573a60854d3901ca628b5884"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 123,
      "footer": 0,
      "total": 461
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.044127+00:00",
    "v": 3
  },
  {
    "chunk_id": "0c05a0fae2308ffe80c32293b3c2cdc25ae86fbe573a60854d3901ca628b5884",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 111,
    "end_line": 123,
    "ast_path": "go:function_declaration#part2_provider_call",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create tracer provider\")\n\t}\n\n\totel.SetTracerProvider(tp)\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n\txotel.SetGlobalTracer(tp.Tracer(viper.GetString(\"app.name\")))\n\n\tmp, err := xotel.NewMeterProvider(cmd.Context(), xotel.MeterProviderConfig{\n\t\tServiceName: viper.GetString(\"app.name\"),\n\t\tEndpoint:    viper.GetString(\"otel.meter.endpoint\"),\n\t\tInterval:    viper.GetDuration(\"otel.meter.interval\"),\n\t})",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "GetString",
      "Wrap",
      "Tracer",
      "SetGlobalTracer",
      "SetTracerProvider",
      "MeterProviderConfig",
      "ServiceName",
      "Endpoint",
      "NewCompositeTextMapPropagator",
      "TraceContext",
      "SetTextMapPropagator",
      "Context",
      "Baggage",
      "Interval",
      "tp",
      "error",
      "GetDuration",
      "NewMeterProvider"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "eb48440c8ff9615710e8a8d2c2e3865a95a9b818adf588e605905687b3082506",
      "next": "b7dbce32aef17c3e2ad99f1cf6b5ff5f04cdd4e4ecb01ef3d7b02ca44e0c0ca4"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 130,
      "footer": 0,
      "total": 468
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.045433+00:00",
    "v": 3
  },
  {
    "chunk_id": "b7dbce32aef17c3e2ad99f1cf6b5ff5f04cdd4e4ecb01ef3d7b02ca44e0c0ca4",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 124,
    "end_line": 142,
    "ast_path": "go:function_declaration#part3_cache_lookup",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n\n\tawsCfg := aws.GetConfig(\n\t\tviper.GetString(\"aws.access-key-id\"),\n\t\tviper.GetString(\"aws.secret-access-key\"),\n\t\tviper.GetString(\"aws.session-token\"),\n\t\tviper.GetString(\"aws.region\"),\n\t\tviper.GetString(\"aws.endpoint-url\"),\n\t)\n\totelaws.AppendMiddlewares(&awsCfg.APIOptions)\n\n\tddb := aws.NewDynamoDbClientFromConfig(awsCfg)\n\n\tmappingsCache, err := lru.New[int, *foreca.Mapping](5_000)",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create meter provider\")\n\t}\n\n\totel.SetMeterProvider(mp)\n\txotel.SetGlobalMeter(mp.Meter(viper.GetString(\"app.name\")))\n\n\tawsCfg := aws.GetConfig(\n\t\tviper.GetString(\"aws.access-key-id\"),\n\t\tviper.GetString(\"aws.secret-access-key\"),\n\t\tviper.GetString(\"aws.session-token\"),\n\t\tviper.GetString(\"aws.region\"),\n\t\tviper.GetString(\"aws.endpoint-url\"),\n\t)\n\totelaws.AppendMiddlewares(&awsCfg.APIOptions)\n\n\tddb := aws.NewDynamoDbClientFromConfig(awsCfg)\n\n\tmappingsCache, err := lru.New[int, *foreca.Mapping](5_000)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "GetString",
      "Wrap",
      "APIOptions",
      "mp",
      "SetGlobalMeter",
      "Meter",
      "GetConfig",
      "SetMeterProvider",
      "NewDynamoDbClientFromConfig",
      "AppendMiddlewares",
      "New",
      "foreca",
      "awsCfg",
      "error"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0c05a0fae2308ffe80c32293b3c2cdc25ae86fbe573a60854d3901ca628b5884",
      "next": "ced91020e1eb54bb2ca199c6b681c727b99c0117af9bb48ca0bfce4240afe3d3"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 146,
      "footer": 0,
      "total": 484
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.046335+00:00",
    "v": 3
  },
  {
    "chunk_id": "ced91020e1eb54bb2ca199c6b681c727b99c0117af9bb48ca0bfce4240afe3d3",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 143,
    "end_line": 153,
    "ast_path": "go:function_declaration#part4_cache_lookup",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tmappingsRepository := adapters.NewMappingDynamoDBRepository(\n\t\tviper.GetString(\"mappings.dynamodb.table-name\"),\n\t\tddb,\n\t\tmappingsCache,\n\t)\n\n\tmemcachedRateLimiterConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tmappingsRepository := adapters.NewMappingDynamoDBRepository(\n\t\tviper.GetString(\"mappings.dynamodb.table-name\"),\n\t\tddb,\n\t\tmappingsCache,\n\t)\n\n\tmemcachedRateLimiterConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "GetString",
      "Dial",
      "NewMappingDynamoDBRepository",
      "Error",
      "Panic"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b7dbce32aef17c3e2ad99f1cf6b5ff5f04cdd4e4ecb01ef3d7b02ca44e0c0ca4",
      "next": "b2babcfb5e873c8d0318bb91294d2994cb4c8f670b64b9b53ae1a2e12004678a"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 70,
      "footer": 0,
      "total": 408
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.047172+00:00",
    "v": 3
  },
  {
    "chunk_id": "b2babcfb5e873c8d0318bb91294d2994cb4c8f670b64b9b53ae1a2e12004678a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 154,
    "end_line": 168,
    "ast_path": "go:function_declaration#part5_cache_lookup",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tlimiter := ratelimit.NewSingleThreadLimiter(\n\t\tviper.GetInt64(\"foreca.requests-per-second\"),\n\t\ttime.Second,\n\t\tratelimit.NewMemcachedStorage(memcache.NewRawBinaryClient(0, memcachedRateLimiterConn), \"weather:proxies:\"),\n\t)\n\n\tlimiter.Start()\n\n\tforecaClient := clients.NewForecaClient(\n\t\t&http.Client{Timeout: 5 * time.Second},\n\t\tviper.GetString(\"foreca.endpoint-url\"),",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tlimiter := ratelimit.NewSingleThreadLimiter(\n\t\tviper.GetInt64(\"foreca.requests-per-second\"),\n\t\ttime.Second,\n\t\tratelimit.NewMemcachedStorage(memcache.NewRawBinaryClient(0, memcachedRateLimiterConn), \"weather:proxies:\"),\n\t)\n\n\tlimiter.Start()\n\n\tforecaClient := clients.NewForecaClient(\n\t\t&http.Client{Timeout: 5 * time.Second},\n\t\tviper.GetString(\"foreca.endpoint-url\"),",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "time",
      "NewMemcachedStorage",
      "GetString",
      "NewForecaClient",
      "NewSingleThreadLimiter",
      "Timeout",
      "Client",
      "GetInt64",
      "Error",
      "NewRawBinaryClient",
      "Panic",
      "memcachedRateLimiterConn",
      "Second",
      "Start"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ced91020e1eb54bb2ca199c6b681c727b99c0117af9bb48ca0bfce4240afe3d3",
      "next": "36537ab2129a199a6bb7252802ef43f9114e81817b585c849952f75fe84dd817"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 116,
      "footer": 0,
      "total": 454
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.047981+00:00",
    "v": 3
  },
  {
    "chunk_id": "36537ab2129a199a6bb7252802ef43f9114e81817b585c849952f75fe84dd817",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 169,
    "end_line": 193,
    "ast_path": "go:function_declaration#part6_cache_lookup",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\t\tmap[string]string{\n\t\t\t\"format\":   viper.GetString(\"foreca.query.default.format\"),\n\t\t\t\"ftimes\":   viper.GetString(\"foreca.query.default.ftimes\"),\n\t\t\t\"tempunit\": viper.GetString(\"foreca.query.default.temp-unit\"),\n\t\t\t\"windunit\": viper.GetString(\"foreca.query.default.wind-unit\"),\n\t\t\t\"lang\":     viper.GetString(\"foreca.query.default.lang\"),\n\t\t},\n\t\tlimiter,\n\t\tclients.NewTransformer(),\n\t)\n\n\tmemcachedForecastsConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tforecastService := foreca.NewService(\n\t\tforecaClient,\n\t\tmappingsRepository,\n\t\tcache.NewMemcached(memcache.NewRawBinaryClient(1, memcachedForecastsConn)),\n\t\t\"weather:proxies:foreca:\",\n\t\tviper.GetDuration(\"foreca.expiration-duration\"),\n\t)\n\n\trecoveryOpts := []recovery.Option{\n\t\trecovery.WithRecoveryHandler(func(p any) error {\n\t\t\treturn status.Error(codes.Internal, \"We cannot serve your request right now. Please try again later.\")\n\t\t}),\n\t}",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\t\tmap[string]string{\n\t\t\t\"format\":   viper.GetString(\"foreca.query.default.format\"),\n\t\t\t\"ftimes\":   viper.GetString(\"foreca.query.default.ftimes\"),\n\t\t\t\"tempunit\": viper.GetString(\"foreca.query.default.temp-unit\"),\n\t\t\t\"windunit\": viper.GetString(\"foreca.query.default.wind-unit\"),\n\t\t\t\"lang\":     viper.GetString(\"foreca.query.default.lang\"),\n\t\t},\n\t\tlimiter,\n\t\tclients.NewTransformer(),\n\t)\n\n\tmemcachedForecastsConn, err := net.Dial(\"tcp\", viper.GetString(\"memcached.address\"))\n\tforecastService := foreca.NewService(\n\t\tforecaClient,\n\t\tmappingsRepository,\n\t\tcache.NewMemcached(memcache.NewRawBinaryClient(1, memcachedForecastsConn)),\n\t\t\"weather:proxies:foreca:\",\n\t\tviper.GetDuration(\"foreca.expiration-duration\"),\n\t)\n\n\trecoveryOpts := []recovery.Option{\n\t\trecovery.WithRecoveryHandler(func(p any) error {\n\t\t\treturn status.Error(codes.Internal, \"We cannot serve your request right now. Please try again later.\")\n\t\t}),\n\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewService",
      "GetString",
      "NewMemcached",
      "memcachedForecastsConn",
      "Dial",
      "Option",
      "Internal",
      "Error",
      "NewRawBinaryClient",
      "error",
      "any",
      "WithRecoveryHandler",
      "GetDuration",
      "NewTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b2babcfb5e873c8d0318bb91294d2994cb4c8f670b64b9b53ae1a2e12004678a",
      "next": "a7c1ea34847827f6966180dad701442430f136abbc60086dac600290c12c1d65"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 235,
      "footer": 0,
      "total": 573
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.049145+00:00",
    "v": 3
  },
  {
    "chunk_id": "a7c1ea34847827f6966180dad701442430f136abbc60086dac600290c12c1d65",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 194,
    "end_line": 202,
    "ast_path": "go:function_declaration#part7_block7",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tloggingOpts := []logging.Option{\n\t\tlogging.WithLogOnEvents(logging.StartCall),\n\t\tlogging.WithFieldsFromContextAndCallMeta(func(ctx context.Context, c interceptors.CallMeta) logging.Fields {\n\t\t\tvar requestID string\n\t\t\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\t\t\tif m, found := md[requestid.MetadataKey]; found && len(m) > 0 {\n\t\t\t\t\trequestID = m[0]\n\t\t\t\t}\n\t\t\t}",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tloggingOpts := []logging.Option{\n\t\tlogging.WithLogOnEvents(logging.StartCall),\n\t\tlogging.WithFieldsFromContextAndCallMeta(func(ctx context.Context, c interceptors.CallMeta) logging.Fields {\n\t\t\tvar requestID string\n\t\t\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\t\t\tif m, found := md[requestid.MetadataKey]; found && len(m) > 0 {\n\t\t\t\t\trequestID = m[0]\n\t\t\t\t}\n\t\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "CallMeta",
      "WithLogOnEvents",
      "StartCall",
      "FromIncomingContext",
      "ctx",
      "m",
      "Context",
      "WithFieldsFromContextAndCallMeta",
      "Option",
      "Fields"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "36537ab2129a199a6bb7252802ef43f9114e81817b585c849952f75fe84dd817",
      "next": "e15a530b3f7d28fdb7822fc0ef589ea1ceff3ff7b824ba0e596d68e33cc7f6be"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 96,
      "footer": 0,
      "total": 434
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.049751+00:00",
    "v": 3
  },
  {
    "chunk_id": "e15a530b3f7d28fdb7822fc0ef589ea1ceff3ff7b824ba0e596d68e33cc7f6be",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 203,
    "end_line": 223,
    "ast_path": "go:function_declaration#part8_block8",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\t\t\treturn logging.Fields{\"request_id\", requestID}\n\t\t}),\n\t}\n\tserver := grpc.NewServer(\n\t\tgrpc.StatsHandler(otelgrpctrace.NewServerHandler()),\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\totelgrpcmetric.UnaryServerInterceptor(),\n\t\t\trequestid.NewServerUnaryInterceptor(),\n\t\t\tlogging.UnaryServerInterceptor(InterceptorLogger(logger), loggingOpts...),\n\t\t\trecovery.UnaryServerInterceptor(recoveryOpts...),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\totelgrpcmetric.StreamServerInterceptor(),\n\t\t),\n\t)\n\tserverV0 := grpcv0.NewServer(forecastService)\n\tpbv0.RegisterForecaProxyServer(server, serverV0)\n\n\treflection.Register(server)\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", viper.GetInt(\"app.grpc.port\")))",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\t\t\treturn logging.Fields{\"request_id\", requestID}\n\t\t}),\n\t}\n\tserver := grpc.NewServer(\n\t\tgrpc.StatsHandler(otelgrpctrace.NewServerHandler()),\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\totelgrpcmetric.UnaryServerInterceptor(),\n\t\t\trequestid.NewServerUnaryInterceptor(),\n\t\t\tlogging.UnaryServerInterceptor(InterceptorLogger(logger), loggingOpts...),\n\t\t\trecovery.UnaryServerInterceptor(recoveryOpts...),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\totelgrpcmetric.StreamServerInterceptor(),\n\t\t),\n\t)\n\tserverV0 := grpcv0.NewServer(forecastService)\n\tpbv0.RegisterForecaProxyServer(server, serverV0)\n\n\treflection.Register(server)\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", viper.GetInt(\"app.grpc.port\")))",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "UnaryServerInterceptor",
      "NewServerUnaryInterceptor",
      "serverV0",
      "ChainUnaryInterceptor",
      "RegisterForecaProxyServer",
      "NewServer",
      "StreamServerInterceptor",
      "StatsHandler",
      "forecastService",
      "Fields",
      "GetInt",
      "Listen",
      "NewServerHandler",
      "ChainStreamInterceptor",
      "server",
      "Sprintf",
      "InterceptorLogger",
      "Register",
      "logger"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a7c1ea34847827f6966180dad701442430f136abbc60086dac600290c12c1d65",
      "next": "72ecfb07d5db1d1104d140c6f86d24941e9a90b2b43c0b19affb41b418619024"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 169,
      "footer": 0,
      "total": 507
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.050541+00:00",
    "v": 3
  },
  {
    "chunk_id": "72ecfb07d5db1d1104d140c6f86d24941e9a90b2b43c0b19affb41b418619024",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 224,
    "end_line": 239,
    "ast_path": "go:function_declaration#part9_block9",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tgo func(s *grpc.Server, lis *net.Listener) {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := s.Serve(*lis); err != nil {\n\t\t\tlogger.Fatal(fmt.Sprintf(\"Failed to serve gRPC: %v\", err))\n\t\t}\n\t}(server, &listener)\n\n\ts := <-quit\n\tlogger.Info(fmt.Sprintf(\"Received signal %v\", s))\n\n\tserver.GracefulStop()\n\tlimiter.Stop()",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tif err != nil {\n\t\tlogger.Panic(err.Error())\n\t}\n\n\tgo func(s *grpc.Server, lis *net.Listener) {\n\t\tlogger.Info(\"Server started. Ready to accept incoming requests...\")\n\t\tif err := s.Serve(*lis); err != nil {\n\t\t\tlogger.Fatal(fmt.Sprintf(\"Failed to serve gRPC: %v\", err))\n\t\t}\n\t}(server, &listener)\n\n\ts := <-quit\n\tlogger.Info(fmt.Sprintf(\"Received signal %v\", s))\n\n\tserver.GracefulStop()\n\tlimiter.Stop()",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Fatal",
      "Sprintf",
      "Serve",
      "listener",
      "Server",
      "err",
      "GracefulStop",
      "Listener",
      "Error",
      "Panic",
      "grpc",
      "Stop",
      "lis",
      "s",
      "net",
      "Info"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e15a530b3f7d28fdb7822fc0ef589ea1ceff3ff7b824ba0e596d68e33cc7f6be",
      "next": "7b92026d351f652f53f8a4de52d235f8e9544d8703d1162eaf73e78ecb60713a"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 108,
      "footer": 0,
      "total": 446
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.051171+00:00",
    "v": 3
  },
  {
    "chunk_id": "7b92026d351f652f53f8a4de52d235f8e9544d8703d1162eaf73e78ecb60713a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 240,
    "end_line": 249,
    "ast_path": "go:function_declaration#part10_error_handling",
    "text": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\tif err := tp.Shutdown(cmd.Context()); err != nil {\n\t\tlog.Error(context.TODO(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tclose(quit)\n\n\tlogger.Info(\"Application shutdown gracefully.\")\n\n\treturn nil\n}",
    "header_context": "package serve\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/aws\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/status\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)",
    "core": "\tif err := tp.Shutdown(cmd.Context()); err != nil {\n\t\tlog.Error(context.TODO(), \"Error occurred while shutting down the tracer.\", zap.Error(err))\n\t}\n\n\tclose(quit)\n\n\tlogger.Info(\"Application shutdown gracefully.\")\n\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "quit",
      "err",
      "Shutdown",
      "Error",
      "TODO",
      "Context",
      "Info"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "72ecfb07d5db1d1104d140c6f86d24941e9a90b2b43c0b19affb41b418619024",
      "next": null
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 338,
      "core": 49,
      "footer": 0,
      "total": 387
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.051635+00:00",
    "v": 3
  },
  {
    "chunk_id": "81e79c725cd1c87331543bd9acc3ab8276cac1bc17a410e0e2a3478efb1d790e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/errors.go",
    "language": "go",
    "start_line": 1,
    "end_line": 3,
    "ast_path": "go:file_header",
    "text": "package cache\n\nimport \"errors\"",
    "header_context": "",
    "core": "package cache\n\nimport \"errors\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "errors"
    ],
    "neighbors": {
      "prev": null,
      "next": null
    },
    "summary_1l": "Go package cache",
    "qa_terms": "cache, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 7,
      "footer": 0,
      "total": 7
    },
    "file_sha": "2947f287c16a3653ef9696ca472eadedd9dad99627423ba2770bacf9cf950d73",
    "created_at": "2025-10-07T09:26:57.054131+00:00",
    "v": 3
  },
  {
    "chunk_id": "bfa7c396ebf255688261d2126c76e8fad87a1f64ebb9f6e2578d1fc59310e4f1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 1,
    "end_line": 12,
    "ast_path": "go:file_header",
    "text": "package xotel\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"",
    "header_context": "",
    "core": "package xotel\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel/metric\"\n\t\"time\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "go.opentelemetry.io/otel/metric",
      "time",
      "github.com/cockroachdb/errors",
      "github.com/spf13/viper",
      "go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc",
      "go.opentelemetry.io/otel/exporters/otlp/otlptrace",
      "go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc",
      "go.opentelemetry.io/otel/sdk/metric",
      "go.opentelemetry.io/otel/sdk/resource",
      "go.opentelemetry.io/otel/sdk/trace",
      "go.opentelemetry.io/otel/semconv/v1.26.0",
      "go.opentelemetry.io/otel/trace"
    ],
    "neighbors": {
      "prev": null,
      "next": "26e076d3813597ed6fe6f4301348d2a943f84572f5547288f92471473310a291"
    },
    "summary_1l": "Go package xotel with metric, otlpmetricgrpc, otlptrace",
    "qa_terms": "xotel, metric, otlpmetricgrpc, otlptrace, otlptracegrpc, metric, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 108,
      "footer": 0,
      "total": 108
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.050630+00:00",
    "v": 3
  },
  {
    "chunk_id": "26e076d3813597ed6fe6f4301348d2a943f84572f5547288f92471473310a291",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 21,
    "end_line": 23,
    "ast_path": "go:type:TracerProviderConfig (struct)",
    "text": "package xotel\ntype TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}",
    "header_context": "package xotel",
    "core": "type TracerProviderConfig struct {\n\tEndpoint string `mapstructure:\"endpoint\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "TracerProviderConfig"
    ],
    "symbols_referenced": [
      "map"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "bfa7c396ebf255688261d2126c76e8fad87a1f64ebb9f6e2578d1fc59310e4f1",
      "next": "1da79fbc0f548fdca423b755ee61f5a86f171debf7264959749ee27913881e1f"
    },
    "summary_1l": "Go struct TracerProviderConfig for weather forecasting",
    "qa_terms": "TracerProviderConfig, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 3,
      "core": 17,
      "footer": 0,
      "total": 21
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.051574+00:00",
    "v": 3
  },
  {
    "chunk_id": "1da79fbc0f548fdca423b755ee61f5a86f171debf7264959749ee27913881e1f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 36,
    "end_line": 59,
    "ast_path": "go:function:",
    "text": "package xotel\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\nfunc NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\n\treturn tp, nil\n}",
    "header_context": "package xotel\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\t\"go.opentelemetry.io/otel/trace\"\n)",
    "core": "func NewTracerProvider(ctx context.Context, cfg TracerProviderConfig) (*tracesdk.TracerProvider, error) {\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\ttracer := otlptracegrpc.NewClient(\n\t\totlptracegrpc.WithEndpoint(cfg.Endpoint),\n\t\totlptracegrpc.WithInsecure(),\n\t)\n\texporter, err := otlptrace.New(ctx, tracer)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize trace exporter\")\n\t}\n\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exporter),\n\t\ttracesdk.WithResource(r),\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.AlwaysSample())),\n\t)\n\n\treturn tp, nil\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "TracerProvider",
      "WithSampler",
      "otlptracegrpc.WithInsecure",
      "NewTracerProvider",
      "tracesdk",
      "errors.Wrap",
      "WithResource",
      "TracerProviderConfig",
      "Endpoint",
      "otlptracegrpc.NewClient",
      "tracer",
      "otlptrace.New",
      "r",
      "AlwaysSample",
      "context.Context",
      "error",
      "otlptracegrpc.WithEndpoint",
      "ParentBased",
      "WithBatcher",
      "exporter"
    ],
    "imports_used": [
      "go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc",
      "context",
      "github.com/cockroachdb/errors",
      "go.opentelemetry.io/otel/sdk/resource",
      "go.opentelemetry.io/otel/exporters/otlp/otlptrace",
      "go.opentelemetry.io/otel/trace"
    ],
    "neighbors": {
      "prev": "26e076d3813597ed6fe6f4301348d2a943f84572f5547288f92471473310a291",
      "next": "39404c32abf6fd55a994f2cd69713d545664866cf83c88166e1d715d5ecf17bd"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, otel, proxy, weather",
    "token_counts": {
      "header": 85,
      "core": 189,
      "footer": 0,
      "total": 274
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.052413+00:00",
    "v": 3
  },
  {
    "chunk_id": "39404c32abf6fd55a994f2cd69713d545664866cf83c88166e1d715d5ecf17bd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 65,
    "end_line": 67,
    "ast_path": "go:function:",
    "text": "package xotel\nimport \"go.opentelemetry.io/otel/trace\"\nfunc SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}",
    "header_context": "package xotel\nimport \"go.opentelemetry.io/otel/trace\"",
    "core": "func SetGlobalTracer(tracer trace.Tracer) {\n\tTracer = tracer\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "trace.Tracer",
      "tracer",
      "SetGlobalTracer"
    ],
    "imports_used": [
      "go.opentelemetry.io/otel/trace"
    ],
    "neighbors": {
      "prev": "1da79fbc0f548fdca423b755ee61f5a86f171debf7264959749ee27913881e1f",
      "next": "663390ad7fcb5708c6fe25d1270573e5621d0f663dbb426dfeaf5d645b86bc6e"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, otel, proxy, trace, weather",
    "token_counts": {
      "header": 16,
      "core": 19,
      "footer": 0,
      "total": 35
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.052643+00:00",
    "v": 3
  },
  {
    "chunk_id": "663390ad7fcb5708c6fe25d1270573e5621d0f663dbb426dfeaf5d645b86bc6e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 70,
    "end_line": 73,
    "ast_path": "go:type:MeterProviderConfig (struct)",
    "text": "package xotel\nimport \"time\"\ntype MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}",
    "header_context": "package xotel\nimport \"time\"",
    "core": "type MeterProviderConfig struct {\n\tEndpoint string        `mapstructure:\"endpoint\"`\n\tInterval time.Duration `mapstructure:\"interval\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "MeterProviderConfig"
    ],
    "symbols_referenced": [
      "map",
      "time.Duration"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "39404c32abf6fd55a994f2cd69713d545664866cf83c88166e1d715d5ecf17bd",
      "next": "7e1a1c1ef93dbb4769e7f63b1ade89a633bd06fff049e3e070a9e469ac0577a5"
    },
    "summary_1l": "Go struct MeterProviderConfig for weather forecasting",
    "qa_terms": "MeterProviderConfig, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 27,
      "footer": 0,
      "total": 35
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.052778+00:00",
    "v": 3
  },
  {
    "chunk_id": "7e1a1c1ef93dbb4769e7f63b1ade89a633bd06fff049e3e070a9e469ac0577a5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 75,
    "end_line": 102,
    "ast_path": "go:function:",
    "text": "package xotel\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\t\"time\"\n)\nfunc NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\n\treturn provider, nil\n}",
    "header_context": "package xotel\nimport (\n\t\"context\"\n\t\"github.com/cockroachdb/errors\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\t\"time\"\n)",
    "core": "func NewMeterProvider(ctx context.Context, cfg MeterProviderConfig) (*metricsdk.MeterProvider, error) {\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\tr, err := getResource()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get resource\")\n\t}\n\n\texporter, err := otlpmetricgrpc.New(\n\t\tctx,\n\t\totlpmetricgrpc.WithEndpoint(cfg.Endpoint),\n\t\totlpmetricgrpc.WithInsecure(),\n\t)\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to initialize metric exporter\")\n\t}\n\n\treader := metricsdk.NewPeriodicReader(exporter, metricsdk.WithInterval(cfg.Interval))\n\n\tprovider := metricsdk.NewMeterProvider(\n\t\tmetricsdk.WithResource(r),\n\t\tmetricsdk.WithReader(reader),\n\t)\n\n\treturn provider, nil\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "WithReader",
      "metricsdk",
      "time.Second",
      "errors.Wrap",
      "Interval",
      "MeterProvider",
      "WithResource",
      "context.WithTimeout",
      "Endpoint",
      "otlpmetricgrpc.WithInsecure",
      "NewMeterProvider",
      "WithInterval",
      "r",
      "otlpmetricgrpc.New",
      "context.Context",
      "reader",
      "otlpmetricgrpc.WithEndpoint",
      "error",
      "MeterProviderConfig",
      "NewPeriodicReader"
    ],
    "imports_used": [
      "context",
      "github.com/cockroachdb/errors",
      "go.opentelemetry.io/otel/sdk/metric",
      "go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc",
      "go.opentelemetry.io/otel/sdk/resource",
      "time"
    ],
    "neighbors": {
      "prev": "663390ad7fcb5708c6fe25d1270573e5621d0f663dbb426dfeaf5d645b86bc6e",
      "next": "9b9acc166229daba1c1f86412f77885b2d51e0b8f5dc6551f0afb97ac4d29000"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, otel, proxy, weather",
    "token_counts": {
      "header": 68,
      "core": 178,
      "footer": 0,
      "total": 246
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.053483+00:00",
    "v": 3
  },
  {
    "chunk_id": "9b9acc166229daba1c1f86412f77885b2d51e0b8f5dc6551f0afb97ac4d29000",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 108,
    "end_line": 110,
    "ast_path": "go:function:",
    "text": "package xotel\nimport \"go.opentelemetry.io/otel/sdk/metric\"\nfunc SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}",
    "header_context": "package xotel\nimport \"go.opentelemetry.io/otel/sdk/metric\"",
    "core": "func SetGlobalMeter(meter metric.Meter) {\n\tMeter = meter\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "metric.Meter",
      "SetGlobalMeter",
      "meter"
    ],
    "imports_used": [
      "go.opentelemetry.io/otel/sdk/metric"
    ],
    "neighbors": {
      "prev": "7e1a1c1ef93dbb4769e7f63b1ade89a633bd06fff049e3e070a9e469ac0577a5",
      "next": "3b6f8fd312645fe2a1e7cce2aff63500fc6cc8fef7d36c71ac5d1539173766d3"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, otel, proxy, weather",
    "token_counts": {
      "header": 17,
      "core": 17,
      "footer": 0,
      "total": 34
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.053676+00:00",
    "v": 3
  },
  {
    "chunk_id": "3b6f8fd312645fe2a1e7cce2aff63500fc6cc8fef7d36c71ac5d1539173766d3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/xotel/provider.go",
    "language": "go",
    "start_line": 112,
    "end_line": 125,
    "ast_path": "go:function:",
    "text": "package xotel\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n)\nfunc getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\n\treturn r, nil\n}",
    "header_context": "package xotel\nimport (\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/spf13/viper\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n)",
    "core": "func getResource() (*resource.Resource, error) {\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(viper.GetString(\"app.name\")),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot merge resource\")\n\t}\n\n\treturn r, nil\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "error",
      "resource.Resource",
      "errors.Wrap",
      "String",
      "resource.NewWithAttributes",
      "SchemaURL",
      "viper.GetString",
      "resource.Default",
      "resource.Merge"
    ],
    "imports_used": [
      "go.opentelemetry.io/otel/sdk/resource",
      "github.com/cockroachdb/errors",
      "github.com/spf13/viper"
    ],
    "neighbors": {
      "prev": "9b9acc166229daba1c1f86412f77885b2d51e0b8f5dc6551f0afb97ac4d29000",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, otel, proxy, weather",
    "token_counts": {
      "header": 36,
      "core": 78,
      "footer": 0,
      "total": 114
    },
    "file_sha": "3d07bf1306d929dc81cf7002cf47744338ffa6c5708a45074552429751feb3ef",
    "created_at": "2025-10-07T09:26:57.054086+00:00",
    "v": 3
  },
  {
    "chunk_id": "a6b97fb3e7b6c2881afb6e1b9975a8e3bcff59fb745e38fd6d888d524306062e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 7,
    "end_line": 9,
    "ast_path": "go:file_header",
    "text": "package v0\n\nimport (",
    "header_context": "",
    "core": "package v0\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "google.golang.org/grpc",
      "google.golang.org/grpc/codes",
      "google.golang.org/grpc/status"
    ],
    "neighbors": {
      "prev": null,
      "next": "a11ad9601062dd2bdfff3b49293b52e639717a008ad466b9a9624bbe87d4aeec"
    },
    "summary_1l": "Go package ",
    "qa_terms": ", foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 6,
      "footer": 0,
      "total": 6
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.050887+00:00",
    "v": 3
  },
  {
    "chunk_id": "a11ad9601062dd2bdfff3b49293b52e639717a008ad466b9a9624bbe87d4aeec",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 24,
    "end_line": 26,
    "ast_path": "go:type:ForecaProxyClient (interface)",
    "text": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n)\ntype ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n)",
    "core": "type ForecaProxyClient interface {\n\tGetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecaProxyClient"
    ],
    "symbols_referenced": [
      "GetForecast",
      "ForecastRequest",
      "grpc.CallOption",
      "error",
      "ForecastResponse",
      "context.Context"
    ],
    "imports_used": [
      "context",
      "google.golang.org/grpc"
    ],
    "neighbors": {
      "prev": "a6b97fb3e7b6c2881afb6e1b9975a8e3bcff59fb745e38fd6d888d524306062e",
      "next": "c3b89329ad36b563ead5c940e319ede71cd08ec061969cae754f2e2c66fa28f2"
    },
    "summary_1l": "Go interface ForecaProxyClient for weather forecasting",
    "qa_terms": "ForecaProxyClient, interface, context, foreca, weather, proxy",
    "token_counts": {
      "header": 17,
      "core": 31,
      "footer": 0,
      "total": 48
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.051330+00:00",
    "v": 3
  },
  {
    "chunk_id": "c3b89329ad36b563ead5c940e319ede71cd08ec061969cae754f2e2c66fa28f2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 28,
    "end_line": 30,
    "ast_path": "go:type:forecaProxyClient (struct)",
    "text": "package main\nimport \"google.golang.org/grpc\"\ntype forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}",
    "header_context": "package main\nimport \"google.golang.org/grpc\"",
    "core": "type forecaProxyClient struct {\n\tcc grpc.ClientConnInterface\n}",
    "footer_context": "",
    "symbols_defined": [
      "forecaProxyClient"
    ],
    "symbols_referenced": [
      "grpc.ClientConnInterface"
    ],
    "imports_used": [
      "google.golang.org/grpc"
    ],
    "neighbors": {
      "prev": "a11ad9601062dd2bdfff3b49293b52e639717a008ad466b9a9624bbe87d4aeec",
      "next": "0477bfbc87ddf3691795e52dbb4c4eb11debee1ad20e1511354fe67dcb32f3fb"
    },
    "summary_1l": "Go struct forecaProxyClient for weather forecasting",
    "qa_terms": "forecaProxyClient, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 11,
      "core": 14,
      "footer": 0,
      "total": 25
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.051580+00:00",
    "v": 3
  },
  {
    "chunk_id": "0477bfbc87ddf3691795e52dbb4c4eb11debee1ad20e1511354fe67dcb32f3fb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 32,
    "end_line": 34,
    "ast_path": "go:function:",
    "text": "package main\nimport \"google.golang.org/grpc\"\nfunc NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}",
    "header_context": "package main\nimport \"google.golang.org/grpc\"",
    "core": "func NewForecaProxyClient(cc grpc.ClientConnInterface) ForecaProxyClient {\n\treturn &forecaProxyClient{cc}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewForecaProxyClient",
      "ForecaProxyClient",
      "grpc.ClientConnInterface"
    ],
    "imports_used": [
      "google.golang.org/grpc"
    ],
    "neighbors": {
      "prev": "c3b89329ad36b563ead5c940e319ede71cd08ec061969cae754f2e2c66fa28f2",
      "next": "b6385ff8c808a3f7de70046d5f593eccf9e3816da8d4b7596e3dc47a7cba49d6"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 27,
      "footer": 0,
      "total": 38
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.051944+00:00",
    "v": 3
  },
  {
    "chunk_id": "b6385ff8c808a3f7de70046d5f593eccf9e3816da8d4b7596e3dc47a7cba49d6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 36,
    "end_line": 43,
    "ast_path": "go:method:(c *forecaProxyClient).GetForecast",
    "text": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n)\n// receiver: c *forecaProxyClient\nfunc (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n)\n// receiver: c *forecaProxyClient",
    "core": "func (c *forecaProxyClient) GetForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {\n\tout := new(ForecastResponse)\n\terr := c.cc.Invoke(ctx, \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecast"
    ],
    "symbols_referenced": [
      "Invoke",
      "forecaProxyClient",
      "ForecastRequest",
      "err",
      "grpc.CallOption",
      "error",
      "ForecastResponse",
      "context.Context"
    ],
    "imports_used": [
      "context",
      "google.golang.org/grpc"
    ],
    "neighbors": {
      "prev": "0477bfbc87ddf3691795e52dbb4c4eb11debee1ad20e1511354fe67dcb32f3fb",
      "next": "df4f9c55e181345518476421d0520065cb1e299ebab55cc4decb418d39405168"
    },
    "summary_1l": "Go method GetForecast on c *forecaProxyClient for the Foreca proxy",
    "qa_terms": "GetForecast, c forecaProxyClient, foreca, proxy, weather",
    "token_counts": {
      "header": 26,
      "core": 87,
      "footer": 0,
      "total": 114
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.052569+00:00",
    "v": 3
  },
  {
    "chunk_id": "df4f9c55e181345518476421d0520065cb1e299ebab55cc4decb418d39405168",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 48,
    "end_line": 51,
    "ast_path": "go:type:ForecaProxyServer (interface)",
    "text": "package main\nimport \"context\"\ntype ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}",
    "header_context": "package main\nimport \"context\"",
    "core": "type ForecaProxyServer interface {\n\tGetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)\n\tmustEmbedUnimplementedForecaProxyServer()\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecaProxyServer"
    ],
    "symbols_referenced": [
      "GetForecast",
      "ForecastRequest",
      "error",
      "ForecastResponse",
      "context.Context"
    ],
    "imports_used": [
      "context"
    ],
    "neighbors": {
      "prev": "b6385ff8c808a3f7de70046d5f593eccf9e3816da8d4b7596e3dc47a7cba49d6",
      "next": "74c537af3703ac0fb78eec88f613b5d83b9a10ea31572dceabdc4b324db902e8"
    },
    "summary_1l": "Go interface ForecaProxyServer for weather forecasting",
    "qa_terms": "ForecaProxyServer, interface, context, foreca, weather, proxy",
    "token_counts": {
      "header": 7,
      "core": 33,
      "footer": 0,
      "total": 40
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.052778+00:00",
    "v": 3
  },
  {
    "chunk_id": "74c537af3703ac0fb78eec88f613b5d83b9a10ea31572dceabdc4b324db902e8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 54,
    "end_line": 55,
    "ast_path": "go:type:UnimplementedForecaProxyServer (struct)",
    "text": "package main\ntype UnimplementedForecaProxyServer struct {\n}",
    "header_context": "package main",
    "core": "type UnimplementedForecaProxyServer struct {\n}",
    "footer_context": "",
    "symbols_defined": [
      "UnimplementedForecaProxyServer"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "df4f9c55e181345518476421d0520065cb1e299ebab55cc4decb418d39405168",
      "next": "0c74dd623dc6024a6cecd73aa031517d874a877317d1fa5a6e37ac87ee6f83bc"
    },
    "summary_1l": "Go struct UnimplementedForecaProxyServer for weather forecasting",
    "qa_terms": "UnimplementedForecaProxyServer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 10,
      "footer": 0,
      "total": 13
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.052843+00:00",
    "v": 3
  },
  {
    "chunk_id": "0c74dd623dc6024a6cecd73aa031517d874a877317d1fa5a6e37ac87ee6f83bc",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 57,
    "end_line": 59,
    "ast_path": "go:method:(UnimplementedForecaProxyServer).GetForecast",
    "text": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n// receiver: UnimplementedForecaProxyServer\nfunc (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n// receiver: UnimplementedForecaProxyServer",
    "core": "func (UnimplementedForecaProxyServer) GetForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetForecast not implemented\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecast"
    ],
    "symbols_referenced": [
      "codes.Unimplemented",
      "ForecastRequest",
      "UnimplementedForecaProxyServer",
      "status.Errorf",
      "error",
      "ForecastResponse",
      "context.Context"
    ],
    "imports_used": [
      "google.golang.org/grpc/status",
      "google.golang.org/grpc/codes",
      "context"
    ],
    "neighbors": {
      "prev": "74c537af3703ac0fb78eec88f613b5d83b9a10ea31572dceabdc4b324db902e8",
      "next": "1fda77895f2531a4108894359dba7c2d031dee3fa095f9b5538425ba32c24a42"
    },
    "summary_1l": "Go method GetForecast on UnimplementedForecaProxyServer for the Foreca proxy",
    "qa_terms": "GetForecast, UnimplementedForecaProxyServer, foreca, proxy, weather",
    "token_counts": {
      "header": 37,
      "core": 43,
      "footer": 0,
      "total": 81
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.053167+00:00",
    "v": 3
  },
  {
    "chunk_id": "1fda77895f2531a4108894359dba7c2d031dee3fa095f9b5538425ba32c24a42",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 60,
    "end_line": 60,
    "ast_path": "go:method:(UnimplementedForecaProxyServer).mustEmbedUnimplementedForecaProxyServer",
    "text": "package main\n// receiver: UnimplementedForecaProxyServer\nfunc (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}",
    "header_context": "package main\n// receiver: UnimplementedForecaProxyServer",
    "core": "func (UnimplementedForecaProxyServer) mustEmbedUnimplementedForecaProxyServer() {}",
    "footer_context": "",
    "symbols_defined": [
      "mustEmbedUnimplementedForecaProxyServer"
    ],
    "symbols_referenced": [
      "UnimplementedForecaProxyServer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0c74dd623dc6024a6cecd73aa031517d874a877317d1fa5a6e37ac87ee6f83bc",
      "next": "ae2651bbe0c391f7148f38266d4f78a6f45a5132cebf44d892ba21b47ec612e3"
    },
    "summary_1l": "Go method mustEmbedUnimplementedForecaProxyServer on UnimplementedForecaProxyServer for the Foreca proxy",
    "qa_terms": "UnimplementedForecaProxyServer, foreca, mustEmbedUnimplementedForecaProxyServer, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 19,
      "footer": 0,
      "total": 32
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.053328+00:00",
    "v": 3
  },
  {
    "chunk_id": "ae2651bbe0c391f7148f38266d4f78a6f45a5132cebf44d892ba21b47ec612e3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 65,
    "end_line": 67,
    "ast_path": "go:type:UnsafeForecaProxyServer (interface)",
    "text": "package main\ntype UnsafeForecaProxyServer interface {\n\tmustEmbedUnimplementedForecaProxyServer()\n}",
    "header_context": "package main",
    "core": "type UnsafeForecaProxyServer interface {\n\tmustEmbedUnimplementedForecaProxyServer()\n}",
    "footer_context": "",
    "symbols_defined": [
      "UnsafeForecaProxyServer"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "1fda77895f2531a4108894359dba7c2d031dee3fa095f9b5538425ba32c24a42",
      "next": "8478cb3fa3471f68c469c5cde9a1fb3208cb61b17739ba21017ba33ffb524d8a"
    },
    "summary_1l": "Go interface UnsafeForecaProxyServer for weather forecasting",
    "qa_terms": "UnsafeForecaProxyServer, interface, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 19,
      "footer": 0,
      "total": 22
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.053403+00:00",
    "v": 3
  },
  {
    "chunk_id": "8478cb3fa3471f68c469c5cde9a1fb3208cb61b17739ba21017ba33ffb524d8a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 69,
    "end_line": 71,
    "ast_path": "go:function:",
    "text": "package main\nimport \"google.golang.org/grpc\"\nfunc RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}",
    "header_context": "package main\nimport \"google.golang.org/grpc\"",
    "core": "func RegisterForecaProxyServer(s grpc.ServiceRegistrar, srv ForecaProxyServer) {\n\ts.RegisterService(&ForecaProxy_ServiceDesc, srv)\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "RegisterService",
      "grpc.ServiceRegistrar",
      "ForecaProxyServer",
      "srv",
      "ForecaProxy_ServiceDesc",
      "RegisterForecaProxyServer"
    ],
    "imports_used": [
      "google.golang.org/grpc"
    ],
    "neighbors": {
      "prev": "ae2651bbe0c391f7148f38266d4f78a6f45a5132cebf44d892ba21b47ec612e3",
      "next": "306834f2111ea82bfccb9a7a96070d0c98edb016b0900e74c225a10de9828af9"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 31,
      "footer": 0,
      "total": 42
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.053606+00:00",
    "v": 3
  },
  {
    "chunk_id": "306834f2111ea82bfccb9a7a96070d0c98edb016b0900e74c225a10de9828af9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0_grpc.pb.go",
    "language": "go",
    "start_line": 73,
    "end_line": 89,
    "ast_path": "go:function:",
    "text": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n)\nfunc _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}",
    "header_context": "package main\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n)",
    "core": "func _ForecaProxy_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ForecastRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/weather.forecasts.proxy.v0.ForecaProxy/GetForecast\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ForecaProxyServer).GetForecast(ctx, req.(*ForecastRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "GetForecast",
      "ForecastRequest",
      "req",
      "err",
      "grpc.UnaryServerInterceptor",
      "ForecaProxyServer",
      "grpc.UnaryServerInfo",
      "Server",
      "srv",
      "error",
      "handler",
      "in",
      "FullMethod",
      "context.Context"
    ],
    "imports_used": [
      "context",
      "google.golang.org/grpc"
    ],
    "neighbors": {
      "prev": "8478cb3fa3471f68c469c5cde9a1fb3208cb61b17739ba21017ba33ffb524d8a",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 17,
      "core": 166,
      "footer": 0,
      "total": 183
    },
    "file_sha": "b6bc24dd17b4f24e34c13c9802d02dbe3f738c9e67cfd39305fdcd4af3d109d8",
    "created_at": "2025-10-07T09:26:57.054190+00:00",
    "v": 3
  },
  {
    "chunk_id": "1549ae214ac0fa99c31ecdc9d3b5a7cce1032f225d7c7032d6682bee76bd45d6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go",
    "language": "go",
    "start_line": 1,
    "end_line": 1,
    "ast_path": "go:file_header",
    "text": "package utilities",
    "header_context": "",
    "core": "package utilities",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": "c2f1b31d5049147728894c2b2e8e44b2d163d55537fd8ced70eb988411647120"
    },
    "summary_1l": "Go package utilities",
    "qa_terms": "utilities, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 2,
      "footer": 0,
      "total": 2
    },
    "file_sha": "62381c3a1c95bc63d9d11aa80641f5baac2757b0ab266984f0e103cb59ae2c72",
    "created_at": "2025-10-07T09:26:57.054421+00:00",
    "v": 3
  },
  {
    "chunk_id": "c2f1b31d5049147728894c2b2e8e44b2d163d55537fd8ced70eb988411647120",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/slices.go",
    "language": "go",
    "start_line": 3,
    "end_line": 11,
    "ast_path": "go:function:",
    "text": "package utilities\nfunc ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}",
    "header_context": "package utilities",
    "core": "func ContainsString(h []string, n string) bool {\n\tfor _, v := range h {\n\t\tif v == n {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ContainsString"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1549ae214ac0fa99c31ecdc9d3b5a7cce1032f225d7c7032d6682bee76bd45d6",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 38,
      "footer": 0,
      "total": 41
    },
    "file_sha": "62381c3a1c95bc63d9d11aa80641f5baac2757b0ab266984f0e103cb59ae2c72",
    "created_at": "2025-10-07T09:26:57.054751+00:00",
    "v": 3
  },
  {
    "chunk_id": "89a18af30346b1f40de7e513c2a94837afd819dbb5232247c9ec632c56e07b38",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go",
    "language": "go",
    "start_line": 1,
    "end_line": 1,
    "ast_path": "go:file_header",
    "text": "package utilities",
    "header_context": "",
    "core": "package utilities",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": null,
      "next": "23ef6e893c18935331a02a1014021ee9f7b004a9cb370d8b51442f37567703d7"
    },
    "summary_1l": "Go package utilities",
    "qa_terms": "utilities, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 2,
      "footer": 0,
      "total": 2
    },
    "file_sha": "d69a8296e35e67649a4a02675004be422a9c4a8ba8ee6ce4cbb49ce45a01f99e",
    "created_at": "2025-10-07T09:26:57.053779+00:00",
    "v": 3
  },
  {
    "chunk_id": "23ef6e893c18935331a02a1014021ee9f7b004a9cb370d8b51442f37567703d7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go",
    "language": "go",
    "start_line": 3,
    "end_line": 5,
    "ast_path": "go:function:",
    "text": "package utilities\nfunc CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}",
    "header_context": "package utilities",
    "core": "func CelsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9 / 5) + 32\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "CelsiusToFahrenheit"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "89a18af30346b1f40de7e513c2a94837afd819dbb5232247c9ec632c56e07b38",
      "next": "4b2655dc42faad19a1baa89e6f88b9d381317b4f2e26b535b23aee7b1a9cb1df"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 28,
      "footer": 0,
      "total": 31
    },
    "file_sha": "d69a8296e35e67649a4a02675004be422a9c4a8ba8ee6ce4cbb49ce45a01f99e",
    "created_at": "2025-10-07T09:26:57.054083+00:00",
    "v": 3
  },
  {
    "chunk_id": "4b2655dc42faad19a1baa89e6f88b9d381317b4f2e26b535b23aee7b1a9cb1df",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go",
    "language": "go",
    "start_line": 7,
    "end_line": 9,
    "ast_path": "go:function:",
    "text": "package utilities\nfunc FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}",
    "header_context": "package utilities",
    "core": "func FahrenheitToCelsius(fahrenheit float64) float64 {\n\treturn (fahrenheit - 32) * 5 / 9\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "FahrenheitToCelsius"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "23ef6e893c18935331a02a1014021ee9f7b004a9cb370d8b51442f37567703d7",
      "next": "485456bf2499c8cbe5530459163a18c112e1496f4651c6f8ac6e58d80b34145a"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 29,
      "footer": 0,
      "total": 32
    },
    "file_sha": "d69a8296e35e67649a4a02675004be422a9c4a8ba8ee6ce4cbb49ce45a01f99e",
    "created_at": "2025-10-07T09:26:57.054259+00:00",
    "v": 3
  },
  {
    "chunk_id": "485456bf2499c8cbe5530459163a18c112e1496f4651c6f8ac6e58d80b34145a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go",
    "language": "go",
    "start_line": 11,
    "end_line": 13,
    "ast_path": "go:function:",
    "text": "package utilities\nfunc KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}",
    "header_context": "package utilities",
    "core": "func KilometersToMiles(km float64) float64 {\n\treturn km / 1.609344\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "KilometersToMiles"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4b2655dc42faad19a1baa89e6f88b9d381317b4f2e26b535b23aee7b1a9cb1df",
      "next": "a043a20e6570444eff6338bf0c61309ae087d81a00d9409b9de6f918009dbc3f"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 24,
      "footer": 0,
      "total": 27
    },
    "file_sha": "d69a8296e35e67649a4a02675004be422a9c4a8ba8ee6ce4cbb49ce45a01f99e",
    "created_at": "2025-10-07T09:26:57.054724+00:00",
    "v": 3
  },
  {
    "chunk_id": "a043a20e6570444eff6338bf0c61309ae087d81a00d9409b9de6f918009dbc3f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/units.go",
    "language": "go",
    "start_line": 15,
    "end_line": 17,
    "ast_path": "go:function:",
    "text": "package utilities\nfunc MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}",
    "header_context": "package utilities",
    "core": "func MilesToKilometers(mi float64) float64 {\n\treturn mi * 1.609344\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "MilesToKilometers"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "485456bf2499c8cbe5530459163a18c112e1496f4651c6f8ac6e58d80b34145a",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 23,
      "footer": 0,
      "total": 26
    },
    "file_sha": "d69a8296e35e67649a4a02675004be422a9c4a8ba8ee6ce4cbb49ce45a01f99e",
    "created_at": "2025-10-07T09:26:57.054916+00:00",
    "v": 3
  },
  {
    "chunk_id": "ec5ef0952daa4fee72a725553d43453e850f698700ec51c3ce45ff2c5145bd28",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go",
    "language": "go",
    "start_line": 1,
    "end_line": 6,
    "ast_path": "go:file_header",
    "text": "package cache\n\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package cache\n\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "7536369ec2d2d76787bf2fa544ad02b05c6cd601eeb642e8fa367b4665edf80a"
    },
    "summary_1l": "Go package cache with memcache",
    "qa_terms": "cache, memcache, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 23,
      "footer": 0,
      "total": 23
    },
    "file_sha": "c6c2ec6444a26740a019634055902db5083a8bd932e08be4503db82a4ce5e8c8",
    "created_at": "2025-10-07T09:26:57.054467+00:00",
    "v": 3
  },
  {
    "chunk_id": "7536369ec2d2d76787bf2fa544ad02b05c6cd601eeb642e8fa367b4665edf80a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go",
    "language": "go",
    "start_line": 8,
    "end_line": 10,
    "ast_path": "go:type:Memcached (struct)",
    "text": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"\ntype Memcached struct {\n\tc memcache.Client\n}",
    "header_context": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"",
    "core": "type Memcached struct {\n\tc memcache.Client\n}",
    "footer_context": "",
    "symbols_defined": [
      "Memcached"
    ],
    "symbols_referenced": [
      "memcache.Client"
    ],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "ec5ef0952daa4fee72a725553d43453e850f698700ec51c3ce45ff2c5145bd28",
      "next": "8dfdc4643f627d727c414ec60f777fa87afdc44305426de95276346b4b61338b"
    },
    "summary_1l": "Go struct Memcached for weather forecasting",
    "qa_terms": "Memcached, struct, memcache, foreca, weather, proxy",
    "token_counts": {
      "header": 18,
      "core": 11,
      "footer": 0,
      "total": 29
    },
    "file_sha": "c6c2ec6444a26740a019634055902db5083a8bd932e08be4503db82a4ce5e8c8",
    "created_at": "2025-10-07T09:26:57.054617+00:00",
    "v": 3
  },
  {
    "chunk_id": "8dfdc4643f627d727c414ec60f777fa87afdc44305426de95276346b4b61338b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go",
    "language": "go",
    "start_line": 12,
    "end_line": 14,
    "ast_path": "go:function:",
    "text": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"\nfunc NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}",
    "header_context": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"",
    "core": "func NewMemcached(client memcache.Client) *Memcached {\n\treturn &Memcached{c: client}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Memcached",
      "NewMemcached",
      "memcache.Client"
    ],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "7536369ec2d2d76787bf2fa544ad02b05c6cd601eeb642e8fa367b4665edf80a",
      "next": "05748b26e907879518656383b70c3e31805642ec4a6e6d0165faf6f696b59d9a"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "cache, foreca, proxy, weather",
    "token_counts": {
      "header": 18,
      "core": 23,
      "footer": 0,
      "total": 41
    },
    "file_sha": "c6c2ec6444a26740a019634055902db5083a8bd932e08be4503db82a4ce5e8c8",
    "created_at": "2025-10-07T09:26:57.054930+00:00",
    "v": 3
  },
  {
    "chunk_id": "05748b26e907879518656383b70c3e31805642ec4a6e6d0165faf6f696b59d9a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go",
    "language": "go",
    "start_line": 16,
    "end_line": 32,
    "ast_path": "go:method:(m *Memcached).Get",
    "text": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"\n// receiver: m *Memcached\nfunc (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}",
    "header_context": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"\n// receiver: m *Memcached",
    "core": "func (m *Memcached) Get(key string) (*Item, error) {\n\tresponse := m.c.Get(key)\n\n\tif response.Status() != memcache.StatusNoError {\n\t\tswitch response.Status() {\n\t\tcase memcache.StatusKeyNotFound:\n\t\t\treturn nil, ErrCacheMiss\n\t\tdefault:\n\t\t\treturn nil, ErrCacheGeneric\n\t\t}\n\t}\n\n\treturn &Item{\n\t\tKey:   response.Key(),\n\t\tValue: response.Value(),\n\t}, nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "Memcached",
      "error",
      "Value",
      "Item",
      "memcache.StatusNoError",
      "memcache.StatusKeyNotFound",
      "Status",
      "key",
      "Key"
    ],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "8dfdc4643f627d727c414ec60f777fa87afdc44305426de95276346b4b61338b",
      "next": "4a77539c959b44528402e4e2ad02fb2f85927fd4d9dd28b4ab96adba4b7126a3"
    },
    "summary_1l": "Go method Get on m *Memcached",
    "qa_terms": "Get, cache, foreca, m Memcached, proxy, weather",
    "token_counts": {
      "header": 25,
      "core": 95,
      "footer": 0,
      "total": 121
    },
    "file_sha": "c6c2ec6444a26740a019634055902db5083a8bd932e08be4503db82a4ce5e8c8",
    "created_at": "2025-10-07T09:26:57.055584+00:00",
    "v": 3
  },
  {
    "chunk_id": "4a77539c959b44528402e4e2ad02fb2f85927fd4d9dd28b4ab96adba4b7126a3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go",
    "language": "go",
    "start_line": 34,
    "end_line": 41,
    "ast_path": "go:method:(m *Memcached).Set",
    "text": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"\n// receiver: m *Memcached\nfunc (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\n\treturn response.Error()\n}",
    "header_context": "package cache\nimport \"github.com/dropbox/godropbox/memcache\"\n// receiver: m *Memcached",
    "core": "func (m *Memcached) Set(key string, value []byte) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:   key,\n\t\tValue: value,\n\t})\n\n\treturn response.Error()\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "Memcached",
      "memcache.Item",
      "error",
      "Value",
      "Error",
      "Key"
    ],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "05748b26e907879518656383b70c3e31805642ec4a6e6d0165faf6f696b59d9a",
      "next": "5fa9197e81829d0e8610d53a8edbe90a93a55ceb40994c39c6ccf567e204cfe7"
    },
    "summary_1l": "Go method Set on m *Memcached",
    "qa_terms": "Set, cache, foreca, m Memcached, proxy, weather",
    "token_counts": {
      "header": 25,
      "core": 45,
      "footer": 0,
      "total": 71
    },
    "file_sha": "c6c2ec6444a26740a019634055902db5083a8bd932e08be4503db82a4ce5e8c8",
    "created_at": "2025-10-07T09:26:57.055919+00:00",
    "v": 3
  },
  {
    "chunk_id": "5fa9197e81829d0e8610d53a8edbe90a93a55ceb40994c39c6ccf567e204cfe7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/cache/memcached.go",
    "language": "go",
    "start_line": 43,
    "end_line": 51,
    "ast_path": "go:method:(m *Memcached).SetWithExpiration",
    "text": "package cache\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n// receiver: m *Memcached\nfunc (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\n\treturn response.Error()\n}",
    "header_context": "package cache\nimport (\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n// receiver: m *Memcached",
    "core": "func (m *Memcached) SetWithExpiration(key string, value []byte, exp *time.Time) error {\n\tresponse := m.c.Set(&memcache.Item{\n\t\tKey:        key,\n\t\tValue:      value,\n\t\tExpiration: uint32(exp.Unix()),\n\t})\n\n\treturn response.Error()\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetWithExpiration"
    ],
    "symbols_referenced": [
      "Unix",
      "memcache.Item",
      "Memcached",
      "time.Time",
      "Value",
      "error",
      "Set",
      "Expiration",
      "Error",
      "Key"
    ],
    "imports_used": [
      "time",
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "4a77539c959b44528402e4e2ad02fb2f85927fd4d9dd28b4ab96adba4b7126a3",
      "next": null
    },
    "summary_1l": "Go method SetWithExpiration on m *Memcached",
    "qa_terms": "SetWithExpiration, cache, foreca, m Memcached, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 63,
      "footer": 0,
      "total": 94
    },
    "file_sha": "c6c2ec6444a26740a019634055902db5083a8bd932e08be4503db82a4ce5e8c8",
    "created_at": "2025-10-07T09:26:57.056310+00:00",
    "v": 3
  },
  {
    "chunk_id": "ffaac7b521c7a373bf7ac3b558c6dbd0d378bb9b98d1f180706007f5a766d057",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go",
    "language": "go",
    "start_line": 1,
    "end_line": 3,
    "ast_path": "go:file_header",
    "text": "package utilities\n\nimport \"math\"",
    "header_context": "",
    "core": "package utilities\n\nimport \"math\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": null,
      "next": "d4c0f5b74dfe9344e5896197cafd0d96d9e886fd63407c4b39d9265f10208cd7"
    },
    "summary_1l": "Go package utilities",
    "qa_terms": "utilities, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 7,
      "footer": 0,
      "total": 7
    },
    "file_sha": "cb65e722c03052b5aae22a65844fcf31c9e6c6b6e6102f916506aeb5da289933",
    "created_at": "2025-10-07T09:26:57.056344+00:00",
    "v": 3
  },
  {
    "chunk_id": "d4c0f5b74dfe9344e5896197cafd0d96d9e886fd63407c4b39d9265f10208cd7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go",
    "language": "go",
    "start_line": 5,
    "end_line": 9,
    "ast_path": "go:function:",
    "text": "package utilities\nimport \"math\"\nfunc Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Floor(v*base) / base\n}",
    "header_context": "package utilities\nimport \"math\"",
    "core": "func Floor(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Floor(v*base) / base\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "math.Floor",
      "base",
      "math.Pow10",
      "precision"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "ffaac7b521c7a373bf7ac3b558c6dbd0d378bb9b98d1f180706007f5a766d057",
      "next": "a7e4706868e2f747aeb12af2b3f7d40391377bd88cfbbb114c2a7ce869764866"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 7,
      "core": 31,
      "footer": 0,
      "total": 38
    },
    "file_sha": "cb65e722c03052b5aae22a65844fcf31c9e6c6b6e6102f916506aeb5da289933",
    "created_at": "2025-10-07T09:26:57.056603+00:00",
    "v": 3
  },
  {
    "chunk_id": "a7e4706868e2f747aeb12af2b3f7d40391377bd88cfbbb114c2a7ce869764866",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go",
    "language": "go",
    "start_line": 11,
    "end_line": 15,
    "ast_path": "go:function:",
    "text": "package utilities\nimport \"math\"\nfunc Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Round(v*base) / base\n}",
    "header_context": "package utilities\nimport \"math\"",
    "core": "func Round(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Round(v*base) / base\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "precision",
      "base",
      "math.Pow10",
      "math.Round"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "d4c0f5b74dfe9344e5896197cafd0d96d9e886fd63407c4b39d9265f10208cd7",
      "next": "10f52fc56b40f3a3156d8e61a576d5d6183cbf4edab39d378239d7ea3d434b00"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 7,
      "core": 31,
      "footer": 0,
      "total": 38
    },
    "file_sha": "cb65e722c03052b5aae22a65844fcf31c9e6c6b6e6102f916506aeb5da289933",
    "created_at": "2025-10-07T09:26:57.056861+00:00",
    "v": 3
  },
  {
    "chunk_id": "10f52fc56b40f3a3156d8e61a576d5d6183cbf4edab39d378239d7ea3d434b00",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/utilities/math.go",
    "language": "go",
    "start_line": 17,
    "end_line": 21,
    "ast_path": "go:function:",
    "text": "package utilities\nimport \"math\"\nfunc Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Ceil(v*base) / base\n}",
    "header_context": "package utilities\nimport \"math\"",
    "core": "func Ceil(v float64, precision int) float64 {\n\tbase := math.Pow10(precision)\n\n\treturn math.Ceil(v*base) / base\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "precision",
      "math.Ceil",
      "math.Pow10",
      "base"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "a7e4706868e2f747aeb12af2b3f7d40391377bd88cfbbb114c2a7ce869764866",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 7,
      "core": 33,
      "footer": 0,
      "total": 40
    },
    "file_sha": "cb65e722c03052b5aae22a65844fcf31c9e6c6b6e6102f916506aeb5da289933",
    "created_at": "2025-10-07T09:26:57.057183+00:00",
    "v": 3
  },
  {
    "chunk_id": "8e751c99fd3379f5613987df6c3e51fddcd7859a1a8fafd9531e10412659954b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go",
    "language": "go",
    "start_line": 1,
    "end_line": 6,
    "ast_path": "go:file_header",
    "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "errors",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "263e0783a8474a24f6b2918107896c7a8ef57d467005b0ec6e075ff5dc2a1b54"
    },
    "summary_1l": "Go package ratelimit",
    "qa_terms": "ratelimit, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 14,
      "footer": 0,
      "total": 14
    },
    "file_sha": "b69b3625703822d410c21a304d50021be23b14ce34da54ff8d8e5942179692e0",
    "created_at": "2025-10-07T09:26:57.056656+00:00",
    "v": 3
  },
  {
    "chunk_id": "263e0783a8474a24f6b2918107896c7a8ef57d467005b0ec6e075ff5dc2a1b54",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go",
    "language": "go",
    "start_line": 12,
    "end_line": 17,
    "ast_path": "go:type:TokenBucket (struct)",
    "text": "package ratelimit\nimport \"time\"\ntype TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "type TokenBucket struct {\n\tUsed           float64\n\tLastAccessTime time.Time\n\tLimit          float64\n\tDuration       time.Duration\n}",
    "footer_context": "",
    "symbols_defined": [
      "TokenBucket"
    ],
    "symbols_referenced": [
      "time.Duration",
      "time.Time"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "8e751c99fd3379f5613987df6c3e51fddcd7859a1a8fafd9531e10412659954b",
      "next": "655f2e2452a9357a61e53d2e88f6fdc784d92aae04a8e343047451dad4e35367"
    },
    "summary_1l": "Go struct TokenBucket for weather forecasting",
    "qa_terms": "TokenBucket, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 31,
      "footer": 0,
      "total": 40
    },
    "file_sha": "b69b3625703822d410c21a304d50021be23b14ce34da54ff8d8e5942179692e0",
    "created_at": "2025-10-07T09:26:57.056844+00:00",
    "v": 3
  },
  {
    "chunk_id": "655f2e2452a9357a61e53d2e88f6fdc784d92aae04a8e343047451dad4e35367",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go",
    "language": "go",
    "start_line": 19,
    "end_line": 21,
    "ast_path": "go:function:",
    "text": "package ratelimit\nimport \"time\"\nfunc NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "func NewTokenBucket(limit float64, duration time.Duration) *TokenBucket {\n\treturn &TokenBucket{0, time.Now(), limit, duration}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewTokenBucket",
      "time.Now",
      "time.Duration",
      "TokenBucket"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "263e0783a8474a24f6b2918107896c7a8ef57d467005b0ec6e075ff5dc2a1b54",
      "next": "63c26a024bb49deaa376b709e1213ba5bd6ca45ab1c6e24031f4ffeb708764c3"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 31,
      "footer": 0,
      "total": 40
    },
    "file_sha": "b69b3625703822d410c21a304d50021be23b14ce34da54ff8d8e5942179692e0",
    "created_at": "2025-10-07T09:26:57.057162+00:00",
    "v": 3
  },
  {
    "chunk_id": "63c26a024bb49deaa376b709e1213ba5bd6ca45ab1c6e24031f4ffeb708764c3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go",
    "language": "go",
    "start_line": 23,
    "end_line": 34,
    "ast_path": "go:method:(bucket *TokenBucket).Consume",
    "text": "package ratelimit\nimport \"time\"\n// receiver: bucket *TokenBucket\nfunc (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\n\treturn ErrLimitReached\n}",
    "header_context": "package ratelimit\nimport \"time\"\n// receiver: bucket *TokenBucket",
    "core": "func (bucket *TokenBucket) Consume(count float64) error {\n\tnow := time.Now()\n\tused := bucket.GetAdjustedUsage(now)\n\n\tif used+count <= bucket.Limit {\n\t\tbucket.Used = used + count\n\t\tbucket.LastAccessTime = now\n\t\treturn nil\n\t}\n\n\treturn ErrLimitReached\n}",
    "footer_context": "",
    "symbols_defined": [
      "Consume"
    ],
    "symbols_referenced": [
      "time.Now",
      "TokenBucket",
      "now",
      "LastAccessTime",
      "error",
      "Limit",
      "GetAdjustedUsage",
      "Used",
      "count"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "655f2e2452a9357a61e53d2e88f6fdc784d92aae04a8e343047451dad4e35367",
      "next": "2852f5476e82916e6983dcc8a5ca61caf33dca6bc3f1d99ecfec9859f0f24fc2"
    },
    "summary_1l": "Go method Consume on bucket *TokenBucket for the Foreca proxy",
    "qa_terms": "Consume, bucket TokenBucket, foreca, proxy, weather",
    "token_counts": {
      "header": 16,
      "core": 69,
      "footer": 0,
      "total": 86
    },
    "file_sha": "b69b3625703822d410c21a304d50021be23b14ce34da54ff8d8e5942179692e0",
    "created_at": "2025-10-07T09:26:57.057575+00:00",
    "v": 3
  },
  {
    "chunk_id": "2852f5476e82916e6983dcc8a5ca61caf33dca6bc3f1d99ecfec9859f0f24fc2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/tokenbucket.go",
    "language": "go",
    "start_line": 36,
    "end_line": 47,
    "ast_path": "go:method:(bucket *TokenBucket).GetAdjustedUsage",
    "text": "package ratelimit\nimport \"time\"\n// receiver: bucket *TokenBucket\nfunc (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}",
    "header_context": "package ratelimit\nimport \"time\"\n// receiver: bucket *TokenBucket",
    "core": "func (bucket *TokenBucket) GetAdjustedUsage(now time.Time) float64 {\n\tused := bucket.Used\n\tif bucket.LastAccessTime.Unix() > 0 {\n\t\telapsed := now.Sub(bucket.LastAccessTime)\n\t\tback := bucket.Limit * float64(elapsed) / float64(bucket.Duration)\n\t\tused -= back\n\t\tif used < 0 {\n\t\t\tused = 0\n\t\t}\n\t}\n\treturn used\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetAdjustedUsage"
    ],
    "symbols_referenced": [
      "elapsed",
      "Sub",
      "TokenBucket",
      "back",
      "LastAccessTime",
      "Duration",
      "used",
      "time.Time",
      "Unix"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "63c26a024bb49deaa376b709e1213ba5bd6ca45ab1c6e24031f4ffeb708764c3",
      "next": null
    },
    "summary_1l": "Go method GetAdjustedUsage on bucket *TokenBucket for the Foreca proxy",
    "qa_terms": "GetAdjustedUsage, bucket TokenBucket, foreca, proxy, weather",
    "token_counts": {
      "header": 16,
      "core": 94,
      "footer": 0,
      "total": 111
    },
    "file_sha": "b69b3625703822d410c21a304d50021be23b14ce34da54ff8d8e5942179692e0",
    "created_at": "2025-10-07T09:26:57.057958+00:00",
    "v": 3
  },
  {
    "chunk_id": "d93f7085c16363c0a47dd128b138bec0c84d0e66fd0a250b0d3b5756085a794d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go",
    "language": "go",
    "start_line": 1,
    "end_line": 3,
    "ast_path": "go:file_header",
    "text": "package ratelimit\n\nimport \"context\"",
    "header_context": "",
    "core": "package ratelimit\n\nimport \"context\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context"
    ],
    "neighbors": {
      "prev": null,
      "next": "02c98901d85549e8eeafa36311706e5ee7f42c87d2835c1c1edd76d0fce069b5"
    },
    "summary_1l": "Go package ratelimit",
    "qa_terms": "ratelimit, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 9,
      "footer": 0,
      "total": 9
    },
    "file_sha": "7b4ff4a13885235abd861e575983bf0d01da36faf35a64ad4fd8ea28e147cc0c",
    "created_at": "2025-10-07T09:26:57.058182+00:00",
    "v": 3
  },
  {
    "chunk_id": "02c98901d85549e8eeafa36311706e5ee7f42c87d2835c1c1edd76d0fce069b5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/interfaces.go",
    "language": "go",
    "start_line": 5,
    "end_line": 7,
    "ast_path": "go:type:IRateLimit (interface)",
    "text": "package ratelimit\nimport \"context\"\ntype IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}",
    "header_context": "package ratelimit\nimport \"context\"",
    "core": "type IRateLimit interface {\n\tAllow(ctx context.Context, key string) bool\n}",
    "footer_context": "",
    "symbols_defined": [
      "IRateLimit"
    ],
    "symbols_referenced": [
      "Allow",
      "context.Context"
    ],
    "imports_used": [
      "context"
    ],
    "neighbors": {
      "prev": "d93f7085c16363c0a47dd128b138bec0c84d0e66fd0a250b0d3b5756085a794d",
      "next": null
    },
    "summary_1l": "Go interface IRateLimit for weather forecasting",
    "qa_terms": "IRateLimit, interface, context, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 18,
      "footer": 0,
      "total": 27
    },
    "file_sha": "7b4ff4a13885235abd861e575983bf0d01da36faf35a64ad4fd8ea28e147cc0c",
    "created_at": "2025-10-07T09:26:57.058304+00:00",
    "v": 3
  },
  {
    "chunk_id": "5a534a3a33cc7d6ddd8354b9c8ba700be8b1e932f70fae01963495a8f6395140",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go",
    "language": "go",
    "start_line": 1,
    "end_line": 5,
    "ast_path": "go:file_header",
    "text": "package aws\n\nimport (\n\t\"context\"\n",
    "header_context": "",
    "core": "package aws\n\nimport (\n\t\"context\"\n",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "github.com/aws/aws-sdk-go-v2/aws",
      "github.com/aws/aws-sdk-go-v2/config",
      "github.com/aws/aws-sdk-go-v2/credentials"
    ],
    "neighbors": {
      "prev": null,
      "next": "fe4ad2473f24c672bd26c063807249f176f7a0c9ddfceece39973c8c6ccfc5ab"
    },
    "summary_1l": "Go package aws",
    "qa_terms": "aws, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 8,
      "footer": 0,
      "total": 8
    },
    "file_sha": "4431086db71f8bca2487fb13f1698801c3ebdc09bf35404d5fb20206972e9f16",
    "created_at": "2025-10-07T09:26:57.062195+00:00",
    "v": 3
  },
  {
    "chunk_id": "fe4ad2473f24c672bd26c063807249f176f7a0c9ddfceece39973c8c6ccfc5ab",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/config.go",
    "language": "go",
    "start_line": 11,
    "end_line": 43,
    "ast_path": "go:function:",
    "text": "package aws\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)\nfunc GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {\n\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\n\treturn cfg\n}",
    "header_context": "package aws\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n)",
    "core": "func GetConfig(accessKey, secretKey, sessionToken string, reg string, endpoint string) awsSdk.Config {\n\tendpointResolver := awsSdk.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (awsSdk.Endpoint, error) {\n\t\tif endpoint != \"\" {\n\t\t\treturn awsSdk.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           endpoint,\n\t\t\t\tSigningRegion: reg,\n\t\t\t}, nil\n\t\t}\n\n\t\treturn awsSdk.Endpoint{}, &awsSdk.EndpointNotFoundError{}\n\t})\n\n\toptFns := []func(*awsConfig.LoadOptions) error{\n\t\tawsConfig.WithEndpointResolverWithOptions(endpointResolver),\n\t}\n\n\tif accessKey != \"\" || secretKey != \"\" || sessionToken != \"\" {\n\t\toptFns = append(optFns, awsConfig.WithCredentialsProvider(\n\t\t\tcredentials.NewStaticCredentialsProvider(\n\t\t\t\taccessKey, secretKey, sessionToken,\n\t\t\t),\n\t\t))\n\t}\n\n\tcfg, err := awsConfig.LoadDefaultConfig(context.TODO(), optFns...)\n\n\tif err != nil {\n\t\treturn awsSdk.Config{}\n\t}\n\n\treturn cfg\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "cfg",
      "LoadOptions",
      "endpointResolver",
      "EndpointNotFoundError",
      "LoadDefaultConfig",
      "awsConfig",
      "Endpoint",
      "credentials.NewStaticCredentialsProvider",
      "URL",
      "SigningRegion",
      "context.TODO",
      "EndpointResolverWithOptionsFunc",
      "WithCredentialsProvider",
      "WithEndpointResolverWithOptions",
      "error",
      "GetConfig",
      "Config",
      "PartitionID"
    ],
    "imports_used": [
      "github.com/aws/aws-sdk-go-v2/aws",
      "context",
      "github.com/aws/aws-sdk-go-v2/credentials"
    ],
    "neighbors": {
      "prev": "5a534a3a33cc7d6ddd8354b9c8ba700be8b1e932f70fae01963495a8f6395140",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 32,
      "core": 226,
      "footer": 0,
      "total": 258
    },
    "file_sha": "4431086db71f8bca2487fb13f1698801c3ebdc09bf35404d5fb20206972e9f16",
    "created_at": "2025-10-07T09:26:57.063362+00:00",
    "v": 3
  },
  {
    "chunk_id": "192a3b38d36aefdcc8422aaddcb4250c9d5d79502d7739592a865d3a6f3a56df",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go",
    "language": "go",
    "start_line": 1,
    "end_line": 8,
    "ast_path": "go:file_header",
    "text": "package ratelimit\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package ratelimit\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "bytes",
      "encoding/gob",
      "github.com/dropbox/godropbox/memcache",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "cf41bcf18f175c8e3e5776ad83095010003899d678ad6f35cd1938fb3e1301ba"
    },
    "summary_1l": "Go package ratelimit with memcache",
    "qa_terms": "ratelimit, memcache, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 33,
      "footer": 0,
      "total": 33
    },
    "file_sha": "df18017ff5cf8c044fa7f2f33247d5cdecaf1de4a26bb82e9908544232d7faad",
    "created_at": "2025-10-07T09:26:57.061799+00:00",
    "v": 3
  },
  {
    "chunk_id": "cf41bcf18f175c8e3e5776ad83095010003899d678ad6f35cd1938fb3e1301ba",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go",
    "language": "go",
    "start_line": 10,
    "end_line": 13,
    "ast_path": "go:type:MemcachedStorage (struct)",
    "text": "package ratelimit\nimport \"github.com/dropbox/godropbox/memcache\"\ntype MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}",
    "header_context": "package ratelimit\nimport \"github.com/dropbox/godropbox/memcache\"",
    "core": "type MemcachedStorage struct {\n\tclient memcache.Client\n\tprefix string\n}",
    "footer_context": "",
    "symbols_defined": [
      "MemcachedStorage"
    ],
    "symbols_referenced": [
      "memcache.Client"
    ],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "192a3b38d36aefdcc8422aaddcb4250c9d5d79502d7739592a865d3a6f3a56df",
      "next": "bbd78e39cfff9d09c72ca7650efae6a0756e65235704bbb91e77e36c3eff5342"
    },
    "summary_1l": "Go struct MemcachedStorage for weather forecasting",
    "qa_terms": "MemcachedStorage, struct, memcache, foreca, weather, proxy",
    "token_counts": {
      "header": 20,
      "core": 16,
      "footer": 0,
      "total": 36
    },
    "file_sha": "df18017ff5cf8c044fa7f2f33247d5cdecaf1de4a26bb82e9908544232d7faad",
    "created_at": "2025-10-07T09:26:57.061931+00:00",
    "v": 3
  },
  {
    "chunk_id": "bbd78e39cfff9d09c72ca7650efae6a0756e65235704bbb91e77e36c3eff5342",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go",
    "language": "go",
    "start_line": 15,
    "end_line": 17,
    "ast_path": "go:function:",
    "text": "package ratelimit\nimport \"github.com/dropbox/godropbox/memcache\"\nfunc NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}",
    "header_context": "package ratelimit\nimport \"github.com/dropbox/godropbox/memcache\"",
    "core": "func NewMemcachedStorage(client memcache.Client, prefix string) *MemcachedStorage {\n\treturn &MemcachedStorage{client, prefix}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewMemcachedStorage",
      "MemcachedStorage",
      "memcache.Client"
    ],
    "imports_used": [
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "cf41bcf18f175c8e3e5776ad83095010003899d678ad6f35cd1938fb3e1301ba",
      "next": "d211d14143a0bd9516468e9f16e636e29653fb3d56dc87660be83150059a52cf"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "cache, foreca, proxy, weather",
    "token_counts": {
      "header": 20,
      "core": 29,
      "footer": 0,
      "total": 49
    },
    "file_sha": "df18017ff5cf8c044fa7f2f33247d5cdecaf1de4a26bb82e9908544232d7faad",
    "created_at": "2025-10-07T09:26:57.062177+00:00",
    "v": 3
  },
  {
    "chunk_id": "d211d14143a0bd9516468e9f16e636e29653fb3d56dc87660be83150059a52cf",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go",
    "language": "go",
    "start_line": 19,
    "end_line": 35,
    "ast_path": "go:method:(ms *MemcachedStorage).Get",
    "text": "package ratelimit\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n)\n// receiver: ms *MemcachedStorage\nfunc (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}",
    "header_context": "package ratelimit\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n)\n// receiver: ms *MemcachedStorage",
    "core": "func (ms *MemcachedStorage) Get(key string) (*TokenBucket, error) {\n\tvar err error\n\tresp := ms.client.Get(ms.prefix + key)\n\tif resp.Status() == memcache.StatusNoError || resp.Status() == memcache.StatusKeyNotFound {\n\t\treturn nil, nil\n\t} else if resp.Error() != nil {\n\t\treturn nil, resp.Error()\n\t}\n\n\tvar bucket = new(TokenBucket)\n\tdec := gob.NewDecoder(bytes.NewBuffer(resp.Value()))\n\terr = dec.Decode(bucket)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bucket, nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "Decode",
      "bucket",
      "bytes.NewBuffer",
      "TokenBucket",
      "Error",
      "MemcachedStorage",
      "gob.NewDecoder",
      "memcache.StatusNoError",
      "err",
      "Status",
      "memcache.StatusKeyNotFound",
      "key",
      "error",
      "Value"
    ],
    "imports_used": [
      "encoding/gob",
      "bytes",
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "bbd78e39cfff9d09c72ca7650efae6a0756e65235704bbb91e77e36c3eff5342",
      "next": "1f8bb852433dca8a2effdad216b6d6262afe8a5951df8ce80de95bf16016425c"
    },
    "summary_1l": "Go method Get on ms *MemcachedStorage",
    "qa_terms": "Get, cache, foreca, ms MemcachedStorage, proxy, weather",
    "token_counts": {
      "header": 38,
      "core": 123,
      "footer": 0,
      "total": 162
    },
    "file_sha": "df18017ff5cf8c044fa7f2f33247d5cdecaf1de4a26bb82e9908544232d7faad",
    "created_at": "2025-10-07T09:26:57.062721+00:00",
    "v": 3
  },
  {
    "chunk_id": "1f8bb852433dca8a2effdad216b6d6262afe8a5951df8ce80de95bf16016425c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go",
    "language": "go",
    "start_line": 37,
    "end_line": 49,
    "ast_path": "go:method:(ms *MemcachedStorage).Set",
    "text": "package ratelimit\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n// receiver: ms *MemcachedStorage\nfunc (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}",
    "header_context": "package ratelimit\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"github.com/dropbox/godropbox/memcache\"\n\t\"time\"\n)\n// receiver: ms *MemcachedStorage",
    "core": "func (ms *MemcachedStorage) Set(key string, bucket *TokenBucket, duration time.Duration) error {\n\tvar buffer = bytes.NewBuffer(nil)\n\tenc := gob.NewEncoder(buffer)\n\t_ = enc.Encode(bucket)\n\titem := &memcache.Item{\n\t\tKey:        ms.prefix + key,\n\t\tValue:      buffer.Bytes(),\n\t\tExpiration: uint32(duration.Seconds()),\n\t}\n\n\tresp := ms.client.Set(item)\n\treturn resp.Error()\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "bucket",
      "bytes.NewBuffer",
      "gob.NewEncoder",
      "Value",
      "Seconds",
      "Encode",
      "buffer",
      "Error",
      "TokenBucket",
      "Bytes",
      "MemcachedStorage",
      "item",
      "Expiration",
      "memcache.Item",
      "error",
      "time.Duration",
      "Key"
    ],
    "imports_used": [
      "encoding/gob",
      "bytes",
      "time",
      "github.com/dropbox/godropbox/memcache"
    ],
    "neighbors": {
      "prev": "d211d14143a0bd9516468e9f16e636e29653fb3d56dc87660be83150059a52cf",
      "next": "efeb8320d6040d9ccce0d118dee026acf1b70628ef2091a51d97517f9e5e4762"
    },
    "summary_1l": "Go method Set on ms *MemcachedStorage",
    "qa_terms": "Set, cache, foreca, ms MemcachedStorage, proxy, weather",
    "token_counts": {
      "header": 41,
      "core": 93,
      "footer": 0,
      "total": 135
    },
    "file_sha": "df18017ff5cf8c044fa7f2f33247d5cdecaf1de4a26bb82e9908544232d7faad",
    "created_at": "2025-10-07T09:26:57.063263+00:00",
    "v": 3
  },
  {
    "chunk_id": "efeb8320d6040d9ccce0d118dee026acf1b70628ef2091a51d97517f9e5e4762",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage_memcached.go",
    "language": "go",
    "start_line": 51,
    "end_line": 54,
    "ast_path": "go:method:(ms *MemcachedStorage).Delete",
    "text": "package ratelimit\n// receiver: ms *MemcachedStorage\nfunc (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}",
    "header_context": "package ratelimit\n// receiver: ms *MemcachedStorage",
    "core": "func (ms *MemcachedStorage) Delete(key string) error {\n\tresp := ms.client.Delete(ms.prefix + key)\n\treturn resp.Error()\n}",
    "footer_context": "",
    "symbols_defined": [
      "Delete"
    ],
    "symbols_referenced": [
      "Error",
      "MemcachedStorage",
      "key",
      "error"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1f8bb852433dca8a2effdad216b6d6262afe8a5951df8ce80de95bf16016425c",
      "next": null
    },
    "summary_1l": "Go method Delete on ms *MemcachedStorage",
    "qa_terms": "Delete, foreca, ms MemcachedStorage, proxy, weather",
    "token_counts": {
      "header": 13,
      "core": 29,
      "footer": 0,
      "total": 43
    },
    "file_sha": "df18017ff5cf8c044fa7f2f33247d5cdecaf1de4a26bb82e9908544232d7faad",
    "created_at": "2025-10-07T09:26:57.063472+00:00",
    "v": 3
  },
  {
    "chunk_id": "873ae2afcbf5185fdfbdc5763ea1ebea52777fe15075591fb1d82f6b147a33ed",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go",
    "language": "go",
    "start_line": 1,
    "end_line": 15,
    "ast_path": "go:file_header",
    "text": "package adapters_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)",
    "header_context": "",
    "core": "package adapters_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "errors",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb/types",
      "github.com/aws/smithy-go/ptr",
      "github.com/stretchr/testify/suite",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks",
      "go.uber.org/mock/gomock",
      "testing"
    ],
    "neighbors": {
      "prev": null,
      "next": "a68fcdce066379d406cb4d7269df0b450f22b0872552f9dff696baad3d2882be"
    },
    "summary_1l": "Go package adapters_test",
    "qa_terms": "adapters_test, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 129,
      "footer": 0,
      "total": 129
    },
    "file_sha": "3db7cbbf4b0823c96e964ce6ecacf474ea8dbf713f858a30f2eba1524f452653",
    "created_at": "2025-10-07T09:26:57.051816+00:00",
    "v": 3
  },
  {
    "chunk_id": "a68fcdce066379d406cb4d7269df0b450f22b0872552f9dff696baad3d2882be",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go",
    "language": "go",
    "start_line": 18,
    "end_line": 22,
    "ast_path": "go:type:dynamoMappingsRepositoryTestSuite (struct)",
    "text": "package adapters_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\ndynamoMappingsRepositoryTestSuite struct {\nsuite.Suite\nmockController *gomock.Controller\n}",
    "header_context": "package adapters_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)",
    "core": "dynamoMappingsRepositoryTestSuite struct {\nsuite.Suite\nmockController *gomock.Controller\n}",
    "footer_context": "",
    "symbols_defined": [
      "dynamoMappingsRepositoryTestSuite"
    ],
    "symbols_referenced": [
      "suite.Suite",
      "gomock.Controller"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "873ae2afcbf5185fdfbdc5763ea1ebea52777fe15075591fb1d82f6b147a33ed",
      "next": "264418efc536ac9d5479e19cca93f73c5827fa5c8e131c3fe471ca4a52815211"
    },
    "summary_1l": "Go struct dynamoMappingsRepositoryTestSuite for weather forecasting",
    "qa_terms": "dynamoMappingsRepositoryTestSuite, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 25,
      "core": 20,
      "footer": 0,
      "total": 45
    },
    "file_sha": "3db7cbbf4b0823c96e964ce6ecacf474ea8dbf713f858a30f2eba1524f452653",
    "created_at": "2025-10-07T09:26:57.056584+00:00",
    "v": 3
  },
  {
    "chunk_id": "264418efc536ac9d5479e19cca93f73c5827fa5c8e131c3fe471ca4a52815211",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go",
    "language": "go",
    "start_line": 25,
    "end_line": 27,
    "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).SetupSuite",
    "text": "package adapters_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}",
    "header_context": "package adapters_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "func (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "suite.mockController",
      "dynamoMappingsRepositoryTestSuite",
      "gomock.NewController",
      "suite.T"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "a68fcdce066379d406cb4d7269df0b450f22b0872552f9dff696baad3d2882be",
      "next": "bcd71c2040c6c1c1cd52ed7fba01a2bd0c3710675c3f134ead1743d5d09d6d54"
    },
    "summary_1l": "Go method SetupSuite on suite *dynamoMappingsRepositoryTestSuite",
    "qa_terms": "SetupSuite, foreca, proxy, suite dynamoMappingsRepositoryTestSuite, weather",
    "token_counts": {
      "header": 36,
      "core": 28,
      "footer": 0,
      "total": 65
    },
    "file_sha": "3db7cbbf4b0823c96e964ce6ecacf474ea8dbf713f858a30f2eba1524f452653",
    "created_at": "2025-10-07T09:26:57.057117+00:00",
    "v": 3
  },
  {
    "chunk_id": "bcd71c2040c6c1c1cd52ed7fba01a2bd0c3710675c3f134ead1743d5d09d6d54",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go",
    "language": "go",
    "start_line": 29,
    "end_line": 54,
    "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetDynamoError",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetDynamoError"
    ],
    "symbols_referenced": [
      "suite.mockController",
      "suite.Assert",
      "dynamodb.GetItemOutput",
      "EqualValues",
      "EXPECT",
      "Return",
      "ptr.String",
      "types.AttributeValueMemberN",
      "dynamodb.GetItemInput",
      "Get",
      "Key",
      "adapters.NewMappingDynamoDBRepository",
      "NotNil",
      "gomock.Any",
      "GetItem",
      "ErrorContains",
      "err",
      "mocks.NewMockcache",
      "error",
      "ConsistentRead",
      "dynamoMappingsRepositoryTestSuite",
      "ptr.Bool",
      "context.TODO",
      "dynamodb.Options",
      "context.Context",
      "TableName",
      "DoAndReturn",
      "foreca.Mapping",
      "Value",
      "mocks.NewMockmappingDynamoDBClient",
      "errors.New",
      "types.AttributeValue"
    ],
    "imports_used": [
      "context",
      "errors",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks",
      "github.com/stretchr/testify/suite",
      "github.com/aws/smithy-go/ptr",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb/types",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "264418efc536ac9d5479e19cca93f73c5827fa5c8e131c3fe471ca4a52815211",
      "next": "a68dab1ab06f719b572abf57dfcf0d29c70bbd67d441a17f983c7e874ee6a119"
    },
    "summary_1l": "Go method TestGetDynamoError on suite *dynamoMappingsRepositoryTestSuite",
    "qa_terms": "TestGetDynamoError, foreca, proxy, suite dynamoMappingsRepositoryTestSuite, weather",
    "token_counts": {
      "header": 137,
      "core": 247,
      "footer": 0,
      "total": 385
    },
    "file_sha": "3db7cbbf4b0823c96e964ce6ecacf474ea8dbf713f858a30f2eba1524f452653",
    "created_at": "2025-10-07T09:26:57.058399+00:00",
    "v": 3
  },
  {
    "chunk_id": "a68dab1ab06f719b572abf57dfcf0d29c70bbd67d441a17f983c7e874ee6a119",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 56,
    "end_line": 70,
    "ast_path": "go:method:(*suite dynamoMappingsRepositoryTestSuite).TestGetNoMapping#part1_cache_lookup",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n",
    "footer_context": "",
    "symbols_defined": [
      "TestGetNoMapping"
    ],
    "symbols_referenced": [
      "AttributeValue",
      "NewMockmappingDynamoDBClient",
      "Any",
      "EXPECT",
      "GetItemOutput",
      "EqualValues",
      "Return",
      "dynamodb",
      "Item",
      "Get",
      "Key",
      "NewMockcache",
      "GetItem",
      "Assert",
      "Context",
      "AttributeValueMemberN",
      "error",
      "ConsistentRead",
      "dynamoMappingsRepositoryTestSuite",
      "mockController",
      "Options",
      "String",
      "TableName",
      "DoAndReturn",
      "GetItemInput",
      "Value",
      "Bool",
      "foreca"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "bcd71c2040c6c1c1cd52ed7fba01a2bd0c3710675c3f134ead1743d5d09d6d54",
      "next": "f7600b4bbc75a528d65d32fb6f9d77d0cf4e49099e1b98662f988786393c2011"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "TestGetNoMapping, suite dynamoMappingsRepositoryTestSuite",
    "token_counts": {
      "header": 134,
      "core": 204,
      "footer": 0,
      "total": 339
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.060143+00:00",
    "v": 3
  },
  {
    "chunk_id": "f7600b4bbc75a528d65d32fb6f9d77d0cf4e49099e1b98662f988786393c2011",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 71,
    "end_line": 81,
    "ast_path": "go:method:(*suite dynamoMappingsRepositoryTestSuite).TestGetNoMapping#part2_cache_lookup",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetNoMapping"
    ],
    "symbols_referenced": [
      "ErrorIs",
      "NewMappingDynamoDBRepository",
      "err",
      "TODO",
      "Get",
      "NotNil",
      "Assert",
      "ErrMappingNotFound"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a68dab1ab06f719b572abf57dfcf0d29c70bbd67d441a17f983c7e874ee6a119",
      "next": "8159fe8520c9e0ce727a55f1bd80bb21ee513f9dce9403f017184c3cd45002ea"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "TestGetNoMapping, suite dynamoMappingsRepositoryTestSuite",
    "token_counts": {
      "header": 134,
      "core": 57,
      "footer": 0,
      "total": 192
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.060485+00:00",
    "v": 3
  },
  {
    "chunk_id": "8159fe8520c9e0ce727a55f1bd80bb21ee513f9dce9403f017184c3cd45002ea",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 83,
    "end_line": 97,
    "ast_path": "go:method:(*suite dynamoMappingsRepositoryTestSuite).TestGetNoCacheMapping#part1_cache_lookup",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},",
    "footer_context": "",
    "symbols_defined": [
      "TestGetNoCacheMapping"
    ],
    "symbols_referenced": [
      "AttributeValue",
      "NewMockmappingDynamoDBClient",
      "Any",
      "EqualValues",
      "GetItemOutput",
      "EXPECT",
      "dynamodb",
      "Item",
      "Key",
      "GetItem",
      "Assert",
      "AttributeValueMemberS",
      "Context",
      "AttributeValueMemberN",
      "error",
      "ConsistentRead",
      "dynamoMappingsRepositoryTestSuite",
      "mockController",
      "Options",
      "String",
      "TableName",
      "DoAndReturn",
      "GetItemInput",
      "Value",
      "Bool"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f7600b4bbc75a528d65d32fb6f9d77d0cf4e49099e1b98662f988786393c2011",
      "next": "f6196ff498166b5a8cc1789c6068fe45ad2b31fc220d1d9d7c60fae2ff0f8d95"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "TestGetNoCacheMapping, suite dynamoMappingsRepositoryTestSuite",
    "token_counts": {
      "header": 134,
      "core": 223,
      "footer": 0,
      "total": 358
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.062286+00:00",
    "v": 3
  },
  {
    "chunk_id": "f6196ff498166b5a8cc1789c6068fe45ad2b31fc220d1d9d7c60fae2ff0f8d95",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 98,
    "end_line": 112,
    "ast_path": "go:method:(*suite dynamoMappingsRepositoryTestSuite).TestGetNoCacheMapping#part2_cache_lookup",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n",
    "footer_context": "",
    "symbols_defined": [
      "TestGetNoCacheMapping"
    ],
    "symbols_referenced": [
      "NewMappingDynamoDBRepository",
      "TODO",
      "Get",
      "Any",
      "NewMockcache",
      "Add",
      "mockController",
      "EXPECT",
      "Return",
      "foreca"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "8159fe8520c9e0ce727a55f1bd80bb21ee513f9dce9403f017184c3cd45002ea",
      "next": "bd5cb879205f0251091563c7236361c7269848415514d1f87a9502a5e752c50e"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "TestGetNoCacheMapping, suite dynamoMappingsRepositoryTestSuite",
    "token_counts": {
      "header": 134,
      "core": 91,
      "footer": 0,
      "total": 226
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.062683+00:00",
    "v": 3
  },
  {
    "chunk_id": "bd5cb879205f0251091563c7236361c7269848415514d1f87a9502a5e752c50e",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 113,
    "end_line": 120,
    "ast_path": "go:method:(*suite dynamoMappingsRepositoryTestSuite).TestGetNoCacheMapping#part3_timezone_load",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetNoCacheMapping"
    ],
    "symbols_referenced": [
      "m",
      "Equal",
      "err",
      "Nil",
      "ID",
      "NotNil",
      "Mapping",
      "Assert",
      "ProviderID",
      "Timezone"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f6196ff498166b5a8cc1789c6068fe45ad2b31fc220d1d9d7c60fae2ff0f8d95",
      "next": "d49cb7b83750f029b8014b5b0cd81d162c4e6efee9f50ac5cd59de314cebb5f3"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "TestGetNoCacheMapping, suite dynamoMappingsRepositoryTestSuite",
    "token_counts": {
      "header": 134,
      "core": 52,
      "footer": 0,
      "total": 187
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.062976+00:00",
    "v": 3
  },
  {
    "chunk_id": "d49cb7b83750f029b8014b5b0cd81d162c4e6efee9f50ac5cd59de314cebb5f3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go",
    "language": "go",
    "start_line": 122,
    "end_line": 147,
    "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetCachedMapping",
    "text": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite\nfunc (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}",
    "header_context": "package adapters_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite",
    "core": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetCachedMapping"
    ],
    "symbols_referenced": [
      "suite.mockController",
      "Nil",
      "suite.Assert",
      "EXPECT",
      "Return",
      "Get",
      "adapters.NewMappingDynamoDBRepository",
      "Times",
      "gomock.Any",
      "GetItem",
      "NotNil",
      "ProviderID",
      "err",
      "mocks.NewMockcache",
      "dynamoMappingsRepositoryTestSuite",
      "context.TODO",
      "Timezone",
      "m",
      "Equal",
      "foreca.Mapping",
      "ID",
      "mocks.NewMockmappingDynamoDBClient"
    ],
    "imports_used": [
      "context",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks",
      "github.com/stretchr/testify/suite",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "bd5cb879205f0251091563c7236361c7269848415514d1f87a9502a5e752c50e",
      "next": "c35c35b82cf7cee8d5b36d07c8026b10c0dde0742dffc5a424b370874743751c"
    },
    "summary_1l": "Go method TestGetCachedMapping on suite *dynamoMappingsRepositoryTestSuite",
    "qa_terms": "TestGetCachedMapping, foreca, proxy, suite dynamoMappingsRepositoryTestSuite, weather",
    "token_counts": {
      "header": 96,
      "core": 201,
      "footer": 0,
      "total": 298
    },
    "file_sha": "3db7cbbf4b0823c96e964ce6ecacf474ea8dbf713f858a30f2eba1524f452653",
    "created_at": "2025-10-07T09:26:57.063739+00:00",
    "v": 3
  },
  {
    "chunk_id": "c35c35b82cf7cee8d5b36d07c8026b10c0dde0742dffc5a424b370874743751c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go",
    "language": "go",
    "start_line": 149,
    "end_line": 151,
    "ast_path": "go:function:",
    "text": "package adapters_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)\nfunc TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}",
    "header_context": "package adapters_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)",
    "core": "func TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "suite.Run",
      "TestMappingsRepository",
      "dynamoMappingsRepositoryTestSuite",
      "testing.T"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "testing"
    ],
    "neighbors": {
      "prev": "d49cb7b83750f029b8014b5b0cd81d162c4e6efee9f50ac5cd59de314cebb5f3",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 18,
      "core": 23,
      "footer": 0,
      "total": 41
    },
    "file_sha": "3db7cbbf4b0823c96e964ce6ecacf474ea8dbf713f858a30f2eba1524f452653",
    "created_at": "2025-10-07T09:26:57.063944+00:00",
    "v": 3
  },
  {
    "chunk_id": "492129d5e85094a49c616bd0dca24eb37349e5a9b3b8c19dd9c93754f5f67e7a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 1,
    "end_line": 6,
    "ast_path": "go:file_header",
    "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "errors",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "96c4f7c21ed6384d8cc9b1b05e798d7bd10e5ceff9fff5595fdd923cd3552369"
    },
    "summary_1l": "Go package ratelimit",
    "qa_terms": "ratelimit, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 14,
      "footer": 0,
      "total": 14
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.063684+00:00",
    "v": 3
  },
  {
    "chunk_id": "96c4f7c21ed6384d8cc9b1b05e798d7bd10e5ceff9fff5595fdd923cd3552369",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 12,
    "end_line": 16,
    "ast_path": "go:type:Storage (interface)",
    "text": "package ratelimit\nimport \"time\"\ntype Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "type Storage interface {\n\tGet(key string) (*TokenBucket, error)\n\tSet(key string, bucket *TokenBucket, expire time.Duration) error\n\tDelete(key string) error\n}",
    "footer_context": "",
    "symbols_defined": [
      "Storage"
    ],
    "symbols_referenced": [
      "error",
      "TokenBucket",
      "Delete",
      "Get",
      "Set",
      "time.Duration"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "492129d5e85094a49c616bd0dca24eb37349e5a9b3b8c19dd9c93754f5f67e7a",
      "next": "4e48158b30f1e2abbff239f8f2305b5f695f6aae45131685cb80c99f62f951e5"
    },
    "summary_1l": "Go interface Storage for weather forecasting",
    "qa_terms": "Storage, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 36,
      "footer": 0,
      "total": 45
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.063878+00:00",
    "v": 3
  },
  {
    "chunk_id": "4e48158b30f1e2abbff239f8f2305b5f695f6aae45131685cb80c99f62f951e5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 18,
    "end_line": 20,
    "ast_path": "go:type:DummyStorage (struct)",
    "text": "package ratelimit\ntype DummyStorage struct {\n\tdata map[string]*TokenBucket\n}",
    "header_context": "package ratelimit",
    "core": "type DummyStorage struct {\n\tdata map[string]*TokenBucket\n}",
    "footer_context": "",
    "symbols_defined": [
      "DummyStorage"
    ],
    "symbols_referenced": [
      "TokenBucket"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "96c4f7c21ed6384d8cc9b1b05e798d7bd10e5ceff9fff5595fdd923cd3552369",
      "next": "818a24f4d0de2e79c12768b95e937ff894bedd2d9704332647fe0abd27a7d58e"
    },
    "summary_1l": "Go struct DummyStorage for weather forecasting",
    "qa_terms": "DummyStorage, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 4,
      "core": 13,
      "footer": 0,
      "total": 18
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.063969+00:00",
    "v": 3
  },
  {
    "chunk_id": "818a24f4d0de2e79c12768b95e937ff894bedd2d9704332647fe0abd27a7d58e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 22,
    "end_line": 24,
    "ast_path": "go:function:",
    "text": "package ratelimit\nfunc NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}",
    "header_context": "package ratelimit",
    "core": "func NewDummyStorage() *DummyStorage {\n\treturn &DummyStorage{make(map[string]*TokenBucket)}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "DummyStorage",
      "NewDummyStorage",
      "TokenBucket"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4e48158b30f1e2abbff239f8f2305b5f695f6aae45131685cb80c99f62f951e5",
      "next": "62895995844a426775bb26089440781ce7d393548ba8ebf44b9dc8fa64b1b722"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 4,
      "core": 22,
      "footer": 0,
      "total": 27
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.064223+00:00",
    "v": 3
  },
  {
    "chunk_id": "62895995844a426775bb26089440781ce7d393548ba8ebf44b9dc8fa64b1b722",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 26,
    "end_line": 32,
    "ast_path": "go:method:(d *DummyStorage).Get",
    "text": "package ratelimit\n// receiver: d *DummyStorage\nfunc (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}",
    "header_context": "package ratelimit\n// receiver: d *DummyStorage",
    "core": "func (d *DummyStorage) Get(key string) (*TokenBucket, error) {\n\tb, ok := d.data[key]\n\tif !ok {\n\t\treturn nil, nil\n\t}\n\treturn b, nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "DummyStorage",
      "error",
      "TokenBucket"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "818a24f4d0de2e79c12768b95e937ff894bedd2d9704332647fe0abd27a7d58e",
      "next": "d20881ff41142d8d9cebf3eaefaea593963b7878a2737e1b55d5e32b5c6aa741"
    },
    "summary_1l": "Go method Get on d *DummyStorage for the Foreca proxy",
    "qa_terms": "Get, d DummyStorage, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 44,
      "footer": 0,
      "total": 57
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.064596+00:00",
    "v": 3
  },
  {
    "chunk_id": "d20881ff41142d8d9cebf3eaefaea593963b7878a2737e1b55d5e32b5c6aa741",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 34,
    "end_line": 37,
    "ast_path": "go:method:(d *DummyStorage).Set",
    "text": "package ratelimit\nimport \"time\"\n// receiver: d *DummyStorage\nfunc (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}",
    "header_context": "package ratelimit\nimport \"time\"\n// receiver: d *DummyStorage",
    "core": "func (d *DummyStorage) Set(key string, bucket *TokenBucket, _ time.Duration) error {\n\td.data[key] = bucket\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "DummyStorage",
      "error",
      "TokenBucket",
      "bucket",
      "time.Duration"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "62895995844a426775bb26089440781ce7d393548ba8ebf44b9dc8fa64b1b722",
      "next": "0eff9107e30cf48703553eb636659316ae2cb922e3333f1e8bad343488552e13"
    },
    "summary_1l": "Go method Set on d *DummyStorage for the Foreca proxy",
    "qa_terms": "Set, d DummyStorage, foreca, proxy, weather",
    "token_counts": {
      "header": 16,
      "core": 33,
      "footer": 0,
      "total": 50
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.064874+00:00",
    "v": 3
  },
  {
    "chunk_id": "0eff9107e30cf48703553eb636659316ae2cb922e3333f1e8bad343488552e13",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/storage.go",
    "language": "go",
    "start_line": 39,
    "end_line": 42,
    "ast_path": "go:method:(d *DummyStorage).Delete",
    "text": "package ratelimit\n// receiver: d *DummyStorage\nfunc (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}",
    "header_context": "package ratelimit\n// receiver: d *DummyStorage",
    "core": "func (d *DummyStorage) Delete(key string) error {\n\tdelete(d.data, key)\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "Delete"
    ],
    "symbols_referenced": [
      "DummyStorage",
      "error",
      "key"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d20881ff41142d8d9cebf3eaefaea593963b7878a2737e1b55d5e32b5c6aa741",
      "next": null
    },
    "summary_1l": "Go method Delete on d *DummyStorage for the Foreca proxy",
    "qa_terms": "Delete, d DummyStorage, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 23,
      "footer": 0,
      "total": 36
    },
    "file_sha": "b278a56416dcc8aee23638d366157a1425e4579fc561db171cec7ff9df3ba38b",
    "created_at": "2025-10-07T09:26:57.065068+00:00",
    "v": 3
  },
  {
    "chunk_id": "490685e6b6445396e4b23e7e9be4c9e76914e8982bd70d883f48ca5e9b5c299b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go",
    "language": "go",
    "start_line": 1,
    "end_line": 3,
    "ast_path": "go:file_header",
    "text": "package aws\n\nimport (",
    "header_context": "",
    "core": "package aws\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "github.com/aws/aws-sdk-go-v2/aws",
      "github.com/aws/aws-sdk-go-v2/service/dynamodb"
    ],
    "neighbors": {
      "prev": null,
      "next": "dfb7a4183d6a2a1d796a8ec55100bd356ad33f93a169062e9e6d864c15332b3b"
    },
    "summary_1l": "Go package aws",
    "qa_terms": "aws, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 5,
      "footer": 0,
      "total": 5
    },
    "file_sha": "d58c333794bcac3251190571a7856fa3ac2d611d20c7d4121f5bb6bcec465832",
    "created_at": "2025-10-07T09:26:57.064936+00:00",
    "v": 3
  },
  {
    "chunk_id": "dfb7a4183d6a2a1d796a8ec55100bd356ad33f93a169062e9e6d864c15332b3b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go",
    "language": "go",
    "start_line": 8,
    "end_line": 10,
    "ast_path": "go:function:",
    "text": "package aws\nimport \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\nfunc NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}",
    "header_context": "package aws\nimport \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"",
    "core": "func NewDynamoDbClientFromConfig(cfg awsSdk.Config) *dynamodb.Client {\n\treturn dynamodb.NewFromConfig(cfg)\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "cfg",
      "NewDynamoDbClientFromConfig",
      "dynamodb.NewFromConfig",
      "Config",
      "dynamodb.Client"
    ],
    "imports_used": [
      "github.com/aws/aws-sdk-go-v2/service/dynamodb"
    ],
    "neighbors": {
      "prev": "490685e6b6445396e4b23e7e9be4c9e76914e8982bd70d883f48ca5e9b5c299b",
      "next": "166052f70e1a2bf4ee56b72b1a7bac39d5caea29a4abbd80a68d7ff66aa53d61"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 17,
      "core": 27,
      "footer": 0,
      "total": 44
    },
    "file_sha": "d58c333794bcac3251190571a7856fa3ac2d611d20c7d4121f5bb6bcec465832",
    "created_at": "2025-10-07T09:26:57.065451+00:00",
    "v": 3
  },
  {
    "chunk_id": "166052f70e1a2bf4ee56b72b1a7bac39d5caea29a4abbd80a68d7ff66aa53d61",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/aws/client.go",
    "language": "go",
    "start_line": 12,
    "end_line": 14,
    "ast_path": "go:function:",
    "text": "package aws\nimport \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\nfunc NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}",
    "header_context": "package aws\nimport \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"",
    "core": "func NewDynamoDbClient(accessKey, secretKey, sessionToken string, region string, endpoint string) *dynamodb.Client {\n\treturn NewDynamoDbClientFromConfig(GetConfig(accessKey, secretKey, sessionToken, region, endpoint))\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "endpoint",
      "NewDynamoDbClientFromConfig",
      "GetConfig",
      "NewDynamoDbClient",
      "dynamodb.Client"
    ],
    "imports_used": [
      "github.com/aws/aws-sdk-go-v2/service/dynamodb"
    ],
    "neighbors": {
      "prev": "dfb7a4183d6a2a1d796a8ec55100bd356ad33f93a169062e9e6d864c15332b3b",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 17,
      "core": 51,
      "footer": 0,
      "total": 68
    },
    "file_sha": "d58c333794bcac3251190571a7856fa3ac2d611d20c7d4121f5bb6bcec465832",
    "created_at": "2025-10-07T09:26:57.066101+00:00",
    "v": 3
  },
  {
    "chunk_id": "1a81755f6cdd399df034eb5cb7207369c29d7c206eb18a657b69fd2a558f59ae",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 1,
    "end_line": 8,
    "ast_path": "go:file_header",
    "text": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package ratelimit\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "errors",
      "math",
      "strings",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "034a4adafdf61b13b72fb325630e3706d635802dfb0933b96cb713f1958a540c"
    },
    "summary_1l": "Go package ratelimit",
    "qa_terms": "ratelimit, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 20,
      "footer": 0,
      "total": 20
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.062778+00:00",
    "v": 3
  },
  {
    "chunk_id": "034a4adafdf61b13b72fb325630e3706d635802dfb0933b96cb713f1958a540c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 20,
    "end_line": 25,
    "ast_path": "go:type:limiter (interface)",
    "text": "package ratelimit\nlimiter interface {\nPeek(string) (int64, error)\nAcquireN(string, int64) (int64, error)\nAcquire(string) (int64, error)\nReset(string) error\n}",
    "header_context": "package ratelimit",
    "core": "limiter interface {\nPeek(string) (int64, error)\nAcquireN(string, int64) (int64, error)\nAcquire(string) (int64, error)\nReset(string) error\n}",
    "footer_context": "",
    "symbols_defined": [
      "limiter"
    ],
    "symbols_referenced": [
      "AcquireN",
      "Peek",
      "Acquire",
      "error",
      "Reset"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1a81755f6cdd399df034eb5cb7207369c29d7c206eb18a657b69fd2a558f59ae",
      "next": "ee3ae71445c40b0b355fcc8d796959713c206884c6509f11071791632e232c6f"
    },
    "summary_1l": "Go interface limiter for weather forecasting",
    "qa_terms": "limiter, interface, foreca, weather, proxy",
    "token_counts": {
      "header": 4,
      "core": 44,
      "footer": 0,
      "total": 49
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.062958+00:00",
    "v": 3
  },
  {
    "chunk_id": "ee3ae71445c40b0b355fcc8d796959713c206884c6509f11071791632e232c6f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 26,
    "end_line": 30,
    "ast_path": "go:type:storage (interface)",
    "text": "package ratelimit\nimport \"time\"\nstorage interface {\nGet(string) (*TokenBucket, error)\nSet(string, *TokenBucket, time.Duration) error\nDelete(string) error\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "storage interface {\nGet(string) (*TokenBucket, error)\nSet(string, *TokenBucket, time.Duration) error\nDelete(string) error\n}",
    "footer_context": "",
    "symbols_defined": [
      "storage"
    ],
    "symbols_referenced": [
      "time.Duration",
      "Delete",
      "TokenBucket",
      "Get",
      "Set",
      "error"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "034a4adafdf61b13b72fb325630e3706d635802dfb0933b96cb713f1958a540c",
      "next": "1a1390fd8f8b5ac6f9661c4bbbc120b321a20dd605af7e6e4707f5b1cfd8be8a"
    },
    "summary_1l": "Go interface storage for weather forecasting",
    "qa_terms": "storage, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 30,
      "footer": 0,
      "total": 39
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.063083+00:00",
    "v": 3
  },
  {
    "chunk_id": "1a1390fd8f8b5ac6f9661c4bbbc120b321a20dd605af7e6e4707f5b1cfd8be8a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 33,
    "end_line": 39,
    "ast_path": "go:type:SingleThreadLimiter (struct)",
    "text": "package ratelimit\nimport \"time\"\ntype SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "type SingleThreadLimiter struct {\n\tstorage  storage\n\treqChan  chan request\n\tstopChan chan bool\n\tlimit    int64\n\tduration time.Duration\n}",
    "footer_context": "",
    "symbols_defined": [
      "SingleThreadLimiter"
    ],
    "symbols_referenced": [
      "storage",
      "time.Duration",
      "request"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "ee3ae71445c40b0b355fcc8d796959713c206884c6509f11071791632e232c6f",
      "next": "3f377fb8b137637a12eb92f573904e2fb61aefb606cb363339b5230021a4d96a"
    },
    "summary_1l": "Go struct SingleThreadLimiter for weather forecasting",
    "qa_terms": "SingleThreadLimiter, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 34,
      "footer": 0,
      "total": 43
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.063239+00:00",
    "v": 3
  },
  {
    "chunk_id": "3f377fb8b137637a12eb92f573904e2fb61aefb606cb363339b5230021a4d96a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 41,
    "end_line": 43,
    "ast_path": "go:function:",
    "text": "package ratelimit\nimport \"time\"\nfunc NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "func NewSingleThreadLimiter(limit int64, duration time.Duration, storage storage) *SingleThreadLimiter {\n\treturn &SingleThreadLimiter{storage, make(chan request), make(chan bool), limit, duration}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewSingleThreadLimiter",
      "time.Duration",
      "request",
      "storage",
      "SingleThreadLimiter"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "1a1390fd8f8b5ac6f9661c4bbbc120b321a20dd605af7e6e4707f5b1cfd8be8a",
      "next": "7d06a98fe8fa2a4bd2f900f9c1c807f6f452cb34678437478a610111a865ace6"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 45,
      "footer": 0,
      "total": 54
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.063519+00:00",
    "v": 3
  },
  {
    "chunk_id": "7d06a98fe8fa2a4bd2f900f9c1c807f6f452cb34678437478a610111a865ace6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 45,
    "end_line": 47,
    "ast_path": "go:method:(l *SingleThreadLimiter).Start",
    "text": "package ratelimit\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}",
    "header_context": "package ratelimit\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) Start() {\n\tgo l.serve()\n}",
    "footer_context": "",
    "symbols_defined": [
      "Start"
    ],
    "symbols_referenced": [
      "SingleThreadLimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3f377fb8b137637a12eb92f573904e2fb61aefb606cb363339b5230021a4d96a",
      "next": "a9b80b9d1353a1e16431b976197dc36bb71a436eaf87741e8d975b10ff959a71"
    },
    "summary_1l": "Go method Start on l *SingleThreadLimiter for the Foreca proxy",
    "qa_terms": "Start, foreca, l SingleThreadLimiter, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 18,
      "footer": 0,
      "total": 33
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.063884+00:00",
    "v": 3
  },
  {
    "chunk_id": "a9b80b9d1353a1e16431b976197dc36bb71a436eaf87741e8d975b10ff959a71",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 49,
    "end_line": 51,
    "ast_path": "go:method:(l *SingleThreadLimiter).Stop",
    "text": "package ratelimit\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}",
    "header_context": "package ratelimit\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) Stop() {\n\tl.stopChan <- true\n}",
    "footer_context": "",
    "symbols_defined": [
      "Stop"
    ],
    "symbols_referenced": [
      "SingleThreadLimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7d06a98fe8fa2a4bd2f900f9c1c807f6f452cb34678437478a610111a865ace6",
      "next": "3b4f4f611b5577a69971ed0da08e153dfecbea8d72a349b297f7671cb3d2ef5c"
    },
    "summary_1l": "Go method Stop on l *SingleThreadLimiter for the Foreca proxy",
    "qa_terms": "Stop, foreca, l SingleThreadLimiter, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 19,
      "footer": 0,
      "total": 34
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.064209+00:00",
    "v": 3
  },
  {
    "chunk_id": "3b4f4f611b5577a69971ed0da08e153dfecbea8d72a349b297f7671cb3d2ef5c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 53,
    "end_line": 72,
    "ast_path": "go:method:(l *SingleThreadLimiter).AcquireN",
    "text": "package ratelimit\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}",
    "header_context": "package ratelimit\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) AcquireN(key string, count int64) (int64, error) {\n\n\terr := checkAcquireArgs(key, count, l.limit, l.duration)\n\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treq := request{\n\t\tACQUIRE,\n\t\tkey,\n\t\tcount,\n\t\tl.limit,\n\t\tl.duration,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}",
    "footer_context": "",
    "symbols_defined": [
      "AcquireN"
    ],
    "symbols_referenced": [
      "err",
      "req",
      "response",
      "ACQUIRE",
      "SingleThreadLimiter",
      "error",
      "duration"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a9b80b9d1353a1e16431b976197dc36bb71a436eaf87741e8d975b10ff959a71",
      "next": "d36a6776279a84facdc467882ab28db879e4c058b189f0302798b8434e640cc6"
    },
    "summary_1l": "Go method AcquireN on l *SingleThreadLimiter for the Foreca proxy",
    "qa_terms": "AcquireN, foreca, l SingleThreadLimiter, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 106,
      "footer": 0,
      "total": 121
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.064597+00:00",
    "v": 3
  },
  {
    "chunk_id": "d36a6776279a84facdc467882ab28db879e4c058b189f0302798b8434e640cc6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 74,
    "end_line": 76,
    "ast_path": "go:method:(l *SingleThreadLimiter).Acquire",
    "text": "package ratelimit\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}",
    "header_context": "package ratelimit\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) Acquire(key string) (int64, error) {\n\treturn l.AcquireN(key, 1)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Acquire"
    ],
    "symbols_referenced": [
      "AcquireN",
      "error",
      "SingleThreadLimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3b4f4f611b5577a69971ed0da08e153dfecbea8d72a349b297f7671cb3d2ef5c",
      "next": "ae9add8ccf2214d41e21c409573f345609eb83eec8fec95ed3934e9cef295000"
    },
    "summary_1l": "Go method Acquire on l *SingleThreadLimiter for the Foreca proxy",
    "qa_terms": "Acquire, foreca, l SingleThreadLimiter, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 32,
      "footer": 0,
      "total": 47
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.064795+00:00",
    "v": 3
  },
  {
    "chunk_id": "ae9add8ccf2214d41e21c409573f345609eb83eec8fec95ed3934e9cef295000",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 78,
    "end_line": 90,
    "ast_path": "go:method:(l *SingleThreadLimiter).Peek",
    "text": "package ratelimit\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}",
    "header_context": "package ratelimit\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) Peek(key string) (int64, error) {\n\treq := request{\n\t\tPEEK,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.used, res.err\n}",
    "footer_context": "",
    "symbols_defined": [
      "Peek"
    ],
    "symbols_referenced": [
      "req",
      "response",
      "SingleThreadLimiter",
      "error",
      "PEEK"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d36a6776279a84facdc467882ab28db879e4c058b189f0302798b8434e640cc6",
      "next": "bf2a57037a707426970bb4d462bbd6d848953a16f3ac9f050fa517c918d31f0b"
    },
    "summary_1l": "Go method Peek on l *SingleThreadLimiter for the Foreca proxy",
    "qa_terms": "Peek, foreca, l SingleThreadLimiter, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 71,
      "footer": 0,
      "total": 86
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.065179+00:00",
    "v": 3
  },
  {
    "chunk_id": "bf2a57037a707426970bb4d462bbd6d848953a16f3ac9f050fa517c918d31f0b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 92,
    "end_line": 104,
    "ast_path": "go:method:(l *SingleThreadLimiter).Reset",
    "text": "package ratelimit\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.err\n}",
    "header_context": "package ratelimit\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) Reset(key string) error {\n\treq := request{\n\t\tRESET,\n\t\tkey,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tmake(chan response),\n\t}\n\tl.reqChan <- req\n\tres := <-req.response\n\treturn res.err\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "req",
      "response",
      "SingleThreadLimiter",
      "RESET",
      "error"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ae9add8ccf2214d41e21c409573f345609eb83eec8fec95ed3934e9cef295000",
      "next": "c93a96ec3fd71736f1fba67aaf967a1b7567fcf928e5fb0542b2250f6b595bea"
    },
    "summary_1l": "Go method Reset on l *SingleThreadLimiter for the Foreca proxy",
    "qa_terms": "Reset, foreca, l SingleThreadLimiter, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 62,
      "footer": 0,
      "total": 77
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.065642+00:00",
    "v": 3
  },
  {
    "chunk_id": "c93a96ec3fd71736f1fba67aaf967a1b7567fcf928e5fb0542b2250f6b595bea",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 106,
    "end_line": 118,
    "ast_path": "go:method:(*l SingleThreadLimiter).serve#part1_block1",
    "text": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter\nfunc (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}",
    "header_context": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter",
    "core": "func (l *SingleThreadLimiter) serve() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.stopChan:\n\t\t\treturn\n\t\tcase req := <-l.reqChan:\n\t\t\tswitch req.action {\n\t\t\tcase PEEK:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}",
    "footer_context": "",
    "symbols_defined": [
      "serve"
    ],
    "symbols_referenced": [
      "return",
      "continue",
      "Get",
      "SingleThreadLimiter",
      "key",
      "PEEK"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "bf2a57037a707426970bb4d462bbd6d848953a16f3ac9f050fa517c918d31f0b",
      "next": "750854fd7cfafb2af3b6cf843bf3e2acdd69db61023785de95acaffe74547216"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "l SingleThreadLimiter, serve",
    "token_counts": {
      "header": 23,
      "core": 80,
      "footer": 0,
      "total": 104
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.066863+00:00",
    "v": 3
  },
  {
    "chunk_id": "750854fd7cfafb2af3b6cf843bf3e2acdd69db61023785de95acaffe74547216",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 119,
    "end_line": 138,
    "ast_path": "go:method:(*l SingleThreadLimiter).serve#part2_block2",
    "text": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter\n\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n",
    "header_context": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter",
    "core": "\t\t\t\tif bucket == nil {\n\t\t\t\t\treq.response <- response{0, ErrNotFound}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tnow := time.Now()\n\t\t\t\treq.response <- response{usage(bucket.GetAdjustedUsage(now)), nil}\n\t\t\tcase RESET:\n\t\t\t\terr := l.storage.Delete(req.key)\n\t\t\t\treq.response <- response{0, err}\n\t\t\tcase ACQUIRE:\n\t\t\t\tbucket, err := l.storage.Get(req.key)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tcount, limit := float64(req.count), float64(req.limit)\n\t\t\t\tduration := req.duration\n",
    "footer_context": "",
    "symbols_defined": [
      "serve"
    ],
    "symbols_referenced": [
      "GetAdjustedUsage",
      "continue",
      "Delete",
      "Now",
      "Get",
      "ACQUIRE",
      "limit",
      "count",
      "RESET",
      "now",
      "key"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c93a96ec3fd71736f1fba67aaf967a1b7567fcf928e5fb0542b2250f6b595bea",
      "next": "47809a39f67a998f7cc5e84bcc1fb40a37e6347dc2ac5eb505ab8587914a1e1a"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "l SingleThreadLimiter, serve",
    "token_counts": {
      "header": 23,
      "core": 127,
      "footer": 0,
      "total": 151
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067373+00:00",
    "v": 3
  },
  {
    "chunk_id": "47809a39f67a998f7cc5e84bcc1fb40a37e6347dc2ac5eb505ab8587914a1e1a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 139,
    "end_line": 149,
    "ast_path": "go:method:(*l SingleThreadLimiter).serve#part3_block3",
    "text": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter\n\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}",
    "header_context": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter",
    "core": "\t\t\t\tif bucket == nil {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t} else if bucket.Limit != limit || bucket.Duration != duration {\n\t\t\t\t\tbucket = NewTokenBucket(limit, duration)\n\t\t\t\t}\n\n\t\t\t\terr = bucket.Consume(count)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{usage(bucket.Used), err}\n\t\t\t\t\tcontinue\n\t\t\t\t}",
    "footer_context": "",
    "symbols_defined": [
      "serve"
    ],
    "symbols_referenced": [
      "continue",
      "NewTokenBucket",
      "Used",
      "count",
      "Consume",
      "duration"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "750854fd7cfafb2af3b6cf843bf3e2acdd69db61023785de95acaffe74547216",
      "next": "5406a8e700910583229e212770d5128cf51e793df6c0b22f8caf5b28da948dea"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "l SingleThreadLimiter, serve",
    "token_counts": {
      "header": 23,
      "core": 80,
      "footer": 0,
      "total": 104
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067693+00:00",
    "v": 3
  },
  {
    "chunk_id": "5406a8e700910583229e212770d5128cf51e793df6c0b22f8caf5b28da948dea",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 150,
    "end_line": 162,
    "ast_path": "go:method:(*l SingleThreadLimiter).serve#part4_block4",
    "text": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter\n\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treq.response <- response{usage(bucket.Used), nil}\n\t\t\tdefault:\n\t\t\t\treq.response <- response{0, errors.New(\"undefined method\")}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}",
    "header_context": "package ratelimit\nimport (\n\t\"errors\"\n\t\"time\"\n)\n// receiver: l *SingleThreadLimiter",
    "core": "\t\t\t\terr = l.storage.Set(req.key, bucket, duration)\n\t\t\t\tif err != nil {\n\t\t\t\t\treq.response <- response{0, err}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treq.response <- response{usage(bucket.Used), nil}\n\t\t\tdefault:\n\t\t\t\treq.response <- response{0, errors.New(\"undefined method\")}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "serve"
    ],
    "symbols_referenced": [
      "continue",
      "Used",
      "New",
      "Set",
      "error",
      "duration"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "47809a39f67a998f7cc5e84bcc1fb40a37e6347dc2ac5eb505ab8587914a1e1a",
      "next": "dc1a84e11c27a61291dcca40a847fdda7c1fc21b1e9d38b3b03a6425ef921211"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "l SingleThreadLimiter, serve",
    "token_counts": {
      "header": 23,
      "core": 77,
      "footer": 0,
      "total": 101
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.068025+00:00",
    "v": 3
  },
  {
    "chunk_id": "dc1a84e11c27a61291dcca40a847fdda7c1fc21b1e9d38b3b03a6425ef921211",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 164,
    "end_line": 178,
    "ast_path": "go:function:",
    "text": "package ratelimit\nimport (\n\t\"strings\"\n\t\"time\"\n)\nfunc checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}",
    "header_context": "package ratelimit\nimport (\n\t\"strings\"\n\t\"time\"\n)",
    "core": "func checkAcquireArgs(key string, count, limit int64, duration time.Duration) error {\n\tswitch true {\n\tcase len(strings.TrimSpace(key)) == 0:\n\t\treturn ErrKeyEmpty\n\tcase count <= 0:\n\t\treturn ErrCountZero\n\tcase limit <= 0:\n\t\treturn ErrLimitZero\n\tcase count > limit:\n\t\treturn ErrCountLimit\n\tcase duration == 0:\n\t\treturn ErrZeroDuration\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "error",
      "strings.TrimSpace",
      "time.Duration",
      "key"
    ],
    "imports_used": [
      "time",
      "strings"
    ],
    "neighbors": {
      "prev": "5406a8e700910583229e212770d5128cf51e793df6c0b22f8caf5b28da948dea",
      "next": "dd87e4931a5a7e4202a4a6b44b1197cd030310bf847791874e5da49a677b7c09"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 92,
      "footer": 0,
      "total": 106
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.068577+00:00",
    "v": 3
  },
  {
    "chunk_id": "dd87e4931a5a7e4202a4a6b44b1197cd030310bf847791874e5da49a677b7c09",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 180,
    "end_line": 183,
    "ast_path": "go:type:response (struct)",
    "text": "package ratelimit\ntype response struct {\n\tused int64\n\terr  error\n}",
    "header_context": "package ratelimit",
    "core": "type response struct {\n\tused int64\n\terr  error\n}",
    "footer_context": "",
    "symbols_defined": [
      "response"
    ],
    "symbols_referenced": [
      "error"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "dc1a84e11c27a61291dcca40a847fdda7c1fc21b1e9d38b3b03a6425ef921211",
      "next": "5e151bfb3c89805857df63b7d30ae1ec088c6680d37bf0bfe94f98297ae148c3"
    },
    "summary_1l": "Go struct response for weather forecasting",
    "qa_terms": "response, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 4,
      "core": 14,
      "footer": 0,
      "total": 19
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.068747+00:00",
    "v": 3
  },
  {
    "chunk_id": "5e151bfb3c89805857df63b7d30ae1ec088c6680d37bf0bfe94f98297ae148c3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 191,
    "end_line": 198,
    "ast_path": "go:type:request (struct)",
    "text": "package ratelimit\nimport \"time\"\ntype request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}",
    "header_context": "package ratelimit\nimport \"time\"",
    "core": "type request struct {\n\taction   int\n\tkey      string\n\tcount    int64\n\tlimit    int64\n\tduration time.Duration\n\tresponse chan response\n}",
    "footer_context": "",
    "symbols_defined": [
      "request"
    ],
    "symbols_referenced": [
      "time.Duration",
      "response"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "dd87e4931a5a7e4202a4a6b44b1197cd030310bf847791874e5da49a677b7c09",
      "next": "9d8adf9fb16c13cd555dc19f9929639aad4a424a5149371fafccf948aa65d822"
    },
    "summary_1l": "Go struct request for weather forecasting",
    "qa_terms": "request, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 9,
      "core": 32,
      "footer": 0,
      "total": 41
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.068959+00:00",
    "v": 3
  },
  {
    "chunk_id": "9d8adf9fb16c13cd555dc19f9929639aad4a424a5149371fafccf948aa65d822",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter.go",
    "language": "go",
    "start_line": 200,
    "end_line": 202,
    "ast_path": "go:function:",
    "text": "package ratelimit\nimport \"math\"\nfunc usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}",
    "header_context": "package ratelimit\nimport \"math\"",
    "core": "func usage(f float64) int64 {\n\treturn int64(math.Ceil(f))\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "f",
      "math.Ceil"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "5e151bfb3c89805857df63b7d30ae1ec088c6680d37bf0bfe94f98297ae148c3",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 18,
      "footer": 0,
      "total": 27
    },
    "file_sha": "2f5ad39a9f227bdd8b1e5045cbbfe2706e6f1147ec7c139ea227f219ec25aee3",
    "created_at": "2025-10-07T09:26:57.069274+00:00",
    "v": 3
  },
  {
    "chunk_id": "c1c030d67700dd99f6bd0abbeef8f39692c586aed7cd38dd5396a8d99384caa6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 10,
    "end_line": 12,
    "ast_path": "go:file_header",
    "text": "package mocks\n\nimport (",
    "header_context": "",
    "core": "package mocks\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "reflect",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": null,
      "next": "1740dfb122b239d33bafa83e4a563135b3d756da0086ed54f067723c8b32654f"
    },
    "summary_1l": "Go package ",
    "qa_terms": ", foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 5,
      "footer": 0,
      "total": 5
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.064334+00:00",
    "v": 3
  },
  {
    "chunk_id": "1740dfb122b239d33bafa83e4a563135b3d756da0086ed54f067723c8b32654f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 21,
    "end_line": 24,
    "ast_path": "go:type:Mocklimiter (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type Mocklimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MocklimiterMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "Mocklimiter"
    ],
    "symbols_referenced": [
      "MocklimiterMockRecorder",
      "gomock.Controller"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "c1c030d67700dd99f6bd0abbeef8f39692c586aed7cd38dd5396a8d99384caa6",
      "next": "5ca603cd31199070e29a2b9e461e716a6b8287e9f9e8ebbe17aa12d2208be430"
    },
    "summary_1l": "Go struct Mocklimiter for weather forecasting",
    "qa_terms": "Mocklimiter, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 23,
      "footer": 0,
      "total": 37
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.064543+00:00",
    "v": 3
  },
  {
    "chunk_id": "5ca603cd31199070e29a2b9e461e716a6b8287e9f9e8ebbe17aa12d2208be430",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 27,
    "end_line": 29,
    "ast_path": "go:type:MocklimiterMockRecorder (struct)",
    "text": "package main\ntype MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}",
    "header_context": "package main",
    "core": "type MocklimiterMockRecorder struct {\n\tmock *Mocklimiter\n}",
    "footer_context": "",
    "symbols_defined": [
      "MocklimiterMockRecorder"
    ],
    "symbols_referenced": [
      "Mocklimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1740dfb122b239d33bafa83e4a563135b3d756da0086ed54f067723c8b32654f",
      "next": "b180fea82e8f1f94cf456736cfe9de0aab0e0f105448494740c2bc3cf48309be"
    },
    "summary_1l": "Go struct MocklimiterMockRecorder for weather forecasting",
    "qa_terms": "MocklimiterMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 15,
      "footer": 0,
      "total": 18
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.064632+00:00",
    "v": 3
  },
  {
    "chunk_id": "b180fea82e8f1f94cf456736cfe9de0aab0e0f105448494740c2bc3cf48309be",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 32,
    "end_line": 36,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {\n\tmock := &Mocklimiter{ctrl: ctrl}\n\tmock.recorder = &MocklimiterMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "mock",
      "Mocklimiter",
      "gomock.Controller",
      "MocklimiterMockRecorder",
      "NewMocklimiter"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "5ca603cd31199070e29a2b9e461e716a6b8287e9f9e8ebbe17aa12d2208be430",
      "next": "a23173a7f50a71ec4406d955a9ed0c2e4aec9997cec787b8a0b62e3c1c924283"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 44,
      "footer": 0,
      "total": 58
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.064969+00:00",
    "v": 3
  },
  {
    "chunk_id": "a23173a7f50a71ec4406d955a9ed0c2e4aec9997cec787b8a0b62e3c1c924283",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 39,
    "end_line": 41,
    "ast_path": "go:method:(m *Mocklimiter).EXPECT",
    "text": "package main\n// receiver: m *Mocklimiter\nfunc (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *Mocklimiter",
    "core": "func (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MocklimiterMockRecorder",
      "Mocklimiter"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b180fea82e8f1f94cf456736cfe9de0aab0e0f105448494740c2bc3cf48309be",
      "next": "0ebfa114aef0ffc420ab7aebd753d4d279ec58f5ced11325a36e2b6863031746"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 11,
      "core": 23,
      "footer": 0,
      "total": 35
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.065137+00:00",
    "v": 3
  },
  {
    "chunk_id": "0ebfa114aef0ffc420ab7aebd753d4d279ec58f5ced11325a36e2b6863031746",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 44,
    "end_line": 50,
    "ast_path": "go:method:(m *Mocklimiter).Acquire",
    "text": "package main\n// receiver: m *Mocklimiter\nfunc (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\n// receiver: m *Mocklimiter",
    "core": "func (m *Mocklimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Acquire"
    ],
    "symbols_referenced": [
      "ret1",
      "arg0",
      "Helper",
      "error",
      "Mocklimiter",
      "Call"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a23173a7f50a71ec4406d955a9ed0c2e4aec9997cec787b8a0b62e3c1c924283",
      "next": "c22fe1adedf6c839e4e3780a58bbbcba3f0d9fdc335846ca2e358517dcc29a94"
    },
    "summary_1l": "Go method Acquire on m *Mocklimiter for the Foreca proxy",
    "qa_terms": "Acquire, foreca, m Mocklimiter, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 73,
      "footer": 0,
      "total": 85
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.065407+00:00",
    "v": 3
  },
  {
    "chunk_id": "c22fe1adedf6c839e4e3780a58bbbcba3f0d9fdc335846ca2e358517dcc29a94",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 53,
    "end_line": 56,
    "ast_path": "go:method:(mr *MocklimiterMockRecorder).Acquire",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder\nfunc (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder",
    "core": "func (mr *MocklimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*Mocklimiter)(nil).Acquire), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Acquire"
    ],
    "symbols_referenced": [
      "arg0",
      "reflect.TypeOf",
      "any",
      "Helper",
      "Mocklimiter",
      "RecordCallWithMethodType",
      "gomock.Call",
      "MocklimiterMockRecorder"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "0ebfa114aef0ffc420ab7aebd753d4d279ec58f5ced11325a36e2b6863031746",
      "next": "197cd4d9f9c371e29fa29e405aace9de558d4d0b63a97a07b277f4e3b174f15a"
    },
    "summary_1l": "Go method Acquire on mr *MocklimiterMockRecorder for the Foreca proxy",
    "qa_terms": "Acquire, foreca, mr MocklimiterMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 61,
      "footer": 0,
      "total": 92
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.065707+00:00",
    "v": 3
  },
  {
    "chunk_id": "197cd4d9f9c371e29fa29e405aace9de558d4d0b63a97a07b277f4e3b174f15a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 59,
    "end_line": 65,
    "ast_path": "go:method:(m *Mocklimiter).AcquireN",
    "text": "package main\n// receiver: m *Mocklimiter\nfunc (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\n// receiver: m *Mocklimiter",
    "core": "func (m *Mocklimiter) AcquireN(arg0 string, arg1 int64) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AcquireN\", arg0, arg1)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "AcquireN"
    ],
    "symbols_referenced": [
      "ret1",
      "arg1",
      "Helper",
      "error",
      "Mocklimiter",
      "Call"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c22fe1adedf6c839e4e3780a58bbbcba3f0d9fdc335846ca2e358517dcc29a94",
      "next": "f03162f073cfafeac66aecd5003e3fbad45049343f62e876923d2da8ad1fb26a"
    },
    "summary_1l": "Go method AcquireN on m *Mocklimiter for the Foreca proxy",
    "qa_terms": "AcquireN, foreca, m Mocklimiter, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 83,
      "footer": 0,
      "total": 95
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.065983+00:00",
    "v": 3
  },
  {
    "chunk_id": "f03162f073cfafeac66aecd5003e3fbad45049343f62e876923d2da8ad1fb26a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 68,
    "end_line": 71,
    "ast_path": "go:method:(mr *MocklimiterMockRecorder).AcquireN",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder\nfunc (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder",
    "core": "func (mr *MocklimiterMockRecorder) AcquireN(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AcquireN\", reflect.TypeOf((*Mocklimiter)(nil).AcquireN), arg0, arg1)\n}",
    "footer_context": "",
    "symbols_defined": [
      "AcquireN"
    ],
    "symbols_referenced": [
      "reflect.TypeOf",
      "any",
      "arg1",
      "Helper",
      "Mocklimiter",
      "RecordCallWithMethodType",
      "gomock.Call",
      "MocklimiterMockRecorder"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "197cd4d9f9c371e29fa29e405aace9de558d4d0b63a97a07b277f4e3b174f15a",
      "next": "9262e2ddb13450a3679577c0b0483c52c30a65932d135e9b47187dcfca8714ac"
    },
    "summary_1l": "Go method AcquireN on mr *MocklimiterMockRecorder for the Foreca proxy",
    "qa_terms": "AcquireN, foreca, mr MocklimiterMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 70,
      "footer": 0,
      "total": 101
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.066276+00:00",
    "v": 3
  },
  {
    "chunk_id": "9262e2ddb13450a3679577c0b0483c52c30a65932d135e9b47187dcfca8714ac",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 74,
    "end_line": 80,
    "ast_path": "go:method:(m *Mocklimiter).Peek",
    "text": "package main\n// receiver: m *Mocklimiter\nfunc (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\n// receiver: m *Mocklimiter",
    "core": "func (m *Mocklimiter) Peek(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Peek\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Peek"
    ],
    "symbols_referenced": [
      "ret1",
      "arg0",
      "Helper",
      "error",
      "Mocklimiter",
      "Call"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f03162f073cfafeac66aecd5003e3fbad45049343f62e876923d2da8ad1fb26a",
      "next": "917ffe4bc12dc0f92fad756f5e01c2f0f5ed7d87a826c1906af84e6c2741a1f7"
    },
    "summary_1l": "Go method Peek on m *Mocklimiter for the Foreca proxy",
    "qa_terms": "Peek, foreca, m Mocklimiter, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 72,
      "footer": 0,
      "total": 84
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.066526+00:00",
    "v": 3
  },
  {
    "chunk_id": "917ffe4bc12dc0f92fad756f5e01c2f0f5ed7d87a826c1906af84e6c2741a1f7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 83,
    "end_line": 86,
    "ast_path": "go:method:(mr *MocklimiterMockRecorder).Peek",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder\nfunc (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder",
    "core": "func (mr *MocklimiterMockRecorder) Peek(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Peek\", reflect.TypeOf((*Mocklimiter)(nil).Peek), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Peek"
    ],
    "symbols_referenced": [
      "arg0",
      "reflect.TypeOf",
      "any",
      "Helper",
      "Mocklimiter",
      "RecordCallWithMethodType",
      "gomock.Call",
      "MocklimiterMockRecorder"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "9262e2ddb13450a3679577c0b0483c52c30a65932d135e9b47187dcfca8714ac",
      "next": "9afcedd16bca3ad9f425815b176320cd8716fbae2dd71cbeac390129eca78a82"
    },
    "summary_1l": "Go method Peek on mr *MocklimiterMockRecorder for the Foreca proxy",
    "qa_terms": "Peek, foreca, mr MocklimiterMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 60,
      "footer": 0,
      "total": 91
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.066804+00:00",
    "v": 3
  },
  {
    "chunk_id": "9afcedd16bca3ad9f425815b176320cd8716fbae2dd71cbeac390129eca78a82",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 89,
    "end_line": 94,
    "ast_path": "go:method:(m *Mocklimiter).Reset",
    "text": "package main\n// receiver: m *Mocklimiter\nfunc (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "header_context": "package main\n// receiver: m *Mocklimiter",
    "core": "func (m *Mocklimiter) Reset(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Reset\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "ret0",
      "arg0",
      "Helper",
      "error",
      "Mocklimiter",
      "Call"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "917ffe4bc12dc0f92fad756f5e01c2f0f5ed7d87a826c1906af84e6c2741a1f7",
      "next": "bd5ba5e57e6909935fe2921fd092d93a5a12f6ab4b6a8c2d133ce89d6eef4edd"
    },
    "summary_1l": "Go method Reset on m *Mocklimiter for the Foreca proxy",
    "qa_terms": "Reset, foreca, m Mocklimiter, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 50,
      "footer": 0,
      "total": 62
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.067024+00:00",
    "v": 3
  },
  {
    "chunk_id": "bd5ba5e57e6909935fe2921fd092d93a5a12f6ab4b6a8c2d133ce89d6eef4edd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 97,
    "end_line": 100,
    "ast_path": "go:method:(mr *MocklimiterMockRecorder).Reset",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder\nfunc (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MocklimiterMockRecorder",
    "core": "func (mr *MocklimiterMockRecorder) Reset(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Reset\", reflect.TypeOf((*Mocklimiter)(nil).Reset), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "arg0",
      "reflect.TypeOf",
      "any",
      "Helper",
      "Mocklimiter",
      "RecordCallWithMethodType",
      "gomock.Call",
      "MocklimiterMockRecorder"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "9afcedd16bca3ad9f425815b176320cd8716fbae2dd71cbeac390129eca78a82",
      "next": "31d1adc2a37f4020780f72941e66f3827619d0c89a31e69f252797724f3ed308"
    },
    "summary_1l": "Go method Reset on mr *MocklimiterMockRecorder for the Foreca proxy",
    "qa_terms": "Reset, foreca, mr MocklimiterMockRecorder, proxy, weather",
    "token_counts": {
      "header": 30,
      "core": 58,
      "footer": 0,
      "total": 89
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.067293+00:00",
    "v": 3
  },
  {
    "chunk_id": "31d1adc2a37f4020780f72941e66f3827619d0c89a31e69f252797724f3ed308",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 103,
    "end_line": 106,
    "ast_path": "go:type:Mockstorage (struct)",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\ntype Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "type Mockstorage struct {\n\tctrl     *gomock.Controller\n\trecorder *MockstorageMockRecorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "Mockstorage"
    ],
    "symbols_referenced": [
      "MockstorageMockRecorder",
      "gomock.Controller"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "bd5ba5e57e6909935fe2921fd092d93a5a12f6ab4b6a8c2d133ce89d6eef4edd",
      "next": "d34dbd715d03d0b9ff66e910655dbd066ae14b4ee625b306e44558ad8a084608"
    },
    "summary_1l": "Go struct Mockstorage for weather forecasting",
    "qa_terms": "Mockstorage, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 14,
      "core": 21,
      "footer": 0,
      "total": 35
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.067414+00:00",
    "v": 3
  },
  {
    "chunk_id": "d34dbd715d03d0b9ff66e910655dbd066ae14b4ee625b306e44558ad8a084608",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 109,
    "end_line": 111,
    "ast_path": "go:type:MockstorageMockRecorder (struct)",
    "text": "package main\ntype MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}",
    "header_context": "package main",
    "core": "type MockstorageMockRecorder struct {\n\tmock *Mockstorage\n}",
    "footer_context": "",
    "symbols_defined": [
      "MockstorageMockRecorder"
    ],
    "symbols_referenced": [
      "Mockstorage"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "31d1adc2a37f4020780f72941e66f3827619d0c89a31e69f252797724f3ed308",
      "next": "ab6e794b6921f3b8c5be8aa07cbde2f0134b2239ff1ddf9d83cf37a31cd412be"
    },
    "summary_1l": "Go struct MockstorageMockRecorder for weather forecasting",
    "qa_terms": "MockstorageMockRecorder, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 13,
      "footer": 0,
      "total": 16
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.067485+00:00",
    "v": 3
  },
  {
    "chunk_id": "ab6e794b6921f3b8c5be8aa07cbde2f0134b2239ff1ddf9d83cf37a31cd412be",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 114,
    "end_line": 118,
    "ast_path": "go:function:",
    "text": "package main\nimport \"go.uber.org/mock/gomock\"\nfunc NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}",
    "header_context": "package main\nimport \"go.uber.org/mock/gomock\"",
    "core": "func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {\n\tmock := &Mockstorage{ctrl: ctrl}\n\tmock.recorder = &MockstorageMockRecorder{mock}\n\treturn mock\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "mock",
      "gomock.Controller",
      "MockstorageMockRecorder",
      "NewMockstorage",
      "Mockstorage"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "d34dbd715d03d0b9ff66e910655dbd066ae14b4ee625b306e44558ad8a084608",
      "next": "825000162c14e1063fe17bd62a65809197d4fa337222b35518a8a4b9496d5776"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 40,
      "footer": 0,
      "total": 54
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.067688+00:00",
    "v": 3
  },
  {
    "chunk_id": "825000162c14e1063fe17bd62a65809197d4fa337222b35518a8a4b9496d5776",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 121,
    "end_line": 123,
    "ast_path": "go:method:(m *Mockstorage).EXPECT",
    "text": "package main\n// receiver: m *Mockstorage\nfunc (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}",
    "header_context": "package main\n// receiver: m *Mockstorage",
    "core": "func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {\n\treturn m.recorder\n}",
    "footer_context": "",
    "symbols_defined": [
      "EXPECT"
    ],
    "symbols_referenced": [
      "MockstorageMockRecorder",
      "Mockstorage"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ab6e794b6921f3b8c5be8aa07cbde2f0134b2239ff1ddf9d83cf37a31cd412be",
      "next": "212afa07fe807b8438237e397dfbb5b32143163f42099ed26273fc6657a22c98"
    },
    "summary_1l": "Returns the gomock recorder to define expectations on MockhttpClient.",
    "qa_terms": "EXPECT, expectations, foreca, gomock, mock, proxy, recorder, weather",
    "token_counts": {
      "header": 10,
      "core": 21,
      "footer": 0,
      "total": 32
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.067835+00:00",
    "v": 3
  },
  {
    "chunk_id": "212afa07fe807b8438237e397dfbb5b32143163f42099ed26273fc6657a22c98",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 126,
    "end_line": 131,
    "ast_path": "go:method:(m *Mockstorage).Delete",
    "text": "package main\n// receiver: m *Mockstorage\nfunc (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "header_context": "package main\n// receiver: m *Mockstorage",
    "core": "func (m *Mockstorage) Delete(arg0 string) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Delete\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "footer_context": "",
    "symbols_defined": [
      "Delete"
    ],
    "symbols_referenced": [
      "ret0",
      "arg0",
      "error",
      "Helper",
      "Call",
      "Mockstorage"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "825000162c14e1063fe17bd62a65809197d4fa337222b35518a8a4b9496d5776",
      "next": "b924d7dd5618a22c458650f943713e50426168a1e325a4d83c59b56153e9d1f5"
    },
    "summary_1l": "Go method Delete on m *Mockstorage for the Foreca proxy",
    "qa_terms": "Delete, foreca, m Mockstorage, proxy, weather",
    "token_counts": {
      "header": 10,
      "core": 49,
      "footer": 0,
      "total": 60
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.068042+00:00",
    "v": 3
  },
  {
    "chunk_id": "b924d7dd5618a22c458650f943713e50426168a1e325a4d83c59b56153e9d1f5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 134,
    "end_line": 137,
    "ast_path": "go:method:(mr *MockstorageMockRecorder).Delete",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockstorageMockRecorder\nfunc (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockstorageMockRecorder",
    "core": "func (mr *MockstorageMockRecorder) Delete(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Delete\", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Delete"
    ],
    "symbols_referenced": [
      "arg0",
      "reflect.TypeOf",
      "MockstorageMockRecorder",
      "Helper",
      "any",
      "RecordCallWithMethodType",
      "gomock.Call",
      "Mockstorage"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "212afa07fe807b8438237e397dfbb5b32143163f42099ed26273fc6657a22c98",
      "next": "a42f375c95839fa679ac05a4b8f00d74036d5a17722707f0bf43fb8a31f35959"
    },
    "summary_1l": "Go method Delete on mr *MockstorageMockRecorder for the Foreca proxy",
    "qa_terms": "Delete, foreca, mr MockstorageMockRecorder, proxy, weather",
    "token_counts": {
      "header": 29,
      "core": 56,
      "footer": 0,
      "total": 86
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.068316+00:00",
    "v": 3
  },
  {
    "chunk_id": "a42f375c95839fa679ac05a4b8f00d74036d5a17722707f0bf43fb8a31f35959",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 140,
    "end_line": 146,
    "ast_path": "go:method:(m *Mockstorage).Get",
    "text": "package main\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n// receiver: m *Mockstorage\nfunc (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "header_context": "package main\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n// receiver: m *Mockstorage",
    "core": "func (m *Mockstorage) Get(arg0 string) (*ratelimit.TokenBucket, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(*ratelimit.TokenBucket)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "ret1",
      "arg0",
      "Mockstorage",
      "error",
      "Helper",
      "Call",
      "ratelimit.TokenBucket"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit"
    ],
    "neighbors": {
      "prev": "b924d7dd5618a22c458650f943713e50426168a1e325a4d83c59b56153e9d1f5",
      "next": "91278bd7e1bde7dbd4bbfd609869c2cf318206353ca89bfcae469d2d159e72e6"
    },
    "summary_1l": "Go method Get on m *Mockstorage for the Foreca proxy",
    "qa_terms": "Get, foreca, m Mockstorage, proxy, throttled, weather",
    "token_counts": {
      "header": 28,
      "core": 76,
      "footer": 0,
      "total": 105
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.068617+00:00",
    "v": 3
  },
  {
    "chunk_id": "91278bd7e1bde7dbd4bbfd609869c2cf318206353ca89bfcae469d2d159e72e6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 149,
    "end_line": 152,
    "ast_path": "go:method:(mr *MockstorageMockRecorder).Get",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockstorageMockRecorder\nfunc (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockstorageMockRecorder",
    "core": "func (mr *MockstorageMockRecorder) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockstorage)(nil).Get), arg0)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Get"
    ],
    "symbols_referenced": [
      "arg0",
      "reflect.TypeOf",
      "MockstorageMockRecorder",
      "Helper",
      "any",
      "RecordCallWithMethodType",
      "gomock.Call",
      "Mockstorage"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "a42f375c95839fa679ac05a4b8f00d74036d5a17722707f0bf43fb8a31f35959",
      "next": "414695acaeebe6b47c42f017c477d6601dd1e8c6db1b3156f9ecd40967112429"
    },
    "summary_1l": "Go method Get on mr *MockstorageMockRecorder for the Foreca proxy",
    "qa_terms": "Get, foreca, mr MockstorageMockRecorder, proxy, weather",
    "token_counts": {
      "header": 29,
      "core": 56,
      "footer": 0,
      "total": 86
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.068886+00:00",
    "v": 3
  },
  {
    "chunk_id": "414695acaeebe6b47c42f017c477d6601dd1e8c6db1b3156f9ecd40967112429",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 155,
    "end_line": 160,
    "ast_path": "go:method:(m *Mockstorage).Set",
    "text": "package main\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"time\"\n)\n// receiver: m *Mockstorage\nfunc (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "header_context": "package main\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"time\"\n)\n// receiver: m *Mockstorage",
    "core": "func (m *Mockstorage) Set(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", arg0, arg1, arg2)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "ret0",
      "arg2",
      "time.Duration",
      "Mockstorage",
      "error",
      "Helper",
      "Call",
      "ratelimit.TokenBucket"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit"
    ],
    "neighbors": {
      "prev": "91278bd7e1bde7dbd4bbfd609869c2cf318206353ca89bfcae469d2d159e72e6",
      "next": "5c58dd68146fc3790a0ea45078f9d1709b90e9e6a4d67893569151e41eadbed3"
    },
    "summary_1l": "Go method Set on m *Mockstorage for the Foreca proxy",
    "qa_terms": "Set, foreca, m Mockstorage, proxy, throttled, weather",
    "token_counts": {
      "header": 33,
      "core": 69,
      "footer": 0,
      "total": 103
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.069183+00:00",
    "v": 3
  },
  {
    "chunk_id": "5c58dd68146fc3790a0ea45078f9d1709b90e9e6a4d67893569151e41eadbed3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/mocks/limiter_mocks.go",
    "language": "go",
    "start_line": 163,
    "end_line": 166,
    "ast_path": "go:method:(mr *MockstorageMockRecorder).Set",
    "text": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockstorageMockRecorder\nfunc (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}",
    "header_context": "package main\nimport (\n\t\"go.uber.org/mock/gomock\"\n\t\"reflect\"\n)\n// receiver: mr *MockstorageMockRecorder",
    "core": "func (mr *MockstorageMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*Mockstorage)(nil).Set), arg0, arg1, arg2)\n}",
    "footer_context": "",
    "symbols_defined": [
      "Set"
    ],
    "symbols_referenced": [
      "arg2",
      "reflect.TypeOf",
      "MockstorageMockRecorder",
      "Helper",
      "any",
      "RecordCallWithMethodType",
      "gomock.Call",
      "Mockstorage"
    ],
    "imports_used": [
      "reflect",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "414695acaeebe6b47c42f017c477d6601dd1e8c6db1b3156f9ecd40967112429",
      "next": null
    },
    "summary_1l": "Go method Set on mr *MockstorageMockRecorder for the Foreca proxy",
    "qa_terms": "Set, foreca, mr MockstorageMockRecorder, proxy, weather",
    "token_counts": {
      "header": 29,
      "core": 68,
      "footer": 0,
      "total": 98
    },
    "file_sha": "d5bdfce1c10066e813a5b7928b6052256717ed83922435e3ef5c8cbd4056a7ac",
    "created_at": "2025-10-07T09:26:57.069756+00:00",
    "v": 3
  },
  {
    "chunk_id": "175d5b798fe0490ca699caf6b59786b3cc6e28fbca8d728f82d20a5139ce7a52",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 1,
    "end_line": 10,
    "ast_path": "go:file_header",
    "text": "package ratelimit_test\n\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package ratelimit_test\n\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "go.uber.org/mock/gomock",
      "testing",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "7af9aa35ac4d58528f163e0f3354e66141e69d0d9a7623df65c5f7d38595fe1b"
    },
    "summary_1l": "Go package ratelimit_test",
    "qa_terms": "ratelimit_test, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 69,
      "footer": 0,
      "total": 69
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.060782+00:00",
    "v": 3
  },
  {
    "chunk_id": "7af9aa35ac4d58528f163e0f3354e66141e69d0d9a7623df65c5f7d38595fe1b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 12,
    "end_line": 16,
    "ast_path": "go:type:singleThreadLimiterTestSuite (struct)",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\ntype singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\n\tmockController *gomock.Controller\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)",
    "core": "type singleThreadLimiterTestSuite struct {\n\tsuite.Suite\n\n\tmockController *gomock.Controller\n}",
    "footer_context": "",
    "symbols_defined": [
      "singleThreadLimiterTestSuite"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "suite.Suite"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "175d5b798fe0490ca699caf6b59786b3cc6e28fbca8d728f82d20a5139ce7a52",
      "next": "db8473635dd814119b133d385c3a40fec2b6a4a2b371875486c585359e4c74a0"
    },
    "summary_1l": "Go struct singleThreadLimiterTestSuite for weather forecasting",
    "qa_terms": "singleThreadLimiterTestSuite, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 27,
      "core": 21,
      "footer": 0,
      "total": 48
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.061049+00:00",
    "v": 3
  },
  {
    "chunk_id": "db8473635dd814119b133d385c3a40fec2b6a4a2b371875486c585359e4c74a0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 18,
    "end_line": 20,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).SetupSuite",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "suite.T",
      "suite.mockController",
      "gomock.NewController",
      "singleThreadLimiterTestSuite"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "7af9aa35ac4d58528f163e0f3354e66141e69d0d9a7623df65c5f7d38595fe1b",
      "next": "f017c3ab336acc5cef02767471fd773a035d2fc509bee8284b31bcec197cd662"
    },
    "summary_1l": "Go method SetupSuite on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "SetupSuite, foreca, proxy, suite singleThreadLimiterTestSuite, weather",
    "token_counts": {
      "header": 38,
      "core": 28,
      "footer": 0,
      "total": 67
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.061779+00:00",
    "v": 3
  },
  {
    "chunk_id": "f017c3ab336acc5cef02767471fd773a035d2fc509bee8284b31bcec197cd662",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 22,
    "end_line": 34,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_PeekEmpty",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, ratelimit.ErrNotFound)\n\tsuite.Assert().Zero(u)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_PeekEmpty"
    ],
    "symbols_referenced": [
      "mocks.NewMockstorage",
      "ratelimit.NewSingleThreadLimiter",
      "EXPECT",
      "Return",
      "u",
      "time.Second",
      "suite.Assert",
      "ratelimit.ErrNotFound",
      "storage",
      "Get",
      "err",
      "Stop",
      "Peek",
      "suite.mockController",
      "singleThreadLimiterTestSuite",
      "NotNil",
      "Start",
      "ErrorIs",
      "Zero"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "db8473635dd814119b133d385c3a40fec2b6a4a2b371875486c585359e4c74a0",
      "next": "e676fa40311bdcf424fc3271e4563d407652b2b2315b7b892e5488412069d5d3"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_PeekEmpty on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_PeekEmpty, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 67,
      "core": 107,
      "footer": 0,
      "total": 175
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.063886+00:00",
    "v": 3
  },
  {
    "chunk_id": "e676fa40311bdcf424fc3271e4563d407652b2b2315b7b892e5488412069d5d3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 36,
    "end_line": 53,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_PeekNotEmpty",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_PeekNotEmpty() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           0,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          1,\n\t\tDuration:       time.Second,\n\t}, nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Peek(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(0, u)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_PeekNotEmpty"
    ],
    "symbols_referenced": [
      "mocks.NewMockstorage",
      "ratelimit.NewSingleThreadLimiter",
      "LastAccessTime",
      "time.Now",
      "EXPECT",
      "EqualValues",
      "Return",
      "u",
      "time.Second",
      "suite.Assert",
      "storage",
      "Get",
      "err",
      "Stop",
      "ratelimit.TokenBucket",
      "Peek",
      "Used",
      "suite.mockController",
      "singleThreadLimiterTestSuite",
      "NotNil",
      "Limit",
      "Start",
      "Nil",
      "Duration"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "f017c3ab336acc5cef02767471fd773a035d2fc509bee8284b31bcec197cd662",
      "next": "613c95a5f81619a9a0e2f76b6741d30edd5d95ac60c23b485cc931391d4c7ba7"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_PeekNotEmpty on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_PeekNotEmpty, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 67,
      "core": 144,
      "footer": 0,
      "total": 212
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.065105+00:00",
    "v": 3
  },
  {
    "chunk_id": "613c95a5f81619a9a0e2f76b6741d30edd5d95ac60c23b485cc931391d4c7ba7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 55,
    "end_line": 73,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireNewBucket",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(1), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(1, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(1, u)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_AcquireNewBucket"
    ],
    "symbols_referenced": [
      "DoAndReturn",
      "mocks.NewMockstorage",
      "ratelimit.NewSingleThreadLimiter",
      "Set",
      "EXPECT",
      "EqualValues",
      "Return",
      "u",
      "time.Second",
      "suite.Assert",
      "storage",
      "Acquire",
      "Get",
      "err",
      "Stop",
      "ratelimit.TokenBucket",
      "time.Duration",
      "Equal",
      "Used",
      "suite.mockController",
      "singleThreadLimiterTestSuite",
      "error",
      "NotNil",
      "Start",
      "Nil",
      "gomock.Any"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "time",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "e676fa40311bdcf424fc3271e4563d407652b2b2315b7b892e5488412069d5d3",
      "next": "dc32e58ecb4d01e82ac1ecade9849006e0d1edbbca5e6717145e8be5ae6da249"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_AcquireNewBucket on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_AcquireNewBucket, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 77,
      "core": 171,
      "footer": 0,
      "total": 249
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.066073+00:00",
    "v": 3
  },
  {
    "chunk_id": "dc32e58ecb4d01e82ac1ecade9849006e0d1edbbca5e6717145e8be5ae6da249",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 75,
    "end_line": 98,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireExistingBucket",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           2,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.Acquire(\"test\")\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_AcquireExistingBucket"
    ],
    "symbols_referenced": [
      "DoAndReturn",
      "mocks.NewMockstorage",
      "GreaterOrEqual",
      "ratelimit.NewSingleThreadLimiter",
      "Set",
      "LastAccessTime",
      "time.Now",
      "EXPECT",
      "Return",
      "u",
      "time.Second",
      "suite.Assert",
      "storage",
      "Acquire",
      "Get",
      "err",
      "Stop",
      "ratelimit.TokenBucket",
      "time.Duration",
      "Equal",
      "Used",
      "suite.mockController",
      "singleThreadLimiterTestSuite",
      "error",
      "NotNil",
      "Limit",
      "Start",
      "Nil",
      "gomock.Any"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "time",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "613c95a5f81619a9a0e2f76b6741d30edd5d95ac60c23b485cc931391d4c7ba7",
      "next": "a62e8e662108266eaf93d6e31d77de56bc3590537609b2bfc1869d550da7d3f6"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_AcquireExistingBucket on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_AcquireExistingBucket, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 77,
      "core": 214,
      "footer": 0,
      "total": 292
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.067007+00:00",
    "v": 3
  },
  {
    "chunk_id": "a62e8e662108266eaf93d6e31d77de56bc3590537609b2bfc1869d550da7d3f6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 100,
    "end_line": 118,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireNNewBucket",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNNewBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(nil, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().Equal(float64(2), arg1.Used)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(2, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().EqualValues(2, u)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_AcquireNNewBucket"
    ],
    "symbols_referenced": [
      "DoAndReturn",
      "mocks.NewMockstorage",
      "ratelimit.NewSingleThreadLimiter",
      "Set",
      "EXPECT",
      "EqualValues",
      "Return",
      "AcquireN",
      "u",
      "time.Second",
      "suite.Assert",
      "storage",
      "Get",
      "err",
      "Stop",
      "ratelimit.TokenBucket",
      "time.Duration",
      "Equal",
      "Used",
      "suite.mockController",
      "singleThreadLimiterTestSuite",
      "error",
      "NotNil",
      "Start",
      "Nil",
      "gomock.Any"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "time",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "dc32e58ecb4d01e82ac1ecade9849006e0d1edbbca5e6717145e8be5ae6da249",
      "next": "d9d399bb103f79807b95e1bbc386755e09a80bbeb3ee49e74f61f2c1ec582ca9"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_AcquireNNewBucket on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_AcquireNNewBucket, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 77,
      "core": 176,
      "footer": 0,
      "total": 254
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.067849+00:00",
    "v": 3
  },
  {
    "chunk_id": "d9d399bb103f79807b95e1bbc386755e09a80bbeb3ee49e74f61f2c1ec582ca9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 120,
    "end_line": 143,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_AcquireNExistingBucket",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_AcquireNExistingBucket() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Get(\"test\").Return(&ratelimit.TokenBucket{\n\t\tUsed:           1,\n\t\tLastAccessTime: time.Now(),\n\t\tLimit:          3,\n\t\tDuration:       time.Second,\n\t}, nil)\n\tstorage.EXPECT().Set(\"test\", gomock.Any(), time.Second).\n\t\tDoAndReturn(func(arg0 string, arg1 *ratelimit.TokenBucket, arg2 time.Duration) error {\n\t\t\tsuite.Assert().GreaterOrEqual(arg1.Used, 2.9)\n\n\t\t\treturn nil\n\t\t})\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\tu, err := l.AcquireN(\"test\", 2)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(u)\n\tsuite.Assert().Equal(int64(3), u)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_AcquireNExistingBucket"
    ],
    "symbols_referenced": [
      "DoAndReturn",
      "mocks.NewMockstorage",
      "GreaterOrEqual",
      "ratelimit.NewSingleThreadLimiter",
      "Set",
      "LastAccessTime",
      "time.Now",
      "EXPECT",
      "Return",
      "AcquireN",
      "u",
      "time.Second",
      "suite.Assert",
      "storage",
      "Get",
      "err",
      "Stop",
      "ratelimit.TokenBucket",
      "time.Duration",
      "Equal",
      "Used",
      "suite.mockController",
      "singleThreadLimiterTestSuite",
      "error",
      "NotNil",
      "Limit",
      "Start",
      "Nil",
      "gomock.Any"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "time",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "a62e8e662108266eaf93d6e31d77de56bc3590537609b2bfc1869d550da7d3f6",
      "next": "c3ee7335a21cdfd7c54ef8d9ab7c1b32d8dff1f421c6179de40618d0bcf5dced"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_AcquireNExistingBucket on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_AcquireNExistingBucket, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 77,
      "core": 219,
      "footer": 0,
      "total": 297
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.069174+00:00",
    "v": 3
  },
  {
    "chunk_id": "c3ee7335a21cdfd7c54ef8d9ab7c1b32d8dff1f421c6179de40618d0bcf5dced",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 145,
    "end_line": 155,
    "ast_path": "go:method:(suite *singleThreadLimiterTestSuite).TestSingleThreadLimiter_Reset",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite\nfunc (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks\"\n\t\"time\"\n)\n// receiver: suite *singleThreadLimiterTestSuite",
    "core": "func (suite *singleThreadLimiterTestSuite) TestSingleThreadLimiter_Reset() {\n\tstorage := mocks.NewMockstorage(suite.mockController)\n\tstorage.EXPECT().Delete(\"test\").Return(nil)\n\n\tl := ratelimit.NewSingleThreadLimiter(3, time.Second, storage)\n\tl.Start()\n\tdefer l.Stop()\n\n\terr := l.Reset(\"test\")\n\tsuite.Assert().Nil(err)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestSingleThreadLimiter_Reset"
    ],
    "symbols_referenced": [
      "Delete",
      "err",
      "time.Second",
      "mocks.NewMockstorage",
      "suite.Assert",
      "Stop",
      "Start",
      "ratelimit.NewSingleThreadLimiter",
      "storage",
      "Nil",
      "EXPECT",
      "suite.mockController",
      "Return",
      "singleThreadLimiterTestSuite",
      "Reset"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit/mocks",
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "d9d399bb103f79807b95e1bbc386755e09a80bbeb3ee49e74f61f2c1ec582ca9",
      "next": "fa7c4a3e6a5e304849f049e009c4ab9712b9e479929fe15f3b392ee2fa5a1abf"
    },
    "summary_1l": "Go method TestSingleThreadLimiter_Reset on suite *singleThreadLimiterTestSuite for the Foreca proxy",
    "qa_terms": "TestSingleThreadLimiter_Reset, foreca, proxy, suite singleThreadLimiterTestSuite, throttled, weather",
    "token_counts": {
      "header": 67,
      "core": 81,
      "footer": 0,
      "total": 149
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.069637+00:00",
    "v": 3
  },
  {
    "chunk_id": "fa7c4a3e6a5e304849f049e009c4ab9712b9e479929fe15f3b392ee2fa5a1abf",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/ratelimit/limiter_test.go",
    "language": "go",
    "start_line": 157,
    "end_line": 159,
    "ast_path": "go:function:",
    "text": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)\nfunc TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}",
    "header_context": "package ratelimit_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)",
    "core": "func TestSingleThreadLimiter(t *testing.T) {\n\tsuite.Run(t, new(singleThreadLimiterTestSuite))\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "TestSingleThreadLimiter",
      "suite.Run",
      "testing.T",
      "singleThreadLimiterTestSuite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "testing"
    ],
    "neighbors": {
      "prev": "c3ee7335a21cdfd7c54ef8d9ab7c1b32d8dff1f421c6179de40618d0bcf5dced",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 20,
      "core": 25,
      "footer": 0,
      "total": 45
    },
    "file_sha": "386f58055a44e5d50b26de57c92dcde21fe3a0b42c3b90cbe801e0c5f50ab110",
    "created_at": "2025-10-07T09:26:57.069841+00:00",
    "v": 3
  },
  {
    "chunk_id": "c11892abb092adbad82009aabe3b349f8750b5fb037a7629c32dea8fe312f3ea",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 1,
    "end_line": 8,
    "ast_path": "go:file_header",
    "text": "package clients\n\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"",
    "header_context": "",
    "core": "package clients\n\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "context",
      "encoding/xml",
      "fmt",
      "github.com/pkg/errors",
      "go.impalastudios.com/log",
      "go.impalastudios.com/otel",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/pkg/utilities",
      "go.opentelemetry.io/otel/attribute",
      "go.opentelemetry.io/otel/codes",
      "go.opentelemetry.io/otel/trace",
      "go.uber.org/zap",
      "golang.org/x/text/cases",
      "golang.org/x/text/language",
      "io",
      "math",
      "net/http",
      "strconv",
      "strings",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "14f6aea97e7a2f01e80bcac8923a453722bfb330db675ff49e3e823bf9781393"
    },
    "summary_1l": "Go package clients with otel, attribute, codes",
    "qa_terms": "clients, otel, attribute, codes, trace, zap, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 30,
      "footer": 0,
      "total": 30
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.061409+00:00",
    "v": 3
  },
  {
    "chunk_id": "14f6aea97e7a2f01e80bcac8923a453722bfb330db675ff49e3e823bf9781393",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 27,
    "end_line": 30,
    "ast_path": "go:type:WeatherCondition (struct)",
    "text": "package clients\nimport \"encoding/xml\"\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}",
    "header_context": "package clients\nimport \"encoding/xml\"",
    "core": "type WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "WeatherCondition"
    ],
    "symbols_referenced": [],
    "imports_used": [
      "encoding/xml"
    ],
    "neighbors": {
      "prev": "c11892abb092adbad82009aabe3b349f8750b5fb037a7629c32dea8fe312f3ea",
      "next": "9b72928929df507fc64a930722716a259387b2003fb548ce3bb1d85abacbe2ae"
    },
    "summary_1l": "Go struct WeatherCondition for weather forecasting",
    "qa_terms": "WeatherCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 30,
      "footer": 0,
      "total": 38
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.061647+00:00",
    "v": 3
  },
  {
    "chunk_id": "9b72928929df507fc64a930722716a259387b2003fb548ce3bb1d85abacbe2ae",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 32,
    "end_line": 46,
    "ast_path": "go:type:CurrentCondition (struct)",
    "text": "package clients\nimport \"encoding/xml\"\ntype CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}",
    "header_context": "package clients\nimport \"encoding/xml\"",
    "core": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "CurrentCondition"
    ],
    "symbols_referenced": [
      "xml.Name"
    ],
    "imports_used": [
      "encoding/xml"
    ],
    "neighbors": {
      "prev": "14f6aea97e7a2f01e80bcac8923a453722bfb330db675ff49e3e823bf9781393",
      "next": "2526618cd0fefacdb8aa1f4d9850d2f09caaba37ba901ae92b4362b0c2c3d924"
    },
    "summary_1l": "Go struct CurrentCondition for weather forecasting",
    "qa_terms": "CurrentCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 145,
      "footer": 0,
      "total": 153
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.062093+00:00",
    "v": 3
  },
  {
    "chunk_id": "2526618cd0fefacdb8aa1f4d9850d2f09caaba37ba901ae92b4362b0c2c3d924",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 48,
    "end_line": 52,
    "ast_path": "go:method:(cc *CurrentCondition).IsZero",
    "text": "package clients\n// receiver: cc *CurrentCondition\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\n\treturn zero == *cc\n}",
    "header_context": "package clients\n// receiver: cc *CurrentCondition",
    "core": "func (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\n\treturn zero == *cc\n}",
    "footer_context": "",
    "symbols_defined": [
      "IsZero"
    ],
    "symbols_referenced": [
      "cc",
      "CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9b72928929df507fc64a930722716a259387b2003fb548ce3bb1d85abacbe2ae",
      "next": "925ceea6bd183413f5bfc777df8470338953f303e1ef8e5258d2a251938e3929"
    },
    "summary_1l": "Go method IsZero on cc *CurrentCondition for the Foreca proxy",
    "qa_terms": "IsZero, cc CurrentCondition, foreca, proxy, weather",
    "token_counts": {
      "header": 10,
      "core": 24,
      "footer": 0,
      "total": 35
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.062343+00:00",
    "v": 3
  },
  {
    "chunk_id": "925ceea6bd183413f5bfc777df8470338953f303e1ef8e5258d2a251938e3929",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 54,
    "end_line": 56,
    "ast_path": "go:method:(cc *CurrentCondition).IsValid",
    "text": "package clients\n// receiver: cc *CurrentCondition\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}",
    "header_context": "package clients\n// receiver: cc *CurrentCondition",
    "core": "func (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}",
    "footer_context": "",
    "symbols_defined": [
      "IsValid"
    ],
    "symbols_referenced": [
      "IsZero",
      "CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2526618cd0fefacdb8aa1f4d9850d2f09caaba37ba901ae92b4362b0c2c3d924",
      "next": "4d95cbf19c0de08b9fba596569733e0cdfda71491da3d5247989c79bfa4206c2"
    },
    "summary_1l": "Go method IsValid on cc *CurrentCondition for the Foreca proxy",
    "qa_terms": "IsValid, cc CurrentCondition, foreca, proxy, weather",
    "token_counts": {
      "header": 10,
      "core": 23,
      "footer": 0,
      "total": 34
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.062518+00:00",
    "v": 3
  },
  {
    "chunk_id": "4d95cbf19c0de08b9fba596569733e0cdfda71491da3d5247989c79bfa4206c2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 58,
    "end_line": 72,
    "ast_path": "go:type:DailyCondition (struct)",
    "text": "package clients\nimport \"encoding/xml\"\ntype DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}",
    "header_context": "package clients\nimport \"encoding/xml\"",
    "core": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "DailyCondition"
    ],
    "symbols_referenced": [
      "xml.Name"
    ],
    "imports_used": [
      "encoding/xml"
    ],
    "neighbors": {
      "prev": "925ceea6bd183413f5bfc777df8470338953f303e1ef8e5258d2a251938e3929",
      "next": "de9ee82331a2ed6fbd91bd5e5ca9d5887f71b0af2c839264a74d10892e20a9c1"
    },
    "summary_1l": "Go struct DailyCondition for weather forecasting",
    "qa_terms": "DailyCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 153,
      "footer": 0,
      "total": 161
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.062981+00:00",
    "v": 3
  },
  {
    "chunk_id": "de9ee82331a2ed6fbd91bd5e5ca9d5887f71b0af2c839264a74d10892e20a9c1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 74,
    "end_line": 88,
    "ast_path": "go:type:HourlyCondition (struct)",
    "text": "package clients\nimport \"encoding/xml\"\ntype HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}",
    "header_context": "package clients\nimport \"encoding/xml\"",
    "core": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "HourlyCondition"
    ],
    "symbols_referenced": [
      "xml.Name"
    ],
    "imports_used": [
      "encoding/xml"
    ],
    "neighbors": {
      "prev": "4d95cbf19c0de08b9fba596569733e0cdfda71491da3d5247989c79bfa4206c2",
      "next": "405baaf41f99a0b6562d62306a2fe8d507a87ddfc16a149ff3a86e00547a7dec"
    },
    "summary_1l": "Go struct HourlyCondition for weather forecasting",
    "qa_terms": "HourlyCondition, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 154,
      "footer": 0,
      "total": 162
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.063419+00:00",
    "v": 3
  },
  {
    "chunk_id": "405baaf41f99a0b6562d62306a2fe8d507a87ddfc16a149ff3a86e00547a7dec",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 90,
    "end_line": 96,
    "ast_path": "go:type:Response (struct)",
    "text": "package clients\nimport \"encoding/xml\"\ntype Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}",
    "header_context": "package clients\nimport \"encoding/xml\"",
    "core": "type Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "Response"
    ],
    "symbols_referenced": [
      "DailyConditions",
      "HourlyCondition",
      "HourlyConditions",
      "xml.Name",
      "DailyCondition",
      "CurrentCondition"
    ],
    "imports_used": [
      "encoding/xml"
    ],
    "neighbors": {
      "prev": "de9ee82331a2ed6fbd91bd5e5ca9d5887f71b0af2c839264a74d10892e20a9c1",
      "next": "852f534f3add640040f6986f75c34fd1a96885580433afbb5e81ca22b586cc97"
    },
    "summary_1l": "Go struct Response for weather forecasting",
    "qa_terms": "Response, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 61,
      "footer": 0,
      "total": 69
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.063602+00:00",
    "v": 3
  },
  {
    "chunk_id": "852f534f3add640040f6986f75c34fd1a96885580433afbb5e81ca22b586cc97",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 98,
    "end_line": 100,
    "ast_path": "go:method:(r Response).HasCurrentCondition",
    "text": "package clients\n// receiver: r Response\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}",
    "header_context": "package clients\n// receiver: r Response",
    "core": "func (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}",
    "footer_context": "",
    "symbols_defined": [
      "HasCurrentCondition"
    ],
    "symbols_referenced": [
      "Response",
      "IsValid"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "405baaf41f99a0b6562d62306a2fe8d507a87ddfc16a149ff3a86e00547a7dec",
      "next": "2c3e12d19aae6238fdf166d0aecb4621850d99feefdd52ded26a0b81e2059686"
    },
    "summary_1l": "Go method HasCurrentCondition on r Response for the Foreca proxy",
    "qa_terms": "HasCurrentCondition, foreca, proxy, r Response, weather",
    "token_counts": {
      "header": 8,
      "core": 24,
      "footer": 0,
      "total": 33
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.063782+00:00",
    "v": 3
  },
  {
    "chunk_id": "2c3e12d19aae6238fdf166d0aecb4621850d99feefdd52ded26a0b81e2059686",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 102,
    "end_line": 105,
    "ast_path": "go:type:errorResponse (struct)",
    "text": "package clients\nimport \"encoding/xml\"\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}",
    "header_context": "package clients\nimport \"encoding/xml\"",
    "core": "type errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "errorResponse"
    ],
    "symbols_referenced": [
      "error",
      "xml.Name"
    ],
    "imports_used": [
      "encoding/xml"
    ],
    "neighbors": {
      "prev": "852f534f3add640040f6986f75c34fd1a96885580433afbb5e81ca22b586cc97",
      "next": "92d46d4de2f2108dac76cea401a93805f63b912a39b46cd24217c03f895a7d11"
    },
    "summary_1l": "Go struct errorResponse for weather forecasting",
    "qa_terms": "errorResponse, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 26,
      "footer": 0,
      "total": 34
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.063886+00:00",
    "v": 3
  },
  {
    "chunk_id": "92d46d4de2f2108dac76cea401a93805f63b912a39b46cd24217c03f895a7d11",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 109,
    "end_line": 111,
    "ast_path": "go:type:httpClient (interface)",
    "text": "package clients\nimport \"net/http\"\nhttpClient interface {\nDo(*http.Request) (*http.Response, error)\n}",
    "header_context": "package clients\nimport \"net/http\"",
    "core": "httpClient interface {\nDo(*http.Request) (*http.Response, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "httpClient"
    ],
    "symbols_referenced": [
      "Do",
      "http.Response",
      "http.Request",
      "error"
    ],
    "imports_used": [
      "net/http"
    ],
    "neighbors": {
      "prev": "2c3e12d19aae6238fdf166d0aecb4621850d99feefdd52ded26a0b81e2059686",
      "next": "656462627c5c8cbd194a1a53dec3489cc3bf4edd6613bda4da1519a68eb522ee"
    },
    "summary_1l": "Go interface httpClient for weather forecasting",
    "qa_terms": "httpClient, interface, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 15,
      "footer": 0,
      "total": 23
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.063979+00:00",
    "v": 3
  },
  {
    "chunk_id": "656462627c5c8cbd194a1a53dec3489cc3bf4edd6613bda4da1519a68eb522ee",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 112,
    "end_line": 114,
    "ast_path": "go:type:rateLimiter (interface)",
    "text": "package clients\nrateLimiter interface {\nAcquire(string) (int64, error)\n}",
    "header_context": "package clients",
    "core": "rateLimiter interface {\nAcquire(string) (int64, error)\n}",
    "footer_context": "",
    "symbols_defined": [
      "rateLimiter"
    ],
    "symbols_referenced": [
      "Acquire",
      "error"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "92d46d4de2f2108dac76cea401a93805f63b912a39b46cd24217c03f895a7d11",
      "next": "e190661ceab343a9978f474a4ff11f219dc3ba0999fb282471c92a446a418860"
    },
    "summary_1l": "Go interface rateLimiter for weather forecasting",
    "qa_terms": "rateLimiter, interface, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 16,
      "footer": 0,
      "total": 19
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.064040+00:00",
    "v": 3
  },
  {
    "chunk_id": "e190661ceab343a9978f474a4ff11f219dc3ba0999fb282471c92a446a418860",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 115,
    "end_line": 117,
    "ast_path": "go:type:transformer (interface)",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"time\"\n)\ntransformer interface {\nTransform(*Response, *time.Location) *foreca.Forecast\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"time\"\n)",
    "core": "transformer interface {\nTransform(*Response, *time.Location) *foreca.Forecast\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformer"
    ],
    "symbols_referenced": [
      "Response",
      "Transform",
      "time.Location",
      "foreca.Forecast"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "time"
    ],
    "neighbors": {
      "prev": "656462627c5c8cbd194a1a53dec3489cc3bf4edd6613bda4da1519a68eb522ee",
      "next": "a916e270a8703e15318145815428a0ab98a6ad4338e4659ae2946503d49b42c5"
    },
    "summary_1l": "Go interface transformer for weather forecasting",
    "qa_terms": "transformer, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 26,
      "core": 19,
      "footer": 0,
      "total": 45
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.064145+00:00",
    "v": 3
  },
  {
    "chunk_id": "a916e270a8703e15318145815428a0ab98a6ad4338e4659ae2946503d49b42c5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 120,
    "end_line": 127,
    "ast_path": "go:type:ForecaClient (struct)",
    "text": "package clients\nimport \"net/http\"\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}",
    "header_context": "package clients\nimport \"net/http\"",
    "core": "type ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecaClient"
    ],
    "symbols_referenced": [
      "transformer",
      "rateLimiter",
      "httpClient"
    ],
    "imports_used": [
      "net/http"
    ],
    "neighbors": {
      "prev": "e190661ceab343a9978f474a4ff11f219dc3ba0999fb282471c92a446a418860",
      "next": "131a5e797acbf6a92a6d0f329fc580c9d5b0b4b0ef48a68c3e3f80116266d416"
    },
    "summary_1l": "Go struct ForecaClient for weather forecasting",
    "qa_terms": "ForecaClient, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 8,
      "core": 42,
      "footer": 0,
      "total": 50
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.064334+00:00",
    "v": 3
  },
  {
    "chunk_id": "131a5e797acbf6a92a6d0f329fc580c9d5b0b4b0ef48a68c3e3f80116266d416",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 129,
    "end_line": 138,
    "ast_path": "go:function:",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"net/http\"\n)\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"net/http\"\n)",
    "core": "func NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "transformer",
      "ForecaClient",
      "NewForecaClient"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "net/http"
    ],
    "neighbors": {
      "prev": "a916e270a8703e15318145815428a0ab98a6ad4338e4659ae2946503d49b42c5",
      "next": "5ebb1289a649a6ed3c24847460d22d73ff900b48034975175074107fb259b0f0"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 27,
      "core": 87,
      "footer": 0,
      "total": 114
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.064719+00:00",
    "v": 3
  },
  {
    "chunk_id": "5ebb1289a649a6ed3c24847460d22d73ff900b48034975175074107fb259b0f0",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 140,
    "end_line": 151,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part1_otel_span",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\nfunc (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "ForecaClient",
      "Acquire",
      "Int64",
      "Debug",
      "error",
      "SpanKindClient",
      "id",
      "SetAttributes",
      "Forecast",
      "WithSpanKind",
      "rateLimitKey",
      "End",
      "epoch",
      "Location",
      "Start",
      "Context",
      "String",
      "Int",
      "foreca",
      "time"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "131a5e797acbf6a92a6d0f329fc580c9d5b0b4b0ef48a68c3e3f80116266d416",
      "next": "e93d1f135acbfbe7007ce7ce94419ab60f71a64cea95c2989bd1610d8257df6b"
    },
    "summary_1l": "OTEL span management and attribute setting for observability.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 138,
      "footer": 0,
      "total": 263
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.066771+00:00",
    "v": 3
  },
  {
    "chunk_id": "e93d1f135acbfbe7007ce7ce94419ab60f71a64cea95c2989bd1610d8257df6b",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 152,
    "end_line": 166,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part2_rate_limit",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "ErrLimitReached",
      "Warn",
      "Bool",
      "Is",
      "RecordError",
      "SetStatus",
      "Int",
      "id",
      "SetAttributes",
      "error",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "5ebb1289a649a6ed3c24847460d22d73ff900b48034975175074107fb259b0f0",
      "next": "1cd9e210efa3723281207fe0f00b59613a99bacc0b927a8a40ffc56ab3b122fb"
    },
    "summary_1l": "Handles rate limiting and throttling scenarios with fallback to cached data.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 112,
      "footer": 0,
      "total": 237
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067203+00:00",
    "v": 3
  },
  {
    "chunk_id": "1cd9e210efa3723281207fe0f00b59613a99bacc0b927a8a40ffc56ab3b122fb",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 167,
    "end_line": 185,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part3_error_handling",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: generic error\")\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, c.endpoint, nil)",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: generic error\")\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, c.endpoint, nil)",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "Warn",
      "RecordError",
      "Wrap",
      "SetStatus",
      "Int",
      "id",
      "NewRequestWithContext",
      "MethodGet",
      "error",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e93d1f135acbfbe7007ce7ce94419ab60f71a64cea95c2989bd1610d8257df6b",
      "next": "9e0390da6ad1c43896f3b1ba02c251a0de16e69f54eb8e1431c1f46dba9ea758"
    },
    "summary_1l": "Error handling and logging with OTEL span status updates.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 132,
      "footer": 0,
      "total": 257
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067671+00:00",
    "v": 3
  },
  {
    "chunk_id": "9e0390da6ad1c43896f3b1ba02c251a0de16e69f54eb8e1431c1f46dba9ea758",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 186,
    "end_line": 194,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part4_error_handling",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot create request.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"foreca client: cannot create request\")\n\t}\n\n\tq := req.URL.Query()\n\tfor key, value := range c.defaultQueryParams {\n\t\tq.Add(key, value)\n\t}",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot create request.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"foreca client: cannot create request\")\n\t}\n\n\tq := req.URL.Query()\n\tfor key, value := range c.defaultQueryParams {\n\t\tq.Add(key, value)\n\t}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "Add",
      "Query",
      "Wrap",
      "id",
      "Int",
      "error",
      "value",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1cd9e210efa3723281207fe0f00b59613a99bacc0b927a8a40ffc56ab3b122fb",
      "next": "6abecd808d9bde82791a05a3b182f680707abbd3120161e3411e575c4b9890b1"
    },
    "summary_1l": "Error handling and logging with OTEL span status updates.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 71,
      "footer": 0,
      "total": 196
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067994+00:00",
    "v": 3
  },
  {
    "chunk_id": "6abecd808d9bde82791a05a3b182f680707abbd3120161e3411e575c4b9890b1",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 195,
    "end_line": 208,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part5_error_handling",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\n\tq.Add(\"l\", fmt.Sprintf(\"%d\", id))\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.http.Do(req)\n\tif err != nil {\n\t\tlog.Error(ctx,\n\t\t\t\"Error occurred with the HTTP request.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: http error\")\n\t}\n\n\tdefer func() {",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "\tq.Add(\"l\", fmt.Sprintf(\"%d\", id))\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.http.Do(req)\n\tif err != nil {\n\t\tlog.Error(ctx,\n\t\t\t\"Error occurred with the HTTP request.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: http error\")\n\t}\n\n\tdefer func() {",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Error",
      "Do",
      "req",
      "Add",
      "Encode",
      "Wrap",
      "RawQuery",
      "id",
      "Int",
      "Sprintf",
      "error",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9e0390da6ad1c43896f3b1ba02c251a0de16e69f54eb8e1431c1f46dba9ea758",
      "next": "65613deeb27057146a6efefccdf26da68b53721f8ce1847c3070f9516b9ce348"
    },
    "summary_1l": "Error handling and logging with OTEL span status updates.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 90,
      "footer": 0,
      "total": 215
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.068366+00:00",
    "v": 3
  },
  {
    "chunk_id": "65613deeb27057146a6efefccdf26da68b53721f8ce1847c3070f9516b9ce348",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 209,
    "end_line": 225,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part6_otel_span",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\n\t\tif err := resp.Body.Close(); err != nil {\n\t\t\tlog.Error(ctx,\n\t\t\t\t\"Error occurred while closing the response body stream.\",\n\t\t\t\tzap.Int(\"id\", id),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t}()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar r *Response\n\terr = xml.Unmarshal(body, &r)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tvar e errorResponse",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "\t\tif err := resp.Body.Close(); err != nil {\n\t\t\tlog.Error(ctx,\n\t\t\t\t\"Error occurred while closing the response body stream.\",\n\t\t\t\tzap.Int(\"id\", id),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t}()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar r *Response\n\terr = xml.Unmarshal(body, &r)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tvar e errorResponse",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "ReadAll",
      "Response",
      "Error",
      "Unmarshal",
      "RecordError",
      "r",
      "errorResponse",
      "Close",
      "Int",
      "SetStatus",
      "id",
      "error",
      "Body",
      "err"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6abecd808d9bde82791a05a3b182f680707abbd3120161e3411e575c4b9890b1",
      "next": "4cc20fcc1b1bec98cd092e28514d5bf1778d6753d80f684fd74984a723ac931b"
    },
    "summary_1l": "OTEL span management and attribute setting for observability.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 106,
      "footer": 0,
      "total": 231
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.068783+00:00",
    "v": 3
  },
  {
    "chunk_id": "4cc20fcc1b1bec98cd092e28514d5bf1778d6753d80f684fd74984a723ac931b",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 226,
    "end_line": 235,
    "ast_path": "go:method:(*c ForecaClient).GetForecastForLocation#part7_error_handling",
    "text": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient\n\t\tif err := xml.Unmarshal(body, &e); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"foreca client: cannot unmarshal response\")\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get forecast for location.\", zap.Int(\"id\", id), zap.Any(\"error\", e))\n\t\treturn nil, errors.Wrap(err, \"foreca client: client error\")\n\t}\n\n\treturn c.transformer.Transform(r, loc), nil\n}",
    "header_context": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: c *ForecaClient",
    "core": "\t\tif err := xml.Unmarshal(body, &e); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"foreca client: cannot unmarshal response\")\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get forecast for location.\", zap.Int(\"id\", id), zap.Any(\"error\", e))\n\t\treturn nil, errors.Wrap(err, \"foreca client: client error\")\n\t}\n\n\treturn c.transformer.Transform(r, loc), nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetForecastForLocation"
    ],
    "symbols_referenced": [
      "Any",
      "Transform",
      "Error",
      "Unmarshal",
      "Wrap",
      "loc",
      "id",
      "Int",
      "error",
      "e"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "65613deeb27057146a6efefccdf26da68b53721f8ce1847c3070f9516b9ce348",
      "next": "ec0624bf847e2092db399ecc39e0b49209f1a04bb53bb0afae69b243c6eca6e6"
    },
    "summary_1l": "Error handling and logging with OTEL span status updates.",
    "qa_terms": "GetForecastForLocation, c ForecaClient",
    "token_counts": {
      "header": 124,
      "core": 92,
      "footer": 0,
      "total": 217
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.069154+00:00",
    "v": 3
  },
  {
    "chunk_id": "ec0624bf847e2092db399ecc39e0b49209f1a04bb53bb0afae69b243c6eca6e6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 237,
    "end_line": 245,
    "ast_path": "go:method:(c *ForecaClient).isLimiterError",
    "text": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n// receiver: c *ForecaClient\nfunc (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
    "header_context": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n// receiver: c *ForecaClient",
    "core": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
    "footer_context": "",
    "symbols_defined": [
      "isLimiterError"
    ],
    "symbols_referenced": [
      "ratelimit.ErrLimitZero",
      "ForecaClient",
      "ratelimit.ErrCountZero",
      "ratelimit.ErrKeyEmpty",
      "ratelimit.ErrZeroDuration",
      "ratelimit.ErrCountLimit",
      "error"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit"
    ],
    "neighbors": {
      "prev": "4cc20fcc1b1bec98cd092e28514d5bf1778d6753d80f684fd74984a723ac931b",
      "next": "7b0243709106a5a70ab6dffda203ed19a866d0884a48b8ac3a4f43f9750dbefa"
    },
    "summary_1l": "Go method isLimiterError on c *ForecaClient for the Foreca proxy",
    "qa_terms": "c ForecaClient, foreca, isLimiterError, proxy, throttled, weather",
    "token_counts": {
      "header": 29,
      "core": 83,
      "footer": 0,
      "total": 113
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.069645+00:00",
    "v": 3
  },
  {
    "chunk_id": "7b0243709106a5a70ab6dffda203ed19a866d0884a48b8ac3a4f43f9750dbefa",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 247,
    "end_line": 251,
    "ast_path": "go:type:forecaTransformer (struct)",
    "text": "package clients\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}",
    "header_context": "package clients",
    "core": "type forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}",
    "footer_context": "",
    "symbols_defined": [
      "forecaTransformer"
    ],
    "symbols_referenced": [
      "hourlyForecastTransformer",
      "currentConditionTransformer",
      "dailyForecastTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ec0624bf847e2092db399ecc39e0b49209f1a04bb53bb0afae69b243c6eca6e6",
      "next": "5a4949a13a01ee643bae4fb10a5f7316f70455706a19f975c9c13e7d0df82d08"
    },
    "summary_1l": "Go struct forecaTransformer for weather forecasting",
    "qa_terms": "forecaTransformer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 29,
      "footer": 0,
      "total": 32
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.069761+00:00",
    "v": 3
  },
  {
    "chunk_id": "5a4949a13a01ee643bae4fb10a5f7316f70455706a19f975c9c13e7d0df82d08",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 253,
    "end_line": 259,
    "ast_path": "go:function:",
    "text": "package clients\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}",
    "header_context": "package clients",
    "core": "func NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewCurrentConditionTransformer",
      "NewHourlyForecastTransformer",
      "forecaTransformer",
      "NewDailyForecastTransformer",
      "NewTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7b0243709106a5a70ab6dffda203ed19a866d0884a48b8ac3a4f43f9750dbefa",
      "next": "7d164ee10ca6039c95ec96043f05682ffcf24a7ac74799bca7a595b90a897485"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 46,
      "footer": 0,
      "total": 49
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.069974+00:00",
    "v": 3
  },
  {
    "chunk_id": "7d164ee10ca6039c95ec96043f05682ffcf24a7ac74799bca7a595b90a897485",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 261,
    "end_line": 284,
    "ast_path": "go:method:(t *forecaTransformer).Transform",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"time\"\n)\n// receiver: t *forecaTransformer\nfunc (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\n\tvar dfs []*foreca.DailyCondition\n\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"time\"\n)\n// receiver: t *forecaTransformer",
    "core": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\n\tvar dfs []*foreca.DailyCondition\n\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "DailyConditions",
      "Response",
      "foreca.DailyCondition",
      "location",
      "Date",
      "time.Location",
      "HourlyConditions",
      "CurrentCondition",
      "forecaTransformer",
      "foreca.HourlyCondition",
      "foreca.Forecast"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "time"
    ],
    "neighbors": {
      "prev": "5a4949a13a01ee643bae4fb10a5f7316f70455706a19f975c9c13e7d0df82d08",
      "next": "52ec4b6dccf25df60d3a266cda00ad94dd87fce195ffddd194ab50a3e8bc51da"
    },
    "summary_1l": "Go method Transform on t *forecaTransformer",
    "qa_terms": "Transform, foreca, proxy, t forecaTransformer, weather",
    "token_counts": {
      "header": 34,
      "core": 198,
      "footer": 0,
      "total": 233
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.070622+00:00",
    "v": 3
  },
  {
    "chunk_id": "52ec4b6dccf25df60d3a266cda00ad94dd87fce195ffddd194ab50a3e8bc51da",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 286,
    "end_line": 296,
    "ast_path": "go:method:(t *forecaTransformer).getHourlyForecastsForDate",
    "text": "package clients\nimport \"strings\"\n// receiver: t *forecaTransformer\nfunc (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\n\treturn r\n}",
    "header_context": "package clients\nimport \"strings\"\n// receiver: t *forecaTransformer",
    "core": "func (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\n\treturn r\n}",
    "footer_context": "",
    "symbols_defined": [
      "getHourlyForecastsForDate"
    ],
    "symbols_referenced": [
      "Timestamp",
      "d",
      "HourlyCondition",
      "r",
      "forecaTransformer",
      "h",
      "strings.HasPrefix"
    ],
    "imports_used": [
      "strings"
    ],
    "neighbors": {
      "prev": "7d164ee10ca6039c95ec96043f05682ffcf24a7ac74799bca7a595b90a897485",
      "next": "f1f3a03b55a2fc1978e9df6e8732bd9067ab35b37b6368bcef674221aaf0e2e8"
    },
    "summary_1l": "Go method getHourlyForecastsForDate on t *forecaTransformer",
    "qa_terms": "foreca, getHourlyForecastsForDate, proxy, t forecaTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 72,
      "footer": 0,
      "total": 88
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.070928+00:00",
    "v": 3
  },
  {
    "chunk_id": "f1f3a03b55a2fc1978e9df6e8732bd9067ab35b37b6368bcef674221aaf0e2e8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 298,
    "end_line": 298,
    "ast_path": "go:type:currentConditionTransformer (struct)",
    "text": "package clients\ntype currentConditionTransformer struct{}",
    "header_context": "package clients",
    "core": "type currentConditionTransformer struct{}",
    "footer_context": "",
    "symbols_defined": [
      "currentConditionTransformer"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "52ec4b6dccf25df60d3a266cda00ad94dd87fce195ffddd194ab50a3e8bc51da",
      "next": "473cce082d695263f5193bc1ba68b9f7d4276bca0bf0dc8311758361057a1ddb"
    },
    "summary_1l": "Go struct currentConditionTransformer for weather forecasting",
    "qa_terms": "currentConditionTransformer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 6,
      "footer": 0,
      "total": 9
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.070989+00:00",
    "v": 3
  },
  {
    "chunk_id": "473cce082d695263f5193bc1ba68b9f7d4276bca0bf0dc8311758361057a1ddb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 300,
    "end_line": 302,
    "ast_path": "go:function:",
    "text": "package clients\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}",
    "header_context": "package clients",
    "core": "func NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewCurrentConditionTransformer",
      "currentConditionTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f1f3a03b55a2fc1978e9df6e8732bd9067ab35b37b6368bcef674221aaf0e2e8",
      "next": "cd779ddb4fc5a646e77398de19b4eb16c0bd4ecefedea060dd355a2aa26835c6"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 18,
      "footer": 0,
      "total": 21
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.071262+00:00",
    "v": 3
  },
  {
    "chunk_id": "cd779ddb4fc5a646e77398de19b4eb16c0bd4ecefedea060dd355a2aa26835c6",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 304,
    "end_line": 310,
    "ast_path": "go:method:(*t currentConditionTransformer).Transform#part1_block1",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer\nfunc (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer",
    "core": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "currentConditionTransformer",
      "Location",
      "HourlyCondition",
      "CurrentCondition",
      "foreca",
      "time"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "473cce082d695263f5193bc1ba68b9f7d4276bca0bf0dc8311758361057a1ddb",
      "next": "1ed9c13c850c4d04f8cd1126c8a4516a3ed44ba978fdd9a16c5a2e0f6442e4ac"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t currentConditionTransformer",
    "token_counts": {
      "header": 50,
      "core": 54,
      "footer": 0,
      "total": 105
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.072517+00:00",
    "v": 3
  },
  {
    "chunk_id": "1ed9c13c850c4d04f8cd1126c8a4516a3ed44ba978fdd9a16c5a2e0f6442e4ac",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 311,
    "end_line": 325,
    "ast_path": "go:method:(*t currentConditionTransformer).Transform#part2_block2",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer",
    "core": "\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "CelsiusToFahrenheit",
      "location",
      "WeatherCode",
      "Visibility",
      "WeatherDescription",
      "WindDirection",
      "HumidityPercentage",
      "WindSpeed",
      "Round",
      "Pressure",
      "Timestamp",
      "WeatherCondition",
      "WindGust",
      "hf",
      "Temperature",
      "DewPoint",
      "Epoch",
      "HeatIndex",
      "FahrenheitToCelsius"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "cd779ddb4fc5a646e77398de19b4eb16c0bd4ecefedea060dd355a2aa26835c6",
      "next": "0903c6662bb694af581cf9195066605d12b9df9502054f936c79b49659a19a3a"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t currentConditionTransformer",
    "token_counts": {
      "header": 50,
      "core": 217,
      "footer": 0,
      "total": 268
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.073091+00:00",
    "v": 3
  },
  {
    "chunk_id": "0903c6662bb694af581cf9195066605d12b9df9502054f936c79b49659a19a3a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 326,
    "end_line": 339,
    "ast_path": "go:method:(*t currentConditionTransformer).Transform#part3_block3",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex),\n\t\t\t\tutilities.KilometersToMiles(icc.WindGust.Wind.Speed),\n\t\t\t),\n\t\t),\n\t\t1,\n\t)\n",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer",
    "core": "\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex),\n\t\t\t\tutilities.KilometersToMiles(icc.WindGust.Wind.Speed),\n\t\t\t),\n\t\t),\n\t\t1,\n\t)\n",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "Temperature",
      "KilometersToMiles",
      "CelsiusToFahrenheit",
      "Speed",
      "HeatIndex",
      "Round",
      "TemperatureFeelsLike",
      "FahrenheitToCelsius"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1ed9c13c850c4d04f8cd1126c8a4516a3ed44ba978fdd9a16c5a2e0f6442e4ac",
      "next": "e1c33521654817f0be19e89554e9fa50af653f95ec3f4be70c1da1b4e8510fe0"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t currentConditionTransformer",
    "token_counts": {
      "header": 50,
      "core": 91,
      "footer": 0,
      "total": 142
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.073403+00:00",
    "v": 3
  },
  {
    "chunk_id": "e1c33521654817f0be19e89554e9fa50af653f95ec3f4be70c1da1b4e8510fe0",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 340,
    "end_line": 348,
    "ast_path": "go:method:(*t currentConditionTransformer).Transform#part4_block4",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer\n\tif hf != nil {\n\t\ticc.UVIndex = hf.UVIndex\n\t\ticc.Precipitation = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t\ticc.WeatherConditionNextHour = buildWeatherCondition(hf.WeatherCode, hf.WeatherDescription)\n\t\ticc.PrecipitationNextHour = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t}\n\n\treturn &icc\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer",
    "core": "\tif hf != nil {\n\t\ticc.UVIndex = hf.UVIndex\n\t\ticc.Precipitation = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t\ticc.WeatherConditionNextHour = buildWeatherCondition(hf.WeatherCode, hf.WeatherDescription)\n\t\ticc.PrecipitationNextHour = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t}\n\n\treturn &icc\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "PrecipitationNextHour",
      "UVIndex",
      "WeatherCode",
      "WeatherConditionNextHour",
      "Precipitation",
      "WeatherDescription"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0903c6662bb694af581cf9195066605d12b9df9502054f936c79b49659a19a3a",
      "next": "40f98316fac4fb24afb0f1043aedad4506c43353dba41b1b5bdd19d38feb4f8f"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t currentConditionTransformer",
    "token_counts": {
      "header": 50,
      "core": 103,
      "footer": 0,
      "total": 154
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.073713+00:00",
    "v": 3
  },
  {
    "chunk_id": "40f98316fac4fb24afb0f1043aedad4506c43353dba41b1b5bdd19d38feb4f8f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 350,
    "end_line": 383,
    "ast_path": "go:method:(t *currentConditionTransformer).buildCurrentConditionFromHourlyForecast",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer\nfunc (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\n\tcc.Visibility = 0\n\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\n\treturn &cc\n}",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n// receiver: t *currentConditionTransformer",
    "core": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\n\tcc.Visibility = 0\n\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\n\treturn &cc\n}",
    "footer_context": "",
    "symbols_defined": [
      "buildCurrentConditionFromHourlyForecast"
    ],
    "symbols_referenced": [
      "currentConditionTransformer",
      "Station",
      "WeatherCode",
      "Visibility",
      "WeatherDescription",
      "UTC",
      "CurrentCondition",
      "WindDirection",
      "HumidityPercentage",
      "HourlyCondition",
      "WindSpeed",
      "Pressure",
      "TemperatureFeelsLike",
      "Timestamp",
      "Temperature",
      "DewPoint",
      "Format",
      "fmt.Sprintf",
      "time.Now"
    ],
    "imports_used": [
      "fmt",
      "time"
    ],
    "neighbors": {
      "prev": "e1c33521654817f0be19e89554e9fa50af653f95ec3f4be70c1da1b4e8510fe0",
      "next": "a97238cd634974ecbbe6cd8d05846d1db569b086cf5af0c2822128c73d883bc4"
    },
    "summary_1l": "Go method buildCurrentConditionFromHourlyForecast on t *currentConditionTransformer",
    "qa_terms": "buildCurrentConditionFromHourlyForecast, foreca, proxy, t currentConditionTransformer, weather",
    "token_counts": {
      "header": 20,
      "core": 232,
      "footer": 0,
      "total": 253
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.074476+00:00",
    "v": 3
  },
  {
    "chunk_id": "a97238cd634974ecbbe6cd8d05846d1db569b086cf5af0c2822128c73d883bc4",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 391,
    "end_line": 409,
    "ast_path": "go:method:(*t currentConditionTransformer).computeHeatIndex#part1_block1",
    "text": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\n\tadjustment := 0.0",
    "header_context": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer",
    "core": "func (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\n\tadjustment := 0.0",
    "footer_context": "",
    "symbols_defined": [
      "computeHeatIndex"
    ],
    "symbols_referenced": [
      "rh",
      "currentConditionTransformer",
      "hiSteadman",
      "dewPoint",
      "temperature"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "40f98316fac4fb24afb0f1043aedad4506c43353dba41b1b5bdd19d38feb4f8f",
      "next": "8b7996e3e4eff02b2c73edc3ab1d2d3fa8a68d919d57922c24ff2e3cbeb930a1"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for computeHeatIndex.",
    "qa_terms": "computeHeatIndex, t currentConditionTransformer",
    "token_counts": {
      "header": 15,
      "core": 214,
      "footer": 0,
      "total": 230
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.075424+00:00",
    "v": 3
  },
  {
    "chunk_id": "8b7996e3e4eff02b2c73edc3ab1d2d3fa8a68d919d57922c24ff2e3cbeb930a1",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 410,
    "end_line": 417,
    "ast_path": "go:method:(*t currentConditionTransformer).computeHeatIndex#part2_block2",
    "text": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\n\treturn hiRothfusz + adjustment\n}",
    "header_context": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer",
    "core": "\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\n\treturn hiRothfusz + adjustment\n}",
    "footer_context": "",
    "symbols_defined": [
      "computeHeatIndex"
    ],
    "symbols_referenced": [
      "rh",
      "math",
      "adjustment",
      "temperature",
      "Abs",
      "Sqrt"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a97238cd634974ecbbe6cd8d05846d1db569b086cf5af0c2822128c73d883bc4",
      "next": "deb947ee02f08ea0c6bf69f569871966457f1db08797e6710883d5db88325346"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for computeHeatIndex.",
    "qa_terms": "computeHeatIndex, t currentConditionTransformer",
    "token_counts": {
      "header": 15,
      "core": 101,
      "footer": 0,
      "total": 117
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.075705+00:00",
    "v": 3
  },
  {
    "chunk_id": "deb947ee02f08ea0c6bf69f569871966457f1db08797e6710883d5db88325346",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 423,
    "end_line": 425,
    "ast_path": "go:method:(t *currentConditionTransformer).computeRelativeHumidity",
    "text": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}",
    "header_context": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer",
    "core": "func (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}",
    "footer_context": "",
    "symbols_defined": [
      "computeRelativeHumidity"
    ],
    "symbols_referenced": [
      "currentConditionTransformer",
      "math.Exp",
      "temperature",
      "dewPoint"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "8b7996e3e4eff02b2c73edc3ab1d2d3fa8a68d919d57922c24ff2e3cbeb930a1",
      "next": "b7491f62416a58211c1823d660d293e9bd138e983cba094dcd0eded65d01c3f3"
    },
    "summary_1l": "Go method computeRelativeHumidity on t *currentConditionTransformer",
    "qa_terms": "computeRelativeHumidity, foreca, proxy, t currentConditionTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 65,
      "footer": 0,
      "total": 81
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.076010+00:00",
    "v": 3
  },
  {
    "chunk_id": "b7491f62416a58211c1823d660d293e9bd138e983cba094dcd0eded65d01c3f3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 429,
    "end_line": 439,
    "ast_path": "go:method:(t *currentConditionTransformer).computeTemperatureFeelsLike",
    "text": "package clients\n// receiver: t *currentConditionTransformer\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\n\treturn temperature\n}",
    "header_context": "package clients\n// receiver: t *currentConditionTransformer",
    "core": "func (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\n\treturn temperature\n}",
    "footer_context": "",
    "symbols_defined": [
      "computeTemperatureFeelsLike"
    ],
    "symbols_referenced": [
      "windSpeed",
      "currentConditionTransformer",
      "temperature",
      "heatIndex"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "deb947ee02f08ea0c6bf69f569871966457f1db08797e6710883d5db88325346",
      "next": "e558d900947ce7f6f3aa064d088db038f82bf62ec617e4fcdedc89fd868399ac"
    },
    "summary_1l": "Go method computeTemperatureFeelsLike on t *currentConditionTransformer",
    "qa_terms": "computeTemperatureFeelsLike, foreca, proxy, t currentConditionTransformer, weather",
    "token_counts": {
      "header": 11,
      "core": 68,
      "footer": 0,
      "total": 80
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.076294+00:00",
    "v": 3
  },
  {
    "chunk_id": "e558d900947ce7f6f3aa064d088db038f82bf62ec617e4fcdedc89fd868399ac",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 445,
    "end_line": 454,
    "ast_path": "go:method:(t *currentConditionTransformer).computeWindChill",
    "text": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\n\treturn temperature\n}",
    "header_context": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer",
    "core": "func (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\n\treturn temperature\n}",
    "footer_context": "",
    "symbols_defined": [
      "computeWindChill"
    ],
    "symbols_referenced": [
      "math.Pow",
      "currentConditionTransformer",
      "temperature"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "b7491f62416a58211c1823d660d293e9bd138e983cba094dcd0eded65d01c3f3",
      "next": "2fac02c94eb61ea91f2aa266329abd5ddf750e737c9faa261dbbfd16c8a404d1"
    },
    "summary_1l": "Go method computeWindChill on t *currentConditionTransformer",
    "qa_terms": "computeWindChill, foreca, proxy, t currentConditionTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 121,
      "footer": 0,
      "total": 137
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.076678+00:00",
    "v": 3
  },
  {
    "chunk_id": "2fac02c94eb61ea91f2aa266329abd5ddf750e737c9faa261dbbfd16c8a404d1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 456,
    "end_line": 456,
    "ast_path": "go:type:dailyForecastTransformer (struct)",
    "text": "package clients\ntype dailyForecastTransformer struct{}",
    "header_context": "package clients",
    "core": "type dailyForecastTransformer struct{}",
    "footer_context": "",
    "symbols_defined": [
      "dailyForecastTransformer"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "e558d900947ce7f6f3aa064d088db038f82bf62ec617e4fcdedc89fd868399ac",
      "next": "ce00275b39055d10d4715876ddac6f99fca4937eae9ec28ec5b607894124a499"
    },
    "summary_1l": "Go struct dailyForecastTransformer for weather forecasting",
    "qa_terms": "dailyForecastTransformer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 6,
      "footer": 0,
      "total": 9
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.076744+00:00",
    "v": 3
  },
  {
    "chunk_id": "ce00275b39055d10d4715876ddac6f99fca4937eae9ec28ec5b607894124a499",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 458,
    "end_line": 460,
    "ast_path": "go:function:",
    "text": "package clients\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}",
    "header_context": "package clients",
    "core": "func NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NewDailyForecastTransformer",
      "dailyForecastTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2fac02c94eb61ea91f2aa266329abd5ddf750e737c9faa261dbbfd16c8a404d1",
      "next": "cf6a69a7da49336ee945e4b280346edcc02cf03ba34d38d2f8587821e02ee2e0"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 18,
      "footer": 0,
      "total": 21
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.076989+00:00",
    "v": 3
  },
  {
    "chunk_id": "cf6a69a7da49336ee945e4b280346edcc02cf03ba34d38d2f8587821e02ee2e0",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 462,
    "end_line": 481,
    "ast_path": "go:method:(*t dailyForecastTransformer).Transform#part1_block1",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"math\"\n\t\"time\"\n)\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location)\n",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"math\"\n\t\"time\"\n)\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location)\n",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "Wind",
      "SunsetEpoch",
      "location",
      "PrecipitationNight",
      "WeatherCode",
      "PrecipitationDay",
      "DailyCondition",
      "SunsetTime",
      "WeatherDescription",
      "WindDirection",
      "dailyForecastTransformer",
      "HourlyCondition",
      "SnowNight",
      "WindSpeed",
      "Round",
      "AverageHumidityPercentage",
      "WeatherCondition",
      "UVIndex",
      "PrecipitationProbability",
      "Date",
      "Precipitation",
      "SnowDay",
      "SunriseEpoch",
      "SunriseTime",
      "Location",
      "Epoch",
      "WeatherConditionNight",
      "MaxTemperature",
      "Sprintf",
      "MinTemperature",
      "foreca",
      "time"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ce00275b39055d10d4715876ddac6f99fca4937eae9ec28ec5b607894124a499",
      "next": "aa9c36643dfbc27596f91391496db11e814f5d47a8a57ef4a1000387c03f80be"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t dailyForecastTransformer",
    "token_counts": {
      "header": 56,
      "core": 356,
      "footer": 0,
      "total": 413
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.079188+00:00",
    "v": 3
  },
  {
    "chunk_id": "aa9c36643dfbc27596f91391496db11e814f5d47a8a57ef4a1000387c03f80be",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 482,
    "end_line": 500,
    "ast_path": "go:method:(*t dailyForecastTransformer).Transform#part2_block2",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"math\"\n\t\"time\"\n)\n// receiver: t *dailyForecastTransformer\n\tif len(hfs) > 0 {\n\t\tdf.MinTemperature = utilities.Round(t.getMinimumTemperature(hfs), 1)\n\t\tdf.MaxTemperature = utilities.Round(t.getMaximumTemperature(hfs), 1)\n\t\tdf.AverageHumidityPercentage = int(math.Round(t.getAverageHumidityPercentage(hfs)))\n\n\t\troundedSunriseTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location))\n\t\troundedSunsetTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location))\n\t\tdayHourlyForecasts := t.getDayHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationDay = utilities.Round(t.getTotalPrecipitation(dayHourlyForecasts), 1)\n\n\t\tnightHourlyForecasts := t.getNightHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationNight = utilities.Round(t.getTotalPrecipitation(nightHourlyForecasts), 1)\n\t\tnightWeatherCode := t.getAverageWeatherCodeForHourlyForecasts(nightHourlyForecasts)\n\t\tdf.WeatherConditionNight = buildWeatherCondition(nightWeatherCode, \"\")\n\n\t\tif isSnowWeatherCode(d.WeatherCode) {\n\t\t\tdf.SnowDay = df.PrecipitationDay\n\t\t}\n",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"math\"\n\t\"time\"\n)\n// receiver: t *dailyForecastTransformer",
    "core": "\tif len(hfs) > 0 {\n\t\tdf.MinTemperature = utilities.Round(t.getMinimumTemperature(hfs), 1)\n\t\tdf.MaxTemperature = utilities.Round(t.getMaximumTemperature(hfs), 1)\n\t\tdf.AverageHumidityPercentage = int(math.Round(t.getAverageHumidityPercentage(hfs)))\n\n\t\troundedSunriseTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location))\n\t\troundedSunsetTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location))\n\t\tdayHourlyForecasts := t.getDayHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationDay = utilities.Round(t.getTotalPrecipitation(dayHourlyForecasts), 1)\n\n\t\tnightHourlyForecasts := t.getNightHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationNight = utilities.Round(t.getTotalPrecipitation(nightHourlyForecasts), 1)\n\t\tnightWeatherCode := t.getAverageWeatherCodeForHourlyForecasts(nightHourlyForecasts)\n\t\tdf.WeatherConditionNight = buildWeatherCondition(nightWeatherCode, \"\")\n\n\t\tif isSnowWeatherCode(d.WeatherCode) {\n\t\t\tdf.SnowDay = df.PrecipitationDay\n\t\t}\n",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "AverageHumidityPercentage",
      "SunriseTime",
      "SnowDay",
      "location",
      "PrecipitationNight",
      "WeatherCode",
      "Date",
      "hfs",
      "dayHourlyForecasts",
      "WeatherConditionNight",
      "PrecipitationDay",
      "MaxTemperature",
      "nightHourlyForecasts",
      "Round",
      "SunsetTime",
      "MinTemperature",
      "Sprintf",
      "getTimeForFormatInLocation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "cf6a69a7da49336ee945e4b280346edcc02cf03ba34d38d2f8587821e02ee2e0",
      "next": "761ff488ab104a0999e30b0bcd18ce230109c9b84d245cca48bbddb963463b0d"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t dailyForecastTransformer",
    "token_counts": {
      "header": 56,
      "core": 358,
      "footer": 0,
      "total": 415
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.079996+00:00",
    "v": 3
  },
  {
    "chunk_id": "761ff488ab104a0999e30b0bcd18ce230109c9b84d245cca48bbddb963463b0d",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 501,
    "end_line": 507,
    "ast_path": "go:method:(*t dailyForecastTransformer).Transform#part3_block3",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"math\"\n\t\"time\"\n)\n// receiver: t *dailyForecastTransformer\n\t\tif isSnowWeatherCode(nightWeatherCode) {\n\t\t\tdf.SnowNight = df.PrecipitationNight\n\t\t}\n\t}\n\n\treturn &df\n}",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"math\"\n\t\"time\"\n)\n// receiver: t *dailyForecastTransformer",
    "core": "\t\tif isSnowWeatherCode(nightWeatherCode) {\n\t\t\tdf.SnowNight = df.PrecipitationNight\n\t\t}\n\t}\n\n\treturn &df\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "nightWeatherCode",
      "SnowNight"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "aa9c36643dfbc27596f91391496db11e814f5d47a8a57ef4a1000387c03f80be",
      "next": "24d84330c0d2b9e9acf66f27ae6754684be8e44c3db986e82c52e0714143e4f9"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for Transform.",
    "qa_terms": "Transform, t dailyForecastTransformer",
    "token_counts": {
      "header": 56,
      "core": 35,
      "footer": 0,
      "total": 92
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.080194+00:00",
    "v": 3
  },
  {
    "chunk_id": "24d84330c0d2b9e9acf66f27ae6754684be8e44c3db986e82c52e0714143e4f9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 509,
    "end_line": 519,
    "ast_path": "go:method:(t *dailyForecastTransformer).getMaximumTemperature",
    "text": "package clients\nimport \"math\"\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\n\treturn max\n}",
    "header_context": "package clients\nimport \"math\"\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\n\treturn max\n}",
    "footer_context": "",
    "symbols_defined": [
      "getMaximumTemperature"
    ],
    "symbols_referenced": [
      "HourlyCondition",
      "max",
      "dailyForecastTransformer",
      "math.Inf"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "761ff488ab104a0999e30b0bcd18ce230109c9b84d245cca48bbddb963463b0d",
      "next": "031f8aecf634c6286ac7b0006b2353e27bbdf8b7319c536d7c13af6fda1ea357"
    },
    "summary_1l": "Go method getMaximumTemperature on t *dailyForecastTransformer",
    "qa_terms": "foreca, getMaximumTemperature, proxy, t dailyForecastTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 60,
      "footer": 0,
      "total": 76
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.080552+00:00",
    "v": 3
  },
  {
    "chunk_id": "031f8aecf634c6286ac7b0006b2353e27bbdf8b7319c536d7c13af6fda1ea357",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 521,
    "end_line": 531,
    "ast_path": "go:method:(t *dailyForecastTransformer).getMinimumTemperature",
    "text": "package clients\nimport \"math\"\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\n\treturn min\n}",
    "header_context": "package clients\nimport \"math\"\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\n\treturn min\n}",
    "footer_context": "",
    "symbols_defined": [
      "getMinimumTemperature"
    ],
    "symbols_referenced": [
      "HourlyCondition",
      "min",
      "dailyForecastTransformer",
      "math.Inf"
    ],
    "imports_used": [
      "math"
    ],
    "neighbors": {
      "prev": "24d84330c0d2b9e9acf66f27ae6754684be8e44c3db986e82c52e0714143e4f9",
      "next": "de867e9b89435a009467953676e92222064442c6741d22d00da322521ed5a535"
    },
    "summary_1l": "Go method getMinimumTemperature on t *dailyForecastTransformer",
    "qa_terms": "foreca, getMinimumTemperature, proxy, t dailyForecastTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 60,
      "footer": 0,
      "total": 76
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.080824+00:00",
    "v": 3
  },
  {
    "chunk_id": "de867e9b89435a009467953676e92222064442c6741d22d00da322521ed5a535",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 533,
    "end_line": 545,
    "ast_path": "go:method:(t *dailyForecastTransformer).getAverageHumidityPercentage",
    "text": "package clients\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\n\tvar total int\n\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\n\treturn float64(total) / float64(len(hfs))\n}",
    "header_context": "package clients\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\n\tvar total int\n\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\n\treturn float64(total) / float64(len(hfs))\n}",
    "footer_context": "",
    "symbols_defined": [
      "getAverageHumidityPercentage"
    ],
    "symbols_referenced": [
      "HourlyCondition",
      "total",
      "hfs",
      "dailyForecastTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "031f8aecf634c6286ac7b0006b2353e27bbdf8b7319c536d7c13af6fda1ea357",
      "next": "16f34f6eae7a0e196dc07b56e851a47eb9b832c019786d2596fa20b0060c2df1"
    },
    "summary_1l": "Go method getAverageHumidityPercentage on t *dailyForecastTransformer",
    "qa_terms": "foreca, getAverageHumidityPercentage, proxy, t dailyForecastTransformer, weather",
    "token_counts": {
      "header": 11,
      "core": 74,
      "footer": 0,
      "total": 86
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.081115+00:00",
    "v": 3
  },
  {
    "chunk_id": "16f34f6eae7a0e196dc07b56e851a47eb9b832c019786d2596fa20b0060c2df1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 547,
    "end_line": 562,
    "ast_path": "go:method:(t *dailyForecastTransformer).getDayHourlyForecasts",
    "text": "package clients\nimport \"time\"\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}",
    "header_context": "package clients\nimport \"time\"\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}",
    "footer_context": "",
    "symbols_defined": [
      "getDayHourlyForecasts"
    ],
    "symbols_referenced": [
      "time.Time",
      "Hour",
      "Timestamp",
      "time.ParseInLocation",
      "f",
      "dailyForecastTransformer",
      "continue",
      "time.Location",
      "HourlyCondition",
      "loc",
      "o"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "de867e9b89435a009467953676e92222064442c6741d22d00da322521ed5a535",
      "next": "710728bc4678e5065d4111772e99e583cfd7e58512cae38f58ea19f481cf16e9"
    },
    "summary_1l": "Go method getDayHourlyForecasts on t *dailyForecastTransformer",
    "qa_terms": "foreca, getDayHourlyForecasts, proxy, t dailyForecastTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 122,
      "footer": 0,
      "total": 138
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.081560+00:00",
    "v": 3
  },
  {
    "chunk_id": "710728bc4678e5065d4111772e99e583cfd7e58512cae38f58ea19f481cf16e9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 564,
    "end_line": 579,
    "ast_path": "go:method:(t *dailyForecastTransformer).getNightHourlyForecasts",
    "text": "package clients\nimport \"time\"\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}",
    "header_context": "package clients\nimport \"time\"\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}",
    "footer_context": "",
    "symbols_defined": [
      "getNightHourlyForecasts"
    ],
    "symbols_referenced": [
      "time.Time",
      "Hour",
      "Timestamp",
      "time.ParseInLocation",
      "f",
      "dailyForecastTransformer",
      "continue",
      "time.Location",
      "HourlyCondition",
      "loc",
      "o"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "16f34f6eae7a0e196dc07b56e851a47eb9b832c019786d2596fa20b0060c2df1",
      "next": "1a023271d6992f6ab3480f4c4876c6a2b8b9ee534b2df3f82eb46a4d7ddd0ef7"
    },
    "summary_1l": "Go method getNightHourlyForecasts on t *dailyForecastTransformer",
    "qa_terms": "foreca, getNightHourlyForecasts, proxy, t dailyForecastTransformer, weather",
    "token_counts": {
      "header": 15,
      "core": 122,
      "footer": 0,
      "total": 138
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.082040+00:00",
    "v": 3
  },
  {
    "chunk_id": "1a023271d6992f6ab3480f4c4876c6a2b8b9ee534b2df3f82eb46a4d7ddd0ef7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 581,
    "end_line": 589,
    "ast_path": "go:method:(t *dailyForecastTransformer).getTotalPrecipitation",
    "text": "package clients\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\n\treturn total\n}",
    "header_context": "package clients\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\n\treturn total\n}",
    "footer_context": "",
    "symbols_defined": [
      "getTotalPrecipitation"
    ],
    "symbols_referenced": [
      "dailyForecastTransformer",
      "WeatherCode",
      "HourlyCondition",
      "Precipitation",
      "total"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "710728bc4678e5065d4111772e99e583cfd7e58512cae38f58ea19f481cf16e9",
      "next": "03f55f41302e233d3e81d99e996b7999b0d1d10e24b63f59cef6b68b57b5c04a"
    },
    "summary_1l": "Go method getTotalPrecipitation on t *dailyForecastTransformer",
    "qa_terms": "foreca, getTotalPrecipitation, proxy, t dailyForecastTransformer, weather",
    "token_counts": {
      "header": 11,
      "core": 62,
      "footer": 0,
      "total": 74
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.082406+00:00",
    "v": 3
  },
  {
    "chunk_id": "03f55f41302e233d3e81d99e996b7999b0d1d10e24b63f59cef6b68b57b5c04a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 591,
    "end_line": 613,
    "ast_path": "go:method:(*t dailyForecastTransformer).getAverageWeatherCodeForHourlyForecasts#part1_block1",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n// receiver: t *dailyForecastTransformer\nfunc (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n// receiver: t *dailyForecastTransformer",
    "core": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])",
    "footer_context": "",
    "symbols_defined": [
      "getAverageWeatherCodeForHourlyForecasts"
    ],
    "symbols_referenced": [
      "dailyForecastTransformer",
      "Atoi",
      "WeatherCode",
      "HourlyCondition",
      "tokens",
      "c",
      "Split"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1a023271d6992f6ab3480f4c4876c6a2b8b9ee534b2df3f82eb46a4d7ddd0ef7",
      "next": "1af8568f1a9aa6134b797ec083824b0f7debade23cb77f20c549156453b25eda"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for getAverageWeatherCodeForHourlyForecasts.",
    "qa_terms": "getAverageWeatherCodeForHourlyForecasts, t dailyForecastTransformer",
    "token_counts": {
      "header": 26,
      "core": 160,
      "footer": 0,
      "total": 187
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.083470+00:00",
    "v": 3
  },
  {
    "chunk_id": "1af8568f1a9aa6134b797ec083824b0f7debade23cb77f20c549156453b25eda",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 614,
    "end_line": 633,
    "ast_path": "go:method:(*t dailyForecastTransformer).getAverageWeatherCodeForHourlyForecasts#part2_block2",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n// receiver: t *dailyForecastTransformer\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n// receiver: t *dailyForecastTransformer",
    "core": "\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}",
    "footer_context": "",
    "symbols_defined": [
      "getAverageWeatherCodeForHourlyForecasts"
    ],
    "symbols_referenced": [
      "pt",
      "hfs",
      "tokens",
      "pr",
      "Atoi"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "03f55f41302e233d3e81d99e996b7999b0d1d10e24b63f59cef6b68b57b5c04a",
      "next": "e6340a351725ddf10212077d868d5e7e4f18aba0c978c88ff5735e03c4818393"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for getAverageWeatherCodeForHourlyForecasts.",
    "qa_terms": "getAverageWeatherCodeForHourlyForecasts, t dailyForecastTransformer",
    "token_counts": {
      "header": 26,
      "core": 98,
      "footer": 0,
      "total": 125
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.083769+00:00",
    "v": 3
  },
  {
    "chunk_id": "e6340a351725ddf10212077d868d5e7e4f18aba0c978c88ff5735e03c4818393",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 634,
    "end_line": 639,
    "ast_path": "go:method:(*t dailyForecastTransformer).getAverageWeatherCodeForHourlyForecasts#part3_block3",
    "text": "package clients\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n// receiver: t *dailyForecastTransformer\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}",
    "header_context": "package clients\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n// receiver: t *dailyForecastTransformer",
    "core": "\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}",
    "footer_context": "",
    "symbols_defined": [
      "getAverageWeatherCodeForHourlyForecasts"
    ],
    "symbols_referenced": [
      "averageCloudiness",
      "cloudiness",
      "averagePrecipitationType",
      "precipitationType",
      "obs",
      "Round",
      "Sprintf",
      "precipitationRate",
      "averagePrecipitationRate"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1af8568f1a9aa6134b797ec083824b0f7debade23cb77f20c549156453b25eda",
      "next": "313fbd349ad3491c5a39f391367c9bebe10e1afc6147110aad363d09e15beca4"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for getAverageWeatherCodeForHourlyForecasts.",
    "qa_terms": "getAverageWeatherCodeForHourlyForecasts, t dailyForecastTransformer",
    "token_counts": {
      "header": 26,
      "core": 96,
      "footer": 0,
      "total": 123
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.084041+00:00",
    "v": 3
  },
  {
    "chunk_id": "313fbd349ad3491c5a39f391367c9bebe10e1afc6147110aad363d09e15beca4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 641,
    "end_line": 641,
    "ast_path": "go:type:hourlyForecastTransformer (struct)",
    "text": "package clients\ntype hourlyForecastTransformer struct{}",
    "header_context": "package clients",
    "core": "type hourlyForecastTransformer struct{}",
    "footer_context": "",
    "symbols_defined": [
      "hourlyForecastTransformer"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "e6340a351725ddf10212077d868d5e7e4f18aba0c978c88ff5735e03c4818393",
      "next": "6f416f84ec3b5d66abf83ff61fbb307d4464e549d049e501e57623537be23455"
    },
    "summary_1l": "Go struct hourlyForecastTransformer for weather forecasting",
    "qa_terms": "hourlyForecastTransformer, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 6,
      "footer": 0,
      "total": 9
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.084141+00:00",
    "v": 3
  },
  {
    "chunk_id": "6f416f84ec3b5d66abf83ff61fbb307d4464e549d049e501e57623537be23455",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 643,
    "end_line": 645,
    "ast_path": "go:function:",
    "text": "package clients\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}",
    "header_context": "package clients",
    "core": "func NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "hourlyForecastTransformer",
      "NewHourlyForecastTransformer"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "313fbd349ad3491c5a39f391367c9bebe10e1afc6147110aad363d09e15beca4",
      "next": "2e5fd7f400eed50c03f105261c6b3d3ebfb16604ce494a3f2673436fab33df79"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 21,
      "footer": 0,
      "total": 24
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.084274+00:00",
    "v": 3
  },
  {
    "chunk_id": "2e5fd7f400eed50c03f105261c6b3d3ebfb16604ce494a3f2673436fab33df79",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 647,
    "end_line": 665,
    "ast_path": "go:method:(t *hourlyForecastTransformer).Transform",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *hourlyForecastTransformer\nfunc (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\n\treturn &hf\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"time\"\n)\n// receiver: t *hourlyForecastTransformer",
    "core": "func (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\n\treturn &hf\n}",
    "footer_context": "",
    "symbols_defined": [
      "Transform"
    ],
    "symbols_referenced": [
      "Wind",
      "location",
      "WeatherCode",
      "WeatherDescription",
      "WindDirection",
      "utilities.Round",
      "HumidityPercentage",
      "WindSpeed",
      "Pressure",
      "TemperatureFeelsLike",
      "Timestamp",
      "WeatherCondition",
      "UVIndex",
      "PrecipitationProbability",
      "Precipitation",
      "foreca.HourlyCondition",
      "hourlyForecastTransformer",
      "Temperature",
      "time.Location",
      "Epoch",
      "Snow"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/pkg/utilities"
    ],
    "neighbors": {
      "prev": "6f416f84ec3b5d66abf83ff61fbb307d4464e549d049e501e57623537be23455",
      "next": "6e8a190d613567947c1d2e85d92242792b1ff965d0266074e873f68b0cebfe22"
    },
    "summary_1l": "Go method Transform on t *hourlyForecastTransformer",
    "qa_terms": "Transform, foreca, proxy, t hourlyForecastTransformer, weather",
    "token_counts": {
      "header": 51,
      "core": 244,
      "footer": 0,
      "total": 296
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.085006+00:00",
    "v": 3
  },
  {
    "chunk_id": "6e8a190d613567947c1d2e85d92242792b1ff965d0266074e873f68b0cebfe22",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 667,
    "end_line": 673,
    "ast_path": "go:function:",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n)\nfunc buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n)",
    "core": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Code",
      "description",
      "language.English",
      "String",
      "Description",
      "cases.Title",
      "code",
      "foreca.WeatherCondition"
    ],
    "imports_used": [
      "golang.org/x/text/language",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "golang.org/x/text/cases"
    ],
    "neighbors": {
      "prev": "2e5fd7f400eed50c03f105261c6b3d3ebfb16604ce494a3f2673436fab33df79",
      "next": "35152fb1c61a950bd9a90d8cbca78936e2ce5ece959b6c2593938cf866577567"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 40,
      "core": 52,
      "footer": 0,
      "total": 92
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.085332+00:00",
    "v": 3
  },
  {
    "chunk_id": "35152fb1c61a950bd9a90d8cbca78936e2ce5ece959b6c2593938cf866577567",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 675,
    "end_line": 680,
    "ast_path": "go:function:",
    "text": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}",
    "header_context": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "core": "func buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Wind",
      "Gust",
      "speed",
      "foreca.WindGust"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "6e8a190d613567947c1d2e85d92242792b1ff965d0266074e873f68b0cebfe22",
      "next": "325db43aa4612aef777b5ecc94a06170eb46a4fa8de755dc2fcc49781a65eaef"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 21,
      "core": 52,
      "footer": 0,
      "total": 73
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.085561+00:00",
    "v": 3
  },
  {
    "chunk_id": "325db43aa4612aef777b5ecc94a06170eb46a4fa8de755dc2fcc49781a65eaef",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 682,
    "end_line": 687,
    "ast_path": "go:function:",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n)\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n)",
    "core": "func buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "utilities.Round",
      "Speed",
      "direction",
      "foreca.Wind",
      "Direction"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/pkg/utilities"
    ],
    "neighbors": {
      "prev": "35152fb1c61a950bd9a90d8cbca78936e2ce5ece959b6c2593938cf866577567",
      "next": "4be5295216917d68e3714cd5eef28d75bd6ff213169ab461e0514d3a175f783c"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 39,
      "core": 47,
      "footer": 0,
      "total": 86
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.085807+00:00",
    "v": 3
  },
  {
    "chunk_id": "4be5295216917d68e3714cd5eef28d75bd6ff213169ab461e0514d3a175f783c",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 689,
    "end_line": 711,
    "ast_path": "go:function_declaration#part1_block1",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strings\"\n)\nfunc parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strings\"\n)",
    "core": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "WeatherCodeRain",
      "TrimLeft",
      "WeatherCode"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "325db43aa4612aef777b5ecc94a06170eb46a4fa8de755dc2fcc49781a65eaef",
      "next": "246dd9833cb967c77702ac7e765772ec84842951efaa68b62bddc7dd5b70c1b0"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 26,
      "core": 181,
      "footer": 0,
      "total": 207
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.086731+00:00",
    "v": 3
  },
  {
    "chunk_id": "246dd9833cb967c77702ac7e765772ec84842951efaa68b62bddc7dd5b70c1b0",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 712,
    "end_line": 721,
    "ast_path": "go:function_declaration#part2_block2",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strings\"\n)\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strings\"\n)",
    "core": "\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "WeatherCodeChanceOfSnow"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4be5295216917d68e3714cd5eef28d75bd6ff213169ab461e0514d3a175f783c",
      "next": "1aa9a55ef5bb36e9be72912f3a5b8a6ca29d0cbc39bf18a7c6a4d7598895f4f8"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 26,
      "core": 106,
      "footer": 0,
      "total": 132
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.086996+00:00",
    "v": 3
  },
  {
    "chunk_id": "1aa9a55ef5bb36e9be72912f3a5b8a6ca29d0cbc39bf18a7c6a4d7598895f4f8",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 722,
    "end_line": 729,
    "ast_path": "go:function_declaration#part3_block3",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strings\"\n)\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\n\treturn foreca.WeatherCode(wc)\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strings\"\n)",
    "core": "\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\n\treturn foreca.WeatherCode(wc)\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "wc",
      "WeatherCode"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "246dd9833cb967c77702ac7e765772ec84842951efaa68b62bddc7dd5b70c1b0",
      "next": "c3458311d5b1b06b653b041afbd903ff6bd0d93e868d104986bccdcdb558e8b1"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 26,
      "core": 47,
      "footer": 0,
      "total": 73
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.087165+00:00",
    "v": 3
  },
  {
    "chunk_id": "c3458311d5b1b06b653b041afbd903ff6bd0d93e868d104986bccdcdb558e8b1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 731,
    "end_line": 736,
    "ast_path": "go:function:",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"strings\"\n)\nfunc isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\n\treturn utilities.ContainsString(snowyConditions, c)\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"strings\"\n)",
    "core": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\n\treturn utilities.ContainsString(snowyConditions, c)\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "utilities.ContainsString",
      "strings.TrimLeft",
      "c"
    ],
    "imports_used": [
      "strings",
      "go.impalastudios.com/weather/foreca_proxy/pkg/utilities"
    ],
    "neighbors": {
      "prev": "1aa9a55ef5bb36e9be72912f3a5b8a6ca29d0cbc39bf18a7c6a4d7598895f4f8",
      "next": "151359565cadb0ec90ea52407d4202a5f0cb22885a3c92210105d852e42bd621"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 25,
      "core": 60,
      "footer": 0,
      "total": 85
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.087446+00:00",
    "v": 3
  },
  {
    "chunk_id": "151359565cadb0ec90ea52407d4202a5f0cb22885a3c92210105d852e42bd621",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 738,
    "end_line": 744,
    "ast_path": "go:function:",
    "text": "package clients\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\n\treturn precipitation\n}",
    "header_context": "package clients",
    "core": "func parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\n\treturn precipitation\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "code",
      "precipitation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c3458311d5b1b06b653b041afbd903ff6bd0d93e868d104986bccdcdb558e8b1",
      "next": "bae7e96956d5f16968e5865d1fdc18a799bbd16120ca0916845ca80c731270ca"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 39,
      "footer": 0,
      "total": 42
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.087624+00:00",
    "v": 3
  },
  {
    "chunk_id": "bae7e96956d5f16968e5865d1fdc18a799bbd16120ca0916845ca80c731270ca",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 746,
    "end_line": 751,
    "ast_path": "go:function:",
    "text": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}",
    "header_context": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"",
    "core": "func getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Degrees",
      "foreca.WindDirection",
      "d",
      "Abbreviation"
    ],
    "imports_used": [
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "151359565cadb0ec90ea52407d4202a5f0cb22885a3c92210105d852e42bd621",
      "next": "4fe235e8156e2c0f055c509661f168f30bc45b6db7f3ec81703cd41e9d43a84b"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 21,
      "core": 46,
      "footer": 0,
      "total": 67
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.087838+00:00",
    "v": 3
  },
  {
    "chunk_id": "4fe235e8156e2c0f055c509661f168f30bc45b6db7f3ec81703cd41e9d43a84b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 753,
    "end_line": 790,
    "ast_path": "go:function:",
    "text": "package clients\nfunc getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}",
    "header_context": "package clients",
    "core": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "bae7e96956d5f16968e5865d1fdc18a799bbd16120ca0916845ca80c731270ca",
      "next": "77b71cf211b9a05c30e61ee2ea3fc47bf9f8b8da0385bb490a4594141fa39763"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 192,
      "footer": 0,
      "total": 195
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.088325+00:00",
    "v": 3
  },
  {
    "chunk_id": "77b71cf211b9a05c30e61ee2ea3fc47bf9f8b8da0385bb490a4594141fa39763",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 792,
    "end_line": 818,
    "ast_path": "go:function:",
    "text": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}",
    "header_context": "package clients\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"strconv\"\n\t\"strings\"\n)",
    "core": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "foreca.PressureTrendSteady",
      "foreca.PressureTrend",
      "foreca.PressureTrendFalling",
      "Trend",
      "strings.TrimLeft",
      "strconv.ParseFloat",
      "Millibar",
      "foreca.PressureTrendRising",
      "foreca.Pressure"
    ],
    "imports_used": [
      "strings",
      "strconv",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "4fe235e8156e2c0f055c509661f168f30bc45b6db7f3ec81703cd41e9d43a84b",
      "next": "5905ae3d6ccae0a0641547a5810cb89d1ac58fa01d25a68479c41c174ad847b7"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 29,
      "core": 168,
      "footer": 0,
      "total": 197
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.088834+00:00",
    "v": 3
  },
  {
    "chunk_id": "5905ae3d6ccae0a0641547a5810cb89d1ac58fa01d25a68479c41c174ad847b7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 820,
    "end_line": 829,
    "ast_path": "go:function:",
    "text": "package clients\nimport \"time\"\nfunc getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn ts.In(utc).Unix()\n}",
    "header_context": "package clients\nimport \"time\"",
    "core": "func getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn ts.In(utc).Unix()\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "time.ParseInLocation",
      "location",
      "time.Location",
      "Unix",
      "utc",
      "time.LoadLocation",
      "In"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "77b71cf211b9a05c30e61ee2ea3fc47bf9f8b8da0385bb490a4594141fa39763",
      "next": "1f4a054d950c0b144360260dee42995545ef81accabfca8fa5ea680154b75eff"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "LoadLocation, foreca, proxy, weather",
    "token_counts": {
      "header": 7,
      "core": 68,
      "footer": 0,
      "total": 75
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.089113+00:00",
    "v": 3
  },
  {
    "chunk_id": "1f4a054d950c0b144360260dee42995545ef81accabfca8fa5ea680154b75eff",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 831,
    "end_line": 838,
    "ast_path": "go:function:",
    "text": "package clients\nimport \"time\"\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\n\treturn &ts\n}",
    "header_context": "package clients\nimport \"time\"",
    "core": "func getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\n\treturn &ts\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "time.Time",
      "time.ParseInLocation",
      "location",
      "time.Location"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "5905ae3d6ccae0a0641547a5810cb89d1ac58fa01d25a68479c41c174ad847b7",
      "next": "6d7ddae909966870ff70ba5eb69b7848b1f28528cc585c8b1d80381d1a52663b"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 7,
      "core": 53,
      "footer": 0,
      "total": 60
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.089343+00:00",
    "v": 3
  },
  {
    "chunk_id": "6d7ddae909966870ff70ba5eb69b7848b1f28528cc585c8b1d80381d1a52663b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go",
    "language": "go",
    "start_line": 840,
    "end_line": 846,
    "ast_path": "go:function:",
    "text": "package clients\nimport \"time\"\nfunc roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\n\treturn &roundedTime\n\n}",
    "header_context": "package clients\nimport \"time\"",
    "core": "func roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\n\treturn &roundedTime\n\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "time.Time",
      "Add",
      "missingSeconds",
      "time.Unix",
      "time.Duration",
      "time.Second"
    ],
    "imports_used": [
      "time"
    ],
    "neighbors": {
      "prev": "1f4a054d950c0b144360260dee42995545ef81accabfca8fa5ea680154b75eff",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 7,
      "core": 62,
      "footer": 0,
      "total": 69
    },
    "file_sha": "d7197a8103249507f9a5a9128b9f3fc0ce213af545e20574e9a5a967528a5cc3",
    "created_at": "2025-10-07T09:26:57.089589+00:00",
    "v": 3
  },
  {
    "chunk_id": "5ccb5ca936519bddc059a3056e5be24775b4643404874ca712aecd84052cd41a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 1,
    "end_line": 17,
    "ast_path": "go:file_header",
    "text": "package clients_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)",
    "header_context": "",
    "core": "package clients_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "bytes",
      "context",
      "errors",
      "github.com/stretchr/testify/suite",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.uber.org/mock/gomock",
      "io",
      "net/http",
      "testing",
      "time"
    ],
    "neighbors": {
      "prev": null,
      "next": "fca9c3b7f6071047bd796c37cf1b946a894137966eddcdfdbb86b6564ad9c16f"
    },
    "summary_1l": "Go package clients_test",
    "qa_terms": "clients_test, foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 125,
      "footer": 0,
      "total": 125
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.060999+00:00",
    "v": 3
  },
  {
    "chunk_id": "fca9c3b7f6071047bd796c37cf1b946a894137966eddcdfdbb86b6564ad9c16f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 20,
    "end_line": 22,
    "ast_path": "go:type:currentConditionTransformer (interface)",
    "text": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\ncurrentConditionTransformer interface {\nTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n}",
    "header_context": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)",
    "core": "currentConditionTransformer interface {\nTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n}",
    "footer_context": "",
    "symbols_defined": [
      "currentConditionTransformer"
    ],
    "symbols_referenced": [
      "clients.CurrentCondition",
      "Transform",
      "time.Location",
      "clients.HourlyCondition",
      "foreca.CurrentCondition"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "5ccb5ca936519bddc059a3056e5be24775b4643404874ca712aecd84052cd41a",
      "next": "4b6dcdd2dd5f894064d48a9ac29ff4c8975fed1095e2a393b026791c1306fdd8"
    },
    "summary_1l": "Go interface currentConditionTransformer for weather forecasting",
    "qa_terms": "currentConditionTransformer, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 48,
      "core": 28,
      "footer": 0,
      "total": 76
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.061302+00:00",
    "v": 3
  },
  {
    "chunk_id": "4b6dcdd2dd5f894064d48a9ac29ff4c8975fed1095e2a393b026791c1306fdd8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 23,
    "end_line": 25,
    "ast_path": "go:type:dailyForecastTransformer (interface)",
    "text": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\ndailyForecastTransformer interface {\nTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n}",
    "header_context": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)",
    "core": "dailyForecastTransformer interface {\nTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n}",
    "footer_context": "",
    "symbols_defined": [
      "dailyForecastTransformer"
    ],
    "symbols_referenced": [
      "Transform",
      "time.Location",
      "clients.DailyCondition",
      "clients.HourlyCondition",
      "foreca.DailyCondition"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "fca9c3b7f6071047bd796c37cf1b946a894137966eddcdfdbb86b6564ad9c16f",
      "next": "837b42559518b5306f7f2dde99ae47d6bb1c7cc0f2ced63a0fb93ebd27cf075a"
    },
    "summary_1l": "Go interface dailyForecastTransformer for weather forecasting",
    "qa_terms": "dailyForecastTransformer, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 48,
      "core": 30,
      "footer": 0,
      "total": 78
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.061476+00:00",
    "v": 3
  },
  {
    "chunk_id": "837b42559518b5306f7f2dde99ae47d6bb1c7cc0f2ced63a0fb93ebd27cf075a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 26,
    "end_line": 28,
    "ast_path": "go:type:hourlyForecastTransformer (interface)",
    "text": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\nhourlyForecastTransformer interface {\nTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n}",
    "header_context": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)",
    "core": "hourlyForecastTransformer interface {\nTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n}",
    "footer_context": "",
    "symbols_defined": [
      "hourlyForecastTransformer"
    ],
    "symbols_referenced": [
      "foreca.HourlyCondition",
      "time.Location",
      "Transform",
      "clients.HourlyCondition"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "4b6dcdd2dd5f894064d48a9ac29ff4c8975fed1095e2a393b026791c1306fdd8",
      "next": "4b726449465bd5463e4093d2cf9eae6c95650734f6fb2fa2f2784f2aa99ed93f"
    },
    "summary_1l": "Go interface hourlyForecastTransformer for weather forecasting",
    "qa_terms": "hourlyForecastTransformer, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 48,
      "core": 25,
      "footer": 0,
      "total": 73
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.061611+00:00",
    "v": 3
  },
  {
    "chunk_id": "4b726449465bd5463e4093d2cf9eae6c95650734f6fb2fa2f2784f2aa99ed93f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 29,
    "end_line": 31,
    "ast_path": "go:type:transformer (interface)",
    "text": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\ntransformer interface {\nTransform(*clients.Response, *time.Location) *foreca.Forecast\n}",
    "header_context": "package clients_test\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)",
    "core": "transformer interface {\nTransform(*clients.Response, *time.Location) *foreca.Forecast\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformer"
    ],
    "symbols_referenced": [
      "foreca.Forecast",
      "time.Location",
      "Transform",
      "clients.Response"
    ],
    "imports_used": [
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "837b42559518b5306f7f2dde99ae47d6bb1c7cc0f2ced63a0fb93ebd27cf075a",
      "next": "6f5bf4d6376ea5b4c718b00c69cdf4678d79a0ee651c0e532394db878f8bf09b"
    },
    "summary_1l": "Go interface transformer for weather forecasting",
    "qa_terms": "transformer, interface, time, foreca, weather, proxy",
    "token_counts": {
      "header": 48,
      "core": 20,
      "footer": 0,
      "total": 68
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.061731+00:00",
    "v": 3
  },
  {
    "chunk_id": "6f5bf4d6376ea5b4c718b00c69cdf4678d79a0ee651c0e532394db878f8bf09b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 32,
    "end_line": 39,
    "ast_path": "go:type:currentConditionTransformerTestSuite (struct)",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)\ncurrentConditionTransformerTestSuite struct {\nsuite.Suite\ntransformer     currentConditionTransformer\ntime            time.Time\ntimestampFormat string\nlocation        *time.Location\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)",
    "core": "currentConditionTransformerTestSuite struct {\nsuite.Suite\ntransformer     currentConditionTransformer\ntime            time.Time\ntimestampFormat string\nlocation        *time.Location\n}",
    "footer_context": "",
    "symbols_defined": [
      "currentConditionTransformerTestSuite"
    ],
    "symbols_referenced": [
      "time.Time",
      "currentConditionTransformer",
      "time.Location",
      "suite.Suite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time"
    ],
    "neighbors": {
      "prev": "4b726449465bd5463e4093d2cf9eae6c95650734f6fb2fa2f2784f2aa99ed93f",
      "next": "972597149fb1c3f61f1c9f904a774f3172f5f3476b9d79eea2b51a4840ffd7b1"
    },
    "summary_1l": "Go struct currentConditionTransformerTestSuite for weather forecasting",
    "qa_terms": "currentConditionTransformerTestSuite, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 18,
      "core": 34,
      "footer": 0,
      "total": 52
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.061896+00:00",
    "v": 3
  },
  {
    "chunk_id": "972597149fb1c3f61f1c9f904a774f3172f5f3476b9d79eea2b51a4840ffd7b1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 40,
    "end_line": 52,
    "ast_path": "go:type:dailyForecastTransformerTestSuite (struct)",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)\ndailyForecastTransformerTestSuite struct {\nsuite.Suite\ntransformer     dailyForecastTransformer\ntime            time.Time\ndaystampFormat  string\ntimestampFormat string\ndaytimeFormat   string\ntimeFormat      string\nsunrise         time.Time\nsunset          time.Time\nlocation        *time.Location\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)",
    "core": "dailyForecastTransformerTestSuite struct {\nsuite.Suite\ntransformer     dailyForecastTransformer\ntime            time.Time\ndaystampFormat  string\ntimestampFormat string\ndaytimeFormat   string\ntimeFormat      string\nsunrise         time.Time\nsunset          time.Time\nlocation        *time.Location\n}",
    "footer_context": "",
    "symbols_defined": [
      "dailyForecastTransformerTestSuite"
    ],
    "symbols_referenced": [
      "time.Time",
      "time.Location",
      "suite.Suite",
      "dailyForecastTransformer"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time"
    ],
    "neighbors": {
      "prev": "6f5bf4d6376ea5b4c718b00c69cdf4678d79a0ee651c0e532394db878f8bf09b",
      "next": "7a18e52448ff9eb3767f501d4e4e10698affdde6fb819fdfdab814402c84ca3c"
    },
    "summary_1l": "Go struct dailyForecastTransformerTestSuite for weather forecasting",
    "qa_terms": "dailyForecastTransformerTestSuite, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 18,
      "core": 63,
      "footer": 0,
      "total": 81
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.062129+00:00",
    "v": 3
  },
  {
    "chunk_id": "7a18e52448ff9eb3767f501d4e4e10698affdde6fb819fdfdab814402c84ca3c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 53,
    "end_line": 61,
    "ast_path": "go:type:hourlyForecastTransformerTestSuite (struct)",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)\nhourlyForecastTransformerTestSuite struct {\nsuite.Suite\ntransformer     hourlyForecastTransformer\ntime            time.Time\ntimestampFormat string\ndaytimeFormat   string\nlocation        *time.Location\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)",
    "core": "hourlyForecastTransformerTestSuite struct {\nsuite.Suite\ntransformer     hourlyForecastTransformer\ntime            time.Time\ntimestampFormat string\ndaytimeFormat   string\nlocation        *time.Location\n}",
    "footer_context": "",
    "symbols_defined": [
      "hourlyForecastTransformerTestSuite"
    ],
    "symbols_referenced": [
      "time.Time",
      "hourlyForecastTransformer",
      "time.Location",
      "suite.Suite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time"
    ],
    "neighbors": {
      "prev": "972597149fb1c3f61f1c9f904a774f3172f5f3476b9d79eea2b51a4840ffd7b1",
      "next": "f0fe8d6a658daf4c19da3e96bba02102b1de54271fcce0c2001a988a81e6f48f"
    },
    "summary_1l": "Go struct hourlyForecastTransformerTestSuite for weather forecasting",
    "qa_terms": "hourlyForecastTransformerTestSuite, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 18,
      "core": 41,
      "footer": 0,
      "total": 59
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.062289+00:00",
    "v": 3
  },
  {
    "chunk_id": "f0fe8d6a658daf4c19da3e96bba02102b1de54271fcce0c2001a988a81e6f48f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 62,
    "end_line": 74,
    "ast_path": "go:type:transformerTestSuite (struct)",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)\ntransformerTestSuite struct {\nsuite.Suite\ntransformer     transformer\ntime            time.Time\ndaystampFormat  string\ntimestampFormat string\ndaytimeFormat   string\ntimeFormat      string\nsunrise         time.Time\nsunset          time.Time\nlocation        *time.Location\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"time\"\n)",
    "core": "transformerTestSuite struct {\nsuite.Suite\ntransformer     transformer\ntime            time.Time\ndaystampFormat  string\ntimestampFormat string\ndaytimeFormat   string\ntimeFormat      string\nsunrise         time.Time\nsunset          time.Time\nlocation        *time.Location\n}",
    "footer_context": "",
    "symbols_defined": [
      "transformerTestSuite"
    ],
    "symbols_referenced": [
      "time.Time",
      "transformer",
      "time.Location",
      "suite.Suite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time"
    ],
    "neighbors": {
      "prev": "7a18e52448ff9eb3767f501d4e4e10698affdde6fb819fdfdab814402c84ca3c",
      "next": "8bc74f6ce77f9b87bd93085e09899fdff0892bd688f16ffef7c6db3f0f41e6e8"
    },
    "summary_1l": "Go struct transformerTestSuite for weather forecasting",
    "qa_terms": "transformerTestSuite, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 18,
      "core": 60,
      "footer": 0,
      "total": 78
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.062497+00:00",
    "v": 3
  },
  {
    "chunk_id": "8bc74f6ce77f9b87bd93085e09899fdff0892bd688f16ffef7c6db3f0f41e6e8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 75,
    "end_line": 80,
    "ast_path": "go:type:forecaClientTestSuite (struct)",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\nforecaClientTestSuite struct {\nsuite.Suite\nmockController *gomock.Controller\nlocation       *time.Location\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)",
    "core": "forecaClientTestSuite struct {\nsuite.Suite\nmockController *gomock.Controller\nlocation       *time.Location\n}",
    "footer_context": "",
    "symbols_defined": [
      "forecaClientTestSuite"
    ],
    "symbols_referenced": [
      "gomock.Controller",
      "time.Location",
      "suite.Suite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "f0fe8d6a658daf4c19da3e96bba02102b1de54271fcce0c2001a988a81e6f48f",
      "next": "08a7dd480e808e46a6ff7c048f071cd3ca1a555e14212f4c426339437bf5b67d"
    },
    "summary_1l": "Go struct forecaClientTestSuite for weather forecasting",
    "qa_terms": "forecaClientTestSuite, struct, time, foreca, weather, proxy",
    "token_counts": {
      "header": 28,
      "core": 25,
      "footer": 0,
      "total": 53
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.062617+00:00",
    "v": 3
  },
  {
    "chunk_id": "08a7dd480e808e46a6ff7c048f071cd3ca1a555e14212f4c426339437bf5b67d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 83,
    "end_line": 88,
    "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).SetupSuite",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "func (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "currentConditionTransformerTestSuite",
      "In",
      "time.Now",
      "clients.NewCurrentConditionTransformer",
      "suite.transformer",
      "suite.time",
      "time.LoadLocation",
      "suite.location",
      "suite.timestampFormat"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "8bc74f6ce77f9b87bd93085e09899fdff0892bd688f16ffef7c6db3f0f41e6e8",
      "next": "c681ba0fa44e30f53e0cb51ed448c6af3d46ab5a23f33f2859406564459e1e44"
    },
    "summary_1l": "Go method SetupSuite on suite *currentConditionTransformerTestSuite",
    "qa_terms": "LoadLocation, SetupSuite, foreca, proxy, suite currentConditionTransformerTestSuite, weather",
    "token_counts": {
      "header": 49,
      "core": 67,
      "footer": 0,
      "total": 117
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.063109+00:00",
    "v": 3
  },
  {
    "chunk_id": "c681ba0fa44e30f53e0cb51ed448c6af3d46ab5a23f33f2859406564459e1e44",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 90,
    "end_line": 94,
    "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformMissingCurrentCondition",
    "text": "package clients_test\nimport \"github.com/stretchr/testify/suite\"\n// receiver: suite *currentConditionTransformerTestSuite\nfunc (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\n\tsuite.Assert().Nil(cc)\n}",
    "header_context": "package clients_test\nimport \"github.com/stretchr/testify/suite\"\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\n\tsuite.Assert().Nil(cc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingCurrentCondition"
    ],
    "symbols_referenced": [
      "cc",
      "currentConditionTransformerTestSuite",
      "suite.transformer",
      "suite.Assert",
      "Nil",
      "Transform"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite"
    ],
    "neighbors": {
      "prev": "08a7dd480e808e46a6ff7c048f071cd3ca1a555e14212f4c426339437bf5b67d",
      "next": "ea12a2ceac39126109ac1353748ad8983c643374ab61e33eb789ea560dbec009"
    },
    "summary_1l": "Go method TestTransformMissingCurrentCondition on suite *currentConditionTransformerTestSuite",
    "qa_terms": "TestTransformMissingCurrentCondition, foreca, proxy, suite currentConditionTransformerTestSuite, weather",
    "token_counts": {
      "header": 23,
      "core": 36,
      "footer": 0,
      "total": 60
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.063365+00:00",
    "v": 3
  },
  {
    "chunk_id": "ea12a2ceac39126109ac1353748ad8983c643374ab61e33eb789ea560dbec009",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 96,
    "end_line": 110,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformMissingHourlyCondition#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\nfunc (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyCondition"
    ],
    "symbols_referenced": [
      "HumidityPercentage",
      "timestampFormat",
      "WeatherDescription",
      "Temperature",
      "Pressure",
      "currentConditionTransformerTestSuite",
      "DewPoint",
      "WindDirection",
      "CurrentCondition",
      "WindSpeed",
      "Format",
      "TemperatureFeelsLike",
      "Visibility",
      "Transform",
      "Timestamp",
      "WeatherCondition",
      "WeatherCode"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c681ba0fa44e30f53e0cb51ed448c6af3d46ab5a23f33f2859406564459e1e44",
      "next": "3c6d3a88e9bf826efd145ebbd52c0f1d5b65156540287f96e2b15d9fe2d975cf"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyCondition.",
    "qa_terms": "TestTransformMissingHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 145,
      "footer": 0,
      "total": 212
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.064701+00:00",
    "v": 3
  },
  {
    "chunk_id": "3c6d3a88e9bf826efd145ebbd52c0f1d5b65156540287f96e2b15d9fe2d975cf",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 111,
    "end_line": 125,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformMissingHourlyCondition#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t}, nil, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t}, nil, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyCondition"
    ],
    "symbols_referenced": [
      "location",
      "HumidityPercentage",
      "Description",
      "Temperature",
      "Code",
      "WeatherConditionNextHour",
      "Unix",
      "Epoch",
      "Precipitation",
      "TemperatureFeelsLike",
      "Visibility",
      "PrecipitationNextHour",
      "CurrentCondition",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ea12a2ceac39126109ac1353748ad8983c643374ab61e33eb789ea560dbec009",
      "next": "7813532d31a0ad5800a484e793245cfd15ff0300c120225617e53b02b3aba91f"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyCondition.",
    "qa_terms": "TestTransformMissingHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 122,
      "footer": 0,
      "total": 189
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.065137+00:00",
    "v": 3
  },
  {
    "chunk_id": "7813532d31a0ad5800a484e793245cfd15ff0300c120225617e53b02b3aba91f",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 126,
    "end_line": 140,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformMissingHourlyCondition#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyCondition"
    ],
    "symbols_referenced": [
      "Speed",
      "Wind",
      "Pressure",
      "WindDirection",
      "DewPoint",
      "WindGust",
      "Trend",
      "Degrees",
      "HeatIndex",
      "Millibar",
      "Direction",
      "Abbreviation",
      "PressureTrendSteady",
      "Gust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3c6d3a88e9bf826efd145ebbd52c0f1d5b65156540287f96e2b15d9fe2d975cf",
      "next": "1dd0038cb76f208284ba5975fbcc95954da12bb10a97679acc9d6048a2adecbb"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyCondition.",
    "qa_terms": "TestTransformMissingHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 131,
      "footer": 0,
      "total": 198
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.065508+00:00",
    "v": 3
  },
  {
    "chunk_id": "1dd0038cb76f208284ba5975fbcc95954da12bb10a97679acc9d6048a2adecbb",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 141,
    "end_line": 146,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformMissingHourlyCondition#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyCondition"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Assert",
      "cc",
      "Equal"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7813532d31a0ad5800a484e793245cfd15ff0300c120225617e53b02b3aba91f",
      "next": "05829103efe90b963215709d3a4048083ba5e509055202ea4165820cf0738486"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyCondition.",
    "qa_terms": "TestTransformMissingHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 22,
      "footer": 0,
      "total": 89
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.065678+00:00",
    "v": 3
  },
  {
    "chunk_id": "05829103efe90b963215709d3a4048083ba5e509055202ea4165820cf0738486",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 148,
    "end_line": 162,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformWithHourlyCondition#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\nfunc (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyCondition"
    ],
    "symbols_referenced": [
      "WeatherCondition",
      "HumidityPercentage",
      "timestampFormat",
      "WeatherDescription",
      "Temperature",
      "Pressure",
      "currentConditionTransformerTestSuite",
      "DewPoint",
      "WindDirection",
      "CurrentCondition",
      "WindSpeed",
      "TemperatureFeelsLike",
      "Visibility",
      "Transform",
      "Timestamp",
      "Format",
      "WeatherCode"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1dd0038cb76f208284ba5975fbcc95954da12bb10a97679acc9d6048a2adecbb",
      "next": "29c6f461875222c07b22d4ef1510d83d4e2eeb9b7c41dd17f3c421e923bb4ed5"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyCondition.",
    "qa_terms": "TestTransformWithHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 145,
      "footer": 0,
      "total": 212
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067259+00:00",
    "v": 3
  },
  {
    "chunk_id": "29c6f461875222c07b22d4ef1510d83d4e2eeb9b7c41dd17f3c421e923bb4ed5",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 163,
    "end_line": 177,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformWithHourlyCondition#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyCondition"
    ],
    "symbols_referenced": [
      "UVIndex",
      "HumidityPercentage",
      "timestampFormat",
      "WeatherDescription",
      "Temperature",
      "Pressure",
      "WindDirection",
      "WindSpeed",
      "Precipitation",
      "HourlyCondition",
      "PrecipitationProbability",
      "Format",
      "TemperatureFeelsLike",
      "WeatherCode",
      "Timestamp",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "05829103efe90b963215709d3a4048083ba5e509055202ea4165820cf0738486",
      "next": "d04452849e924aa23283807e39a456195faffee30c757c2237181082c6bccbaa"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyCondition.",
    "qa_terms": "TestTransformWithHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 137,
      "footer": 0,
      "total": 204
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.067732+00:00",
    "v": 3
  },
  {
    "chunk_id": "d04452849e924aa23283807e39a456195faffee30c757c2237181082c6bccbaa",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 178,
    "end_line": 192,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformWithHourlyCondition#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t}, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         1,\n\t\tPrecipitationNextHour: 1,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\tCode:        \"mostlycloudy\",\n\t\t\tDescription: \"Cloudy\",\n\t\t},",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t}, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         1,\n\t\tPrecipitationNextHour: 1,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\tCode:        \"mostlycloudy\",\n\t\t\tDescription: \"Cloudy\",\n\t\t},",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyCondition"
    ],
    "symbols_referenced": [
      "location",
      "Description",
      "Code",
      "WeatherConditionNextHour",
      "Unix",
      "Epoch",
      "Precipitation",
      "Visibility",
      "PrecipitationNextHour",
      "CurrentCondition",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "29c6f461875222c07b22d4ef1510d83d4e2eeb9b7c41dd17f3c421e923bb4ed5",
      "next": "a4f1562d794e5da49a96d7db5f1695b0809509aee944fee8f1c74922f1ae67b5"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyCondition.",
    "qa_terms": "TestTransformWithHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 115,
      "footer": 0,
      "total": 182
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.068123+00:00",
    "v": 3
  },
  {
    "chunk_id": "a4f1562d794e5da49a96d7db5f1695b0809509aee944fee8f1c74922f1ae67b5",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 193,
    "end_line": 207,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformWithHourlyCondition#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -2.4,\n\t\tHumidityPercentage:   80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -2.4,\n\t\tHumidityPercentage:   80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyCondition"
    ],
    "symbols_referenced": [
      "Speed",
      "HumidityPercentage",
      "Temperature",
      "Wind",
      "WindDirection",
      "DewPoint",
      "WindGust",
      "Degrees",
      "HeatIndex",
      "TemperatureFeelsLike",
      "Direction",
      "Abbreviation",
      "Gust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d04452849e924aa23283807e39a456195faffee30c757c2237181082c6bccbaa",
      "next": "c6d59558a29ebb24d89a77c1c5e8e4da42051da5af67cd9168807adee00b5507"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyCondition.",
    "qa_terms": "TestTransformWithHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 121,
      "footer": 0,
      "total": 188
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.068475+00:00",
    "v": 3
  },
  {
    "chunk_id": "c6d59558a29ebb24d89a77c1c5e8e4da42051da5af67cd9168807adee00b5507",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 208,
    "end_line": 216,
    "ast_path": "go:method:(*suite currentConditionTransformerTestSuite).TestTransformWithHourlyCondition#part5_block5",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite",
    "core": "\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyCondition"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Assert",
      "cc",
      "Equal",
      "Pressure",
      "Trend",
      "Millibar",
      "PressureTrendSteady"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a4f1562d794e5da49a96d7db5f1695b0809509aee944fee8f1c74922f1ae67b5",
      "next": "56328316b9d84f1408a87a777c42990d016a589f57dd9bf617b9aa5b75989683"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyCondition.",
    "qa_terms": "TestTransformWithHourlyCondition, suite currentConditionTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 60,
      "footer": 0,
      "total": 127
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.068700+00:00",
    "v": 3
  },
  {
    "chunk_id": "56328316b9d84f1408a87a777c42990d016a589f57dd9bf617b9aa5b75989683",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 218,
    "end_line": 247,
    "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).SetupSuite",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\nfunc (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "Year",
      "suite.sunrise",
      "Day",
      "time.Now",
      "Month",
      "suite.sunset",
      "suite.transformer",
      "suite.time",
      "suite.daytimeFormat",
      "time.LoadLocation",
      "time.Date",
      "dailyForecastTransformerTestSuite",
      "suite.daystampFormat",
      "suite.location",
      "clients.NewDailyForecastTransformer",
      "suite.timestampFormat",
      "suite.timeFormat"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "c6d59558a29ebb24d89a77c1c5e8e4da42051da5af67cd9168807adee00b5507",
      "next": "3915ec46d956ec42f06a842324fba163e138caac81cece22c349f51fd0943fea"
    },
    "summary_1l": "Go method SetupSuite on suite *dailyForecastTransformerTestSuite",
    "qa_terms": "LoadLocation, SetupSuite, foreca, proxy, suite dailyForecastTransformerTestSuite, weather",
    "token_counts": {
      "header": 49,
      "core": 220,
      "footer": 0,
      "total": 270
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.070088+00:00",
    "v": 3
  },
  {
    "chunk_id": "3915ec46d956ec42f06a842324fba163e138caac81cece22c349f51fd0943fea",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 249,
    "end_line": 263,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformMissingHourlyConditions#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\nfunc (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyConditions"
    ],
    "symbols_referenced": [
      "DailyCondition",
      "WindSpeed",
      "dailyForecastTransformerTestSuite",
      "Transform",
      "WeatherDescription",
      "MaxTemperature",
      "MinTemperature",
      "WindDirection",
      "PrecipitationProbability",
      "Format",
      "UVIndex",
      "daystampFormat",
      "Date",
      "WeatherCondition",
      "timestampFormat",
      "SunriseTime",
      "Precipitation",
      "WeatherCode"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "56328316b9d84f1408a87a777c42990d016a589f57dd9bf617b9aa5b75989683",
      "next": "c60f905a32b7da0bf4cfb3b709b6bb31d77fb1706e5ae3bcb06ae39965b4379f"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyConditions.",
    "qa_terms": "TestTransformMissingHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 156,
      "footer": 0,
      "total": 223
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.071811+00:00",
    "v": 3
  },
  {
    "chunk_id": "c60f905a32b7da0bf4cfb3b709b6bb31d77fb1706e5ae3bcb06ae39965b4379f",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 264,
    "end_line": 278,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformMissingHourlyConditions#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyConditions"
    ],
    "symbols_referenced": [
      "PrecipitationNight",
      "location",
      "SnowDay",
      "SunsetTime",
      "DailyCondition",
      "Wind",
      "MaxTemperature",
      "MinTemperature",
      "timestampFormat",
      "Unix",
      "Epoch",
      "PrecipitationDay",
      "Precipitation",
      "PrecipitationProbability",
      "Snow",
      "UTC",
      "Format",
      "SnowNight"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3915ec46d956ec42f06a842324fba163e138caac81cece22c349f51fd0943fea",
      "next": "bae7a7a4d4203229c4c5e349df30301c642fb8b678e68d90ab0973b71af753da"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyConditions.",
    "qa_terms": "TestTransformMissingHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 143,
      "footer": 0,
      "total": 210
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.072396+00:00",
    "v": 3
  },
  {
    "chunk_id": "bae7a7a4d4203229c4c5e349df30301c642fb8b678e68d90ab0973b71af753da",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 279,
    "end_line": 293,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformMissingHourlyConditions#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyConditions"
    ],
    "symbols_referenced": [
      "Speed",
      "Description",
      "Code",
      "WindDirection",
      "WeatherConditionNight",
      "WeatherCodeMostlySunny",
      "Degrees",
      "Direction",
      "Abbreviation",
      "AverageHumidityPercentage",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c60f905a32b7da0bf4cfb3b709b6bb31d77fb1706e5ae3bcb06ae39965b4379f",
      "next": "bb3d86a40e6f845790cee93a0cf1947439127c80c8ce6c1a77eed6209ac25310"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyConditions.",
    "qa_terms": "TestTransformMissingHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 127,
      "footer": 0,
      "total": 194
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.072824+00:00",
    "v": 3
  },
  {
    "chunk_id": "bb3d86a40e6f845790cee93a0cf1947439127c80c8ce6c1a77eed6209ac25310",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 294,
    "end_line": 300,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformMissingHourlyConditions#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformMissingHourlyConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "SunsetEpoch",
      "Assert",
      "Equal",
      "Unix",
      "dc",
      "SunriseEpoch"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "bae7a7a4d4203229c4c5e349df30301c642fb8b678e68d90ab0973b71af753da",
      "next": "61a1e0fb226b6e62d14b80b49bf8a62509a01541d1f3cdc66d981018b2a3c9b6"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformMissingHourlyConditions.",
    "qa_terms": "TestTransformMissingHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 44,
      "footer": 0,
      "total": 111
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.073048+00:00",
    "v": 3
  },
  {
    "chunk_id": "61a1e0fb226b6e62d14b80b49bf8a62509a01541d1f3cdc66d981018b2a3c9b6",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 302,
    "end_line": 316,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\nfunc (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "daystampFormat",
      "DailyCondition",
      "WeatherDescription",
      "MaxTemperature",
      "MinTemperature",
      "WindDirection",
      "WindSpeed",
      "Precipitation",
      "PrecipitationProbability",
      "Format",
      "WeatherCode",
      "dailyForecastTransformerTestSuite",
      "Transform",
      "Date",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "bb3d86a40e6f845790cee93a0cf1947439127c80c8ce6c1a77eed6209ac25310",
      "next": "84b5ec7ce5f1a62da427c2ddd8869798314e0fdaa8785e59746822fc44531e7d"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyConditions.",
    "qa_terms": "TestTransformWithHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 144,
      "footer": 0,
      "total": 211
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.075150+00:00",
    "v": 3
  },
  {
    "chunk_id": "84b5ec7ce5f1a62da427c2ddd8869798314e0fdaa8785e59746822fc44531e7d",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 317,
    "end_line": 331,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyConditions"
    ],
    "symbols_referenced": [
      "SunsetTime",
      "WindSpeed",
      "HourlyCondition",
      "Add",
      "TemperatureFeelsLike",
      "time",
      "WeatherDescription",
      "Temperature",
      "WindDirection",
      "Format",
      "WeatherCondition",
      "daytimeFormat",
      "Hour",
      "timestampFormat",
      "SunriseTime",
      "Precipitation",
      "clients",
      "WeatherCode",
      "Timestamp"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "61a1e0fb226b6e62d14b80b49bf8a62509a01541d1f3cdc66d981018b2a3c9b6",
      "next": "6cddb52c1db39c0f5947c7627b8701782abffd7feabc9e373ad6f1bfc45d626c"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyConditions.",
    "qa_terms": "TestTransformWithHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 142,
      "footer": 0,
      "total": 209
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.075669+00:00",
    "v": 3
  },
  {
    "chunk_id": "6cddb52c1db39c0f5947c7627b8701782abffd7feabc9e373ad6f1bfc45d626c",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 332,
    "end_line": 346,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(2 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(2 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Hour",
      "HumidityPercentage",
      "time",
      "WeatherDescription",
      "Pressure",
      "Temperature",
      "WindDirection",
      "WindSpeed",
      "PrecipitationProbability",
      "Format",
      "Add",
      "TemperatureFeelsLike",
      "WeatherCode",
      "Timestamp",
      "WeatherCondition",
      "daytimeFormat"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "84b5ec7ce5f1a62da427c2ddd8869798314e0fdaa8785e59746822fc44531e7d",
      "next": "76dddbec927b5dd0999f01da1cc82cab77c3db41914ff3dea4e5d3b779300aef"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyConditions.",
    "qa_terms": "TestTransformWithHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 132,
      "footer": 0,
      "total": 199
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.076144+00:00",
    "v": 3
  },
  {
    "chunk_id": "76dddbec927b5dd0999f01da1cc82cab77c3db41914ff3dea4e5d3b779300aef",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 347,
    "end_line": 361,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           1,\n\t\tMaxTemperature:           4,\n\t\tPrecipitation:            0.4,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           1,\n\t\tMaxTemperature:           4,\n\t\tPrecipitation:            0.4,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "HumidityPercentage",
      "DailyCondition",
      "MaxTemperature",
      "Pressure",
      "MinTemperature",
      "Unix",
      "Epoch",
      "Precipitation",
      "PrecipitationProbability",
      "UTC"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6cddb52c1db39c0f5947c7627b8701782abffd7feabc9e373ad6f1bfc45d626c",
      "next": "62054700a71fb6263ad133c755a094f1a2f6366b793972e9850619278fc1f66c"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyConditions.",
    "qa_terms": "TestTransformWithHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 111,
      "footer": 0,
      "total": 178
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.076562+00:00",
    "v": 3
  },
  {
    "chunk_id": "62054700a71fb6263ad133c755a094f1a2f6366b793972e9850619278fc1f66c",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 362,
    "end_line": 376,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions#part5_block5",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\tPrecipitationDay:         0,\n\t\tPrecipitationNight:       0,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 66,\n\t\tWeatherCondition: &foreca.WeatherCondition{",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\tPrecipitationDay:         0,\n\t\tPrecipitationNight:       0,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 66,\n\t\tWeatherCondition: &foreca.WeatherCondition{",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyConditions"
    ],
    "symbols_referenced": [
      "PrecipitationNight",
      "Speed",
      "SnowDay",
      "Wind",
      "WindDirection",
      "PrecipitationDay",
      "PrecipitationProbability",
      "Degrees",
      "Snow",
      "Direction",
      "Abbreviation",
      "AverageHumidityPercentage",
      "WeatherCondition",
      "SnowNight"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "76dddbec927b5dd0999f01da1cc82cab77c3db41914ff3dea4e5d3b779300aef",
      "next": "6f0bcac16df4ffa551efd28bc1629ea24b37a69b56fefebb6e81b5d0ee4f9e3d"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyConditions.",
    "qa_terms": "TestTransformWithHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 132,
      "footer": 0,
      "total": 199
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.076981+00:00",
    "v": 3
  },
  {
    "chunk_id": "6f0bcac16df4ffa551efd28bc1629ea24b37a69b56fefebb6e81b5d0ee4f9e3d",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 377,
    "end_line": 390,
    "ast_path": "go:method:(*suite dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions#part6_block6",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite",
    "core": "\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformWithHourlyConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "SunsetEpoch",
      "Assert",
      "Description",
      "Equal",
      "Code",
      "Unix",
      "WeatherConditionNight",
      "WeatherCodeClear",
      "WeatherCodeMostlySunny",
      "dc",
      "SunriseEpoch",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "62054700a71fb6263ad133c755a094f1a2f6366b793972e9850619278fc1f66c",
      "next": "ba2a04098ebe012f8c08d9cfe009e5fc771b2e60829c8285c9a44394ca70f4cd"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformWithHourlyConditions.",
    "qa_terms": "TestTransformWithHourlyConditions, suite dailyForecastTransformerTestSuite",
    "token_counts": {
      "header": 66,
      "core": 100,
      "footer": 0,
      "total": 167
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.077334+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba2a04098ebe012f8c08d9cfe009e5fc771b2e60829c8285c9a44394ca70f4cd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 392,
    "end_line": 399,
    "ast_path": "go:method:(suite *hourlyForecastTransformerTestSuite).SetupSuite",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite\nfunc (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite",
    "core": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "hourlyForecastTransformerTestSuite",
      "Hour",
      "Year",
      "clients.NewHourlyForecastTransformer",
      "Day",
      "time.Now",
      "suite.transformer",
      "suite.time",
      "suite.daytimeFormat",
      "time.LoadLocation",
      "time.Date",
      "suite.location",
      "suite.timestampFormat",
      "Month"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "6f0bcac16df4ffa551efd28bc1629ea24b37a69b56fefebb6e81b5d0ee4f9e3d",
      "next": "f0bd3bc4ce82986c4afb52a889e4049000de88ad186748775d6d43b5735de442"
    },
    "summary_1l": "Go method SetupSuite on suite *hourlyForecastTransformerTestSuite",
    "qa_terms": "LoadLocation, SetupSuite, foreca, proxy, suite hourlyForecastTransformerTestSuite, weather",
    "token_counts": {
      "header": 50,
      "core": 103,
      "footer": 0,
      "total": 154
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.077849+00:00",
    "v": 3
  },
  {
    "chunk_id": "f0bd3bc4ce82986c4afb52a889e4049000de88ad186748775d6d43b5735de442",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 401,
    "end_line": 415,
    "ast_path": "go:method:(*suite hourlyForecastTransformerTestSuite).TestTransformHourlyForecast#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite\nfunc (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite",
    "core": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformHourlyForecast"
    ],
    "symbols_referenced": [
      "hourlyForecastTransformerTestSuite",
      "HumidityPercentage",
      "Temperature",
      "WeatherDescription",
      "WindDirection",
      "WindSpeed",
      "Precipitation",
      "HourlyCondition",
      "PrecipitationProbability",
      "Format",
      "TemperatureFeelsLike",
      "WeatherCode",
      "Transform",
      "Timestamp",
      "WeatherCondition",
      "daytimeFormat"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ba2a04098ebe012f8c08d9cfe009e5fc771b2e60829c8285c9a44394ca70f4cd",
      "next": "e5ccfac70a40aad2e9a989f3ef9f8a267a7bec044f66f43e451833831bf07498"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformHourlyForecast.",
    "qa_terms": "TestTransformHourlyForecast, suite hourlyForecastTransformerTestSuite",
    "token_counts": {
      "header": 67,
      "core": 144,
      "footer": 0,
      "total": 212
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.079187+00:00",
    "v": 3
  },
  {
    "chunk_id": "e5ccfac70a40aad2e9a989f3ef9f8a267a7bec044f66f43e451833831bf07498",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 416,
    "end_line": 430,
    "ast_path": "go:method:(*suite hourlyForecastTransformerTestSuite).TestTransformHourlyForecast#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite",
    "core": "\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformHourlyForecast"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Description",
      "Temperature",
      "Pressure",
      "Code",
      "Unix",
      "Epoch",
      "Precipitation",
      "HourlyCondition",
      "TemperatureFeelsLike",
      "UTC",
      "WeatherCodeMostlyCloudy",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f0bd3bc4ce82986c4afb52a889e4049000de88ad186748775d6d43b5735de442",
      "next": "b24f6e7442efcb07e51e32f12523bf79b2a3010b80c2d33a2e028f75e5fc5d82"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformHourlyForecast.",
    "qa_terms": "TestTransformHourlyForecast, suite hourlyForecastTransformerTestSuite",
    "token_counts": {
      "header": 67,
      "core": 112,
      "footer": 0,
      "total": 180
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.079777+00:00",
    "v": 3
  },
  {
    "chunk_id": "b24f6e7442efcb07e51e32f12523bf79b2a3010b80c2d33a2e028f75e5fc5d82",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 431,
    "end_line": 445,
    "ast_path": "go:method:(*suite hourlyForecastTransformerTestSuite).TestTransformHourlyForecast#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.78,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tHumidityPercentage: 82,\n\t\tUVIndex:            0,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite",
    "core": "\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.78,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tHumidityPercentage: 82,\n\t\tUVIndex:            0,",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformHourlyForecast"
    ],
    "symbols_referenced": [
      "UVIndex",
      "HumidityPercentage",
      "Speed",
      "Wind",
      "Pressure",
      "WindDirection",
      "PrecipitationProbability",
      "Trend",
      "Degrees",
      "Millibar",
      "Snow",
      "Direction",
      "Abbreviation",
      "PressureTrendSteady"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e5ccfac70a40aad2e9a989f3ef9f8a267a7bec044f66f43e451833831bf07498",
      "next": "810cff06f7d70fe419d2674ce67baf1a14c74cd08770e53dd43f7ef66bcbbd03"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformHourlyForecast.",
    "qa_terms": "TestTransformHourlyForecast, suite hourlyForecastTransformerTestSuite",
    "token_counts": {
      "header": 67,
      "core": 129,
      "footer": 0,
      "total": 197
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.080221+00:00",
    "v": 3
  },
  {
    "chunk_id": "810cff06f7d70fe419d2674ce67baf1a14c74cd08770e53dd43f7ef66bcbbd03",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 446,
    "end_line": 449,
    "ast_path": "go:method:(*suite hourlyForecastTransformerTestSuite).TestTransformHourlyForecast#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite\n\t}\n\n\tsuite.Assert().Equal(expected, hc)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite",
    "core": "\t}\n\n\tsuite.Assert().Equal(expected, hc)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestTransformHourlyForecast"
    ],
    "symbols_referenced": [
      "hc",
      "Assert",
      "Equal"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b24f6e7442efcb07e51e32f12523bf79b2a3010b80c2d33a2e028f75e5fc5d82",
      "next": "c4e9919d232b5ac323e7ca9a897c2c285493f5832ded137ee9d3f152ad3f4fdb"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestTransformHourlyForecast.",
    "qa_terms": "TestTransformHourlyForecast, suite hourlyForecastTransformerTestSuite",
    "token_counts": {
      "header": 67,
      "core": 11,
      "footer": 0,
      "total": 79
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.080387+00:00",
    "v": 3
  },
  {
    "chunk_id": "c4e9919d232b5ac323e7ca9a897c2c285493f5832ded137ee9d3f152ad3f4fdb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 451,
    "end_line": 480,
    "ast_path": "go:method:(suite *transformerTestSuite).SetupSuite",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\nfunc (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "Year",
      "suite.sunrise",
      "Day",
      "time.Now",
      "clients.NewTransformer",
      "suite.sunset",
      "suite.transformer",
      "suite.time",
      "transformerTestSuite",
      "suite.daytimeFormat",
      "Month",
      "time.LoadLocation",
      "time.Date",
      "suite.daystampFormat",
      "suite.location",
      "suite.timestampFormat",
      "suite.timeFormat"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "810cff06f7d70fe419d2674ce67baf1a14c74cd08770e53dd43f7ef66bcbbd03",
      "next": "071e0a5a452c60d38c463141759ca82d9748d3f32848315f14cfd4dd45754669"
    },
    "summary_1l": "Go method SetupSuite on suite *transformerTestSuite",
    "qa_terms": "LoadLocation, SetupSuite, foreca, proxy, suite transformerTestSuite, weather",
    "token_counts": {
      "header": 48,
      "core": 217,
      "footer": 0,
      "total": 266
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.081151+00:00",
    "v": 3
  },
  {
    "chunk_id": "071e0a5a452c60d38c463141759ca82d9748d3f32848315f14cfd4dd45754669",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 482,
    "end_line": 494,
    "ast_path": "go:method:(suite *transformerTestSuite).TestEmptyResponse",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *transformerTestSuite\nfunc (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestEmptyResponse"
    ],
    "symbols_referenced": [
      "foreca.Forecast",
      "suite.location",
      "Equal",
      "suite.transformer",
      "suite.Assert",
      "transformerTestSuite",
      "Transform",
      "DailyConditions",
      "f",
      "CurrentCondition",
      "clients.Response",
      "HourlyConditions"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"
    ],
    "neighbors": {
      "prev": "c4e9919d232b5ac323e7ca9a897c2c285493f5832ded137ee9d3f152ad3f4fdb",
      "next": "b79bc359f3f44c0934e9dd90a0f1e0275d552b0d9876b188f15645d5eae46d02"
    },
    "summary_1l": "Go method TestEmptyResponse on suite *transformerTestSuite",
    "qa_terms": "TestEmptyResponse, foreca, proxy, suite transformerTestSuite, weather",
    "token_counts": {
      "header": 62,
      "core": 90,
      "footer": 0,
      "total": 153
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.081588+00:00",
    "v": 3
  },
  {
    "chunk_id": "b79bc359f3f44c0934e9dd90a0f1e0275d552b0d9876b188f15645d5eae46d02",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 496,
    "end_line": 510,
    "ast_path": "go:method:(*suite transformerTestSuite).TestOnlyCurrentCondition#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\nfunc (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,",
    "footer_context": "",
    "symbols_defined": [
      "TestOnlyCurrentCondition"
    ],
    "symbols_referenced": [
      "WeatherCondition",
      "HumidityPercentage",
      "Temperature",
      "Pressure",
      "WeatherDescription",
      "CurrentCondition",
      "DewPoint",
      "WindDirection",
      "WindSpeed",
      "Transform",
      "transformerTestSuite",
      "TemperatureFeelsLike",
      "WeatherCode",
      "Response",
      "timeFormat",
      "Timestamp",
      "Format"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "071e0a5a452c60d38c463141759ca82d9748d3f32848315f14cfd4dd45754669",
      "next": "ca989b3e2a84263fe44b94a324979fff654448738ce29ee634b8c51b9b66b1b1"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestOnlyCurrentCondition.",
    "qa_terms": "TestOnlyCurrentCondition, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 142,
      "footer": 0,
      "total": 208
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.083153+00:00",
    "v": 3
  },
  {
    "chunk_id": "ca989b3e2a84263fe44b94a324979fff654448738ce29ee634b8c51b9b66b1b1",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 511,
    "end_line": 525,
    "ast_path": "go:method:(*suite transformerTestSuite).TestOnlyCurrentCondition#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",",
    "footer_context": "",
    "symbols_defined": [
      "TestOnlyCurrentCondition"
    ],
    "symbols_referenced": [
      "location",
      "Description",
      "Code",
      "Unix",
      "Epoch",
      "Precipitation",
      "Forecast",
      "DailyConditions",
      "Visibility",
      "PrecipitationNextHour",
      "CurrentCondition",
      "WeatherCondition",
      "HourlyConditions"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b79bc359f3f44c0934e9dd90a0f1e0275d552b0d9876b188f15645d5eae46d02",
      "next": "b6322a7c723e388c2b8f36b2cd740091d161c759058ac243b79e38337e883fb9"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestOnlyCurrentCondition.",
    "qa_terms": "TestOnlyCurrentCondition, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 118,
      "footer": 0,
      "total": 184
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.083600+00:00",
    "v": 3
  },
  {
    "chunk_id": "b6322a7c723e388c2b8f36b2cd740091d161c759058ac243b79e38337e883fb9",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 526,
    "end_line": 540,
    "ast_path": "go:method:(*suite transformerTestSuite).TestOnlyCurrentCondition#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},",
    "footer_context": "",
    "symbols_defined": [
      "TestOnlyCurrentCondition"
    ],
    "symbols_referenced": [
      "Speed",
      "HumidityPercentage",
      "Temperature",
      "Wind",
      "WeatherConditionNextHour",
      "WindDirection",
      "WindGust",
      "Degrees",
      "TemperatureFeelsLike",
      "Direction",
      "Abbreviation",
      "Gust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ca989b3e2a84263fe44b94a324979fff654448738ce29ee634b8c51b9b66b1b1",
      "next": "e9e7f7ca6b26ace0c9d44a33c54691a26f750c23d2338d5b851f58a74151cf7a"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestOnlyCurrentCondition.",
    "qa_terms": "TestOnlyCurrentCondition, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 117,
      "footer": 0,
      "total": 183
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.083970+00:00",
    "v": 3
  },
  {
    "chunk_id": "e9e7f7ca6b26ace0c9d44a33c54691a26f750c23d2338d5b851f58a74151cf7a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 541,
    "end_line": 554,
    "ast_path": "go:method:(*suite transformerTestSuite).TestOnlyCurrentCondition#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestOnlyCurrentCondition"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Assert",
      "Equal",
      "Pressure",
      "DewPoint",
      "Trend",
      "HeatIndex",
      "Millibar",
      "DailyConditions",
      "f",
      "PressureTrendSteady",
      "HourlyConditions"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b6322a7c723e388c2b8f36b2cd740091d161c759058ac243b79e38337e883fb9",
      "next": "fd5b477d088b057e9fd8d7e0095e30ac6a37a767f2e93b143008ed0da4becf9b"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestOnlyCurrentCondition.",
    "qa_terms": "TestOnlyCurrentCondition, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 96,
      "footer": 0,
      "total": 162
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.084285+00:00",
    "v": 3
  },
  {
    "chunk_id": "fd5b477d088b057e9fd8d7e0095e30ac6a37a767f2e93b143008ed0da4becf9b",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 556,
    "end_line": 570,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part1_block1",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\nfunc (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "WeatherCondition",
      "HumidityPercentage",
      "Temperature",
      "Pressure",
      "WeatherDescription",
      "CurrentCondition",
      "DewPoint",
      "WindDirection",
      "WindSpeed",
      "Transform",
      "transformerTestSuite",
      "TemperatureFeelsLike",
      "WeatherCode",
      "Response",
      "timeFormat",
      "Timestamp",
      "Format"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e9e7f7ca6b26ace0c9d44a33c54691a26f750c23d2338d5b851f58a74151cf7a",
      "next": "52c6cee5fe46b5377f1d1b77f8033f065c8dc402148e3cbf8548a28f011fff45"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 141,
      "footer": 0,
      "total": 207
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.088859+00:00",
    "v": 3
  },
  {
    "chunk_id": "52c6cee5fe46b5377f1d1b77f8033f065c8dc402148e3cbf8548a28f011fff45",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 571,
    "end_line": 585,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part2_block2",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "daystampFormat",
      "DailyCondition",
      "WeatherDescription",
      "MaxTemperature",
      "MinTemperature",
      "WindDirection",
      "WindSpeed",
      "Precipitation",
      "clients",
      "Format",
      "DailyConditions",
      "Visibility",
      "Date",
      "WeatherCode",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fd5b477d088b057e9fd8d7e0095e30ac6a37a767f2e93b143008ed0da4becf9b",
      "next": "74341355e621552000a0844a046a02ee9443c09dcf3e3edbab2ef7244330ec11"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 127,
      "footer": 0,
      "total": 193
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.089369+00:00",
    "v": 3
  },
  {
    "chunk_id": "74341355e621552000a0844a046a02ee9443c09dcf3e3edbab2ef7244330ec11",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 586,
    "end_line": 600,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part3_block3",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Add(24 * time.Hour).Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"SW\",\n\t\t\t\tWindSpeed:                25,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Add(24 * time.Hour).Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"SW\",\n\t\t\t\tWindSpeed:                25,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Hour",
      "time",
      "daystampFormat",
      "SunsetTime",
      "WeatherDescription",
      "MaxTemperature",
      "timestampFormat",
      "MinTemperature",
      "WindDirection",
      "SunriseTime",
      "PrecipitationProbability",
      "WindSpeed",
      "Format",
      "Add",
      "WeatherCode",
      "Date",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "52c6cee5fe46b5377f1d1b77f8033f065c8dc402148e3cbf8548a28f011fff45",
      "next": "19100255fc5e5c6976a0bb67ccc519b4e8eff48e203e7e8c8c628caa7a99b07f"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 141,
      "footer": 0,
      "total": 207
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.089888+00:00",
    "v": 3
  },
  {
    "chunk_id": "19100255fc5e5c6976a0bb67ccc519b4e8eff48e203e7e8c8c628caa7a99b07f",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 601,
    "end_line": 615,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part4_block4",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tSunriseTime:              suite.sunrise.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tSunriseTime:              suite.sunrise.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "SunsetTime",
      "HourlyCondition",
      "Add",
      "TemperatureFeelsLike",
      "HourlyConditions",
      "time",
      "WeatherDescription",
      "Temperature",
      "PrecipitationProbability",
      "Format",
      "WeatherCondition",
      "daytimeFormat",
      "Hour",
      "timestampFormat",
      "SunriseTime",
      "Precipitation",
      "clients",
      "WeatherCode",
      "Timestamp"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "74341355e621552000a0844a046a02ee9443c09dcf3e3edbab2ef7244330ec11",
      "next": "ce3918e222caebe7f32ff68ff22ea33f47200104feec2702d8caa56a2a882381"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 147,
      "footer": 0,
      "total": 213
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.090388+00:00",
    "v": 3
  },
  {
    "chunk_id": "ce3918e222caebe7f32ff68ff22ea33f47200104feec2702d8caa56a2a882381",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 616,
    "end_line": 630,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part5_block5",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Hour",
      "HumidityPercentage",
      "time",
      "WeatherDescription",
      "Pressure",
      "Temperature",
      "WindDirection",
      "WindSpeed",
      "Precipitation",
      "PrecipitationProbability",
      "Format",
      "Add",
      "WeatherCode",
      "Timestamp",
      "WeatherCondition",
      "daytimeFormat"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "19100255fc5e5c6976a0bb67ccc519b4e8eff48e203e7e8c8c628caa7a99b07f",
      "next": "903ae7b00b84a18a6e8bf7902b773d4138af24dd2a1e3f1a3d20d9fb3bfbebcd"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 132,
      "footer": 0,
      "total": 198
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.090851+00:00",
    "v": 3
  },
  {
    "chunk_id": "903ae7b00b84a18a6e8bf7902b773d4138af24dd2a1e3f1a3d20d9fb3bfbebcd",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 631,
    "end_line": 645,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part6_block6",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "location",
      "HumidityPercentage",
      "Pressure",
      "WindDirection",
      "Unix",
      "Epoch",
      "WindSpeed",
      "Precipitation",
      "PrecipitationProbability",
      "Forecast",
      "TemperatureFeelsLike",
      "CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ce3918e222caebe7f32ff68ff22ea33f47200104feec2702d8caa56a2a882381",
      "next": "83842e54601f8d038a7c3e81c168ec6f6c7d7808e0c215d3eab240be4d2ad697"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 117,
      "footer": 0,
      "total": 183
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.091295+00:00",
    "v": 3
  },
  {
    "chunk_id": "83842e54601f8d038a7c3e81c168ec6f6c7d7808e0c215d3eab240be4d2ad697",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 646,
    "end_line": 660,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part7_block7",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"mostlysunny\",\n\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t},\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -2.4,\n\t\t\tHumidityPercentage:   80,\n\t\t\tWindGust: &foreca.WindGust{",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"mostlysunny\",\n\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t},\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -2.4,\n\t\t\tHumidityPercentage:   80,\n\t\t\tWindGust: &foreca.WindGust{",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "HumidityPercentage",
      "Description",
      "Temperature",
      "Code",
      "WeatherConditionNextHour",
      "WindGust",
      "Precipitation",
      "TemperatureFeelsLike",
      "Visibility",
      "PrecipitationNextHour",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "903ae7b00b84a18a6e8bf7902b773d4138af24dd2a1e3f1a3d20d9fb3bfbebcd",
      "next": "57fd17532e7f82775e6f8aa18f46ee73bb18502fb00b85251638e2b66d21cad8"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 135,
      "footer": 0,
      "total": 201
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.091737+00:00",
    "v": 3
  },
  {
    "chunk_id": "57fd17532e7f82775e6f8aa18f46ee73bb18502fb00b85251638e2b66d21cad8",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 661,
    "end_line": 675,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part8_block8",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "Speed",
      "Wind",
      "Pressure",
      "WindDirection",
      "DewPoint",
      "Trend",
      "Degrees",
      "HeatIndex",
      "Millibar",
      "Direction",
      "Abbreviation",
      "PressureTrendSteady",
      "Gust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "83842e54601f8d038a7c3e81c168ec6f6c7d7808e0c215d3eab240be4d2ad697",
      "next": "93ea0f7ad8c7af75c5d14bf4b88094a28f199994f16da5a15571cd680d2b9d62"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 120,
      "footer": 0,
      "total": 186
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.092299+00:00",
    "v": 3
  },
  {
    "chunk_id": "93ea0f7ad8c7af75c5d14bf4b88094a28f199994f16da5a15571cd680d2b9d62",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 676,
    "end_line": 690,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part9_block9",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions: []*foreca.DailyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\t\t\tMinTemperature:           1,\n\t\t\t\tMaxTemperature:           4,\n\t\t\t\tPrecipitation:            0.4,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tWind: &foreca.Wind{",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions: []*foreca.DailyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\t\t\tMinTemperature:           1,\n\t\t\t\tMaxTemperature:           4,\n\t\t\t\tPrecipitation:            0.4,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tWind: &foreca.Wind{",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "PrecipitationNight",
      "SnowDay",
      "DailyCondition",
      "MaxTemperature",
      "Wind",
      "MinTemperature",
      "Unix",
      "Epoch",
      "PrecipitationDay",
      "Precipitation",
      "PrecipitationProbability",
      "SnowNight",
      "DailyConditions",
      "Snow",
      "UTC",
      "foreca"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "57fd17532e7f82775e6f8aa18f46ee73bb18502fb00b85251638e2b66d21cad8",
      "next": "67618bdf6b20e018efbfc6062e31a397cb3a3177ccd23f09f676167b69ad3e64"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 135,
      "footer": 0,
      "total": 201
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.092806+00:00",
    "v": 3
  },
  {
    "chunk_id": "67618bdf6b20e018efbfc6062e31a397cb3a3177ccd23f09f676167b69ad3e64",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 691,
    "end_line": 705,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part10_block10",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 66,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 66,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "Speed",
      "Description",
      "Code",
      "WindDirection",
      "WeatherConditionNight",
      "WeatherCodeClear",
      "WeatherCodeMostlySunny",
      "Degrees",
      "Direction",
      "Abbreviation",
      "AverageHumidityPercentage",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "93ea0f7ad8c7af75c5d14bf4b88094a28f199994f16da5a15571cd680d2b9d62",
      "next": "a56ef4c4c52ab0ba686f6a9046b23046d18081fce4b4f7a1f5fe5d3c325c40cd"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 120,
      "footer": 0,
      "total": 186
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.093232+00:00",
    "v": 3
  },
  {
    "chunk_id": "a56ef4c4c52ab0ba686f6a9046b23046d18081fce4b4f7a1f5fe5d3c325c40cd",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 706,
    "end_line": 720,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part11_block11",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.Add(24 * time.Hour).UTC().Unix(),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 2,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.Add(24 * time.Hour).UTC().Unix(),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 2,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "PrecipitationNight",
      "Hour",
      "SunsetEpoch",
      "time",
      "SnowDay",
      "MaxTemperature",
      "MinTemperature",
      "Unix",
      "Epoch",
      "PrecipitationDay",
      "Precipitation",
      "PrecipitationProbability",
      "Add",
      "Snow",
      "UTC",
      "SunriseEpoch",
      "SnowNight"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "67618bdf6b20e018efbfc6062e31a397cb3a3177ccd23f09f676167b69ad3e64",
      "next": "5574ef2c193740985c458f6bff04fc896a99c76dfe0967b2c542f20e24ae54d8"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 143,
      "footer": 0,
      "total": 209
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.093713+00:00",
    "v": 3
  },
  {
    "chunk_id": "5574ef2c193740985c458f6bff04fc896a99c76dfe0967b2c542f20e24ae54d8",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 721,
    "end_line": 735,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part12_block12",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\t\t\tDegrees:      225,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 0,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\t\t\tDegrees:      225,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 0,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "Speed",
      "Description",
      "Wind",
      "Code",
      "WindDirection",
      "WeatherConditionNight",
      "Degrees",
      "Direction",
      "Abbreviation",
      "WeatherCodeMostlyCloudy",
      "AverageHumidityPercentage",
      "WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a56ef4c4c52ab0ba686f6a9046b23046d18081fce4b4f7a1f5fe5d3c325c40cd",
      "next": "b01b2cd5f31fe03bd830da1a42fee154cadc496c4704d4fa193e2de08c87cac3"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 132,
      "footer": 0,
      "total": 198
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.094129+00:00",
    "v": 3
  },
  {
    "chunk_id": "b01b2cd5f31fe03bd830da1a42fee154cadc496c4704d4fa193e2de08c87cac3",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 736,
    "end_line": 750,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part13_block13",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Add(24 * time.Hour).Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Add(24 * time.Hour).Unix(),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*foreca.HourlyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.UTC().Unix(),\n\t\t\t\tTemperature:          1,\n\t\t\t\tTemperatureFeelsLike: -4,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Add(24 * time.Hour).Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Add(24 * time.Hour).Unix(),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*foreca.HourlyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.UTC().Unix(),\n\t\t\t\tTemperature:          1,\n\t\t\t\tTemperatureFeelsLike: -4,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "Hour",
      "SunsetEpoch",
      "time",
      "Description",
      "HourlyConditions",
      "Temperature",
      "Code",
      "Unix",
      "Epoch",
      "HourlyCondition",
      "WeatherCodeMostlySunny",
      "Add",
      "TemperatureFeelsLike",
      "UTC",
      "SunriseEpoch",
      "WeatherCondition",
      "foreca"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "5574ef2c193740985c458f6bff04fc896a99c76dfe0967b2c542f20e24ae54d8",
      "next": "3ad2579f12d01d449c4d63ee5e5f74c22dc75fc78511a68107770cb8cbcde5b6"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 135,
      "footer": 0,
      "total": 201
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.094583+00:00",
    "v": 3
  },
  {
    "chunk_id": "3ad2579f12d01d449c4d63ee5e5f74c22dc75fc78511a68107770cb8cbcde5b6",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 751,
    "end_line": 765,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part14_block14",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 14,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1017.46,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 58,",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 14,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1017.46,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 58,",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "HumidityPercentage",
      "Speed",
      "Wind",
      "Pressure",
      "WindDirection",
      "Precipitation",
      "PrecipitationProbability",
      "Trend",
      "Degrees",
      "Millibar",
      "Snow",
      "Direction",
      "Abbreviation",
      "PressureTrendSteady"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b01b2cd5f31fe03bd830da1a42fee154cadc496c4704d4fa193e2de08c87cac3",
      "next": "97731565c63c662ee78f0eea93001593ca372f0ec000b87f0dfa71d29352b843"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 130,
      "footer": 0,
      "total": 196
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.094978+00:00",
    "v": 3
  },
  {
    "chunk_id": "97731565c63c662ee78f0eea93001593ca372f0ec000b87f0dfa71d29352b843",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 766,
    "end_line": 780,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part15_block15",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.Add(1 * time.Hour).UTC().Unix(),\n\t\t\t\tTemperature:          4,\n\t\t\t\tTemperatureFeelsLike: -1,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.Add(1 * time.Hour).UTC().Unix(),\n\t\t\t\tTemperature:          4,\n\t\t\t\tTemperatureFeelsLike: -1,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "Description",
      "Add",
      "TemperatureFeelsLike",
      "Direction",
      "UTC",
      "Snow",
      "time",
      "Temperature",
      "Code",
      "WindDirection",
      "Unix",
      "PrecipitationProbability",
      "UVIndex",
      "WeatherCondition",
      "Hour",
      "Wind",
      "Epoch",
      "WeatherCodeClear",
      "Precipitation"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3ad2579f12d01d449c4d63ee5e5f74c22dc75fc78511a68107770cb8cbcde5b6",
      "next": "7aad27ec1b408dfa6d1ae840d960573219c873bf8d39b50a5d60d14ea73aeabd"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 131,
      "footer": 0,
      "total": 197
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.095417+00:00",
    "v": 3
  },
  {
    "chunk_id": "7aad27ec1b408dfa6d1ae840d960573219c873bf8d39b50a5d60d14ea73aeabd",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 781,
    "end_line": 795,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part16_block16",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 23,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1019.77,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 74,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t},\n\t}\n",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 23,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1019.77,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 74,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t},\n\t}\n",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "UVIndex",
      "HumidityPercentage",
      "Speed",
      "Pressure",
      "Trend",
      "Degrees",
      "Millibar",
      "Abbreviation",
      "PressureTrendSteady"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "97731565c63c662ee78f0eea93001593ca372f0ec000b87f0dfa71d29352b843",
      "next": "7acf8f5eb474d38ae807eebec86e5de47ec312e7de0a8ebf519e9a41216cffd9"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 98,
      "footer": 0,
      "total": 164
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.095734+00:00",
    "v": 3
  },
  {
    "chunk_id": "7acf8f5eb474d38ae807eebec86e5de47ec312e7de0a8ebf519e9a41216cffd9",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 796,
    "end_line": 797,
    "ast_path": "go:method:(*suite transformerTestSuite).TestAllConditions#part17_block17",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite\n\tsuite.Assert().Equal(expected, f)\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"time\"\n)\n// receiver: suite *transformerTestSuite",
    "core": "\tsuite.Assert().Equal(expected, f)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestAllConditions"
    ],
    "symbols_referenced": [
      "f",
      "Assert",
      "Equal"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7aad27ec1b408dfa6d1ae840d960573219c873bf8d39b50a5d60d14ea73aeabd",
      "next": "173399b47bfc167f83fae73e424943a1a028e6dfd7f8b14ab4fd665351478714"
    },
    "summary_1l": "Converts foreca data to protobuf v0 format with field mapping for TestAllConditions.",
    "qa_terms": "TestAllConditions, suite transformerTestSuite",
    "token_counts": {
      "header": 65,
      "core": 9,
      "footer": 0,
      "total": 75
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.095878+00:00",
    "v": 3
  },
  {
    "chunk_id": "173399b47bfc167f83fae73e424943a1a028e6dfd7f8b14ab4fd665351478714",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 799,
    "end_line": 802,
    "ast_path": "go:method:(suite *forecaClientTestSuite).SetupSuite",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.uber.org/mock/gomock\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "SetupSuite"
    ],
    "symbols_referenced": [
      "forecaClientTestSuite",
      "suite.mockController",
      "gomock.NewController",
      "suite.T",
      "time.LoadLocation",
      "suite.location"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "time",
      "go.uber.org/mock/gomock"
    ],
    "neighbors": {
      "prev": "7acf8f5eb474d38ae807eebec86e5de47ec312e7de0a8ebf519e9a41216cffd9",
      "next": "e913215807d5dfd3d8bc09684fcb7d6a0070cae8233194741996a2487d5fe1b4"
    },
    "summary_1l": "Go method SetupSuite on suite *forecaClientTestSuite for the Foreca proxy",
    "qa_terms": "LoadLocation, SetupSuite, foreca, proxy, suite forecaClientTestSuite, weather",
    "token_counts": {
      "header": 38,
      "core": 41,
      "footer": 0,
      "total": 80
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.096388+00:00",
    "v": 3
  },
  {
    "chunk_id": "e913215807d5dfd3d8bc09684fcb7d6a0070cae8233194741996a2487d5fe1b4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 804,
    "end_line": 821,
    "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationLimitReached",
    "text": "package clients_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}",
    "header_context": "package clients_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationLimitReached"
    ],
    "symbols_referenced": [
      "EXPECT",
      "err",
      "suite.mockController",
      "Return",
      "mocks.NewMocktransformer",
      "suite.Assert",
      "gomock.Any",
      "mocks.NewMockrateLimiter",
      "Acquire",
      "ErrorIs",
      "mocks.NewMockhttpClient",
      "clients.NewForecaClient",
      "foreca.ErrRequestThrottled",
      "suite.location",
      "context.TODO",
      "ratelimit.ErrLimitReached",
      "GetForecastForLocation",
      "NotNil",
      "forecaClientTestSuite"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks",
      "github.com/stretchr/testify/suite",
      "context",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca"
    ],
    "neighbors": {
      "prev": "173399b47bfc167f83fae73e424943a1a028e6dfd7f8b14ab4fd665351478714",
      "next": "8c8da3f486838a6220f6fccc6926572b4ae2df33137e78a1ec2ebc04e5e54e4f"
    },
    "summary_1l": "Go method TestGetForecastForLocationLimitReached on suite *forecaClientTestSuite for the Foreca proxy",
    "qa_terms": "TestGetForecastForLocationLimitReached, foreca, proxy, suite forecaClientTestSuite, throttled, weather",
    "token_counts": {
      "header": 116,
      "core": 145,
      "footer": 0,
      "total": 262
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.096984+00:00",
    "v": 3
  },
  {
    "chunk_id": "8c8da3f486838a6220f6fccc6926572b4ae2df33137e78a1ec2ebc04e5e54e4f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 823,
    "end_line": 840,
    "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationLimitError",
    "text": "package clients_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}",
    "header_context": "package clients_test\nimport (\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationLimitError"
    ],
    "symbols_referenced": [
      "EXPECT",
      "err",
      "suite.mockController",
      "Return",
      "mocks.NewMocktransformer",
      "suite.Assert",
      "gomock.Any",
      "mocks.NewMockrateLimiter",
      "Acquire",
      "mocks.NewMockhttpClient",
      "clients.NewForecaClient",
      "ratelimit.ErrCountZero",
      "suite.location",
      "error",
      "context.TODO",
      "ErrorContains",
      "GetForecastForLocation",
      "NotNil",
      "forecaClientTestSuite"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks",
      "github.com/stretchr/testify/suite",
      "context"
    ],
    "neighbors": {
      "prev": "e913215807d5dfd3d8bc09684fcb7d6a0070cae8233194741996a2487d5fe1b4",
      "next": "74da23683199bef92b21c1b6deef320a447aad74f703e0c47fab22e8b344cfb8"
    },
    "summary_1l": "Go method TestGetForecastForLocationLimitError on suite *forecaClientTestSuite for the Foreca proxy",
    "qa_terms": "TestGetForecastForLocationLimitError, foreca, proxy, suite forecaClientTestSuite, throttled, weather",
    "token_counts": {
      "header": 99,
      "core": 142,
      "footer": 0,
      "total": 242
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.097540+00:00",
    "v": 3
  },
  {
    "chunk_id": "74da23683199bef92b21c1b6deef320a447aad74f703e0c47fab22e8b344cfb8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 842,
    "end_line": 859,
    "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationLimitUnknownError",
    "text": "package clients_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}",
    "header_context": "package clients_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationLimitUnknownError"
    ],
    "symbols_referenced": [
      "EXPECT",
      "err",
      "suite.mockController",
      "Return",
      "errors.New",
      "mocks.NewMocktransformer",
      "suite.Assert",
      "gomock.Any",
      "mocks.NewMockrateLimiter",
      "Acquire",
      "mocks.NewMockhttpClient",
      "clients.NewForecaClient",
      "suite.location",
      "error",
      "context.TODO",
      "GetForecastForLocation",
      "ErrorContains",
      "NotNil",
      "forecaClientTestSuite"
    ],
    "imports_used": [
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "errors",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks",
      "github.com/stretchr/testify/suite",
      "context"
    ],
    "neighbors": {
      "prev": "8c8da3f486838a6220f6fccc6926572b4ae2df33137e78a1ec2ebc04e5e54e4f",
      "next": "6e59662fe07e9c38193f54baf36f1eaedb6cd98fa1e3f5025b5e6a2098322726"
    },
    "summary_1l": "Go method TestGetForecastForLocationLimitUnknownError on suite *forecaClientTestSuite for the Foreca proxy",
    "qa_terms": "TestGetForecastForLocationLimitUnknownError, foreca, proxy, suite forecaClientTestSuite, weather",
    "token_counts": {
      "header": 85,
      "core": 140,
      "footer": 0,
      "total": 226
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.098076+00:00",
    "v": 3
  },
  {
    "chunk_id": "6e59662fe07e9c38193f54baf36f1eaedb6cd98fa1e3f5025b5e6a2098322726",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 861,
    "end_line": 881,
    "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationHttpError",
    "text": "package clients_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}",
    "header_context": "package clients_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationHttpError"
    ],
    "symbols_referenced": [
      "EXPECT",
      "err",
      "suite.mockController",
      "Return",
      "errors.New",
      "mocks.NewMocktransformer",
      "In",
      "suite.Assert",
      "gomock.Any",
      "mocks.NewMockrateLimiter",
      "Acquire",
      "mocks.NewMockhttpClient",
      "clients.NewForecaClient",
      "Unix",
      "suite.location",
      "error",
      "context.TODO",
      "Do",
      "time.Now",
      "ErrorContains",
      "GetForecastForLocation",
      "NotNil",
      "forecaClientTestSuite"
    ],
    "imports_used": [
      "time",
      "go.uber.org/mock/gomock",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients",
      "errors",
      "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks",
      "net/http",
      "github.com/stretchr/testify/suite",
      "context"
    ],
    "neighbors": {
      "prev": "74da23683199bef92b21c1b6deef320a447aad74f703e0c47fab22e8b344cfb8",
      "next": "6eeff485eb26d81123c6bc06f252062b23f48600e1891642401abad5e03a64ed"
    },
    "summary_1l": "Go method TestGetForecastForLocationHttpError on suite *forecaClientTestSuite for the Foreca proxy",
    "qa_terms": "TestGetForecastForLocationHttpError, foreca, proxy, suite forecaClientTestSuite, weather",
    "token_counts": {
      "header": 92,
      "core": 166,
      "footer": 0,
      "total": 259
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.098690+00:00",
    "v": 3
  },
  {
    "chunk_id": "6eeff485eb26d81123c6bc06f252062b23f48600e1891642401abad5e03a64ed",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 883,
    "end_line": 897,
    "ast_path": "go:method:(*suite forecaClientTestSuite).TestGetForecastForLocationTransformError#part1_block1",
    "text": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}",
    "header_context": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationTransformError"
    ],
    "symbols_referenced": [
      "StatusCode",
      "NewReader",
      "NopCloser",
      "Body",
      "Response",
      "forecaClientTestSuite"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6e59662fe07e9c38193f54baf36f1eaedb6cd98fa1e3f5025b5e6a2098322726",
      "next": "668da52ddbc12c800382981363b6ea03a48ddbbe0bd120da00a9bdf9598911cc"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationTransformError, suite forecaClientTestSuite",
    "token_counts": {
      "header": 112,
      "core": 290,
      "footer": 0,
      "total": 403
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.100092+00:00",
    "v": 3
  },
  {
    "chunk_id": "668da52ddbc12c800382981363b6ea03a48ddbbe0bd120da00a9bdf9598911cc",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 898,
    "end_line": 912,
    "ast_path": "go:method:(*suite forecaClientTestSuite).TestGetForecastForLocationTransformError#part2_block2",
    "text": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},",
    "header_context": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationTransformError"
    ],
    "symbols_referenced": [
      "EXPECT",
      "location",
      "Now",
      "NewMockrateLimiter",
      "Do",
      "Return",
      "mockController",
      "NewForecaClient",
      "In",
      "Unix",
      "NewMockhttpClient",
      "Forecast",
      "NewMocktransformer",
      "Any",
      "Acquire",
      "Transform"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6eeff485eb26d81123c6bc06f252062b23f48600e1891642401abad5e03a64ed",
      "next": "46ae8b3bf7ca808375f9a4a94d752433cf272f27ca2b9246011670fbd796e722"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationTransformError, suite forecaClientTestSuite",
    "token_counts": {
      "header": 112,
      "core": 128,
      "footer": 0,
      "total": 240
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.100519+00:00",
    "v": 3
  },
  {
    "chunk_id": "46ae8b3bf7ca808375f9a4a94d752433cf272f27ca2b9246011670fbd796e722",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 913,
    "end_line": 923,
    "ast_path": "go:method:(*suite forecaClientTestSuite).TestGetForecastForLocationTransformError#part3_block3",
    "text": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().Nil(f.CurrentCondition)\n\tsuite.Assert().Nil(f.DailyConditions)\n\tsuite.Assert().Nil(f.HourlyConditions)\n}",
    "header_context": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().Nil(f.CurrentCondition)\n\tsuite.Assert().Nil(f.DailyConditions)\n\tsuite.Assert().Nil(f.HourlyConditions)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationTransformError"
    ],
    "symbols_referenced": [
      "location",
      "NotNil",
      "Assert",
      "GetForecastForLocation",
      "TODO",
      "DailyConditions",
      "Nil",
      "f",
      "CurrentCondition",
      "HourlyConditions"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "668da52ddbc12c800382981363b6ea03a48ddbbe0bd120da00a9bdf9598911cc",
      "next": "da79f614d542c98f65380723ca82e0ade67c2e1dfee17c90a0e15e1d5a5431d3"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationTransformError, suite forecaClientTestSuite",
    "token_counts": {
      "header": 112,
      "core": 63,
      "footer": 0,
      "total": 176
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.100812+00:00",
    "v": 3
  },
  {
    "chunk_id": "da79f614d542c98f65380723ca82e0ade67c2e1dfee17c90a0e15e1d5a5431d3",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 925,
    "end_line": 939,
    "ast_path": "go:method:(*suite forecaClientTestSuite).TestGetForecastForLocationValid#part1_block1",
    "text": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}",
    "header_context": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationValid"
    ],
    "symbols_referenced": [
      "StatusCode",
      "NewReader",
      "NopCloser",
      "Body",
      "Response",
      "forecaClientTestSuite"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "46ae8b3bf7ca808375f9a4a94d752433cf272f27ca2b9246011670fbd796e722",
      "next": "7fada081b727886dc3bf9fb6abc1387252f5c0e099ea94748a4858e97811eb90"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationValid, suite forecaClientTestSuite",
    "token_counts": {
      "header": 112,
      "core": 289,
      "footer": 0,
      "total": 402
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.102612+00:00",
    "v": 3
  },
  {
    "chunk_id": "7fada081b727886dc3bf9fb6abc1387252f5c0e099ea94748a4858e97811eb90",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 940,
    "end_line": 954,
    "ast_path": "go:method:(*suite forecaClientTestSuite).TestGetForecastForLocationValid#part2_block2",
    "text": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t})\n",
    "header_context": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t})\n",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationValid"
    ],
    "symbols_referenced": [
      "EXPECT",
      "Return",
      "DailyCondition",
      "mockController",
      "In",
      "HourlyCondition",
      "Acquire",
      "Transform",
      "HourlyConditions",
      "foreca",
      "location",
      "NewMockrateLimiter",
      "Unix",
      "NewMockhttpClient",
      "Any",
      "Do",
      "NewMocktransformer",
      "DailyConditions",
      "Now",
      "CurrentCondition",
      "Forecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "da79f614d542c98f65380723ca82e0ade67c2e1dfee17c90a0e15e1d5a5431d3",
      "next": "151320556778dfd21d08cd19966003b8e4d338dc5f1b5bab7ba7a18215a14fa9"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationValid, suite forecaClientTestSuite",
    "token_counts": {
      "header": 112,
      "core": 155,
      "footer": 0,
      "total": 267
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.103232+00:00",
    "v": 3
  },
  {
    "chunk_id": "151320556778dfd21d08cd19966003b8e4d338dc5f1b5bab7ba7a18215a14fa9",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 955,
    "end_line": 969,
    "ast_path": "go:method:(*suite forecaClientTestSuite).TestGetForecastForLocationValid#part3_block3",
    "text": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}",
    "header_context": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n// receiver: suite *forecaClientTestSuite",
    "core": "\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}",
    "footer_context": "",
    "symbols_defined": [
      "TestGetForecastForLocationValid"
    ],
    "symbols_referenced": [
      "location",
      "NotNil",
      "Assert",
      "NewForecaClient",
      "GetForecastForLocation",
      "TODO",
      "DailyConditions",
      "f",
      "CurrentCondition",
      "HourlyConditions"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7fada081b727886dc3bf9fb6abc1387252f5c0e099ea94748a4858e97811eb90",
      "next": "d421de04ab21080efbb1c80a0cc8c837f13c38ff3e45b63d425e9aa42b0990eb"
    },
    "summary_1l": "Part of GetForecastForLocation method for weather forecasting.",
    "qa_terms": "TestGetForecastForLocationValid, suite forecaClientTestSuite",
    "token_counts": {
      "header": 112,
      "core": 83,
      "footer": 0,
      "total": 196
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.103632+00:00",
    "v": 3
  },
  {
    "chunk_id": "d421de04ab21080efbb1c80a0cc8c837f13c38ff3e45b63d425e9aa42b0990eb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go",
    "language": "go",
    "start_line": 971,
    "end_line": 977,
    "ast_path": "go:function:",
    "text": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)\nfunc TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}",
    "header_context": "package clients_test\nimport (\n\t\"github.com/stretchr/testify/suite\"\n\t\"testing\"\n)",
    "core": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "testing.T",
      "hourlyForecastTransformerTestSuite",
      "TestForecaClient",
      "currentConditionTransformerTestSuite",
      "transformerTestSuite",
      "dailyForecastTransformerTestSuite",
      "suite.Run",
      "forecaClientTestSuite"
    ],
    "imports_used": [
      "github.com/stretchr/testify/suite",
      "testing"
    ],
    "neighbors": {
      "prev": "151320556778dfd21d08cd19966003b8e4d338dc5f1b5bab7ba7a18215a14fa9",
      "next": null
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 18,
      "core": 69,
      "footer": 0,
      "total": 87
    },
    "file_sha": "f88d4170ef8f1d829077fb27a65914e9a2e471084249645d0a4b1fd705008872",
    "created_at": "2025-10-07T09:26:57.103973+00:00",
    "v": 3
  },
  {
    "chunk_id": "c6d1d336937fcbecaa33789296931c4978196450f8a8511c2d1c56e6bb5e7af2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 7,
    "end_line": 9,
    "ast_path": "go:file_header",
    "text": "package v0\n\nimport (",
    "header_context": "",
    "core": "package v0\n\nimport (",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [
      "google.golang.org/protobuf/reflect/protoreflect",
      "google.golang.org/protobuf/runtime/protoimpl",
      "reflect",
      "sync"
    ],
    "neighbors": {
      "prev": null,
      "next": "515f5ee800114c91c7a4a0d1fafe7f87a6ffe922c6e28bc7df5e577e7d992d43"
    },
    "summary_1l": "Go package ",
    "qa_terms": ", foreca, weather, proxy",
    "token_counts": {
      "header": 0,
      "core": 6,
      "footer": 0,
      "total": 6
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.090977+00:00",
    "v": 3
  },
  {
    "chunk_id": "515f5ee800114c91c7a4a0d1fafe7f87a6ffe922c6e28bc7df5e577e7d992d43",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 23,
    "end_line": 29,
    "ast_path": "go:type:ForecastRequest (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tLocationId int64 `protobuf:\"varint,1,opt,name=locationId,proto3\" json:\"locationId,omitempty\"` // The Impala Location ID.\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastRequest"
    ],
    "symbols_referenced": [
      "protoimpl.MessageState",
      "protoimpl.SizeCache",
      "protoimpl.UnknownFields"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "c6d1d336937fcbecaa33789296931c4978196450f8a8511c2d1c56e6bb5e7af2",
      "next": "c002689f4086d6701a7025a410a8b6c03d97fc429412ac73dbab2688c1a4b661"
    },
    "summary_1l": "Go struct ForecastRequest for weather forecasting",
    "qa_terms": "ForecastRequest, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 62,
      "footer": 0,
      "total": 77
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.091383+00:00",
    "v": 3
  },
  {
    "chunk_id": "c002689f4086d6701a7025a410a8b6c03d97fc429412ac73dbab2688c1a4b661",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 31,
    "end_line": 38,
    "ast_path": "go:method:(x *ForecastRequest).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastRequest\nfunc (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastRequest",
    "core": "func (x *ForecastRequest) Reset() {\n\t*x = ForecastRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "ForecastRequest",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "515f5ee800114c91c7a4a0d1fafe7f87a6ffe922c6e28bc7df5e577e7d992d43",
      "next": "0680df27a3493dda86df8ae48fba9ef2aa00c1eb2637349edc0387515395c88a"
    },
    "summary_1l": "Go method Reset on x *ForecastRequest for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastRequest",
    "token_counts": {
      "header": 22,
      "core": 62,
      "footer": 0,
      "total": 85
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.091767+00:00",
    "v": 3
  },
  {
    "chunk_id": "0680df27a3493dda86df8ae48fba9ef2aa00c1eb2637349edc0387515395c88a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 40,
    "end_line": 42,
    "ast_path": "go:method:(x *ForecastRequest).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastRequest\nfunc (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastRequest",
    "core": "func (x *ForecastRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastRequest",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "c002689f4086d6701a7025a410a8b6c03d97fc429412ac73dbab2688c1a4b661",
      "next": "4afc5aa4aa25b65ad6c2cd39ec2deaa89c4c371c297d5aee427342fc168e0b2b"
    },
    "summary_1l": "Go method String on x *ForecastRequest for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastRequest",
    "token_counts": {
      "header": 22,
      "core": 21,
      "footer": 0,
      "total": 44
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.091970+00:00",
    "v": 3
  },
  {
    "chunk_id": "4afc5aa4aa25b65ad6c2cd39ec2deaa89c4c371c297d5aee427342fc168e0b2b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 44,
    "end_line": 44,
    "ast_path": "go:method:(*ForecastRequest).ProtoMessage",
    "text": "package main\n// receiver: *ForecastRequest\nfunc (*ForecastRequest) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastRequest",
    "core": "func (*ForecastRequest) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastRequest"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0680df27a3493dda86df8ae48fba9ef2aa00c1eb2637349edc0387515395c88a",
      "next": "25e6786d58ce5befe634719d5ef8fd794160d5fc8992997812edae1fa90da9c4"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastRequest for the Foreca proxy",
    "qa_terms": "ForecastRequest, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 9,
      "footer": 0,
      "total": 19
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.092108+00:00",
    "v": 3
  },
  {
    "chunk_id": "25e6786d58ce5befe634719d5ef8fd794160d5fc8992997812edae1fa90da9c4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 46,
    "end_line": 56,
    "ast_path": "go:method:(x *ForecastRequest).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastRequest\nfunc (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastRequest",
    "core": "func (x *ForecastRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "ForecastRequest",
      "protoimpl.UnsafeEnabled",
      "x",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "4afc5aa4aa25b65ad6c2cd39ec2deaa89c4c371c297d5aee427342fc168e0b2b",
      "next": "b2d96b4e827dcf8434759c63b87ec187d7a31d7e7e08d8b16100668830a4d216"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastRequest for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastRequest",
    "token_counts": {
      "header": 40,
      "core": 87,
      "footer": 0,
      "total": 128
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.092508+00:00",
    "v": 3
  },
  {
    "chunk_id": "b2d96b4e827dcf8434759c63b87ec187d7a31d7e7e08d8b16100668830a4d216",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 59,
    "end_line": 61,
    "ast_path": "go:method:(*ForecastRequest).Descriptor",
    "text": "package main\n// receiver: *ForecastRequest\nfunc (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}",
    "header_context": "package main\n// receiver: *ForecastRequest",
    "core": "func (*ForecastRequest) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{0}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastRequest"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "25e6786d58ce5befe634719d5ef8fd794160d5fc8992997812edae1fa90da9c4",
      "next": "ba511de7063fb0e527e7ba1374ac6f52fc7790e5fd3d31bd5f883ad23ca21cc2"
    },
    "summary_1l": "Go method Descriptor on *ForecastRequest for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastRequest, foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 31,
      "footer": 0,
      "total": 41
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.092704+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba511de7063fb0e527e7ba1374ac6f52fc7790e5fd3d31bd5f883ad23ca21cc2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 63,
    "end_line": 68,
    "ast_path": "go:method:(x *ForecastRequest).GetLocationId",
    "text": "package main\n// receiver: x *ForecastRequest\nfunc (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastRequest",
    "core": "func (x *ForecastRequest) GetLocationId() int64 {\n\tif x != nil {\n\t\treturn x.LocationId\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetLocationId"
    ],
    "symbols_referenced": [
      "ForecastRequest"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b2d96b4e827dcf8434759c63b87ec187d7a31d7e7e08d8b16100668830a4d216",
      "next": "35ddea50826b3b99b29dafcb9391158b59b4cdd5818d1b63e8d0a117726d3d29"
    },
    "summary_1l": "Go method GetLocationId on x *ForecastRequest for the Foreca proxy",
    "qa_terms": "GetLocationId, foreca, proxy, weather, x ForecastRequest",
    "token_counts": {
      "header": 10,
      "core": 32,
      "footer": 0,
      "total": 43
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.092887+00:00",
    "v": 3
  },
  {
    "chunk_id": "35ddea50826b3b99b29dafcb9391158b59b4cdd5818d1b63e8d0a117726d3d29",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 70,
    "end_line": 78,
    "ast_path": "go:type:ForecastResponse (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCurrentCondition *ForecastResponse_CurrentCondition `protobuf:\"bytes,1,opt,name=currentCondition,proto3,oneof\" json:\"currentCondition,omitempty\"`\n\tDailyForecasts   []*ForecastResponse_DailyForecast  `protobuf:\"bytes,2,rep,name=dailyForecasts,proto3\" json:\"dailyForecasts,omitempty\"`\n\tHourlyForecasts  []*ForecastResponse_HourlyForecast `protobuf:\"bytes,3,rep,name=hourlyForecasts,proto3\" json:\"hourlyForecasts,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse"
    ],
    "symbols_referenced": [
      "DailyForecasts",
      "HourlyForecasts",
      "protoimpl.SizeCache",
      "ForecastResponse_HourlyForecast",
      "ForecastResponse_DailyForecast",
      "protoimpl.UnknownFields",
      "ForecastResponse_CurrentCondition",
      "protoimpl.MessageState"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "ba511de7063fb0e527e7ba1374ac6f52fc7790e5fd3d31bd5f883ad23ca21cc2",
      "next": "7c7f9d074276bdb672165e064298228ac1603d0e48b037cf4bd72839e4d3080a"
    },
    "summary_1l": "Go struct ForecastResponse for weather forecasting",
    "qa_terms": "ForecastResponse, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 132,
      "footer": 0,
      "total": 147
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.093291+00:00",
    "v": 3
  },
  {
    "chunk_id": "7c7f9d074276bdb672165e064298228ac1603d0e48b037cf4bd72839e4d3080a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 80,
    "end_line": 87,
    "ast_path": "go:method:(x *ForecastResponse).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse\nfunc (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse",
    "core": "func (x *ForecastResponse) Reset() {\n\t*x = ForecastResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "ForecastResponse",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "35ddea50826b3b99b29dafcb9391158b59b4cdd5818d1b63e8d0a117726d3d29",
      "next": "3c2ee38c6c24b8a51f981d1f0c10e3e4f57c2c875f305de49fc9cff03e7379a9"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse",
    "token_counts": {
      "header": 22,
      "core": 62,
      "footer": 0,
      "total": 85
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.093607+00:00",
    "v": 3
  },
  {
    "chunk_id": "3c2ee38c6c24b8a51f981d1f0c10e3e4f57c2c875f305de49fc9cff03e7379a9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 89,
    "end_line": 91,
    "ast_path": "go:method:(x *ForecastResponse).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse\nfunc (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse",
    "core": "func (x *ForecastResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.X",
      "MessageStringOf",
      "ForecastResponse"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "7c7f9d074276bdb672165e064298228ac1603d0e48b037cf4bd72839e4d3080a",
      "next": "7e380220f627a63169d5b31e35334751957b8273a96679448ab1f767dc6ba296"
    },
    "summary_1l": "Go method String on x *ForecastResponse for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse",
    "token_counts": {
      "header": 22,
      "core": 21,
      "footer": 0,
      "total": 44
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.093793+00:00",
    "v": 3
  },
  {
    "chunk_id": "7e380220f627a63169d5b31e35334751957b8273a96679448ab1f767dc6ba296",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 93,
    "end_line": 93,
    "ast_path": "go:method:(*ForecastResponse).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse\nfunc (*ForecastResponse) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse",
    "core": "func (*ForecastResponse) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3c2ee38c6c24b8a51f981d1f0c10e3e4f57c2c875f305de49fc9cff03e7379a9",
      "next": "a416a5dcf137f32015c9c66dc942b4f2e5f993f6dd52fec08cd393a3d715299e"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse for the Foreca proxy",
    "qa_terms": "ForecastResponse, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 9,
      "footer": 0,
      "total": 19
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.093918+00:00",
    "v": 3
  },
  {
    "chunk_id": "a416a5dcf137f32015c9c66dc942b4f2e5f993f6dd52fec08cd393a3d715299e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 95,
    "end_line": 105,
    "ast_path": "go:method:(x *ForecastResponse).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse\nfunc (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse",
    "core": "func (x *ForecastResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "ForecastResponse",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "7e380220f627a63169d5b31e35334751957b8273a96679448ab1f767dc6ba296",
      "next": "83b57c329d7bd64c231ecd717463cfbc70d735dc4e5b3bfa7ed738287948c495"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse",
    "token_counts": {
      "header": 40,
      "core": 87,
      "footer": 0,
      "total": 128
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.094300+00:00",
    "v": 3
  },
  {
    "chunk_id": "83b57c329d7bd64c231ecd717463cfbc70d735dc4e5b3bfa7ed738287948c495",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 108,
    "end_line": 110,
    "ast_path": "go:method:(*ForecastResponse).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse\nfunc (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse",
    "core": "func (*ForecastResponse) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a416a5dcf137f32015c9c66dc942b4f2e5f993f6dd52fec08cd393a3d715299e",
      "next": "54463f9952a218a0b09d3a418a7da8500cae42db5b5ab961c6c39c7f3b055636"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse, foreca, proxy, weather",
    "token_counts": {
      "header": 9,
      "core": 31,
      "footer": 0,
      "total": 41
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.094483+00:00",
    "v": 3
  },
  {
    "chunk_id": "54463f9952a218a0b09d3a418a7da8500cae42db5b5ab961c6c39c7f3b055636",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 112,
    "end_line": 117,
    "ast_path": "go:method:(x *ForecastResponse).GetCurrentCondition",
    "text": "package main\n// receiver: x *ForecastResponse\nfunc (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse",
    "core": "func (x *ForecastResponse) GetCurrentCondition() *ForecastResponse_CurrentCondition {\n\tif x != nil {\n\t\treturn x.CurrentCondition\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetCurrentCondition"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition",
      "ForecastResponse"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "83b57c329d7bd64c231ecd717463cfbc70d735dc4e5b3bfa7ed738287948c495",
      "next": "821b0703e32db4fb9d41048a8354d0d32025b0ab1b734809e8ecc25b502e6788"
    },
    "summary_1l": "Go method GetCurrentCondition on x *ForecastResponse for the Foreca proxy",
    "qa_terms": "GetCurrentCondition, foreca, proxy, weather, x ForecastResponse",
    "token_counts": {
      "header": 10,
      "core": 33,
      "footer": 0,
      "total": 44
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.094865+00:00",
    "v": 3
  },
  {
    "chunk_id": "821b0703e32db4fb9d41048a8354d0d32025b0ab1b734809e8ecc25b502e6788",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 119,
    "end_line": 124,
    "ast_path": "go:method:(x *ForecastResponse).GetDailyForecasts",
    "text": "package main\n// receiver: x *ForecastResponse\nfunc (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse",
    "core": "func (x *ForecastResponse) GetDailyForecasts() []*ForecastResponse_DailyForecast {\n\tif x != nil {\n\t\treturn x.DailyForecasts\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetDailyForecasts"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast",
      "ForecastResponse"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "54463f9952a218a0b09d3a418a7da8500cae42db5b5ab961c6c39c7f3b055636",
      "next": "5900aae03df27ad0f31f73352f6d166738d6f0a58cd92bd90be35a73f20435c3"
    },
    "summary_1l": "Go method GetDailyForecasts on x *ForecastResponse for the Foreca proxy",
    "qa_terms": "GetDailyForecasts, foreca, proxy, weather, x ForecastResponse",
    "token_counts": {
      "header": 10,
      "core": 38,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.095237+00:00",
    "v": 3
  },
  {
    "chunk_id": "5900aae03df27ad0f31f73352f6d166738d6f0a58cd92bd90be35a73f20435c3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 126,
    "end_line": 131,
    "ast_path": "go:method:(x *ForecastResponse).GetHourlyForecasts",
    "text": "package main\n// receiver: x *ForecastResponse\nfunc (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse",
    "core": "func (x *ForecastResponse) GetHourlyForecasts() []*ForecastResponse_HourlyForecast {\n\tif x != nil {\n\t\treturn x.HourlyForecasts\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetHourlyForecasts"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast",
      "ForecastResponse"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "821b0703e32db4fb9d41048a8354d0d32025b0ab1b734809e8ecc25b502e6788",
      "next": "ee51cdddb7e1ec38d03869e61e619f61187087c969b3e65f22161558d5dfbfea"
    },
    "summary_1l": "Go method GetHourlyForecasts on x *ForecastResponse for the Foreca proxy",
    "qa_terms": "GetHourlyForecasts, foreca, proxy, weather, x ForecastResponse",
    "token_counts": {
      "header": 10,
      "core": 40,
      "footer": 0,
      "total": 51
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.095476+00:00",
    "v": 3
  },
  {
    "chunk_id": "ee51cdddb7e1ec38d03869e61e619f61187087c969b3e65f22161558d5dfbfea",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 133,
    "end_line": 140,
    "ast_path": "go:type:ForecastResponse_WeatherCondition (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_WeatherCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tCode        string `protobuf:\"bytes,1,opt,name=code,proto3\" json:\"code,omitempty\"`\n\tDescription string `protobuf:\"bytes,2,opt,name=description,proto3\" json:\"description,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_WeatherCondition"
    ],
    "symbols_referenced": [
      "protoimpl.MessageState",
      "protoimpl.SizeCache",
      "protoimpl.UnknownFields"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "5900aae03df27ad0f31f73352f6d166738d6f0a58cd92bd90be35a73f20435c3",
      "next": "5dca245aa8f541a9d3c7c4685ca58d51b41de2101661a84acf70a84879ae36f1"
    },
    "summary_1l": "Go struct ForecastResponse_WeatherCondition for weather forecasting",
    "qa_terms": "ForecastResponse_WeatherCondition, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 73,
      "footer": 0,
      "total": 88
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.095748+00:00",
    "v": 3
  },
  {
    "chunk_id": "5dca245aa8f541a9d3c7c4685ca58d51b41de2101661a84acf70a84879ae36f1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 142,
    "end_line": 149,
    "ast_path": "go:method:(x *ForecastResponse_WeatherCondition).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WeatherCondition\nfunc (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WeatherCondition",
    "core": "func (x *ForecastResponse_WeatherCondition) Reset() {\n\t*x = ForecastResponse_WeatherCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "ForecastResponse_WeatherCondition",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "ee51cdddb7e1ec38d03869e61e619f61187087c969b3e65f22161558d5dfbfea",
      "next": "29057d10bcf2c064d499388692de38f8e074e922c665363395d91b319fbb4a4a"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_WeatherCondition",
    "token_counts": {
      "header": 25,
      "core": 68,
      "footer": 0,
      "total": 94
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.096062+00:00",
    "v": 3
  },
  {
    "chunk_id": "29057d10bcf2c064d499388692de38f8e074e922c665363395d91b319fbb4a4a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 151,
    "end_line": 153,
    "ast_path": "go:method:(x *ForecastResponse_WeatherCondition).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WeatherCondition\nfunc (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WeatherCondition",
    "core": "func (x *ForecastResponse_WeatherCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_WeatherCondition",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "5dca245aa8f541a9d3c7c4685ca58d51b41de2101661a84acf70a84879ae36f1",
      "next": "08ac34c6f69197e7c09911cc3c525ce03d020cd55733bd646d1484e2cb14746e"
    },
    "summary_1l": "Go method String on x *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_WeatherCondition",
    "token_counts": {
      "header": 25,
      "core": 24,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.096262+00:00",
    "v": 3
  },
  {
    "chunk_id": "08ac34c6f69197e7c09911cc3c525ce03d020cd55733bd646d1484e2cb14746e",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 155,
    "end_line": 155,
    "ast_path": "go:method:(*ForecastResponse_WeatherCondition).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_WeatherCondition\nfunc (*ForecastResponse_WeatherCondition) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_WeatherCondition",
    "core": "func (*ForecastResponse_WeatherCondition) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "29057d10bcf2c064d499388692de38f8e074e922c665363395d91b319fbb4a4a",
      "next": "e36d25b5ba44f6cebcae4a91a10ed8c3cd7d15516528aeeaab56133c5cc68a73"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "ForecastResponse_WeatherCondition, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 12,
      "footer": 0,
      "total": 25
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.096394+00:00",
    "v": 3
  },
  {
    "chunk_id": "e36d25b5ba44f6cebcae4a91a10ed8c3cd7d15516528aeeaab56133c5cc68a73",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 157,
    "end_line": 167,
    "ast_path": "go:method:(x *ForecastResponse_WeatherCondition).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WeatherCondition\nfunc (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WeatherCondition",
    "core": "func (x *ForecastResponse_WeatherCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "ForecastResponse_WeatherCondition",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "08ac34c6f69197e7c09911cc3c525ce03d020cd55733bd646d1484e2cb14746e",
      "next": "b6c19dd2faab6834a2591d3d030f9573ce0b83b99f859dfa8f26f59c605c6b53"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_WeatherCondition",
    "token_counts": {
      "header": 43,
      "core": 90,
      "footer": 0,
      "total": 134
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.096771+00:00",
    "v": 3
  },
  {
    "chunk_id": "b6c19dd2faab6834a2591d3d030f9573ce0b83b99f859dfa8f26f59c605c6b53",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 170,
    "end_line": 172,
    "ast_path": "go:method:(*ForecastResponse_WeatherCondition).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_WeatherCondition\nfunc (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_WeatherCondition",
    "core": "func (*ForecastResponse_WeatherCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 0}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e36d25b5ba44f6cebcae4a91a10ed8c3cd7d15516528aeeaab56133c5cc68a73",
      "next": "411100e82c4961c78fe40dd8d63444fd675232b2f5b8897c7c094292d9da2fa9"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_WeatherCondition, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.096961+00:00",
    "v": 3
  },
  {
    "chunk_id": "411100e82c4961c78fe40dd8d63444fd675232b2f5b8897c7c094292d9da2fa9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 174,
    "end_line": 179,
    "ast_path": "go:method:(x *ForecastResponse_WeatherCondition).GetCode",
    "text": "package main\n// receiver: x *ForecastResponse_WeatherCondition\nfunc (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_WeatherCondition",
    "core": "func (x *ForecastResponse_WeatherCondition) GetCode() string {\n\tif x != nil {\n\t\treturn x.Code\n\t}\n\treturn \"\"\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetCode"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "b6c19dd2faab6834a2591d3d030f9573ce0b83b99f859dfa8f26f59c605c6b53",
      "next": "8ac55823a1768246b44eff74721d1b0be840d94c7eb7decef68a52b641350fc7"
    },
    "summary_1l": "Go method GetCode on x *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "GetCode, foreca, proxy, weather, x ForecastResponse_WeatherCondition",
    "token_counts": {
      "header": 13,
      "core": 30,
      "footer": 0,
      "total": 44
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.097136+00:00",
    "v": 3
  },
  {
    "chunk_id": "8ac55823a1768246b44eff74721d1b0be840d94c7eb7decef68a52b641350fc7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 181,
    "end_line": 186,
    "ast_path": "go:method:(x *ForecastResponse_WeatherCondition).GetDescription",
    "text": "package main\n// receiver: x *ForecastResponse_WeatherCondition\nfunc (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_WeatherCondition",
    "core": "func (x *ForecastResponse_WeatherCondition) GetDescription() string {\n\tif x != nil {\n\t\treturn x.Description\n\t}\n\treturn \"\"\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetDescription"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "411100e82c4961c78fe40dd8d63444fd675232b2f5b8897c7c094292d9da2fa9",
      "next": "e2b2d32e2e1b8e9752ffd794728879b6e7857f2141927dc760c733d89564c369"
    },
    "summary_1l": "Go method GetDescription on x *ForecastResponse_WeatherCondition for the Foreca proxy",
    "qa_terms": "GetDescription, foreca, proxy, weather, x ForecastResponse_WeatherCondition",
    "token_counts": {
      "header": 13,
      "core": 30,
      "footer": 0,
      "total": 44
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.097312+00:00",
    "v": 3
  },
  {
    "chunk_id": "e2b2d32e2e1b8e9752ffd794728879b6e7857f2141927dc760c733d89564c369",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 188,
    "end_line": 195,
    "ast_path": "go:type:ForecastResponse_WindDirection (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_WindDirection struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tAbbreviation string  `protobuf:\"bytes,1,opt,name=abbreviation,proto3\" json:\"abbreviation,omitempty\"`\n\tDegrees      float32 `protobuf:\"fixed32,2,opt,name=degrees,proto3\" json:\"degrees,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_WindDirection"
    ],
    "symbols_referenced": [
      "protoimpl.MessageState",
      "protoimpl.SizeCache",
      "protoimpl.UnknownFields"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "8ac55823a1768246b44eff74721d1b0be840d94c7eb7decef68a52b641350fc7",
      "next": "8aff672f043418c8d21f80d036576093c198871624551c247b469381370e8aba"
    },
    "summary_1l": "Go struct ForecastResponse_WindDirection for weather forecasting",
    "qa_terms": "ForecastResponse_WindDirection, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 81,
      "footer": 0,
      "total": 96
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.097572+00:00",
    "v": 3
  },
  {
    "chunk_id": "8aff672f043418c8d21f80d036576093c198871624551c247b469381370e8aba",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 197,
    "end_line": 204,
    "ast_path": "go:method:(x *ForecastResponse_WindDirection).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WindDirection\nfunc (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WindDirection",
    "core": "func (x *ForecastResponse_WindDirection) Reset() {\n\t*x = ForecastResponse_WindDirection{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "ForecastResponse_WindDirection",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "e2b2d32e2e1b8e9752ffd794728879b6e7857f2141927dc760c733d89564c369",
      "next": "26a0cbe4c930d93212c47517ef15962033b628a0f3e1d5e6ee7ef1ae155bee36"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_WindDirection",
    "token_counts": {
      "header": 25,
      "core": 68,
      "footer": 0,
      "total": 94
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.097859+00:00",
    "v": 3
  },
  {
    "chunk_id": "26a0cbe4c930d93212c47517ef15962033b628a0f3e1d5e6ee7ef1ae155bee36",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 206,
    "end_line": 208,
    "ast_path": "go:method:(x *ForecastResponse_WindDirection).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WindDirection\nfunc (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_WindDirection",
    "core": "func (x *ForecastResponse_WindDirection) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_WindDirection",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "8aff672f043418c8d21f80d036576093c198871624551c247b469381370e8aba",
      "next": "ff22d0ab5b0db0490731589584ad16b60ae88cd359664a0c86ee704c9f5eb64a"
    },
    "summary_1l": "Go method String on x *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_WindDirection",
    "token_counts": {
      "header": 25,
      "core": 24,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.098041+00:00",
    "v": 3
  },
  {
    "chunk_id": "ff22d0ab5b0db0490731589584ad16b60ae88cd359664a0c86ee704c9f5eb64a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 210,
    "end_line": 210,
    "ast_path": "go:method:(*ForecastResponse_WindDirection).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_WindDirection\nfunc (*ForecastResponse_WindDirection) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_WindDirection",
    "core": "func (*ForecastResponse_WindDirection) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_WindDirection"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "26a0cbe4c930d93212c47517ef15962033b628a0f3e1d5e6ee7ef1ae155bee36",
      "next": "ba3baf01ed0dbe2d64b6ee3a75b8743a1ce110e550a3a0563d2739a6ae1e78b9"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "ForecastResponse_WindDirection, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 12,
      "footer": 0,
      "total": 25
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.098169+00:00",
    "v": 3
  },
  {
    "chunk_id": "ba3baf01ed0dbe2d64b6ee3a75b8743a1ce110e550a3a0563d2739a6ae1e78b9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 212,
    "end_line": 222,
    "ast_path": "go:method:(x *ForecastResponse_WindDirection).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WindDirection\nfunc (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_WindDirection",
    "core": "func (x *ForecastResponse_WindDirection) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "ForecastResponse_WindDirection",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "ff22d0ab5b0db0490731589584ad16b60ae88cd359664a0c86ee704c9f5eb64a",
      "next": "c31a4ecb5171436570572388efcc5e55737caf7ef40c68b46ccbc742bb5badaa"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_WindDirection",
    "token_counts": {
      "header": 43,
      "core": 90,
      "footer": 0,
      "total": 134
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.098536+00:00",
    "v": 3
  },
  {
    "chunk_id": "c31a4ecb5171436570572388efcc5e55737caf7ef40c68b46ccbc742bb5badaa",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 225,
    "end_line": 227,
    "ast_path": "go:method:(*ForecastResponse_WindDirection).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_WindDirection\nfunc (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_WindDirection",
    "core": "func (*ForecastResponse_WindDirection) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 1}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_WindDirection"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ba3baf01ed0dbe2d64b6ee3a75b8743a1ce110e550a3a0563d2739a6ae1e78b9",
      "next": "fe6dbf3d079581686d4109ce6abc7a66a0e19caf58331136550b0bdf1a153e61"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_WindDirection, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.098719+00:00",
    "v": 3
  },
  {
    "chunk_id": "fe6dbf3d079581686d4109ce6abc7a66a0e19caf58331136550b0bdf1a153e61",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 229,
    "end_line": 234,
    "ast_path": "go:method:(x *ForecastResponse_WindDirection).GetAbbreviation",
    "text": "package main\n// receiver: x *ForecastResponse_WindDirection\nfunc (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_WindDirection",
    "core": "func (x *ForecastResponse_WindDirection) GetAbbreviation() string {\n\tif x != nil {\n\t\treturn x.Abbreviation\n\t}\n\treturn \"\"\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetAbbreviation"
    ],
    "symbols_referenced": [
      "ForecastResponse_WindDirection"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c31a4ecb5171436570572388efcc5e55737caf7ef40c68b46ccbc742bb5badaa",
      "next": "2e31cadb4a55081098058bf478a00ce9f7f5dcb892189b3a986518526b703254"
    },
    "summary_1l": "Go method GetAbbreviation on x *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "GetAbbreviation, foreca, proxy, weather, x ForecastResponse_WindDirection",
    "token_counts": {
      "header": 13,
      "core": 35,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.098902+00:00",
    "v": 3
  },
  {
    "chunk_id": "2e31cadb4a55081098058bf478a00ce9f7f5dcb892189b3a986518526b703254",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 236,
    "end_line": 241,
    "ast_path": "go:method:(x *ForecastResponse_WindDirection).GetDegrees",
    "text": "package main\n// receiver: x *ForecastResponse_WindDirection\nfunc (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_WindDirection",
    "core": "func (x *ForecastResponse_WindDirection) GetDegrees() float32 {\n\tif x != nil {\n\t\treturn x.Degrees\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetDegrees"
    ],
    "symbols_referenced": [
      "ForecastResponse_WindDirection"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fe6dbf3d079581686d4109ce6abc7a66a0e19caf58331136550b0bdf1a153e61",
      "next": "b1cdc2c14f5f061ef3879b1fcced24c1b6c7684b333f13b41f791fa5a504d4bb"
    },
    "summary_1l": "Go method GetDegrees on x *ForecastResponse_WindDirection for the Foreca proxy",
    "qa_terms": "GetDegrees, foreca, proxy, weather, x ForecastResponse_WindDirection",
    "token_counts": {
      "header": 13,
      "core": 35,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.099081+00:00",
    "v": 3
  },
  {
    "chunk_id": "b1cdc2c14f5f061ef3879b1fcced24c1b6c7684b333f13b41f791fa5a504d4bb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 243,
    "end_line": 250,
    "ast_path": "go:type:ForecastResponse_Wind (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_Wind struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDirection *ForecastResponse_WindDirection `protobuf:\"bytes,1,opt,name=direction,proto3\" json:\"direction,omitempty\"`\n\tSpeed     float32                         `protobuf:\"fixed32,2,opt,name=speed,proto3\" json:\"speed,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_Wind"
    ],
    "symbols_referenced": [
      "protoimpl.SizeCache",
      "protoimpl.UnknownFields",
      "ForecastResponse_WindDirection",
      "protoimpl.MessageState"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "2e31cadb4a55081098058bf478a00ce9f7f5dcb892189b3a986518526b703254",
      "next": "4a479cde0bcc086caa42517cf0dfceff0b232e2af5d8abbcae43a0ac717e9e8c"
    },
    "summary_1l": "Go struct ForecastResponse_Wind for weather forecasting",
    "qa_terms": "ForecastResponse_Wind, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 82,
      "footer": 0,
      "total": 97
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.099349+00:00",
    "v": 3
  },
  {
    "chunk_id": "4a479cde0bcc086caa42517cf0dfceff0b232e2af5d8abbcae43a0ac717e9e8c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 252,
    "end_line": 259,
    "ast_path": "go:method:(x *ForecastResponse_Wind).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Wind\nfunc (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Wind",
    "core": "func (x *ForecastResponse_Wind) Reset() {\n\t*x = ForecastResponse_Wind{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "ForecastResponse_Wind",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "b1cdc2c14f5f061ef3879b1fcced24c1b6c7684b333f13b41f791fa5a504d4bb",
      "next": "ac166d2e9b1a9476d271487de3bb721eb7b85115f21a780ed7f07dc9b89733b5"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_Wind",
    "token_counts": {
      "header": 24,
      "core": 66,
      "footer": 0,
      "total": 91
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.099624+00:00",
    "v": 3
  },
  {
    "chunk_id": "ac166d2e9b1a9476d271487de3bb721eb7b85115f21a780ed7f07dc9b89733b5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 261,
    "end_line": 263,
    "ast_path": "go:method:(x *ForecastResponse_Wind).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Wind\nfunc (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Wind",
    "core": "func (x *ForecastResponse_Wind) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_Wind",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "4a479cde0bcc086caa42517cf0dfceff0b232e2af5d8abbcae43a0ac717e9e8c",
      "next": "583fe8ca2e74c7c42d78bde774ad9f19b286d934167830640c43388a75ba6f79"
    },
    "summary_1l": "Go method String on x *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_Wind",
    "token_counts": {
      "header": 24,
      "core": 23,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.099799+00:00",
    "v": 3
  },
  {
    "chunk_id": "583fe8ca2e74c7c42d78bde774ad9f19b286d934167830640c43388a75ba6f79",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 265,
    "end_line": 265,
    "ast_path": "go:method:(*ForecastResponse_Wind).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_Wind\nfunc (*ForecastResponse_Wind) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_Wind",
    "core": "func (*ForecastResponse_Wind) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ac166d2e9b1a9476d271487de3bb721eb7b85115f21a780ed7f07dc9b89733b5",
      "next": "9abffbd6aff2895a1bbcac759f2447efeb1e82b44e1725049e8056e181a94a63"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "ForecastResponse_Wind, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 11,
      "footer": 0,
      "total": 23
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.099917+00:00",
    "v": 3
  },
  {
    "chunk_id": "9abffbd6aff2895a1bbcac759f2447efeb1e82b44e1725049e8056e181a94a63",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 267,
    "end_line": 277,
    "ast_path": "go:method:(x *ForecastResponse_Wind).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_Wind\nfunc (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_Wind",
    "core": "func (x *ForecastResponse_Wind) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "ForecastResponse_Wind",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "583fe8ca2e74c7c42d78bde774ad9f19b286d934167830640c43388a75ba6f79",
      "next": "9b0f0373ca0785295b1746b7220bab2498f74c0717a7e8773f657eb1d374f66f"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_Wind",
    "token_counts": {
      "header": 42,
      "core": 89,
      "footer": 0,
      "total": 132
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.100273+00:00",
    "v": 3
  },
  {
    "chunk_id": "9b0f0373ca0785295b1746b7220bab2498f74c0717a7e8773f657eb1d374f66f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 280,
    "end_line": 282,
    "ast_path": "go:method:(*ForecastResponse_Wind).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_Wind\nfunc (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_Wind",
    "core": "func (*ForecastResponse_Wind) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 2}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9abffbd6aff2895a1bbcac759f2447efeb1e82b44e1725049e8056e181a94a63",
      "next": "f17a35819bafddcd8f6f7acc6f7ea51a312bef0bd1c1b4b9eec902fb612f4233"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_Wind, foreca, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 36,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.100450+00:00",
    "v": 3
  },
  {
    "chunk_id": "f17a35819bafddcd8f6f7acc6f7ea51a312bef0bd1c1b4b9eec902fb612f4233",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 284,
    "end_line": 289,
    "ast_path": "go:method:(x *ForecastResponse_Wind).GetDirection",
    "text": "package main\n// receiver: x *ForecastResponse_Wind\nfunc (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_Wind",
    "core": "func (x *ForecastResponse_Wind) GetDirection() *ForecastResponse_WindDirection {\n\tif x != nil {\n\t\treturn x.Direction\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetDirection"
    ],
    "symbols_referenced": [
      "ForecastResponse_WindDirection",
      "ForecastResponse_Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9b0f0373ca0785295b1746b7220bab2498f74c0717a7e8773f657eb1d374f66f",
      "next": "1652af1b69fd152e0f5d248292070fff047c31f25fac7ee8db16737842a3cfe3"
    },
    "summary_1l": "Go method GetDirection on x *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "GetDirection, foreca, proxy, weather, x ForecastResponse_Wind",
    "token_counts": {
      "header": 12,
      "core": 35,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.100636+00:00",
    "v": 3
  },
  {
    "chunk_id": "1652af1b69fd152e0f5d248292070fff047c31f25fac7ee8db16737842a3cfe3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 291,
    "end_line": 296,
    "ast_path": "go:method:(x *ForecastResponse_Wind).GetSpeed",
    "text": "package main\n// receiver: x *ForecastResponse_Wind\nfunc (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_Wind",
    "core": "func (x *ForecastResponse_Wind) GetSpeed() float32 {\n\tif x != nil {\n\t\treturn x.Speed\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSpeed"
    ],
    "symbols_referenced": [
      "ForecastResponse_Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f17a35819bafddcd8f6f7acc6f7ea51a312bef0bd1c1b4b9eec902fb612f4233",
      "next": "feeda77a901e47a2f67fbac3cc795be4132c51f535cac671037377cedda78797"
    },
    "summary_1l": "Go method GetSpeed on x *ForecastResponse_Wind for the Foreca proxy",
    "qa_terms": "GetSpeed, foreca, proxy, weather, x ForecastResponse_Wind",
    "token_counts": {
      "header": 12,
      "core": 32,
      "footer": 0,
      "total": 45
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.100804+00:00",
    "v": 3
  },
  {
    "chunk_id": "feeda77a901e47a2f67fbac3cc795be4132c51f535cac671037377cedda78797",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 298,
    "end_line": 305,
    "ast_path": "go:type:ForecastResponse_Pressure (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_Pressure struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMillibar float32 `protobuf:\"fixed32,1,opt,name=millibar,proto3\" json:\"millibar,omitempty\"`\n\tTrend    int32   `protobuf:\"varint,2,opt,name=trend,proto3\" json:\"trend,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_Pressure"
    ],
    "symbols_referenced": [
      "protoimpl.MessageState",
      "protoimpl.SizeCache",
      "protoimpl.UnknownFields"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "1652af1b69fd152e0f5d248292070fff047c31f25fac7ee8db16737842a3cfe3",
      "next": "0f26287866110ba7bba9b7721de9290b2073fb71127181bea8b2dee9659ab4f6"
    },
    "summary_1l": "Go struct ForecastResponse_Pressure for weather forecasting",
    "qa_terms": "ForecastResponse_Pressure, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 87,
      "footer": 0,
      "total": 102
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.101053+00:00",
    "v": 3
  },
  {
    "chunk_id": "0f26287866110ba7bba9b7721de9290b2073fb71127181bea8b2dee9659ab4f6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 307,
    "end_line": 314,
    "ast_path": "go:method:(x *ForecastResponse_Pressure).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Pressure\nfunc (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Pressure",
    "core": "func (x *ForecastResponse_Pressure) Reset() {\n\t*x = ForecastResponse_Pressure{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ForecastResponse_Pressure"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "feeda77a901e47a2f67fbac3cc795be4132c51f535cac671037377cedda78797",
      "next": "c247b03abc3772dcf2cb9b458d7261134188e396550fa49a485c025cc694c4c4"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_Pressure",
    "token_counts": {
      "header": 25,
      "core": 68,
      "footer": 0,
      "total": 94
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.101336+00:00",
    "v": 3
  },
  {
    "chunk_id": "c247b03abc3772dcf2cb9b458d7261134188e396550fa49a485c025cc694c4c4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 316,
    "end_line": 318,
    "ast_path": "go:method:(x *ForecastResponse_Pressure).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Pressure\nfunc (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_Pressure",
    "core": "func (x *ForecastResponse_Pressure) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.X",
      "MessageStringOf",
      "ForecastResponse_Pressure"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "0f26287866110ba7bba9b7721de9290b2073fb71127181bea8b2dee9659ab4f6",
      "next": "a2cceafdb9aa9caa2c704505de6f500640cfcfef15ad8ece74c5a834b9ac897f"
    },
    "summary_1l": "Go method String on x *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_Pressure",
    "token_counts": {
      "header": 25,
      "core": 24,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.101509+00:00",
    "v": 3
  },
  {
    "chunk_id": "a2cceafdb9aa9caa2c704505de6f500640cfcfef15ad8ece74c5a834b9ac897f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 320,
    "end_line": 320,
    "ast_path": "go:method:(*ForecastResponse_Pressure).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_Pressure\nfunc (*ForecastResponse_Pressure) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_Pressure",
    "core": "func (*ForecastResponse_Pressure) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "c247b03abc3772dcf2cb9b458d7261134188e396550fa49a485c025cc694c4c4",
      "next": "5f7ef1f526ef2c6474772889ed662684eae505b832ec778e3cec9f9b0560675a"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "ForecastResponse_Pressure, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 12,
      "footer": 0,
      "total": 25
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.101627+00:00",
    "v": 3
  },
  {
    "chunk_id": "5f7ef1f526ef2c6474772889ed662684eae505b832ec778e3cec9f9b0560675a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 322,
    "end_line": 332,
    "ast_path": "go:method:(x *ForecastResponse_Pressure).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_Pressure\nfunc (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_Pressure",
    "core": "func (x *ForecastResponse_Pressure) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms",
      "ForecastResponse_Pressure"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "a2cceafdb9aa9caa2c704505de6f500640cfcfef15ad8ece74c5a834b9ac897f",
      "next": "1843606b53b76632078028cd5ab44294b8c8b025e14b9dd43d9969a83e705dcb"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_Pressure",
    "token_counts": {
      "header": 43,
      "core": 90,
      "footer": 0,
      "total": 134
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.101984+00:00",
    "v": 3
  },
  {
    "chunk_id": "1843606b53b76632078028cd5ab44294b8c8b025e14b9dd43d9969a83e705dcb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 335,
    "end_line": 337,
    "ast_path": "go:method:(*ForecastResponse_Pressure).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_Pressure\nfunc (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_Pressure",
    "core": "func (*ForecastResponse_Pressure) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 3}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "5f7ef1f526ef2c6474772889ed662684eae505b832ec778e3cec9f9b0560675a",
      "next": "8c8062ccbb01b5f047ecaefed483f94d0380f69ee51790c96e406a800656b078"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_Pressure, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.102161+00:00",
    "v": 3
  },
  {
    "chunk_id": "8c8062ccbb01b5f047ecaefed483f94d0380f69ee51790c96e406a800656b078",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 339,
    "end_line": 344,
    "ast_path": "go:method:(x *ForecastResponse_Pressure).GetMillibar",
    "text": "package main\n// receiver: x *ForecastResponse_Pressure\nfunc (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_Pressure",
    "core": "func (x *ForecastResponse_Pressure) GetMillibar() float32 {\n\tif x != nil {\n\t\treturn x.Millibar\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetMillibar"
    ],
    "symbols_referenced": [
      "ForecastResponse_Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1843606b53b76632078028cd5ab44294b8c8b025e14b9dd43d9969a83e705dcb",
      "next": "121c337d25d89c1703e8102c2da10f6a033828f2e70fe7cf8380d4a4e87aa0c5"
    },
    "summary_1l": "Go method GetMillibar on x *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "GetMillibar, foreca, proxy, weather, x ForecastResponse_Pressure",
    "token_counts": {
      "header": 13,
      "core": 38,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.102334+00:00",
    "v": 3
  },
  {
    "chunk_id": "121c337d25d89c1703e8102c2da10f6a033828f2e70fe7cf8380d4a4e87aa0c5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 346,
    "end_line": 351,
    "ast_path": "go:method:(x *ForecastResponse_Pressure).GetTrend",
    "text": "package main\n// receiver: x *ForecastResponse_Pressure\nfunc (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_Pressure",
    "core": "func (x *ForecastResponse_Pressure) GetTrend() int32 {\n\tif x != nil {\n\t\treturn x.Trend\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTrend"
    ],
    "symbols_referenced": [
      "ForecastResponse_Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "8c8062ccbb01b5f047ecaefed483f94d0380f69ee51790c96e406a800656b078",
      "next": "bbd896f792ba3868400584c39851904bcd0719a87c1bc299eca7891aaefc3cc7"
    },
    "summary_1l": "Go method GetTrend on x *ForecastResponse_Pressure for the Foreca proxy",
    "qa_terms": "GetTrend, foreca, proxy, weather, x ForecastResponse_Pressure",
    "token_counts": {
      "header": 13,
      "core": 35,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.102501+00:00",
    "v": 3
  },
  {
    "chunk_id": "bbd896f792ba3868400584c39851904bcd0719a87c1bc299eca7891aaefc3cc7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 353,
    "end_line": 371,
    "ast_path": "go:type:ForecastResponse_CurrentCondition (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust             *ForecastResponse_CurrentCondition_WindGust `protobuf:\"bytes,8,opt,name=windGust,proto3\" json:\"windGust,omitempty\"`\n\tDewPoint             float32                                     `protobuf:\"fixed32,9,opt,name=dewPoint,proto3\" json:\"dewPoint,omitempty\"`\n\tHeatIndex            float32                                     `protobuf:\"fixed32,10,opt,name=heatIndex,proto3\" json:\"heatIndex,omitempty\"`\n\tPressure             *ForecastResponse_Pressure                  `protobuf:\"bytes,11,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tUvIndex              float32                                     `protobuf:\"fixed32,12,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tHumidityPercentage   int32                                       `protobuf:\"varint,13,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_CurrentCondition struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                int64                                       `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tVisibility           float32                                     `protobuf:\"fixed32,2,opt,name=visibility,proto3\" json:\"visibility,omitempty\"`\n\tWeatherCondition     *ForecastResponse_WeatherCondition          `protobuf:\"bytes,3,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation        float32                                     `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tNextHour             *ForecastResponse_CurrentCondition_NextHour `protobuf:\"bytes,5,opt,name=nextHour,proto3\" json:\"nextHour,omitempty\"`\n\tTemperature          float32                                     `protobuf:\"fixed32,6,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike float32                                     `protobuf:\"fixed32,7,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWindGust             *ForecastResponse_CurrentCondition_WindGust `protobuf:\"bytes,8,opt,name=windGust,proto3\" json:\"windGust,omitempty\"`\n\tDewPoint             float32                                     `protobuf:\"fixed32,9,opt,name=dewPoint,proto3\" json:\"dewPoint,omitempty\"`\n\tHeatIndex            float32                                     `protobuf:\"fixed32,10,opt,name=heatIndex,proto3\" json:\"heatIndex,omitempty\"`\n\tPressure             *ForecastResponse_Pressure                  `protobuf:\"bytes,11,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tUvIndex              float32                                     `protobuf:\"fixed32,12,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tHumidityPercentage   int32                                       `protobuf:\"varint,13,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_CurrentCondition"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_WindGust",
      "protoimpl.SizeCache",
      "ForecastResponse_WeatherCondition",
      "protoimpl.UnknownFields",
      "ForecastResponse_Pressure",
      "protoimpl.MessageState",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "121c337d25d89c1703e8102c2da10f6a033828f2e70fe7cf8380d4a4e87aa0c5",
      "next": "402aba891e96656599c24004328a33abe514c8be1e3e2eda3fa0c68c778eee38"
    },
    "summary_1l": "Go struct ForecastResponse_CurrentCondition for weather forecasting",
    "qa_terms": "ForecastResponse_CurrentCondition, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 407,
      "footer": 0,
      "total": 422
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.103767+00:00",
    "v": 3
  },
  {
    "chunk_id": "402aba891e96656599c24004328a33abe514c8be1e3e2eda3fa0c68c778eee38",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 373,
    "end_line": 380,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) Reset() {\n\t*x = ForecastResponse_CurrentCondition{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "bbd896f792ba3868400584c39851904bcd0719a87c1bc299eca7891aaefc3cc7",
      "next": "72f98856952dd7503ea2a3aa3c7c8a1b66e2da0e8d9a08607a342e1f125b490a"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 24,
      "core": 66,
      "footer": 0,
      "total": 91
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.104071+00:00",
    "v": 3
  },
  {
    "chunk_id": "72f98856952dd7503ea2a3aa3c7c8a1b66e2da0e8d9a08607a342e1f125b490a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 382,
    "end_line": 384,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.X",
      "MessageStringOf",
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "402aba891e96656599c24004328a33abe514c8be1e3e2eda3fa0c68c778eee38",
      "next": "71961639942753ed4b9c91b179a54c9b3777a48064591fa389c87293b565bc0d"
    },
    "summary_1l": "Go method String on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 24,
      "core": 23,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.104253+00:00",
    "v": 3
  },
  {
    "chunk_id": "71961639942753ed4b9c91b179a54c9b3777a48064591fa389c87293b565bc0d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 386,
    "end_line": 386,
    "ast_path": "go:method:(*ForecastResponse_CurrentCondition).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_CurrentCondition\nfunc (*ForecastResponse_CurrentCondition) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_CurrentCondition",
    "core": "func (*ForecastResponse_CurrentCondition) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "72f98856952dd7503ea2a3aa3c7c8a1b66e2da0e8d9a08607a342e1f125b490a",
      "next": "3b996b46ad7dea87223102e965cb06a5681d04a0189ce8d8a98f64ab604a7dd0"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "ForecastResponse_CurrentCondition, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 11,
      "footer": 0,
      "total": 23
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.104378+00:00",
    "v": 3
  },
  {
    "chunk_id": "3b996b46ad7dea87223102e965cb06a5681d04a0189ce8d8a98f64ab604a7dd0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 388,
    "end_line": 398,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms",
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "71961639942753ed4b9c91b179a54c9b3777a48064591fa389c87293b565bc0d",
      "next": "2e2304fbb08b96c2c8ab88833f715c5296542322d76d06595f0d95edce4e8a16"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 42,
      "core": 89,
      "footer": 0,
      "total": 132
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.104849+00:00",
    "v": 3
  },
  {
    "chunk_id": "2e2304fbb08b96c2c8ab88833f715c5296542322d76d06595f0d95edce4e8a16",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 401,
    "end_line": 403,
    "ast_path": "go:method:(*ForecastResponse_CurrentCondition).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_CurrentCondition\nfunc (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_CurrentCondition",
    "core": "func (*ForecastResponse_CurrentCondition) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3b996b46ad7dea87223102e965cb06a5681d04a0189ce8d8a98f64ab604a7dd0",
      "next": "0c94bce51f2a890d0cd2423ff5db44bf9a6432629e99587e8e0b14d83780334d"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_CurrentCondition, foreca, proxy, weather",
    "token_counts": {
      "header": 11,
      "core": 36,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.105254+00:00",
    "v": 3
  },
  {
    "chunk_id": "0c94bce51f2a890d0cd2423ff5db44bf9a6432629e99587e8e0b14d83780334d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 405,
    "end_line": 410,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetEpoch",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetEpoch"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2e2304fbb08b96c2c8ab88833f715c5296542322d76d06595f0d95edce4e8a16",
      "next": "6c7bc8832a54f22346d1f83bbea3c4cb5359bac38a13b29ee46c47d7488536d3"
    },
    "summary_1l": "Go method GetEpoch on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetEpoch, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 34,
      "footer": 0,
      "total": 47
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.105477+00:00",
    "v": 3
  },
  {
    "chunk_id": "6c7bc8832a54f22346d1f83bbea3c4cb5359bac38a13b29ee46c47d7488536d3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 412,
    "end_line": 417,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetVisibility",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetVisibility() float32 {\n\tif x != nil {\n\t\treturn x.Visibility\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetVisibility"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0c94bce51f2a890d0cd2423ff5db44bf9a6432629e99587e8e0b14d83780334d",
      "next": "9a5957e3f559eac6dd58e277c7f40af4ebc5e4b1d52828b0eb0b08f1f8d2f59c"
    },
    "summary_1l": "Go method GetVisibility on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetVisibility, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 32,
      "footer": 0,
      "total": 45
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.105698+00:00",
    "v": 3
  },
  {
    "chunk_id": "9a5957e3f559eac6dd58e277c7f40af4ebc5e4b1d52828b0eb0b08f1f8d2f59c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 419,
    "end_line": 424,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetWeatherCondition",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWeatherCondition"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6c7bc8832a54f22346d1f83bbea3c4cb5359bac38a13b29ee46c47d7488536d3",
      "next": "034befb53945d94cf67bd2856083b33c6a74c9adf0ec5b813e564308fb4f42bf"
    },
    "summary_1l": "Go method GetWeatherCondition on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetWeatherCondition, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 38,
      "footer": 0,
      "total": 51
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.105919+00:00",
    "v": 3
  },
  {
    "chunk_id": "034befb53945d94cf67bd2856083b33c6a74c9adf0ec5b813e564308fb4f42bf",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 426,
    "end_line": 431,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetPrecipitation",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitation"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9a5957e3f559eac6dd58e277c7f40af4ebc5e4b1d52828b0eb0b08f1f8d2f59c",
      "next": "459d8a1efc27fa9397d4f9ff9cc0f7a18835813dd334bd1a837ca4c6dd724085"
    },
    "summary_1l": "Go method GetPrecipitation on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetPrecipitation, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.106139+00:00",
    "v": 3
  },
  {
    "chunk_id": "459d8a1efc27fa9397d4f9ff9cc0f7a18835813dd334bd1a837ca4c6dd724085",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 433,
    "end_line": 438,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetNextHour",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetNextHour() *ForecastResponse_CurrentCondition_NextHour {\n\tif x != nil {\n\t\treturn x.NextHour\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetNextHour"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "034befb53945d94cf67bd2856083b33c6a74c9adf0ec5b813e564308fb4f42bf",
      "next": "dd0385f6fc166449123312edf8e37245fc97bf4f43ed363b322ad7dceb45c291"
    },
    "summary_1l": "Go method GetNextHour on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetNextHour, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 39,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.106365+00:00",
    "v": 3
  },
  {
    "chunk_id": "dd0385f6fc166449123312edf8e37245fc97bf4f43ed363b322ad7dceb45c291",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 440,
    "end_line": 445,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetTemperature",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTemperature"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "459d8a1efc27fa9397d4f9ff9cc0f7a18835813dd334bd1a837ca4c6dd724085",
      "next": "f8f4cb14321d22d91456daf4498ad18108eaeb8942fb652e91b5b8822716e10a"
    },
    "summary_1l": "Go method GetTemperature on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetTemperature, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 33,
      "footer": 0,
      "total": 46
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.106551+00:00",
    "v": 3
  },
  {
    "chunk_id": "f8f4cb14321d22d91456daf4498ad18108eaeb8942fb652e91b5b8822716e10a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 447,
    "end_line": 452,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetTemperatureFeelsLike",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTemperatureFeelsLike"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "dd0385f6fc166449123312edf8e37245fc97bf4f43ed363b322ad7dceb45c291",
      "next": "4bf700775b641c1e1bfe4a2b4e43c9f9c231a1353e5193fa2ecb837918731966"
    },
    "summary_1l": "Go method GetTemperatureFeelsLike on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetTemperatureFeelsLike, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.106757+00:00",
    "v": 3
  },
  {
    "chunk_id": "4bf700775b641c1e1bfe4a2b4e43c9f9c231a1353e5193fa2ecb837918731966",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 454,
    "end_line": 459,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetWindGust",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetWindGust() *ForecastResponse_CurrentCondition_WindGust {\n\tif x != nil {\n\t\treturn x.WindGust\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWindGust"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition",
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f8f4cb14321d22d91456daf4498ad18108eaeb8942fb652e91b5b8822716e10a",
      "next": "46fc7b814d8c6668d15eceebc33f1db30c849abd242200d3e09bb9b3353d5ce2"
    },
    "summary_1l": "Go method GetWindGust on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetWindGust, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 43,
      "footer": 0,
      "total": 56
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.106970+00:00",
    "v": 3
  },
  {
    "chunk_id": "46fc7b814d8c6668d15eceebc33f1db30c849abd242200d3e09bb9b3353d5ce2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 461,
    "end_line": 466,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetDewPoint",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetDewPoint() float32 {\n\tif x != nil {\n\t\treturn x.DewPoint\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetDewPoint"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4bf700775b641c1e1bfe4a2b4e43c9f9c231a1353e5193fa2ecb837918731966",
      "next": "fd783d8855600126d70f1007f1fbef88d6346e7a5b24c4bf6c7eb2be322e47bb"
    },
    "summary_1l": "Go method GetDewPoint on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetDewPoint, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 36,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.107219+00:00",
    "v": 3
  },
  {
    "chunk_id": "fd783d8855600126d70f1007f1fbef88d6346e7a5b24c4bf6c7eb2be322e47bb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 468,
    "end_line": 473,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetHeatIndex",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetHeatIndex() float32 {\n\tif x != nil {\n\t\treturn x.HeatIndex\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetHeatIndex"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "46fc7b814d8c6668d15eceebc33f1db30c849abd242200d3e09bb9b3353d5ce2",
      "next": "3047ee1da5ed9dc62572924d64ccd9ea5b3a8f8df8b86335964141c74d937a7a"
    },
    "summary_1l": "Go method GetHeatIndex on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetHeatIndex, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 35,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.107414+00:00",
    "v": 3
  },
  {
    "chunk_id": "3047ee1da5ed9dc62572924d64ccd9ea5b3a8f8df8b86335964141c74d937a7a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 475,
    "end_line": 480,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetPressure",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPressure"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition",
      "ForecastResponse_Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fd783d8855600126d70f1007f1fbef88d6346e7a5b24c4bf6c7eb2be322e47bb",
      "next": "9ba42e2f6e6243bd09ee84a453aa1f327ae68e8ee03e862d7a2aeaa7c27d9bd6"
    },
    "summary_1l": "Go method GetPressure on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetPressure, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.107609+00:00",
    "v": 3
  },
  {
    "chunk_id": "9ba42e2f6e6243bd09ee84a453aa1f327ae68e8ee03e862d7a2aeaa7c27d9bd6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 482,
    "end_line": 487,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetUvIndex",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetUvIndex"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3047ee1da5ed9dc62572924d64ccd9ea5b3a8f8df8b86335964141c74d937a7a",
      "next": "fca761f68cb6afb68f5e8875fff0a8e2604e16b5810be2b1a0b9096213a55005"
    },
    "summary_1l": "Go method GetUvIndex on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetUvIndex, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 36,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.107805+00:00",
    "v": 3
  },
  {
    "chunk_id": "fca761f68cb6afb68f5e8875fff0a8e2604e16b5810be2b1a0b9096213a55005",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 489,
    "end_line": 494,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition).GetHumidityPercentage",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition\nfunc (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition",
    "core": "func (x *ForecastResponse_CurrentCondition) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetHumidityPercentage"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9ba42e2f6e6243bd09ee84a453aa1f327ae68e8ee03e862d7a2aeaa7c27d9bd6",
      "next": "123935bc31e202c46cbeebc6b60c4779ed57f96ccb642aecf18a9fe6b43e60f2"
    },
    "summary_1l": "Go method GetHumidityPercentage on x *ForecastResponse_CurrentCondition for the Foreca proxy",
    "qa_terms": "GetHumidityPercentage, foreca, proxy, weather, x ForecastResponse_CurrentCondition",
    "token_counts": {
      "header": 12,
      "core": 36,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.108005+00:00",
    "v": 3
  },
  {
    "chunk_id": "123935bc31e202c46cbeebc6b60c4779ed57f96ccb642aecf18a9fe6b43e60f2",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 496,
    "end_line": 518,
    "ast_path": "go:type:ForecastResponse_DailyForecast (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32                            `protobuf:\"fixed32,8,opt,name=snowDay,proto3\" json:\"snowDay,omitempty\"`\n\tSnowNight                 float32                            `protobuf:\"fixed32,9,opt,name=snowNight,proto3\" json:\"snowNight,omitempty\"`\n\tPrecipitationProbability  int32                              `protobuf:\"varint,10,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                      *ForecastResponse_Wind             `protobuf:\"bytes,11,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tAverageHumidityPercentage int32                              `protobuf:\"varint,12,opt,name=averageHumidityPercentage,proto3\" json:\"averageHumidityPercentage,omitempty\"`\n\tWeatherCondition          *ForecastResponse_WeatherCondition `protobuf:\"bytes,13,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tWeatherConditionNight     *ForecastResponse_WeatherCondition `protobuf:\"bytes,14,opt,name=weatherConditionNight,proto3\" json:\"weatherConditionNight,omitempty\"`\n\tUvIndex                   float32                            `protobuf:\"fixed32,15,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tSunriseEpoch              int64                              `protobuf:\"varint,16,opt,name=sunriseEpoch,proto3\" json:\"sunriseEpoch,omitempty\"`\n\tSunsetEpoch               int64                              `protobuf:\"varint,17,opt,name=sunsetEpoch,proto3\" json:\"sunsetEpoch,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_DailyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                     int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperatureMin            float32                            `protobuf:\"fixed32,2,opt,name=temperatureMin,proto3\" json:\"temperatureMin,omitempty\"`\n\tTemperatureMax            float32                            `protobuf:\"fixed32,3,opt,name=temperatureMax,proto3\" json:\"temperatureMax,omitempty\"`\n\tPrecipitation             float32                            `protobuf:\"fixed32,4,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tPrecipitationDay          float32                            `protobuf:\"fixed32,5,opt,name=precipitationDay,proto3\" json:\"precipitationDay,omitempty\"`\n\tPrecipitationNight        float32                            `protobuf:\"fixed32,6,opt,name=precipitationNight,proto3\" json:\"precipitationNight,omitempty\"`\n\tSnow                      float32                            `protobuf:\"fixed32,7,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tSnowDay                   float32                            `protobuf:\"fixed32,8,opt,name=snowDay,proto3\" json:\"snowDay,omitempty\"`\n\tSnowNight                 float32                            `protobuf:\"fixed32,9,opt,name=snowNight,proto3\" json:\"snowNight,omitempty\"`\n\tPrecipitationProbability  int32                              `protobuf:\"varint,10,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                      *ForecastResponse_Wind             `protobuf:\"bytes,11,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tAverageHumidityPercentage int32                              `protobuf:\"varint,12,opt,name=averageHumidityPercentage,proto3\" json:\"averageHumidityPercentage,omitempty\"`\n\tWeatherCondition          *ForecastResponse_WeatherCondition `protobuf:\"bytes,13,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tWeatherConditionNight     *ForecastResponse_WeatherCondition `protobuf:\"bytes,14,opt,name=weatherConditionNight,proto3\" json:\"weatherConditionNight,omitempty\"`\n\tUvIndex                   float32                            `protobuf:\"fixed32,15,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n\tSunriseEpoch              int64                              `protobuf:\"varint,16,opt,name=sunriseEpoch,proto3\" json:\"sunriseEpoch,omitempty\"`\n\tSunsetEpoch               int64                              `protobuf:\"varint,17,opt,name=sunsetEpoch,proto3\" json:\"sunsetEpoch,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_DailyForecast"
    ],
    "symbols_referenced": [
      "protoimpl.SizeCache",
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_Wind",
      "protoimpl.UnknownFields",
      "protoimpl.MessageState"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "fca761f68cb6afb68f5e8875fff0a8e2604e16b5810be2b1a0b9096213a55005",
      "next": "06e71d810bf4a16889195d989d451322eb86a1d637755b00ca4aacdc13f1d8b1"
    },
    "summary_1l": "Go struct ForecastResponse_DailyForecast for weather forecasting",
    "qa_terms": "ForecastResponse_DailyForecast, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 538,
      "footer": 0,
      "total": 553
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.109767+00:00",
    "v": 3
  },
  {
    "chunk_id": "06e71d810bf4a16889195d989d451322eb86a1d637755b00ca4aacdc13f1d8b1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 520,
    "end_line": 527,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) Reset() {\n\t*x = ForecastResponse_DailyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "ForecastResponse_DailyForecast",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "123935bc31e202c46cbeebc6b60c4779ed57f96ccb642aecf18a9fe6b43e60f2",
      "next": "6cce3ed268a8076baeaa2d0e2ab66797da149d311dd83df576fdb19d6d13be3a"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 25,
      "core": 68,
      "footer": 0,
      "total": 94
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.110149+00:00",
    "v": 3
  },
  {
    "chunk_id": "6cce3ed268a8076baeaa2d0e2ab66797da149d311dd83df576fdb19d6d13be3a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 529,
    "end_line": 531,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_DailyForecast",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "06e71d810bf4a16889195d989d451322eb86a1d637755b00ca4aacdc13f1d8b1",
      "next": "e56e69d10f152e26521ae46505bd6f2c8fbafb9355b293b60761e81ed721aa8c"
    },
    "summary_1l": "Go method String on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 25,
      "core": 24,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.110350+00:00",
    "v": 3
  },
  {
    "chunk_id": "e56e69d10f152e26521ae46505bd6f2c8fbafb9355b293b60761e81ed721aa8c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 533,
    "end_line": 533,
    "ast_path": "go:method:(*ForecastResponse_DailyForecast).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_DailyForecast\nfunc (*ForecastResponse_DailyForecast) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_DailyForecast",
    "core": "func (*ForecastResponse_DailyForecast) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6cce3ed268a8076baeaa2d0e2ab66797da149d311dd83df576fdb19d6d13be3a",
      "next": "faa5e61d6800e7a28e6de72f7df4412a05d2e1b861ad1b3e4f2f7783075c5707"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "ForecastResponse_DailyForecast, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 12,
      "footer": 0,
      "total": 25
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.110497+00:00",
    "v": 3
  },
  {
    "chunk_id": "faa5e61d6800e7a28e6de72f7df4412a05d2e1b861ad1b3e4f2f7783075c5707",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 535,
    "end_line": 545,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "ForecastResponse_DailyForecast",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "e56e69d10f152e26521ae46505bd6f2c8fbafb9355b293b60761e81ed721aa8c",
      "next": "e9f5cce3f7a238a78fb5a2c51d14ec13f9e0b849cfa77da4aed863c6eda878e6"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 43,
      "core": 90,
      "footer": 0,
      "total": 134
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.110885+00:00",
    "v": 3
  },
  {
    "chunk_id": "e9f5cce3f7a238a78fb5a2c51d14ec13f9e0b849cfa77da4aed863c6eda878e6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 548,
    "end_line": 550,
    "ast_path": "go:method:(*ForecastResponse_DailyForecast).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_DailyForecast\nfunc (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_DailyForecast",
    "core": "func (*ForecastResponse_DailyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 5}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "faa5e61d6800e7a28e6de72f7df4412a05d2e1b861ad1b3e4f2f7783075c5707",
      "next": "cfb353f46437bf88e5b95fc5bb01ccf9d0e58c1ba70f05ac6ac2b5fe17c9b9b9"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_DailyForecast, foreca, proxy, weather",
    "token_counts": {
      "header": 12,
      "core": 37,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.111073+00:00",
    "v": 3
  },
  {
    "chunk_id": "cfb353f46437bf88e5b95fc5bb01ccf9d0e58c1ba70f05ac6ac2b5fe17c9b9b9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 552,
    "end_line": 557,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetEpoch",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetEpoch"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e9f5cce3f7a238a78fb5a2c51d14ec13f9e0b849cfa77da4aed863c6eda878e6",
      "next": "516642aee052092a586bd60b8241c98ca4cccabc33751b6e7d89a94cc6ae3611"
    },
    "summary_1l": "Go method GetEpoch on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetEpoch, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 35,
      "footer": 0,
      "total": 49
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.111252+00:00",
    "v": 3
  },
  {
    "chunk_id": "516642aee052092a586bd60b8241c98ca4cccabc33751b6e7d89a94cc6ae3611",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 559,
    "end_line": 564,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetTemperatureMin",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetTemperatureMin() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMin\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTemperatureMin"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "cfb353f46437bf88e5b95fc5bb01ccf9d0e58c1ba70f05ac6ac2b5fe17c9b9b9",
      "next": "e4a93172f00aa02af5065e487c2b8770c7161fd79161bee6e57dec4a088a56f5"
    },
    "summary_1l": "Go method GetTemperatureMin on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetTemperatureMin, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 36,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.111436+00:00",
    "v": 3
  },
  {
    "chunk_id": "e4a93172f00aa02af5065e487c2b8770c7161fd79161bee6e57dec4a088a56f5",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 566,
    "end_line": 571,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetTemperatureMax",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetTemperatureMax() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureMax\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTemperatureMax"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "516642aee052092a586bd60b8241c98ca4cccabc33751b6e7d89a94cc6ae3611",
      "next": "cbbf7779b9f5a6805d84ee03058c3e7629ff5be00b3fef329dddf5a79c492cac"
    },
    "summary_1l": "Go method GetTemperatureMax on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetTemperatureMax, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 36,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.111613+00:00",
    "v": 3
  },
  {
    "chunk_id": "cbbf7779b9f5a6805d84ee03058c3e7629ff5be00b3fef329dddf5a79c492cac",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 573,
    "end_line": 578,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetPrecipitation",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitation"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e4a93172f00aa02af5065e487c2b8770c7161fd79161bee6e57dec4a088a56f5",
      "next": "47db7379da0507e511608ff78dd24332016b25f4259cd2001beb0bbe5861cfaf"
    },
    "summary_1l": "Go method GetPrecipitation on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetPrecipitation, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 38,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.111789+00:00",
    "v": 3
  },
  {
    "chunk_id": "47db7379da0507e511608ff78dd24332016b25f4259cd2001beb0bbe5861cfaf",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 580,
    "end_line": 585,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetPrecipitationDay",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetPrecipitationDay() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationDay\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitationDay"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "cbbf7779b9f5a6805d84ee03058c3e7629ff5be00b3fef329dddf5a79c492cac",
      "next": "6249e3c19c2a2c9b3ee21180643ac7df87c750937cbc4159f239fde9e37e55ee"
    },
    "summary_1l": "Go method GetPrecipitationDay on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetPrecipitationDay, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 40,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.111970+00:00",
    "v": 3
  },
  {
    "chunk_id": "6249e3c19c2a2c9b3ee21180643ac7df87c750937cbc4159f239fde9e37e55ee",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 587,
    "end_line": 592,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetPrecipitationNight",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetPrecipitationNight() float32 {\n\tif x != nil {\n\t\treturn x.PrecipitationNight\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitationNight"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "47db7379da0507e511608ff78dd24332016b25f4259cd2001beb0bbe5861cfaf",
      "next": "f0eac09ddcbda9aad4c16eadb37eb4cd310ecaa8fb1be4f991a06d7f17ebcb5f"
    },
    "summary_1l": "Go method GetPrecipitationNight on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetPrecipitationNight, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 40,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.112153+00:00",
    "v": 3
  },
  {
    "chunk_id": "f0eac09ddcbda9aad4c16eadb37eb4cd310ecaa8fb1be4f991a06d7f17ebcb5f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 594,
    "end_line": 599,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetSnow",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSnow"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6249e3c19c2a2c9b3ee21180643ac7df87c750937cbc4159f239fde9e37e55ee",
      "next": "6ee522d1a8c30676870d4e53be74a2e0256942dd0c8564297149ffa32ac0d59d"
    },
    "summary_1l": "Go method GetSnow on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetSnow, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 34,
      "footer": 0,
      "total": 48
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.112325+00:00",
    "v": 3
  },
  {
    "chunk_id": "6ee522d1a8c30676870d4e53be74a2e0256942dd0c8564297149ffa32ac0d59d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 601,
    "end_line": 606,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetSnowDay",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetSnowDay() float32 {\n\tif x != nil {\n\t\treturn x.SnowDay\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSnowDay"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "f0eac09ddcbda9aad4c16eadb37eb4cd310ecaa8fb1be4f991a06d7f17ebcb5f",
      "next": "10a1f5f25ba42f5b40e4dc10aff79ebc3de32096cbba50e195ed96428adda77b"
    },
    "summary_1l": "Go method GetSnowDay on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetSnowDay, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 36,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.112493+00:00",
    "v": 3
  },
  {
    "chunk_id": "10a1f5f25ba42f5b40e4dc10aff79ebc3de32096cbba50e195ed96428adda77b",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 608,
    "end_line": 613,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetSnowNight",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetSnowNight() float32 {\n\tif x != nil {\n\t\treturn x.SnowNight\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSnowNight"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "6ee522d1a8c30676870d4e53be74a2e0256942dd0c8564297149ffa32ac0d59d",
      "next": "4066b07e0f02b09d22b728695624fdf853b4ed727ece5d974ca7630209492b76"
    },
    "summary_1l": "Go method GetSnowNight on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetSnowNight, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 36,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.112663+00:00",
    "v": 3
  },
  {
    "chunk_id": "4066b07e0f02b09d22b728695624fdf853b4ed727ece5d974ca7630209492b76",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 615,
    "end_line": 620,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetPrecipitationProbability",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitationProbability"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "10a1f5f25ba42f5b40e4dc10aff79ebc3de32096cbba50e195ed96428adda77b",
      "next": "7993cb17aefbbb95819aaf233de506bdf4b80da4c3bb98f89064adcdafbc69b4"
    },
    "summary_1l": "Go method GetPrecipitationProbability on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetPrecipitationProbability, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 40,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.112851+00:00",
    "v": 3
  },
  {
    "chunk_id": "7993cb17aefbbb95819aaf233de506bdf4b80da4c3bb98f89064adcdafbc69b4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 622,
    "end_line": 627,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetWind",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWind"
    ],
    "symbols_referenced": [
      "ForecastResponse_Wind",
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4066b07e0f02b09d22b728695624fdf853b4ed727ece5d974ca7630209492b76",
      "next": "d9bafcd83ec47cff01090a5e9f7365d1e956fd0d5148e534e4df8baac146e880"
    },
    "summary_1l": "Go method GetWind on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetWind, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 36,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.113032+00:00",
    "v": 3
  },
  {
    "chunk_id": "d9bafcd83ec47cff01090a5e9f7365d1e956fd0d5148e534e4df8baac146e880",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 629,
    "end_line": 634,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetAverageHumidityPercentage",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetAverageHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.AverageHumidityPercentage\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetAverageHumidityPercentage"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7993cb17aefbbb95819aaf233de506bdf4b80da4c3bb98f89064adcdafbc69b4",
      "next": "548921c7b5856616d78428642193075644101f5ce02d983963b51eb530fa2316"
    },
    "summary_1l": "Go method GetAverageHumidityPercentage on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetAverageHumidityPercentage, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 40,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.113227+00:00",
    "v": 3
  },
  {
    "chunk_id": "548921c7b5856616d78428642193075644101f5ce02d983963b51eb530fa2316",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 636,
    "end_line": 641,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetWeatherCondition",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWeatherCondition"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d9bafcd83ec47cff01090a5e9f7365d1e956fd0d5148e534e4df8baac146e880",
      "next": "520f17ac015f5e898b7e60c291567852460d4216c8e9da97f4c581def4c3779c"
    },
    "summary_1l": "Go method GetWeatherCondition on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetWeatherCondition, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 39,
      "footer": 0,
      "total": 53
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.113424+00:00",
    "v": 3
  },
  {
    "chunk_id": "520f17ac015f5e898b7e60c291567852460d4216c8e9da97f4c581def4c3779c",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 643,
    "end_line": 648,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetWeatherConditionNight",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetWeatherConditionNight() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherConditionNight\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWeatherConditionNight"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "548921c7b5856616d78428642193075644101f5ce02d983963b51eb530fa2316",
      "next": "47b9468f4847b831520ab75ed564d2339ca39b5cabfcbef30e2c737d1d8034f0"
    },
    "summary_1l": "Go method GetWeatherConditionNight on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetWeatherConditionNight, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 41,
      "footer": 0,
      "total": 55
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.113623+00:00",
    "v": 3
  },
  {
    "chunk_id": "47b9468f4847b831520ab75ed564d2339ca39b5cabfcbef30e2c737d1d8034f0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 650,
    "end_line": 655,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetUvIndex",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetUvIndex"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "520f17ac015f5e898b7e60c291567852460d4216c8e9da97f4c581def4c3779c",
      "next": "516632b9f1303a5d8f37dc4af9238655477dcb0bf8f4dbcc7663f9d4fd9754cf"
    },
    "summary_1l": "Go method GetUvIndex on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetUvIndex, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 37,
      "footer": 0,
      "total": 51
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.113795+00:00",
    "v": 3
  },
  {
    "chunk_id": "516632b9f1303a5d8f37dc4af9238655477dcb0bf8f4dbcc7663f9d4fd9754cf",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 657,
    "end_line": 662,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetSunriseEpoch",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetSunriseEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunriseEpoch\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSunriseEpoch"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "47b9468f4847b831520ab75ed564d2339ca39b5cabfcbef30e2c737d1d8034f0",
      "next": "0b8207cb6f6cd95173f61c0e042e638f41c240bfc82aff73146ebe2472fc36d8"
    },
    "summary_1l": "Go method GetSunriseEpoch on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetSunriseEpoch, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 38,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.113967+00:00",
    "v": 3
  },
  {
    "chunk_id": "0b8207cb6f6cd95173f61c0e042e638f41c240bfc82aff73146ebe2472fc36d8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 664,
    "end_line": 669,
    "ast_path": "go:method:(x *ForecastResponse_DailyForecast).GetSunsetEpoch",
    "text": "package main\n// receiver: x *ForecastResponse_DailyForecast\nfunc (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_DailyForecast",
    "core": "func (x *ForecastResponse_DailyForecast) GetSunsetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.SunsetEpoch\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSunsetEpoch"
    ],
    "symbols_referenced": [
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "516632b9f1303a5d8f37dc4af9238655477dcb0bf8f4dbcc7663f9d4fd9754cf",
      "next": "de0fe3c9aa3310fecdb26d02035606371bf29f98a64b13f0386c175b2ff798a3"
    },
    "summary_1l": "Go method GetSunsetEpoch on x *ForecastResponse_DailyForecast for the Foreca proxy",
    "qa_terms": "GetSunsetEpoch, foreca, proxy, weather, x ForecastResponse_DailyForecast",
    "token_counts": {
      "header": 13,
      "core": 37,
      "footer": 0,
      "total": 51
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.114144+00:00",
    "v": 3
  },
  {
    "chunk_id": "de0fe3c9aa3310fecdb26d02035606371bf29f98a64b13f0386c175b2ff798a3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 671,
    "end_line": 687,
    "ast_path": "go:type:ForecastResponse_HourlyForecast (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *ForecastResponse_Wind             `protobuf:\"bytes,8,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tPressure                 *ForecastResponse_Pressure         `protobuf:\"bytes,9,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tHumidityPercentage       int32                              `protobuf:\"varint,10,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n\tUvIndex                  float32                            `protobuf:\"fixed32,11,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_HourlyForecast struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tEpoch                    int64                              `protobuf:\"varint,1,opt,name=epoch,proto3\" json:\"epoch,omitempty\"`\n\tTemperature              float32                            `protobuf:\"fixed32,2,opt,name=temperature,proto3\" json:\"temperature,omitempty\"`\n\tTemperatureFeelsLike     float32                            `protobuf:\"fixed32,3,opt,name=temperatureFeelsLike,proto3\" json:\"temperatureFeelsLike,omitempty\"`\n\tWeatherCondition         *ForecastResponse_WeatherCondition `protobuf:\"bytes,4,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation            float32                            `protobuf:\"fixed32,5,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n\tSnow                     float32                            `protobuf:\"fixed32,6,opt,name=snow,proto3\" json:\"snow,omitempty\"`\n\tPrecipitationProbability int32                              `protobuf:\"varint,7,opt,name=precipitationProbability,proto3\" json:\"precipitationProbability,omitempty\"`\n\tWind                     *ForecastResponse_Wind             `protobuf:\"bytes,8,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tPressure                 *ForecastResponse_Pressure         `protobuf:\"bytes,9,opt,name=pressure,proto3\" json:\"pressure,omitempty\"`\n\tHumidityPercentage       int32                              `protobuf:\"varint,10,opt,name=humidityPercentage,proto3\" json:\"humidityPercentage,omitempty\"`\n\tUvIndex                  float32                            `protobuf:\"fixed32,11,opt,name=uvIndex,proto3\" json:\"uvIndex,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_HourlyForecast"
    ],
    "symbols_referenced": [
      "protoimpl.SizeCache",
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_Wind",
      "protoimpl.UnknownFields",
      "ForecastResponse_Pressure",
      "protoimpl.MessageState"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "0b8207cb6f6cd95173f61c0e042e638f41c240bfc82aff73146ebe2472fc36d8",
      "next": "540c585a44e0438db923c116a4c829af3c9ce4337fdef6f336a94c705bd51607"
    },
    "summary_1l": "Go struct ForecastResponse_HourlyForecast for weather forecasting",
    "qa_terms": "ForecastResponse_HourlyForecast, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 344,
      "footer": 0,
      "total": 359
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.115207+00:00",
    "v": 3
  },
  {
    "chunk_id": "540c585a44e0438db923c116a4c829af3c9ce4337fdef6f336a94c705bd51607",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 689,
    "end_line": 696,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) Reset() {\n\t*x = ForecastResponse_HourlyForecast{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "ForecastResponse_HourlyForecast",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "de0fe3c9aa3310fecdb26d02035606371bf29f98a64b13f0386c175b2ff798a3",
      "next": "67da4b27811e51947625bcd25f236b3f6d1cf5f2b31f29c957ccae21f0d284c6"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 26,
      "core": 70,
      "footer": 0,
      "total": 97
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.115497+00:00",
    "v": 3
  },
  {
    "chunk_id": "67da4b27811e51947625bcd25f236b3f6d1cf5f2b31f29c957ccae21f0d284c6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 698,
    "end_line": 700,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_HourlyForecast",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "540c585a44e0438db923c116a4c829af3c9ce4337fdef6f336a94c705bd51607",
      "next": "2f07a6d27617eb3f4c4cab9baf19adee2a68e7709de98660ba8960aba458a2e0"
    },
    "summary_1l": "Go method String on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 26,
      "core": 25,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.115678+00:00",
    "v": 3
  },
  {
    "chunk_id": "2f07a6d27617eb3f4c4cab9baf19adee2a68e7709de98660ba8960aba458a2e0",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 702,
    "end_line": 702,
    "ast_path": "go:method:(*ForecastResponse_HourlyForecast).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_HourlyForecast\nfunc (*ForecastResponse_HourlyForecast) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_HourlyForecast",
    "core": "func (*ForecastResponse_HourlyForecast) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "67da4b27811e51947625bcd25f236b3f6d1cf5f2b31f29c957ccae21f0d284c6",
      "next": "2a1d98fa9e3989cad979b1b36515e2d184378f27b9daefddf23c86fe5172d1de"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "ForecastResponse_HourlyForecast, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 13,
      "core": 13,
      "footer": 0,
      "total": 27
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.115808+00:00",
    "v": 3
  },
  {
    "chunk_id": "2a1d98fa9e3989cad979b1b36515e2d184378f27b9daefddf23c86fe5172d1de",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 704,
    "end_line": 714,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "ForecastResponse_HourlyForecast",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "2f07a6d27617eb3f4c4cab9baf19adee2a68e7709de98660ba8960aba458a2e0",
      "next": "1b1cce7002f05b483c642700a45e0a27b866e0817439f6e15017f60fbcfbde49"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 44,
      "core": 91,
      "footer": 0,
      "total": 136
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.116201+00:00",
    "v": 3
  },
  {
    "chunk_id": "1b1cce7002f05b483c642700a45e0a27b866e0817439f6e15017f60fbcfbde49",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 717,
    "end_line": 719,
    "ast_path": "go:method:(*ForecastResponse_HourlyForecast).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_HourlyForecast\nfunc (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_HourlyForecast",
    "core": "func (*ForecastResponse_HourlyForecast) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 6}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2a1d98fa9e3989cad979b1b36515e2d184378f27b9daefddf23c86fe5172d1de",
      "next": "fc466503cecd85a217945520643b76491381b0cbea17a05d91c9de5ea5fd6a0a"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_HourlyForecast, foreca, proxy, weather",
    "token_counts": {
      "header": 13,
      "core": 38,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.116455+00:00",
    "v": 3
  },
  {
    "chunk_id": "fc466503cecd85a217945520643b76491381b0cbea17a05d91c9de5ea5fd6a0a",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 721,
    "end_line": 726,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetEpoch",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetEpoch() int64 {\n\tif x != nil {\n\t\treturn x.Epoch\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetEpoch"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1b1cce7002f05b483c642700a45e0a27b866e0817439f6e15017f60fbcfbde49",
      "next": "2dc954417fb153e19c2ae0d59eddc5e00853ecd585d74d7cd066dc6d7c3dc4e6"
    },
    "summary_1l": "Go method GetEpoch on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetEpoch, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 36,
      "footer": 0,
      "total": 51
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.116654+00:00",
    "v": 3
  },
  {
    "chunk_id": "2dc954417fb153e19c2ae0d59eddc5e00853ecd585d74d7cd066dc6d7c3dc4e6",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 728,
    "end_line": 733,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetTemperature",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetTemperature() float32 {\n\tif x != nil {\n\t\treturn x.Temperature\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTemperature"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "fc466503cecd85a217945520643b76491381b0cbea17a05d91c9de5ea5fd6a0a",
      "next": "72156056767bec38cdc1508be9daac868e0eaf1f53b23726be98c0ab478c61f8"
    },
    "summary_1l": "Go method GetTemperature on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetTemperature, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 35,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.116840+00:00",
    "v": 3
  },
  {
    "chunk_id": "72156056767bec38cdc1508be9daac868e0eaf1f53b23726be98c0ab478c61f8",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 735,
    "end_line": 740,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetTemperatureFeelsLike",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetTemperatureFeelsLike() float32 {\n\tif x != nil {\n\t\treturn x.TemperatureFeelsLike\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetTemperatureFeelsLike"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2dc954417fb153e19c2ae0d59eddc5e00853ecd585d74d7cd066dc6d7c3dc4e6",
      "next": "9c55c3522836b61534c23cf6074b2507fe2ffe66baa977e701edad98cad512fd"
    },
    "summary_1l": "Go method GetTemperatureFeelsLike on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetTemperatureFeelsLike, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 39,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.117037+00:00",
    "v": 3
  },
  {
    "chunk_id": "9c55c3522836b61534c23cf6074b2507fe2ffe66baa977e701edad98cad512fd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 742,
    "end_line": 747,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetWeatherCondition",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWeatherCondition"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "72156056767bec38cdc1508be9daac868e0eaf1f53b23726be98c0ab478c61f8",
      "next": "247147dc48eb8fe14c1a30ba12d99ca1734109eda3aac2ec38cdb0cc0894b641"
    },
    "summary_1l": "Go method GetWeatherCondition on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetWeatherCondition, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 40,
      "footer": 0,
      "total": 55
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.117288+00:00",
    "v": 3
  },
  {
    "chunk_id": "247147dc48eb8fe14c1a30ba12d99ca1734109eda3aac2ec38cdb0cc0894b641",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 749,
    "end_line": 754,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetPrecipitation",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitation"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9c55c3522836b61534c23cf6074b2507fe2ffe66baa977e701edad98cad512fd",
      "next": "94436f9f846068130b6d9b9c01956d748ada84f61b5dcc2364bf10e8a6c5d957"
    },
    "summary_1l": "Go method GetPrecipitation on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetPrecipitation, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 39,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.117539+00:00",
    "v": 3
  },
  {
    "chunk_id": "94436f9f846068130b6d9b9c01956d748ada84f61b5dcc2364bf10e8a6c5d957",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 756,
    "end_line": 761,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetSnow",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetSnow() float32 {\n\tif x != nil {\n\t\treturn x.Snow\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetSnow"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "247147dc48eb8fe14c1a30ba12d99ca1734109eda3aac2ec38cdb0cc0894b641",
      "next": "498658ec63cbf7f33b17b80aad2533b147328841b646613c56066cb71aace5e9"
    },
    "summary_1l": "Go method GetSnow on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetSnow, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 35,
      "footer": 0,
      "total": 50
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.117735+00:00",
    "v": 3
  },
  {
    "chunk_id": "498658ec63cbf7f33b17b80aad2533b147328841b646613c56066cb71aace5e9",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 763,
    "end_line": 768,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetPrecipitationProbability",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetPrecipitationProbability() int32 {\n\tif x != nil {\n\t\treturn x.PrecipitationProbability\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitationProbability"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "94436f9f846068130b6d9b9c01956d748ada84f61b5dcc2364bf10e8a6c5d957",
      "next": "02bd2b549c2ddd8bae36f08f86beba6ba75864df62d1784eb9f3ed6426160953"
    },
    "summary_1l": "Go method GetPrecipitationProbability on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetPrecipitationProbability, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 41,
      "footer": 0,
      "total": 56
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.117936+00:00",
    "v": 3
  },
  {
    "chunk_id": "02bd2b549c2ddd8bae36f08f86beba6ba75864df62d1784eb9f3ed6426160953",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 770,
    "end_line": 775,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetWind",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWind"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast",
      "ForecastResponse_Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "498658ec63cbf7f33b17b80aad2533b147328841b646613c56066cb71aace5e9",
      "next": "287fef4a185184be60dd63dbe914bedc141332a9f56a3b032e1e0c3b5e190afb"
    },
    "summary_1l": "Go method GetWind on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetWind, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 37,
      "footer": 0,
      "total": 52
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.118128+00:00",
    "v": 3
  },
  {
    "chunk_id": "287fef4a185184be60dd63dbe914bedc141332a9f56a3b032e1e0c3b5e190afb",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 777,
    "end_line": 782,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetPressure",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetPressure() *ForecastResponse_Pressure {\n\tif x != nil {\n\t\treturn x.Pressure\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPressure"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast",
      "ForecastResponse_Pressure"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "02bd2b549c2ddd8bae36f08f86beba6ba75864df62d1784eb9f3ed6426160953",
      "next": "630b6e25f0c0296b30898439801ac23a50112d5811a0db52525cdf52b714e603"
    },
    "summary_1l": "Go method GetPressure on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetPressure, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 39,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.118331+00:00",
    "v": 3
  },
  {
    "chunk_id": "630b6e25f0c0296b30898439801ac23a50112d5811a0db52525cdf52b714e603",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 784,
    "end_line": 789,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetHumidityPercentage",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetHumidityPercentage() int32 {\n\tif x != nil {\n\t\treturn x.HumidityPercentage\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetHumidityPercentage"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "287fef4a185184be60dd63dbe914bedc141332a9f56a3b032e1e0c3b5e190afb",
      "next": "fa9e5dfd059bc80055b73a40babfca3bf14662aeb811c70013c35c869a08a41f"
    },
    "summary_1l": "Go method GetHumidityPercentage on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetHumidityPercentage, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 38,
      "footer": 0,
      "total": 53
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.118579+00:00",
    "v": 3
  },
  {
    "chunk_id": "fa9e5dfd059bc80055b73a40babfca3bf14662aeb811c70013c35c869a08a41f",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 791,
    "end_line": 796,
    "ast_path": "go:method:(x *ForecastResponse_HourlyForecast).GetUvIndex",
    "text": "package main\n// receiver: x *ForecastResponse_HourlyForecast\nfunc (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_HourlyForecast",
    "core": "func (x *ForecastResponse_HourlyForecast) GetUvIndex() float32 {\n\tif x != nil {\n\t\treturn x.UvIndex\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetUvIndex"
    ],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "630b6e25f0c0296b30898439801ac23a50112d5811a0db52525cdf52b714e603",
      "next": "026fd1e9ce22afe86e3732cfdac2bf96a6c3cf056913e7928a7d5395b5f6aa80"
    },
    "summary_1l": "Go method GetUvIndex on x *ForecastResponse_HourlyForecast for the Foreca proxy",
    "qa_terms": "GetUvIndex, foreca, proxy, weather, x ForecastResponse_HourlyForecast",
    "token_counts": {
      "header": 14,
      "core": 38,
      "footer": 0,
      "total": 53
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.118791+00:00",
    "v": 3
  },
  {
    "chunk_id": "026fd1e9ce22afe86e3732cfdac2bf96a6c3cf056913e7928a7d5395b5f6aa80",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 798,
    "end_line": 805,
    "ast_path": "go:type:ForecastResponse_CurrentCondition_NextHour (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_CurrentCondition_NextHour struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWeatherCondition *ForecastResponse_WeatherCondition `protobuf:\"bytes,1,opt,name=weatherCondition,proto3\" json:\"weatherCondition,omitempty\"`\n\tPrecipitation    float32                            `protobuf:\"fixed32,2,opt,name=precipitation,proto3\" json:\"precipitation,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "symbols_referenced": [
      "protoimpl.SizeCache",
      "ForecastResponse_WeatherCondition",
      "protoimpl.UnknownFields",
      "protoimpl.MessageState"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "fa9e5dfd059bc80055b73a40babfca3bf14662aeb811c70013c35c869a08a41f",
      "next": "f2885d4e3710794262d821b54d3632a7b9140500e1feb10f8f67a2c3171d83fd"
    },
    "summary_1l": "Go struct ForecastResponse_CurrentCondition_NextHour for weather forecasting",
    "qa_terms": "ForecastResponse_CurrentCondition_NextHour, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 94,
      "footer": 0,
      "total": 109
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.119136+00:00",
    "v": 3
  },
  {
    "chunk_id": "f2885d4e3710794262d821b54d3632a7b9140500e1feb10f8f67a2c3171d83fd",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 807,
    "end_line": 814,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_NextHour).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_NextHour\nfunc (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (x *ForecastResponse_CurrentCondition_NextHour) Reset() {\n\t*x = ForecastResponse_CurrentCondition_NextHour{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "026fd1e9ce22afe86e3732cfdac2bf96a6c3cf056913e7928a7d5395b5f6aa80",
      "next": "0f3fe009576766eea171d1793a57316bf4989ae16b18b48874d2a69747296a51"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_CurrentCondition_NextHour",
    "token_counts": {
      "header": 27,
      "core": 72,
      "footer": 0,
      "total": 100
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.119464+00:00",
    "v": 3
  },
  {
    "chunk_id": "0f3fe009576766eea171d1793a57316bf4989ae16b18b48874d2a69747296a51",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 816,
    "end_line": 818,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_NextHour).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_NextHour\nfunc (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (x *ForecastResponse_CurrentCondition_NextHour) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "protoimpl.X",
      "MessageStringOf",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "f2885d4e3710794262d821b54d3632a7b9140500e1feb10f8f67a2c3171d83fd",
      "next": "1ec299c999d18363e4dce716b9fcdd5f6ca096459dc674ab9ff068d7fe93cb51"
    },
    "summary_1l": "Go method String on x *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_CurrentCondition_NextHour",
    "token_counts": {
      "header": 27,
      "core": 26,
      "footer": 0,
      "total": 54
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.119667+00:00",
    "v": 3
  },
  {
    "chunk_id": "1ec299c999d18363e4dce716b9fcdd5f6ca096459dc674ab9ff068d7fe93cb51",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 820,
    "end_line": 820,
    "ast_path": "go:method:(*ForecastResponse_CurrentCondition_NextHour).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_CurrentCondition_NextHour\nfunc (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (*ForecastResponse_CurrentCondition_NextHour) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "0f3fe009576766eea171d1793a57316bf4989ae16b18b48874d2a69747296a51",
      "next": "9da1f6fe1184e5dd54dfc199f656012ed442e7eea89d884a9ba77c6c4f66ccb1"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "ForecastResponse_CurrentCondition_NextHour, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 14,
      "footer": 0,
      "total": 29
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.119813+00:00",
    "v": 3
  },
  {
    "chunk_id": "9da1f6fe1184e5dd54dfc199f656012ed442e7eea89d884a9ba77c6c4f66ccb1",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 822,
    "end_line": 832,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_NextHour).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition_NextHour\nfunc (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (x *ForecastResponse_CurrentCondition_NextHour) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "1ec299c999d18363e4dce716b9fcdd5f6ca096459dc674ab9ff068d7fe93cb51",
      "next": "ec5535e6973ff983608e689f26a1fed9330411a6edede79775cc965bd57a65c3"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_CurrentCondition_NextHour",
    "token_counts": {
      "header": 45,
      "core": 92,
      "footer": 0,
      "total": 138
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.120206+00:00",
    "v": 3
  },
  {
    "chunk_id": "ec5535e6973ff983608e689f26a1fed9330411a6edede79775cc965bd57a65c3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 835,
    "end_line": 837,
    "ast_path": "go:method:(*ForecastResponse_CurrentCondition_NextHour).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_CurrentCondition_NextHour\nfunc (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (*ForecastResponse_CurrentCondition_NextHour) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 0}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9da1f6fe1184e5dd54dfc199f656012ed442e7eea89d884a9ba77c6c4f66ccb1",
      "next": "16d3ce31ab3ae15c79976d1a24370de3ad66b3949b90150864d749748d2344a4"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_CurrentCondition_NextHour, foreca, proxy, weather",
    "token_counts": {
      "header": 14,
      "core": 42,
      "footer": 0,
      "total": 57
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.120417+00:00",
    "v": 3
  },
  {
    "chunk_id": "16d3ce31ab3ae15c79976d1a24370de3ad66b3949b90150864d749748d2344a4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 839,
    "end_line": 844,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_NextHour).GetWeatherCondition",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition_NextHour\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (x *ForecastResponse_CurrentCondition_NextHour) GetWeatherCondition() *ForecastResponse_WeatherCondition {\n\tif x != nil {\n\t\treturn x.WeatherCondition\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWeatherCondition"
    ],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "ec5535e6973ff983608e689f26a1fed9330411a6edede79775cc965bd57a65c3",
      "next": "51a92fdd463481eab487bf056670fe671428d3c34e6d791ebdd7c2a11c0eb3a7"
    },
    "summary_1l": "Go method GetWeatherCondition on x *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "GetWeatherCondition, foreca, proxy, weather, x ForecastResponse_CurrentCondition_NextHour",
    "token_counts": {
      "header": 15,
      "core": 41,
      "footer": 0,
      "total": 57
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.120636+00:00",
    "v": 3
  },
  {
    "chunk_id": "51a92fdd463481eab487bf056670fe671428d3c34e6d791ebdd7c2a11c0eb3a7",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 846,
    "end_line": 851,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_NextHour).GetPrecipitation",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition_NextHour\nfunc (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition_NextHour",
    "core": "func (x *ForecastResponse_CurrentCondition_NextHour) GetPrecipitation() float32 {\n\tif x != nil {\n\t\treturn x.Precipitation\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetPrecipitation"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "16d3ce31ab3ae15c79976d1a24370de3ad66b3949b90150864d749748d2344a4",
      "next": "2893395342f8df97fa5fcb6da2280404e48f7500c7cbcc69c76d69d59eab7514"
    },
    "summary_1l": "Go method GetPrecipitation on x *ForecastResponse_CurrentCondition_NextHour for the Foreca proxy",
    "qa_terms": "GetPrecipitation, foreca, proxy, weather, x ForecastResponse_CurrentCondition_NextHour",
    "token_counts": {
      "header": 15,
      "core": 40,
      "footer": 0,
      "total": 56
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.120827+00:00",
    "v": 3
  },
  {
    "chunk_id": "2893395342f8df97fa5fcb6da2280404e48f7500c7cbcc69c76d69d59eab7514",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 853,
    "end_line": 860,
    "ast_path": "go:type:ForecastResponse_CurrentCondition_WindGust (struct)",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\ntype ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "type ForecastResponse_CurrentCondition_WindGust struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tWind *ForecastResponse_Wind `protobuf:\"bytes,1,opt,name=wind,proto3\" json:\"wind,omitempty\"`\n\tGust float32                `protobuf:\"fixed32,2,opt,name=gust,proto3\" json:\"gust,omitempty\"`\n}",
    "footer_context": "",
    "symbols_defined": [
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "symbols_referenced": [
      "protoimpl.SizeCache",
      "ForecastResponse_Wind",
      "protoimpl.UnknownFields",
      "protoimpl.MessageState"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "51a92fdd463481eab487bf056670fe671428d3c34e6d791ebdd7c2a11c0eb3a7",
      "next": "b360589ec542dec9fea9c8a5fee2526eb43ab4d3f5cc58a2d1f938b054e463e3"
    },
    "summary_1l": "Go struct ForecastResponse_CurrentCondition_WindGust for weather forecasting",
    "qa_terms": "ForecastResponse_CurrentCondition_WindGust, struct, protoimpl, foreca, weather, proxy",
    "token_counts": {
      "header": 15,
      "core": 85,
      "footer": 0,
      "total": 100
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.121159+00:00",
    "v": 3
  },
  {
    "chunk_id": "b360589ec542dec9fea9c8a5fee2526eb43ab4d3f5cc58a2d1f938b054e463e3",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 862,
    "end_line": 869,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).Reset",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_WindGust\nfunc (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (x *ForecastResponse_CurrentCondition_WindGust) Reset() {\n\t*x = ForecastResponse_CurrentCondition_WindGust{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_service_v0_proto_msgTypes[10]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Reset"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_CurrentCondition_WindGust",
      "protoimpl.UnsafeEnabled",
      "protoimpl.Pointer",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "2893395342f8df97fa5fcb6da2280404e48f7500c7cbcc69c76d69d59eab7514",
      "next": "2c311762eb0a8c8cec87ee18e19f758fa3950f73e5ce595e530a0d96efa7c211"
    },
    "summary_1l": "Go method Reset on x *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "Reset, foreca, proxy, weather, x ForecastResponse_CurrentCondition_WindGust",
    "token_counts": {
      "header": 28,
      "core": 74,
      "footer": 0,
      "total": 103
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.121475+00:00",
    "v": 3
  },
  {
    "chunk_id": "2c311762eb0a8c8cec87ee18e19f758fa3950f73e5ce595e530a0d96efa7c211",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 871,
    "end_line": 873,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).String",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_WindGust\nfunc (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\n// receiver: x *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (x *ForecastResponse_CurrentCondition_WindGust) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "String"
    ],
    "symbols_referenced": [
      "x",
      "ForecastResponse_CurrentCondition_WindGust",
      "protoimpl.X",
      "MessageStringOf"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "b360589ec542dec9fea9c8a5fee2526eb43ab4d3f5cc58a2d1f938b054e463e3",
      "next": "eab7ad0cfc42eda6ab11861607ffb46924009efc4995564b84b2312d66edd7ee"
    },
    "summary_1l": "Go method String on x *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "String, foreca, proxy, weather, x ForecastResponse_CurrentCondition_WindGust",
    "token_counts": {
      "header": 28,
      "core": 27,
      "footer": 0,
      "total": 56
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.121667+00:00",
    "v": 3
  },
  {
    "chunk_id": "eab7ad0cfc42eda6ab11861607ffb46924009efc4995564b84b2312d66edd7ee",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 875,
    "end_line": 875,
    "ast_path": "go:method:(*ForecastResponse_CurrentCondition_WindGust).ProtoMessage",
    "text": "package main\n// receiver: *ForecastResponse_CurrentCondition_WindGust\nfunc (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}",
    "header_context": "package main\n// receiver: *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (*ForecastResponse_CurrentCondition_WindGust) ProtoMessage() {}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoMessage"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2c311762eb0a8c8cec87ee18e19f758fa3950f73e5ce595e530a0d96efa7c211",
      "next": "2f16c94f09d4bd1d1e63a375083448639382261153964155b45aed973ea8af3d"
    },
    "summary_1l": "Go method ProtoMessage on *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "ForecastResponse_CurrentCondition_WindGust, ProtoMessage, foreca, proxy, weather",
    "token_counts": {
      "header": 15,
      "core": 15,
      "footer": 0,
      "total": 31
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.121799+00:00",
    "v": 3
  },
  {
    "chunk_id": "2f16c94f09d4bd1d1e63a375083448639382261153964155b45aed973ea8af3d",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 877,
    "end_line": 887,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).ProtoReflect",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition_WindGust\nfunc (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n)\n// receiver: x *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (x *ForecastResponse_CurrentCondition_WindGust) ProtoReflect() protoreflect.Message {\n\tmi := &file_service_v0_proto_msgTypes[10]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}",
    "footer_context": "",
    "symbols_defined": [
      "ProtoReflect"
    ],
    "symbols_referenced": [
      "MessageOf",
      "x",
      "protoimpl.UnsafeEnabled",
      "ForecastResponse_CurrentCondition_WindGust",
      "protoimpl.Pointer",
      "LoadMessageInfo",
      "protoreflect.Message",
      "MessageStateOf",
      "StoreMessageInfo",
      "protoimpl.X",
      "mi",
      "ms"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl",
      "google.golang.org/protobuf/reflect/protoreflect"
    ],
    "neighbors": {
      "prev": "eab7ad0cfc42eda6ab11861607ffb46924009efc4995564b84b2312d66edd7ee",
      "next": "7ecba9c828bd436c89335e7b97d6d35c78a75a6689d4df14353fba191827d1d4"
    },
    "summary_1l": "Go method ProtoReflect on x *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "ProtoReflect, foreca, proxy, weather, x ForecastResponse_CurrentCondition_WindGust",
    "token_counts": {
      "header": 46,
      "core": 93,
      "footer": 0,
      "total": 140
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.122188+00:00",
    "v": 3
  },
  {
    "chunk_id": "7ecba9c828bd436c89335e7b97d6d35c78a75a6689d4df14353fba191827d1d4",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 890,
    "end_line": 892,
    "ast_path": "go:method:(*ForecastResponse_CurrentCondition_WindGust).Descriptor",
    "text": "package main\n// receiver: *ForecastResponse_CurrentCondition_WindGust\nfunc (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}",
    "header_context": "package main\n// receiver: *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (*ForecastResponse_CurrentCondition_WindGust) Descriptor() ([]byte, []int) {\n\treturn file_service_v0_proto_rawDescGZIP(), []int{1, 4, 1}\n}",
    "footer_context": "",
    "symbols_defined": [
      "Descriptor"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2f16c94f09d4bd1d1e63a375083448639382261153964155b45aed973ea8af3d",
      "next": "94c479ca0692e069e9cfec1521855363c08cf206aa9c47112891a325db46a9ea"
    },
    "summary_1l": "Go method Descriptor on *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "Descriptor, ForecastResponse_CurrentCondition_WindGust, foreca, proxy, weather",
    "token_counts": {
      "header": 15,
      "core": 43,
      "footer": 0,
      "total": 59
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.122399+00:00",
    "v": 3
  },
  {
    "chunk_id": "94c479ca0692e069e9cfec1521855363c08cf206aa9c47112891a325db46a9ea",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 894,
    "end_line": 899,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).GetWind",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition_WindGust\nfunc (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (x *ForecastResponse_CurrentCondition_WindGust) GetWind() *ForecastResponse_Wind {\n\tif x != nil {\n\t\treturn x.Wind\n\t}\n\treturn nil\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetWind"
    ],
    "symbols_referenced": [
      "ForecastResponse_Wind",
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "7ecba9c828bd436c89335e7b97d6d35c78a75a6689d4df14353fba191827d1d4",
      "next": "b9712980ea5cbd531cbf34e6be1174fd78af666adfb99f9f627fe6e255de1051"
    },
    "summary_1l": "Go method GetWind on x *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "GetWind, foreca, proxy, weather, x ForecastResponse_CurrentCondition_WindGust",
    "token_counts": {
      "header": 16,
      "core": 39,
      "footer": 0,
      "total": 56
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.122602+00:00",
    "v": 3
  },
  {
    "chunk_id": "b9712980ea5cbd531cbf34e6be1174fd78af666adfb99f9f627fe6e255de1051",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 901,
    "end_line": 906,
    "ast_path": "go:method:(x *ForecastResponse_CurrentCondition_WindGust).GetGust",
    "text": "package main\n// receiver: x *ForecastResponse_CurrentCondition_WindGust\nfunc (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}",
    "header_context": "package main\n// receiver: x *ForecastResponse_CurrentCondition_WindGust",
    "core": "func (x *ForecastResponse_CurrentCondition_WindGust) GetGust() float32 {\n\tif x != nil {\n\t\treturn x.Gust\n\t}\n\treturn 0\n}",
    "footer_context": "",
    "symbols_defined": [
      "GetGust"
    ],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "94c479ca0692e069e9cfec1521855363c08cf206aa9c47112891a325db46a9ea",
      "next": "89ae27cd929ae9401fdfa9b39773fbd94cda57b7a237947f7fadcbcc089ce110"
    },
    "summary_1l": "Go method GetGust on x *ForecastResponse_CurrentCondition_WindGust for the Foreca proxy",
    "qa_terms": "GetGust, foreca, proxy, weather, x ForecastResponse_CurrentCondition_WindGust",
    "token_counts": {
      "header": 16,
      "core": 38,
      "footer": 0,
      "total": 55
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.122787+00:00",
    "v": 3
  },
  {
    "chunk_id": "89ae27cd929ae9401fdfa9b39773fbd94cda57b7a237947f7fadcbcc089ce110",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 1129,
    "end_line": 1134,
    "ast_path": "go:function:",
    "text": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"\nfunc file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}",
    "header_context": "package main\nimport \"google.golang.org/protobuf/runtime/protoimpl\"",
    "core": "func file_service_v0_proto_rawDescGZIP() []byte {\n\tfile_service_v0_proto_rawDescOnce.Do(func() {\n\t\tfile_service_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_v0_proto_rawDescData)\n\t})\n\treturn file_service_v0_proto_rawDescData\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Do",
      "protoimpl.X",
      "file_service_v0_proto_rawDescData",
      "CompressGZIP"
    ],
    "imports_used": [
      "google.golang.org/protobuf/runtime/protoimpl"
    ],
    "neighbors": {
      "prev": "b9712980ea5cbd531cbf34e6be1174fd78af666adfb99f9f627fe6e255de1051",
      "next": "4572ede86d80d9be45acb51c63b501bd7d37f0f1a7e1dcdbf8c14b6789406411"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 15,
      "core": 65,
      "footer": 0,
      "total": 80
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.124004+00:00",
    "v": 3
  },
  {
    "chunk_id": "4572ede86d80d9be45acb51c63b501bd7d37f0f1a7e1dcdbf8c14b6789406411",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 1176,
    "end_line": 1176,
    "ast_path": "go:function:",
    "text": "package main\nfunc init() { file_service_v0_proto_init() }",
    "header_context": "package main",
    "core": "func init() { file_service_v0_proto_init() }",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "89ae27cd929ae9401fdfa9b39773fbd94cda57b7a237947f7fadcbcc089ce110",
      "next": "d8f63eecbafc9663fdb89ab26e6fcfbb6d9e4af9266d39e3e59bf63475a2eaf1"
    },
    "summary_1l": "Go function  for the Foreca proxy",
    "qa_terms": "foreca, proxy, weather",
    "token_counts": {
      "header": 2,
      "core": 12,
      "footer": 0,
      "total": 15
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.124142+00:00",
    "v": 3
  },
  {
    "chunk_id": "d8f63eecbafc9663fdb89ab26e6fcfbb6d9e4af9266d39e3e59bf63475a2eaf1",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1177,
    "end_line": 1193,
    "ast_path": "go:function_declaration#part1_block1",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\nfunc file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "func file_service_v0_proto_init() {\n\tif File_service_v0_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_service_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ForecastRequest",
      "Exporter",
      "v",
      "UnsafeEnabled",
      "return"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "4572ede86d80d9be45acb51c63b501bd7d37f0f1a7e1dcdbf8c14b6789406411",
      "next": "2332f639bbb0526f7c64a83aecc75e052a5d85c5c19eedfead09a61c20fff710"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 113,
      "footer": 0,
      "total": 135
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.126839+00:00",
    "v": 3
  },
  {
    "chunk_id": "2332f639bbb0526f7c64a83aecc75e052a5d85c5c19eedfead09a61c20fff710",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1194,
    "end_line": 1205,
    "ast_path": "go:function_declaration#part2_block2",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Exporter",
      "v",
      "ForecastResponse"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d8f63eecbafc9663fdb89ab26e6fcfbb6d9e4af9266d39e3e59bf63475a2eaf1",
      "next": "9686837c5918a6713cf2a81e1d92fe47ba56a8bb728445872bb0591383b3d057"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 82,
      "footer": 0,
      "total": 104
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.127161+00:00",
    "v": 3
  },
  {
    "chunk_id": "9686837c5918a6713cf2a81e1d92fe47ba56a8bb728445872bb0591383b3d057",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1206,
    "end_line": 1217,
    "ast_path": "go:function_declaration#part3_block3",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WeatherCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ForecastResponse_WeatherCondition",
      "Exporter",
      "v"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "2332f639bbb0526f7c64a83aecc75e052a5d85c5c19eedfead09a61c20fff710",
      "next": "289f7b41a84ba2dd46f5bad43ad1db07dad4e57c3eee51944aa49258fbf97ba4"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 85,
      "footer": 0,
      "total": 107
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.127448+00:00",
    "v": 3
  },
  {
    "chunk_id": "289f7b41a84ba2dd46f5bad43ad1db07dad4e57c3eee51944aa49258fbf97ba4",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1218,
    "end_line": 1229,
    "ast_path": "go:function_declaration#part4_block4",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_WindDirection); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ForecastResponse_WindDirection",
      "Exporter",
      "v"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "9686837c5918a6713cf2a81e1d92fe47ba56a8bb728445872bb0591383b3d057",
      "next": "a952df2b2ff3765e0d0063c0102f75e73312f5158dc5524f4208ed346b0b46f7"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 85,
      "footer": 0,
      "total": 107
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.127725+00:00",
    "v": 3
  },
  {
    "chunk_id": "a952df2b2ff3765e0d0063c0102f75e73312f5158dc5524f4208ed346b0b46f7",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1230,
    "end_line": 1241,
    "ast_path": "go:function_declaration#part5_block5",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Wind); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "v",
      "Exporter",
      "ForecastResponse_Wind"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "289f7b41a84ba2dd46f5bad43ad1db07dad4e57c3eee51944aa49258fbf97ba4",
      "next": "3a087495fad28db2b7b86c74296a78acc8f391968f7531b1d63a81bc2a9b6f82"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 84,
      "footer": 0,
      "total": 106
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.127988+00:00",
    "v": 3
  },
  {
    "chunk_id": "3a087495fad28db2b7b86c74296a78acc8f391968f7531b1d63a81bc2a9b6f82",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1242,
    "end_line": 1253,
    "ast_path": "go:function_declaration#part6_block6",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_Pressure); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ForecastResponse_Pressure",
      "Exporter",
      "v"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a952df2b2ff3765e0d0063c0102f75e73312f5158dc5524f4208ed346b0b46f7",
      "next": "a0a34fcdc09efef465633112d08eebd23527a235267dc1d875c73c15bd0b21c6"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 85,
      "footer": 0,
      "total": 107
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.128253+00:00",
    "v": 3
  },
  {
    "chunk_id": "a0a34fcdc09efef465633112d08eebd23527a235267dc1d875c73c15bd0b21c6",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1254,
    "end_line": 1265,
    "ast_path": "go:function_declaration#part7_block7",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ForecastResponse_CurrentCondition",
      "Exporter",
      "v"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "3a087495fad28db2b7b86c74296a78acc8f391968f7531b1d63a81bc2a9b6f82",
      "next": "d70287424f0fa1eec29eab1d3579c24d1d6286f69507a48a59ab9f0e72e6e69d"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 84,
      "footer": 0,
      "total": 106
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.128523+00:00",
    "v": 3
  },
  {
    "chunk_id": "d70287424f0fa1eec29eab1d3579c24d1d6286f69507a48a59ab9f0e72e6e69d",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1266,
    "end_line": 1277,
    "ast_path": "go:function_declaration#part8_block8",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_DailyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Exporter",
      "v",
      "ForecastResponse_DailyForecast"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "a0a34fcdc09efef465633112d08eebd23527a235267dc1d875c73c15bd0b21c6",
      "next": "8e76ff0c58986d91a5593c18b646aa04732673f359b16ffda9158f476e9be03e"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 85,
      "footer": 0,
      "total": 107
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.128787+00:00",
    "v": 3
  },
  {
    "chunk_id": "8e76ff0c58986d91a5593c18b646aa04732673f359b16ffda9158f476e9be03e",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1278,
    "end_line": 1289,
    "ast_path": "go:function_declaration#part9_block9",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_HourlyForecast); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "ForecastResponse_HourlyForecast",
      "Exporter",
      "v"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "d70287424f0fa1eec29eab1d3579c24d1d6286f69507a48a59ab9f0e72e6e69d",
      "next": "710f386eb1f848fa256fcdcd74df5c52ea6d2853e1a2d3d63456f9ac8e2ae920"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 86,
      "footer": 0,
      "total": 108
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.129058+00:00",
    "v": 3
  },
  {
    "chunk_id": "710f386eb1f848fa256fcdcd74df5c52ea6d2853e1a2d3d63456f9ac8e2ae920",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1290,
    "end_line": 1301,
    "ast_path": "go:function_declaration#part10_block10",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_NextHour); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Exporter",
      "v",
      "ForecastResponse_CurrentCondition_NextHour"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "8e76ff0c58986d91a5593c18b646aa04732673f359b16ffda9158f476e9be03e",
      "next": "e11dade337a4cc6efaff93e09c6ae1b92a4641b4cb29e9d8828727fed6fe0ed7"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 87,
      "footer": 0,
      "total": 109
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.129323+00:00",
    "v": 3
  },
  {
    "chunk_id": "e11dade337a4cc6efaff93e09c6ae1b92a4641b4cb29e9d8828727fed6fe0ed7",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1302,
    "end_line": 1314,
    "ast_path": "go:function_declaration#part11_block11",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\t\tfile_service_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*ForecastResponse_CurrentCondition_WindGust); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "Exporter",
      "v",
      "ForecastResponse_CurrentCondition_WindGust"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "710f386eb1f848fa256fcdcd74df5c52ea6d2853e1a2d3d63456f9ac8e2ae920",
      "next": "ea7826a9635c3ce3eaca821ae0f4103defebbeb140d56705387d7467b36398df"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 90,
      "footer": 0,
      "total": 112
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.129598+00:00",
    "v": 3
  },
  {
    "chunk_id": "ea7826a9635c3ce3eaca821ae0f4103defebbeb140d56705387d7467b36398df",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1315,
    "end_line": 1329,
    "ast_path": "go:function_declaration#part12_block12",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\tfile_service_v0_proto_msgTypes[1].OneofWrappers = []interface{}{}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_service_v0_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   11,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_service_v0_proto_goTypes,\n\t\tDependencyIndexes: file_service_v0_proto_depIdxs,\n\t\tMessageInfos:      file_service_v0_proto_msgTypes,\n\t}.Build()",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "NumServices",
      "RawDescriptor",
      "x",
      "TypeOf",
      "GoPackagePath",
      "OneofWrappers",
      "NumExtensions",
      "NumEnums",
      "NumMessages",
      "DependencyIndexes",
      "PkgPath",
      "File",
      "DescBuilder",
      "GoTypes",
      "TypeBuilder",
      "MessageInfos",
      "Build"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "e11dade337a4cc6efaff93e09c6ae1b92a4641b4cb29e9d8828727fed6fe0ed7",
      "next": "1064c96bd0764a3309209b039805cccf0238ae429d01e0b16f39e33f333bf4ee"
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 149,
      "footer": 0,
      "total": 171
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.130033+00:00",
    "v": 3
  },
  {
    "chunk_id": "1064c96bd0764a3309209b039805cccf0238ae429d01e0b16f39e33f333bf4ee",
    "repo": "weather-forecast-service",
    "path": "Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/pkg/pb/v0/service.v0.pb.go",
    "language": "go",
    "start_line": 1316,
    "end_line": 1316,
    "ast_path": "go:type:x (struct)",
    "text": "package main\n\ttype x struct{}",
    "header_context": "package main",
    "core": "\ttype x struct{}",
    "footer_context": "",
    "symbols_defined": [
      "x"
    ],
    "symbols_referenced": [],
    "imports_used": [],
    "neighbors": {
      "prev": "ea7826a9635c3ce3eaca821ae0f4103defebbeb140d56705387d7467b36398df",
      "next": "fee59b5400dfd0581dff7a4915c235f05707d319fcc0ee41d265eafbe488894a"
    },
    "summary_1l": "Go struct x for weather forecasting",
    "qa_terms": "x, struct, foreca, weather, proxy",
    "token_counts": {
      "header": 2,
      "core": 4,
      "footer": 0,
      "total": 7
    },
    "file_sha": "c032b08d8cbf305a10213eb0a68119b5457eaaddc35d5eef23f73a4c96ad8079",
    "created_at": "2025-10-07T09:26:57.130356+00:00",
    "v": 3
  },
  {
    "chunk_id": "fee59b5400dfd0581dff7a4915c235f05707d319fcc0ee41d265eafbe488894a",
    "repo": "",
    "path": ".",
    "language": "go",
    "start_line": 1330,
    "end_line": 1334,
    "ast_path": "go:function_declaration#part13_block13",
    "text": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)\n\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}",
    "header_context": "package main\nimport (\n\t\"google.golang.org/protobuf/runtime/protoimpl\"\n\t\"reflect\"\n)",
    "core": "\tFile_service_v0_proto = out.File\n\tfile_service_v0_proto_rawDesc = nil\n\tfile_service_v0_proto_goTypes = nil\n\tfile_service_v0_proto_depIdxs = nil\n}",
    "footer_context": "",
    "symbols_defined": [],
    "symbols_referenced": [
      "File_service_v0_proto"
    ],
    "imports_used": [],
    "neighbors": {
      "prev": "1064c96bd0764a3309209b039805cccf0238ae429d01e0b16f39e33f333bf4ee",
      "next": null
    },
    "summary_1l": "Part of Go method for weather forecasting with specific functionality.",
    "qa_terms": "",
    "token_counts": {
      "header": 22,
      "core": 41,
      "footer": 0,
      "total": 63
    },
    "file_sha": "",
    "created_at": "2025-10-07T09:26:57.130193+00:00",
    "v": 3
  }
]