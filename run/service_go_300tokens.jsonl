{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#1", "repo_id": "foreca", "path": "models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "models.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 33, "text": "package foreca\n\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\n\ntype PressureTrend int\n\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\n\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\n\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\n\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\n\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}\n", "n_tokens": 169, "primary_symbol": "String", "primary_kind": "function", "primary_span": [17, 33], "def_symbols": ["String", "IsFalling", "IsSteady"], "symbols": ["String", "IsFalling", "IsSteady", "package", "foreca", "type", "Mapping", "struct", "int", "ProviderID", "Timezone", "string", "PressureTrend", "const", "PressureTrendFalling", "iota", "PressureTrendSteady", "PressureTrendRising", "func", "return", "Falling", "Steady", "Rising", "Pressure", "Millibar", "float64", "json", "mbar", "Trend", "bool"], "doc_head": "package foreca\ntype Mapping struct {\n\tID         int\n\tProviderID int\n\tTimezone   string\n}\ntype PressureTrend int\nconst (\n\tPressureTrendFalling = iota - 1\n\tPressureTrendSteady\n\tPressureTrendRising\n)\nfunc (t PressureTrend) String() string {\n\treturn [...]string{\"Falling\", \"Steady\", \"Rising\"}[t+1]\n}\ntype Pressure struct {\n\tMillibar float64       `json:\"mbar\"`\n\tTrend    PressureTrend `json:\"t\"`\n}\nfunc (p Pressure) IsFalling() bool {\n\treturn p.Trend == PressureTrendFalling\n}\nfunc (p Pressure) IsSteady() bool {\n\treturn p.Trend == PressureTrendSteady\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t PressureTrend).String", "package": "foreca", "node_kind": "method", "receiver": "t PressureTrend", "function_name": "", "method_name": "String", "type_name": "PressureTrend", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["IsFalling", "IsSteady", "Mapping", "Millibar", "Pressure", "PressureTrend", "PressureTrendFalling", "PressureTrendRising", "PressureTrendSteady", "ProviderID", "String", "Timezone", "Trend", "p.Trend"], "header_context_minimal": "package foreca\n// receiver: t PressureTrend", "summary_en": "The Go code defines a `PressureTrend` type with constants for different pressure trends and a method to convert it to a string. It also includes a `Pressure` struct with millibar and trend fields, and methods to check if the trend is falling or steady.", "keywords_en": ["pressuretrend", "falling", "steady", "rising", "millibar", "trend", "isfalling", "issteady", "string"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.410418", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "df66083ddcbda8b4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#2", "repo_id": "foreca", "path": "models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "models.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 34, "end_line": 72, "text": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\n\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)\n\ntype WeatherCode string\n\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\n\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\n\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}\n", "n_tokens": 287, "primary_symbol": "IsRising", "primary_kind": "function", "primary_span": [34, 72], "def_symbols": ["IsRising"], "symbols": ["IsRising", "func", "Pressure", "bool", "return", "Trend", "PressureTrendRising", "const", "WeatherCodeClear", "clear", "WeatherCodeMostlySunny", "mostlysunny", "WeatherCodePartlyCloudy", "partlycloudy", "WeatherCodeMostlyCloudy", "mostlycloudy", "WeatherCodeCloudy", "cloudy", "WeatherCodeHazy", "hazy", "WeatherCodeFog", "fog", "WeatherCodeChanceOfRain", "chancerain", "WeatherCodeRain", "rain", "WeatherCodeChanceOfThunderstorms", "chancetstorms", "WeatherCodeThunderstorms", "tstorms", "WeatherCodeChanceOfSleet", "chancesleet", "WeatherCodeSleet", "sleet", "WeatherCodeChanceOfSnow", "chancesnow", "WeatherCodeSnow", "snow", "type", "WeatherCode", "string", "WeatherCondition", "struct", "Code", "json", "Description", "WindDirection", "Abbreviation", "Degrees", "float64", "deg", "Wind", "Direction", "Speed"], "doc_head": "func (p Pressure) IsRising() bool {\n\treturn p.Trend == PressureTrendRising\n}\nconst (\n\tWeatherCodeClear                 = \"clear\"\n\tWeatherCodeMostlySunny           = \"mostlysunny\"\n\tWeatherCodePartlyCloudy          = \"partlycloudy\"\n\tWeatherCodeMostlyCloudy          = \"mostlycloudy\"\n\tWeatherCodeCloudy                = \"cloudy\"\n\tWeatherCodeHazy                  = \"hazy\"\n\tWeatherCodeFog                   = \"fog\"\n\tWeatherCodeChanceOfRain          = \"chancerain\"\n\tWeatherCodeRain                  = \"rain\"\n\tWeatherCodeChanceOfThunderstorms = \"chancetstorms\"\n\tWeatherCodeThunderstorms         = \"tstorms\"\n\tWeatherCodeChanceOfSleet         = \"chancesleet\"\n\tWeatherCodeSleet                 = \"sleet\"\n\tWeatherCodeChanceOfSnow          = \"chancesnow\"\n\tWeatherCodeSnow                  = \"snow\"\n)\ntype WeatherCode string\ntype WeatherCondition struct {\n\tCode        WeatherCode `json:\"c\"`\n\tDescription string      `json:\"d\"`\n}\ntype WindDirection struct {\n\tAbbreviation string  `json:\"ab\"`\n\tDegrees      float64 `json:\"deg\"`\n}\ntype Wind struct {\n\tDirection *WindDirection `json:\"d\"`\n\tSpeed     float64        `json:\"s\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(p Pressure).IsRising", "package": "foreca", "node_kind": "method", "receiver": "p Pressure", "function_name": "", "method_name": "IsRising", "type_name": "Pressure", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["Abbreviation", "Degrees", "Description", "Direction", "IsRising", "Pressure", "PressureTrendRising", "Speed", "Trend", "WeatherCode", "WeatherCodeChanceOfRain", "WeatherCodeChanceOfSleet", "WeatherCodeChanceOfSnow", "WeatherCodeChanceOfThunderstorms", "WeatherCodeClear", "WeatherCodeCloudy", "WeatherCodeFog", "WeatherCodeHazy", "WeatherCodeMostlyCloudy", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeRain", "WeatherCodeSleet", "WeatherCodeSnow", "WeatherCodeThunderstorms", "WeatherCondition", "Wind", "WindDirection", "p.Trend"], "header_context_minimal": "package foreca\n// receiver: p Pressure", "summary_en": "This Go code defines a `Pressure` struct with an `IsRising` method that checks if the pressure trend is rising. It also includes constants and types related to weather conditions and wind.", "keywords_en": ["pressure", "isrising", "trend", "weathercode", "winddirection", "wind", "degrees", "speed"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.411256", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "e0c87ecb506eca87", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#3", "repo_id": "foreca", "path": "models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "models.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 73, "end_line": 94, "text": "type WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}\n\ntype CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n", "n_tokens": 208, "primary_symbol": "WindGust", "primary_kind": "", "primary_span": [73, 94], "def_symbols": [], "symbols": ["type", "WindGust", "struct", "Wind", "json", "Gust", "float64", "CurrentCondition", "Epoch", "int64", "tms", "Visibility", "Precipitation", "PrecipitationNextHour", "prn", "WeatherCondition", "WeatherConditionNextHour", "wcn", "Temperature", "TemperatureFeelsLike", "HumidityPercentage", "int", "DewPoint", "HeatIndex", "Pressure", "UVIndex", "uvi"], "doc_head": "type WindGust struct {\n\tWind *Wind   `json:\"w\"`\n\tGust float64 `json:\"g\"`\n}\ntype CurrentCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tVisibility               float64           `json:\"v\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tPrecipitationNextHour    float64           `json:\"prn\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNextHour *WeatherCondition `json:\"wcn\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tWindGust                 *WindGust         `json:\"wg\"`\n\tDewPoint                 float64           `json:\"dw\"`\n\tHeatIndex                float64           `json:\"hi\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:WindGust (struct)", "package": "foreca", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "WindGust", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "Epoch", "Gust", "HeatIndex", "HumidityPercentage", "Precipitation", "PrecipitationNextHour", "Pressure", "Temperature", "TemperatureFeelsLike", "UVIndex", "Visibility", "WeatherCondition", "WeatherConditionNextHour", "Wind", "WindGust"], "header_context_minimal": "package foreca", "summary_en": "The Go code defines two structs: `WindGust` and `CurrentCondition`. The `WindGust` struct contains wind-related data, including wind speed and gust. The `CurrentCondition` struct includes various weather parameters such as temperature, humidity, precipitation, and more.", "keywords_en": ["currentcondition", "windgust", "temperature", "humidity", "precipitation", "pressure", "uvindex", "visibility", "weathercondition", "dewpoint", "heatindex"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.412353", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "c9aba1199f4d2b16", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#4", "repo_id": "foreca", "path": "models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "models.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 95, "end_line": 114, "text": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}\n", "n_tokens": 220, "primary_symbol": "DailyCondition", "primary_kind": "", "primary_span": [95, 114], "def_symbols": [], "symbols": ["type", "DailyCondition", "struct", "Epoch", "int64", "json", "tms", "MinTemperature", "float64", "MaxTemperature", "Precipitation", "PrecipitationDay", "pry", "PrecipitationNight", "prt", "Snow", "SnowDay", "SnowNight", "PrecipitationProbability", "int", "Wind", "AverageHumidityPercentage", "rhe", "WeatherCondition", "WeatherConditionNight", "wct", "UVIndex", "uvi", "SunriseEpoch", "rise", "SunsetEpoch", "set"], "doc_head": "type DailyCondition struct {\n\tEpoch                     int64             `json:\"tms\"`\n\tMinTemperature            float64           `json:\"tn\"`\n\tMaxTemperature            float64           `json:\"tx\"`\n\tPrecipitation             float64           `json:\"pr\"`\n\tPrecipitationDay          float64           `json:\"pry\"`\n\tPrecipitationNight        float64           `json:\"prt\"`\n\tSnow                      float64           `json:\"s\"`\n\tSnowDay                   float64           `json:\"sy\"`\n\tSnowNight                 float64           `json:\"st\"`\n\tPrecipitationProbability  int               `json:\"pp\"`\n\tWind                      *Wind             `json:\"w\"`\n\tAverageHumidityPercentage int               `json:\"rhe\"`\n\tWeatherCondition          *WeatherCondition `json:\"wc\"`\n\tWeatherConditionNight     *WeatherCondition `json:\"wct\"`\n\tUVIndex                   float64           `json:\"uvi\"`\n\tSunriseEpoch              int64             `json:\"rise\"`\n\tSunsetEpoch               int64             `json:\"set\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:DailyCondition (struct)", "package": "foreca", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "DailyCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["AverageHumidityPercentage", "DailyCondition", "Epoch", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Snow", "SnowDay", "SnowNight", "SunriseEpoch", "SunsetEpoch", "UVIndex", "WeatherCondition", "WeatherConditionNight", "Wind"], "header_context_minimal": "package foreca", "summary_en": "The `DailyCondition` struct represents the weather conditions for a single day, including temperature extremes, precipitation, snowfall, wind, humidity, and weather phenomena. It includes fields like `Epoch`, `MinTemperature`, `MaxTemperature`, and more.", "keywords_en": ["dailycondition", "epoch", "temperature", "precipitation", "snow", "wind", "humidity", "weather", "sunrise", "sunset"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.412972", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "39698ba036058d53", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#5", "repo_id": "foreca", "path": "models.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go", "rel_path": "models.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 115, "end_line": 140, "text": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\n\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\n\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}\n", "n_tokens": 200, "primary_symbol": "HourlyCondition", "primary_kind": "", "primary_span": [115, 140], "def_symbols": [], "symbols": ["type", "HourlyCondition", "struct", "Epoch", "int64", "json", "tms", "Temperature", "float64", "TemperatureFeelsLike", "WeatherCondition", "Precipitation", "Snow", "PrecipitationProbability", "int", "Wind", "Pressure", "HumidityPercentage", "UVIndex", "uvi", "Forecast", "CurrentCondition", "DailyConditions", "DailyCondition", "HourlyConditions", "CachedForecast", "Key", "string", "Value", "byte", "Expiration", "int32"], "doc_head": "type HourlyCondition struct {\n\tEpoch                    int64             `json:\"tms\"`\n\tTemperature              float64           `json:\"t\"`\n\tTemperatureFeelsLike     float64           `json:\"tf\"`\n\tWeatherCondition         *WeatherCondition `json:\"wc\"`\n\tPrecipitation            float64           `json:\"pr\"`\n\tSnow                     float64           `json:\"s\"`\n\tPrecipitationProbability int               `json:\"pp\"`\n\tWind                     *Wind             `json:\"w\"`\n\tPressure                 *Pressure         `json:\"p\"`\n\tHumidityPercentage       int               `json:\"rh\"`\n\tUVIndex                  float64           `json:\"uvi\"`\n}\ntype Forecast struct {\n\tCurrentCondition *CurrentCondition  `json:\"cc\"`\n\tDailyConditions  []*DailyCondition  `json:\"dc\"`\n\tHourlyConditions []*HourlyCondition `json:\"hc\"`\n}\ntype CachedForecast struct {\n\tKey        string\n\tValue      []byte\n\tExpiration int32\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:HourlyCondition (struct)", "package": "foreca", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "HourlyCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["CachedForecast", "CurrentCondition", "DailyCondition", "DailyConditions", "Epoch", "Expiration", "Forecast", "HourlyCondition", "HourlyConditions", "HumidityPercentage", "Key", "Precipitation", "PrecipitationProbability", "Pressure", "Snow", "Temperature", "TemperatureFeelsLike", "UVIndex", "Value", "WeatherCondition", "Wind"], "header_context_minimal": "package foreca", "summary_en": "This Go code defines data structures for handling weather forecasts. The `HourlyCondition` struct represents the conditions at specific times throughout a day, including temperature, precipitation, and wind details. The `Forecast` struct aggregates current, daily, and hourly forecast information. The `CachedForecast` struct is used to cache weather forecasts with an expiration time.", "keywords_en": ["hourlycondition", "forecast", "currentcondition", "dailycondition", "epoch", "temperature", "humiditypercentage", "precipitation", "pressure", "wind", "uvi", "cachedforecast"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.413522", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "cfa87a574581fa90", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/models.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#1", "repo_id": "foreca", "path": "service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "service.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "package foreca\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}\n\n\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\n\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}\n", "n_tokens": 266, "primary_symbol": "Service", "primary_kind": "", "primary_span": [1, 44], "def_symbols": [], "symbols": ["package", "foreca", "import", "context", "encoding", "json", "fmt", "github", "com", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "cache", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "golang", "sync", "singleflight", "strings", "time", "generate", "bin", "mockgen", "source", "service", "destination", "mocks", "service_mocks", "type", "providerClient", "interface", "GetForecastForLocation", "ctx", "Context", "int", "loc", "Location", "Forecast", "error", "mappingsRepository", "Get", "Mapping", "cacheClient", "key", "string", "Item", "Set", "value", "byte", "Service", "struct", "Group", "provider", "mappings", "cacheKeyPrefix", "cacheExpirationDuration", "Duration"], "doc_head": "package foreca\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"strings\"\n\t\"time\"\n)\n//go:generate /go/bin/mockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\ntype (\n\tproviderClient interface {\n\t\tGetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*Forecast, error)\n\t}\n\tmappingsRepository interface {\n\t\tGet(ctx context.Context, id int) (*Mapping, error)\n\t}\n\tcacheClient interface {\n\t\tGet(key string) (*cache.Item, error)\n\t\tSet(key string, value []byte) error\n\t}\n)\ntype Service struct {\n\tsf                      singleflight.Group\n\tprovider                providerClient\n\tmappings                mappingsRepository\n\tcache                   cacheClient\n\tcacheKeyPrefix          string\n\tcacheExpirationDuration time.Duration\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:Service (struct)", "package": "foreca", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["context", "go.impalastudios.com/weather/foreca_proxy/pkg/cache", "golang.org/x/sync/singleflight", "time"], "symbols_referenced_strict": ["Context", "Duration", "Forecast", "Get", "GetForecastForLocation", "Group", "Item", "Location", "Mapping", "Service", "Set", "cache.Item", "context.Context", "singleflight.Group", "time.Duration", "time.Location"], "header_context_minimal": "package foreca\nimport (\n    \"context\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n    \"golang.org/x/sync/singleflight\"\n    \"time\"\n)", "summary_en": "The `Service` struct in the `foreca` package manages weather forecasts using a provider client, mappings repository, and cache client. It uses `singleflight` to ensure idempotent retrieval of forecasts for locations.", "keywords_en": ["service", "weather forecast", "provider client", "mappings repository", "cache client", "singleflight", "idempotent", "context", "location", "forecast"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.424447", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "44c85d22982e7d70", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#2", "repo_id": "foreca", "path": "service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "service.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 54, "text": "func NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}\n", "n_tokens": 75, "primary_symbol": "NewService", "primary_kind": "function", "primary_span": [45, 54], "def_symbols": ["NewService"], "symbols": ["NewService", "func", "provider", "providerClient", "mappings", "mappingsRepository", "cache", "cacheClient", "cacheKeyPrefix", "string", "cacheExpirationDuration", "time", "Duration", "Service", "return"], "doc_head": "func NewService(provider providerClient, mappings mappingsRepository, cache cacheClient, cacheKeyPrefix string, cacheExpirationDuration time.Duration) *Service {\n\treturn &Service{\n\t\tprovider:                provider,\n\t\tmappings:                mappings,\n\t\tcache:                   cache,\n\t\tcacheKeyPrefix:          cacheKeyPrefix,\n\t\tcacheExpirationDuration: cacheExpirationDuration,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:NewService", "package": "foreca", "node_kind": "function", "receiver": "", "function_name": "NewService", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Duration", "NewService", "Service", "time.Duration"], "header_context_minimal": "package foreca\nimport \"time\"", "summary_en": "The function `NewService` initializes a new `Service` instance with the provided dependencies and returns a pointer to it.", "keywords_en": ["service", "newservice", "provider", "mappings", "cache", "cachekeyprefix", "cachexpduration", "time.duration", "service.go"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.425246", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "dba80c3fc1333ae2", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#3", "repo_id": "foreca", "path": "service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "service.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 55, "end_line": 87, "text": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}\n", "n_tokens": 247, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [55, 87], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "func", "Service", "ctx", "context", "Context", "int", "Forecast", "error", "span", "xotel", "Tracer", "Start", "service", "forecast", "location", "trace", "WithSpanKind", "SpanKindInternal", "defer", "End", "SetAttributes", "attribute", "Int", "location_id", "mapping", "err", "mappings", "Get", "nil", "SetStatus", "codes", "Error", "Mapping", "not", "found", "RecordError", "log", "Cannot", "get", "for", "zap", "errors", "ErrMappingNotFound", "return", "ErrLocationNotFound", "Wrap", "cannot", "loc", "time", "LoadLocation", "Timezone", "Unsupported", "timezone", "Any", "unsupported"], "doc_head": "func (s *Service) GetForecastForLocation(ctx context.Context, id int) (*Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"service:forecast-location\", trace.WithSpanKind(trace.SpanKindInternal))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\tmapping, err := s.mappings.Get(ctx, id)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Mapping not found.\")\n\t\tspan.RecordError(err)\n\t\tlog.Error(ctx, \"Cannot get mapping for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tif errors.Is(err, ErrMappingNotFound) {\n\t\t\treturn nil, ErrLocationNotFound\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"service: cannot get mapping\")\n\t}\n\tloc, err := time.LoadLocation(mapping.Timezone)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Unsupported timezone.\")\n\t\tspan.RecordError(err)\n\t\tlog.Error(ctx,\n\t\t\t\"Unsupported timezone.\",\n\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"service: unsupported timezone\")\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Service).GetForecastForLocation", "package": "foreca", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/pkg/errors", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.opentelemetry.io/otel/trace", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Any", "Context", "End", "ErrLocationNotFound", "ErrMappingNotFound", "Error", "Forecast", "Get", "GetForecastForLocation", "Int", "LoadLocation", "RecordError", "Service", "SetAttributes", "SetStatus", "SpanKindInternal", "Start", "Timezone", "Tracer", "WithSpanKind", "Wrap", "attribute.Int", "codes.Error", "context.Context", "errors.Is", "errors.Wrap", "log.Error", "mapping.Timezone", "s.mappings", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "time.LoadLocation", "trace.SpanKindInternal", "trace.WithSpanKind", "xotel.Tracer", "zap.Any", "zap.Error", "zap.Int"], "header_context_minimal": "package foreca\nimport (\n    \"context\"\n    \"github.com/pkg/errors\"\n    \"go.impalastudios.com/log\"\n    \"go.impalastudios.com/otel\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n// receiver: s *Service", "summary_en": "The Go function `GetForecastForLocation` in the `Service` struct retrieves weather forecast data for a specified location ID. It uses tracing and logging to record and report errors.", "keywords_en": ["service", "forecast", "location", "context", "mapping", "timezone", "error", "tracing", "logging"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.425996", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "6b96e4ca25f9468e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#4", "repo_id": "foreca", "path": "service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "service.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 88, "end_line": 160, "text": "\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\n\t\t\t\tvar item expirableCacheItem\n\t\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\n\t\t\treturn nil, err\n\t\t}\n\n\t\tb, err := json.Marshal(expirableCacheItem{\n\t\t\tExpiresAtUnix: time.Now().UTC().Add(s.cacheExpirationDuration).Unix(),\n\t\t\tForecast:      forecast,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot marshal cache item.\", zap.Error(err))\n\t\t}\n\n\t\tlog.Debug(ctx, \"Caching forecast for location.\", zap.Any(\"mapping\", mapping))\n\n\t\terr = s.cache.Set(s.getCacheKeyForLocation(mapping.ProviderID), b)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, \"Cannot cache response.\",\n\t\t\t\tzap.Any(\"mapping\", mapping),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t\treturn forecast, nil\n\t})\n\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"Error occurred while retrieving forecast for location.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\treturn result.(*Forecast), nil\n}\n", "n_tokens": 567, "primary_symbol": "GetForecastForLocation", "primary_kind": "", "primary_span": [88, 160], "def_symbols": [], "symbols": ["result", "err", "getSingleFlightKey", "mapping", "func", "interface", "error", "cache", "Get", "getCacheKeyForLocation", "ProviderID", "nil", "log", "Debug", "ctx", "Cache", "hit", "Checking", "for", "freshness", "zap", "Int", "var", "item", "expirableCacheItem", "json", "Unmarshal", "Value", "time", "Now", "UTC", "Unix", "ExpiresAtUnix", "span", "SetAttributes", "attribute", "Bool", "cache_hit", "true", "Returning", "cached", "forecast", "return", "Forecast", "cacheHit", "provider", "GetForecastForLocation", "loc", "Error", "occurred", "while", "retrieving", "location", "Any", "errors", "ErrRequestThrottled", "Request", "throttled", "without", "Info", "stale", "Marshal", "Add", "cacheExpirationDuration", "Cannot", "marshal", "Caching", "Set", "response", "SetStatus", "codes", "RecordError"], "doc_head": "\tresult, err, _ := s.sf.Do(s.getSingleFlightKey(mapping), func() (interface{}, error) {\n\t\ti, err := s.cache.Get(s.getCacheKeyForLocation(mapping.ProviderID))\n\t\tif err == nil {\n\t\t\tlog.Debug(ctx, \"Cache hit. Checking for freshness...\", zap.Int(\"id\", id))\n\t\t\tvar item expirableCacheItem\n\t\t\t_ = json.Unmarshal(i.Value, &item)\n\t\t\tif time.Now().UTC().Unix() < item.ExpiresAtUnix {\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\t\t\tlog.Debug(ctx, \"Returning cached forecast.\", zap.Int(\"id\", id))\n\t\t\t\treturn item.Forecast, nil\n\t\t\t}\n\t\t}\n\t\tcacheHit := err != nil\n\t\tforecast, err := s.provider.GetForecastForLocation(ctx, mapping.ProviderID, loc)\n\t\tif err != nil {\n\t\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", cacheHit))\n\t\t\tlog.Error(ctx, \"Error occurred while retrieving forecast for location.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\tif errors.Is(err, ErrRequestThrottled) {\n\t\t\t\tif !cacheHit {\n\t\t\t\t\tlog.Error(ctx, \"Request throttled without a cache hit.\", zap.Any(\"mapping\", mapping), zap.Error(err))\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tlog.Info(ctx, \"Request throttled. Returning cached forecast.\", zap.Any(\"mapping\", mapping))\n\t\t\t\tspan.SetAttributes(attribute.Bool(\"stale\", true))\n\t\t\t\tv", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Service).GetForecastForLocation/body", "package": "foreca", "node_kind": "method_body", "receiver": "s *Service", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["encoding/json", "github.com/pkg/errors", "go.impalastudios.com/log", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.uber.org/zap", "time"], "symbols_referenced_strict": ["Add", "Any", "Bool", "Debug", "ErrRequestThrottled", "Error", "ExpiresAtUnix", "Forecast", "Get", "GetForecastForLocation", "Info", "Int", "Marshal", "Now", "ProviderID", "RecordError", "Set", "SetAttributes", "SetStatus", "Unix", "Unmarshal", "Value", "attribute.Bool", "codes.Error", "errors.Is", "i.Value", "item.ExpiresAtUnix", "item.Forecast", "json.Marshal", "json.Unmarshal", "log.Debug", "log.Error", "log.Info", "mapping.ProviderID", "s.cache", "s.cacheExpirationDuration", "s.getCacheKeyForLocation", "s.getSingleFlightKey", "s.provider", "s.sf", "span.RecordError", "span.SetAttributes", "span.SetStatus", "time.Now", "zap.Any", "zap.Error", "zap.Int"], "header_context_minimal": "package foreca\nimport (\n    \"encoding/json\"\n    \"github.com/pkg/errors\"\n    \"go.impalastudios.com/log\"\n    \"go.opentelemetry.io/otel/attribute\"\n    \"go.opentelemetry.io/otel/codes\"\n)", "summary_en": "Retrieves weather forecast using caching and handles errors.", "keywords_en": ["weather", "forecast", "caching", "error handling", "cache expiration", "log debug", "provider request", "cache set"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.427226", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "378a2dbd9d9220bf", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#5", "repo_id": "foreca", "path": "service.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go", "rel_path": "service.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 161, "end_line": 173, "text": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\n\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\n\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}\n", "n_tokens": 98, "primary_symbol": "getCacheKeyForLocation", "primary_kind": "function", "primary_span": [161, 173], "def_symbols": ["getCacheKeyForLocation", "getSingleFlightKey"], "symbols": ["getCacheKeyForLocation", "getSingleFlightKey", "func", "Service", "int", "string", "return", "fmt", "Sprintf", "strings", "Trim", "cacheKeyPrefix", "mapping", "Mapping", "foreca", "locations", "ProviderID", "type", "expirableCacheItem", "struct", "ExpiresAtUnix", "int64", "json", "exp", "Forecast"], "doc_head": "func (s *Service) getCacheKeyForLocation(id int) string {\n\treturn fmt.Sprintf(\"%s:%d\", strings.Trim(s.cacheKeyPrefix, \":\"), id)\n}\nfunc (s *Service) getSingleFlightKey(mapping *Mapping) string {\n\treturn fmt.Sprintf(\"foreca:locations:%d\", mapping.ProviderID)\n}\ntype expirableCacheItem struct {\n\tExpiresAtUnix int64     `json:\"exp\"`\n\tForecast      *Forecast `json:\"f\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Service).getCacheKeyForLocation", "package": "foreca", "node_kind": "method", "receiver": "s *Service", "function_name": "", "method_name": "getCacheKeyForLocation", "type_name": "Service", "type_kind": "struct", "imports_used_minimal": ["fmt", "strings"], "symbols_referenced_strict": ["ExpiresAtUnix", "Forecast", "Mapping", "ProviderID", "Service", "Sprintf", "Trim", "fmt.Sprintf", "mapping.ProviderID", "s.cacheKeyPrefix", "strings.Trim"], "header_context_minimal": "package foreca\nimport (\n    \"fmt\"\n    \"strings\"\n)\n// receiver: s *Service", "summary_en": "The Go code defines a `Service` struct with methods to generate cache keys for locations and single-flight keys based on mapping. It uses the `fmt.Sprintf` function from the `fmt` package and `strings.Trim` from the `strings` package.", "keywords_en": ["service", "cache key", "single-flight", "mapping", "provider id", "expires at unix", "forecast", "json tag", "sprintf", "trim"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.427644", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "585338fd83653968", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#1", "repo_id": "foreca", "path": "service_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "service_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 46, "text": "package foreca_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n\nfunc (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n", "n_tokens": 280, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [24, 46], "def_symbols": ["SetupSuite", "TestGetForecastForLocationMappingError"], "symbols": ["SetupSuite", "TestGetForecastForLocationMappingError", "package", "foreca_test", "import", "context", "errors", "fmt", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "mocks", "pkg", "cache", "uber", "org", "mock", "gomock", "testing", "time", "type", "serviceTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController", "mappings", "NewMockmappingsRepository", "EXPECT", "Get", "Any", "Return", "nil", "New", "error", "NewService", "NewMockproviderClient", "NewMockcacheClient", "proxies", "test", "Second", "err", "GetForecastForLocation", "TODO", "Assert", "NotNil", "ErrorContains", "cannot", "get", "mapping"], "doc_head": "package foreca_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n\t\"time\"\n)\ntype (\n\tserviceTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t}\n)\nfunc (suite *serviceTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\nfunc (suite *serviceTestSuite) TestGetForecastForLocationMappingError() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(nil, errors.New(\"error\"))\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).SetupSuite", "package": "foreca_test", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "serviceTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Any", "Assert", "Controller", "ErrorContains", "Get", "GetForecastForLocation", "New", "NewController", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "NotNil", "Return", "Second", "SetupSuite", "Suite", "TestGetForecastForLocationMappingError", "context.TODO", "errors.New", "foreca.NewService", "gomock.Any", "gomock.Controller", "gomock.NewController", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "s.GetForecastForLocation", "suite.Assert", "suite.Suite", "suite.T", "suite.mockController", "time.Second"], "header_context_minimal": "package foreca_test\nimport (\n    \"context\"\n    \"errors\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n)\n// receiver: suite *serviceTestSuite", "summary_en": "This Go code defines a test suite for the `foreca` package, specifically testing the `GetForecastForLocation` method. The test verifies that an error is returned when there is a mapping error in the `mappingsRepository`. Key symbols include `serviceTestSuite`, `SetupSuite`, and `TestGetForecastForLocationMappingError`.", "keywords_en": ["servicetestsuite", "setupsuite", "testgetforecastforlocationmappingerror", "mappingsrepository", "getforecastforlocation", "newservice", "gomock.controller", "errorcontains", "nil"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.436576", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "3e201c878cd4d70c", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#2", "repo_id": "foreca", "path": "service_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "service_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 47, "end_line": 69, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}\n", "n_tokens": 165, "primary_symbol": "TestGetForecastForLocationInvalidLocation", "primary_kind": "function", "primary_span": [47, 69], "def_symbols": ["TestGetForecastForLocationInvalidLocation"], "symbols": ["TestGetForecastForLocationInvalidLocation", "func", "suite", "serviceTestSuite", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "invalid", "nil", "NewService", "NewMockproviderClient", "NewMockcacheClient", "weather", "proxies", "test", "time", "Second", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "unsupported", "timezone"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationInvalidLocation() {\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   \"invalid\",\n\t\t}, nil)\n\ts := foreca.NewService(\n\t\tmocks.NewMockproviderClient(suite.mockController),\n\t\tmappings,\n\t\tmocks.NewMockcacheClient(suite.mockController),\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"unsupported timezone\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationInvalidLocation", "package": "foreca_test", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationInvalidLocation", "type_name": "serviceTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Any", "Assert", "ErrorContains", "Get", "GetForecastForLocation", "Mapping", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "NotNil", "ProviderID", "Return", "Second", "TestGetForecastForLocationInvalidLocation", "Timezone", "context.TODO", "foreca.Mapping", "foreca.NewService", "gomock.Any", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.Second"], "header_context_minimal": "package foreca_test\nimport (\n    \"context\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n    \"go.uber.org/mock/gomock\"\n)\n// receiver: suite *serviceTestSuite", "summary_en": "This Go test function validates the behavior of `GetForecastForLocation` in the `serviceTestSuite`. It sets up a mock mappings repository returning a mapping with an invalid timezone and asserts that calling `GetForecastForLocation` results in an error containing 'unsupported timezone'.", "keywords_en": ["getforecastforlocation", "servicetestsuite", "mocksrepository", "invalidtimezone", "assert", "errorcontains", "contexttodo", "timeone"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.437356", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "bbba7a0bf06bb46e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#3", "repo_id": "foreca", "path": "service_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "service_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 70, "end_line": 100, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}\n", "n_tokens": 247, "primary_symbol": "TestGetForecastForLocationNonCacheForecastError", "primary_kind": "function", "primary_span": [70, 100], "def_symbols": ["TestGetForecastForLocationNonCacheForecastError"], "symbols": ["TestGetForecastForLocationNonCacheForecastError", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "errors", "New", "error", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "cache", "miss", "NewService", "Second", "err", "context", "TODO", "Assert", "NotNil", "ErrorContains"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationNonCacheForecastError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(nil, errors.New(\"provider error\"))\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\t_, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"provider error\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationNonCacheForecastError", "package": "foreca_test", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationNonCacheForecastError", "type_name": "serviceTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Any", "Assert", "ErrorContains", "Get", "GetForecastForLocation", "LoadLocation", "Mapping", "New", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "NotNil", "ProviderID", "Return", "Second", "String", "TestGetForecastForLocationNonCacheForecastError", "Timezone", "cacheClient.EXPECT", "context.TODO", "errors.New", "foreca.Mapping", "foreca.NewService", "gomock.Any", "loc.String", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "provider.EXPECT", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.LoadLocation", "time.Second"], "header_context_minimal": "package foreca_test\nimport (\n    \"context\"\n    \"errors\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n)\n// receiver: suite *serviceTestSuite", "summary_en": "The provided code snippet appears to be incomplete or missing, thus preventing a detailed summary. Please provide the full code for an accurate analysis.", "keywords_en": [], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.438022", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "3fc38466f0831d6e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#4", "repo_id": "foreca", "path": "service_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "service_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 101, "end_line": 140, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 347, "primary_symbol": "TestGetForecastForLocationSettingCacheError", "primary_kind": "function", "primary_span": [101, 140], "def_symbols": ["TestGetForecastForLocationSettingCacheError"], "symbols": ["TestGetForecastForLocationSettingCacheError", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "Forecast", "CurrentCondition", "DailyConditions", "make", "DailyCondition", "HourlyConditions", "HourlyCondition", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "errors", "New", "cache", "miss", "Set", "error", "NewService", "Second", "err", "context", "TODO", "Assert", "Nil", "NotNil"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationSettingCacheError() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t}, nil)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(nil, errors.New(\"cache miss\"))\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tReturn(errors.New(\"cache error\"))\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentConditi", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationSettingCacheError", "package": "foreca_test", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationSettingCacheError", "type_name": "serviceTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Any", "Assert", "CurrentCondition", "DailyCondition", "DailyConditions", "Forecast", "Get", "GetForecastForLocation", "HourlyCondition", "HourlyConditions", "LoadLocation", "Mapping", "New", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "Nil", "NotNil", "ProviderID", "Return", "Second", "Set", "String", "TestGetForecastForLocationSettingCacheError", "Timezone", "cacheClient.EXPECT", "context.TODO", "errors.New", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "foreca.Mapping", "foreca.NewService", "gomock.Any", "loc.String", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "provider.EXPECT", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.LoadLocation", "time.Second"], "header_context_minimal": "package foreca_test\nimport (\n    \"context\"\n    \"errors\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n)\n// receiver: suite *serviceTestSuite", "summary_en": "The `TestGetForecastForLocationSettingCacheError` method in the `service_test.go` file tests the `GetForecastForLocation` function of a `foreca.Service` instance. It sets up mocks for dependencies like `mappingsRepository`, `providerClient`, and `cacheClient`. The test expects cache misses and errors, ensuring that the service handles these scenarios gracefully.", "keywords_en": ["service_test.go", "testgetforecastforlocationsettingcacheerror", "foreca.service", "getforecastforlocation", "mocks", "cache miss", "cache error", "time.loadlocation", "gomock", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.439018", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "38e5f9960eaeccd6", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#5", "repo_id": "foreca", "path": "service_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "service_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 141, "end_line": 180, "text": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 368, "primary_symbol": "TestGetForecastForLocationFromCache", "primary_kind": "function", "primary_span": [141, 180], "def_symbols": ["TestGetForecastForLocationFromCache"], "symbols": ["TestGetForecastForLocationFromCache", "func", "suite", "serviceTestSuite", "loc", "time", "LoadLocation", "Europe", "Amsterdam", "mappings", "mocks", "NewMockmappingsRepository", "mockController", "EXPECT", "Get", "gomock", "Any", "Return", "foreca", "Mapping", "ProviderID", "Timezone", "String", "nil", "provider", "NewMockproviderClient", "GetForecastForLocation", "Times", "cacheClient", "NewMockcacheClient", "weather", "proxies", "test", "cache", "Item", "Key", "locations", "Value", "byte", "fmt", "Sprintf", "exp", "Now", "UTC", "Add", "Hour", "Unix", "Expiration", "int32", "Set", "NewService", "Second", "err", "context", "TODO", "Assert", "Nil", "NotNil", "CurrentCondition", "DailyConditions", "HourlyConditions"], "doc_head": "func (suite *serviceTestSuite) TestGetForecastForLocationFromCache() {\n\tloc, _ := time.LoadLocation(\"Europe/Amsterdam\")\n\tmappings := mocks.NewMockmappingsRepository(suite.mockController)\n\tmappings.EXPECT().Get(gomock.Any(), 1).\n\t\tReturn(&foreca.Mapping{\n\t\t\tID:         1,\n\t\t\tProviderID: 2,\n\t\t\tTimezone:   loc.String(),\n\t\t}, nil)\n\tprovider := mocks.NewMockproviderClient(suite.mockController)\n\tprovider.EXPECT().GetForecastForLocation(gomock.Any(), 2, loc).\n\t\tTimes(0)\n\tcacheClient := mocks.NewMockcacheClient(suite.mockController)\n\tcacheClient.EXPECT().Get(\"weather:proxies:foreca:test:2\").\n\t\tReturn(&cache.Item{\n\t\t\tKey:        \"foreca:locations:2\",\n\t\t\tValue:      []byte(fmt.Sprintf(`{\"exp\":%d,\"f\":{\"cc\":{},\"dc\":[{}],\"hc\":[{}]}}`, time.Now().UTC().Add(2*time.Hour).Unix())),\n\t\t\tExpiration: int32(time.Now().UTC().Add(2 * time.Hour).Unix()),\n\t\t}, nil)\n\tcacheClient.EXPECT().Set(\"weather:proxies:foreca:test:2\", gomock.Any()).\n\t\tTimes(0)\n\ts := foreca.NewService(\n\t\tprovider,\n\t\tmappings,\n\t\tcacheClient,\n\t\t\"weather:proxies:foreca:test:\",\n\t\t1*time.Second,\n\t)\n\tf, err := s.GetForecastForLocation(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentConditi", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *serviceTestSuite).TestGetForecastForLocationFromCache", "package": "foreca_test", "node_kind": "method", "receiver": "suite *serviceTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationFromCache", "type_name": "serviceTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "fmt", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks", "go.impalastudios.com/weather/foreca_proxy/pkg/cache", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Add", "Any", "Assert", "CurrentCondition", "DailyConditions", "Expiration", "Get", "GetForecastForLocation", "Hour", "HourlyConditions", "Item", "Key", "LoadLocation", "Mapping", "NewMockcacheClient", "NewMockmappingsRepository", "NewMockproviderClient", "NewService", "Nil", "NotNil", "Now", "ProviderID", "Return", "Second", "Set", "Sprintf", "String", "TestGetForecastForLocationFromCache", "Times", "Timezone", "Unix", "Value", "cache.Item", "cacheClient.EXPECT", "context.TODO", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "fmt.Sprintf", "foreca.Mapping", "foreca.NewService", "gomock.Any", "loc.String", "mappings.EXPECT", "mocks.NewMockcacheClient", "mocks.NewMockmappingsRepository", "mocks.NewMockproviderClient", "provider.EXPECT", "s.GetForecastForLocation", "suite.Assert", "suite.mockController", "time.Hour", "time.LoadLocation", "time.Now", "time.Second"], "header_context_minimal": "package foreca_test\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/mocks\"\n)\n// receiver: suite *serviceTestSuite", "summary_en": "This Go test function `TestGetForecastForLocationFromCache` in the `service_test.go` file tests the method `GetForecastForLocation` from the `foreca.Service`. It sets up mock objects for `mappingsRepository`, `providerClient`, and `cacheClient`, configures their expectations, creates a service instance, and verifies that calling `GetForecastForLocation` with specific arguments returns expected forecast data without errors.", "keywords_en": ["service_test.go", "testgetforecastforlocationfromcache", "foreca.service", "mocks.newmockmappingsrepository", "mocks.newmockproviderclient", "mocks.newmockcacheclient", "getforecastforlocation", "assertions", "time.loadlocation", "context.todo"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.439732", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "e33dc265b4307df6", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#6", "repo_id": "foreca", "path": "service_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go", "rel_path": "service_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 181, "end_line": 184, "text": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}\n", "n_tokens": 19, "primary_symbol": "TestService", "primary_kind": "function", "primary_span": [181, 184], "def_symbols": ["TestService"], "symbols": ["TestService", "func", "testing", "suite", "Run", "new", "serviceTestSuite"], "doc_head": "func TestService(t *testing.T) {\n\tsuite.Run(t, new(serviceTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:TestService", "package": "foreca_test", "node_kind": "function", "receiver": "", "function_name": "TestService", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["github.com/stretchr/testify/suite", "testing"], "symbols_referenced_strict": ["Run", "TestService", "suite.Run", "testing.T"], "header_context_minimal": "package foreca_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"testing\"\n)", "summary_en": "The code is a simple Go program that defines a function to calculate the Fibonacci sequence up to a given number and prints it.", "keywords_en": ["go", "fibonacci", "sequence", "function", "loop", "print"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.440252", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "9323c3a76d8a1390", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/service_test.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go#1", "repo_id": "foreca", "path": "errors.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/errors.go", "rel_path": "errors.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 10, "text": "package foreca\n\nimport \"errors\"\n\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)\n", "n_tokens": 50, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 10], "def_symbols": [], "symbols": ["package", "foreca", "import", "errors", "var", "ErrMappingNotFound", "New", "mapping", "not", "found", "ErrRequestThrottled", "request", "throttled", "ErrLocationNotFound", "location"], "doc_head": "package foreca\nimport \"errors\"\nvar (\n\tErrMappingNotFound  = errors.New(\"mapping not found\")\n\tErrRequestThrottled = errors.New(\"request throttled\")\n\tErrLocationNotFound = errors.New(\"location not found\")\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:file_header", "package": "foreca", "node_kind": "header", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["errors"], "symbols_referenced_strict": ["ErrLocationNotFound", "ErrMappingNotFound", "ErrRequestThrottled", "New", "errors.New"], "header_context_minimal": "package foreca\nimport \"errors\"", "summary_en": "This Go code defines error constants for the `foreca` package using the `errors.New` function. The errors include 'mapping not found', 'request throttled', and 'location not found'.", "keywords_en": ["foreca", "errors", "errormappingnotfound", "errrequestthrottled", "errlocationnotfound", "new", "errorconstant", "packagelevel"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.442052", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "966c92b494d2700a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#1", "repo_id": "foreca", "path": "mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}\n\n// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 284, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [34, 44], "def_symbols": ["NewMockproviderClient", "EXPECT"], "symbols": ["NewMockproviderClient", "EXPECT", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "service", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "service_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "time", "foreca", "impalastudios", "com", "weather", "foreca_proxy", "internal", "cache", "pkg", "gomock", "uber", "org", "mock", "MockproviderClient", "providerClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockproviderClientMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: service.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=service.go -destination=mocks/service_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tcache \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockproviderClient is a mock of providerClient interface.\ntype MockproviderClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockproviderClientMockRecorder\n}\n// MockproviderClientMockRecorder is the mock recorder for MockproviderClient.\ntype MockproviderClientMockRecorder struct {\n\tmock *MockproviderClient\n}\n// NewMockproviderClient creates a new mock instance.\nfunc NewMockproviderClient(ctrl *gomock.Controller) *MockproviderClient {\n\tmock := &MockproviderClient{ctrl: ctrl}\n\tmock.recorder = &MockproviderClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockproviderClient) EXPECT() *MockproviderClientMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockproviderClient).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockproviderClient", "function_name": "NewMockproviderClient", "method_name": "EXPECT", "type_name": "MockproviderClient", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockproviderClient", "MockproviderClientMockRecorder", "NewMockproviderClient", "gomock.Controller", "m.recorder", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"\n// receiver: m *MockproviderClient", "summary_en": "This code is a simple HTTP server written in Go that listens on port 8080 and responds with 'Hello, World!' to any GET requests.", "keywords_en": ["go", "http server", "port 8080", "get request", "response", "hello, world!", "net/http", "listenandserve", "handlefunc"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.448045", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "16a3b72ede44eab6", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#2", "repo_id": "foreca", "path": "mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 70, "text": "// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}\n", "n_tokens": 261, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [46, 70], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "mocks", "base", "method", "func", "MockproviderClient", "ctx", "context", "Context", "int", "loc", "time", "Location", "foreca", "Forecast", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockproviderClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "MockmappingsRepository", "mappingsRepository", "interface", "type", "struct", "Controller", "recorder", "MockmappingsRepositoryMockRecorder", "the", "for"], "doc_head": "// GetForecastForLocation mocks base method.\nfunc (m *MockproviderClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetForecastForLocation\", ctx, id, loc)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetForecastForLocation indicates an expected call of GetForecastForLocation.\nfunc (mr *MockproviderClientMockRecorder) GetForecastForLocation(ctx, id, loc any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetForecastForLocation\", reflect.TypeOf((*MockproviderClient)(nil).GetForecastForLocation), ctx, id, loc)\n}\n// MockmappingsRepository is a mock of mappingsRepository interface.\ntype MockmappingsRepository struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingsRepositoryMockRecorder\n}\n// MockmappingsRepositoryMockRecorder is the mock recorder for MockmappingsRepository.\ntype MockmappingsRepositoryMockRecorder struct {\n\tmock *MockmappingsRepository\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockproviderClient).GetForecastForLocation", "package": "mocks", "node_kind": "method", "receiver": "m *MockproviderClient", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "MockproviderClient", "type_kind": "struct", "imports_used_minimal": ["context", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.uber.org/mock/gomock", "reflect", "time"], "symbols_referenced_strict": ["Call", "Context", "Controller", "Forecast", "GetForecastForLocation", "Helper", "Location", "MockmappingsRepository", "MockmappingsRepositoryMockRecorder", "MockproviderClient", "MockproviderClientMockRecorder", "RecordCallWithMethodType", "T.Helper", "TypeOf", "context.Context", "ctrl.RecordCallWithMethodType", "ctrl.T", "foreca.Forecast", "gomock.Call", "gomock.Controller", "m.ctrl", "mr.mock", "reflect.TypeOf", "time.Location"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n    \"time\"\n)\n// receiver: m *MockproviderClient", "summary_en": "The Go code defines mocks for the `providerClient` and `mappingsRepository` interfaces, implementing methods to handle forecast data retrieval and mocking.", "keywords_en": ["go", "mocks", "providerclient", "getforecastforlocation", "time.location", "foreca.forecast", "gomock.controller", "mockproviderclientmockrecorder", "mockmappingsrepository"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.449215", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "bd9d4e7078da8367", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#3", "repo_id": "foreca", "path": "mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 71, "end_line": 103, "text": "// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}\n", "n_tokens": 289, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [72, 103], "def_symbols": ["NewMockmappingsRepository", "EXPECT", "Get"], "symbols": ["NewMockmappingsRepository", "EXPECT", "Get", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "MockmappingsRepository", "recorder", "MockmappingsRepositoryMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "ctx", "context", "Context", "int", "foreca", "Mapping", "error", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "MockcacheClient", "cacheClient", "interface", "type", "struct", "MockcacheClientMockRecorder"], "doc_head": "// NewMockmappingsRepository creates a new mock instance.\nfunc NewMockmappingsRepository(ctrl *gomock.Controller) *MockmappingsRepository {\n\tmock := &MockmappingsRepository{ctrl: ctrl}\n\tmock.recorder = &MockmappingsRepositoryMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingsRepository) EXPECT() *MockmappingsRepositoryMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockmappingsRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", ctx, id)\n\tret0, _ := ret[0].(*foreca.Mapping)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockmappingsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockmappingsRepository)(nil).Get), ctx, id)\n}\n// MockcacheClient is a mock of cacheClient interface.\ntype MockcacheClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheClientMockRecorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockmappingsRepository).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockmappingsRepository", "function_name": "NewMockmappingsRepository", "method_name": "EXPECT", "type_name": "MockmappingsRepository", "type_kind": "struct", "imports_used_minimal": ["context", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Context", "Controller", "Get", "Helper", "Mapping", "MockcacheClient", "MockcacheClientMockRecorder", "MockmappingsRepository", "MockmappingsRepositoryMockRecorder", "NewMockmappingsRepository", "RecordCallWithMethodType", "T.Helper", "TypeOf", "context.Context", "ctrl.RecordCallWithMethodType", "ctrl.T", "foreca.Mapping", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: m *MockmappingsRepository", "summary_en": "This Go code defines a mock implementation for the `MockmappingsRepository` and `MockcacheClient` types using the GoMock library. The `NewMockmappingsRepository` function creates a new mock instance, while `EXPECT` returns an object to indicate expected use. Methods like `Get` are mocked to simulate their behavior during testing.", "keywords_en": ["mock", "gomock", "controller", "recorder", "repository", "cacheclient", "get", "helper", "context", "reflection"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.449739", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "c672683170135acf", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#4", "repo_id": "foreca", "path": "mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 104, "end_line": 135, "text": "// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}\n", "n_tokens": 262, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [110, 135], "def_symbols": ["NewMockcacheClient", "EXPECT", "Get"], "symbols": ["NewMockcacheClient", "EXPECT", "Get", "MockcacheClientMockRecorder", "the", "mock", "recorder", "for", "MockcacheClient", "type", "struct", "creates", "new", "instance", "func", "ctrl", "gomock", "Controller", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use", "mocks", "base", "method", "key", "string", "cache", "Item", "error", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// MockcacheClientMockRecorder is the mock recorder for MockcacheClient.\ntype MockcacheClientMockRecorder struct {\n\tmock *MockcacheClient\n}\n// NewMockcacheClient creates a new mock instance.\nfunc NewMockcacheClient(ctrl *gomock.Controller) *MockcacheClient {\n\tmock := &MockcacheClient{ctrl: ctrl}\n\tmock.recorder = &MockcacheClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockcacheClient) EXPECT() *MockcacheClientMockRecorder {\n\treturn m.recorder\n}\n// Get mocks base method.\nfunc (m *MockcacheClient) Get(key string) (*cache.Item, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", key)\n\tret0, _ := ret[0].(*cache.Item)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheClientMockRecorder) Get(key any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*MockcacheClient)(nil).Get), key)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockcacheClient).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockcacheClient", "function_name": "NewMockcacheClient", "method_name": "EXPECT", "type_name": "MockcacheClient", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/pkg/cache", "go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Controller", "Get", "Helper", "Item", "MockcacheClient", "MockcacheClientMockRecorder", "NewMockcacheClient", "RecordCallWithMethodType", "T.Helper", "TypeOf", "cache.Item", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/cache\"\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: m *MockcacheClient", "summary_en": "The Go code defines a mock implementation of the `MockcacheClient` interface using the gomock library. It includes methods for creating a new mock instance (`NewMockcacheClient`) and recording expected calls to the `Get` method.", "keywords_en": ["mock", "gomock", "controller", "recorder", "newmockcacheclient", "expect", "get", "call", "item", "error"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.450242", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "9f9de42e66d0e17e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#5", "repo_id": "foreca", "path": "mocks/service_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go", "rel_path": "mocks/service_mocks.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 136, "end_line": 149, "text": "// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}\n", "n_tokens": 129, "primary_symbol": "Set", "primary_kind": "function", "primary_span": [137, 149], "def_symbols": ["Set"], "symbols": ["Set", "mocks", "base", "method", "func", "MockcacheClient", "key", "string", "value", "byte", "error", "ctrl", "Helper", "ret", "Call", "ret0", "return", "indicates", "expected", "call", "MockcacheClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// Set mocks base method.\nfunc (m *MockcacheClient) Set(key string, value []byte) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Set\", key, value)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n// Set indicates an expected call of Set.\nfunc (mr *MockcacheClientMockRecorder) Set(key, value any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Set\", reflect.TypeOf((*MockcacheClient)(nil).Set), key, value)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockcacheClient).Set", "package": "mocks", "node_kind": "method", "receiver": "m *MockcacheClient", "function_name": "", "method_name": "Set", "type_name": "MockcacheClient", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Helper", "MockcacheClient", "MockcacheClientMockRecorder", "RecordCallWithMethodType", "Set", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: m *MockcacheClient", "summary_en": "The Go code defines a mock for the `Set` method of a cache client. It includes two methods: one in `MockcacheClient` to execute the mock call and another in `MockcacheClientMockRecorder` to record expected calls.", "keywords_en": ["mock", "client", "set", "method", "execution", "recording", "helper", "call", "type", "reflection"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.452117", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "ae44376451ac57fd", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/mocks/service_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#1", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 28, "text": "package adapters_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\n\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t}\n)\n\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}\n", "n_tokens": 183, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [25, 28], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "package", "adapters_test", "import", "context", "errors", "github", "com", "aws", "sdk", "service", "dynamodb", "types", "smithy", "ptr", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "adapters", "mocks", "uber", "org", "mock", "gomock", "testing", "type", "dynamoMappingsRepositoryTestSuite", "struct", "Suite", "mockController", "Controller", "func", "NewController"], "doc_head": "package adapters_test\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n\t\"github.com/aws/smithy-go/ptr\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n\t\"go.uber.org/mock/gomock\"\n\t\"testing\"\n)\ntype (\n\tdynamoMappingsRepositoryTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t}\n)\nfunc (suite *dynamoMappingsRepositoryTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).SetupSuite", "package": "adapters_test", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "dynamoMappingsRepositoryTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "NewController", "SetupSuite", "Suite", "gomock.Controller", "gomock.NewController", "suite.Suite", "suite.T", "suite.mockController"], "header_context_minimal": "package adapters_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.uber.org/mock/gomock\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_en": "This Go code sets up a test suite for the `dynamoMappingsRepository` adapter. The `SetupSuite` method initializes a mock controller using `gomock.NewController`, which is stored in the `suite.mockController` field.", "keywords_en": ["go", "testing", "suite", "setupsuite", "mockcontroller", "foreca_proxy", "dynamo_mappings_repository", "gomock", "controller"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.460229", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "019ab92cca11e830", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#2", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 29, "end_line": 55, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}\n", "n_tokens": 247, "primary_symbol": "TestGetDynamoError", "primary_kind": "function", "primary_span": [29, 55], "def_symbols": ["TestGetDynamoError"], "symbols": ["TestGetDynamoError", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "nil", "errors", "New", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "NotNil", "ErrorContains", "cannot", "get", "mapping"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetDynamoError() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn nil, errors.New(\"error\")\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\t_, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"cannot get mapping\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetDynamoError", "package": "adapters_test", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "TestGetDynamoError", "type_name": "dynamoMappingsRepositoryTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "github.com/aws/aws-sdk-go-v2/service/dynamodb", "github.com/aws/aws-sdk-go-v2/service/dynamodb/types", "github.com/aws/smithy-go/ptr", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks", "go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Any", "Assert", "AttributeValue", "AttributeValueMemberN", "Bool", "ConsistentRead", "Context", "DoAndReturn", "EqualValues", "ErrorContains", "Get", "GetItem", "GetItemInput", "GetItemOutput", "Key", "Mapping", "New", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "NotNil", "Options", "Return", "String", "TableName", "TestGetDynamoError", "Value", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.Context", "context.TODO", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "errors.New", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "ptr.Bool", "ptr.String", "r.Get", "suite.Assert", "suite.mockController", "types.AttributeValue", "types.AttributeValueMemberN"], "header_context_minimal": "package adapters_test\nimport (\n    \"context\"\n    \"errors\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n    \"github.com/aws/smithy-go/ptr\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_en": "The `TestGetDynamoError` function tests the `Get` method of `MappingDynamoDBRepository`. It sets up mock expectations for `dynamodb.GetItemInput` and `cache.Get`, returns an error from `dynamodb.GetItemInput`, and verifies that the returned error contains 'cannot get mapping'.", "keywords_en": ["test", "get", "error", "mapping", "repository", "mock", "dynamodb", "cache"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.461019", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "c10f7b5a3ea2ee4b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#3", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 56, "end_line": 82, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\t_, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}\n", "n_tokens": 261, "primary_symbol": "TestGetNoMapping", "primary_kind": "function", "primary_span": [56, 82], "def_symbols": ["TestGetNoMapping"], "symbols": ["TestGetNoMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "Item", "make", "nil", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "NotNil", "ErrorIs", "ErrMappingNotFound"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn &dynamodb.GetItemOutput{Item: make(map[string]types.AttributeValue, 0)}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\t_, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrMappingNotFound)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetNoMapping", "package": "adapters_test", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "TestGetNoMapping", "type_name": "dynamoMappingsRepositoryTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/aws/aws-sdk-go-v2/service/dynamodb", "github.com/aws/aws-sdk-go-v2/service/dynamodb/types", "github.com/aws/smithy-go/ptr", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks", "go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Any", "Assert", "AttributeValue", "AttributeValueMemberN", "Bool", "ConsistentRead", "Context", "DoAndReturn", "EqualValues", "ErrMappingNotFound", "ErrorIs", "Get", "GetItem", "GetItemInput", "GetItemOutput", "Item", "Key", "Mapping", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "NotNil", "Options", "Return", "String", "TableName", "TestGetNoMapping", "Value", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.Context", "context.TODO", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "foreca.ErrMappingNotFound", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "ptr.Bool", "ptr.String", "r.Get", "suite.Assert", "suite.mockController", "types.AttributeValue", "types.AttributeValueMemberN"], "header_context_minimal": "package adapters_test\nimport (\n    \"context\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n    \"github.com/aws/smithy-go/ptr\"\n    \"github.com/stretchr/testify/suite\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_en": "This code tests the `TestGetNoMapping` method of the `dynamoMappingsRepositoryTestSuite`. It sets up mocks for a DynamoDB client and cache, expects specific calls to these mocks, and verifies that calling `r.Get` returns an error indicating no mapping was found.", "keywords_en": ["test", "mapping", "repository", "dynamodb", "cache", "getitem", "expect", "error", "mocks", "assert"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.462302", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "2a609df5f124322e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#4", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 83, "end_line": 121, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n", "n_tokens": 366, "primary_symbol": "TestGetNoCacheMapping", "primary_kind": "function", "primary_span": [83, 121], "def_symbols": ["TestGetNoCacheMapping"], "symbols": ["TestGetNoCacheMapping", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "DoAndReturn", "ctx", "context", "Context", "input", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "Assert", "EqualValues", "Key", "map", "string", "types", "AttributeValue", "AttributeValueMemberN", "Value", "TableName", "ptr", "String", "mappings_test", "ConsistentRead", "Bool", "false", "return", "Item", "provider_id", "AttributeValueMemberS", "Europe", "Amsterdam", "nil", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "Add", "adapters", "NewMappingDynamoDBRepository", "err", "TODO", "Nil", "NotNil", "Equal", "ProviderID", "Timezone"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetNoCacheMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).\n\t\tDoAndReturn(func(ctx context.Context, input *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\t\t\tsuite.Assert().EqualValues(input, &dynamodb.GetItemInput{\n\t\t\t\tKey:            map[string]types.AttributeValue{\"id\": &types.AttributeValueMemberN{Value: \"1\"}},\n\t\t\t\tTableName:      ptr.String(\"mappings_test\"),\n\t\t\t\tConsistentRead: ptr.Bool(false),\n\t\t\t})\n\t\t\treturn &dynamodb.GetItemOutput{\n\t\t\t\tItem: map[string]types.AttributeValue{\n\t\t\t\t\t\"id\":          &types.AttributeValueMemberN{Value: \"1\"},\n\t\t\t\t\t\"provider_id\": &types.AttributeValueMemberN{Value: \"2\"},\n\t\t\t\t\t\"tz\":          &types.AttributeValueMemberS{Value: \"Europe/Amsterdam\"},\n\t\t\t\t},\n\t\t\t}, nil\n\t\t})\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(nil, false)\n\tcache.EXPECT().Add(1, gomock.Any())\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\tm, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Ass", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetNoCacheMapping", "package": "adapters_test", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "", "method_name": "TestGetNoCacheMapping", "type_name": "dynamoMappingsRepositoryTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/aws/aws-sdk-go-v2/service/dynamodb", "github.com/aws/aws-sdk-go-v2/service/dynamodb/types", "github.com/aws/smithy-go/ptr", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks", "go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Add", "Any", "Assert", "AttributeValue", "AttributeValueMemberN", "AttributeValueMemberS", "Bool", "ConsistentRead", "Context", "DoAndReturn", "Equal", "EqualValues", "Get", "GetItem", "GetItemInput", "GetItemOutput", "Item", "Key", "Mapping", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "Nil", "NotNil", "Options", "ProviderID", "Return", "String", "TableName", "TestGetNoCacheMapping", "Timezone", "Value", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.Context", "context.TODO", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "ptr.Bool", "ptr.String", "r.Get", "suite.Assert", "suite.mockController", "types.AttributeValue", "types.AttributeValueMemberN", "types.AttributeValueMemberS"], "header_context_minimal": "package adapters_test\nimport (\n    \"context\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n    \"github.com/aws/smithy-go/ptr\"\n    \"github.com/stretchr/testify/suite\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_en": "This Go test function `TestGetNoCacheMapping` in the file `mapping_dynamodb_repository_test.go` tests the retrieval of a mapping from DynamoDB without using a cache. It sets up mock expectations for a DynamoDB client and a cache, verifies the input parameters, and checks the returned mapping.", "keywords_en": ["dynamo_mappings_repository_test_suite", "getnocachemapping", "mocks", "client.expect", "cache.expect", "adapters.newmappingdynamodbrepository", "r.get", "suite.assert"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.462970", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "31b8223a6ff9a1d4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#5", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go", "rel_path": "adapters/mapping_dynamodb_repository_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 122, "end_line": 152, "text": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\n\tm, err := r.Get(context.TODO(), 1)\n\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\n\nfunc TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}\n", "n_tokens": 224, "primary_symbol": "TestGetCachedMapping", "primary_kind": "function", "primary_span": [122, 152], "def_symbols": ["TestGetCachedMapping", "TestMappingsRepository"], "symbols": ["TestGetCachedMapping", "TestMappingsRepository", "func", "suite", "dynamoMappingsRepositoryTestSuite", "client", "mocks", "NewMockmappingDynamoDBClient", "mockController", "EXPECT", "GetItem", "gomock", "Any", "Times", "cache", "NewMockcache", "int", "foreca", "Mapping", "Get", "Return", "ProviderID", "Timezone", "Europe", "Amsterdam", "true", "adapters", "NewMappingDynamoDBRepository", "mappings_test", "err", "context", "TODO", "Assert", "Nil", "NotNil", "Equal", "testing", "Run", "new"], "doc_head": "func (suite *dynamoMappingsRepositoryTestSuite) TestGetCachedMapping() {\n\tclient := mocks.NewMockmappingDynamoDBClient(suite.mockController)\n\tclient.EXPECT().GetItem(gomock.Any(), gomock.Any()).Times(0)\n\tcache := mocks.NewMockcache[int, *foreca.Mapping](suite.mockController)\n\tcache.EXPECT().Get(1).Return(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, true)\n\tr := adapters.NewMappingDynamoDBRepository(\n\t\t\"mappings_test\",\n\t\tclient,\n\t\tcache,\n\t)\n\tm, err := r.Get(context.TODO(), 1)\n\tsuite.Assert().Nil(err)\n\tsuite.Assert().NotNil(m)\n\tsuite.Assert().Equal(&foreca.Mapping{\n\t\tID:         1,\n\t\tProviderID: 2,\n\t\tTimezone:   \"Europe/Amsterdam\",\n\t}, m)\n}\nfunc TestMappingsRepository(t *testing.T) {\n\tsuite.Run(t, new(dynamoMappingsRepositoryTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dynamoMappingsRepositoryTestSuite).TestGetCachedMapping", "package": "adapters_test", "node_kind": "method", "receiver": "suite *dynamoMappingsRepositoryTestSuite", "function_name": "TestMappingsRepository", "method_name": "TestGetCachedMapping", "type_name": "dynamoMappingsRepositoryTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks", "go.uber.org/mock/gomock", "testing"], "symbols_referenced_strict": ["Any", "Assert", "Equal", "Get", "GetItem", "Mapping", "NewMappingDynamoDBRepository", "NewMockcache", "NewMockmappingDynamoDBClient", "Nil", "NotNil", "ProviderID", "Return", "Run", "TestGetCachedMapping", "TestMappingsRepository", "Times", "Timezone", "adapters.NewMappingDynamoDBRepository", "cache.EXPECT", "client.EXPECT", "context.TODO", "foreca.Mapping", "gomock.Any", "mocks.NewMockcache", "mocks.NewMockmappingDynamoDBClient", "r.Get", "suite.Assert", "suite.Run", "suite.mockController", "testing.T"], "header_context_minimal": "package adapters_test\nimport (\n    \"context\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/mocks\"\n)\n// receiver: suite *dynamoMappingsRepositoryTestSuite", "summary_en": "This Go code defines unit tests for a DynamoDB repository adapter in the `adapters_test` package. The `TestGetCachedMapping` function tests the retrieval of cached mappings, while the `TestMappingsRepository` function runs the test suite.", "keywords_en": ["dynamo", "repository", "adapter", "unittest", "context", "mocks", "assert", "err"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.463449", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "e5589fc111b40b38", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository_test.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#1", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 34, "text": "package adapters\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\n\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}\n\n//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)\n", "n_tokens": 300, "primary_symbol": "mappingDynamoDB", "primary_kind": "", "primary_span": [1, 34], "def_symbols": [], "symbols": ["package", "adapters", "import", "context", "github", "com", "aws", "sdk", "feature", "dynamodb", "attributevalue", "service", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "internal", "foreca", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "type", "mappingDynamoDB", "struct", "int", "json", "dynamodbav", "ProviderID", "provider_id", "Timezone", "string", "generate", "bin", "mockgen", "source", "mapping_dynamodb_repository", "destination", "mocks", "mapping_dynamodb_repository_mocks", "mappingDynamoDBClient", "interface", "GetItem", "ctx", "Context", "params", "GetItemInput", "optFns", "func", "Options", "GetItemOutput", "error", "cache", "any", "Get", "bool", "Add"], "doc_head": "package adapters\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n)\ntype mappingDynamoDB struct {\n\tID         int    `json:\"id\" dynamodbav:\"id\"`\n\tProviderID int    `json:\"provider_id\" dynamodbav:\"provider_id\"`\n\tTimezone   string `json:\"tz\" dynamodbav:\"tz\"`\n}\n//go:generate /go/bin/mockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\ntype (\n\tmappingDynamoDBClient interface {\n\t\tGetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)\n\t}\n\tcache[K any, V any] interface {\n\t\tGet(K) (V, bool)\n\t\tAdd(K, V) bool\n\t}\n)", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:mappingDynamoDB (struct)", "package": "adapters", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "mappingDynamoDB", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/aws/aws-sdk-go-v2/service/dynamodb"], "symbols_referenced_strict": ["Add", "Context", "Get", "GetItem", "GetItemInput", "GetItemOutput", "Options", "ProviderID", "Timezone", "context.Context", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options"], "header_context_minimal": "package adapters\nimport (\n    \"context\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)", "summary_en": "The code defines a struct `mappingDynamoDB` for mapping DynamoDB records and interfaces for interacting with a DynamoDB client. It includes methods for getting items and caching.", "keywords_en": ["mappingdynamodb", "context.context", "dynamodb.getiteminput", "dynamodb.getitemoutput", "getitem", "cache", "add", "providerid", "timezone"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.469101", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "ec455a223c0a6202", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#2", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 35, "end_line": 58, "text": "type MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\n\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}\n\nfunc (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}\n", "n_tokens": 200, "primary_symbol": "Get", "primary_kind": "function", "primary_span": [41, 58], "def_symbols": ["NewMappingDynamoDBRepository", "Get"], "symbols": ["NewMappingDynamoDBRepository", "Get", "type", "MappingDynamoDBRepository", "struct", "tableName", "string", "client", "mappingDynamoDBClient", "cache", "int", "foreca", "Mapping", "func", "return", "ctx", "context", "Context", "error", "span", "xotel", "Tracer", "Start", "mapping", "repository", "get", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "found", "SetAttributes", "attribute", "Bool", "cache_hit", "true", "log", "Debug", "zap", "Any", "nil"], "doc_head": "type MappingDynamoDBRepository struct {\n\ttableName string\n\tclient    mappingDynamoDBClient\n\tcache     cache[int, *foreca.Mapping]\n}\nfunc NewMappingDynamoDBRepository(tableName string, client mappingDynamoDBClient, cache cache[int, *foreca.Mapping]) *MappingDynamoDBRepository {\n\treturn &MappingDynamoDBRepository{\n\t\ttableName: tableName,\n\t\tclient:    client,\n\t\tcache:     cache,\n\t}\n}\nfunc (r *MappingDynamoDBRepository) Get(ctx context.Context, id int) (*foreca.Mapping, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"mapping-repository:get\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tif mapping, found := r.cache.Get(id); found {\n\t\tspan.SetAttributes(attribute.Bool(\"cache_hit\", true))\n\t\tlog.Debug(ctx, \"found mapping in cache\", zap.Any(\"mapping\", mapping))\n\t\treturn mapping, nil\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(r *MappingDynamoDBRepository).Get", "package": "adapters", "node_kind": "method", "receiver": "r *MappingDynamoDBRepository", "function_name": "NewMappingDynamoDBRepository", "method_name": "Get", "type_name": "MappingDynamoDBRepository", "type_kind": "struct", "imports_used_minimal": ["context", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/trace", "go.uber.org/zap"], "symbols_referenced_strict": ["Any", "Bool", "Context", "Debug", "End", "Get", "Mapping", "MappingDynamoDBRepository", "NewMappingDynamoDBRepository", "SetAttributes", "SpanKindClient", "Start", "Tracer", "WithSpanKind", "attribute.Bool", "context.Context", "foreca.Mapping", "log.Debug", "r.cache", "span.End", "span.SetAttributes", "trace.SpanKindClient", "trace.WithSpanKind", "xotel.Tracer", "zap.Any"], "header_context_minimal": "package adapters\nimport (\n    \"context\"\n    \"go.impalastudios.com/log\"\n    \"go.impalastudios.com/otel\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n// receiver: r *MappingDynamoDBRepository", "summary_en": "The `MappingDynamoDBRepository` struct implements a repository for managing weather mapping data using DynamoDB. The `Get` method retrieves a mapping by ID, first checking the cache and then querying DynamoDB if not found.", "keywords_en": ["mappingdynamodbrepository", "get", "cache", "dynamodb", "client", "context", "id", "foreca.mapping", "xotel.tracer", "spankindclient"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.469957", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "15cbab6ef204ac9d", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#3", "repo_id": "foreca", "path": "adapters/mapping_dynamodb_repository.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go", "rel_path": "adapters/mapping_dynamodb_repository.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 59, "end_line": 106, "text": "\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\n\tspan.SetAttributes(attribute.Bool(\"cache_hit\", false))\n\n\tm := &foreca.Mapping{\n\t\tID:         i.ID,\n\t\tProviderID: i.ProviderID,\n\t\tTimezone:   i.Timezone,\n\t}\n\tr.cache.Add(id, m)\n\n\treturn m, nil\n}\n", "n_tokens": 370, "primary_symbol": "Get", "primary_kind": "", "primary_span": [59, 106], "def_symbols": [], "symbols": ["key", "err", "attributevalue", "MarshalMap", "map", "string", "interface", "nil", "log", "Error", "ctx", "Cannot", "marshal", "zap", "Int", "span", "SetStatus", "codes", "RecordError", "return", "errors", "Wrap", "mapping", "dynamodb", "repository", "cannot", "resp", "client", "GetItem", "GetItemInput", "TableName", "aws", "String", "tableName", "Key", "ConsistentRead", "Bool", "false", "DynamoDB", "error", "get", "len", "Item", "Warn", "Mapping", "not", "found", "foreca", "ErrMappingNotFound", "var", "mappingDynamoDB", "UnmarshalMap", "unmarshal", "Any", "item", "SetAttributes", "attribute", "cache_hit", "ProviderID", "Timezone", "cache", "Add"], "doc_head": "\tkey, err := attributevalue.MarshalMap(map[string]interface{}{\"id\": id})\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot marshal key.\", zap.Int(\"id\", id), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot marshal key.\")\n\t\tspan.RecordError(err)\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot marshal key\")\n\t}\n\tresp, err := r.client.GetItem(ctx, &dynamodb.GetItemInput{\n\t\tTableName:      aws.String(r.tableName),\n\t\tKey:            key,\n\t\tConsistentRead: aws.Bool(false),\n\t})\n\tif err != nil {\n\t\tlog.Error(ctx, \"DynamoDB client error.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot get mapping\")\n\t}\n\tif len(resp.Item) == 0 {\n\t\tlog.Warn(ctx, \"Mapping not found.\", zap.Int(\"id\", id))\n\t\treturn nil, foreca.ErrMappingNotFound\n\t}\n\tvar i mappingDynamoDB\n\tif err := attributevalue.UnmarshalMap(resp.Item, &i); err != nil {\n\t\tlog.Error(ctx, \"Cannot unmarshal mapping.\", zap.Int(\"id\", id), zap.Any(\"mapping\", resp.Item), zap.Error(err))\n\t\tspan.SetStatus(codes.Error, \"Cannot unmarshal item.\")\n\t\tspan.RecordError(err)\n\t\treturn nil, errors.Wrap(err, \"mapping dynamodb repository: cannot unmarshal mapping\")\n\t}\n\tspan.SetAttributes(attribut", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(r *MappingDynamoDBRepository).Get/body", "package": "adapters", "node_kind": "method_body", "receiver": "r *MappingDynamoDBRepository", "function_name": "", "method_name": "Get", "type_name": "MappingDynamoDBRepository", "type_kind": "struct", "imports_used_minimal": ["github.com/aws/aws-sdk-go-v2/aws", "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue", "github.com/aws/aws-sdk-go-v2/service/dynamodb", "github.com/pkg/errors", "go.impalastudios.com/log", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.uber.org/zap"], "symbols_referenced_strict": ["Add", "Any", "Bool", "ConsistentRead", "ErrMappingNotFound", "Error", "GetItem", "GetItemInput", "Int", "Item", "Key", "Mapping", "MarshalMap", "ProviderID", "RecordError", "SetAttributes", "SetStatus", "String", "TableName", "Timezone", "UnmarshalMap", "Warn", "Wrap", "attribute.Bool", "attributevalue.MarshalMap", "attributevalue.UnmarshalMap", "aws.Bool", "aws.String", "codes.Error", "dynamodb.GetItemInput", "errors.Wrap", "foreca.ErrMappingNotFound", "foreca.Mapping", "i.ID", "i.ProviderID", "i.Timezone", "log.Error", "log.Warn", "r.cache", "r.client", "r.tableName", "resp.Item", "span.RecordError", "span.SetAttributes", "span.SetStatus", "zap.Any", "zap.Error", "zap.Int"], "header_context_minimal": "package adapters\nimport (\n    \"github.com/aws/aws-sdk-go-v2/aws\"\n    \"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n    \"github.com/pkg/errors\"\n    \"go.impalastudios.com/log\"\n)", "summary_en": "Retrieves a mapping from DynamoDB by ID.", "keywords_en": ["dynamodb", "get item", "marshal", "unmarshal", "cache", "error handling", "logging"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.470889", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "3d813c66040dfdba", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mapping_dynamodb_repository.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#1", "repo_id": "foreca", "path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 37, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}\n\n// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 271, "primary_symbol": "MockmappingDynamoDBClient", "primary_kind": "function", "primary_span": [32, 37], "def_symbols": ["NewMockmappingDynamoDBClient"], "symbols": ["NewMockmappingDynamoDBClient", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "mapping_dynamodb_repository", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "mapping_dynamodb_repository_mocks", "package", "Package", "GoMock", "import", "context", "reflect", "dynamodb", "github", "com", "aws", "sdk", "service", "gomock", "uber", "org", "mock", "MockmappingDynamoDBClient", "mappingDynamoDBClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockmappingDynamoDBClientMockRecorder", "the", "for", "creates", "new", "instance", "func", "return"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: mapping_dynamodb_repository.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=mapping_dynamodb_repository.go -destination=mocks/mapping_dynamodb_repository_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\tdynamodb \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockmappingDynamoDBClient is a mock of mappingDynamoDBClient interface.\ntype MockmappingDynamoDBClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockmappingDynamoDBClientMockRecorder\n}\n// MockmappingDynamoDBClientMockRecorder is the mock recorder for MockmappingDynamoDBClient.\ntype MockmappingDynamoDBClientMockRecorder struct {\n\tmock *MockmappingDynamoDBClient\n}\n// NewMockmappingDynamoDBClient creates a new mock instance.\nfunc NewMockmappingDynamoDBClient(ctrl *gomock.Controller) *MockmappingDynamoDBClient {\n\tmock := &MockmappingDynamoDBClient{ctrl: ctrl}\n\tmock.recorder = &MockmappingDynamoDBClientMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:type:MockmappingDynamoDBClient (struct)", "package": "mocks", "node_kind": "type", "receiver": "", "function_name": "NewMockmappingDynamoDBClient", "method_name": "", "type_name": "MockmappingDynamoDBClient", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "NewMockmappingDynamoDBClient", "gomock.Controller", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"", "summary_en": "Mock implementation of mappingDynamoDBClient interface for testing.", "keywords_en": ["mock", "mappingdynamodbclient", "testing", "aws sdk", "gomock", "interface"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.476705", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "f0e3e3374a2022f1", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#2", "repo_id": "foreca", "path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 38, "end_line": 62, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}\n\n// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}\n", "n_tokens": 278, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [39, 62], "def_symbols": ["EXPECT", "GetItem"], "symbols": ["EXPECT", "GetItem", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "return", "recorder", "mocks", "base", "method", "ctx", "context", "Context", "params", "dynamodb", "GetItemInput", "optFns", "Options", "GetItemOutput", "error", "ctrl", "Helper", "varargs", "any", "for", "range", "append", "ret", "Call", "ret0", "ret1", "indicates", "call", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockmappingDynamoDBClient) EXPECT() *MockmappingDynamoDBClientMockRecorder {\n\treturn m.recorder\n}\n// GetItem mocks base method.\nfunc (m *MockmappingDynamoDBClient) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {\n\tm.ctrl.T.Helper()\n\tvarargs := []any{ctx, params}\n\tfor _, a := range optFns {\n\t\tvarargs = append(varargs, a)\n\t}\n\tret := m.ctrl.Call(m, \"GetItem\", varargs...)\n\tret0, _ := ret[0].(*dynamodb.GetItemOutput)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// GetItem indicates an expected call of GetItem.\nfunc (mr *MockmappingDynamoDBClientMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\tvarargs := append([]any{ctx, params}, optFns...)\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetItem\", reflect.TypeOf((*MockmappingDynamoDBClient)(nil).GetItem), varargs...)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockmappingDynamoDBClient).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockmappingDynamoDBClient", "function_name": "", "method_name": "EXPECT", "type_name": "MockmappingDynamoDBClient", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/aws/aws-sdk-go-v2/service/dynamodb", "go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Call", "Context", "GetItem", "GetItemInput", "GetItemOutput", "Helper", "MockmappingDynamoDBClient", "MockmappingDynamoDBClientMockRecorder", "Options", "RecordCallWithMethodType", "T.Helper", "TypeOf", "context.Context", "ctrl.RecordCallWithMethodType", "ctrl.T", "dynamodb.GetItemInput", "dynamodb.GetItemOutput", "dynamodb.Options", "gomock.Call", "m.ctrl", "m.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"context\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: m *MockmappingDynamoDBClient", "summary_en": "The code defines a mock implementation for `GetItem` method of `MockmappingDynamoDBClient`, allowing to set expectations and record calls.", "keywords_en": ["mock", "getitem", "dynamodbclient", "expect", "call recorder", "context", "params", "options", "output", "error"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.477541", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "21035dc00c3f7877", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#3", "repo_id": "foreca", "path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 63, "end_line": 93, "text": "// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}\n\n// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}\n", "n_tokens": 248, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [82, 93], "def_symbols": ["EXPECT", "Add"], "symbols": ["EXPECT", "Add", "Mockcache", "mock", "cache", "interface", "type", "any", "struct", "ctrl", "gomock", "Controller", "recorder", "MockcacheMockRecorder", "the", "for", "NewMockcache", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "arg1", "bool", "Helper", "ret", "Call", "ret0"], "doc_head": "// Mockcache is a mock of cache interface.\ntype Mockcache[K any, V any] struct {\n\tctrl     *gomock.Controller\n\trecorder *MockcacheMockRecorder[K, V]\n}\n// MockcacheMockRecorder is the mock recorder for Mockcache.\ntype MockcacheMockRecorder[K any, V any] struct {\n\tmock *Mockcache[K, V]\n}\n// NewMockcache creates a new mock instance.\nfunc NewMockcache[K any, V any](ctrl *gomock.Controller) *Mockcache[K, V] {\n\tmock := &Mockcache[K, V]{ctrl: ctrl}\n\tmock.recorder = &MockcacheMockRecorder[K, V]{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mockcache[K, V]) EXPECT() *MockcacheMockRecorder[K, V] {\n\treturn m.recorder\n}\n// Add mocks base method.\nfunc (m *Mockcache[K, V]) Add(arg0 K, arg1 V) bool {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Add\", arg0, arg1)\n\tret0, _ := ret[0].(bool)\n\treturn ret0\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *Mockcache[K, V]).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *Mockcache[K, V]", "function_name": "", "method_name": "EXPECT", "type_name": "Mockcache[K,", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Add", "Call", "Controller", "Helper", "Mockcache", "MockcacheMockRecorder", "NewMockcache", "T.Helper", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"\n// receiver: m *Mockcache[K, V]", "summary_en": "This Go code defines a mock implementation for a `cache` interface using the `gomock` library. The `Mockcache` struct represents the mock object, and the `MockcacheMockRecorder` struct records the expected method calls. The `NewMockcache` function creates a new mock instance, and the `EXPECT` method returns a recorder to specify expected interactions. The `Add` method is a mock implementation of the cache's `Add` functionality.", "keywords_en": ["mock", "gomock", "cache", "mockcache", "mockcachemockrecorder", "newmockcache", "expect", "add"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.478144", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "acca61dc584f3d8e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#4", "repo_id": "foreca", "path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go", "rel_path": "adapters/mocks/mapping_dynamodb_repository_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 94, "end_line": 114, "text": "// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}\n\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}\n", "n_tokens": 225, "primary_symbol": "Add", "primary_kind": "function", "primary_span": [95, 114], "def_symbols": ["Add", "Get"], "symbols": ["Add", "Get", "indicates", "expected", "call", "func", "MockcacheMockRecorder", "arg0", "arg1", "any", "gomock", "Call", "mock", "ctrl", "Helper", "return", "RecordCallWithMethodType", "reflect", "TypeOf", "Mockcache", "nil", "mocks", "base", "method", "bool", "ret", "ret0", "ret1"], "doc_head": "// Add indicates an expected call of Add.\nfunc (mr *MockcacheMockRecorder[K, V]) Add(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Add\", reflect.TypeOf((*Mockcache[K, V])(nil).Add), arg0, arg1)\n}\n// Get mocks base method.\nfunc (m *Mockcache[K, V]) Get(arg0 K) (V, bool) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Get\", arg0)\n\tret0, _ := ret[0].(V)\n\tret1, _ := ret[1].(bool)\n\treturn ret0, ret1\n}\n// Get indicates an expected call of Get.\nfunc (mr *MockcacheMockRecorder[K, V]) Get(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Get\", reflect.TypeOf((*Mockcache[K, V])(nil).Get), arg0)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(mr *MockcacheMockRecorder[K, V]).Add", "package": "mocks", "node_kind": "method", "receiver": "mr *MockcacheMockRecorder[K, V]", "function_name": "", "method_name": "Add", "type_name": "MockcacheMockRecorder[K,", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Add", "Call", "Get", "Helper", "Mockcache", "MockcacheMockRecorder", "RecordCallWithMethodType", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "m.ctrl", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: mr *MockcacheMockRecorder[K, V]", "summary_en": "This Go code defines methods for a mock recorder and the actual implementation of a `Mockcache` struct. It includes `Add` and `Get` methods that allow recording expected calls and mocking base methods.", "keywords_en": ["mockrecorder", "mockcache", "add", "get", "gomock", "reflect", "call", "helper", "t"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.478710", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "88ae240c42b9850f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/mocks/mapping_dynamodb_repository_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#1", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 39, "text": "package clients_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\n\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}\n\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}", "n_tokens": 281, "primary_symbol": "", "primary_kind": "", "primary_span": [1, 39], "def_symbols": [], "symbols": ["package", "clients_test", "import", "bytes", "context", "errors", "github", "com", "stretchr", "testify", "suite", "impalastudios", "weather", "foreca_proxy", "internal", "foreca", "adapters", "clients", "mocks", "pkg", "ratelimit", "uber", "org", "mock", "gomock", "net", "http", "testing", "time", "type", "currentConditionTransformer", "interface", "Transform", "CurrentCondition", "HourlyCondition", "Location", "dailyForecastTransformer", "DailyCondition", "hourlyForecastTransformer", "transformer", "Response", "Forecast", "currentConditionTransformerTestSuite", "struct", "Suite", "Time", "timestampFormat", "string", "location"], "doc_head": "package clients_test\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.uber.org/mock/gomock\"\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\ntype (\n\tcurrentConditionTransformer interface {\n\t\tTransform(*clients.CurrentCondition, *clients.HourlyCondition, *time.Location) *foreca.CurrentCondition\n\t}\n\tdailyForecastTransformer interface {\n\t\tTransform(*clients.DailyCondition, []*clients.HourlyCondition, *time.Location) *foreca.DailyCondition\n\t}\n\thourlyForecastTransformer interface {\n\t\tTransform(*clients.HourlyCondition, *time.Location) *foreca.HourlyCondition\n\t}\n\ttransformer interface {\n\t\tTransform(*clients.Response, *time.Location) *foreca.Forecast\n\t}\n\tcurrentConditionTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     currentConditionTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tlocation        *time.Location\n\t}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:block", "package": "clients_test", "node_kind": "block", "receiver": "", "function_name": "", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "time"], "symbols_referenced_strict": ["CurrentCondition", "DailyCondition", "Forecast", "HourlyCondition", "Location", "Response", "Suite", "Time", "Transform", "clients.CurrentCondition", "clients.DailyCondition", "clients.HourlyCondition", "clients.Response", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "suite.Suite", "time.Location", "time.Time"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"time\"\n)", "summary_en": "Tests the current condition transformer in Go.", "keywords_en": ["test", "transformer", "current condition", "weather", "foreca proxy", "unit test"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.510326", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "4ccf85717d5bc8ff", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#2", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 40, "end_line": 89, "text": "\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}\n\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\n\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampFormat = \"2006-01-02 15:04:05\"\n}\n", "n_tokens": 298, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [83, 89], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "dailyForecastTransformerTestSuite", "struct", "suite", "Suite", "transformer", "dailyForecastTransformer", "time", "Time", "daystampFormat", "string", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset", "location", "Location", "hourlyForecastTransformerTestSuite", "hourlyForecastTransformer", "transformerTestSuite", "forecaClientTestSuite", "mockController", "gomock", "Controller", "func", "currentConditionTransformerTestSuite", "LoadLocation", "Europe", "Amsterdam", "clients", "NewCurrentConditionTransformer", "Now"], "doc_head": "\tdailyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     dailyForecastTransformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\thourlyForecastTransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     hourlyForecastTransformer\n\t\ttime            time.Time\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\tlocation        *time.Location\n\t}\n\ttransformerTestSuite struct {\n\t\tsuite.Suite\n\t\ttransformer     transformer\n\t\ttime            time.Time\n\t\tdaystampFormat  string\n\t\ttimestampFormat string\n\t\tdaytimeFormat   string\n\t\ttimeFormat      string\n\t\tsunrise         time.Time\n\t\tsunset          time.Time\n\t\tlocation        *time.Location\n\t}\n\tforecaClientTestSuite struct {\n\t\tsuite.Suite\n\t\tmockController *gomock.Controller\n\t\tlocation       *time.Location\n\t}\n)\nfunc (suite *currentConditionTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewCurrentConditionTransformer()\n\tsuite.time = time.Now().In(suite.location)\n\tsuite.timestampF", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).SetupSuite", "package": "clients_test", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "currentConditionTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Controller", "LoadLocation", "Location", "NewCurrentConditionTransformer", "Now", "SetupSuite", "Suite", "Time", "clients.NewCurrentConditionTransformer", "gomock.Controller", "suite.Suite", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer", "time.LoadLocation", "time.Location", "time.Now", "time.Time"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"go.uber.org/mock/gomock\"\n    \"time\"\n)\n// receiver: suite *currentConditionTransformerTestSuite", "summary_en": "This Go code defines several test suites for weather data transformers and a client, setting up common variables such as time, location, and transformer instances. The `SetupSuite` method in the `currentConditionTransformerTestSuite` loads the Amsterdam time zone and initializes a current condition transformer.", "keywords_en": ["test suites", "weather data", "transformers", "time zone", "amsterdam", "currentconditiontransformer", "setupsuite", "mock controller", "location", "time"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.511219", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "76734b5456e26774", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#3", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 90, "end_line": 95, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\n\tsuite.Assert().Nil(cc)\n}\n", "n_tokens": 36, "primary_symbol": "TestTransformMissingCurrentCondition", "primary_kind": "function", "primary_span": [90, 95], "def_symbols": ["TestTransformMissingCurrentCondition"], "symbols": ["TestTransformMissingCurrentCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "nil", "Assert", "Nil"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingCurrentCondition() {\n\tcc := suite.transformer.Transform(nil, nil, nil)\n\tsuite.Assert().Nil(cc)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformMissingCurrentCondition", "package": "clients_test", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "TestTransformMissingCurrentCondition", "type_name": "currentConditionTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite"], "symbols_referenced_strict": ["Assert", "Nil", "TestTransformMissingCurrentCondition", "Transform", "suite.Assert", "suite.transformer"], "header_context_minimal": "package clients_test\nimport \"github.com/stretchr/testify/suite\"\n// receiver: suite *currentConditionTransformerTestSuite", "summary_en": "The `TestTransformMissingCurrentCondition` function in the `currentConditionTransformerTestSuite` tests that the `Transform` method of the `suite.transformer` returns `nil` when called with three `nil` arguments. The test uses the `Assert().Nil` method from the `testify/suite` package to validate this behavior.", "keywords_en": ["go", "test", "transform", "nil", "assertion", "currentconditiontransformer", "suite", "testify"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.511631", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "18b1ccb468bab34e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#4", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 96, "end_line": 147, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 420, "primary_symbol": "TestTransformMissingHourlyCondition", "primary_kind": "function", "primary_span": [96, 147], "def_symbols": ["TestTransformMissingHourlyCondition"], "symbols": ["TestTransformMissingHourlyCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "clients", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timestampFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "nil", "location", "expected", "foreca", "Epoch", "Unix", "Precipitation", "PrecipitationNextHour", "Code", "cloudy", "Description", "Overcast", "WeatherConditionNextHour", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UVIndex", "Assert", "Equal"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformMissingHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, nil, suite.location)\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         0,\n\t\tPrecipitationNextHour: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: nil,\n\t\tTemperature:              0,\n\t\tTemperatureFeelsLike:     -2.4,\n\t\tHumidityPercentage:       80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHea", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformMissingHourlyCondition", "package": "clients_test", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "TestTransformMissingHourlyCondition", "type_name": "currentConditionTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"], "symbols_referenced_strict": ["Abbreviation", "Assert", "CurrentCondition", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Format", "Gust", "HeatIndex", "HumidityPercentage", "Millibar", "Precipitation", "PrecipitationNextHour", "Pressure", "PressureTrendSteady", "Speed", "Temperature", "TemperatureFeelsLike", "TestTransformMissingHourlyCondition", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *currentConditionTransformerTestSuite", "summary_en": "This Go test function `TestTransformMissingHourlyCondition` in the `currentConditionTransformerTestSuite` struct tests the `Transform` method of a current condition transformer. It verifies that when an hourly weather condition is missing, the transformation results in expected values for various weather attributes.", "keywords_en": ["go", "test", "transform", "missing", "hourly", "weather", "condition", "expected", "values"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.512449", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "dbf2483de2f5e106", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#5", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 148, "end_line": 217, "text": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            35,\n\t\tPrecipitation:         1,\n\t\tPrecipitationNextHour: 1,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        \"cloudy\",\n\t\t\tDescription: \"Overcast\",\n\t\t},\n\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\tCode:        \"mostlycloudy\",\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -2.4,\n\t\tHumidityPercentage:   80,\n\t\tWindGust: &foreca.WindGust{\n\t\t\tWind: &foreca.Wind{\n\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\tDegrees:      180,\n\t\t\t\t},\n\t\t\t\tSpeed: 7,\n\t\t\t},\n\t\t\tGust: 0,\n\t\t},\n\t\tDewPoint:  -3,\n\t\tHeatIndex: -2,\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 989.3,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tUVIndex: 0,\n\t}\n\n\tsuite.Assert().Equal(expected, cc)\n}\n", "n_tokens": 578, "primary_symbol": "TestTransformWithHourlyCondition", "primary_kind": "function", "primary_span": [148, 217], "def_symbols": ["TestTransformWithHourlyCondition"], "symbols": ["TestTransformWithHourlyCondition", "func", "suite", "currentConditionTransformerTestSuite", "transformer", "Transform", "clients", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timestampFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "HourlyCondition", "d300", "cloudy", "Precipitation", "PrecipitationProbability", "UVIndex", "location", "expected", "foreca", "Epoch", "Unix", "PrecipitationNextHour", "Code", "Description", "Overcast", "WeatherConditionNextHour", "mostlycloudy", "Cloudy", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "Assert", "Equal"], "doc_head": "func (suite *currentConditionTransformerTestSuite) TestTransformWithHourlyCondition() {\n\tcc := suite.transformer.Transform(&clients.CurrentCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d400\",\n\t\t\tWeatherDescription: \"overcast\",\n\t\t},\n\t\tTimestamp:            suite.time.Format(suite.timestampFormat),\n\t\tTemperature:          0,\n\t\tTemperatureFeelsLike: -3,\n\t\tDewPoint:             -3,\n\t\tWindDirection:        \"S\",\n\t\tWindSpeed:            7,\n\t\tPressure:             \"989.3\",\n\t\tHumidityPercentage:   80,\n\t\tVisibility:           35000,\n\t}, &clients.HourlyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d300\",\n\t\t\tWeatherDescription: \"cloudy\",\n\t\t},\n\t\tTimestamp:                suite.time.Format(suite.timestampFormat),\n\t\tTemperature:              1,\n\t\tTemperatureFeelsLike:     -2,\n\t\tWindDirection:            \"SW\",\n\t\tWindSpeed:                8,\n\t\tPrecipitation:            1,\n\t\tPrecipitationProbability: 2,\n\t\tHumidityPercentage:       58,\n\t\tUVIndex:                  0,\n\t\tPressure:                 \"1018.54\",\n\t}, suite.location)\n\texpected := &foreca.CurrentCondition{\n\t\tEpoch:                 suite.time.Unix(),\n\t\tVisibility:            3", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *currentConditionTransformerTestSuite).TestTransformWithHourlyCondition", "package": "clients_test", "node_kind": "method", "receiver": "suite *currentConditionTransformerTestSuite", "function_name": "", "method_name": "TestTransformWithHourlyCondition", "type_name": "currentConditionTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"], "symbols_referenced_strict": ["Abbreviation", "Assert", "CurrentCondition", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Format", "Gust", "HeatIndex", "HourlyCondition", "HumidityPercentage", "Millibar", "Precipitation", "PrecipitationNextHour", "PrecipitationProbability", "Pressure", "PressureTrendSteady", "Speed", "Temperature", "TemperatureFeelsLike", "TestTransformWithHourlyCondition", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.HourlyCondition", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *currentConditionTransformerTestSuite", "summary_en": "This Go test function `TestTransformWithHourlyCondition` in the `currentConditionTransformerTestSuite` checks if transforming a current condition with hourly data results in the expected `foreca.CurrentCondition` output. It uses assertions to validate the transformation process.", "keywords_en": ["test", "transform", "hourlycondition", "currentcondition", "foreca_currentcondition", "pressuretrendsteady", "weathercondition", "assert", "location", "time", "timestampformat", "visibility", "precipitation", "uvindex"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.513275", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "dd6d03cde00f1819", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#6", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 218, "end_line": 248, "text": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 220, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [218, 248], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "dailyForecastTransformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewDailyForecastTransformer", "now", "Now", "Date", "Year", "Month", "Day", "daystampFormat", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewDailyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).SetupSuite", "package": "clients_test", "node_kind": "method", "receiver": "suite *dailyForecastTransformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "dailyForecastTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "time"], "symbols_referenced_strict": ["Date", "Day", "LoadLocation", "Month", "NewDailyForecastTransformer", "Now", "SetupSuite", "Year", "clients.NewDailyForecastTransformer", "now.Day", "now.Month", "now.Year", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timeFormat", "suite.timestampFormat", "suite.transformer", "time.Date", "time.LoadLocation", "time.Now"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite", "summary_en": "The `SetupSuite` method initializes test suite for daily forecast transformation by setting up a location, transformer, current time, and various date formats.", "keywords_en": ["setupsuite", "location", "transformer", "currenttime", "dateformats", "europe/amsterdam", "newdailyforecasttransformer", "now", "yearmonthday", "sunrise", "sunset"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.513827", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "e6925d60aa91231f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#7", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 249, "end_line": 301, "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 0,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 470, "primary_symbol": "TestTransformMissingHourlyConditions", "primary_kind": "function", "primary_span": [249, 301], "def_symbols": ["TestTransformMissingHourlyConditions"], "symbols": ["TestTransformMissingHourlyConditions", "func", "suite", "dailyForecastTransformerTestSuite", "transformer", "Transform", "clients", "DailyCondition", "WeatherCondition", "WeatherCode", "d100", "WeatherDescription", "mostly", "clear", "Date", "time", "Format", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "nil", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "AverageHumidityPercentage", "Code", "WeatherCodeMostlySunny", "Description", "Mostly", "Clear", "WeatherConditionNight", "SunriseEpoch", "SunsetEpoch", "Assert", "Equal"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) TestTransformMissingHourlyConditions() {\n\tdc := suite.transformer.Transform(&clients.DailyCondition{\n\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\tWeatherCode:        \"d100\",\n\t\t\tWeatherDescription: \"mostly clear\",\n\t\t},\n\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tUVIndex:                  0,\n\t\tWindDirection:            \"W\",\n\t\tWindSpeed:                25,\n\t\tPrecipitation:            0.35,\n\t\tPrecipitationProbability: 8,\n\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t}, nil, suite.location)\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           -1,\n\t\tMaxTemperature:           -5,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0.2,\n\t\tPrecipitationNight:       0.2,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDeg", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).TestTransformMissingHourlyConditions", "package": "clients_test", "node_kind": "method", "receiver": "suite *dailyForecastTransformerTestSuite", "function_name": "", "method_name": "TestTransformMissingHourlyConditions", "type_name": "dailyForecastTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"], "symbols_referenced_strict": ["Abbreviation", "Assert", "AverageHumidityPercentage", "DailyCondition", "Date", "Degrees", "Description", "Direction", "Epoch", "Equal", "Format", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Snow", "SnowDay", "SnowNight", "Speed", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "TestTransformMissingHourlyConditions", "Transform", "UVIndex", "Unix", "WeatherCode", "WeatherCodeMostlySunny", "WeatherCondition", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "clients.DailyCondition", "clients.WeatherCondition", "foreca.DailyCondition", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "suite.Assert", "suite.daystampFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timestampFormat", "suite.transformer"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite", "summary_en": "The Go code defines a test method `TestTransformMissingHourlyConditions` within the `dailyForecastTransformerTestSuite` suite. This method tests the transformation of daily weather conditions from an external client to a local adapter format using the `transformer.Transform` method. The test asserts that the transformed data matches the expected `foreca.DailyCondition` structure, including detailed fields such as temperature, precipitation, wind direction, and UV index.", "keywords_en": ["test", "dailyforecasttransformertestsuite", "transformmissinghourlyconditions", "transformer", "clients_dailycondition", "foreca_dailycondition", "assert", "equal", "utc", "unix"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.514607", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "3a7a2f52ca373898", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#8", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 302, "end_line": 391, "text": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(2 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.DailyCondition{\n\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\tMinTemperature:           1,\n\t\tMaxTemperature:           4,\n\t\tPrecipitation:            0.4,\n\t\tPrecipitationDay:         0,\n\t\tPrecipitationNight:       0,\n\t\tSnow:                     0,\n\t\tSnowDay:                  0,\n\t\tSnowNight:                0,\n\t\tPrecipitationProbability: 8,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"W\",\n\t\t\t\tDegrees:      270,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tAverageHumidityPercentage: 66,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\tDescription: \"Mostly Clear\",\n\t\t},\n\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tUVIndex:      0,\n\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t}\n\n\tsuite.Assert().Equal(expected, dc)\n}\n", "n_tokens": 761, "primary_symbol": "TestTransformWithHourlyConditions", "primary_kind": "function", "primary_span": [302, 391], "def_symbols": ["TestTransformWithHourlyConditions"], "symbols": ["TestTransformWithHourlyConditions", "func", "suite", "dailyForecastTransformerTestSuite", "transformer", "Transform", "clients", "DailyCondition", "WeatherCondition", "WeatherCode", "d100", "WeatherDescription", "mostly", "clear", "Date", "time", "Format", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "HourlyCondition", "Timestamp", "Add", "Hour", "daytimeFormat", "Temperature", "TemperatureFeelsLike", "HumidityPercentage", "Pressure", "d000", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "AverageHumidityPercentage", "Code", "WeatherCodeMostlySunny", "Description", "Mostly", "Clear", "WeatherConditionNight", "WeatherCodeClear", "SunriseEpoch", "SunsetEpoch", "Assert", "Equal"], "doc_head": "func (suite *dailyForecastTransformerTestSuite) TestTransformWithHourlyConditions() {\n\tdc := suite.transformer.Transform(\n\t\t&clients.DailyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t},\n\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\tMinTemperature:           -1,\n\t\t\tMaxTemperature:           -5,\n\t\t\tUVIndex:                  0,\n\t\t\tWindDirection:            \"W\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0.35,\n\t\t\tPrecipitationProbability: 8,\n\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t},\n\t\t[]*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPerce", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *dailyForecastTransformerTestSuite).TestTransformWithHourlyConditions", "package": "clients_test", "node_kind": "method", "receiver": "suite *dailyForecastTransformerTestSuite", "function_name": "", "method_name": "TestTransformWithHourlyConditions", "type_name": "dailyForecastTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "time"], "symbols_referenced_strict": ["Abbreviation", "Add", "Assert", "AverageHumidityPercentage", "DailyCondition", "Date", "Degrees", "Description", "Direction", "Epoch", "Equal", "Format", "Hour", "HourlyCondition", "HumidityPercentage", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Pressure", "Snow", "SnowDay", "SnowNight", "Speed", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "Temperature", "TemperatureFeelsLike", "TestTransformWithHourlyConditions", "Timestamp", "Transform", "UVIndex", "Unix", "WeatherCode", "WeatherCodeClear", "WeatherCodeMostlySunny", "WeatherCondition", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "clients.DailyCondition", "clients.HourlyCondition", "clients.WeatherCondition", "foreca.DailyCondition", "foreca.WeatherCodeClear", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "suite.Assert", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timestampFormat", "suite.transformer", "time.Hour"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"time\"\n)\n// receiver: suite *dailyForecastTransformerTestSuite", "summary_en": "The code defines a test function `TestTransformWithHourlyConditions` within the `dailyForecastTransformerTestSuite` suite. It tests the transformation of daily and hourly weather conditions using mock data.", "keywords_en": ["test", "transform", "hourly conditions", "weather condition", "suite", "time format", "location", "assertion"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.516008", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "6bded85fa3c31367", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#9", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 392, "end_line": 400, "text": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}\n", "n_tokens": 103, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [392, 400], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "hourlyForecastTransformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewHourlyForecastTransformer", "now", "Now", "Date", "Year", "Month", "Day", "Hour", "timestampFormat", "daytimeFormat"], "doc_head": "func (suite *hourlyForecastTransformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewHourlyForecastTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), 0, 0, 0, suite.location)\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *hourlyForecastTransformerTestSuite).SetupSuite", "package": "clients_test", "node_kind": "method", "receiver": "suite *hourlyForecastTransformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "hourlyForecastTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "time"], "symbols_referenced_strict": ["Date", "Day", "Hour", "LoadLocation", "Month", "NewHourlyForecastTransformer", "Now", "SetupSuite", "Year", "clients.NewHourlyForecastTransformer", "now.Day", "now.Hour", "now.Month", "now.Year", "suite.daytimeFormat", "suite.location", "suite.time", "suite.timestampFormat", "suite.transformer", "time.Date", "time.LoadLocation", "time.Now"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"time\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite", "summary_en": "This function initializes the test suite for hourly forecast transformer tests by setting up a location and transformer. It also records the current time in Amsterdam timezone, formats it, and sets default timestamp and daytime format strings.", "keywords_en": ["hourlyforecasttransformertestsuite", "setupsuite", "time.loadlocation", "newhourlyforecasttransformer", "now", "date", "year", "month", "day", "hour", "timestampformat", "daytimeformat"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.516555", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "2e779c0abe6c3b18", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#10", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 401, "end_line": 450, "text": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.78,\n\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t},\n\t\tHumidityPercentage: 82,\n\t\tUVIndex:            0,\n\t}\n\n\tsuite.Assert().Equal(expected, hc)\n}\n", "n_tokens": 396, "primary_symbol": "TestTransformHourlyForecast", "primary_kind": "function", "primary_span": [401, 450], "def_symbols": ["TestTransformHourlyForecast"], "symbols": ["TestTransformHourlyForecast", "func", "suite", "hourlyForecastTransformerTestSuite", "transformer", "Transform", "clients", "HourlyCondition", "WeatherCondition", "WeatherCode", "d300", "WeatherDescription", "cloudy", "Timestamp", "time", "Format", "daytimeFormat", "Temperature", "TemperatureFeelsLike", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "HumidityPercentage", "UVIndex", "Pressure", "location", "expected", "foreca", "Epoch", "UTC", "Unix", "Code", "WeatherCodeMostlyCloudy", "Description", "Cloudy", "Snow", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Millibar", "Trend", "PressureTrendSteady", "Assert", "Equal"], "doc_head": "func (suite *hourlyForecastTransformerTestSuite) TestTransformHourlyForecast() {\n\thc := suite.transformer.Transform(\n\t\t&clients.HourlyCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t},\n\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\tTemperature:              4,\n\t\t\tTemperatureFeelsLike:     -2,\n\t\t\tWindDirection:            \"SW\",\n\t\t\tWindSpeed:                25,\n\t\t\tPrecipitation:            0,\n\t\t\tPrecipitationProbability: 2,\n\t\t\tHumidityPercentage:       82,\n\t\t\tUVIndex:                  0,\n\t\t\tPressure:                 \"1024.78\",\n\t\t},\n\t\tsuite.location,\n\t)\n\texpected := &foreca.HourlyCondition{\n\t\tEpoch:                suite.time.UTC().Unix(),\n\t\tTemperature:          4,\n\t\tTemperatureFeelsLike: -2,\n\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\tDescription: \"Cloudy\",\n\t\t},\n\t\tPrecipitation:            0,\n\t\tSnow:                     0,\n\t\tPrecipitationProbability: 2,\n\t\tWind: &foreca.Wind{\n\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\tDegrees:      225,\n\t\t\t},\n\t\t\tSpeed: 25,\n\t\t},\n\t\tPressure: &foreca.Pressure{\n\t\t\tMillibar: 1024.", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *hourlyForecastTransformerTestSuite).TestTransformHourlyForecast", "package": "clients_test", "node_kind": "method", "receiver": "suite *hourlyForecastTransformerTestSuite", "function_name": "", "method_name": "TestTransformHourlyForecast", "type_name": "hourlyForecastTransformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"], "symbols_referenced_strict": ["Abbreviation", "Assert", "Degrees", "Description", "Direction", "Epoch", "Equal", "Format", "HourlyCondition", "HumidityPercentage", "Millibar", "Precipitation", "PrecipitationProbability", "Pressure", "PressureTrendSteady", "Snow", "Speed", "Temperature", "TemperatureFeelsLike", "TestTransformHourlyForecast", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "WeatherCode", "WeatherCodeMostlyCloudy", "WeatherCondition", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "clients.HourlyCondition", "clients.WeatherCondition", "foreca.HourlyCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCodeMostlyCloudy", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "suite.Assert", "suite.daytimeFormat", "suite.location", "suite.time", "suite.transformer"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *hourlyForecastTransformerTestSuite", "summary_en": "This code tests the transformation of hourly forecast data from a client to a foreca format. The `TestTransformHourlyForecast` method asserts that the transformation results in an expected `foreca.HourlyCondition` struct.", "keywords_en": ["test", "transform", "hourlyforecast", "client", "foreca", "assert", "struct", "timestamp", "temperature", "pressure"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.517329", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "78de759e8fec6fd7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#11", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 451, "end_line": 481, "text": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}\n", "n_tokens": 217, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [451, 481], "def_symbols": ["SetupSuite"], "symbols": ["SetupSuite", "func", "suite", "transformerTestSuite", "location", "time", "LoadLocation", "Europe", "Amsterdam", "transformer", "clients", "NewTransformer", "now", "Now", "Date", "Year", "Month", "Day", "daystampFormat", "timestampFormat", "daytimeFormat", "timeFormat", "sunrise", "sunset"], "doc_head": "func (suite *transformerTestSuite) SetupSuite() {\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n\tsuite.transformer = clients.NewTransformer()\n\tnow := time.Now()\n\tsuite.time = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, suite.location)\n\tsuite.daystampFormat = \"2006-01-02\"\n\tsuite.timestampFormat = \"15:04:05\"\n\tsuite.daytimeFormat = \"2006-01-02 15:04\"\n\tsuite.timeFormat = \"2006-01-02 15:04:05\"\n\tsuite.sunrise = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t8,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n\tsuite.sunset = time.Date(\n\t\tsuite.time.Year(),\n\t\tsuite.time.Month(),\n\t\tsuite.time.Day(),\n\t\t21,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tsuite.location,\n\t)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).SetupSuite", "package": "clients_test", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "transformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "time"], "symbols_referenced_strict": ["Date", "Day", "LoadLocation", "Month", "NewTransformer", "Now", "SetupSuite", "Year", "clients.NewTransformer", "now.Day", "now.Month", "now.Year", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timeFormat", "suite.timestampFormat", "suite.transformer", "time.Date", "time.LoadLocation", "time.Now"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"time\"\n)\n// receiver: suite *transformerTestSuite", "summary_en": "The `SetupSuite` method in the `transformerTestSuite` struct initializes test data and configurations for a suite of tests. It sets up a location, creates a transformer instance, and configures time-related variables such as daystamp, timestamp, daytime formats, and specific times for sunrise and sunset.", "keywords_en": ["setupsuite", "transformertestsuite", "time.loadlocation", "clients.newtransformer", "time.now", "time.date", "suite.location", "suite.transformer", "suite.daystampformat", "suite.timestampformat", "suite.daytimeformat", "suite.timeformat", "suite.sunrise", "suite.sunset"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.517898", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "c4ea0f785688b98f", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#12", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 482, "end_line": 495, "text": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}\n", "n_tokens": 90, "primary_symbol": "TestEmptyResponse", "primary_kind": "function", "primary_span": [482, 495], "def_symbols": ["TestEmptyResponse"], "symbols": ["TestEmptyResponse", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "nil", "DailyConditions", "HourlyConditions", "location", "Assert", "Equal", "foreca", "Forecast"], "doc_head": "func (suite *transformerTestSuite) TestEmptyResponse() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\tsuite.Assert().Equal(&foreca.Forecast{\n\t\tCurrentCondition: nil,\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, f)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).TestEmptyResponse", "package": "clients_test", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "TestEmptyResponse", "type_name": "transformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"], "symbols_referenced_strict": ["Assert", "CurrentCondition", "DailyConditions", "Equal", "Forecast", "HourlyConditions", "Response", "TestEmptyResponse", "Transform", "clients.Response", "foreca.Forecast", "suite.Assert", "suite.location", "suite.transformer"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *transformerTestSuite", "summary_en": "The `TestEmptyResponse` method tests the `Transform` function with an empty response from the client and verifies that the transformed forecast also contains empty conditions.", "keywords_en": ["testemptyresponse", "transformer", "transform", "response", "clients.response", "foreca.forecast", "currentcondition", "dailyconditions", "hourlyconditions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.518336", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "ab05168c53669f9d", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#13", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 496, "end_line": 555, "text": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 473, "primary_symbol": "TestOnlyCurrentCondition", "primary_kind": "function", "primary_span": [496, 555], "def_symbols": ["TestOnlyCurrentCondition"], "symbols": ["TestOnlyCurrentCondition", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timeFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "DailyConditions", "nil", "HourlyConditions", "location", "expected", "foreca", "Forecast", "Epoch", "Unix", "Precipitation", "PrecipitationNextHour", "Code", "cloudy", "Description", "Overcast", "WeatherConditionNextHour", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UVIndex", "Assert", "Equal"], "doc_head": "func (suite *transformerTestSuite) TestOnlyCurrentCondition() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions:  nil,\n\t\tHourlyConditions: nil,\n\t}, suite.location)\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: nil,\n\t\t\tTemperature:              0,\n\t\t\tTemperatureFeelsLike:     -2.4,\n\t\t\tHumidityPercentage:       80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDir", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).TestOnlyCurrentCondition", "package": "clients_test", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "TestOnlyCurrentCondition", "type_name": "transformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients"], "symbols_referenced_strict": ["Abbreviation", "Assert", "CurrentCondition", "DailyConditions", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Forecast", "Format", "Gust", "HeatIndex", "HourlyConditions", "HumidityPercentage", "Millibar", "Precipitation", "PrecipitationNextHour", "Pressure", "PressureTrendSteady", "Response", "Speed", "Temperature", "TemperatureFeelsLike", "TestOnlyCurrentCondition", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.Response", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.Forecast", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.location", "suite.time", "suite.timeFormat", "suite.transformer"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *transformerTestSuite", "summary_en": "This Go test function `TestOnlyCurrentCondition` in the `transformer_test.go` file verifies that the `Transform` method of a `transformerTestSuite` correctly transforms a `clients.Response` containing only current weather data into a `foreca.Forecast`. The test uses assertions to compare the transformed result with an expected `foreca.Forecast`.", "keywords_en": ["test", "transformer", "current condition", "weather data", "forecast transformation", "assertions", "clients.response", "foreca.forecast", "pressure trend steady", "temperature feels like"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.519395", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "b67c847e147f81ff", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#14", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 556, "end_line": 798, "text": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(suite.timestampFormat),\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d300\",\n\t\t\t\t\tWeatherDescription: \"cloudy\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Add(24 * time.Hour).Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"SW\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tSunriseTime:              suite.sunrise.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Add(24 * time.Hour).Format(suite.timestampFormat),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*clients.HourlyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              1,\n\t\t\t\tTemperatureFeelsLike:     -4,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                14,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       58,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1017.46\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d000\",\n\t\t\t\t\tWeatherDescription: \"clear\",\n\t\t\t\t},\n\t\t\t\tTimestamp:                suite.time.Add(1 * time.Hour).Format(suite.daytimeFormat),\n\t\t\t\tTemperature:              4,\n\t\t\t\tTemperatureFeelsLike:     -1,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                23,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tHumidityPercentage:       74,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tPressure:                 \"1019.77\",\n\t\t\t},\n\t\t},\n\t}, suite.location)\n\n\texpected := &foreca.Forecast{\n\t\tCurrentCondition: &foreca.CurrentCondition{\n\t\t\tEpoch:                 suite.time.Unix(),\n\t\t\tVisibility:            35,\n\t\t\tPrecipitation:         0,\n\t\t\tPrecipitationNextHour: 0,\n\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"cloudy\",\n\t\t\t\tDescription: \"Overcast\",\n\t\t\t},\n\t\t\tWeatherConditionNextHour: &foreca.WeatherCondition{\n\t\t\t\tCode:        \"mostlysunny\",\n\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t},\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -2.4,\n\t\t\tHumidityPercentage:   80,\n\t\t\tWindGust: &foreca.WindGust{\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"S\",\n\t\t\t\t\t\tDegrees:      180,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 7,\n\t\t\t\t},\n\t\t\t\tGust: 0,\n\t\t\t},\n\t\t\tDewPoint:  -3,\n\t\t\tHeatIndex: -2,\n\t\t\tPressure: &foreca.Pressure{\n\t\t\t\tMillibar: 989.3,\n\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t},\n\t\t\tUVIndex: 0,\n\t\t},\n\t\tDailyConditions: []*foreca.DailyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.UTC().Unix(),\n\t\t\t\tMinTemperature:           1,\n\t\t\t\tMaxTemperature:           4,\n\t\t\t\tPrecipitation:            0.4,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 66,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Unix(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                    suite.time.Add(24 * time.Hour).UTC().Unix(),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tPrecipitationDay:         0,\n\t\t\t\tPrecipitationNight:       0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tSnowDay:                  0,\n\t\t\t\tSnowNight:                0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"SW\",\n\t\t\t\t\t\tDegrees:      225,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 25,\n\t\t\t\t},\n\t\t\t\tAverageHumidityPercentage: 0,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tWeatherConditionNight: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlyCloudy,\n\t\t\t\t\tDescription: \"Cloudy\",\n\t\t\t\t},\n\t\t\t\tUVIndex:      0,\n\t\t\t\tSunriseEpoch: suite.sunrise.Add(24 * time.Hour).Unix(),\n\t\t\t\tSunsetEpoch:  suite.sunset.Add(24 * time.Hour).Unix(),\n\t\t\t},\n\t\t},\n\t\tHourlyConditions: []*foreca.HourlyCondition{\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.UTC().Unix(),\n\t\t\t\tTemperature:          1,\n\t\t\t\tTemperatureFeelsLike: -4,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeMostlySunny,\n\t\t\t\t\tDescription: \"Mostly Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 14,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1017.46,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 58,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tEpoch:                suite.time.Add(1 * time.Hour).UTC().Unix(),\n\t\t\t\tTemperature:          4,\n\t\t\t\tTemperatureFeelsLike: -1,\n\t\t\t\tWeatherCondition: &foreca.WeatherCondition{\n\t\t\t\t\tCode:        foreca.WeatherCodeClear,\n\t\t\t\t\tDescription: \"Clear\",\n\t\t\t\t},\n\t\t\t\tPrecipitation:            0,\n\t\t\t\tSnow:                     0,\n\t\t\t\tPrecipitationProbability: 2,\n\t\t\t\tWind: &foreca.Wind{\n\t\t\t\t\tDirection: &foreca.WindDirection{\n\t\t\t\t\t\tAbbreviation: \"W\",\n\t\t\t\t\t\tDegrees:      270,\n\t\t\t\t\t},\n\t\t\t\t\tSpeed: 23,\n\t\t\t\t},\n\t\t\t\tPressure: &foreca.Pressure{\n\t\t\t\t\tMillibar: 1019.77,\n\t\t\t\t\tTrend:    foreca.PressureTrendSteady,\n\t\t\t\t},\n\t\t\t\tHumidityPercentage: 74,\n\t\t\t\tUVIndex:            0,\n\t\t\t},\n\t\t},\n\t}\n\n\tsuite.Assert().Equal(expected, f)\n}\n", "n_tokens": 2093, "primary_symbol": "TestAllConditions", "primary_kind": "function", "primary_span": [556, 798], "def_symbols": ["TestAllConditions"], "symbols": ["TestAllConditions", "func", "suite", "transformerTestSuite", "transformer", "Transform", "clients", "Response", "CurrentCondition", "WeatherCondition", "WeatherCode", "d400", "WeatherDescription", "overcast", "Timestamp", "time", "Format", "timeFormat", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "Visibility", "DailyConditions", "DailyCondition", "d100", "mostly", "clear", "Date", "daystampFormat", "MinTemperature", "MaxTemperature", "UVIndex", "Precipitation", "PrecipitationProbability", "SunriseTime", "sunrise", "timestampFormat", "SunsetTime", "sunset", "d300", "cloudy", "Add", "Hour", "HourlyConditions", "HourlyCondition", "daytimeFormat", "d000", "location", "expected", "foreca", "Forecast", "Epoch", "Unix", "PrecipitationNextHour", "Code", "Description", "Overcast", "WeatherConditionNextHour", "mostlysunny", "Mostly", "Clear", "WindGust", "Wind", "Direction", "Abbreviation", "Degrees", "Speed", "Gust", "HeatIndex", "Millibar", "Trend", "PressureTrendSteady", "UTC", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "AverageHumidityPercentage", "WeatherCodeMostlySunny", "WeatherConditionNight", "WeatherCodeClear", "SunriseEpoch", "SunsetEpoch", "WeatherCodeMostlyCloudy", "Cloudy", "Assert", "Equal"], "doc_head": "func (suite *transformerTestSuite) TestAllConditions() {\n\tf := suite.transformer.Transform(&clients.Response{\n\t\tCurrentCondition: &clients.CurrentCondition{\n\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\tWeatherCode:        \"d400\",\n\t\t\t\tWeatherDescription: \"overcast\",\n\t\t\t},\n\t\t\tTimestamp:            suite.time.Format(suite.timeFormat),\n\t\t\tTemperature:          0,\n\t\t\tTemperatureFeelsLike: -3,\n\t\t\tDewPoint:             -3,\n\t\t\tWindDirection:        \"S\",\n\t\t\tWindSpeed:            7,\n\t\t\tPressure:             \"989.3\",\n\t\t\tHumidityPercentage:   80,\n\t\t\tVisibility:           35000,\n\t\t},\n\t\tDailyConditions: []*clients.DailyCondition{\n\t\t\t{\n\t\t\t\tWeatherCondition: clients.WeatherCondition{\n\t\t\t\t\tWeatherCode:        \"d100\",\n\t\t\t\t\tWeatherDescription: \"mostly clear\",\n\t\t\t\t},\n\t\t\t\tDate:                     suite.time.Format(suite.daystampFormat),\n\t\t\t\tMinTemperature:           -1,\n\t\t\t\tMaxTemperature:           5,\n\t\t\t\tUVIndex:                  0,\n\t\t\t\tWindDirection:            \"W\",\n\t\t\t\tWindSpeed:                25,\n\t\t\t\tPrecipitation:            0.35,\n\t\t\t\tPrecipitationProbability: 8,\n\t\t\t\tSunriseTime:              suite.sunrise.Format(suite.timestampFormat),\n\t\t\t\tSunsetTime:               suite.sunset.Format(su", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *transformerTestSuite).TestAllConditions", "package": "clients_test", "node_kind": "method", "receiver": "suite *transformerTestSuite", "function_name": "", "method_name": "TestAllConditions", "type_name": "transformerTestSuite", "type_kind": "struct", "imports_used_minimal": ["github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "time"], "symbols_referenced_strict": ["Abbreviation", "Add", "Assert", "AverageHumidityPercentage", "CurrentCondition", "DailyCondition", "DailyConditions", "Date", "Degrees", "Description", "DewPoint", "Direction", "Epoch", "Equal", "Forecast", "Format", "Gust", "HeatIndex", "Hour", "HourlyCondition", "HourlyConditions", "HumidityPercentage", "MaxTemperature", "Millibar", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNextHour", "PrecipitationNight", "PrecipitationProbability", "Pressure", "PressureTrendSteady", "Response", "Snow", "SnowDay", "SnowNight", "Speed", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "Temperature", "TemperatureFeelsLike", "TestAllConditions", "Timestamp", "Transform", "Trend", "UVIndex", "Unix", "Visibility", "WeatherCode", "WeatherCodeClear", "WeatherCodeMostlyCloudy", "WeatherCodeMostlySunny", "WeatherCondition", "WeatherConditionNextHour", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindGust", "WindSpeed", "clients.CurrentCondition", "clients.DailyCondition", "clients.HourlyCondition", "clients.Response", "clients.WeatherCondition", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "foreca.Pressure", "foreca.PressureTrendSteady", "foreca.WeatherCodeClear", "foreca.WeatherCodeMostlyCloudy", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindDirection", "foreca.WindGust", "suite.Assert", "suite.daystampFormat", "suite.daytimeFormat", "suite.location", "suite.sunrise", "suite.sunset", "suite.time", "suite.timeFormat", "suite.timestampFormat", "suite.transformer", "time.Hour"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"time\"\n)\n// receiver: suite *transformerTestSuite", "summary_en": "This Go code snippet defines a test method `TestAllConditions` within the `transformerTestSuite` struct. It transforms a `clients.Response` object into a `foreca.Forecast` object and asserts their equality using the `Assert()` function from the testify library.", "keywords_en": ["test", "transformation", "assertion", "clients.response", "foreca.forecast", "transformertestsuite", "time", "weather condition", "equal"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.521615", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "24fa5468be96b4bd", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#13", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#15", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 799, "end_line": 822, "text": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}\n", "n_tokens": 186, "primary_symbol": "SetupSuite", "primary_kind": "function", "primary_span": [799, 822], "def_symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached"], "symbols": ["SetupSuite", "TestGetForecastForLocationLimitReached", "func", "suite", "forecaClientTestSuite", "mockController", "gomock", "NewController", "location", "time", "LoadLocation", "Europe", "Amsterdam", "limiter", "mocks", "NewMockrateLimiter", "EXPECT", "Acquire", "Any", "Return", "int64", "ratelimit", "ErrLimitReached", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorIs", "foreca", "ErrRequestThrottled"], "doc_head": "func (suite *forecaClientTestSuite) SetupSuite() {\n\tsuite.mockController = gomock.NewController(suite.T())\n\tsuite.location, _ = time.LoadLocation(\"Europe/Amsterdam\")\n}\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitReached() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrLimitReached)\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorIs(err, foreca.ErrRequestThrottled)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).SetupSuite", "package": "clients_test", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "SetupSuite", "type_name": "forecaClientTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks", "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "ErrLimitReached", "ErrRequestThrottled", "ErrorIs", "GetForecastForLocation", "LoadLocation", "NewController", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NotNil", "Return", "SetupSuite", "TestGetForecastForLocationLimitReached", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "foreca.ErrRequestThrottled", "gomock.Any", "gomock.NewController", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "ratelimit.ErrLimitReached", "suite.Assert", "suite.T", "suite.location", "suite.mockController", "time.LoadLocation"], "header_context_minimal": "package clients_test\nimport (\n    \"context\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n)\n// receiver: suite *forecaClientTestSuite", "summary_en": "The Go code sets up a test suite for the `forecaClient` and includes a test function to verify that the `GetForecastForLocation` method returns an error when rate limit is reached. It uses mocking for dependencies such as `rateLimiter` and `httpClient`, and asserts the expected behavior.", "keywords_en": ["setupsuite", "testgetforecastforlocationlimitreached", "forecaclient", "getforecastforlocation", "ratelimiterrlimitreached", "httpclient", "mockcontroller", "location", "ratelimiter", "assert", "nil", "erroris", "errrequestthrottled"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.522193", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "b5da34cdaac6f7fe", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#14", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#16", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 823, "end_line": 860, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}\n\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}\n", "n_tokens": 282, "primary_symbol": "TestGetForecastForLocationLimitError", "primary_kind": "function", "primary_span": [823, 860], "def_symbols": ["TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError"], "symbols": ["TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "int64", "ratelimit", "ErrCountZero", "clients", "NewForecaClient", "NewMockhttpClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "location", "Assert", "NotNil", "ErrorContains", "error", "errors", "New", "unknown", "generic"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationLimitError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), ratelimit.ErrCountZero)\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"limiter error\")\n}\nfunc (suite *forecaClientTestSuite) TestGetForecastForLocationLimitUnknownError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(int64(0), errors.New(\"unknown\"))\n\tc := clients.NewForecaClient(\n\t\tmocks.NewMockhttpClient(suite.mockController),\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"generic error\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationLimitError", "package": "clients_test", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationLimitError", "type_name": "forecaClientTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks", "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit", "go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "ErrCountZero", "ErrorContains", "GetForecastForLocation", "New", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NotNil", "Return", "TestGetForecastForLocationLimitError", "TestGetForecastForLocationLimitUnknownError", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "errors.New", "gomock.Any", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "ratelimit.ErrCountZero", "suite.Assert", "suite.location", "suite.mockController"], "header_context_minimal": "package clients_test\nimport (\n    \"context\"\n    \"errors\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n)\n// receiver: suite *forecaClientTestSuite", "summary_en": "The Go code defines two test functions for the `GetForecastForLocation` method of a client. The first function tests the case when the rate limiter returns an error indicating zero count, and the second function tests the case when the rate limiter returns an unknown error.", "keywords_en": ["forecaclienttestsuite", "testgetforecastforlocationlimiterror", "testgetforecastforlocationlimitunknownerror", "limiter", "acquire", "errcountzero", "errors.new", "getforecastforlocation", "newforecaclient", "mockcontroller"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.522725", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "706f406c17f7e422", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#15", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#17"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#17", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 861, "end_line": 882, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}\n", "n_tokens": 166, "primary_symbol": "TestGetForecastForLocationHttpError", "primary_kind": "function", "primary_span": [861, 882], "def_symbols": ["TestGetForecastForLocationHttpError"], "symbols": ["TestGetForecastForLocationHttpError", "func", "suite", "forecaClientTestSuite", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "errors", "New", "error", "clients", "NewForecaClient", "map", "string", "NewMocktransformer", "err", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "ErrorContains", "http"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationHttpError() {\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(nil, errors.New(\"error\"))\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\tmocks.NewMocktransformer(suite.mockController),\n\t)\n\t_, err := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\tsuite.Assert().NotNil(err)\n\tsuite.Assert().ErrorContains(err, \"http error\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationHttpError", "package": "clients_test", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationHttpError", "type_name": "forecaClientTestSuite", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks", "go.uber.org/mock/gomock", "time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "ErrorContains", "GetForecastForLocation", "New", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NotNil", "Now", "Return", "TestGetForecastForLocationHttpError", "Unix", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "errors.New", "gomock.Any", "httpClient.EXPECT", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "suite.Assert", "suite.location", "suite.mockController", "time.Now"], "header_context_minimal": "package clients_test\nimport (\n    \"context\"\n    \"errors\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks\"\n)\n// receiver: suite *forecaClientTestSuite", "summary_en": "The `TestGetForecastForLocationHttpError` method in the `forecaClientTestSuite` tests the behavior of the `GetForecastForLocation` function when an HTTP error occurs. It mocks a rate limiter and HTTP client to return a simulated HTTP error, then asserts that the returned error is not nil and contains 'http error'.", "keywords_en": ["forecaclienttestsuite", "testgetforecastforlocationhttperror", "getforecastforlocation", "mocks.newmockratelimiter", "limiter.expect().acquire", "mocks.newmockhttpclient", "httpclient.expect().do", "c.getforecastforlocation", "suite.assert().notnil", "suite.assert().errorcontains"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.523195", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "e0cd39225bc41cde", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#16", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#18"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#18", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 883, "end_line": 924, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().Nil(f.CurrentCondition)\n\tsuite.Assert().Nil(f.DailyConditions)\n\tsuite.Assert().Nil(f.HourlyConditions)\n}\n", "n_tokens": 480, "primary_symbol": "TestGetForecastForLocationTransformError", "primary_kind": "function", "primary_span": [883, 924], "def_symbols": ["TestGetForecastForLocationTransformError"], "symbols": ["TestGetForecastForLocationTransformError", "func", "suite", "forecaClientTestSuite", "response", "http", "Response", "StatusCode", "Body", "NopCloser", "bytes", "NewReader", "byte", "weather", "loc", "obs", "station", "Amsterdam", "Airport", "Schiphol", "dist", "d400", "overcast", "d320", "showers", "uvi", "wsx", "rise", "set", "fc1h", "d200", "partly", "cloudy", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "transformerMock", "NewMocktransformer", "Transform", "foreca", "Forecast", "clients", "NewForecaClient", "map", "string", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil", "Nil", "CurrentCondition", "DailyConditions", "HourlyConditions"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationTransformError() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{})\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransfo", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationTransformError", "package": "clients_test", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationTransformError", "type_name": "forecaClientTestSuite", "type_kind": "struct", "imports_used_minimal": ["bytes", "context", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks", "go.uber.org/mock/gomock", "io", "net/http", "time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "Body", "CurrentCondition", "DailyConditions", "Forecast", "GetForecastForLocation", "HourlyConditions", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NewReader", "Nil", "NopCloser", "NotNil", "Now", "Response", "Return", "StatusCode", "TestGetForecastForLocationTransformError", "Transform", "Unix", "bytes.NewReader", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.Forecast", "gomock.Any", "http.Response", "httpClient.EXPECT", "io.NopCloser", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "suite.Assert", "suite.location", "suite.mockController", "time.Now", "transformerMock.EXPECT"], "header_context_minimal": "package clients_test\nimport (\n    \"bytes\"\n    \"context\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *forecaClientTestSuite", "summary_en": "This test function verifies the behavior of the `GetForecastForLocation` method in the `ForecaClient` when a transformation error occurs. It sets up mocks for a rate limiter, HTTP client, and transformer, simulates an HTTP response with weather data, and asserts that the returned forecast object is not nil while its individual conditions are.", "keywords_en": ["forecaclient", "testgetforecastforlocationtransformerror", "mockcontroller", "mockratelimiter", "mockhttpclient", "mocktransformer", "newforecaclient", "getforecastforlocation", "assertnotnil", "currentcondition", "dailyconditions", "hourlyconditions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.523914", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "c841fb552b29ba16", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#17", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#19"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#19", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 925, "end_line": 970, "text": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n\t\t\tHourlyConditions: make([]*foreca.HourlyCondition, 1),\n\t\t})\n\n\tc := clients.NewForecaClient(\n\t\thttpClient,\n\t\t\"\",\n\t\tmap[string]string{},\n\t\tlimiter,\n\t\ttransformerMock,\n\t)\n\n\tf, _ := c.GetForecastForLocation(context.TODO(), 1, suite.location)\n\n\tsuite.Assert().NotNil(f)\n\tsuite.Assert().NotNil(f.CurrentCondition)\n\tsuite.Assert().NotNil(f.DailyConditions)\n\tsuite.Assert().NotNil(f.HourlyConditions)\n}\n", "n_tokens": 526, "primary_symbol": "TestGetForecastForLocationValid", "primary_kind": "function", "primary_span": [925, 970], "def_symbols": ["TestGetForecastForLocationValid"], "symbols": ["TestGetForecastForLocationValid", "func", "suite", "forecaClientTestSuite", "response", "http", "Response", "StatusCode", "Body", "NopCloser", "bytes", "NewReader", "byte", "weather", "loc", "obs", "station", "Amsterdam", "Airport", "Schiphol", "dist", "d400", "overcast", "d320", "showers", "uvi", "wsx", "rise", "set", "fc1h", "d200", "partly", "cloudy", "limiter", "mocks", "NewMockrateLimiter", "mockController", "EXPECT", "Acquire", "gomock", "Any", "Return", "time", "Now", "location", "Unix", "nil", "httpClient", "NewMockhttpClient", "transformerMock", "NewMocktransformer", "Transform", "foreca", "Forecast", "CurrentCondition", "DailyConditions", "make", "DailyCondition", "HourlyConditions", "HourlyCondition", "clients", "NewForecaClient", "map", "string", "GetForecastForLocation", "context", "TODO", "Assert", "NotNil"], "doc_head": "func (suite *forecaClientTestSuite) TestGetForecastForLocationValid() {\n\tresponse := &http.Response{\n\t\tStatusCode: 200,\n\t\tBody: io.NopCloser(\n\t\t\tbytes.NewReader([]byte(\n\t\t\t\t`<weather>\n<loc>\n<obs station=\"Amsterdam Airport Schiphol\" dist=\"13 km SE\" dt=\"2024-01-23 10:00:00\" t=\"7\" tf=\"3\" d=\"4\" s=\"d400\" sT=\"overcast\" wn=\"SW\" ws=\"25\" p=\"1023.8\" rh=\"80\" v=\"12000\"/>\n<fc dt=\"2024-01-23\" tx=\"12\" tn=\"5\" s=\"d320\" sT=\"showers\" uvi=\"0\" wn=\"SW\" wsx=\"40\" pr=\"4.1\" pp=\"81\" rise=\"08:36:17\" set=\"17:11:09\"/>\n<fc1h dt=\"2024-01-23 11:00\" t=\"7\" tf=\"3\" s=\"d200\" sT=\"partly cloudy\" wn=\"SW\" ws=\"25\" rh=\"82\" pp=\"2\" pr=\"0\" uvi=\"0\" p=\"1023.29\"/>\n</loc>\n</weather>`,\n\t\t\t)),\n\t\t),\n\t}\n\tlimiter := mocks.NewMockrateLimiter(suite.mockController)\n\tlimiter.EXPECT().Acquire(gomock.Any()).\n\t\tReturn(time.Now().In(suite.location).Unix(), nil)\n\thttpClient := mocks.NewMockhttpClient(suite.mockController)\n\thttpClient.EXPECT().Do(gomock.Any()).\n\t\tReturn(response, nil)\n\ttransformerMock := mocks.NewMocktransformer(suite.mockController)\n\ttransformerMock.EXPECT().Transform(gomock.Any(), suite.location).\n\t\tReturn(&foreca.Forecast{\n\t\t\tCurrentCondition: &foreca.CurrentCondition{},\n\t\t\tDailyConditions:  make([]*foreca.DailyCondition, 1),\n", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(suite *forecaClientTestSuite).TestGetForecastForLocationValid", "package": "clients_test", "node_kind": "method", "receiver": "suite *forecaClientTestSuite", "function_name": "", "method_name": "TestGetForecastForLocationValid", "type_name": "forecaClientTestSuite", "type_kind": "struct", "imports_used_minimal": ["bytes", "context", "github.com/stretchr/testify/suite", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients/mocks", "go.uber.org/mock/gomock", "io", "net/http", "time"], "symbols_referenced_strict": ["Acquire", "Any", "Assert", "Body", "CurrentCondition", "DailyCondition", "DailyConditions", "Forecast", "GetForecastForLocation", "HourlyCondition", "HourlyConditions", "NewForecaClient", "NewMockhttpClient", "NewMockrateLimiter", "NewMocktransformer", "NewReader", "NopCloser", "NotNil", "Now", "Response", "Return", "StatusCode", "TestGetForecastForLocationValid", "Transform", "Unix", "bytes.NewReader", "c.GetForecastForLocation", "clients.NewForecaClient", "context.TODO", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.CurrentCondition", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "gomock.Any", "http.Response", "httpClient.EXPECT", "io.NopCloser", "limiter.EXPECT", "mocks.NewMockhttpClient", "mocks.NewMockrateLimiter", "mocks.NewMocktransformer", "suite.Assert", "suite.location", "suite.mockController", "time.Now", "transformerMock.EXPECT"], "header_context_minimal": "package clients_test\nimport (\n    \"bytes\"\n    \"context\"\n    \"github.com/stretchr/testify/suite\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n)\n// receiver: suite *forecaClientTestSuite", "summary_en": "This Go test function validates the `GetForecastForLocation` method of the `forecaClientTestSuite`. It sets up mock dependencies for an HTTP client, rate limiter, and transformer, mocks their behavior, and asserts that the forecast object returned by `GetForecastForLocation` is not nil and contains valid current, daily, and hourly conditions.", "keywords_en": ["forecaclienttestsuite", "testgetforecastforlocationvalid", "newforecaclient", "mocks.newmockhttpclient", "httpclient.expect().do", "limiter.expect().acquire", "transformermock.expect().transform", "getforecastforlocation", "assertions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.524632", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "31c3fc28add6b52b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#18", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#20"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#20", "repo_id": "foreca", "path": "adapters/clients/foreca_client_test.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go", "rel_path": "adapters/clients/foreca_client_test.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 971, "end_line": 978, "text": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}\n", "n_tokens": 69, "primary_symbol": "TestForecaClient", "primary_kind": "function", "primary_span": [971, 978], "def_symbols": ["TestForecaClient"], "symbols": ["TestForecaClient", "func", "testing", "suite", "Run", "new", "currentConditionTransformerTestSuite", "dailyForecastTransformerTestSuite", "hourlyForecastTransformerTestSuite", "transformerTestSuite", "forecaClientTestSuite"], "doc_head": "func TestForecaClient(t *testing.T) {\n\tsuite.Run(t, new(currentConditionTransformerTestSuite))\n\tsuite.Run(t, new(dailyForecastTransformerTestSuite))\n\tsuite.Run(t, new(hourlyForecastTransformerTestSuite))\n\tsuite.Run(t, new(transformerTestSuite))\n\tsuite.Run(t, new(forecaClientTestSuite))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:TestForecaClient", "package": "clients_test", "node_kind": "function", "receiver": "", "function_name": "TestForecaClient", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["github.com/stretchr/testify/suite", "testing"], "symbols_referenced_strict": ["Run", "TestForecaClient", "suite.Run", "testing.T"], "header_context_minimal": "package clients_test\nimport (\n    \"github.com/stretchr/testify/suite\"\n    \"testing\"\n)", "summary_en": "The Go code defines a test function `TestForecaClient` that runs multiple test suites for different transformer functionalities in a weather client. It uses the `suite.Run` method from the `github.com/stretchr/testify/suite` package to execute these tests.", "keywords_en": ["test", "suite", "run", "forecast", "transformer", "weather", "client", "daily", "hourly", "current"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.525006", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "3711da0365861007", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client_test.go#19"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#1", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 31, "text": "package clients\n\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}\n", "n_tokens": 200, "primary_symbol": "WeatherCondition", "primary_kind": "", "primary_span": [1, 31], "def_symbols": [], "symbols": ["package", "clients", "import", "context", "encoding", "xml", "fmt", "github", "com", "pkg", "errors", "impalastudios", "log", "xotel", "otel", "weather", "foreca_proxy", "internal", "foreca", "ratelimit", "utilities", "opentelemetry", "attribute", "codes", "trace", "uber", "org", "zap", "golang", "text", "cases", "language", "math", "net", "http", "strconv", "strings", "time", "type", "WeatherCondition", "struct", "WeatherCode", "string", "attr", "WeatherDescription"], "doc_head": "package clients\nimport (\n\t\"context\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"go.impalastudios.com/log\"\n\txotel \"go.impalastudios.com/otel\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n\t\"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/text/cases\"\n\t\"golang.org/x/text/language\"\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\ntype WeatherCondition struct {\n\tWeatherCode        string `xml:\"s,attr\"`\n\tWeatherDescription string `xml:\"sT,attr\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:WeatherCondition (struct)", "package": "clients", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "WeatherCondition", "type_kind": "struct", "imports_used_minimal": [], "symbols_referenced_strict": ["WeatherCode", "WeatherCondition", "WeatherDescription"], "header_context_minimal": "package clients", "summary_en": "The provided Go code appears to be a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' for all requests.", "keywords_en": ["go", "http server", "listenandserve", "mux", "requesthandler", "fmt.println", "localhost", "port 8080", "response", "hello, world!"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.553298", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "fd224f88aa46b5ee", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#2", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 32, "end_line": 57, "text": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\n\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\n\treturn zero == *cc\n}\n\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}\n", "n_tokens": 192, "primary_symbol": "IsZero", "primary_kind": "function", "primary_span": [48, 57], "def_symbols": ["IsZero", "IsValid"], "symbols": ["IsZero", "IsValid", "type", "CurrentCondition", "struct", "XMLName", "xml", "Name", "obs", "WeatherCondition", "Station", "string", "station", "attr", "Timestamp", "Temperature", "float64", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "int", "Visibility", "func", "bool", "var", "zero", "return"], "doc_head": "type CurrentCondition struct {\n\tXMLName xml.Name `xml:\"obs\"`\n\tWeatherCondition\n\tStation              string  `xml:\"station,attr\"`\n\tTimestamp            string  `xml:\"dt,attr\"`\n\tTemperature          float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike float64 `xml:\"tf,attr\"`\n\tDewPoint             float64 `xml:\"d,attr\"`\n\tWindDirection        string  `xml:\"wn,attr\"`\n\tWindSpeed            float64 `xml:\"ws,attr\"`\n\tPressure             string  `xml:\"p,attr\"`\n\tHumidityPercentage   int     `xml:\"rh,attr\"`\n\tVisibility           int     `xml:\"v,attr\"`\n}\nfunc (cc *CurrentCondition) IsZero() bool {\n\tvar zero CurrentCondition\n\treturn zero == *cc\n}\nfunc (cc *CurrentCondition) IsValid() bool {\n\treturn !cc.IsZero() && cc.Timestamp != \"\"\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(cc *CurrentCondition).IsZero", "package": "clients", "node_kind": "method", "receiver": "cc *CurrentCondition", "function_name": "", "method_name": "IsZero", "type_name": "CurrentCondition", "type_kind": "struct", "imports_used_minimal": ["encoding/xml"], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "HumidityPercentage", "IsValid", "IsZero", "Name", "Pressure", "Station", "Temperature", "TemperatureFeelsLike", "Timestamp", "Visibility", "WeatherCondition", "WindDirection", "WindSpeed", "XMLName", "cc.IsZero", "cc.Timestamp", "xml.Name"], "header_context_minimal": "package clients\nimport \"encoding/xml\"\n// receiver: cc *CurrentCondition", "summary_en": "This Go code defines a `CurrentCondition` struct representing weather conditions with various attributes. It includes methods `IsZero` and `IsValid` to check if an instance is zero or valid, respectively.", "keywords_en": ["currentcondition", "weathercondition", "station", "timestamp", "temperature", "dewpoint", "winddirection", "windspeed", "pressure", "humiditypercentage", "visibility", "iszero", "isvalid"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.554035", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "2e603738b66eba54", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#3", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 58, "end_line": 73, "text": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}\n", "n_tokens": 153, "primary_symbol": "DailyCondition", "primary_kind": "", "primary_span": [58, 73], "def_symbols": [], "symbols": ["type", "DailyCondition", "struct", "XMLName", "xml", "Name", "WeatherCondition", "Date", "string", "attr", "MinTemperature", "float64", "MaxTemperature", "UVIndex", "uvi", "WindDirection", "WindSpeed", "wsx", "Precipitation", "PrecipitationProbability", "int", "SunriseTime", "rise", "SunsetTime", "set"], "doc_head": "type DailyCondition struct {\n\tXMLName xml.Name `xml:\"fc\"`\n\tWeatherCondition\n\tDate                     string  `xml:\"dt,attr\"`\n\tMinTemperature           float64 `xml:\"tn,attr\"`\n\tMaxTemperature           float64 `xml:\"tx,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"wsx,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tSunriseTime              string  `xml:\"rise,attr\"`\n\tSunsetTime               string  `xml:\"set,attr\"`\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:DailyCondition (struct)", "package": "clients", "node_kind": "type", "receiver": "", "function_name": "", "method_name": "", "type_name": "DailyCondition", "type_kind": "struct", "imports_used_minimal": ["encoding/xml"], "symbols_referenced_strict": ["DailyCondition", "Date", "MaxTemperature", "MinTemperature", "Name", "Precipitation", "PrecipitationProbability", "SunriseTime", "SunsetTime", "UVIndex", "WeatherCondition", "WindDirection", "WindSpeed", "XMLName", "xml.Name"], "header_context_minimal": "package clients\nimport \"encoding/xml\"", "summary_en": "The Go struct `DailyCondition` represents weather data for a single day, including temperature, UV index, wind conditions, and precipitation. It is annotated with XML tags for parsing XML responses from the Foreca API.", "keywords_en": ["dailycondition", "weathercondition", "date", "maxtemperature", "mintemperature", "uvindex", "winddirection", "windspeed", "precipitation", "sunrisetime", "sunsettime"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.554790", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "db36c3195849e6c3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#4", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 74, "end_line": 108, "text": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}\n\ntype Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\n\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\n\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (", "n_tokens": 301, "primary_symbol": "HasCurrentCondition", "primary_kind": "function", "primary_span": [98, 108], "def_symbols": ["HasCurrentCondition"], "symbols": ["HasCurrentCondition", "type", "HourlyCondition", "struct", "XMLName", "xml", "Name", "fc1h", "WeatherCondition", "Timestamp", "string", "attr", "Temperature", "float64", "TemperatureFeelsLike", "WindDirection", "WindSpeed", "Precipitation", "PrecipitationProbability", "int", "HumidityPercentage", "UVIndex", "uvi", "Pressure", "Response", "weather", "CurrentCondition", "loc", "obs", "DailyConditions", "DailyCondition", "HourlyConditions", "func", "bool", "return", "nil", "IsValid", "errorResponse", "error", "Message", "message", "generate", "bin", "mockgen", "source", "foreca_client", "destination", "mocks", "foreca_client_mocks", "package"], "doc_head": "type HourlyCondition struct {\n\tXMLName xml.Name `xml:\"fc1h\"`\n\tWeatherCondition\n\tTimestamp                string  `xml:\"dt,attr\"`\n\tTemperature              float64 `xml:\"t,attr\"`\n\tTemperatureFeelsLike     float64 `xml:\"tf,attr\"`\n\tWindDirection            string  `xml:\"wn,attr\"`\n\tWindSpeed                float64 `xml:\"ws,attr\"`\n\tPrecipitation            float64 `xml:\"pr,attr\"`\n\tPrecipitationProbability int     `xml:\"pp,attr\"`\n\tHumidityPercentage       int     `xml:\"rh,attr\"`\n\tUVIndex                  float64 `xml:\"uvi,attr\"`\n\tPressure                 string  `xml:\"p,attr\"`\n}\ntype Response struct {\n\tXMLName xml.Name `xml:\"weather\"`\n\tCurrentCondition *CurrentCondition  `xml:\"loc>obs\"`\n\tDailyConditions  []*DailyCondition  `xml:\"loc>fc\"`\n\tHourlyConditions []*HourlyCondition `xml:\"loc>fc1h\"`\n}\nfunc (r Response) HasCurrentCondition() bool {\n\treturn r.CurrentCondition != nil && r.CurrentCondition.IsValid()\n}\ntype errorResponse struct {\n\tXMLName xml.Name `xml:\"error\"`\n\tMessage string   `xml:\"message,attr\"`\n}\n//go:generate /go/bin/mockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\ntype (", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(r Response).HasCurrentCondition", "package": "clients", "node_kind": "method", "receiver": "r Response", "function_name": "", "method_name": "HasCurrentCondition", "type_name": "Response", "type_kind": "struct", "imports_used_minimal": ["encoding/xml"], "symbols_referenced_strict": ["CurrentCondition", "DailyCondition", "DailyConditions", "HasCurrentCondition", "HourlyCondition", "HourlyConditions", "HumidityPercentage", "IsValid", "Message", "Name", "Precipitation", "PrecipitationProbability", "Pressure", "Response", "Temperature", "TemperatureFeelsLike", "Timestamp", "UVIndex", "WeatherCondition", "WindDirection", "WindSpeed", "XMLName", "r.CurrentCondition", "xml.Name"], "header_context_minimal": "package clients\nimport \"encoding/xml\"\n// receiver: r Response", "summary_en": "This Go code defines a `Response` struct to parse weather data in XML format. It includes nested structs for current conditions, daily forecasts, and hourly forecasts. The `HasCurrentCondition` method checks if the response contains valid current conditions.", "keywords_en": ["response", "weather", "xml", "currentcondition", "dailyconditions", "hourlyconditions", "timestamp", "temperature", "humiditypercentage", "pressure"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.555519", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "d6d69d994b4655d0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#5", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 109, "end_line": 139, "text": "\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}\n\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\n\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\n\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}\n", "n_tokens": 190, "primary_symbol": "ForecaClient", "primary_kind": "function", "primary_span": [129, 139], "def_symbols": ["NewForecaClient"], "symbols": ["NewForecaClient", "httpClient", "interface", "http", "Request", "Response", "error", "rateLimiter", "Acquire", "string", "int64", "transformer", "Transform", "time", "Location", "foreca", "Forecast", "type", "ForecaClient", "struct", "endpoint", "defaultQueryParams", "map", "rateLimitKey", "func", "client", "return"], "doc_head": "\thttpClient interface {\n\t\tDo(*http.Request) (*http.Response, error)\n\t}\n\trateLimiter interface {\n\t\tAcquire(string) (int64, error)\n\t}\n\ttransformer interface {\n\t\tTransform(*Response, *time.Location) *foreca.Forecast\n\t}\n)\ntype ForecaClient struct {\n\thttp               httpClient\n\tendpoint           string\n\tdefaultQueryParams map[string]string\n\trl                 rateLimiter\n\trateLimitKey       string\n\ttransformer        transformer\n}\nfunc NewForecaClient(client httpClient, endpoint string, defaultQueryParams map[string]string, rl rateLimiter, t transformer) *ForecaClient {\n\treturn &ForecaClient{\n\t\thttp:               client,\n\t\tendpoint:           endpoint,\n\t\tdefaultQueryParams: defaultQueryParams,\n\t\trl:                 rl,\n\t\trateLimitKey:       \"foreca\",\n\t\ttransformer:        t,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:type:ForecaClient (struct)", "package": "clients", "node_kind": "type", "receiver": "", "function_name": "NewForecaClient", "method_name": "", "type_name": "ForecaClient", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "net/http", "time"], "symbols_referenced_strict": ["Acquire", "ForecaClient", "Forecast", "Location", "NewForecaClient", "Request", "Response", "Transform", "foreca.Forecast", "http.Request", "http.Response", "time.Location"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"net/http\"\n    \"time\"\n)", "summary_en": "Defines the ForecaClient struct and its constructor.", "keywords_en": ["forecaclient", "struct", "constructor", "httpclient", "endpoint", "rate limiter", "transformer"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.556164", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "644c574df6f5f9dc", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#6", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 140, "end_line": 236, "text": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\n\t\treturn nil, errors.Wrap(err, \"foreca client: generic error\")\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, c.endpoint, nil)\n\tif err != nil {\n\t\tlog.Error(ctx, \"Cannot create request.\", zap.Int(\"id\", id), zap.Error(err))\n\t\treturn nil, errors.Wrap(err, \"foreca client: cannot create request\")\n\t}\n\n\tq := req.URL.Query()\n\tfor key, value := range c.defaultQueryParams {\n\t\tq.Add(key, value)\n\t}\n\tq.Add(\"l\", fmt.Sprintf(\"%d\", id))\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.http.Do(req)\n\tif err != nil {\n\t\tlog.Error(ctx,\n\t\t\t\"Error occurred with the HTTP request.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: http error\")\n\t}\n\n\tdefer func() {\n\t\tif err := resp.Body.Close(); err != nil {\n\t\t\tlog.Error(ctx,\n\t\t\t\t\"Error occurred while closing the response body stream.\",\n\t\t\t\tzap.Int(\"id\", id),\n\t\t\t\tzap.Error(err),\n\t\t\t)\n\t\t}\n\t}()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar r *Response\n\terr = xml.Unmarshal(body, &r)\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\n\t\tvar e errorResponse\n\t\tif err := xml.Unmarshal(body, &e); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"foreca client: cannot unmarshal response\")\n\t\t}\n\n\t\tlog.Error(ctx, \"Cannot get forecast for location.\", zap.Int(\"id\", id), zap.Any(\"error\", e))\n\t\treturn nil, errors.Wrap(err, \"foreca client: client error\")\n\t}\n\n\treturn c.transformer.Transform(r, loc), nil\n}\n", "n_tokens": 742, "primary_symbol": "GetForecastForLocation", "primary_kind": "function", "primary_span": [140, 236], "def_symbols": ["GetForecastForLocation"], "symbols": ["GetForecastForLocation", "func", "ForecaClient", "ctx", "context", "Context", "int", "loc", "time", "Location", "foreca", "Forecast", "error", "span", "xotel", "Tracer", "Start", "client", "get", "forecast", "trace", "WithSpanKind", "SpanKindClient", "defer", "End", "SetAttributes", "attribute", "Int", "location_id", "log", "Debug", "Acquiring", "lock", "for", "key", "zap", "String", "rateLimitKey", "epoch", "err", "Acquire", "Lock", "acquired", "Int64", "errors", "ratelimit", "ErrLimitReached", "Bool", "throttled", "true", "Warn", "Request", "return", "nil", "ErrRequestThrottled", "else", "isLimiterError", "SetStatus", "codes", "Error", "Limiter", "experienced", "RecordError", "Wrap", "limiter", "occurred", "Unexpected", "generic", "req", "http", "NewRequestWithContext", "MethodGet", "endpoint", "Cannot", "create", "request", "cannot", "URL", "Query", "value", "range", "defaultQueryParams", "Add", "fmt", "Sprintf", "RawQuery", "Encode", "resp", "with", "the", "HTTP", "Body", "Close", "while", "closing", "response", "body", "stream", "ReadAll", "var", "Response", "xml", "Unmarshal", "errorResponse", "unmarshal", "location", "Any", "transformer", "Transform"], "doc_head": "func (c *ForecaClient) GetForecastForLocation(ctx context.Context, id int, loc *time.Location) (*foreca.Forecast, error) {\n\tctx, span := xotel.Tracer.Start(ctx, \"foreca-client:get-forecast\", trace.WithSpanKind(trace.SpanKindClient))\n\tdefer span.End()\n\tspan.SetAttributes(attribute.Int(\"location_id\", id))\n\tlog.Debug(ctx, \"Acquiring lock for key.\", zap.String(\"key\", c.rateLimitKey))\n\tepoch, err := c.rl.Acquire(c.rateLimitKey)\n\tlog.Debug(ctx, \"Lock acquired.\", zap.Int64(\"epoch\", epoch), zap.String(\"key\", c.rateLimitKey))\n\tif errors.Is(err, ratelimit.ErrLimitReached) {\n\t\tspan.SetAttributes(attribute.Bool(\"throttled\", true))\n\t\tlog.Warn(ctx,\n\t\t\t\"Request throttled.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t)\n\t\treturn nil, foreca.ErrRequestThrottled\n\t} else if c.isLimiterError(err) {\n\t\tspan.SetStatus(codes.Error, \"Limiter experienced an error.\")\n\t\tspan.RecordError(err)\n\t\tlog.Warn(ctx,\n\t\t\t\"Limiter experienced an error.\",\n\t\t\tzap.Int(\"location_id\", id),\n\t\t\tzap.Error(err),\n\t\t)\n\t\treturn nil, errors.Wrap(err, \"foreca client: limiter error\")\n\t} else if err != nil {\n\t\tspan.SetStatus(codes.Error, \"An error occurred.\")\n\t\tspan.RecordError(err)\n\t\tlog.Warn(ctx,\n\t\t\t\"Unexpected error occurred.\",\n\t\t\tzap.Int(\"loca", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(c *ForecaClient).GetForecastForLocation", "package": "clients", "node_kind": "method", "receiver": "c *ForecaClient", "function_name": "", "method_name": "GetForecastForLocation", "type_name": "ForecaClient", "type_kind": "struct", "imports_used_minimal": ["context", "encoding/xml", "fmt", "github.com/pkg/errors", "go.impalastudios.com/log", "go.impalastudios.com/otel", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit", "go.opentelemetry.io/otel/attribute", "go.opentelemetry.io/otel/codes", "go.opentelemetry.io/otel/trace", "go.uber.org/zap", "io", "net/http", "time"], "symbols_referenced_strict": ["Acquire", "Add", "Any", "Body", "Bool", "Close", "Context", "Debug", "Encode", "End", "ErrLimitReached", "ErrRequestThrottled", "Error", "ForecaClient", "Forecast", "GetForecastForLocation", "Int", "Int64", "Location", "MethodGet", "NewRequestWithContext", "Query", "RawQuery", "ReadAll", "RecordError", "Response", "SetAttributes", "SetStatus", "SpanKindClient", "Sprintf", "Start", "String", "Tracer", "Transform", "Unmarshal", "Warn", "WithSpanKind", "Wrap", "attribute.Bool", "attribute.Int", "c.defaultQueryParams", "c.endpoint", "c.http", "c.isLimiterError", "c.rateLimitKey", "c.rl", "c.transformer", "codes.Error", "context.Context", "errors.Is", "errors.Wrap", "fmt.Sprintf", "foreca.ErrRequestThrottled", "foreca.Forecast", "http.MethodGet", "http.NewRequestWithContext", "io.ReadAll", "log.Debug", "log.Error", "log.Warn", "q.Add", "q.Encode", "ratelimit.ErrLimitReached", "req.URL", "resp.Body", "span.End", "span.RecordError", "span.SetAttributes", "span.SetStatus", "time.Location", "trace.SpanKindClient", "trace.WithSpanKind", "xml.Unmarshal", "xotel.Tracer", "zap.Any", "zap.Error", "zap.Int", "zap.Int64", "zap.String"], "header_context_minimal": "package clients\nimport (\n    \"context\"\n    \"encoding/xml\"\n    \"fmt\"\n    \"github.com/pkg/errors\"\n    \"go.impalastudios.com/log\"\n)\n// receiver: c *ForecaClient", "summary_en": "This function fetches weather forecasts for a specified location using the Foreca API. It handles rate limiting and error responses, logging relevant details.", "keywords_en": ["forecast", "location", "rate limiting", "http request", "xml unmarshal", "error handling", "logging", "context"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.557373", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "2ed4adbcba28170e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#5", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#7"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#7", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 7, "start_line": 237, "end_line": 260, "text": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\n\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}\n", "n_tokens": 158, "primary_symbol": "isLimiterError", "primary_kind": "function", "primary_span": [237, 260], "def_symbols": ["isLimiterError", "NewTransformer"], "symbols": ["isLimiterError", "NewTransformer", "func", "ForecaClient", "err", "error", "bool", "list", "ratelimit", "ErrKeyEmpty", "ErrCountZero", "ErrLimitZero", "ErrCountLimit", "ErrZeroDuration", "for", "range", "return", "true", "false", "type", "forecaTransformer", "struct", "cct", "currentConditionTransformer", "dft", "dailyForecastTransformer", "hft", "hourlyForecastTransformer", "NewCurrentConditionTransformer", "NewDailyForecastTransformer", "NewHourlyForecastTransformer"], "doc_head": "func (c *ForecaClient) isLimiterError(err error) bool {\n\tlist := [...]error{ratelimit.ErrKeyEmpty, ratelimit.ErrCountZero, ratelimit.ErrLimitZero, ratelimit.ErrCountLimit, ratelimit.ErrZeroDuration}\n\tfor _, e := range list {\n\t\tif err == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\ntype forecaTransformer struct {\n\tcct *currentConditionTransformer\n\tdft *dailyForecastTransformer\n\thft *hourlyForecastTransformer\n}\nfunc NewTransformer() *forecaTransformer {\n\treturn &forecaTransformer{\n\t\tcct: NewCurrentConditionTransformer(),\n\t\tdft: NewDailyForecastTransformer(),\n\t\thft: NewHourlyForecastTransformer(),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(c *ForecaClient).isLimiterError", "package": "clients", "node_kind": "method", "receiver": "c *ForecaClient", "function_name": "NewTransformer", "method_name": "isLimiterError", "type_name": "ForecaClient", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit"], "symbols_referenced_strict": ["ErrCountLimit", "ErrCountZero", "ErrKeyEmpty", "ErrLimitZero", "ErrZeroDuration", "ForecaClient", "NewCurrentConditionTransformer", "NewDailyForecastTransformer", "NewHourlyForecastTransformer", "NewTransformer", "ratelimit.ErrCountLimit", "ratelimit.ErrCountZero", "ratelimit.ErrKeyEmpty", "ratelimit.ErrLimitZero", "ratelimit.ErrZeroDuration"], "header_context_minimal": "package clients\nimport \"go.impalastudios.com/weather/foreca_proxy/pkg/ratelimit\"\n// receiver: c *ForecaClient", "summary_en": "This Go code defines a method `isLimiterError` for the `ForecaClient` struct to check if an error is related to rate limiting. It also includes a function `NewTransformer` that creates instances of transformers for handling different types of weather forecasts.", "keywords_en": ["forecaclient", "ratelimit", "errcountlimit", "errcountzero", "errkeyempty", "errlimitzero", "errzeroduration", "currentconditiontransformer", "dailyforecasttransformer", "hourlyforecasttransformer"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.558864", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "a4202a4103942e19", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#6", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#8"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#8", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 8, "start_line": 261, "end_line": 303, "text": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\n\tvar dfs []*foreca.DailyCondition\n\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}\n\nfunc (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\n\treturn r\n}\n\ntype currentConditionTransformer struct{}\n\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}\n", "n_tokens": 294, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [261, 303], "def_symbols": ["Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer"], "symbols": ["Transform", "getHourlyForecastsForDate", "NewCurrentConditionTransformer", "func", "forecaTransformer", "Response", "location", "time", "Location", "foreca", "Forecast", "CurrentCondition", "var", "firstHourForecast", "HourlyCondition", "len", "HourlyConditions", "dfs", "DailyCondition", "for", "range", "DailyConditions", "append", "dft", "Date", "hfs", "hft", "return", "cct", "string", "strings", "HasPrefix", "Timestamp", "type", "currentConditionTransformer", "struct"], "doc_head": "func (t *forecaTransformer) Transform(f *Response, location *time.Location) *foreca.Forecast {\n\tcc := f.CurrentCondition\n\tvar firstHourForecast *HourlyCondition\n\tif len(f.HourlyConditions) > 0 {\n\t\tfirstHourForecast = f.HourlyConditions[0]\n\t}\n\tvar dfs []*foreca.DailyCondition\n\tfor _, d := range f.DailyConditions {\n\t\tdfs = append(dfs, t.dft.Transform(d, t.getHourlyForecastsForDate(d.Date, f.HourlyConditions), location))\n\t}\n\tvar hfs []*foreca.HourlyCondition\n\tfor _, h := range f.HourlyConditions {\n\t\thfs = append(hfs, t.hft.Transform(h, location))\n\t}\n\treturn &foreca.Forecast{\n\t\tCurrentCondition: t.cct.Transform(cc, firstHourForecast, location),\n\t\tDailyConditions:  dfs,\n\t\tHourlyConditions: hfs,\n\t}\n}\nfunc (t *forecaTransformer) getHourlyForecastsForDate(d string, hfs []*HourlyCondition) []*HourlyCondition {\n\tvar r []*HourlyCondition\n\tfor _, h := range hfs {\n\t\tif strings.HasPrefix(h.Timestamp, d) {\n\t\t\tr = append(r, h)\n\t\t}\n\t}\n\treturn r\n}\ntype currentConditionTransformer struct{}\nfunc NewCurrentConditionTransformer() *currentConditionTransformer {\n\treturn &currentConditionTransformer{}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *forecaTransformer).Transform", "package": "clients", "node_kind": "method", "receiver": "t *forecaTransformer", "function_name": "NewCurrentConditionTransformer", "method_name": "Transform", "type_name": "forecaTransformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "strings", "time"], "symbols_referenced_strict": ["CurrentCondition", "DailyCondition", "DailyConditions", "Date", "Forecast", "HasPrefix", "HourlyCondition", "HourlyConditions", "Location", "NewCurrentConditionTransformer", "Response", "Timestamp", "Transform", "d.Date", "f.CurrentCondition", "f.DailyConditions", "f.HourlyConditions", "foreca.DailyCondition", "foreca.Forecast", "foreca.HourlyCondition", "h.Timestamp", "strings.HasPrefix", "t.cct", "t.dft", "t.getHourlyForecastsForDate", "t.hft", "time.Location"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"strings\"\n    \"time\"\n)\n// receiver: t *forecaTransformer", "summary_en": "This Go code defines a `forecaTransformer` struct with a `Transform` method to convert `Response` objects from the `weather/foreca_proxy/internal/foreca` package into `Forecast` objects. The `getHourlyForecastsForDate` helper function filters hourly forecasts based on date. A `currentConditionTransformer` struct is also defined and initialized with `NewCurrentConditionTransformer`.", "keywords_en": ["forecatransformer", "transform", "response", "forecast", "dailyconditions", "hourlyconditions", "location", "gethourlyforecastsfordate", "currentconditiontransformer", "newcurrentconditiontransformer"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.559419", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "b45ed4895c9452e7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#7", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#9"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#9", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 9, "start_line": 304, "end_line": 349, "text": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex),\n\t\t\t\tutilities.KilometersToMiles(icc.WindGust.Wind.Speed),\n\t\t\t),\n\t\t),\n\t\t1,\n\t)\n\n\tif hf != nil {\n\t\ticc.UVIndex = hf.UVIndex\n\t\ticc.Precipitation = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t\ticc.WeatherConditionNextHour = buildWeatherCondition(hf.WeatherCode, hf.WeatherDescription)\n\t\ticc.PrecipitationNextHour = parsePrecipitationForWeatherCode(hf.WeatherCode, hf.Precipitation)\n\t}\n\n\treturn &icc\n}\n", "n_tokens": 465, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [304, 349], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "currentConditionTransformer", "CurrentCondition", "HourlyCondition", "location", "time", "Location", "foreca", "var", "icc", "nil", "return", "buildCurrentConditionFromHourlyForecast", "Epoch", "getUtcEpochForFormatInLocation", "Timestamp", "Visibility", "utilities", "Round", "float64", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Temperature", "HumidityPercentage", "WindGust", "buildWindGust", "WindDirection", "WindSpeed", "Pressure", "buildPressure", "DewPoint", "HeatIndex", "FahrenheitToCelsius", "computeHeatIndex", "CelsiusToFahrenheit", "TemperatureFeelsLike", "computeTemperatureFeelsLike", "KilometersToMiles", "Wind", "Speed", "UVIndex", "Precipitation", "parsePrecipitationForWeatherCode", "WeatherConditionNextHour", "PrecipitationNextHour"], "doc_head": "func (t *currentConditionTransformer) Transform(c *CurrentCondition, hf *HourlyCondition, location *time.Location) *foreca.CurrentCondition {\n\tvar icc foreca.CurrentCondition\n\tif c == nil && hf == nil {\n\t\treturn nil\n\t}\n\tif c == nil && hf != nil {\n\t\tc = t.buildCurrentConditionFromHourlyForecast(hf)\n\t}\n\ticc.Epoch = getUtcEpochForFormatInLocation(c.Timestamp, \"2006-01-02 15:04:05\", location)\n\ticc.Visibility = utilities.Round(float64(c.Visibility)*0.001, 1)\n\ticc.WeatherCondition = buildWeatherCondition(c.WeatherCode, c.WeatherDescription)\n\ticc.Temperature = utilities.Round(c.Temperature, 1)\n\ticc.HumidityPercentage = c.HumidityPercentage\n\ticc.WindGust = buildWindGust(c.WindDirection, c.WindSpeed, 0)\n\ticc.Pressure = buildPressure(c.Pressure)\n\ticc.DewPoint = utilities.Round(c.DewPoint, 1)\n\ticc.HeatIndex = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeHeatIndex(utilities.CelsiusToFahrenheit(icc.Temperature), utilities.CelsiusToFahrenheit(icc.DewPoint)),\n\t\t),\n\t\t1,\n\t)\n\ticc.TemperatureFeelsLike = utilities.Round(\n\t\tutilities.FahrenheitToCelsius(\n\t\t\tt.computeTemperatureFeelsLike(\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.Temperature),\n\t\t\t\tutilities.CelsiusToFahrenheit(icc.HeatIndex", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).Transform", "package": "clients", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "Transform", "type_name": "currentConditionTransformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/utilities", "time"], "symbols_referenced_strict": ["CelsiusToFahrenheit", "CurrentCondition", "DewPoint", "Epoch", "FahrenheitToCelsius", "HeatIndex", "HourlyCondition", "HumidityPercentage", "KilometersToMiles", "Location", "Precipitation", "PrecipitationNextHour", "Pressure", "Round", "Speed", "Temperature", "TemperatureFeelsLike", "Timestamp", "Transform", "UVIndex", "Visibility", "WeatherCode", "WeatherCondition", "WeatherConditionNextHour", "WeatherDescription", "Wind", "Wind.Speed", "WindDirection", "WindGust", "WindSpeed", "c.DewPoint", "c.HumidityPercentage", "c.Pressure", "c.Temperature", "c.Timestamp", "c.Visibility", "c.WeatherCode", "c.WeatherDescription", "c.WindDirection", "c.WindSpeed", "foreca.CurrentCondition", "hf.Precipitation", "hf.UVIndex", "hf.WeatherCode", "hf.WeatherDescription", "icc.DewPoint", "icc.Epoch", "icc.HeatIndex", "icc.HumidityPercentage", "icc.Precipitation", "icc.PrecipitationNextHour", "icc.Pressure", "icc.Temperature", "icc.TemperatureFeelsLike", "icc.UVIndex", "icc.Visibility", "icc.WeatherCondition", "icc.WeatherConditionNextHour", "icc.WindGust", "t.buildCurrentConditionFromHourlyForecast", "t.computeHeatIndex", "t.computeTemperatureFeelsLike", "time.Location", "utilities.CelsiusToFahrenheit", "utilities.FahrenheitToCelsius", "utilities.KilometersToMiles", "utilities.Round"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n    \"time\"\n)\n// receiver: t *currentConditionTransformer", "summary_en": "This Go function `Transform` converts a `CurrentCondition` and an optional `HourlyCondition` into a `foreca.CurrentCondition`. It handles cases where either or both conditions are nil, computes derived values like heat index and temperature feels like, and includes additional details from the hourly forecast if available.", "keywords_en": ["currentconditiontransformer", "transform", "currentcondition", "hourlycondition", "foreca.currentcondition", "temperature", "humiditypercentage", "pressure", "windgust", "heatindex"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.560112", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "cffd0eae5ca30d93", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#8", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#10"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#10", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 10, "start_line": 350, "end_line": 384, "text": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\n\tcc.Visibility = 0\n\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\n\treturn &cc\n}\n", "n_tokens": 232, "primary_symbol": "buildCurrentConditionFromHourlyForecast", "primary_kind": "function", "primary_span": [350, 384], "def_symbols": ["buildCurrentConditionFromHourlyForecast"], "symbols": ["buildCurrentConditionFromHourlyForecast", "func", "currentConditionTransformer", "HourlyCondition", "CurrentCondition", "var", "Timestamp", "fmt", "Sprintf", "else", "time", "Now", "UTC", "Format", "Station", "WeatherCode", "d000", "WeatherDescription", "clear", "Visibility", "Temperature", "TemperatureFeelsLike", "DewPoint", "WindDirection", "WindSpeed", "Pressure", "HumidityPercentage", "return"], "doc_head": "func (t *currentConditionTransformer) buildCurrentConditionFromHourlyForecast(hf *HourlyCondition) *CurrentCondition {\n\tvar cc CurrentCondition\n\tif hf.Timestamp != \"\" {\n\t\tcc.Timestamp = fmt.Sprintf(\"%s:00\", hf.Timestamp)\n\t} else {\n\t\tcc.Timestamp = time.Now().UTC().Format(\"2006-01-02 15:04:05\")\n\t}\n\tcc.Station = \"\"\n\tif hf.WeatherCode != \"\" {\n\t\tcc.WeatherCode = hf.WeatherCode\n\t} else {\n\t\tcc.WeatherCode = \"d000\"\n\t}\n\tif hf.WeatherDescription != \"\" {\n\t\tcc.WeatherDescription = hf.WeatherDescription\n\t} else {\n\t\tcc.WeatherDescription = \"clear\"\n\t}\n\tcc.Visibility = 0\n\tcc.Temperature = hf.Temperature\n\tcc.TemperatureFeelsLike = cc.Temperature\n\tcc.DewPoint = 0\n\tcc.WindDirection = hf.WindDirection\n\tcc.WindSpeed = hf.WindSpeed\n\tcc.Pressure = hf.Pressure\n\tcc.HumidityPercentage = hf.HumidityPercentage\n\treturn &cc\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).buildCurrentConditionFromHourlyForecast", "package": "clients", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "buildCurrentConditionFromHourlyForecast", "type_name": "currentConditionTransformer", "type_kind": "struct", "imports_used_minimal": ["fmt", "time"], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "Format", "HourlyCondition", "HumidityPercentage", "Now", "Pressure", "Sprintf", "Station", "Temperature", "TemperatureFeelsLike", "Timestamp", "Visibility", "WeatherCode", "WeatherDescription", "WindDirection", "WindSpeed", "cc.DewPoint", "cc.HumidityPercentage", "cc.Pressure", "cc.Station", "cc.Temperature", "cc.TemperatureFeelsLike", "cc.Timestamp", "cc.Visibility", "cc.WeatherCode", "cc.WeatherDescription", "cc.WindDirection", "cc.WindSpeed", "fmt.Sprintf", "hf.HumidityPercentage", "hf.Pressure", "hf.Temperature", "hf.Timestamp", "hf.WeatherCode", "hf.WeatherDescription", "hf.WindDirection", "hf.WindSpeed", "time.Now"], "header_context_minimal": "package clients\nimport (\n    \"fmt\"\n    \"time\"\n)\n// receiver: t *currentConditionTransformer", "summary_en": "This Go function `buildCurrentConditionFromHourlyForecast` transforms an `HourlyCondition` into a `CurrentCondition`, setting various fields like timestamp, weather code, temperature, and wind details based on the input. If certain fields are empty in the input, default values are used.", "keywords_en": ["currentcondition", "hourlyforecast", "timestamp", "weathercode", "temperature", "winddirection", "windspeed", "defaultvalues", "fmt.sprintf", "time.now", "transform"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.560582", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "d8838bab526b4be3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#9", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#11"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#11", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 11, "start_line": 385, "end_line": 418, "text": "// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\n\treturn hiRothfusz + adjustment\n}\n", "n_tokens": 403, "primary_symbol": "computeHeatIndex", "primary_kind": "function", "primary_span": [391, 418], "def_symbols": ["computeHeatIndex"], "symbols": ["computeHeatIndex", "computes", "heat", "index", "based", "temperature", "fahrenheit", "and", "dewPoint", "Returns", "Source", "http", "www", "wpc", "ncep", "noaa", "gov", "html", "heatindex", "shtml", "heatindex_equation", "dewrh", "func", "currentConditionTransformer", "float64", "computeRelativeHumidity", "hiSteadman", "return", "hiRothfusz", "adjustment", "math", "Sqrt", "Abs", "else"], "doc_head": "// computeHeatIndex computes heat index based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns index in fahrenheit.\n//\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n// Source: http://www.wpc.ncep.noaa.gov/html/dewrh.shtml\nfunc (t *currentConditionTransformer) computeHeatIndex(temperature float64, dewPoint float64) float64 {\n\trh := t.computeRelativeHumidity(temperature, dewPoint)\n\thiSteadman := 0.5 * (temperature + 61 + ((temperature - 68) * 1.2) + (rh * 0.094))\n\tif hiSteadman < 80 {\n\t\treturn hiSteadman\n\t}\n\thiRothfusz := -42.379 +\n\t\t2.04901523*temperature +\n\t\t10.14333127*rh -\n\t\t0.22475541*temperature*rh -\n\t\t0.00683783*temperature*temperature -\n\t\t0.05481717*rh*rh +\n\t\t0.00122874*temperature*temperature*rh +\n\t\t0.00085282*temperature*rh*rh -\n\t\t0.00000199*temperature*temperature*rh*rh\n\tadjustment := 0.0\n\tif rh <= 13 && temperature >= 80 && temperature <= 112 {\n\t\tadjustment = ((13 - rh) / 4) * math.Sqrt((17-math.Abs(temperature-95))/17)\n\t} else if rh >= 85 && temperature >= 80 && temperature <= 87 {\n\t\tadjustment = ((rh - 85) / 10) * ((87 - temperature) / 5)\n\t}\n\treturn hiRothfusz + adjus", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).computeHeatIndex", "package": "clients", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "computeHeatIndex", "type_name": "currentConditionTransformer", "type_kind": "struct", "imports_used_minimal": ["math"], "symbols_referenced_strict": ["Abs", "Sqrt", "math.Abs", "math.Sqrt", "t.computeRelativeHumidity"], "header_context_minimal": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer", "summary_en": "This Go function calculates the heat index based on temperature and dew point in Fahrenheit using both Steadman's formula and Rothfusz's formula. It applies adjustments for specific conditions of relative humidity and temperature ranges.", "keywords_en": ["heat index", "temperature", "dew point", "steadman's formula", "rothfusz's formula", "relative humidity", "adjustment", "math.abs", "math.sqrt"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.561133", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "3757b55d293b03f7", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#10", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#12"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#12", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 12, "start_line": 419, "end_line": 440, "text": "// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}\n\n// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\n\treturn temperature\n}\n", "n_tokens": 221, "primary_symbol": "computeRelativeHumidity", "primary_kind": "function", "primary_span": [423, 440], "def_symbols": ["computeRelativeHumidity", "computeTemperatureFeelsLike"], "symbols": ["computeRelativeHumidity", "computeTemperatureFeelsLike", "computes", "relative", "humidity", "based", "temperature", "fahrenheit", "and", "dewPoint", "Returns", "Source", "http", "andrew", "rsmas", "miami", "edu", "bmcnoldy", "Humidity", "html", "func", "currentConditionTransformer", "float64", "return", "math", "Exp", "feels", "like", "heat", "index", "windSpeed", "Fahrenheit", "heatIndex", "computeWindChill"], "doc_head": "// computeRelativeHumidity computes relative humidity based on temperature in fahrenheit and dewPoint in fahrenheit.\n// Returns relative humidity in fahrenheit.\n//\n// Source: http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\nfunc (t *currentConditionTransformer) computeRelativeHumidity(temperature float64, dewPoint float64) float64 {\n\treturn (math.Exp((17.623*dewPoint)/(243.04+dewPoint)) / math.Exp((17.625*temperature)/(243.04+temperature))) * 100\n}\n// computeTemperatureFeelsLike computes feels like temperature based on temperature in fahrenheit, heat index in fahrenheit, and windSpeed in mi/h.\n// Returns relative humidity in Fahrenheit.\nfunc (t *currentConditionTransformer) computeTemperatureFeelsLike(temperature float64, heatIndex float64, windSpeed float64) float64 {\n\tif temperature > 80 {\n\t\treturn heatIndex\n\t}\n\tif temperature < 50 {\n\t\treturn t.computeWindChill(temperature, windSpeed)\n\t}\n\treturn temperature\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).computeRelativeHumidity", "package": "clients", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "", "method_name": "computeRelativeHumidity", "type_name": "currentConditionTransformer", "type_kind": "struct", "imports_used_minimal": ["math"], "symbols_referenced_strict": ["Exp", "math.Exp", "t.computeWindChill"], "header_context_minimal": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer", "summary_en": "The `currentConditionTransformer` struct has two methods: `computeRelativeHumidity`, which calculates relative humidity based on temperature and dew point; and `computeTemperatureFeelsLike`, which determines the feels like temperature using heat index and wind speed.", "keywords_en": ["temperature", "dewpoint", "relativehumidity", "heatindex", "windspeed", "computewindchill", "if-else", "float64", "math.exp"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.561701", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "5d86db58b2c18c27", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#11", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#13"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#13", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 13, "start_line": 441, "end_line": 461, "text": "// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\n\treturn temperature\n}\n\ntype dailyForecastTransformer struct{}\n\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}\n", "n_tokens": 193, "primary_symbol": "computeWindChill", "primary_kind": "function", "primary_span": [445, 461], "def_symbols": ["computeWindChill", "NewDailyForecastTransformer"], "symbols": ["computeWindChill", "NewDailyForecastTransformer", "Compute", "wind", "chill", "based", "temperature", "fahrenheit", "and", "windSpeed", "miles", "per", "hour", "Returns", "Source", "http", "www", "nws", "noaa", "gov", "winter", "windchill", "shtml", "func", "currentConditionTransformer", "float64", "isColdEnough", "isWindyEnough", "return", "math", "Pow", "type", "dailyForecastTransformer", "struct"], "doc_head": "// Compute wind chill based on temperature in fahrenheit and windSpeed in miles per hour.\n// Returns wind chill in fahrenheit.\n//\n// Source: http://www.nws.noaa.gov/om/winter/windchill.shtml\nfunc (t *currentConditionTransformer) computeWindChill(temperature float64, windSpeed float64) float64 {\n\tisColdEnough := temperature > -50 && temperature < 50\n\tisWindyEnough := windSpeed > 3 && windSpeed < 110\n\tif isColdEnough && isWindyEnough {\n\t\treturn 35.74 + 0.6215*temperature - 35.75*math.Pow(windSpeed, 0.16) + 0.4275*temperature*math.Pow(windSpeed, 0.16)\n\t}\n\treturn temperature\n}\ntype dailyForecastTransformer struct{}\nfunc NewDailyForecastTransformer() *dailyForecastTransformer {\n\treturn &dailyForecastTransformer{}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *currentConditionTransformer).computeWindChill", "package": "clients", "node_kind": "method", "receiver": "t *currentConditionTransformer", "function_name": "NewDailyForecastTransformer", "method_name": "computeWindChill", "type_name": "currentConditionTransformer", "type_kind": "struct", "imports_used_minimal": ["math"], "symbols_referenced_strict": ["NewDailyForecastTransformer", "Pow", "math.Pow"], "header_context_minimal": "package clients\nimport \"math\"\n// receiver: t *currentConditionTransformer", "summary_en": "The `computeWindChill` method calculates the wind chill based on temperature in Fahrenheit and wind speed in miles per hour. It uses a formula from NOAA to determine the wind chill. The `NewDailyForecastTransformer` function creates a new instance of `dailyForecastTransformer`. The code includes imports for the 'math' package and utilizes symbols like `Pow`, `math.Pow`, and `currentConditionTransformer`.", "keywords_en": ["computewindchill", "temperature", "windspeed", "fahrenheit", "wind chill", "noaa", "newdailyforecasttransformer", "dailyforecasttransformer", "pow", "math.pow", "currentconditiontransformer"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.562141", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "bb5736baa99ec1e2", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#12", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#14"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#14", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 14, "start_line": 462, "end_line": 508, "text": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location)\n\n\tif len(hfs) > 0 {\n\t\tdf.MinTemperature = utilities.Round(t.getMinimumTemperature(hfs), 1)\n\t\tdf.MaxTemperature = utilities.Round(t.getMaximumTemperature(hfs), 1)\n\t\tdf.AverageHumidityPercentage = int(math.Round(t.getAverageHumidityPercentage(hfs)))\n\n\t\troundedSunriseTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location))\n\t\troundedSunsetTime := roundToNextHour(*getTimeForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04:05\", location))\n\t\tdayHourlyForecasts := t.getDayHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationDay = utilities.Round(t.getTotalPrecipitation(dayHourlyForecasts), 1)\n\n\t\tnightHourlyForecasts := t.getNightHourlyForecasts(hfs, \"2006-01-02 15:04\", roundedSunriseTime, roundedSunsetTime, location)\n\t\tdf.PrecipitationNight = utilities.Round(t.getTotalPrecipitation(nightHourlyForecasts), 1)\n\t\tnightWeatherCode := t.getAverageWeatherCodeForHourlyForecasts(nightHourlyForecasts)\n\t\tdf.WeatherConditionNight = buildWeatherCondition(nightWeatherCode, \"\")\n\n\t\tif isSnowWeatherCode(d.WeatherCode) {\n\t\t\tdf.SnowDay = df.PrecipitationDay\n\t\t}\n\n\t\tif isSnowWeatherCode(nightWeatherCode) {\n\t\t\tdf.SnowNight = df.PrecipitationNight\n\t\t}\n\t}\n\n\treturn &df\n}\n", "n_tokens": 749, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [462, 508], "def_symbols": ["Transform"], "symbols": ["Transform", "func", "dailyForecastTransformer", "DailyCondition", "hfs", "HourlyCondition", "location", "time", "Location", "foreca", "var", "Epoch", "getUtcEpochForFormatInLocation", "Date", "MinTemperature", "utilities", "Round", "MaxTemperature", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Precipitation", "parsePrecipitationForWeatherCode", "PrecipitationProbability", "PrecipitationDay", "PrecipitationNight", "Wind", "buildWind", "WindDirection", "WindSpeed", "UVIndex", "AverageHumidityPercentage", "SnowDay", "SnowNight", "WeatherConditionNight", "SunriseEpoch", "fmt", "Sprintf", "SunriseTime", "SunsetEpoch", "SunsetTime", "len", "getMinimumTemperature", "getMaximumTemperature", "int", "math", "getAverageHumidityPercentage", "roundedSunriseTime", "roundToNextHour", "getTimeForFormatInLocation", "roundedSunsetTime", "dayHourlyForecasts", "getDayHourlyForecasts", "getTotalPrecipitation", "nightHourlyForecasts", "getNightHourlyForecasts", "nightWeatherCode", "getAverageWeatherCodeForHourlyForecasts", "isSnowWeatherCode", "return"], "doc_head": "func (t *dailyForecastTransformer) Transform(d *DailyCondition, hfs []*HourlyCondition, location *time.Location) *foreca.DailyCondition {\n\tvar df foreca.DailyCondition\n\tdf.Epoch = getUtcEpochForFormatInLocation(d.Date, \"2006-01-02\", location)\n\tdf.MinTemperature = utilities.Round(d.MinTemperature, 1)\n\tdf.MaxTemperature = utilities.Round(d.MaxTemperature, 1)\n\tdf.WeatherCondition = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(d.WeatherCode, d.Precipitation), 1)\n\tdf.PrecipitationProbability = d.PrecipitationProbability\n\tdf.PrecipitationDay = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.PrecipitationNight = utilities.Round(d.Precipitation*0.5, 1)\n\tdf.Wind = buildWind(d.WindDirection, d.WindSpeed)\n\tdf.UVIndex = d.UVIndex\n\tdf.AverageHumidityPercentage = 0\n\tdf.SnowDay = 0\n\tdf.SnowNight = 0\n\tdf.WeatherConditionNight = buildWeatherCondition(d.WeatherCode, d.WeatherDescription)\n\tdf.SunriseEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunriseTime), \"2006-01-02 15:04:05\", location)\n\tdf.SunsetEpoch = getUtcEpochForFormatInLocation(fmt.Sprintf(\"%s %s\", d.Date, d.SunsetTime), \"2006-01-02 15:04", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).Transform", "package": "clients", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "Transform", "type_name": "dailyForecastTransformer", "type_kind": "struct", "imports_used_minimal": ["fmt", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/utilities", "math", "time"], "symbols_referenced_strict": ["AverageHumidityPercentage", "DailyCondition", "Date", "Epoch", "HourlyCondition", "Location", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Round", "SnowDay", "SnowNight", "Sprintf", "SunriseEpoch", "SunriseTime", "SunsetEpoch", "SunsetTime", "Transform", "UVIndex", "WeatherCode", "WeatherCondition", "WeatherConditionNight", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "d.Date", "d.MaxTemperature", "d.MinTemperature", "d.Precipitation", "d.PrecipitationProbability", "d.SunriseTime", "d.SunsetTime", "d.UVIndex", "d.WeatherCode", "d.WeatherDescription", "d.WindDirection", "d.WindSpeed", "df.AverageHumidityPercentage", "df.Epoch", "df.MaxTemperature", "df.MinTemperature", "df.Precipitation", "df.PrecipitationDay", "df.PrecipitationNight", "df.PrecipitationProbability", "df.SnowDay", "df.SnowNight", "df.SunriseEpoch", "df.SunsetEpoch", "df.UVIndex", "df.WeatherCondition", "df.WeatherConditionNight", "df.Wind", "fmt.Sprintf", "foreca.DailyCondition", "math.Round", "t.getAverageHumidityPercentage", "t.getAverageWeatherCodeForHourlyForecasts", "t.getDayHourlyForecasts", "t.getMaximumTemperature", "t.getMinimumTemperature", "t.getNightHourlyForecasts", "t.getTotalPrecipitation", "time.Location", "utilities.Round"], "header_context_minimal": "package clients\nimport (\n    \"fmt\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n    \"math\"\n    \"time\"\n)\n// receiver: t *dailyForecastTransformer", "summary_en": "This Go function `Transform` in the `dailyForecastTransformer` struct converts a `DailyCondition` and an array of `HourlyCondition` into a `foreca.DailyCondition`, performing calculations and transformations on temperature, precipitation, weather conditions, and other attributes.", "keywords_en": ["transform", "dailyforecasttransformer", "dailycondition", "hourlycondition", "foreca", "round", "sunriseepoch", "sunsetepoch", "weathercode", "precipitation", "winddirection", "windspeed"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.562983", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "03c5118b8ee9e84b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#13", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#15"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#15", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 15, "start_line": 509, "end_line": 546, "text": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\n\treturn max\n}\n\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\n\treturn min\n}\n\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\n\tvar total int\n\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\n\treturn float64(total) / float64(len(hfs))\n}\n", "n_tokens": 194, "primary_symbol": "getMaximumTemperature", "primary_kind": "function", "primary_span": [509, 546], "def_symbols": ["getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage"], "symbols": ["getMaximumTemperature", "getMinimumTemperature", "getAverageHumidityPercentage", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "float64", "max", "math", "Inf", "for", "range", "Temperature", "return", "min", "len", "var", "total", "int", "HumidityPercentage"], "doc_head": "func (t *dailyForecastTransformer) getMaximumTemperature(hfs []*HourlyCondition) float64 {\n\tmax := math.Inf(-1)\n\tfor _, h := range hfs {\n\t\tif h.Temperature > max {\n\t\t\tmax = h.Temperature\n\t\t}\n\t}\n\treturn max\n}\nfunc (t *dailyForecastTransformer) getMinimumTemperature(hfs []*HourlyCondition) float64 {\n\tmin := math.Inf(1)\n\tfor _, h := range hfs {\n\t\tif h.Temperature < min {\n\t\t\tmin = h.Temperature\n\t\t}\n\t}\n\treturn min\n}\nfunc (t *dailyForecastTransformer) getAverageHumidityPercentage(hfs []*HourlyCondition) float64 {\n\tif len(hfs) == 0 {\n\t\treturn 0\n\t}\n\tvar total int\n\tfor _, h := range hfs {\n\t\ttotal += h.HumidityPercentage\n\t}\n\treturn float64(total) / float64(len(hfs))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).getMaximumTemperature", "package": "clients", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "getMaximumTemperature", "type_name": "dailyForecastTransformer", "type_kind": "struct", "imports_used_minimal": ["math"], "symbols_referenced_strict": ["HourlyCondition", "HumidityPercentage", "Inf", "Temperature", "h.HumidityPercentage", "h.Temperature", "math.Inf"], "header_context_minimal": "package clients\nimport \"math\"\n// receiver: t *dailyForecastTransformer", "summary_en": "This Go code defines methods for transforming hourly weather data into daily forecasts. It calculates the maximum and minimum temperatures and the average humidity percentage from a list of `HourlyCondition` structs.", "keywords_en": ["dailyforecasttransformer", "getmaximumtemperature", "getminimumtemperature", "getaveragehumiditypercentage", "hourlycondition", "temperature", "humiditypercentage", "math.inf", "for loop", "if statement"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.563417", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "c591a36dd6c4771b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#14", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#16"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#16", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 16, "start_line": 547, "end_line": 590, "text": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\n\treturn o\n}\n\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\n\treturn total\n}\n", "n_tokens": 306, "primary_symbol": "getDayHourlyForecasts", "primary_kind": "function", "primary_span": [547, 590], "def_symbols": ["getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation"], "symbols": ["getDayHourlyForecasts", "getNightHourlyForecasts", "getTotalPrecipitation", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "format", "string", "sunrise", "time", "Time", "sunset", "loc", "Location", "var", "for", "range", "err", "ParseInLocation", "Timestamp", "nil", "continue", "Hour", "append", "return", "float64", "total", "parsePrecipitationForWeatherCode", "WeatherCode", "Precipitation"], "doc_head": "func (t *dailyForecastTransformer) getDayHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif ts.Hour() >= sunrise.Hour() && ts.Hour() < sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\treturn o\n}\nfunc (t *dailyForecastTransformer) getNightHourlyForecasts(hfs []*HourlyCondition, format string, sunrise *time.Time, sunset *time.Time, loc *time.Location) []*HourlyCondition {\n\tvar o []*HourlyCondition\n\tfor _, f := range hfs {\n\t\tts, err := time.ParseInLocation(format, f.Timestamp, loc)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif ts.Hour() < sunrise.Hour() || ts.Hour() >= sunset.Hour() {\n\t\t\to = append(o, f)\n\t\t}\n\t}\n\treturn o\n}\nfunc (t *dailyForecastTransformer) getTotalPrecipitation(hfs []*HourlyCondition) float64 {\n\tvar total float64\n\tfor _, h := range hfs {\n\t\ttotal += parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation)\n\t}\n\treturn total\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).getDayHourlyForecasts", "package": "clients", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "getDayHourlyForecasts", "type_name": "dailyForecastTransformer", "type_kind": "struct", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Hour", "HourlyCondition", "Location", "ParseInLocation", "Precipitation", "Time", "Timestamp", "WeatherCode", "f.Timestamp", "h.Precipitation", "h.WeatherCode", "sunrise.Hour", "sunset.Hour", "time.Location", "time.ParseInLocation", "time.Time", "ts.Hour"], "header_context_minimal": "package clients\nimport \"time\"\n// receiver: t *dailyForecastTransformer", "summary_en": "This Go code defines methods for filtering hourly weather forecasts into daily categories (day and night) based on sunrise and sunset times. It also calculates the total precipitation from a list of hourly conditions.", "keywords_en": ["dailyforecasttransformer", "hourlycondition", "sunrise", "sunset", "parseinlocation", "time.location", "getdayhourlyforecasts", "getnighthourlyforecasts", "parseprecipitationforweathercode", "totalprecipitation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.564166", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "542a8e67cade6739", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#15", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#17"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#17", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 17, "start_line": 591, "end_line": 640, "text": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}\n", "n_tokens": 354, "primary_symbol": "getAverageWeatherCodeForHourlyForecasts", "primary_kind": "function", "primary_span": [591, 640], "def_symbols": ["getAverageWeatherCodeForHourlyForecasts"], "symbols": ["getAverageWeatherCodeForHourlyForecasts", "func", "dailyForecastTransformer", "hfs", "HourlyCondition", "string", "var", "days", "nights", "cloudiness", "precipitationRate", "precipitationType", "int", "for", "range", "tokens", "strings", "Split", "WeatherCode", "len", "switch", "case", "err", "strconv", "Atoi", "nil", "obs", "code", "else", "averageCloudiness", "math", "Round", "float64", "averagePrecipitationRate", "averagePrecipitationType", "return", "fmt", "Sprintf"], "doc_head": "func (t *dailyForecastTransformer) getAverageWeatherCodeForHourlyForecasts(hfs []*HourlyCondition) string {\n\tvar days, nights, cloudiness, precipitationRate, precipitationType int\n\tfor _, f := range hfs {\n\t\ttokens := strings.Split(f.WeatherCode, \"\")\n\t\tif len(tokens) > 0 {\n\t\t\tswitch tokens[0] {\n\t\t\tcase \"d\":\n\t\t\t\tdays++\n\t\t\tcase \"n\":\n\t\t\t\tnights++\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 1 {\n\t\t\tc, err := strconv.Atoi(tokens[1])\n\t\t\tif err != nil {\n\t\t\t\tcloudiness += c\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 2 {\n\t\t\tpr, err := strconv.Atoi(tokens[2])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationRate += pr\n\t\t\t}\n\t\t}\n\t\tif len(tokens) > 3 {\n\t\t\tpt, err := strconv.Atoi(tokens[3])\n\t\t\tif err != nil {\n\t\t\t\tprecipitationType += pt\n\t\t\t}\n\t\t}\n\t}\n\tobs := len(hfs)\n\tvar code string\n\tif days >= nights {\n\t\tcode = \"d\"\n\t} else {\n\t\tcode = \"n\"\n\t}\n\taverageCloudiness := math.Round(float64(cloudiness) / float64(obs))\n\taveragePrecipitationRate := math.Round(float64(precipitationRate) / float64(obs))\n\taveragePrecipitationType := math.Round(float64(precipitationType) / float64(obs))\n\treturn fmt.Sprintf(\"%s%d%d%d\", code, int(averageCloudiness), int(averagePrecipitationRate), int(averagePrecipitationType))\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *dailyForecastTransformer).getAverageWeatherCodeForHourlyForecasts", "package": "clients", "node_kind": "method", "receiver": "t *dailyForecastTransformer", "function_name": "", "method_name": "getAverageWeatherCodeForHourlyForecasts", "type_name": "dailyForecastTransformer", "type_kind": "struct", "imports_used_minimal": ["fmt", "math", "strconv", "strings"], "symbols_referenced_strict": ["Atoi", "HourlyCondition", "Round", "Split", "Sprintf", "WeatherCode", "f.WeatherCode", "fmt.Sprintf", "math.Round", "strconv.Atoi", "strings.Split"], "header_context_minimal": "package clients\nimport (\n    \"fmt\"\n    \"math\"\n    \"strconv\"\n    \"strings\"\n)\n// receiver: t *dailyForecastTransformer", "summary_en": "This Go function `getAverageWeatherCodeForHourlyForecasts` processes a slice of hourly weather conditions (`*HourlyCondition`) to calculate and return an average weather code. It analyzes the weather codes by splitting them into components (day/night, cloudiness, precipitation rate, precipitation type) and computes their averages.", "keywords_en": ["dailyforecasttransformer", "getaverageweathercodeforhourlyforecasts", "hourlycondition", "tokens", "weather code", "cloudiness", "precipitation rate", "precipitation type", "average calculation", "fmt.sprintf", "math.round"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.564707", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "77ba4ac94be7fcc3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#16", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#18"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#18", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 18, "start_line": 641, "end_line": 666, "text": "type hourlyForecastTransformer struct{}\n\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}\n\nfunc (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\n\treturn &hf\n}\n", "n_tokens": 271, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [643, 666], "def_symbols": ["NewHourlyForecastTransformer", "Transform"], "symbols": ["NewHourlyForecastTransformer", "Transform", "type", "hourlyForecastTransformer", "struct", "func", "return", "HourlyCondition", "location", "time", "Location", "foreca", "var", "Epoch", "getUtcEpochForFormatInLocation", "Timestamp", "Temperature", "utilities", "Round", "TemperatureFeelsLike", "WeatherCondition", "buildWeatherCondition", "WeatherCode", "WeatherDescription", "Precipitation", "parsePrecipitationForWeatherCode", "isSnowWeatherCode", "Snow", "PrecipitationProbability", "Wind", "buildWind", "WindDirection", "WindSpeed", "Pressure", "buildPressure", "HumidityPercentage", "UVIndex"], "doc_head": "type hourlyForecastTransformer struct{}\nfunc NewHourlyForecastTransformer() *hourlyForecastTransformer {\n\treturn &hourlyForecastTransformer{}\n}\nfunc (t *hourlyForecastTransformer) Transform(h *HourlyCondition, location *time.Location) *foreca.HourlyCondition {\n\tvar hf foreca.HourlyCondition\n\thf.Epoch = getUtcEpochForFormatInLocation(h.Timestamp, \"2006-01-02 15:04\", location)\n\thf.Temperature = utilities.Round(h.Temperature, 1)\n\thf.TemperatureFeelsLike = utilities.Round(h.TemperatureFeelsLike, 1)\n\thf.WeatherCondition = buildWeatherCondition(h.WeatherCode, h.WeatherDescription)\n\thf.Precipitation = utilities.Round(parsePrecipitationForWeatherCode(h.WeatherCode, h.Precipitation), 1)\n\tif isSnowWeatherCode(h.WeatherCode) {\n\t\thf.Snow = hf.Precipitation\n\t}\n\thf.PrecipitationProbability = h.PrecipitationProbability\n\thf.Wind = buildWind(h.WindDirection, h.WindSpeed)\n\thf.Pressure = buildPressure(h.Pressure)\n\thf.HumidityPercentage = h.HumidityPercentage\n\thf.UVIndex = h.UVIndex\n\treturn &hf\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *hourlyForecastTransformer).Transform", "package": "clients", "node_kind": "method", "receiver": "t *hourlyForecastTransformer", "function_name": "NewHourlyForecastTransformer", "method_name": "Transform", "type_name": "hourlyForecastTransformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/utilities", "time"], "symbols_referenced_strict": ["Epoch", "HourlyCondition", "HumidityPercentage", "Location", "NewHourlyForecastTransformer", "Precipitation", "PrecipitationProbability", "Pressure", "Round", "Snow", "Temperature", "TemperatureFeelsLike", "Timestamp", "Transform", "UVIndex", "WeatherCode", "WeatherCondition", "WeatherDescription", "Wind", "WindDirection", "WindSpeed", "foreca.HourlyCondition", "h.HumidityPercentage", "h.Precipitation", "h.PrecipitationProbability", "h.Pressure", "h.Temperature", "h.TemperatureFeelsLike", "h.Timestamp", "h.UVIndex", "h.WeatherCode", "h.WeatherDescription", "h.WindDirection", "h.WindSpeed", "hf.Epoch", "hf.HumidityPercentage", "hf.Precipitation", "hf.PrecipitationProbability", "hf.Pressure", "hf.Snow", "hf.Temperature", "hf.TemperatureFeelsLike", "hf.UVIndex", "hf.WeatherCondition", "hf.Wind", "time.Location", "utilities.Round"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n    \"time\"\n)\n// receiver: t *hourlyForecastTransformer", "summary_en": "The `Transform` method of the `hourlyForecastTransformer` struct converts a `HourlyCondition` object to a `foreca.HourlyCondition` object by setting various fields such as temperature, weather condition, precipitation, wind, and pressure. The `NewHourlyForecastTransformer` function creates a new instance of `hourlyForecastTransformer`.", "keywords_en": ["transform", "hourlyforecasttransformer", "newhourlyforecasttransformer", "humiditypercentage", "precipitation", "pressure", "temperature", "weathercondition", "wind"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.565204", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "44dedd4a3c47665b", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#17", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#19"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#19", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 19, "start_line": 667, "end_line": 688, "text": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\n\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\n\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}\n", "n_tokens": 151, "primary_symbol": "buildWeatherCondition", "primary_kind": "function", "primary_span": [667, 688], "def_symbols": ["buildWeatherCondition", "buildWindGust", "buildWind"], "symbols": ["buildWeatherCondition", "buildWindGust", "buildWind", "func", "code", "string", "description", "foreca", "WeatherCondition", "title", "cases", "Title", "language", "English", "return", "Code", "parseWeatherCode", "Description", "String", "direction", "speed", "float64", "gust", "WindGust", "Wind", "Gust", "Direction", "getWindDirection", "Speed", "utilities", "Round"], "doc_head": "func buildWeatherCondition(code string, description string) *foreca.WeatherCondition {\n\ttitle := cases.Title(language.English)\n\treturn &foreca.WeatherCondition{\n\t\tCode:        parseWeatherCode(code),\n\t\tDescription: title.String(description),\n\t}\n}\nfunc buildWindGust(direction string, speed float64, gust float64) *foreca.WindGust {\n\treturn &foreca.WindGust{\n\t\tWind: buildWind(direction, speed),\n\t\tGust: gust,\n\t}\n}\nfunc buildWind(direction string, speed float64) *foreca.Wind {\n\treturn &foreca.Wind{\n\t\tDirection: getWindDirection(direction),\n\t\tSpeed:     utilities.Round(speed, 2),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:buildWeatherCondition", "package": "clients", "node_kind": "function", "receiver": "", "function_name": "buildWeatherCondition", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/utilities", "golang.org/x/text/cases", "golang.org/x/text/language"], "symbols_referenced_strict": ["Description", "Direction", "English", "Gust", "Round", "Speed", "String", "Title", "WeatherCondition", "Wind", "WindGust", "cases.Title", "foreca.WeatherCondition", "foreca.Wind", "foreca.WindGust", "language.English", "title.String", "utilities.Round"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n    \"golang.org/x/text/cases\"\n    \"golang.org/x/text/language\"\n)", "summary_en": "This Go code defines functions to build weather-related objects for the `foreca` package. It includes `buildWeatherCondition`, `buildWindGust`, and `buildWind`. Each function constructs a specific type of object based on input parameters, utilizing utility functions like `parseWeatherCode`, `getWindDirection`, and `utilities.Round`.", "keywords_en": ["weather", "objects", "functions", "code", "wind", "gust", "direction", "speed", "weather condition", "builder", "utility"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.565592", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "0c849a81dcd52843", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#18", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#20"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#20", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 20, "start_line": 689, "end_line": 730, "text": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\n\treturn foreca.WeatherCode(wc)\n}\n", "n_tokens": 336, "primary_symbol": "parseWeatherCode", "primary_kind": "function", "primary_span": [689, 730], "def_symbols": ["parseWeatherCode"], "symbols": ["parseWeatherCode", "func", "code", "string", "foreca", "WeatherCode", "strings", "TrimLeft", "var", "switch", "case", "WeatherCodeClear", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeMostlyCloudy", "WeatherCodeCloudy", "WeatherCodeHazy", "WeatherCodeFog", "WeatherCodeChanceOfRain", "WeatherCodeRain", "WeatherCodeChanceOfThunderstorms", "WeatherCodeThunderstorms", "WeatherCodeChanceOfSleet", "WeatherCodeSleet", "WeatherCodeChanceOfSnow", "WeatherCodeSnow", "default", "return"], "doc_head": "func parseWeatherCode(code string) foreca.WeatherCode {\n\tc := strings.TrimLeft(code, \"dn\")\n\tvar wc string\n\tswitch c {\n\tcase \"000\":\n\t\twc = foreca.WeatherCodeClear\n\tcase \"100\":\n\t\twc = foreca.WeatherCodeMostlySunny\n\tcase \"200\":\n\t\twc = foreca.WeatherCodePartlyCloudy\n\tcase \"300\":\n\t\twc = foreca.WeatherCodeMostlyCloudy\n\tcase \"400\":\n\t\twc = foreca.WeatherCodeCloudy\n\tcase \"500\":\n\t\twc = foreca.WeatherCodeHazy\n\tcase \"600\":\n\t\twc = foreca.WeatherCodeFog\n\tcase \"210\", \"310\", \"410\":\n\t\twc = foreca.WeatherCodeChanceOfRain\n\tcase \"220\", \"320\", \"420\":\n\t\twc = foreca.WeatherCodeRain\n\tcase \"430\":\n\t\twc = foreca.WeatherCodeChanceOfThunderstorms\n\tcase \"240\", \"340\", \"440\":\n\t\twc = foreca.WeatherCodeThunderstorms\n\tcase \"211\", \"311\", \"411\":\n\t\twc = foreca.WeatherCodeChanceOfSleet\n\tcase \"221\", \"321\", \"421\", \"431\":\n\t\twc = foreca.WeatherCodeSleet\n\tcase \"212\", \"312\", \"412\":\n\t\twc = foreca.WeatherCodeChanceOfSnow\n\tcase \"222\", \"322\", \"422\", \"432\":\n\t\twc = foreca.WeatherCodeSnow\n\tdefault:\n\t\twc = foreca.WeatherCodeClear\n\t}\n\treturn foreca.WeatherCode(wc)\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:parseWeatherCode", "package": "clients", "node_kind": "function", "receiver": "", "function_name": "parseWeatherCode", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "strings"], "symbols_referenced_strict": ["TrimLeft", "WeatherCode", "WeatherCodeChanceOfRain", "WeatherCodeChanceOfSleet", "WeatherCodeChanceOfSnow", "WeatherCodeChanceOfThunderstorms", "WeatherCodeClear", "WeatherCodeCloudy", "WeatherCodeFog", "WeatherCodeHazy", "WeatherCodeMostlyCloudy", "WeatherCodeMostlySunny", "WeatherCodePartlyCloudy", "WeatherCodeRain", "WeatherCodeSleet", "WeatherCodeSnow", "WeatherCodeThunderstorms", "foreca.WeatherCode", "foreca.WeatherCodeChanceOfRain", "foreca.WeatherCodeChanceOfSleet", "foreca.WeatherCodeChanceOfSnow", "foreca.WeatherCodeChanceOfThunderstorms", "foreca.WeatherCodeClear", "foreca.WeatherCodeCloudy", "foreca.WeatherCodeFog", "foreca.WeatherCodeHazy", "foreca.WeatherCodeMostlyCloudy", "foreca.WeatherCodeMostlySunny", "foreca.WeatherCodePartlyCloudy", "foreca.WeatherCodeRain", "foreca.WeatherCodeSleet", "foreca.WeatherCodeSnow", "foreca.WeatherCodeThunderstorms", "strings.TrimLeft"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"strings\"\n)", "summary_en": "This function, `parseWeatherCode`, takes a weather code string as input and returns the corresponding `foreca.WeatherCode` enum value. It trims leading 'd' or 'n' characters from the input using `strings.TrimLeft`. The function then uses a switch statement to map specific codes to their respective weather conditions.", "keywords_en": ["parseweathercode", "weather code", "trimleft", "switch statement", "foreca.weathercode", "mapping", "code trimming", "weather conditions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.566108", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "a938e87eb0c4cca3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#19", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#21"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#21", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 21, "start_line": 731, "end_line": 752, "text": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\n\treturn utilities.ContainsString(snowyConditions, c)\n}\n\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\n\treturn precipitation\n}\n\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}\n", "n_tokens": 145, "primary_symbol": "isSnowWeatherCode", "primary_kind": "function", "primary_span": [731, 752], "def_symbols": ["isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection"], "symbols": ["isSnowWeatherCode", "parsePrecipitationForWeatherCode", "getWindDirection", "func", "code", "string", "bool", "strings", "TrimLeft", "snowyConditions", "return", "utilities", "ContainsString", "precipitation", "float64", "foreca", "WindDirection", "Abbreviation", "Degrees", "getWindDirectionInDegrees"], "doc_head": "func isSnowWeatherCode(code string) bool {\n\tc := strings.TrimLeft(code, \"dn\")\n\tsnowyConditions := []string{\"212\", \"312\", \"412\", \"222\", \"322\", \"422\", \"432\"}\n\treturn utilities.ContainsString(snowyConditions, c)\n}\nfunc parsePrecipitationForWeatherCode(code string, precipitation float64) float64 {\n\tif isSnowWeatherCode(code) {\n\t\treturn precipitation * 10\n\t}\n\treturn precipitation\n}\nfunc getWindDirection(d string) *foreca.WindDirection {\n\treturn &foreca.WindDirection{\n\t\tAbbreviation: d,\n\t\tDegrees:      getWindDirectionInDegrees(d),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:isSnowWeatherCode", "package": "clients", "node_kind": "function", "receiver": "", "function_name": "isSnowWeatherCode", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/utilities", "strings"], "symbols_referenced_strict": ["Abbreviation", "ContainsString", "Degrees", "TrimLeft", "WindDirection", "foreca.WindDirection", "strings.TrimLeft", "utilities.ContainsString"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/utilities\"\n    \"strings\"\n)", "summary_en": "This Go code defines functions to determine if a weather code indicates snowy conditions and to parse precipitation for weather codes. The `isSnowWeatherCode` function checks if a given code is in a list of known snow weather codes, while the `parsePrecipitationForWeatherCode` function multiplies precipitation by 10 if it's snow. The `getWindDirection` function returns a wind direction object based on an abbreviation.", "keywords_en": ["issnowweathercode", "parseprecipitationforweathercode", "getwinddirection", "weather code", "snowy conditions", "precipitation", "wind direction", "foreca.winddirection", "abbreviation", "degrees"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.566526", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "39bf97b0ce3fb057", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#20", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#22"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#22", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 22, "start_line": 753, "end_line": 791, "text": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}\n", "n_tokens": 192, "primary_symbol": "getWindDirectionInDegrees", "primary_kind": "function", "primary_span": [753, 791], "def_symbols": ["getWindDirectionInDegrees"], "symbols": ["getWindDirectionInDegrees", "func", "string", "float64", "switch", "case", "return", "NNE", "ENE", "ESE", "SSE", "SSW", "WSW", "WNW", "NNW", "default"], "doc_head": "func getWindDirectionInDegrees(d string) float64 {\n\tswitch d {\n\tcase \"N\":\n\t\treturn 0\n\tcase \"NNE\":\n\t\treturn 22.5\n\tcase \"NE\":\n\t\treturn 45\n\tcase \"ENE\":\n\t\treturn 67.5\n\tcase \"E\":\n\t\treturn 90\n\tcase \"ESE\":\n\t\treturn 112.5\n\tcase \"SE\":\n\t\treturn 135\n\tcase \"SSE\":\n\t\treturn 157.5\n\tcase \"S\":\n\t\treturn 180\n\tcase \"SSW\":\n\t\treturn 202.5\n\tcase \"SW\":\n\t\treturn 225\n\tcase \"WSW\":\n\t\treturn 247.5\n\tcase \"W\":\n\t\treturn 270\n\tcase \"WNW\":\n\t\treturn 292.5\n\tcase \"NW\":\n\t\treturn 315\n\tcase \"NNW\":\n\t\treturn 337.5\n\tdefault:\n\t\treturn 0\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:getWindDirectionInDegrees", "package": "clients", "node_kind": "function", "receiver": "", "function_name": "getWindDirectionInDegrees", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": [], "symbols_referenced_strict": [], "header_context_minimal": "package clients", "summary_en": "This Go code defines a simple function to calculate the factorial of a given number using recursion.", "keywords_en": ["go", "factorial", "recursion", "function", "integer", "error handling"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.566974", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "525d1bb1f6e08cd4", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#21", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#23"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#23", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 23, "start_line": 792, "end_line": 839, "text": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}\n\nfunc getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn ts.In(utc).Unix()\n}\n\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\n\treturn &ts\n}\n", "n_tokens": 289, "primary_symbol": "buildPressure", "primary_kind": "function", "primary_span": [792, 839], "def_symbols": ["buildPressure", "getUtcEpochForFormatInLocation", "getTimeForFormatInLocation"], "symbols": ["buildPressure", "getUtcEpochForFormatInLocation", "getTimeForFormatInLocation", "func", "string", "foreca", "Pressure", "pressureStr", "strings", "TrimLeft", "pressure", "err", "strconv", "ParseFloat", "nil", "var", "trend", "PressureTrend", "switch", "case", "PressureTrendFalling", "PressureTrendRising", "default", "PressureTrendSteady", "return", "Millibar", "Trend", "format", "location", "time", "Location", "int64", "utc", "LoadLocation", "UTC", "ParseInLocation", "Unix", "Time"], "doc_head": "func buildPressure(p string) *foreca.Pressure {\n\tpressureStr := strings.TrimLeft(p, \"<>=\")\n\tpressure, err := strconv.ParseFloat(pressureStr, 64)\n\tif err != nil {\n\t\tpressure = 0\n\t}\n\tvar t string\n\tif p != \"\" {\n\t\tt = p[0:1]\n\t}\n\tvar trend foreca.PressureTrend\n\tswitch t {\n\tcase \"<\":\n\t\ttrend = foreca.PressureTrendFalling\n\tcase \">\":\n\t\ttrend = foreca.PressureTrendRising\n\tdefault:\n\t\ttrend = foreca.PressureTrendSteady\n\t}\n\treturn &foreca.Pressure{\n\t\tMillibar: pressure,\n\t\tTrend:    trend,\n\t}\n}\nfunc getUtcEpochForFormatInLocation(t string, format string, location *time.Location) int64 {\n\tutc, _ := time.LoadLocation(\"UTC\")\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn 0\n\t}\n\treturn ts.In(utc).Unix()\n}\nfunc getTimeForFormatInLocation(t string, format string, location *time.Location) *time.Time {\n\tts, err := time.ParseInLocation(format, t, location)\n\tif err != nil {\n\t\treturn &time.Time{}\n\t}\n\treturn &ts\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:buildPressure", "package": "clients", "node_kind": "function", "receiver": "", "function_name": "buildPressure", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "strconv", "strings", "time"], "symbols_referenced_strict": ["LoadLocation", "Location", "Millibar", "ParseFloat", "ParseInLocation", "Pressure", "PressureTrend", "PressureTrendFalling", "PressureTrendRising", "PressureTrendSteady", "Time", "Trend", "TrimLeft", "Unix", "foreca.Pressure", "foreca.PressureTrend", "foreca.PressureTrendFalling", "foreca.PressureTrendRising", "foreca.PressureTrendSteady", "strconv.ParseFloat", "strings.TrimLeft", "time.LoadLocation", "time.Location", "time.ParseInLocation", "time.Time", "ts.In"], "header_context_minimal": "package clients\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"strconv\"\n    \"strings\"\n    \"time\"\n)", "summary_en": "The Go code defines functions to parse pressure data and convert time strings into UTC timestamps. The `buildPressure` function processes a string to extract pressure and trend information, returning a `foreca.Pressure` struct. The `getUtcEpochForFormatInLocation` and `getTimeForFormatInLocation` functions parse time strings according to specified formats and locations, converting them to UTC timestamps or `time.Time` objects respectively.", "keywords_en": ["buildpressure", "pressure", "millibar", "trend", "getutcepochforformatinlocation", "utc", "parseintime", "location", "unix", "gettimeforformatinlocation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.567500", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "518c65c044047cac", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#22", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#24"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#24", "repo_id": "foreca", "path": "adapters/clients/foreca_client.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go", "rel_path": "adapters/clients/foreca_client.go", "ext": "go", "language": "go", "chunk_number": 24, "start_line": 840, "end_line": 847, "text": "func roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\n\treturn &roundedTime\n\n}\n", "n_tokens": 62, "primary_symbol": "roundToNextHour", "primary_kind": "function", "primary_span": [840, 847], "def_symbols": ["roundToNextHour"], "symbols": ["roundToNextHour", "func", "time", "Time", "missingSeconds", "Unix", "roundedTime", "Add", "Duration", "Second", "return"], "doc_head": "func roundToNextHour(t time.Time) *time.Time {\n\tmissingSeconds := (60 * 60) - t.Unix()%(60*60)\n\troundedTime := time.Unix(t.Add(time.Duration(missingSeconds)*time.Second).Unix(), 0)\n\treturn &roundedTime\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:function:roundToNextHour", "package": "clients", "node_kind": "function", "receiver": "", "function_name": "roundToNextHour", "method_name": "", "type_name": "", "type_kind": "", "imports_used_minimal": ["time"], "symbols_referenced_strict": ["Add", "Duration", "Second", "Time", "Unix", "t.Add", "t.Unix", "time.Duration", "time.Second", "time.Time", "time.Unix"], "header_context_minimal": "package clients\nimport \"time\"", "summary_en": "The function `roundToNextHour` takes a `time.Time` object and rounds it up to the next hour by calculating the missing seconds until the next hour boundary and then adding those seconds.", "keywords_en": ["roundtonexthour", "time.time", "unix", "add", "duration", "second", "missingseconds", "roundedtime"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.567857", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "23edce6443677a3e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/foreca_client.go#23"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#1", "repo_id": "foreca", "path": "adapters/clients/mocks/foreca_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 44, "text": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n\n// Package mocks is a generated GoMock package.\npackage mocks\n\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}\n\n// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}\n", "n_tokens": 284, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [34, 44], "def_symbols": ["NewMockhttpClient", "EXPECT"], "symbols": ["NewMockhttpClient", "EXPECT", "Code", "generated", "MockGen", "NOT", "EDIT", "Source", "foreca_client", "Generated", "this", "command", "mockgen", "source", "destination", "mocks", "foreca_client_mocks", "package", "Package", "GoMock", "import", "http", "net", "reflect", "time", "foreca", "impalastudios", "com", "weather", "foreca_proxy", "internal", "clients", "adapters", "gomock", "uber", "org", "mock", "MockhttpClient", "httpClient", "interface", "type", "struct", "ctrl", "Controller", "recorder", "MockhttpClientMockRecorder", "the", "for", "creates", "new", "instance", "func", "return", "returns", "object", "that", "allows", "caller", "indicate", "expected", "use"], "doc_head": "// Code generated by MockGen. DO NOT EDIT.\n// Source: foreca_client.go\n//\n// Generated by this command:\n//\n//\tmockgen -source=foreca_client.go -destination=mocks/foreca_client_mocks.go -package=mocks\n//\n// Package mocks is a generated GoMock package.\npackage mocks\nimport (\n\thttp \"net/http\"\n\treflect \"reflect\"\n\ttime \"time\"\n\tforeca \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tclients \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n// MockhttpClient is a mock of httpClient interface.\ntype MockhttpClient struct {\n\tctrl     *gomock.Controller\n\trecorder *MockhttpClientMockRecorder\n}\n// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.\ntype MockhttpClientMockRecorder struct {\n\tmock *MockhttpClient\n}\n// NewMockhttpClient creates a new mock instance.\nfunc NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {\n\tmock := &MockhttpClient{ctrl: ctrl}\n\tmock.recorder = &MockhttpClientMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {\n\treturn m.recorder\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockhttpClient).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockhttpClient", "function_name": "NewMockhttpClient", "method_name": "EXPECT", "type_name": "MockhttpClient", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock"], "symbols_referenced_strict": ["Controller", "MockhttpClient", "MockhttpClientMockRecorder", "NewMockhttpClient", "gomock.Controller", "m.recorder", "mock.recorder"], "header_context_minimal": "package mocks\nimport \"go.uber.org/mock/gomock\"\n// receiver: m *MockhttpClient", "summary_en": "The provided Go code appears to be a simple HTTP server that listens on port 8080 and responds with 'Hello, World!' for any incoming GET requests.", "keywords_en": ["http", "server", "port", "8080", "get", "response", "hello, world!"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.574853", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "16b35fdf9ece275e", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#2", "repo_id": "foreca", "path": "adapters/clients/mocks/foreca_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 45, "end_line": 77, "text": "// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}\n", "n_tokens": 276, "primary_symbol": "Do", "primary_kind": "function", "primary_span": [46, 77], "def_symbols": ["Do", "NewMockrateLimiter"], "symbols": ["Do", "NewMockrateLimiter", "mocks", "base", "method", "func", "MockhttpClient", "arg0", "http", "Request", "Response", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "return", "indicates", "expected", "call", "MockhttpClientMockRecorder", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "MockrateLimiter", "rateLimiter", "interface", "type", "struct", "Controller", "recorder", "MockrateLimiterMockRecorder", "the", "for", "creates", "new", "instance"], "doc_head": "// Do mocks base method.\nfunc (m *MockhttpClient) Do(arg0 *http.Request) (*http.Response, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Do\", arg0)\n\tret0, _ := ret[0].(*http.Response)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Do indicates an expected call of Do.\nfunc (mr *MockhttpClientMockRecorder) Do(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Do\", reflect.TypeOf((*MockhttpClient)(nil).Do), arg0)\n}\n// MockrateLimiter is a mock of rateLimiter interface.\ntype MockrateLimiter struct {\n\tctrl     *gomock.Controller\n\trecorder *MockrateLimiterMockRecorder\n}\n// MockrateLimiterMockRecorder is the mock recorder for MockrateLimiter.\ntype MockrateLimiterMockRecorder struct {\n\tmock *MockrateLimiter\n}\n// NewMockrateLimiter creates a new mock instance.\nfunc NewMockrateLimiter(ctrl *gomock.Controller) *MockrateLimiter {\n\tmock := &MockrateLimiter{ctrl: ctrl}\n\tmock.recorder = &MockrateLimiterMockRecorder{mock}\n\treturn mock\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockhttpClient).Do", "package": "mocks", "node_kind": "method", "receiver": "m *MockhttpClient", "function_name": "NewMockrateLimiter", "method_name": "Do", "type_name": "MockhttpClient", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock", "net/http", "reflect"], "symbols_referenced_strict": ["Call", "Controller", "Helper", "MockhttpClient", "MockhttpClientMockRecorder", "MockrateLimiter", "MockrateLimiterMockRecorder", "NewMockrateLimiter", "RecordCallWithMethodType", "Request", "Response", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "http.Request", "http.Response", "m.ctrl", "mock.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"net/http\"\n    \"reflect\"\n)\n// receiver: m *MockhttpClient", "summary_en": "The provided Go code defines mocks for an HTTP client and a rate limiter. It includes methods to record and expect calls on these mock objects.", "keywords_en": ["mock", "httpclient", "rate limiter", "gomock", "controller", "recorder", "call", "method type", "reflect"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.575401", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "45168ed7594643a0", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#3", "repo_id": "foreca", "path": "adapters/clients/mocks/foreca_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 78, "end_line": 108, "text": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}\n\n// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}\n", "n_tokens": 258, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [79, 108], "def_symbols": ["EXPECT", "Acquire"], "symbols": ["EXPECT", "Acquire", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "func", "MockrateLimiter", "MockrateLimiterMockRecorder", "return", "recorder", "mocks", "base", "method", "arg0", "string", "int64", "error", "ctrl", "Helper", "ret", "Call", "ret0", "ret1", "indicates", "call", "any", "gomock", "mock", "RecordCallWithMethodType", "reflect", "TypeOf", "nil", "Mocktransformer", "transformer", "interface", "type", "struct", "Controller", "MocktransformerMockRecorder", "for"], "doc_head": "// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockrateLimiter) EXPECT() *MockrateLimiterMockRecorder {\n\treturn m.recorder\n}\n// Acquire mocks base method.\nfunc (m *MockrateLimiter) Acquire(arg0 string) (int64, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Acquire\", arg0)\n\tret0, _ := ret[0].(int64)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n// Acquire indicates an expected call of Acquire.\nfunc (mr *MockrateLimiterMockRecorder) Acquire(arg0 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Acquire\", reflect.TypeOf((*MockrateLimiter)(nil).Acquire), arg0)\n}\n// Mocktransformer is a mock of transformer interface.\ntype Mocktransformer struct {\n\tctrl     *gomock.Controller\n\trecorder *MocktransformerMockRecorder\n}\n// MocktransformerMockRecorder is the mock recorder for Mocktransformer.\ntype MocktransformerMockRecorder struct {\n\tmock *Mocktransformer\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *MockrateLimiter).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *MockrateLimiter", "function_name": "", "method_name": "EXPECT", "type_name": "MockrateLimiter", "type_kind": "struct", "imports_used_minimal": ["go.uber.org/mock/gomock", "reflect"], "symbols_referenced_strict": ["Acquire", "Call", "Controller", "Helper", "MockrateLimiter", "MockrateLimiterMockRecorder", "Mocktransformer", "MocktransformerMockRecorder", "RecordCallWithMethodType", "T.Helper", "TypeOf", "ctrl.RecordCallWithMethodType", "ctrl.T", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mr.mock", "reflect.TypeOf"], "header_context_minimal": "package mocks\nimport (\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n)\n// receiver: m *MockrateLimiter", "summary_en": "The provided Go code defines mock implementations for a rate limiter and a transformer interface using the gomock library. It includes methods to set expectations and record calls for these mocks.", "keywords_en": ["mock", "rate limiter", "transformer", "gomock", "expectations", "calls", "controller", "recorder", "method type", "reflection"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.575922", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "a450d00a30746070", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#4", "repo_id": "foreca", "path": "adapters/clients/mocks/foreca_client_mocks.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go", "rel_path": "adapters/clients/mocks/foreca_client_mocks.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 109, "end_line": 134, "text": "// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}\n\n// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}\n", "n_tokens": 239, "primary_symbol": "EXPECT", "primary_kind": "function", "primary_span": [110, 134], "def_symbols": ["NewMocktransformer", "EXPECT", "Transform"], "symbols": ["NewMocktransformer", "EXPECT", "Transform", "creates", "new", "mock", "instance", "func", "ctrl", "gomock", "Controller", "Mocktransformer", "recorder", "MocktransformerMockRecorder", "return", "returns", "object", "that", "allows", "the", "caller", "indicate", "expected", "use", "mocks", "base", "method", "arg0", "clients", "Response", "arg1", "time", "Location", "foreca", "Forecast", "Helper", "ret", "Call", "ret0", "indicates", "call", "any", "RecordCallWithMethodType", "reflect", "TypeOf", "nil"], "doc_head": "// NewMocktransformer creates a new mock instance.\nfunc NewMocktransformer(ctrl *gomock.Controller) *Mocktransformer {\n\tmock := &Mocktransformer{ctrl: ctrl}\n\tmock.recorder = &MocktransformerMockRecorder{mock}\n\treturn mock\n}\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *Mocktransformer) EXPECT() *MocktransformerMockRecorder {\n\treturn m.recorder\n}\n// Transform mocks base method.\nfunc (m *Mocktransformer) Transform(arg0 *clients.Response, arg1 *time.Location) *foreca.Forecast {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"Transform\", arg0, arg1)\n\tret0, _ := ret[0].(*foreca.Forecast)\n\treturn ret0\n}\n// Transform indicates an expected call of Transform.\nfunc (mr *MocktransformerMockRecorder) Transform(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Transform\", reflect.TypeOf((*Mocktransformer)(nil).Transform), arg0, arg1)\n}", "is_generated": true, "rank_boost": 0.35, "ast_path": "go:method:(m *Mocktransformer).EXPECT", "package": "mocks", "node_kind": "method", "receiver": "m *Mocktransformer", "function_name": "NewMocktransformer", "method_name": "EXPECT", "type_name": "Mocktransformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients", "go.uber.org/mock/gomock", "reflect", "time"], "symbols_referenced_strict": ["Call", "Controller", "Forecast", "Helper", "Location", "Mocktransformer", "MocktransformerMockRecorder", "NewMocktransformer", "RecordCallWithMethodType", "Response", "T.Helper", "Transform", "TypeOf", "clients.Response", "ctrl.RecordCallWithMethodType", "ctrl.T", "foreca.Forecast", "gomock.Call", "gomock.Controller", "m.ctrl", "m.recorder", "mock.recorder", "mr.mock", "reflect.TypeOf", "time.Location"], "header_context_minimal": "package mocks\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca/adapters/clients\"\n    \"go.uber.org/mock/gomock\"\n    \"reflect\"\n    \"time\"\n)\n// receiver: m *Mocktransformer", "summary_en": "This Go code defines a mock implementation of the `Mocktransformer` struct for testing purposes. It includes methods to create a new mock instance, set expectations on method calls, and define how those method calls should behave.", "keywords_en": ["mock", "testing", "gomock", "transform", "clients.response", "time.location", "foreca.forecast", "newmocktransformer", "expect"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.576510", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "7da7800d9cc31539", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/clients/mocks/foreca_client_mocks.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#1", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/transformers.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 21, "text": "package v0\n\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\ntype transformer struct{}\n\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\n\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}\n", "n_tokens": 142, "primary_symbol": "Transform", "primary_kind": "function", "primary_span": [10, 21], "def_symbols": ["newTransformer", "Transform"], "symbols": ["newTransformer", "Transform", "package", "import", "impalastudios", "com", "weather", "foreca_proxy", "internal", "foreca", "pkg", "type", "transformer", "struct", "func", "return", "Forecast", "ForecastResponse", "CurrentCondition", "transformCurrentCondition", "DailyForecasts", "transformDailyConditions", "DailyConditions", "HourlyForecasts", "transformHourlyConditions", "HourlyConditions"], "doc_head": "package v0\nimport (\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\ntype transformer struct{}\nfunc newTransformer() *transformer {\n\treturn &transformer{}\n}\nfunc (t *transformer) Transform(in *foreca.Forecast) *v0.ForecastResponse {\n\treturn &v0.ForecastResponse{\n\t\tCurrentCondition: t.transformCurrentCondition(in.CurrentCondition),\n\t\tDailyForecasts:   t.transformDailyConditions(in.DailyConditions),\n\t\tHourlyForecasts:  t.transformHourlyConditions(in.HourlyConditions),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).Transform", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "newTransformer", "method_name": "Transform", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["CurrentCondition", "DailyConditions", "DailyForecasts", "Forecast", "ForecastResponse", "HourlyConditions", "HourlyForecasts", "Transform", "foreca.Forecast", "in.CurrentCondition", "in.DailyConditions", "in.HourlyConditions", "t.transformCurrentCondition", "t.transformDailyConditions", "t.transformHourlyConditions", "v0.ForecastResponse"], "header_context_minimal": "package v0\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer", "summary_en": "The `Transform` method within the `transformer` struct converts a `foreca.Forecast` object into a `v0.ForecastResponse` by transforming its components: `CurrentCondition`, `DailyConditions`, and `HourlyConditions`. This transformation is handled by three separate methods: `transformCurrentCondition`, `transformDailyConditions`, and `transformHourlyConditions`.", "keywords_en": ["transform", "forecast", "currentcondition", "dailyconditions", "hourlyconditions", "transformer", "newtransformer", "foreca.forecast", "v0.forecastresponse"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.584173", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "534c239b930b0b14", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#2"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#2", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/transformers.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 2, "start_line": 22, "end_line": 42, "text": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}\n", "n_tokens": 249, "primary_symbol": "transformCurrentCondition", "primary_kind": "function", "primary_span": [22, 42], "def_symbols": ["transformCurrentCondition"], "symbols": ["transformCurrentCondition", "func", "transformer", "foreca", "CurrentCondition", "ForecastResponse_CurrentCondition", "return", "Epoch", "Visibility", "float32", "WeatherCondition", "transformWeatherCondition", "Precipitation", "NextHour", "ForecastResponse_CurrentCondition_NextHour", "WeatherConditionNextHour", "PrecipitationNextHour", "Temperature", "TemperatureFeelsLike", "WindGust", "transformWindGust", "DewPoint", "HeatIndex", "Pressure", "transformPressure", "UvIndex", "UVIndex", "HumidityPercentage", "int32"], "doc_head": "func (t *transformer) transformCurrentCondition(in *foreca.CurrentCondition) *v0.ForecastResponse_CurrentCondition {\n\treturn &v0.ForecastResponse_CurrentCondition{\n\t\tEpoch:            in.Epoch,\n\t\tVisibility:       float32(in.Visibility),\n\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherCondition),\n\t\tPrecipitation:    float32(in.Precipitation),\n\t\tNextHour: &v0.ForecastResponse_CurrentCondition_NextHour{\n\t\t\tWeatherCondition: t.transformWeatherCondition(in.WeatherConditionNextHour),\n\t\t\tPrecipitation:    float32(in.PrecipitationNextHour),\n\t\t},\n\t\tTemperature:          float32(in.Temperature),\n\t\tTemperatureFeelsLike: float32(in.TemperatureFeelsLike),\n\t\tWindGust:             t.transformWindGust(in.WindGust),\n\t\tDewPoint:             float32(in.DewPoint),\n\t\tHeatIndex:            float32(in.HeatIndex),\n\t\tPressure:             t.transformPressure(in.Pressure),\n\t\tUvIndex:              float32(in.UVIndex),\n\t\tHumidityPercentage:   int32(in.HumidityPercentage),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformCurrentCondition", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformCurrentCondition", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["CurrentCondition", "DewPoint", "Epoch", "ForecastResponse_CurrentCondition", "ForecastResponse_CurrentCondition_NextHour", "HeatIndex", "HumidityPercentage", "NextHour", "Precipitation", "PrecipitationNextHour", "Pressure", "Temperature", "TemperatureFeelsLike", "UVIndex", "UvIndex", "Visibility", "WeatherCondition", "WeatherConditionNextHour", "WindGust", "foreca.CurrentCondition", "in.DewPoint", "in.Epoch", "in.HeatIndex", "in.HumidityPercentage", "in.Precipitation", "in.PrecipitationNextHour", "in.Pressure", "in.Temperature", "in.TemperatureFeelsLike", "in.UVIndex", "in.Visibility", "in.WeatherCondition", "in.WeatherConditionNextHour", "in.WindGust", "t.transformPressure", "t.transformWeatherCondition", "t.transformWindGust", "v0.ForecastResponse_CurrentCondition", "v0.ForecastResponse_CurrentCondition_NextHour"], "header_context_minimal": "package v0\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer", "summary_en": "This function transforms a `foreca.CurrentCondition` into a `v0.ForecastResponse_CurrentCondition`, converting data types and using helper functions for specific transformations like weather condition and wind gust.", "keywords_en": ["currentcondition", "forecastresponse_currentcondition", "transform", "temperature", "humidity", "pressure", "weathercondition", "windgust", "helperfunctions"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.584715", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "ea50ed2ce064da90", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#1", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#3"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#3", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/transformers.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 3, "start_line": 43, "end_line": 72, "text": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.SunsetEpoch,\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n", "n_tokens": 314, "primary_symbol": "transformDailyConditions", "primary_kind": "function", "primary_span": [43, 72], "def_symbols": ["transformDailyConditions"], "symbols": ["transformDailyConditions", "func", "transformer", "foreca", "DailyCondition", "ForecastResponse_DailyForecast", "var", "conditions", "for", "range", "condition", "Epoch", "TemperatureMin", "float32", "MinTemperature", "TemperatureMax", "MaxTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "Snow", "SnowDay", "SnowNight", "PrecipitationProbability", "int32", "Wind", "transformWind", "AverageHumidityPercentage", "WeatherCondition", "transformWeatherCondition", "WeatherConditionNight", "UvIndex", "UVIndex", "SunriseEpoch", "SunsetEpoch", "append", "return"], "doc_head": "func (t *transformer) transformDailyConditions(in []*foreca.DailyCondition) []*v0.ForecastResponse_DailyForecast {\n\tvar conditions []*v0.ForecastResponse_DailyForecast\n\tfor _, d := range in {\n\t\tcondition := &v0.ForecastResponse_DailyForecast{\n\t\t\tEpoch:                     d.Epoch,\n\t\t\tTemperatureMin:            float32(d.MinTemperature),\n\t\t\tTemperatureMax:            float32(d.MaxTemperature),\n\t\t\tPrecipitation:             float32(d.Precipitation),\n\t\t\tPrecipitationDay:          float32(d.PrecipitationDay),\n\t\t\tPrecipitationNight:        float32(d.PrecipitationNight),\n\t\t\tSnow:                      float32(d.Snow),\n\t\t\tSnowDay:                   float32(d.SnowDay),\n\t\t\tSnowNight:                 float32(d.SnowNight),\n\t\t\tPrecipitationProbability:  int32(d.PrecipitationProbability),\n\t\t\tWind:                      t.transformWind(d.Wind),\n\t\t\tAverageHumidityPercentage: int32(d.AverageHumidityPercentage),\n\t\t\tWeatherCondition:          t.transformWeatherCondition(d.WeatherCondition),\n\t\t\tWeatherConditionNight:     t.transformWeatherCondition(d.WeatherConditionNight),\n\t\t\tUvIndex:                   float32(d.UVIndex),\n\t\t\tSunriseEpoch:              d.SunriseEpoch,\n\t\t\tSunsetEpoch:               d.Su", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformDailyConditions", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformDailyConditions", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["AverageHumidityPercentage", "DailyCondition", "Epoch", "ForecastResponse_DailyForecast", "MaxTemperature", "MinTemperature", "Precipitation", "PrecipitationDay", "PrecipitationNight", "PrecipitationProbability", "Snow", "SnowDay", "SnowNight", "SunriseEpoch", "SunsetEpoch", "TemperatureMax", "TemperatureMin", "UVIndex", "UvIndex", "WeatherCondition", "WeatherConditionNight", "Wind", "d.AverageHumidityPercentage", "d.Epoch", "d.MaxTemperature", "d.MinTemperature", "d.Precipitation", "d.PrecipitationDay", "d.PrecipitationNight", "d.PrecipitationProbability", "d.Snow", "d.SnowDay", "d.SnowNight", "d.SunriseEpoch", "d.SunsetEpoch", "d.UVIndex", "d.WeatherCondition", "d.WeatherConditionNight", "d.Wind", "foreca.DailyCondition", "t.transformWeatherCondition", "t.transformWind", "v0.ForecastResponse_DailyForecast"], "header_context_minimal": "package v0\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer", "summary_en": "The `transformDailyConditions` function in the `internal/foreca/adapters/handlers/grpc/v0/transformers.go` file converts a slice of `foreca.DailyCondition` objects into a slice of `v0.ForecastResponse_DailyForecast` objects by mapping fields and transforming nested objects using `t.transformWeatherCondition` and `t.transformWind` methods.", "keywords_en": ["transformdailyconditions", "slice conversion", "field mapping", "weather condition transformation", "wind transformation", "daily forecast", "epoch", "temperaturemin", "temperaturemax", "precipitation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.585343", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "90c527632c113f2a", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#2", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#4"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#4", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/transformers.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 4, "start_line": 73, "end_line": 96, "text": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\n\t\tconditions = append(conditions, condition)\n\t}\n\n\treturn conditions\n}\n", "n_tokens": 228, "primary_symbol": "transformHourlyConditions", "primary_kind": "function", "primary_span": [73, 96], "def_symbols": ["transformHourlyConditions"], "symbols": ["transformHourlyConditions", "func", "transformer", "foreca", "HourlyCondition", "ForecastResponse_HourlyForecast", "var", "conditions", "for", "range", "condition", "Epoch", "Temperature", "float32", "TemperatureFeelsLike", "WeatherCondition", "transformWeatherCondition", "Precipitation", "Snow", "PrecipitationProbability", "int32", "Wind", "transformWind", "Pressure", "transformPressure", "HumidityPercentage", "UvIndex", "UVIndex", "append", "return"], "doc_head": "func (t *transformer) transformHourlyConditions(in []*foreca.HourlyCondition) []*v0.ForecastResponse_HourlyForecast {\n\tvar conditions []*v0.ForecastResponse_HourlyForecast\n\tfor _, h := range in {\n\t\tcondition := &v0.ForecastResponse_HourlyForecast{\n\t\t\tEpoch:                    h.Epoch,\n\t\t\tTemperature:              float32(h.Temperature),\n\t\t\tTemperatureFeelsLike:     float32(h.TemperatureFeelsLike),\n\t\t\tWeatherCondition:         t.transformWeatherCondition(h.WeatherCondition),\n\t\t\tPrecipitation:            float32(h.Precipitation),\n\t\t\tSnow:                     float32(h.Snow),\n\t\t\tPrecipitationProbability: int32(h.PrecipitationProbability),\n\t\t\tWind:                     t.transformWind(h.Wind),\n\t\t\tPressure:                 t.transformPressure(h.Pressure),\n\t\t\tHumidityPercentage:       int32(h.HumidityPercentage),\n\t\t\tUvIndex:                  float32(h.UVIndex),\n\t\t}\n\t\tconditions = append(conditions, condition)\n\t}\n\treturn conditions\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformHourlyConditions", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformHourlyConditions", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["Epoch", "ForecastResponse_HourlyForecast", "HourlyCondition", "HumidityPercentage", "Precipitation", "PrecipitationProbability", "Pressure", "Snow", "Temperature", "TemperatureFeelsLike", "UVIndex", "UvIndex", "WeatherCondition", "Wind", "foreca.HourlyCondition", "h.Epoch", "h.HumidityPercentage", "h.Precipitation", "h.PrecipitationProbability", "h.Pressure", "h.Snow", "h.Temperature", "h.TemperatureFeelsLike", "h.UVIndex", "h.WeatherCondition", "h.Wind", "t.transformPressure", "t.transformWeatherCondition", "t.transformWind", "v0.ForecastResponse_HourlyForecast"], "header_context_minimal": "package v0\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer", "summary_en": "This function transforms a slice of `foreca.HourlyCondition` into a slice of `v0.ForecastResponse_HourlyForecast`. It iterates over each input condition, creating a new output condition with various fields transformed or cast as needed.", "keywords_en": ["transformhourlyconditions", "hourlycondition", "forecastresponse_hourlyforecast", "epoch", "temperature", "pressure", "humiditypercentage", "precipitationprobability", "uvindex", "wind", "transformweathercondition", "transformwind", "transformpressure"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.585823", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "83699b8437313bdf", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#3", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#5", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/transformers.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 5, "start_line": 97, "end_line": 132, "text": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\n\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}\n\nfunc (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}\n", "n_tokens": 246, "primary_symbol": "transformWind", "primary_kind": "function", "primary_span": [97, 132], "def_symbols": ["transformWind", "transformPressure", "transformWeatherCondition"], "symbols": ["transformWind", "transformPressure", "transformWeatherCondition", "func", "transformer", "foreca", "Wind", "ForecastResponse_Wind", "nil", "return", "Direction", "ForecastResponse_WindDirection", "Abbreviation", "Degrees", "float32", "Speed", "Pressure", "ForecastResponse_Pressure", "Millibar", "Trend", "int32", "WeatherCondition", "ForecastResponse_WeatherCondition", "Code", "string", "Description"], "doc_head": "func (t *transformer) transformWind(in *foreca.Wind) *v0.ForecastResponse_Wind {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_Wind{\n\t\tDirection: &v0.ForecastResponse_WindDirection{\n\t\t\tAbbreviation: in.Direction.Abbreviation,\n\t\t\tDegrees:      float32(in.Direction.Degrees),\n\t\t},\n\t\tSpeed: float32(in.Speed),\n\t}\n}\nfunc (t *transformer) transformPressure(in *foreca.Pressure) *v0.ForecastResponse_Pressure {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_Pressure{\n\t\tMillibar: float32(in.Millibar),\n\t\tTrend:    int32(in.Trend),\n\t}\n}\nfunc (t *transformer) transformWeatherCondition(in *foreca.WeatherCondition) *v0.ForecastResponse_WeatherCondition {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_WeatherCondition{\n\t\tCode:        string(in.Code),\n\t\tDescription: in.Description,\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformWind", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformWind", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["Abbreviation", "Degrees", "Description", "Direction", "ForecastResponse_Pressure", "ForecastResponse_WeatherCondition", "ForecastResponse_Wind", "ForecastResponse_WindDirection", "Millibar", "Pressure", "Speed", "Trend", "WeatherCondition", "Wind", "foreca.Pressure", "foreca.WeatherCondition", "foreca.Wind", "in.Code", "in.Description", "in.Direction", "in.Millibar", "in.Speed", "in.Trend", "v0.ForecastResponse_Pressure", "v0.ForecastResponse_WeatherCondition", "v0.ForecastResponse_Wind", "v0.ForecastResponse_WindDirection"], "header_context_minimal": "package v0\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer", "summary_en": "This Go code snippet defines methods to transform data from the `foreca` package into a format suitable for the `v0` package. Each method handles specific types (`Wind`, `Pressure`, `WeatherCondition`) and maps their properties to corresponding protobuf structures.", "keywords_en": ["transformer", "methods", "data transformation", "protobuf", "weather data", "millibar", "trend", "description"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.586502", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "160d003123c36e80", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#4", "next": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#6"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#6", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/transformers.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go", "rel_path": "adapters/handlers/grpc/v0/transformers.go", "ext": "go", "language": "go", "chunk_number": 6, "start_line": 133, "end_line": 143, "text": "func (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}\n", "n_tokens": 82, "primary_symbol": "transformWindGust", "primary_kind": "function", "primary_span": [133, 143], "def_symbols": ["transformWindGust"], "symbols": ["transformWindGust", "func", "transformer", "foreca", "WindGust", "ForecastResponse_CurrentCondition_WindGust", "nil", "return", "Wind", "transformWind", "Gust", "float32"], "doc_head": "func (t *transformer) transformWindGust(in *foreca.WindGust) *v0.ForecastResponse_CurrentCondition_WindGust {\n\tif in == nil {\n\t\treturn nil\n\t}\n\treturn &v0.ForecastResponse_CurrentCondition_WindGust{\n\t\tWind: t.transformWind(in.Wind),\n\t\tGust: float32(in.Gust),\n\t}\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(t *transformer).transformWindGust", "package": "v0", "node_kind": "method", "receiver": "t *transformer", "function_name": "", "method_name": "transformWindGust", "type_name": "transformer", "type_kind": "struct", "imports_used_minimal": ["go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["ForecastResponse_CurrentCondition_WindGust", "Gust", "Wind", "WindGust", "foreca.WindGust", "in.Gust", "in.Wind", "t.transformWind", "v0.ForecastResponse_CurrentCondition_WindGust"], "header_context_minimal": "package v0\nimport (\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: t *transformer", "summary_en": "This Go code defines a function to validate an email address using regular expressions.", "keywords_en": ["go", "function", "email validation", "regular expression", "pattern matching", "string manipulation", "error handling", "input validation"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.587052", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "4316b6710cc23ea3", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {"prev": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/transformers.go#5"}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go#1", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/server.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/server.go", "rel_path": "adapters/handlers/grpc/v0/server.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 37, "text": "package v0\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\n\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\n\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}\n\nfunc (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}\n", "n_tokens": 229, "primary_symbol": "toGrpcError", "primary_kind": "function", "primary_span": [22, 37], "def_symbols": ["NewServer", "toGrpcError"], "symbols": ["NewServer", "toGrpcError", "package", "import", "context", "errors", "impalastudios", "com", "weather", "foreca_proxy", "internal", "foreca", "pbv0", "pkg", "google", "golang", "org", "grpc", "codes", "status", "type", "forecastService", "interface", "GetForecastForLocation", "ctx", "Context", "int", "Forecast", "error", "Server", "struct", "UnimplementedForecaProxyServer", "service", "transformer", "func", "return", "err", "ErrLocationNotFound", "Error", "NotFound", "Location", "not", "found", "ErrRequestThrottled", "ResourceExhausted", "Too", "many", "requests", "Retry", "later", "Internal", "Something", "went", "wrong"], "doc_head": "package v0\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\ntype forecastService interface {\n\tGetForecastForLocation(ctx context.Context, id int) (*foreca.Forecast, error)\n}\ntype Server struct {\n\tpbv0.UnimplementedForecaProxyServer\n\tservice forecastService\n\tt       *transformer\n}\nfunc NewServer(service forecastService) *Server {\n\treturn &Server{service: service}\n}\nfunc (s *Server) toGrpcError(err error) error {\n\tif errors.Is(err, foreca.ErrLocationNotFound) {\n\t\treturn status.Error(codes.NotFound, \"Location not found.\")\n\t}\n\tif errors.Is(err, foreca.ErrRequestThrottled) {\n\t\treturn status.Error(codes.ResourceExhausted, \"Too many requests. Retry later.\")\n\t}\n\treturn status.Error(codes.Internal, \"Something went wrong.\")\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Server).toGrpcError", "package": "v0", "node_kind": "method", "receiver": "s *Server", "function_name": "NewServer", "method_name": "toGrpcError", "type_name": "Server", "type_kind": "struct", "imports_used_minimal": ["context", "errors", "go.impalastudios.com/weather/foreca_proxy/internal/foreca", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0", "google.golang.org/grpc/codes", "google.golang.org/grpc/status"], "symbols_referenced_strict": ["Context", "ErrLocationNotFound", "ErrRequestThrottled", "Error", "Forecast", "GetForecastForLocation", "Internal", "NewServer", "NotFound", "ResourceExhausted", "Server", "UnimplementedForecaProxyServer", "codes.Internal", "codes.NotFound", "codes.ResourceExhausted", "context.Context", "errors.Is", "foreca.ErrLocationNotFound", "foreca.ErrRequestThrottled", "foreca.Forecast", "pbv0.UnimplementedForecaProxyServer", "status.Error"], "header_context_minimal": "package v0\nimport (\n    \"context\"\n    \"errors\"\n    \"go.impalastudios.com/weather/foreca_proxy/internal/foreca\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n    \"google.golang.org/grpc/codes\"\n)\n// receiver: s *Server", "summary_en": "The `toGrpcError` method in the `Server` struct converts custom errors from the `foreca` package to gRPC error statuses. It handles specific error cases like location not found and request throttling, returning appropriate gRPC codes and messages.", "keywords_en": ["grpc", "error", "conversion", "location not found", "request throttled", "codes.notfound", "codes.resourceexhausted", "internal server error"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.589797", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "709d54c45487b795", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {}}
{"id": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go#1", "repo_id": "foreca", "path": "adapters/handlers/grpc/v0/getforecast.go", "abs_path": "/Users/zack.alatrash/CompanyRepos/crunding-weather_foreca_proxy_service-8aae91880849/internal/foreca/adapters/handlers/grpc/v0/getforecast.go", "rel_path": "adapters/handlers/grpc/v0/getforecast.go", "ext": "go", "language": "go", "chunk_number": 1, "start_line": 1, "end_line": 17, "text": "package v0\n\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\n\treturn s.t.Transform(forecast), nil\n}\n", "n_tokens": 112, "primary_symbol": "GetForecast", "primary_kind": "function", "primary_span": [8, 17], "def_symbols": ["GetForecast"], "symbols": ["GetForecast", "package", "import", "context", "pbv0", "impalastudios", "com", "weather", "foreca_proxy", "pkg", "func", "Server", "ctx", "Context", "ForecastRequest", "ForecastResponse", "error", "forecast", "err", "service", "GetForecastForLocation", "int", "GetLocationId", "nil", "return", "toGrpcError", "Transform"], "doc_head": "package v0\nimport (\n\t\"context\"\n\tpbv0 \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\nfunc (s *Server) GetForecast(ctx context.Context, in *pbv0.ForecastRequest) (*pbv0.ForecastResponse, error) {\n\tforecast, err := s.service.GetForecastForLocation(ctx, int(in.GetLocationId()))\n\tif err != nil {\n\t\treturn nil, s.toGrpcError(err)\n\t}\n\treturn s.t.Transform(forecast), nil\n}", "is_generated": false, "rank_boost": 1.0, "ast_path": "go:method:(s *Server).GetForecast", "package": "v0", "node_kind": "method", "receiver": "s *Server", "function_name": "", "method_name": "GetForecast", "type_name": "Server", "type_kind": "struct", "imports_used_minimal": ["context", "go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0"], "symbols_referenced_strict": ["Context", "ForecastRequest", "ForecastResponse", "GetForecast", "GetForecastForLocation", "GetLocationId", "Server", "Transform", "context.Context", "in.GetLocationId", "pbv0.ForecastRequest", "pbv0.ForecastResponse", "s.service", "s.t", "s.toGrpcError"], "header_context_minimal": "package v0\nimport (\n    \"context\"\n    \"go.impalastudios.com/weather/foreca_proxy/pkg/pb/v0\"\n)\n// receiver: s *Server", "summary_en": "The `GetForecast` method in the `Server` struct handles requests for weather forecasts. It retrieves the forecast for a specified location ID using a service and transforms it into a gRPC response.", "keywords_en": ["server", "getforecast", "context", "forecastrequest", "forecastresponse", "service", "getforecastforlocation", "togrpcerror", "transform"], "enrich_provenance": {"model": "qwen2.5-coder:7b-instruct", "created_at": "2025-10-08T14:33:30.591250", "file_synopsis_hash": "e3b0c44298fc1c14", "chunk_text_hash": "5a4a91440c441e08", "input_lang": "en", "language_policy": {"language": "en", "skip_non_en": true}, "skipped_reason": null}, "neighbors": {}}
